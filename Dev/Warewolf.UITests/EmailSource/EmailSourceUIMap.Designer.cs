// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Warewolf.UITests.EmailSource.EmailSourceUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class EmailSourceUIMap
    {
        
        #region Properties
        public MainStudioWindow MainStudioWindow
        {
            get
            {
                if ((this.mMainStudioWindow == null))
                {
                    this.mMainStudioWindow = new MainStudioWindow();
                }
                return this.mMainStudioWindow;
            }
        }
        #endregion
        
        #region Fields
        private MainStudioWindow mMainStudioWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MainStudioWindow : WpfWindow
    {
        
        public MainStudioWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.Name, "Warewolf", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DockManager DockManager
        {
            get
            {
                if ((this.mDockManager == null))
                {
                    this.mDockManager = new DockManager(this);
                }
                return this.mDockManager;
            }
        }
        #endregion
        
        #region Fields
        private DockManager mDockManager;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DockManager : WpfCustom
    {
        
        public DockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitPaneMiddle SplitPaneMiddle
        {
            get
            {
                if ((this.mSplitPaneMiddle == null))
                {
                    this.mSplitPaneMiddle = new SplitPaneMiddle(this);
                }
                return this.mSplitPaneMiddle;
            }
        }
        #endregion
        
        #region Fields
        private SplitPaneMiddle mSplitPaneMiddle;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneMiddle : WpfCustom
    {
        
        public SplitPaneMiddle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabManSplitPane TabManSplitPane
        {
            get
            {
                if ((this.mTabManSplitPane == null))
                {
                    this.mTabManSplitPane = new TabManSplitPane(this);
                }
                return this.mTabManSplitPane;
            }
        }
        #endregion
        
        #region Fields
        private TabManSplitPane mTabManSplitPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabManSplitPane : WpfCustom
    {
        
        public TabManSplitPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SplitPane_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabMan TabMan
        {
            get
            {
                if ((this.mTabMan == null))
                {
                    this.mTabMan = new TabMan(this);
                }
                return this.mTabMan;
            }
        }
        #endregion
        
        #region Fields
        private TabMan mTabMan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabMan : WpfTabList
    {
        
        public TabMan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public EmailSourceTab EmailSourceTab
        {
            get
            {
                if ((this.mEmailSourceTab == null))
                {
                    this.mEmailSourceTab = new EmailSourceTab(this);
                }
                return this.mEmailSourceTab;
            }
        }
        #endregion
        
        #region Fields
        private EmailSourceTab mEmailSourceTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EmailSourceTab : WpfTabPage
    {
        
        public EmailSourceTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.IEmailServiceSource]";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SendTestModelsCustom SendTestModelsCustom
        {
            get
            {
                if ((this.mSendTestModelsCustom == null))
                {
                    this.mSendTestModelsCustom = new SendTestModelsCustom(this);
                }
                return this.mSendTestModelsCustom;
            }
        }
        
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private SendTestModelsCustom mSendTestModelsCustom;
        
        private WpfButton mCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SendTestModelsCustom : WpfCustom
    {
        
        public SendTestModelsCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit FromTextBoxEdit
        {
            get
            {
                if ((this.mFromTextBoxEdit == null))
                {
                    this.mFromTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mFromTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "FromTextBox";
                    this.mFromTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFromTextBoxEdit;
            }
        }
        
        public ToTextBoxEdit ToTextBoxEdit
        {
            get
            {
                if ((this.mToTextBoxEdit == null))
                {
                    this.mToTextBoxEdit = new ToTextBoxEdit(this);
                }
                return this.mToTextBoxEdit;
            }
        }
        
        public WpfButton TestConnectionButton
        {
            get
            {
                if ((this.mTestConnectionButton == null))
                {
                    this.mTestConnectionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestConnectionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestSendCommand";
                    this.mTestConnectionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestConnectionButton;
            }
        }
        
        public WpfEdit TimeoutTextBoxEdit
        {
            get
            {
                if ((this.mTimeoutTextBoxEdit == null))
                {
                    this.mTimeoutTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTimeoutTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TimeoutTextBox";
                    this.mTimeoutTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTimeoutTextBoxEdit;
            }
        }
        
        public WpfEdit PortTextBoxEdit
        {
            get
            {
                if ((this.mPortTextBoxEdit == null))
                {
                    this.mPortTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPortTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PortTextBox";
                    this.mPortTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPortTextBoxEdit;
            }
        }
        
        public WpfRadioButton EnableSSLYesRadioButton
        {
            get
            {
                if ((this.mEnableSSLYesRadioButton == null))
                {
                    this.mEnableSSLYesRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mEnableSSLYesRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "EnableSslYes";
                    this.mEnableSSLYesRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEnableSSLYesRadioButton;
            }
        }
        
        public WpfRadioButton EnableSSLNORadioButton
        {
            get
            {
                if ((this.mEnableSSLNORadioButton == null))
                {
                    this.mEnableSSLNORadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mEnableSSLNORadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "EnableSslNo";
                    this.mEnableSSLNORadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEnableSSLNORadioButton;
            }
        }
        
        public WpfEdit PasswordTextBoxEdit
        {
            get
            {
                if ((this.mPasswordTextBoxEdit == null))
                {
                    this.mPasswordTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PasswordTextBox";
                    this.mPasswordTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordTextBoxEdit;
            }
        }
        
        public WpfEdit UserNameTextBoxEdit
        {
            get
            {
                if ((this.mUserNameTextBoxEdit == null))
                {
                    this.mUserNameTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUserNameTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UserNameTextBox";
                    this.mUserNameTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUserNameTextBoxEdit;
            }
        }
        
        public WpfEdit HostTextBoxEdit
        {
            get
            {
                if ((this.mHostTextBoxEdit == null))
                {
                    this.mHostTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mHostTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "HostTextBox";
                    this.mHostTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHostTextBoxEdit;
            }
        }
        
        public WpfText PassedText
        {
            get
            {
                if ((this.mPassedText == null))
                {
                    this.mPassedText = new WpfText(this);
                    #region Search Criteria
                    this.mPassedText.SearchProperties[WpfText.PropertyNames.Name] = "Passed";
                    this.mPassedText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassedText;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mFromTextBoxEdit;
        
        private ToTextBoxEdit mToTextBoxEdit;
        
        private WpfButton mTestConnectionButton;
        
        private WpfEdit mTimeoutTextBoxEdit;
        
        private WpfEdit mPortTextBoxEdit;
        
        private WpfRadioButton mEnableSSLYesRadioButton;
        
        private WpfRadioButton mEnableSSLNORadioButton;
        
        private WpfEdit mPasswordTextBoxEdit;
        
        private WpfEdit mUserNameTextBoxEdit;
        
        private WpfEdit mHostTextBoxEdit;
        
        private WpfText mPassedText;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ToTextBoxEdit : WpfEdit
    {
        
        public ToTextBoxEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ToTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ItemImage
        {
            get
            {
                if ((this.mItemImage == null))
                {
                    this.mItemImage = new WpfImage(this);
                    #region Search Criteria
                    this.mItemImage.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mItemImage;
        #endregion
    }
}
