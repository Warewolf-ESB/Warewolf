// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Warewolf.UITests.WorkflowTesting.WorkflowServiceTestingUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class WorkflowServiceTestingUIMap
    {
        
        #region Properties
        public MainStudioWindow MainStudioWindow
        {
            get
            {
                if ((this.mMainStudioWindow == null))
                {
                    this.mMainStudioWindow = new MainStudioWindow();
                }
                return this.mMainStudioWindow;
            }
        }
        #endregion
        
        #region Fields
        private MainStudioWindow mMainStudioWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MainStudioWindow : WpfWindow
    {
        
        public MainStudioWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.Name, "Warewolf", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DockManager DockManager
        {
            get
            {
                if ((this.mDockManager == null))
                {
                    this.mDockManager = new DockManager(this);
                }
                return this.mDockManager;
            }
        }
        
        public SplitPane_AutoIDCustom SplitPane_AutoIDCustom
        {
            get
            {
                if ((this.mSplitPane_AutoIDCustom == null))
                {
                    this.mSplitPane_AutoIDCustom = new SplitPane_AutoIDCustom(this);
                }
                return this.mSplitPane_AutoIDCustom;
            }
        }
        #endregion
        
        #region Fields
        private DockManager mDockManager;
        
        private SplitPane_AutoIDCustom mSplitPane_AutoIDCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DockManager : WpfCustom
    {
        
        public DockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitPaneMiddle SplitPaneMiddle
        {
            get
            {
                if ((this.mSplitPaneMiddle == null))
                {
                    this.mSplitPaneMiddle = new SplitPaneMiddle(this);
                }
                return this.mSplitPaneMiddle;
            }
        }
        #endregion
        
        #region Fields
        private SplitPaneMiddle mSplitPaneMiddle;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneMiddle : WpfCustom
    {
        
        public SplitPaneMiddle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabManSplitPane TabManSplitPane
        {
            get
            {
                if ((this.mTabManSplitPane == null))
                {
                    this.mTabManSplitPane = new TabManSplitPane(this);
                }
                return this.mTabManSplitPane;
            }
        }
        #endregion
        
        #region Fields
        private TabManSplitPane mTabManSplitPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabManSplitPane : WpfCustom
    {
        
        public TabManSplitPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SplitPane_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabMan TabMan
        {
            get
            {
                if ((this.mTabMan == null))
                {
                    this.mTabMan = new TabMan(this);
                }
                return this.mTabMan;
            }
        }
        #endregion
        
        #region Fields
        private TabMan mTabMan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabMan : WpfTabList
    {
        
        public TabMan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TestsTab TestsTab
        {
            get
            {
                if ((this.mTestsTab == null))
                {
                    this.mTestsTab = new TestsTab(this);
                }
                return this.mTestsTab;
            }
        }
        #endregion
        
        #region Fields
        private TestsTab mTestsTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestsTab : WpfTabPage
    {
        
        public TestsTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.StudioTestViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TabDescription
        {
            get
            {
                if ((this.mTabDescription == null))
                {
                    this.mTabDescription = new WpfText(this);
                    #region Search Criteria
                    this.mTabDescription.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTabDescription;
            }
        }
        
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        
        public WorkSurfaceContext WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTabDescription;
        
        private WpfButton mCloseButton;
        
        private WorkSurfaceContext mWorkSurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext : WpfCustom
    {
        
        public WorkSurfaceContext(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ServiceTestView ServiceTestView
        {
            get
            {
                if ((this.mServiceTestView == null))
                {
                    this.mServiceTestView = new ServiceTestView(this);
                }
                return this.mServiceTestView;
            }
        }
        #endregion
        
        #region Fields
        private ServiceTestView mServiceTestView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServiceTestView : WpfCustom
    {
        
        public ServiceTestView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceTestView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ServiceTestView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UrlText UrlText
        {
            get
            {
                if ((this.mUrlText == null))
                {
                    this.mUrlText = new UrlText(this);
                }
                return this.mUrlText;
            }
        }
        
        public WpfButton RunAllButton
        {
            get
            {
                if ((this.mRunAllButton == null))
                {
                    this.mRunAllButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunAllButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_RunAll_AutoID";
                    this.mRunAllButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunAllButton;
            }
        }
        
        public TestsListboxList TestsListboxList
        {
            get
            {
                if ((this.mTestsListboxList == null))
                {
                    this.mTestsListboxList = new TestsListboxList(this);
                }
                return this.mTestsListboxList;
            }
        }
        
        public WpfButton DuplicateButton
        {
            get
            {
                if ((this.mDuplicateButton == null))
                {
                    this.mDuplicateButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDuplicateButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Duplicate this test";
                    this.mDuplicateButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDuplicateButton;
            }
        }
        
        public WpfRadioButton WindowsRadioButton
        {
            get
            {
                if ((this.mWindowsRadioButton == null))
                {
                    this.mWindowsRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mWindowsRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "WindowsRadioButton";
                    this.mWindowsRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWindowsRadioButton;
            }
        }
        
        public WpfText TestNameText
        {
            get
            {
                if ((this.mTestNameText == null))
                {
                    this.mTestNameText = new WpfText(this);
                    #region Search Criteria
                    this.mTestNameText.SearchProperties[WpfText.PropertyNames.Name] = "Test Name";
                    this.mTestNameText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestNameText;
            }
        }
        
        public TestInputsTable TestInputsTable
        {
            get
            {
                if ((this.mTestInputsTable == null))
                {
                    this.mTestInputsTable = new TestInputsTable(this);
                }
                return this.mTestInputsTable;
            }
        }
        
        public TestOutputsTable TestOutputsTable
        {
            get
            {
                if ((this.mTestOutputsTable == null))
                {
                    this.mTestOutputsTable = new TestOutputsTable(this);
                }
                return this.mTestOutputsTable;
            }
        }
        
        public WpfRadioButton ErrorRadioButton
        {
            get
            {
                if ((this.mErrorRadioButton == null))
                {
                    this.mErrorRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mErrorRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "ErrorRadioButton";
                    this.mErrorRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mErrorRadioButton;
            }
        }
        
        public WpfRadioButton NoErrorRadioButton
        {
            get
            {
                if ((this.mNoErrorRadioButton == null))
                {
                    this.mNoErrorRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mNoErrorRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "NoErrorRadioButton";
                    this.mNoErrorRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNoErrorRadioButton;
            }
        }
        
        public WpfRadioButton UserRadioButton
        {
            get
            {
                if ((this.mUserRadioButton == null))
                {
                    this.mUserRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUserRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UserRadioButton";
                    this.mUserRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUserRadioButton;
            }
        }
        
        public WpfEdit PasswordTextBoxEdit
        {
            get
            {
                if ((this.mPasswordTextBoxEdit == null))
                {
                    this.mPasswordTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PasswordTextBox";
                    this.mPasswordTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordTextBoxEdit;
            }
        }
        
        public WpfEdit UsernameTextBoxEdit
        {
            get
            {
                if ((this.mUsernameTextBoxEdit == null))
                {
                    this.mUsernameTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUsernameTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UsernameTextBox";
                    this.mUsernameTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUsernameTextBoxEdit;
            }
        }
        
        public WpfText TestUrlText
        {
            get
            {
                if ((this.mTestUrlText == null))
                {
                    this.mTestUrlText = new WpfText(this);
                    #region Search Criteria
                    this.mTestUrlText.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mTestUrlText.SearchProperties[WpfText.PropertyNames.Name] = " ";
                    this.mTestUrlText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestUrlText;
            }
        }
        
        public WpfEdit TestNameTextbox
        {
            get
            {
                if ((this.mTestNameTextbox == null))
                {
                    this.mTestNameTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTestNameTextbox.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mTestNameTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestNameTextbox;
            }
        }
        
        public StepTestDataTreeTree StepTestDataTreeTree
        {
            get
            {
                if ((this.mStepTestDataTreeTree == null))
                {
                    this.mStepTestDataTreeTree = new StepTestDataTreeTree(this);
                }
                return this.mStepTestDataTreeTree;
            }
        }
        
        public UserControl_1Custom UserControl_1Custom
        {
            get
            {
                if ((this.mUserControl_1Custom == null))
                {
                    this.mUserControl_1Custom = new UserControl_1Custom(this);
                }
                return this.mUserControl_1Custom;
            }
        }
        
        public UIInfragisticsControlsTreeItem UIInfragisticsControlsTreeItem
        {
            get
            {
                if ((this.mUIInfragisticsControlsTreeItem == null))
                {
                    this.mUIInfragisticsControlsTreeItem = new UIInfragisticsControlsTreeItem(this);
                }
                return this.mUIInfragisticsControlsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UrlText mUrlText;
        
        private WpfButton mRunAllButton;
        
        private TestsListboxList mTestsListboxList;
        
        private WpfButton mDuplicateButton;
        
        private WpfRadioButton mWindowsRadioButton;
        
        private WpfText mTestNameText;
        
        private TestInputsTable mTestInputsTable;
        
        private TestOutputsTable mTestOutputsTable;
        
        private WpfRadioButton mErrorRadioButton;
        
        private WpfRadioButton mNoErrorRadioButton;
        
        private WpfRadioButton mUserRadioButton;
        
        private WpfEdit mPasswordTextBoxEdit;
        
        private WpfEdit mUsernameTextBoxEdit;
        
        private WpfText mTestUrlText;
        
        private WpfEdit mTestNameTextbox;
        
        private StepTestDataTreeTree mStepTestDataTreeTree;
        
        private UserControl_1Custom mUserControl_1Custom;
        
        private UIInfragisticsControlsTreeItem mUIInfragisticsControlsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UrlText : WpfText
    {
        
        public UrlText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Instance] = "1";
            this.SearchProperties[WpfText.PropertyNames.Name] = " ";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink UrlHyperlink
        {
            get
            {
                if ((this.mUrlHyperlink == null))
                {
                    this.mUrlHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mUrlHyperlink.SearchProperties[WpfHyperlink.PropertyNames.AutomationId] = "RunAllTestsUrl";
                    this.mUrlHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUrlHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mUrlHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestsListboxList : WpfList
    {
        
        public TestsListboxList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "TestsListbox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CreateTest CreateTest
        {
            get
            {
                if ((this.mCreateTest == null))
                {
                    this.mCreateTest = new CreateTest(this);
                }
                return this.mCreateTest;
            }
        }
        
        public Test1 Test1
        {
            get
            {
                if ((this.mTest1 == null))
                {
                    this.mTest1 = new Test1(this);
                }
                return this.mTest1;
            }
        }
        
        public Test2 Test2
        {
            get
            {
                if ((this.mTest2 == null))
                {
                    this.mTest2 = new Test2(this);
                }
                return this.mTest2;
            }
        }
        
        public Test3 Test3
        {
            get
            {
                if ((this.mTest3 == null))
                {
                    this.mTest3 = new Test3(this);
                }
                return this.mTest3;
            }
        }
        
        public Test4 Test4
        {
            get
            {
                if ((this.mTest4 == null))
                {
                    this.mTest4 = new Test4(this);
                }
                return this.mTest4;
            }
        }
        
        public Test5 Test5
        {
            get
            {
                if ((this.mTest5 == null))
                {
                    this.mTest5 = new Test5(this);
                }
                return this.mTest5;
            }
        }
        #endregion
        
        #region Fields
        private CreateTest mCreateTest;
        
        private Test1 mTest1;
        
        private Test2 mTest2;
        
        private Test3 mTest3;
        
        private Test4 mTest4;
        
        private Test5 mTest5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateTest : WpfListItem
    {
        
        public CreateTest(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.DummyServiceTest";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton CreateTestButton
        {
            get
            {
                if ((this.mCreateTestButton == null))
                {
                    this.mCreateTestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCreateTestButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Create a new test";
                    this.mCreateTestButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCreateTestButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCreateTestButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test1 : WpfListItem
    {
        
        public Test1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Instance] = "1";
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ServiceTestModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TestEnabledSelector
        {
            get
            {
                if ((this.mTestEnabledSelector == null))
                {
                    this.mTestEnabledSelector = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTestEnabledSelector.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Enable or Ignore this test";
                    this.mTestEnabledSelector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestEnabledSelector;
            }
        }
        
        public WpfButton RunButton
        {
            get
            {
                if ((this.mRunButton == null))
                {
                    this.mRunButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Run this test", PropertyExpressionOperator.Contains));
                    this.mRunButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunButton;
            }
        }
        
        public WpfButton StopButton
        {
            get
            {
                if ((this.mStopButton == null))
                {
                    this.mStopButton = new WpfButton(this);
                    #region Search Criteria
                    this.mStopButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Stop this test";
                    this.mStopButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStopButton;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Delete this test";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        
        public WpfButton DisabledDeleteButton
        {
            get
            {
                if ((this.mDisabledDeleteButton == null))
                {
                    this.mDisabledDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDisabledDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Cannot delete an enabled test";
                    this.mDisabledDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisabledDeleteButton;
            }
        }
        
        public WpfText TestNameDisplay
        {
            get
            {
                if ((this.mTestNameDisplay == null))
                {
                    this.mTestNameDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mTestNameDisplay.SearchProperties[WpfText.PropertyNames.HelpText] = "Test Name";
                    this.mTestNameDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestNameDisplay;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.HelpText] = "Pending";
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Passing
        {
            get
            {
                if ((this.mPassing == null))
                {
                    this.mPassing = new WpfText(this);
                    #region Search Criteria
                    this.mPassing.SearchProperties[WpfText.PropertyNames.HelpText] = "Passed";
                    this.mPassing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassing;
            }
        }
        
        public WpfText Failing
        {
            get
            {
                if ((this.mFailing == null))
                {
                    this.mFailing = new WpfText(this);
                    #region Search Criteria
                    this.mFailing.SearchProperties[WpfText.PropertyNames.HelpText] = "Failed";
                    this.mFailing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailing;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText NeverRunDisplay
        {
            get
            {
                if ((this.mNeverRunDisplay == null))
                {
                    this.mNeverRunDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mNeverRunDisplay.SearchProperties[WpfText.PropertyNames.Name] = "Never run";
                    this.mNeverRunDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNeverRunDisplay;
            }
        }
        
        public WpfText RunTimeDisplay
        {
            get
            {
                if ((this.mRunTimeDisplay == null))
                {
                    this.mRunTimeDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mRunTimeDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunTimeDisplay;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTestEnabledSelector;
        
        private WpfButton mRunButton;
        
        private WpfButton mStopButton;
        
        private WpfButton mDeleteButton;
        
        private WpfButton mDisabledDeleteButton;
        
        private WpfText mTestNameDisplay;
        
        private WpfText mPending;
        
        private WpfText mPassing;
        
        private WpfText mFailing;
        
        private WpfText mInvalid;
        
        private WpfText mNeverRunDisplay;
        
        private WpfText mRunTimeDisplay;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test2 : WpfListItem
    {
        
        public Test2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ServiceTestModel";
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TestEnabledSelector
        {
            get
            {
                if ((this.mTestEnabledSelector == null))
                {
                    this.mTestEnabledSelector = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTestEnabledSelector.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Enable or Ignore this test";
                    this.mTestEnabledSelector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestEnabledSelector;
            }
        }
        
        public WpfButton RunButton
        {
            get
            {
                if ((this.mRunButton == null))
                {
                    this.mRunButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Run this test", PropertyExpressionOperator.Contains));
                    this.mRunButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunButton;
            }
        }
        
        public WpfButton StopButton
        {
            get
            {
                if ((this.mStopButton == null))
                {
                    this.mStopButton = new WpfButton(this);
                    #region Search Criteria
                    this.mStopButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Stop this test";
                    this.mStopButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStopButton;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Delete this test";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        
        public WpfButton DisabledDeleteButton
        {
            get
            {
                if ((this.mDisabledDeleteButton == null))
                {
                    this.mDisabledDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDisabledDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Cannot delete an enabled test";
                    this.mDisabledDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisabledDeleteButton;
            }
        }
        
        public WpfText TestNameDisplay
        {
            get
            {
                if ((this.mTestNameDisplay == null))
                {
                    this.mTestNameDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mTestNameDisplay.SearchProperties[WpfText.PropertyNames.HelpText] = "Test Name";
                    this.mTestNameDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestNameDisplay;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.HelpText] = "Pending";
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Passing
        {
            get
            {
                if ((this.mPassing == null))
                {
                    this.mPassing = new WpfText(this);
                    #region Search Criteria
                    this.mPassing.SearchProperties[WpfText.PropertyNames.HelpText] = "Passed";
                    this.mPassing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassing;
            }
        }
        
        public WpfText Failing
        {
            get
            {
                if ((this.mFailing == null))
                {
                    this.mFailing = new WpfText(this);
                    #region Search Criteria
                    this.mFailing.SearchProperties[WpfText.PropertyNames.HelpText] = "Failed";
                    this.mFailing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailing;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText NeverRunDisplay
        {
            get
            {
                if ((this.mNeverRunDisplay == null))
                {
                    this.mNeverRunDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mNeverRunDisplay.SearchProperties[WpfText.PropertyNames.Name] = "Never run";
                    this.mNeverRunDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNeverRunDisplay;
            }
        }
        
        public WpfText RunTimeDisplay
        {
            get
            {
                if ((this.mRunTimeDisplay == null))
                {
                    this.mRunTimeDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mRunTimeDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunTimeDisplay;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTestEnabledSelector;
        
        private WpfButton mRunButton;
        
        private WpfButton mStopButton;
        
        private WpfButton mDeleteButton;
        
        private WpfButton mDisabledDeleteButton;
        
        private WpfText mTestNameDisplay;
        
        private WpfText mPending;
        
        private WpfText mPassing;
        
        private WpfText mFailing;
        
        private WpfText mInvalid;
        
        private WpfText mNeverRunDisplay;
        
        private WpfText mRunTimeDisplay;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test3 : WpfListItem
    {
        
        public Test3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ServiceTestModel";
            this.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TestEnabledSelector
        {
            get
            {
                if ((this.mTestEnabledSelector == null))
                {
                    this.mTestEnabledSelector = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTestEnabledSelector.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Enable or Ignore this test";
                    this.mTestEnabledSelector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestEnabledSelector;
            }
        }
        
        public WpfButton RunButton
        {
            get
            {
                if ((this.mRunButton == null))
                {
                    this.mRunButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Run this test", PropertyExpressionOperator.Contains));
                    this.mRunButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunButton;
            }
        }
        
        public WpfButton StopButton
        {
            get
            {
                if ((this.mStopButton == null))
                {
                    this.mStopButton = new WpfButton(this);
                    #region Search Criteria
                    this.mStopButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Stop this test";
                    this.mStopButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStopButton;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Delete this test";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        
        public WpfButton DisabledDeleteButton
        {
            get
            {
                if ((this.mDisabledDeleteButton == null))
                {
                    this.mDisabledDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDisabledDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Cannot delete an enabled test";
                    this.mDisabledDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisabledDeleteButton;
            }
        }
        
        public WpfText TestNameDisplay
        {
            get
            {
                if ((this.mTestNameDisplay == null))
                {
                    this.mTestNameDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mTestNameDisplay.SearchProperties[WpfText.PropertyNames.HelpText] = "Test Name";
                    this.mTestNameDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestNameDisplay;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.HelpText] = "Pending";
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Passing
        {
            get
            {
                if ((this.mPassing == null))
                {
                    this.mPassing = new WpfText(this);
                    #region Search Criteria
                    this.mPassing.SearchProperties[WpfText.PropertyNames.HelpText] = "Passed";
                    this.mPassing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassing;
            }
        }
        
        public WpfText Failing
        {
            get
            {
                if ((this.mFailing == null))
                {
                    this.mFailing = new WpfText(this);
                    #region Search Criteria
                    this.mFailing.SearchProperties[WpfText.PropertyNames.HelpText] = "Failed";
                    this.mFailing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailing;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText NeverRunDisplay
        {
            get
            {
                if ((this.mNeverRunDisplay == null))
                {
                    this.mNeverRunDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mNeverRunDisplay.SearchProperties[WpfText.PropertyNames.Name] = "Never run";
                    this.mNeverRunDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNeverRunDisplay;
            }
        }
        
        public WpfText RunTimeDisplay
        {
            get
            {
                if ((this.mRunTimeDisplay == null))
                {
                    this.mRunTimeDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mRunTimeDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunTimeDisplay;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTestEnabledSelector;
        
        private WpfButton mRunButton;
        
        private WpfButton mStopButton;
        
        private WpfButton mDeleteButton;
        
        private WpfButton mDisabledDeleteButton;
        
        private WpfText mTestNameDisplay;
        
        private WpfText mPending;
        
        private WpfText mPassing;
        
        private WpfText mFailing;
        
        private WpfText mInvalid;
        
        private WpfText mNeverRunDisplay;
        
        private WpfText mRunTimeDisplay;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test4 : WpfListItem
    {
        
        public Test4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ServiceTestModel";
            this.SearchProperties[WpfListItem.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TestEnabledSelector
        {
            get
            {
                if ((this.mTestEnabledSelector == null))
                {
                    this.mTestEnabledSelector = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTestEnabledSelector.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Enable or Ignore this test";
                    this.mTestEnabledSelector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestEnabledSelector;
            }
        }
        
        public WpfButton RunButton
        {
            get
            {
                if ((this.mRunButton == null))
                {
                    this.mRunButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Run this test", PropertyExpressionOperator.Contains));
                    this.mRunButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunButton;
            }
        }
        
        public WpfButton StopButton
        {
            get
            {
                if ((this.mStopButton == null))
                {
                    this.mStopButton = new WpfButton(this);
                    #region Search Criteria
                    this.mStopButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Stop this test";
                    this.mStopButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStopButton;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Delete this test";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        
        public WpfButton DisabledDeleteButton
        {
            get
            {
                if ((this.mDisabledDeleteButton == null))
                {
                    this.mDisabledDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDisabledDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Cannot delete an enabled test";
                    this.mDisabledDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisabledDeleteButton;
            }
        }
        
        public WpfText TestNameDisplay
        {
            get
            {
                if ((this.mTestNameDisplay == null))
                {
                    this.mTestNameDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mTestNameDisplay.SearchProperties[WpfText.PropertyNames.HelpText] = "Test Name";
                    this.mTestNameDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestNameDisplay;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.HelpText] = "Pending";
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Passing
        {
            get
            {
                if ((this.mPassing == null))
                {
                    this.mPassing = new WpfText(this);
                    #region Search Criteria
                    this.mPassing.SearchProperties[WpfText.PropertyNames.HelpText] = "Passed";
                    this.mPassing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassing;
            }
        }
        
        public WpfText Failing
        {
            get
            {
                if ((this.mFailing == null))
                {
                    this.mFailing = new WpfText(this);
                    #region Search Criteria
                    this.mFailing.SearchProperties[WpfText.PropertyNames.HelpText] = "Failed";
                    this.mFailing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailing;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText NeverRunDisplay
        {
            get
            {
                if ((this.mNeverRunDisplay == null))
                {
                    this.mNeverRunDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mNeverRunDisplay.SearchProperties[WpfText.PropertyNames.Name] = "Never run";
                    this.mNeverRunDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNeverRunDisplay;
            }
        }
        
        public WpfText RunTimeDisplay
        {
            get
            {
                if ((this.mRunTimeDisplay == null))
                {
                    this.mRunTimeDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mRunTimeDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunTimeDisplay;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTestEnabledSelector;
        
        private WpfButton mRunButton;
        
        private WpfButton mStopButton;
        
        private WpfButton mDeleteButton;
        
        private WpfButton mDisabledDeleteButton;
        
        private WpfText mTestNameDisplay;
        
        private WpfText mPending;
        
        private WpfText mPassing;
        
        private WpfText mFailing;
        
        private WpfText mInvalid;
        
        private WpfText mNeverRunDisplay;
        
        private WpfText mRunTimeDisplay;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test5 : WpfListItem
    {
        
        public Test5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ServiceTestModel";
            this.SearchProperties[WpfListItem.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TestEnabledSelector
        {
            get
            {
                if ((this.mTestEnabledSelector == null))
                {
                    this.mTestEnabledSelector = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTestEnabledSelector.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Enable or Ignore this test";
                    this.mTestEnabledSelector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestEnabledSelector;
            }
        }
        
        public WpfButton RunButton
        {
            get
            {
                if ((this.mRunButton == null))
                {
                    this.mRunButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Run this test", PropertyExpressionOperator.Contains));
                    this.mRunButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunButton;
            }
        }
        
        public WpfButton StopButton
        {
            get
            {
                if ((this.mStopButton == null))
                {
                    this.mStopButton = new WpfButton(this);
                    #region Search Criteria
                    this.mStopButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Stop this test";
                    this.mStopButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStopButton;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Delete this test";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        
        public WpfButton DisabledDeleteButton
        {
            get
            {
                if ((this.mDisabledDeleteButton == null))
                {
                    this.mDisabledDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDisabledDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Cannot delete an enabled test";
                    this.mDisabledDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisabledDeleteButton;
            }
        }
        
        public WpfText TestNameDisplay
        {
            get
            {
                if ((this.mTestNameDisplay == null))
                {
                    this.mTestNameDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mTestNameDisplay.SearchProperties[WpfText.PropertyNames.HelpText] = "Test Name";
                    this.mTestNameDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestNameDisplay;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.HelpText] = "Pending";
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Passing
        {
            get
            {
                if ((this.mPassing == null))
                {
                    this.mPassing = new WpfText(this);
                    #region Search Criteria
                    this.mPassing.SearchProperties[WpfText.PropertyNames.HelpText] = "Passed";
                    this.mPassing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassing;
            }
        }
        
        public WpfText Failing
        {
            get
            {
                if ((this.mFailing == null))
                {
                    this.mFailing = new WpfText(this);
                    #region Search Criteria
                    this.mFailing.SearchProperties[WpfText.PropertyNames.HelpText] = "Failed";
                    this.mFailing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailing;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText NeverRunDisplay
        {
            get
            {
                if ((this.mNeverRunDisplay == null))
                {
                    this.mNeverRunDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mNeverRunDisplay.SearchProperties[WpfText.PropertyNames.Name] = "Never run";
                    this.mNeverRunDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNeverRunDisplay;
            }
        }
        
        public WpfText RunTimeDisplay
        {
            get
            {
                if ((this.mRunTimeDisplay == null))
                {
                    this.mRunTimeDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mRunTimeDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunTimeDisplay;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTestEnabledSelector;
        
        private WpfButton mRunButton;
        
        private WpfButton mStopButton;
        
        private WpfButton mDeleteButton;
        
        private WpfButton mDisabledDeleteButton;
        
        private WpfText mTestNameDisplay;
        
        private WpfText mPending;
        
        private WpfText mPassing;
        
        private WpfText mFailing;
        
        private WpfText mInvalid;
        
        private WpfText mNeverRunDisplay;
        
        private WpfText mRunTimeDisplay;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestInputsTable : WpfTable
    {
        
        public TestInputsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "UI_TestInputsDev2DataGrid_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row1 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row1(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row1 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row1 : WpfRow
    {
        
        public Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Cell Cell
        {
            get
            {
                if ((this.mCell == null))
                {
                    this.mCell = new Cell(this);
                }
                return this.mCell;
            }
        }
        #endregion
        
        #region Fields
        private Cell mCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell : WpfCell
    {
        
        public Cell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseComboBox IntellisenseComboBox
        {
            get
            {
                if ((this.mIntellisenseComboBox == null))
                {
                    this.mIntellisenseComboBox = new IntellisenseComboBox(this);
                }
                return this.mIntellisenseComboBox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseComboBox mIntellisenseComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseComboBox : WpfComboBox
    {
        
        public IntellisenseComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_TestInputsValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.Instance] = "1";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestOutputsTable : WpfTable
    {
        
        public TestOutputsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "UI_TestOutputsDev2DataGrid_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row11 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row11(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row11 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row11 : WpfRow
    {
        
        public Row11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Cell1 Cell
        {
            get
            {
                if ((this.mCell == null))
                {
                    this.mCell = new Cell1(this);
                }
                return this.mCell;
            }
        }
        #endregion
        
        #region Fields
        private Cell1 mCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell1 : WpfCell
    {
        
        public Cell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseComboBox1 IntellisenseComboBox
        {
            get
            {
                if ((this.mIntellisenseComboBox == null))
                {
                    this.mIntellisenseComboBox = new IntellisenseComboBox1(this);
                }
                return this.mIntellisenseComboBox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseComboBox1 mIntellisenseComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseComboBox1 : WpfComboBox
    {
        
        public IntellisenseComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_TestOutputsValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.Instance] = "1";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StepTestDataTreeTree : WpfTree
    {
        
        public StepTestDataTreeTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "StepTestDataTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SetOutputTreeItem SetOutputTreeItem
        {
            get
            {
                if ((this.mSetOutputTreeItem == null))
                {
                    this.mSetOutputTreeItem = new SetOutputTreeItem(this);
                }
                return this.mSetOutputTreeItem;
            }
        }
        
        public AssignToNameTreeItem AssignToNameTreeItem
        {
            get
            {
                if ((this.mAssignToNameTreeItem == null))
                {
                    this.mAssignToNameTreeItem = new AssignToNameTreeItem(this);
                }
                return this.mAssignToNameTreeItem;
            }
        }
        
        public SequenceTreeItem SequenceTreeItem
        {
            get
            {
                if ((this.mSequenceTreeItem == null))
                {
                    this.mSequenceTreeItem = new SequenceTreeItem(this);
                }
                return this.mSequenceTreeItem;
            }
        }
        
        public ForeachTreeItem ForeachTreeItem
        {
            get
            {
                if ((this.mForeachTreeItem == null))
                {
                    this.mForeachTreeItem = new ForeachTreeItem(this);
                }
                return this.mForeachTreeItem;
            }
        }
        
        public DecisionTreeItem DecisionTreeItem
        {
            get
            {
                if ((this.mDecisionTreeItem == null))
                {
                    this.mDecisionTreeItem = new DecisionTreeItem(this);
                }
                return this.mDecisionTreeItem;
            }
        }
        
        public RandomTreeItem RandomTreeItem
        {
            get
            {
                if ((this.mRandomTreeItem == null))
                {
                    this.mRandomTreeItem = new RandomTreeItem(this);
                }
                return this.mRandomTreeItem;
            }
        }
        
        public DotnetDllTreeItem DotnetDllTreeItem
        {
            get
            {
                if ((this.mDotnetDllTreeItem == null))
                {
                    this.mDotnetDllTreeItem = new DotnetDllTreeItem(this);
                }
                return this.mDotnetDllTreeItem;
            }
        }
        
        public DiceRollTreeItem DiceRollTreeItem
        {
            get
            {
                if ((this.mDiceRollTreeItem == null))
                {
                    this.mDiceRollTreeItem = new DiceRollTreeItem(this);
                }
                return this.mDiceRollTreeItem;
            }
        }
        
        public OutputMessageStep OutputMessageStep
        {
            get
            {
                if ((this.mOutputMessageStep == null))
                {
                    this.mOutputMessageStep = new OutputMessageStep(this);
                }
                return this.mOutputMessageStep;
            }
        }
        #endregion
        
        #region Fields
        private SetOutputTreeItem mSetOutputTreeItem;
        
        private AssignToNameTreeItem mAssignToNameTreeItem;
        
        private SequenceTreeItem mSequenceTreeItem;
        
        private ForeachTreeItem mForeachTreeItem;
        
        private DecisionTreeItem mDecisionTreeItem;
        
        private RandomTreeItem mRandomTreeItem;
        
        private DotnetDllTreeItem mDotnetDllTreeItem;
        
        private DiceRollTreeItem mDiceRollTreeItem;
        
        private OutputMessageStep mOutputMessageStep;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SetOutputTreeItem : WpfTreeItem
    {
        
        public SetOutputTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OutputMessageAssert OutputMessageAssert
        {
            get
            {
                if ((this.mOutputMessageAssert == null))
                {
                    this.mOutputMessageAssert = new OutputMessageAssert(this);
                }
                return this.mOutputMessageAssert;
            }
        }
        #endregion
        
        #region Fields
        private OutputMessageAssert mOutputMessageAssert;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputMessageAssert : WpfExpander
    {
        
        public OutputMessageAssert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "UI_ServiceTestTestStepExpander_Set the output variable (1)_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallDataGridTable SmallDataGridTable
        {
            get
            {
                if ((this.mSmallDataGridTable == null))
                {
                    this.mSmallDataGridTable = new SmallDataGridTable(this);
                }
                return this.mSmallDataGridTable;
            }
        }
        
        public AssertHeader AssertHeader
        {
            get
            {
                if ((this.mAssertHeader == null))
                {
                    this.mAssertHeader = new AssertHeader(this);
                }
                return this.mAssertHeader;
            }
        }
        #endregion
        
        #region Fields
        private SmallDataGridTable mSmallDataGridTable;
        
        private AssertHeader mAssertHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallDataGridTable : WpfTable
    {
        
        public SmallDataGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "UI_StepOutputs_Set the output variable (1)_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row12 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row12(this);
                }
                return this.mRow1;
            }
        }
        
        public ColumnHeadersPrHeader ColumnHeadersPrHeader
        {
            get
            {
                if ((this.mColumnHeadersPrHeader == null))
                {
                    this.mColumnHeadersPrHeader = new ColumnHeadersPrHeader(this);
                }
                return this.mColumnHeadersPrHeader;
            }
        }
        #endregion
        
        #region Fields
        private Row12 mRow1;
        
        private ColumnHeadersPrHeader mColumnHeadersPrHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row12 : WpfRow
    {
        
        public Row12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResultCell ResultCell
        {
            get
            {
                if ((this.mResultCell == null))
                {
                    this.mResultCell = new ResultCell(this);
                }
                return this.mResultCell;
            }
        }
        
        public AssertOperatorCell AssertOperatorCell
        {
            get
            {
                if ((this.mAssertOperatorCell == null))
                {
                    this.mAssertOperatorCell = new AssertOperatorCell(this);
                }
                return this.mAssertOperatorCell;
            }
        }
        
        public StatusViewCell StatusViewCell
        {
            get
            {
                if ((this.mStatusViewCell == null))
                {
                    this.mStatusViewCell = new StatusViewCell(this);
                }
                return this.mStatusViewCell;
            }
        }
        
        public AssertValueCell AssertValueCell
        {
            get
            {
                if ((this.mAssertValueCell == null))
                {
                    this.mAssertValueCell = new AssertValueCell(this);
                }
                return this.mAssertValueCell;
            }
        }
        
        public Cell2 Cell
        {
            get
            {
                if ((this.mCell == null))
                {
                    this.mCell = new Cell2(this);
                }
                return this.mCell;
            }
        }
        #endregion
        
        #region Fields
        private ResultCell mResultCell;
        
        private AssertOperatorCell mAssertOperatorCell;
        
        private StatusViewCell mStatusViewCell;
        
        private AssertValueCell mAssertValueCell;
        
        private Cell2 mCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultCell : WpfCell
    {
        
        public ResultCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Name] = "Item: Warewolf.Studio.ViewModels.ServiceTestOutput, Column Display Index: 1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit AssertValue
        {
            get
            {
                if ((this.mAssertValue == null))
                {
                    this.mAssertValue = new WpfEdit(this);
                    #region Search Criteria
                    this.mAssertValue.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_AssertValue_AutoID";
                    this.mAssertValue.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertValue.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertValue;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAssertValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOperatorCell : WpfCell
    {
        
        public AssertOperatorCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox AssertOperatorComboBox
        {
            get
            {
                if ((this.mAssertOperatorComboBox == null))
                {
                    this.mAssertOperatorComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mAssertOperatorComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_AssertOps_AutoID";
                    this.mAssertOperatorComboBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertOperatorComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertOperatorComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mAssertOperatorComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StatusViewCell : WpfCell
    {
        
        public StatusViewCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "0";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPending.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mPending;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertValueCell : WpfCell
    {
        
        public AssertValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit AssertValue
        {
            get
            {
                if ((this.mAssertValue == null))
                {
                    this.mAssertValue = new WpfEdit(this);
                    #region Search Criteria
                    this.mAssertValue.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_AssertValue_AutoID";
                    this.mAssertValue.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertValue.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertValue;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAssertValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell2 : WpfCustom
    {
        
        public Cell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit AssertValue
        {
            get
            {
                if ((this.mAssertValue == null))
                {
                    this.mAssertValue = new WpfEdit(this);
                    #region Search Criteria
                    this.mAssertValue.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_AssertValue_AutoID";
                    this.mAssertValue.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertValue.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertValue;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAssertValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ColumnHeadersPrHeader : WpfControl
    {
        
        public ColumnHeadersPrHeader(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Header";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_ColumnHeadersPresenter";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfControl HeaderItem
        {
            get
            {
                if ((this.mHeaderItem == null))
                {
                    this.mHeaderItem = new WpfControl(this);
                    #region Search Criteria
                    this.mHeaderItem.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
                    this.mHeaderItem.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
                    this.mHeaderItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mHeaderItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHeaderItem;
            }
        }
        
        public WpfControl Result
        {
            get
            {
                if ((this.mResult == null))
                {
                    this.mResult = new WpfControl(this);
                    #region Search Criteria
                    this.mResult.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
                    this.mResult.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
                    this.mResult.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mResult.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResult;
            }
        }
        
        public MockOrAssert MockOrAssert
        {
            get
            {
                if ((this.mMockOrAssert == null))
                {
                    this.mMockOrAssert = new MockOrAssert(this);
                }
                return this.mMockOrAssert;
            }
        }
        
        public WpfControl Value
        {
            get
            {
                if ((this.mValue == null))
                {
                    this.mValue = new WpfControl(this);
                    #region Search Criteria
                    this.mValue.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
                    this.mValue.SearchProperties[WpfControl.PropertyNames.Instance] = "4";
                    this.mValue.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mValue.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValue;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mHeaderItem;
        
        private WpfControl mResult;
        
        private MockOrAssert mMockOrAssert;
        
        private WpfControl mValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MockOrAssert : WpfControl
    {
        
        public MockOrAssert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton MockRadioButton
        {
            get
            {
                if ((this.mMockRadioButton == null))
                {
                    this.mMockRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mMockRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Mock";
                    this.mMockRadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mMockRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMockRadioButton;
            }
        }
        
        public WpfRadioButton AssertRadioButton
        {
            get
            {
                if ((this.mAssertRadioButton == null))
                {
                    this.mAssertRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mAssertRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_AssertRadioButton_AutoID";
                    this.mAssertRadioButton.SearchProperties[WpfRadioButton.PropertyNames.HelpText] = "ServiceTestStepAssertRadioButtonTooltip";
                    this.mAssertRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Assert";
                    this.mAssertRadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mMockRadioButton;
        
        private WpfRadioButton mAssertRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertHeader : WpfButton
    {
        
        public AssertHeader(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteAssertButton
        {
            get
            {
                if ((this.mDeleteAssertButton == null))
                {
                    this.mDeleteAssertButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteAssertButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_TestStepDelete_AutoID";
                    this.mDeleteAssertButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteAssertButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteAssertButton;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mInvalid.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPending.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Failed
        {
            get
            {
                if ((this.mFailed == null))
                {
                    this.mFailed = new WpfText(this);
                    #region Search Criteria
                    this.mFailed.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mFailed.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFailed.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailed;
            }
        }
        
        public WpfText Passed
        {
            get
            {
                if ((this.mPassed == null))
                {
                    this.mPassed = new WpfText(this);
                    #region Search Criteria
                    this.mPassed.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPassed.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPassed.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassed;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteAssertButton;
        
        private WpfText mInvalid;
        
        private WpfText mPending;
        
        private WpfText mFailed;
        
        private WpfText mPassed;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssignToNameTreeItem : WpfTreeItem
    {
        
        public AssignToNameTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AssignAssert AssignAssert
        {
            get
            {
                if ((this.mAssignAssert == null))
                {
                    this.mAssignAssert = new AssignAssert(this);
                }
                return this.mAssignAssert;
            }
        }
        
        public DataSplitItem DataSplitItem
        {
            get
            {
                if ((this.mDataSplitItem == null))
                {
                    this.mDataSplitItem = new DataSplitItem(this);
                }
                return this.mDataSplitItem;
            }
        }
        #endregion
        
        #region Fields
        private AssignAssert mAssignAssert;
        
        private DataSplitItem mDataSplitItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssignAssert : WpfExpander
    {
        
        public AssignAssert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "UI_ServiceTestTestStepExpander_Assign (0)_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallDataGridTable1 SmallDataGridTable
        {
            get
            {
                if ((this.mSmallDataGridTable == null))
                {
                    this.mSmallDataGridTable = new SmallDataGridTable1(this);
                }
                return this.mSmallDataGridTable;
            }
        }
        
        public AssertHeader1 AssertHeader
        {
            get
            {
                if ((this.mAssertHeader == null))
                {
                    this.mAssertHeader = new AssertHeader1(this);
                }
                return this.mAssertHeader;
            }
        }
        #endregion
        
        #region Fields
        private SmallDataGridTable1 mSmallDataGridTable;
        
        private AssertHeader1 mAssertHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallDataGridTable1 : WpfTable
    {
        
        public SmallDataGridTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row13 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row13(this);
                }
                return this.mRow1;
            }
        }
        
        public ColumnHeadersPrHeader1 ColumnHeadersPrHeader
        {
            get
            {
                if ((this.mColumnHeadersPrHeader == null))
                {
                    this.mColumnHeadersPrHeader = new ColumnHeadersPrHeader1(this);
                }
                return this.mColumnHeadersPrHeader;
            }
        }
        #endregion
        
        #region Fields
        private Row13 mRow1;
        
        private ColumnHeadersPrHeader1 mColumnHeadersPrHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row13 : WpfRow
    {
        
        public Row13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResultCell1 ResultCell
        {
            get
            {
                if ((this.mResultCell == null))
                {
                    this.mResultCell = new ResultCell1(this);
                }
                return this.mResultCell;
            }
        }
        
        public AssertOperatorCell1 AssertOperatorCell
        {
            get
            {
                if ((this.mAssertOperatorCell == null))
                {
                    this.mAssertOperatorCell = new AssertOperatorCell1(this);
                }
                return this.mAssertOperatorCell;
            }
        }
        
        public OptionsForValueCell OptionsForValueCell
        {
            get
            {
                if ((this.mOptionsForValueCell == null))
                {
                    this.mOptionsForValueCell = new OptionsForValueCell(this);
                }
                return this.mOptionsForValueCell;
            }
        }
        
        public StatusViewCell1 StatusViewCell
        {
            get
            {
                if ((this.mStatusViewCell == null))
                {
                    this.mStatusViewCell = new StatusViewCell1(this);
                }
                return this.mStatusViewCell;
            }
        }
        #endregion
        
        #region Fields
        private ResultCell1 mResultCell;
        
        private AssertOperatorCell1 mAssertOperatorCell;
        
        private OptionsForValueCell mOptionsForValueCell;
        
        private StatusViewCell1 mStatusViewCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultCell1 : WpfCell
    {
        
        public ResultCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Name] = "Item: Warewolf.Studio.ViewModels.ServiceTestOutput, Column Display Index: 1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit AssertValue
        {
            get
            {
                if ((this.mAssertValue == null))
                {
                    this.mAssertValue = new WpfEdit(this);
                    #region Search Criteria
                    this.mAssertValue.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_AssertValue_[[Name]]_AutoID";
                    this.mAssertValue.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertValue.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertValue;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAssertValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOperatorCell1 : WpfCell
    {
        
        public AssertOperatorCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox AssertOperatorComboBox
        {
            get
            {
                if ((this.mAssertOperatorComboBox == null))
                {
                    this.mAssertOperatorComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mAssertOperatorComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_AssertOps_AutoID";
                    this.mAssertOperatorComboBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertOperatorComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertOperatorComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mAssertOperatorComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OptionsForValueCell : WpfCell
    {
        
        public OptionsForValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OptionsForValueComboBox OptionsForValueComboBox
        {
            get
            {
                if ((this.mOptionsForValueComboBox == null))
                {
                    this.mOptionsForValueComboBox = new OptionsForValueComboBox(this);
                }
                return this.mOptionsForValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private OptionsForValueComboBox mOptionsForValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OptionsForValueComboBox : WpfComboBox
    {
        
        public OptionsForValueComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_OptionsForValue_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NameInputListItem
        {
            get
            {
                if ((this.mNameInputListItem == null))
                {
                    this.mNameInputListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mNameInputListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Name Input";
                    this.mNameInputListItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNameInputListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNameInputListItem;
            }
        }
        
        public WpfListItem BlankInputListItem
        {
            get
            {
                if ((this.mBlankInputListItem == null))
                {
                    this.mBlankInputListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mBlankInputListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Blank Input";
                    this.mBlankInputListItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mBlankInputListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mBlankInputListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNameInputListItem;
        
        private WpfListItem mBlankInputListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StatusViewCell1 : WpfCell
    {
        
        public StatusViewCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "0";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPending.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mPending;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ColumnHeadersPrHeader1 : WpfControl
    {
        
        public ColumnHeadersPrHeader1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Header";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_ColumnHeadersPresenter";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfControl HeaderItem
        {
            get
            {
                if ((this.mHeaderItem == null))
                {
                    this.mHeaderItem = new WpfControl(this);
                    #region Search Criteria
                    this.mHeaderItem.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
                    this.mHeaderItem.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
                    this.mHeaderItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mHeaderItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHeaderItem;
            }
        }
        
        public WpfControl Result
        {
            get
            {
                if ((this.mResult == null))
                {
                    this.mResult = new WpfControl(this);
                    #region Search Criteria
                    this.mResult.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
                    this.mResult.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
                    this.mResult.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mResult.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResult;
            }
        }
        
        public MockOrAssert1 MockOrAssert
        {
            get
            {
                if ((this.mMockOrAssert == null))
                {
                    this.mMockOrAssert = new MockOrAssert1(this);
                }
                return this.mMockOrAssert;
            }
        }
        
        public WpfControl Value
        {
            get
            {
                if ((this.mValue == null))
                {
                    this.mValue = new WpfControl(this);
                    #region Search Criteria
                    this.mValue.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
                    this.mValue.SearchProperties[WpfControl.PropertyNames.Instance] = "4";
                    this.mValue.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mValue.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValue;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mHeaderItem;
        
        private WpfControl mResult;
        
        private MockOrAssert1 mMockOrAssert;
        
        private WpfControl mValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MockOrAssert1 : WpfControl
    {
        
        public MockOrAssert1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton MockRadioButton
        {
            get
            {
                if ((this.mMockRadioButton == null))
                {
                    this.mMockRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mMockRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_MockRadioButton_AutoID";
                    this.mMockRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Mock";
                    this.mMockRadioButton.SearchProperties[WpfRadioButton.PropertyNames.HelpText] = "Mock this step";
                    this.mMockRadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mMockRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMockRadioButton;
            }
        }
        
        public WpfRadioButton AssertRadioButton
        {
            get
            {
                if ((this.mAssertRadioButton == null))
                {
                    this.mAssertRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mAssertRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_AssertRadioButton_AutoID";
                    this.mAssertRadioButton.SearchProperties[WpfRadioButton.PropertyNames.HelpText] = "Assert this step";
                    this.mAssertRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Assert";
                    this.mAssertRadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mMockRadioButton;
        
        private WpfRadioButton mAssertRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertHeader1 : WpfButton
    {
        
        public AssertHeader1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteAssertButton
        {
            get
            {
                if ((this.mDeleteAssertButton == null))
                {
                    this.mDeleteAssertButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteAssertButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_TestStepDelete_AutoID";
                    this.mDeleteAssertButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteAssertButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteAssertButton;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mInvalid.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPending.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Failed
        {
            get
            {
                if ((this.mFailed == null))
                {
                    this.mFailed = new WpfText(this);
                    #region Search Criteria
                    this.mFailed.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mFailed.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFailed.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailed;
            }
        }
        
        public WpfText Passed
        {
            get
            {
                if ((this.mPassed == null))
                {
                    this.mPassed = new WpfText(this);
                    #region Search Criteria
                    this.mPassed.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPassed.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPassed.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassed;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteAssertButton;
        
        private WpfText mInvalid;
        
        private WpfText mPending;
        
        private WpfText mFailed;
        
        private WpfText mPassed;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataSplitItem : WpfExpander
    {
        
        public DataSplitItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "UI_ServiceTestTestStepExpander_Assign (1)_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIUI_StepOutputs_AssigTable UIUI_StepOutputs_AssigTable
        {
            get
            {
                if ((this.mUIUI_StepOutputs_AssigTable == null))
                {
                    this.mUIUI_StepOutputs_AssigTable = new UIUI_StepOutputs_AssigTable(this);
                }
                return this.mUIUI_StepOutputs_AssigTable;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_StepOutputs_AssigTable mUIUI_StepOutputs_AssigTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUI_StepOutputs_AssigTable : WpfTable
    {
        
        public UIUI_StepOutputs_AssigTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "UI_StepOutputs_Assign (1)_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIPART_ColumnHeadersPrHeader UIPART_ColumnHeadersPrHeader
        {
            get
            {
                if ((this.mUIPART_ColumnHeadersPrHeader == null))
                {
                    this.mUIPART_ColumnHeadersPrHeader = new UIPART_ColumnHeadersPrHeader(this);
                }
                return this.mUIPART_ColumnHeadersPrHeader;
            }
        }
        #endregion
        
        #region Fields
        private UIPART_ColumnHeadersPrHeader mUIPART_ColumnHeadersPrHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPART_ColumnHeadersPrHeader : WpfControl
    {
        
        public UIPART_ColumnHeadersPrHeader(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Header";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_ColumnHeadersPresenter";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIItemColumnHeader UIItemColumnHeader
        {
            get
            {
                if ((this.mUIItemColumnHeader == null))
                {
                    this.mUIItemColumnHeader = new UIItemColumnHeader(this);
                }
                return this.mUIItemColumnHeader;
            }
        }
        #endregion
        
        #region Fields
        private UIItemColumnHeader mUIItemColumnHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemColumnHeader : WpfControl
    {
        
        public UIItemColumnHeader(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton UIMockRadioButton
        {
            get
            {
                if ((this.mUIMockRadioButton == null))
                {
                    this.mUIMockRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUIMockRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Mock";
                    this.mUIMockRadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIMockRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIMockRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mUIMockRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SequenceTreeItem : WpfTreeItem
    {
        
        public SequenceTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SequenceAssert SequenceAssert
        {
            get
            {
                if ((this.mSequenceAssert == null))
                {
                    this.mSequenceAssert = new SequenceAssert(this);
                }
                return this.mSequenceAssert;
            }
        }
        #endregion
        
        #region Fields
        private SequenceAssert mSequenceAssert;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SequenceAssert : WpfExpander
    {
        
        public SequenceAssert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "UI_ServiceTestTestStepExpander_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitNamesTreeItem SplitNamesTreeItem
        {
            get
            {
                if ((this.mSplitNamesTreeItem == null))
                {
                    this.mSplitNamesTreeItem = new SplitNamesTreeItem(this);
                }
                return this.mSplitNamesTreeItem;
            }
        }
        
        public AssertHeader3 AssertHeader
        {
            get
            {
                if ((this.mAssertHeader == null))
                {
                    this.mAssertHeader = new AssertHeader3(this);
                }
                return this.mAssertHeader;
            }
        }
        #endregion
        
        #region Fields
        private SplitNamesTreeItem mSplitNamesTreeItem;
        
        private AssertHeader3 mAssertHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitNamesTreeItem : WpfTreeItem
    {
        
        public SplitNamesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitNamesAssert SplitNamesAssert
        {
            get
            {
                if ((this.mSplitNamesAssert == null))
                {
                    this.mSplitNamesAssert = new SplitNamesAssert(this);
                }
                return this.mSplitNamesAssert;
            }
        }
        #endregion
        
        #region Fields
        private SplitNamesAssert mSplitNamesAssert;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitNamesAssert : WpfExpander
    {
        
        public SplitNamesAssert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "UI_ServiceTestTestStepExpander_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallDataGridTable2 SmallDataGridTable
        {
            get
            {
                if ((this.mSmallDataGridTable == null))
                {
                    this.mSmallDataGridTable = new SmallDataGridTable2(this);
                }
                return this.mSmallDataGridTable;
            }
        }
        
        public AssertHeader2 AssertHeader
        {
            get
            {
                if ((this.mAssertHeader == null))
                {
                    this.mAssertHeader = new AssertHeader2(this);
                }
                return this.mAssertHeader;
            }
        }
        #endregion
        
        #region Fields
        private SmallDataGridTable2 mSmallDataGridTable;
        
        private AssertHeader2 mAssertHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallDataGridTable2 : WpfTable
    {
        
        public SmallDataGridTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row14 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row14(this);
                }
                return this.mRow1;
            }
        }
        
        public ColumnHeadersPrHeader2 ColumnHeadersPrHeader
        {
            get
            {
                if ((this.mColumnHeadersPrHeader == null))
                {
                    this.mColumnHeadersPrHeader = new ColumnHeadersPrHeader2(this);
                }
                return this.mColumnHeadersPrHeader;
            }
        }
        #endregion
        
        #region Fields
        private Row14 mRow1;
        
        private ColumnHeadersPrHeader2 mColumnHeadersPrHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row14 : WpfRow
    {
        
        public Row14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResultCell2 ResultCell
        {
            get
            {
                if ((this.mResultCell == null))
                {
                    this.mResultCell = new ResultCell2(this);
                }
                return this.mResultCell;
            }
        }
        
        public AssertOperatorCell2 AssertOperatorCell
        {
            get
            {
                if ((this.mAssertOperatorCell == null))
                {
                    this.mAssertOperatorCell = new AssertOperatorCell2(this);
                }
                return this.mAssertOperatorCell;
            }
        }
        
        public OptionsForValueCell1 OptionsForValueCell
        {
            get
            {
                if ((this.mOptionsForValueCell == null))
                {
                    this.mOptionsForValueCell = new OptionsForValueCell1(this);
                }
                return this.mOptionsForValueCell;
            }
        }
        
        public StatusViewCell2 StatusViewCell
        {
            get
            {
                if ((this.mStatusViewCell == null))
                {
                    this.mStatusViewCell = new StatusViewCell2(this);
                }
                return this.mStatusViewCell;
            }
        }
        #endregion
        
        #region Fields
        private ResultCell2 mResultCell;
        
        private AssertOperatorCell2 mAssertOperatorCell;
        
        private OptionsForValueCell1 mOptionsForValueCell;
        
        private StatusViewCell2 mStatusViewCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultCell2 : WpfCell
    {
        
        public ResultCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Name] = "Item: Warewolf.Studio.ViewModels.ServiceTestOutput, Column Display Index: 1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit AssertValue
        {
            get
            {
                if ((this.mAssertValue == null))
                {
                    this.mAssertValue = new WpfEdit(this);
                    #region Search Criteria
                    this.mAssertValue.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_AssertValue_AutoID";
                    this.mAssertValue.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertValue.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertValue;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAssertValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOperatorCell2 : WpfCell
    {
        
        public AssertOperatorCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox AssertOperatorComboBox
        {
            get
            {
                if ((this.mAssertOperatorComboBox == null))
                {
                    this.mAssertOperatorComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mAssertOperatorComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_AssertOps_AutoID";
                    this.mAssertOperatorComboBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertOperatorComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertOperatorComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mAssertOperatorComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OptionsForValueCell1 : WpfCell
    {
        
        public OptionsForValueCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OptionsForValueComboBox1 OptionsForValueComboBox
        {
            get
            {
                if ((this.mOptionsForValueComboBox == null))
                {
                    this.mOptionsForValueComboBox = new OptionsForValueComboBox1(this);
                }
                return this.mOptionsForValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private OptionsForValueComboBox1 mOptionsForValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OptionsForValueComboBox1 : WpfComboBox
    {
        
        public OptionsForValueComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_OptionsForValue_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NameInputListItem
        {
            get
            {
                if ((this.mNameInputListItem == null))
                {
                    this.mNameInputListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mNameInputListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Name Input";
                    this.mNameInputListItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNameInputListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNameInputListItem;
            }
        }
        
        public WpfListItem BlankInputListItem
        {
            get
            {
                if ((this.mBlankInputListItem == null))
                {
                    this.mBlankInputListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mBlankInputListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Blank Input";
                    this.mBlankInputListItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mBlankInputListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mBlankInputListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNameInputListItem;
        
        private WpfListItem mBlankInputListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StatusViewCell2 : WpfCell
    {
        
        public StatusViewCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "0";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPending.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mPending;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ColumnHeadersPrHeader2 : WpfControl
    {
        
        public ColumnHeadersPrHeader2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Header";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_ColumnHeadersPresenter";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfControl HeaderItem
        {
            get
            {
                if ((this.mHeaderItem == null))
                {
                    this.mHeaderItem = new WpfControl(this);
                    #region Search Criteria
                    this.mHeaderItem.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
                    this.mHeaderItem.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
                    this.mHeaderItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mHeaderItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHeaderItem;
            }
        }
        
        public WpfControl Result
        {
            get
            {
                if ((this.mResult == null))
                {
                    this.mResult = new WpfControl(this);
                    #region Search Criteria
                    this.mResult.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
                    this.mResult.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
                    this.mResult.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mResult.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResult;
            }
        }
        
        public MockOrAssert2 MockOrAssert
        {
            get
            {
                if ((this.mMockOrAssert == null))
                {
                    this.mMockOrAssert = new MockOrAssert2(this);
                }
                return this.mMockOrAssert;
            }
        }
        
        public WpfControl Value
        {
            get
            {
                if ((this.mValue == null))
                {
                    this.mValue = new WpfControl(this);
                    #region Search Criteria
                    this.mValue.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
                    this.mValue.SearchProperties[WpfControl.PropertyNames.Instance] = "4";
                    this.mValue.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mValue.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValue;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mHeaderItem;
        
        private WpfControl mResult;
        
        private MockOrAssert2 mMockOrAssert;
        
        private WpfControl mValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MockOrAssert2 : WpfControl
    {
        
        public MockOrAssert2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton MockRadioButton
        {
            get
            {
                if ((this.mMockRadioButton == null))
                {
                    this.mMockRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mMockRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_MockRadioButton_AutoID";
                    this.mMockRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Mock";
                    this.mMockRadioButton.SearchProperties[WpfRadioButton.PropertyNames.HelpText] = "ServiceTestStepMockRadioButtonTooltip";
                    this.mMockRadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mMockRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMockRadioButton;
            }
        }
        
        public WpfRadioButton AssertRadioButton
        {
            get
            {
                if ((this.mAssertRadioButton == null))
                {
                    this.mAssertRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mAssertRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_AssertRadioButton_AutoID";
                    this.mAssertRadioButton.SearchProperties[WpfRadioButton.PropertyNames.HelpText] = "ServiceTestStepAssertRadioButtonTooltip";
                    this.mAssertRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Assert";
                    this.mAssertRadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mMockRadioButton;
        
        private WpfRadioButton mAssertRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertHeader2 : WpfButton
    {
        
        public AssertHeader2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteAssertButton
        {
            get
            {
                if ((this.mDeleteAssertButton == null))
                {
                    this.mDeleteAssertButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteAssertButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_TestStepDelete_AutoID";
                    this.mDeleteAssertButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteAssertButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteAssertButton;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mInvalid.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPending.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Failed
        {
            get
            {
                if ((this.mFailed == null))
                {
                    this.mFailed = new WpfText(this);
                    #region Search Criteria
                    this.mFailed.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mFailed.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFailed.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailed;
            }
        }
        
        public WpfText Passed
        {
            get
            {
                if ((this.mPassed == null))
                {
                    this.mPassed = new WpfText(this);
                    #region Search Criteria
                    this.mPassed.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPassed.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPassed.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassed;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteAssertButton;
        
        private WpfText mInvalid;
        
        private WpfText mPending;
        
        private WpfText mFailed;
        
        private WpfText mPassed;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertHeader3 : WpfButton
    {
        
        public AssertHeader3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteAssertButton
        {
            get
            {
                if ((this.mDeleteAssertButton == null))
                {
                    this.mDeleteAssertButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteAssertButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_TestStepDelete_AutoID";
                    this.mDeleteAssertButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteAssertButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteAssertButton;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mInvalid.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPending.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Failed
        {
            get
            {
                if ((this.mFailed == null))
                {
                    this.mFailed = new WpfText(this);
                    #region Search Criteria
                    this.mFailed.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mFailed.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFailed.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailed;
            }
        }
        
        public WpfText Passed
        {
            get
            {
                if ((this.mPassed == null))
                {
                    this.mPassed = new WpfText(this);
                    #region Search Criteria
                    this.mPassed.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPassed.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPassed.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassed;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteAssertButton;
        
        private WpfText mInvalid;
        
        private WpfText mPending;
        
        private WpfText mFailed;
        
        private WpfText mPassed;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ForeachTreeItem : WpfTreeItem
    {
        
        public ForeachTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SequenceTreeItem1 SequenceTreeItem
        {
            get
            {
                if ((this.mSequenceTreeItem == null))
                {
                    this.mSequenceTreeItem = new SequenceTreeItem1(this);
                }
                return this.mSequenceTreeItem;
            }
        }
        
        public WpfButton DeleteAssertButton
        {
            get
            {
                if ((this.mDeleteAssertButton == null))
                {
                    this.mDeleteAssertButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteAssertButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_TestStepDelete_AutoID";
                    this.mDeleteAssertButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteAssertButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteAssertButton;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mInvalid.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPending.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Failed
        {
            get
            {
                if ((this.mFailed == null))
                {
                    this.mFailed = new WpfText(this);
                    #region Search Criteria
                    this.mFailed.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mFailed.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFailed.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailed;
            }
        }
        
        public WpfText Passed
        {
            get
            {
                if ((this.mPassed == null))
                {
                    this.mPassed = new WpfText(this);
                    #region Search Criteria
                    this.mPassed.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPassed.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPassed.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassed;
            }
        }
        #endregion
        
        #region Fields
        private SequenceTreeItem1 mSequenceTreeItem;
        
        private WpfButton mDeleteAssertButton;
        
        private WpfText mInvalid;
        
        private WpfText mPending;
        
        private WpfText mFailed;
        
        private WpfText mPassed;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SequenceTreeItem1 : WpfTreeItem
    {
        
        public SequenceTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ConvertCaseToTitleCase ConvertCaseToTitleCase
        {
            get
            {
                if ((this.mConvertCaseToTitleCase == null))
                {
                    this.mConvertCaseToTitleCase = new ConvertCaseToTitleCase(this);
                }
                return this.mConvertCaseToTitleCase;
            }
        }
        #endregion
        
        #region Fields
        private ConvertCaseToTitleCase mConvertCaseToTitleCase;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertCaseToTitleCase : WpfTreeItem
    {
        
        public ConvertCaseToTitleCase(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ConvertCase ConvertCase
        {
            get
            {
                if ((this.mConvertCase == null))
                {
                    this.mConvertCase = new ConvertCase(this);
                }
                return this.mConvertCase;
            }
        }
        #endregion
        
        #region Fields
        private ConvertCase mConvertCase;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertCase : WpfExpander
    {
        
        public ConvertCase(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "UI_ServiceTestTestStepExpander_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallDataGridTable3 SmallDataGridTable
        {
            get
            {
                if ((this.mSmallDataGridTable == null))
                {
                    this.mSmallDataGridTable = new SmallDataGridTable3(this);
                }
                return this.mSmallDataGridTable;
            }
        }
        
        public AssertHeader4 AssertHeader
        {
            get
            {
                if ((this.mAssertHeader == null))
                {
                    this.mAssertHeader = new AssertHeader4(this);
                }
                return this.mAssertHeader;
            }
        }
        #endregion
        
        #region Fields
        private SmallDataGridTable3 mSmallDataGridTable;
        
        private AssertHeader4 mAssertHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallDataGridTable3 : WpfTable
    {
        
        public SmallDataGridTable3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row15 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row15(this);
                }
                return this.mRow1;
            }
        }
        
        public ColumnHeadersPrHeader3 ColumnHeadersPrHeader
        {
            get
            {
                if ((this.mColumnHeadersPrHeader == null))
                {
                    this.mColumnHeadersPrHeader = new ColumnHeadersPrHeader3(this);
                }
                return this.mColumnHeadersPrHeader;
            }
        }
        #endregion
        
        #region Fields
        private Row15 mRow1;
        
        private ColumnHeadersPrHeader3 mColumnHeadersPrHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row15 : WpfRow
    {
        
        public Row15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResultCell3 ResultCell
        {
            get
            {
                if ((this.mResultCell == null))
                {
                    this.mResultCell = new ResultCell3(this);
                }
                return this.mResultCell;
            }
        }
        
        public AssertOperatorCell3 AssertOperatorCell
        {
            get
            {
                if ((this.mAssertOperatorCell == null))
                {
                    this.mAssertOperatorCell = new AssertOperatorCell3(this);
                }
                return this.mAssertOperatorCell;
            }
        }
        
        public OptionsForValueCell2 OptionsForValueCell
        {
            get
            {
                if ((this.mOptionsForValueCell == null))
                {
                    this.mOptionsForValueCell = new OptionsForValueCell2(this);
                }
                return this.mOptionsForValueCell;
            }
        }
        
        public StatusViewCell3 StatusViewCell
        {
            get
            {
                if ((this.mStatusViewCell == null))
                {
                    this.mStatusViewCell = new StatusViewCell3(this);
                }
                return this.mStatusViewCell;
            }
        }
        #endregion
        
        #region Fields
        private ResultCell3 mResultCell;
        
        private AssertOperatorCell3 mAssertOperatorCell;
        
        private OptionsForValueCell2 mOptionsForValueCell;
        
        private StatusViewCell3 mStatusViewCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultCell3 : WpfCell
    {
        
        public ResultCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Name] = "Item: Warewolf.Studio.ViewModels.ServiceTestOutput, Column Display Index: 1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit AssertValue
        {
            get
            {
                if ((this.mAssertValue == null))
                {
                    this.mAssertValue = new WpfEdit(this);
                    #region Search Criteria
                    this.mAssertValue.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_AssertValue_AutoID";
                    this.mAssertValue.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertValue.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertValue;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAssertValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOperatorCell3 : WpfCell
    {
        
        public AssertOperatorCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox AssertOperatorComboBox
        {
            get
            {
                if ((this.mAssertOperatorComboBox == null))
                {
                    this.mAssertOperatorComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mAssertOperatorComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_AssertOps_AutoID";
                    this.mAssertOperatorComboBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertOperatorComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertOperatorComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mAssertOperatorComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OptionsForValueCell2 : WpfCell
    {
        
        public OptionsForValueCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OptionsForValueComboBox2 OptionsForValueComboBox
        {
            get
            {
                if ((this.mOptionsForValueComboBox == null))
                {
                    this.mOptionsForValueComboBox = new OptionsForValueComboBox2(this);
                }
                return this.mOptionsForValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private OptionsForValueComboBox2 mOptionsForValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OptionsForValueComboBox2 : WpfComboBox
    {
        
        public OptionsForValueComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_OptionsForValue_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NameInputListItem
        {
            get
            {
                if ((this.mNameInputListItem == null))
                {
                    this.mNameInputListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mNameInputListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Name Input";
                    this.mNameInputListItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNameInputListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNameInputListItem;
            }
        }
        
        public WpfListItem BlankInputListItem
        {
            get
            {
                if ((this.mBlankInputListItem == null))
                {
                    this.mBlankInputListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mBlankInputListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Blank Input";
                    this.mBlankInputListItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mBlankInputListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mBlankInputListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNameInputListItem;
        
        private WpfListItem mBlankInputListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StatusViewCell3 : WpfCell
    {
        
        public StatusViewCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "0";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPending.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mPending;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ColumnHeadersPrHeader3 : WpfControl
    {
        
        public ColumnHeadersPrHeader3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Header";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_ColumnHeadersPresenter";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfControl HeaderItem
        {
            get
            {
                if ((this.mHeaderItem == null))
                {
                    this.mHeaderItem = new WpfControl(this);
                    #region Search Criteria
                    this.mHeaderItem.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
                    this.mHeaderItem.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
                    this.mHeaderItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mHeaderItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHeaderItem;
            }
        }
        
        public WpfControl Result
        {
            get
            {
                if ((this.mResult == null))
                {
                    this.mResult = new WpfControl(this);
                    #region Search Criteria
                    this.mResult.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
                    this.mResult.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
                    this.mResult.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mResult.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResult;
            }
        }
        
        public MockOrAssert3 MockOrAssert
        {
            get
            {
                if ((this.mMockOrAssert == null))
                {
                    this.mMockOrAssert = new MockOrAssert3(this);
                }
                return this.mMockOrAssert;
            }
        }
        
        public WpfControl Value
        {
            get
            {
                if ((this.mValue == null))
                {
                    this.mValue = new WpfControl(this);
                    #region Search Criteria
                    this.mValue.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
                    this.mValue.SearchProperties[WpfControl.PropertyNames.Instance] = "4";
                    this.mValue.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mValue.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValue;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mHeaderItem;
        
        private WpfControl mResult;
        
        private MockOrAssert3 mMockOrAssert;
        
        private WpfControl mValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MockOrAssert3 : WpfControl
    {
        
        public MockOrAssert3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton MockRadioButton
        {
            get
            {
                if ((this.mMockRadioButton == null))
                {
                    this.mMockRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mMockRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_MockRadioButton_AutoID";
                    this.mMockRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Mock";
                    this.mMockRadioButton.SearchProperties[WpfRadioButton.PropertyNames.HelpText] = "ServiceTestStepMockRadioButtonTooltip";
                    this.mMockRadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mMockRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMockRadioButton;
            }
        }
        
        public WpfRadioButton AssertRadioButton
        {
            get
            {
                if ((this.mAssertRadioButton == null))
                {
                    this.mAssertRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mAssertRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_AssertRadioButton_AutoID";
                    this.mAssertRadioButton.SearchProperties[WpfRadioButton.PropertyNames.HelpText] = "ServiceTestStepAssertRadioButtonTooltip";
                    this.mAssertRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Assert";
                    this.mAssertRadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mMockRadioButton;
        
        private WpfRadioButton mAssertRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertHeader4 : WpfButton
    {
        
        public AssertHeader4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteAssertButton
        {
            get
            {
                if ((this.mDeleteAssertButton == null))
                {
                    this.mDeleteAssertButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteAssertButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_TestStepDelete_AutoID";
                    this.mDeleteAssertButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteAssertButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteAssertButton;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mInvalid.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPending.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Failed
        {
            get
            {
                if ((this.mFailed == null))
                {
                    this.mFailed = new WpfText(this);
                    #region Search Criteria
                    this.mFailed.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mFailed.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFailed.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailed;
            }
        }
        
        public WpfText Passed
        {
            get
            {
                if ((this.mPassed == null))
                {
                    this.mPassed = new WpfText(this);
                    #region Search Criteria
                    this.mPassed.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPassed.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPassed.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassed;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteAssertButton;
        
        private WpfText mInvalid;
        
        private WpfText mPending;
        
        private WpfText mFailed;
        
        private WpfText mPassed;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DecisionTreeItem : WpfTreeItem
    {
        
        public DecisionTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DecisionAssert DecisionAssert
        {
            get
            {
                if ((this.mDecisionAssert == null))
                {
                    this.mDecisionAssert = new DecisionAssert(this);
                }
                return this.mDecisionAssert;
            }
        }
        #endregion
        
        #region Fields
        private DecisionAssert mDecisionAssert;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DecisionAssert : WpfExpander
    {
        
        public DecisionAssert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "UI_ServiceTestTestStepExpander_If [[Name]] <> (Not Equal) _AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallDataGridTable4 SmallDataGridTable
        {
            get
            {
                if ((this.mSmallDataGridTable == null))
                {
                    this.mSmallDataGridTable = new SmallDataGridTable4(this);
                }
                return this.mSmallDataGridTable;
            }
        }
        
        public AssertHeader5 AssertHeader
        {
            get
            {
                if ((this.mAssertHeader == null))
                {
                    this.mAssertHeader = new AssertHeader5(this);
                }
                return this.mAssertHeader;
            }
        }
        #endregion
        
        #region Fields
        private SmallDataGridTable4 mSmallDataGridTable;
        
        private AssertHeader5 mAssertHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallDataGridTable4 : WpfTable
    {
        
        public SmallDataGridTable4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "UI_StepOutputs_If [[Name]] <> (Not Equal) _AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row16 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row16(this);
                }
                return this.mRow1;
            }
        }
        
        public ColumnHeadersPrHeader4 ColumnHeadersPrHeader
        {
            get
            {
                if ((this.mColumnHeadersPrHeader == null))
                {
                    this.mColumnHeadersPrHeader = new ColumnHeadersPrHeader4(this);
                }
                return this.mColumnHeadersPrHeader;
            }
        }
        #endregion
        
        #region Fields
        private Row16 mRow1;
        
        private ColumnHeadersPrHeader4 mColumnHeadersPrHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row16 : WpfRow
    {
        
        public Row16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResultCell4 ResultCell
        {
            get
            {
                if ((this.mResultCell == null))
                {
                    this.mResultCell = new ResultCell4(this);
                }
                return this.mResultCell;
            }
        }
        
        public AssertOperatorCell4 AssertOperatorCell
        {
            get
            {
                if ((this.mAssertOperatorCell == null))
                {
                    this.mAssertOperatorCell = new AssertOperatorCell4(this);
                }
                return this.mAssertOperatorCell;
            }
        }
        
        public OptionsForValueCell3 OptionsForValueCell
        {
            get
            {
                if ((this.mOptionsForValueCell == null))
                {
                    this.mOptionsForValueCell = new OptionsForValueCell3(this);
                }
                return this.mOptionsForValueCell;
            }
        }
        
        public StatusViewCell4 StatusViewCell
        {
            get
            {
                if ((this.mStatusViewCell == null))
                {
                    this.mStatusViewCell = new StatusViewCell4(this);
                }
                return this.mStatusViewCell;
            }
        }
        #endregion
        
        #region Fields
        private ResultCell4 mResultCell;
        
        private AssertOperatorCell4 mAssertOperatorCell;
        
        private OptionsForValueCell3 mOptionsForValueCell;
        
        private StatusViewCell4 mStatusViewCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultCell4 : WpfCell
    {
        
        public ResultCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Result";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit AssertValue
        {
            get
            {
                if ((this.mAssertValue == null))
                {
                    this.mAssertValue = new WpfEdit(this);
                    #region Search Criteria
                    this.mAssertValue.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_AssertOp_Flow Arm_AutoID";
                    this.mAssertValue.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertValue.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertValue;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAssertValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOperatorCell4 : WpfCell
    {
        
        public AssertOperatorCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "2";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox AssertOperatorComboBox
        {
            get
            {
                if ((this.mAssertOperatorComboBox == null))
                {
                    this.mAssertOperatorComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mAssertOperatorComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_AssertValue_Flow Arm_AutoID";
                    this.mAssertOperatorComboBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertOperatorComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertOperatorComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mAssertOperatorComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OptionsForValueCell3 : WpfCell
    {
        
        public OptionsForValueCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OptionsForValueComboBox3 OptionsForValueComboBox
        {
            get
            {
                if ((this.mOptionsForValueComboBox == null))
                {
                    this.mOptionsForValueComboBox = new OptionsForValueComboBox3(this);
                }
                return this.mOptionsForValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private OptionsForValueComboBox3 mOptionsForValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OptionsForValueComboBox3 : WpfComboBox
    {
        
        public OptionsForValueComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_OptionsForValue_Flow Arm_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NameInputListItem
        {
            get
            {
                if ((this.mNameInputListItem == null))
                {
                    this.mNameInputListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mNameInputListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Name Input";
                    this.mNameInputListItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNameInputListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNameInputListItem;
            }
        }
        
        public WpfListItem BlankInputListItem
        {
            get
            {
                if ((this.mBlankInputListItem == null))
                {
                    this.mBlankInputListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mBlankInputListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Blank Input";
                    this.mBlankInputListItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mBlankInputListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mBlankInputListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNameInputListItem;
        
        private WpfListItem mBlankInputListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StatusViewCell4 : WpfCell
    {
        
        public StatusViewCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "0";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPending.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mPending;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ColumnHeadersPrHeader4 : WpfControl
    {
        
        public ColumnHeadersPrHeader4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Header";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_ColumnHeadersPresenter";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfControl HeaderItem
        {
            get
            {
                if ((this.mHeaderItem == null))
                {
                    this.mHeaderItem = new WpfControl(this);
                    #region Search Criteria
                    this.mHeaderItem.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
                    this.mHeaderItem.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
                    this.mHeaderItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mHeaderItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHeaderItem;
            }
        }
        
        public WpfControl Result
        {
            get
            {
                if ((this.mResult == null))
                {
                    this.mResult = new WpfControl(this);
                    #region Search Criteria
                    this.mResult.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
                    this.mResult.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
                    this.mResult.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mResult.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResult;
            }
        }
        
        public MockOrAssert4 MockOrAssert
        {
            get
            {
                if ((this.mMockOrAssert == null))
                {
                    this.mMockOrAssert = new MockOrAssert4(this);
                }
                return this.mMockOrAssert;
            }
        }
        
        public WpfControl Value
        {
            get
            {
                if ((this.mValue == null))
                {
                    this.mValue = new WpfControl(this);
                    #region Search Criteria
                    this.mValue.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
                    this.mValue.SearchProperties[WpfControl.PropertyNames.Instance] = "4";
                    this.mValue.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mValue.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValue;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mHeaderItem;
        
        private WpfControl mResult;
        
        private MockOrAssert4 mMockOrAssert;
        
        private WpfControl mValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MockOrAssert4 : WpfControl
    {
        
        public MockOrAssert4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton MockRadioButton
        {
            get
            {
                if ((this.mMockRadioButton == null))
                {
                    this.mMockRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mMockRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Mock";
                    this.mMockRadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mMockRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMockRadioButton;
            }
        }
        
        public WpfRadioButton AssertRadioButton
        {
            get
            {
                if ((this.mAssertRadioButton == null))
                {
                    this.mAssertRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mAssertRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Assert";
                    this.mAssertRadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mMockRadioButton;
        
        private WpfRadioButton mAssertRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertHeader5 : WpfButton
    {
        
        public AssertHeader5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteAssertButton
        {
            get
            {
                if ((this.mDeleteAssertButton == null))
                {
                    this.mDeleteAssertButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteAssertButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_TestStepDelete_AutoID";
                    this.mDeleteAssertButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteAssertButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteAssertButton;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mInvalid.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPending.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Failed
        {
            get
            {
                if ((this.mFailed == null))
                {
                    this.mFailed = new WpfText(this);
                    #region Search Criteria
                    this.mFailed.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mFailed.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFailed.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailed;
            }
        }
        
        public WpfText Passed
        {
            get
            {
                if ((this.mPassed == null))
                {
                    this.mPassed = new WpfText(this);
                    #region Search Criteria
                    this.mPassed.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mPassed.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPassed.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassed;
            }
        }
        
        public WpfButton ToolIcon
        {
            get
            {
                if ((this.mToolIcon == null))
                {
                    this.mToolIcon = new WpfButton(this);
                    #region Search Criteria
                    this.mToolIcon.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
                    this.mToolIcon.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mToolIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToolIcon;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteAssertButton;
        
        private WpfText mInvalid;
        
        private WpfText mPending;
        
        private WpfText mFailed;
        
        private WpfText mPassed;
        
        private WpfButton mToolIcon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RandomTreeItem : WpfTreeItem
    {
        
        public RandomTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RandomExpander RandomExpander
        {
            get
            {
                if ((this.mRandomExpander == null))
                {
                    this.mRandomExpander = new RandomExpander(this);
                }
                return this.mRandomExpander;
            }
        }
        #endregion
        
        #region Fields
        private RandomExpander mRandomExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RandomExpander : WpfExpander
    {
        
        public RandomExpander(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "UI_ServiceTestTestStepExpander_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton RandomExpanderHeader
        {
            get
            {
                if ((this.mRandomExpanderHeader == null))
                {
                    this.mRandomExpanderHeader = new WpfButton(this);
                    #region Search Criteria
                    this.mRandomExpanderHeader.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
                    this.mRandomExpanderHeader.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRandomExpanderHeader.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRandomExpanderHeader;
            }
        }
        
        public SmallDataGridTable5 SmallDataGridTable
        {
            get
            {
                if ((this.mSmallDataGridTable == null))
                {
                    this.mSmallDataGridTable = new SmallDataGridTable5(this);
                }
                return this.mSmallDataGridTable;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mRandomExpanderHeader;
        
        private SmallDataGridTable5 mSmallDataGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallDataGridTable5 : WpfTable
    {
        
        public SmallDataGridTable5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row17 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row17(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row17 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row17 : WpfRow
    {
        
        public Row17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AssertValueCell1 AssertValueCell
        {
            get
            {
                if ((this.mAssertValueCell == null))
                {
                    this.mAssertValueCell = new AssertValueCell1(this);
                }
                return this.mAssertValueCell;
            }
        }
        #endregion
        
        #region Fields
        private AssertValueCell1 mAssertValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertValueCell1 : WpfCell
    {
        
        public AssertValueCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit AssertValueEdit
        {
            get
            {
                if ((this.mAssertValueEdit == null))
                {
                    this.mAssertValueEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mAssertValueEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_AssertValue_AutoID";
                    this.mAssertValueEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertValueEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAssertValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DotnetDllTreeItem : WpfTreeItem
    {
        
        public DotnetDllTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ExpansionIndicatorCheckBox
        {
            get
            {
                if ((this.mExpansionIndicatorCheckBox == null))
                {
                    this.mExpansionIndicatorCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mExpansionIndicatorCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "ExpansionIndicator";
                    this.mExpansionIndicatorCheckBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpansionIndicatorCheckBox.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
                    #endregion
                }
                return this.mExpansionIndicatorCheckBox;
            }
        }
        
        public ConstructorExpander ConstructorExpander
        {
            get
            {
                if ((this.mConstructorExpander == null))
                {
                    this.mConstructorExpander = new ConstructorExpander(this);
                }
                return this.mConstructorExpander;
            }
        }
        
        public FavouriteFoodsExpander FavouriteFoodsExpander
        {
            get
            {
                if ((this.mFavouriteFoodsExpander == null))
                {
                    this.mFavouriteFoodsExpander = new FavouriteFoodsExpander(this);
                }
                return this.mFavouriteFoodsExpander;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_TestStepDelete_DotNet DLL_AutoID";
                    this.mDeleteButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButton.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mExpansionIndicatorCheckBox;
        
        private ConstructorExpander mConstructorExpander;
        
        private FavouriteFoodsExpander mFavouriteFoodsExpander;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConstructorExpander : WpfExpander
    {
        
        public ConstructorExpander(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "UI_ServiceTestTestStepExpander_.ctor _AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public UIWarewolfStudioViewMoButton UIWarewolfStudioViewMoButton
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoButton == null))
                {
                    this.mUIWarewolfStudioViewMoButton = new UIWarewolfStudioViewMoButton(this);
                }
                return this.mUIWarewolfStudioViewMoButton;
            }
        }
        
        public StepOutputs_ctor_Table StepOutputs_ctor_Table
        {
            get
            {
                if ((this.mStepOutputs_ctor_Table == null))
                {
                    this.mStepOutputs_ctor_Table = new StepOutputs_ctor_Table(this);
                }
                return this.mStepOutputs_ctor_Table;
            }
        }
        
        public WpfCell UIItemWarewolfStudioViCell
        {
            get
            {
                if ((this.mUIItemWarewolfStudioViCell == null))
                {
                    this.mUIItemWarewolfStudioViCell = new WpfCell(this);
                    #region Search Criteria
                    this.mUIItemWarewolfStudioViCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
                    this.mUIItemWarewolfStudioViCell.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "2";
                    this.mUIItemWarewolfStudioViCell.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
                    this.mUIItemWarewolfStudioViCell.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIItemWarewolfStudioViCell.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mUIItemWarewolfStudioViCell;
            }
        }
        #endregion
        
        #region Fields
        private UIWarewolfStudioViewMoButton mUIWarewolfStudioViewMoButton;
        
        private StepOutputs_ctor_Table mStepOutputs_ctor_Table;
        
        private WpfCell mUIItemWarewolfStudioViCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWarewolfStudioViewMoButton : WpfButton
    {
        
        public UIWarewolfStudioViewMoButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_TestStepDelete_AutoID";
                    this.mDeleteButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButton.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StepOutputs_ctor_Table : WpfTable
    {
        
        public StepOutputs_ctor_Table(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "UI_StepOutputs_.ctor _AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public ColumnHeadersPrHeader5 ColumnHeadersPrHeader
        {
            get
            {
                if ((this.mColumnHeadersPrHeader == null))
                {
                    this.mColumnHeadersPrHeader = new ColumnHeadersPrHeader5(this);
                }
                return this.mColumnHeadersPrHeader;
            }
        }
        
        public ItemRow ItemRow
        {
            get
            {
                if ((this.mItemRow == null))
                {
                    this.mItemRow = new ItemRow(this);
                }
                return this.mItemRow;
            }
        }
        #endregion
        
        #region Fields
        private ColumnHeadersPrHeader5 mColumnHeadersPrHeader;
        
        private ItemRow mItemRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ColumnHeadersPrHeader5 : WpfControl
    {
        
        public ColumnHeadersPrHeader5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Header";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_ColumnHeadersPresenter";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public ColumnHeader ColumnHeader
        {
            get
            {
                if ((this.mColumnHeader == null))
                {
                    this.mColumnHeader = new ColumnHeader(this);
                }
                return this.mColumnHeader;
            }
        }
        #endregion
        
        #region Fields
        private ColumnHeader mColumnHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ColumnHeader : WpfControl
    {
        
        public ColumnHeader(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton UIAssertRadioButton
        {
            get
            {
                if ((this.mUIAssertRadioButton == null))
                {
                    this.mUIAssertRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUIAssertRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Assert";
                    this.mUIAssertRadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAssertRadioButton.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
                    #endregion
                }
                return this.mUIAssertRadioButton;
            }
        }
        
        public WpfRadioButton UIMockRadioButton
        {
            get
            {
                if ((this.mUIMockRadioButton == null))
                {
                    this.mUIMockRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUIMockRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Mock";
                    this.mUIMockRadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIMockRadioButton.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
                    #endregion
                }
                return this.mUIMockRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mUIAssertRadioButton;
        
        private WpfRadioButton mUIMockRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemRow : WpfRow
    {
        
        public ItemRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public Cell3 Cell
        {
            get
            {
                if ((this.mCell == null))
                {
                    this.mCell = new Cell3(this);
                }
                return this.mCell;
            }
        }
        
        public Cell11 Cell1
        {
            get
            {
                if ((this.mCell1 == null))
                {
                    this.mCell1 = new Cell11(this);
                }
                return this.mCell1;
            }
        }
        
        public Cell21 Cell2
        {
            get
            {
                if ((this.mCell2 == null))
                {
                    this.mCell2 = new Cell21(this);
                }
                return this.mCell2;
            }
        }
        #endregion
        
        #region Fields
        private Cell3 mCell;
        
        private Cell11 mCell1;
        
        private Cell21 mCell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell3 : WpfCell
    {
        
        public Cell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Result";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public WpfEdit AssertValue_humanEdit
        {
            get
            {
                if ((this.mAssertValue_humanEdit == null))
                {
                    this.mAssertValue_humanEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mAssertValue_humanEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_AssertValue_[[@human]]_AutoID";
                    this.mAssertValue_humanEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertValue_humanEdit.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
                    #endregion
                }
                return this.mAssertValue_humanEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAssertValue_humanEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell11 : WpfCell
    {
        
        public Cell11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public WpfComboBox AssertOp_human_AuComboBox
        {
            get
            {
                if ((this.mAssertOp_human_AuComboBox == null))
                {
                    this.mAssertOp_human_AuComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mAssertOp_human_AuComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_AssertOp_[[@human]]_AutoID";
                    this.mAssertOp_human_AuComboBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertOp_human_AuComboBox.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mAssertOp_human_AuComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mAssertOp_human_AuComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell21 : WpfCell
    {
        
        public Cell21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
            #endregion
        }
        
        #region Properties
        public AssertValue_id1tyComboBox AssertValue_id1tyComboBox
        {
            get
            {
                if ((this.mAssertValue_id1tyComboBox == null))
                {
                    this.mAssertValue_id1tyComboBox = new AssertValue_id1tyComboBox(this);
                }
                return this.mAssertValue_id1tyComboBox;
            }
        }
        #endregion
        
        #region Fields
        private AssertValue_id1tyComboBox mAssertValue_id1tyComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertValue_id1tyComboBox : WpfComboBox
    {
        
        public AssertValue_id1tyComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_AssertValue_{\r\n  \"$id\": \"1\",\r\n  \"$type\": \"TestingDotnetDllCascading.Human\",\r\n " +
                " \"Name\": \"Default\",\r\n  \"PersonFood\": {\r\n    \"$id\": \"2\",\r\n    \"$type\": \"TestingDo" +
                "tnetDllCascading.Food\",\r\n    \"FoodName\": \"DefaultFood\"\r\n  },\r\n  \"SurName\": null\r" +
                "\n}_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mTextEdit.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FavouriteFoodsExpander : WpfExpander
    {
        
        public FavouriteFoodsExpander(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "UI_ServiceTestTestStepExpander_FavouriteFoods_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public WarewolfStudioViewMoButton WarewolfStudioViewMoButton
        {
            get
            {
                if ((this.mWarewolfStudioViewMoButton == null))
                {
                    this.mWarewolfStudioViewMoButton = new WarewolfStudioViewMoButton(this);
                }
                return this.mWarewolfStudioViewMoButton;
            }
        }
        
        public StepOutputs_FavouTable StepOutputs_FavouTable
        {
            get
            {
                if ((this.mStepOutputs_FavouTable == null))
                {
                    this.mStepOutputs_FavouTable = new StepOutputs_FavouTable(this);
                }
                return this.mStepOutputs_FavouTable;
            }
        }
        #endregion
        
        #region Fields
        private WarewolfStudioViewMoButton mWarewolfStudioViewMoButton;
        
        private StepOutputs_FavouTable mStepOutputs_FavouTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WarewolfStudioViewMoButton : WpfButton
    {
        
        public WarewolfStudioViewMoButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_TestStepDelete_AutoID";
                    this.mDeleteButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButton.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StepOutputs_FavouTable : WpfTable
    {
        
        public StepOutputs_FavouTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "UI_StepOutputs_FavouriteFoods_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public ColumnHeadersPrHeader6 ColumnHeadersPrHeader
        {
            get
            {
                if ((this.mColumnHeadersPrHeader == null))
                {
                    this.mColumnHeadersPrHeader = new ColumnHeadersPrHeader6(this);
                }
                return this.mColumnHeadersPrHeader;
            }
        }
        
        public ItemRow1 ItemRow
        {
            get
            {
                if ((this.mItemRow == null))
                {
                    this.mItemRow = new ItemRow1(this);
                }
                return this.mItemRow;
            }
        }
        #endregion
        
        #region Fields
        private ColumnHeadersPrHeader6 mColumnHeadersPrHeader;
        
        private ItemRow1 mItemRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ColumnHeadersPrHeader6 : WpfControl
    {
        
        public ColumnHeadersPrHeader6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Header";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_ColumnHeadersPresenter";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public ItemColumnHeader ItemColumnHeader
        {
            get
            {
                if ((this.mItemColumnHeader == null))
                {
                    this.mItemColumnHeader = new ItemColumnHeader(this);
                }
                return this.mItemColumnHeader;
            }
        }
        #endregion
        
        #region Fields
        private ItemColumnHeader mItemColumnHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemColumnHeader : WpfControl
    {
        
        public ItemColumnHeader(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "ColumnHeader";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton AssertRadioButton
        {
            get
            {
                if ((this.mAssertRadioButton == null))
                {
                    this.mAssertRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mAssertRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Assert";
                    this.mAssertRadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertRadioButton.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
                    #endregion
                }
                return this.mAssertRadioButton;
            }
        }
        
        public WpfRadioButton MockRadioButton
        {
            get
            {
                if ((this.mMockRadioButton == null))
                {
                    this.mMockRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mMockRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Mock";
                    this.mMockRadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mMockRadioButton.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
                    #endregion
                }
                return this.mMockRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mAssertRadioButton;
        
        private WpfRadioButton mMockRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemRow1 : WpfRow
    {
        
        public ItemRow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public Cell4 Cell
        {
            get
            {
                if ((this.mCell == null))
                {
                    this.mCell = new Cell4(this);
                }
                return this.mCell;
            }
        }
        
        public Cell12 Cell1
        {
            get
            {
                if ((this.mCell1 == null))
                {
                    this.mCell1 = new Cell12(this);
                }
                return this.mCell1;
            }
        }
        
        public Cell22 Cell2
        {
            get
            {
                if ((this.mCell2 == null))
                {
                    this.mCell2 = new Cell22(this);
                }
                return this.mCell2;
            }
        }
        #endregion
        
        #region Fields
        private Cell4 mCell;
        
        private Cell12 mCell1;
        
        private Cell22 mCell2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell4 : WpfCell
    {
        
        public Cell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Result";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public WpfEdit AssertValue_foodsEdit
        {
            get
            {
                if ((this.mAssertValue_foodsEdit == null))
                {
                    this.mAssertValue_foodsEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mAssertValue_foodsEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_AssertValue_[[@foods]]_AutoID";
                    this.mAssertValue_foodsEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertValue_foodsEdit.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
                    #endregion
                }
                return this.mAssertValue_foodsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAssertValue_foodsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell12 : WpfCell
    {
        
        public Cell12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "2";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public WpfComboBox AssertOp_foods_AuComboBox
        {
            get
            {
                if ((this.mAssertOp_foods_AuComboBox == null))
                {
                    this.mAssertOp_foods_AuComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mAssertOp_foods_AuComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_AssertOp_[[@foods]]_AutoID";
                    this.mAssertOp_foods_AuComboBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertOp_foods_AuComboBox.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
                    #endregion
                }
                return this.mAssertOp_foods_AuComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mAssertOp_foods_AuComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell22 : WpfCell
    {
        
        public Cell22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
            #endregion
        }
        
        #region Properties
        public AssertValue_id1tyComboBox1 AssertValue_id1tyComboBox
        {
            get
            {
                if ((this.mAssertValue_id1tyComboBox == null))
                {
                    this.mAssertValue_id1tyComboBox = new AssertValue_id1tyComboBox1(this);
                }
                return this.mAssertValue_id1tyComboBox;
            }
        }
        #endregion
        
        #region Fields
        private AssertValue_id1tyComboBox1 mAssertValue_id1tyComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertValue_id1tyComboBox1 : WpfComboBox
    {
        
        public AssertValue_id1tyComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = @"UI_AssertValue_[
  {
    ""$id"": ""1"",
    ""$type"": ""TestingDotnetDllCascading.Food"",
    ""FoodName"": ""Pizza""
  },
  {
    ""$id"": ""2"",
    ""$type"": ""TestingDotnetDllCascading.Food"",
    ""FoodName"": ""Burger""
  },
  {
    ""$id"": ""3"",
    ""$type"": ""TestingDotnetDllCascading.Food"",
    ""FoodName"": ""Chicken""
  }
]_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mTextEdit.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DiceRollTreeItem : WpfTreeItem
    {
        
        public DiceRollTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DiceRollExpander DiceRollExpander
        {
            get
            {
                if ((this.mDiceRollExpander == null))
                {
                    this.mDiceRollExpander = new DiceRollExpander(this);
                }
                return this.mDiceRollExpander;
            }
        }
        #endregion
        
        #region Fields
        private DiceRollExpander mDiceRollExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DiceRollExpander : WpfExpander
    {
        
        public DiceRollExpander(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "UI_ServiceTestTestStepExpander_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallDataGridTable6 SmallDataGridTable
        {
            get
            {
                if ((this.mSmallDataGridTable == null))
                {
                    this.mSmallDataGridTable = new SmallDataGridTable6(this);
                }
                return this.mSmallDataGridTable;
            }
        }
        #endregion
        
        #region Fields
        private SmallDataGridTable6 mSmallDataGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallDataGridTable6 : WpfTable
    {
        
        public SmallDataGridTable6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row18 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row18(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row18 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row18 : WpfRow
    {
        
        public Row18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResultCell5 ResultCell
        {
            get
            {
                if ((this.mResultCell == null))
                {
                    this.mResultCell = new ResultCell5(this);
                }
                return this.mResultCell;
            }
        }
        #endregion
        
        #region Fields
        private ResultCell5 mResultCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultCell5 : WpfCell
    {
        
        public ResultCell5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Result";
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit AssertValueResultEdit
        {
            get
            {
                if ((this.mAssertValueResultEdit == null))
                {
                    this.mAssertValueResultEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mAssertValueResultEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_AssertValue_AutoID";
                    this.mAssertValueResultEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssertValueResultEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssertValueResultEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAssertValueResultEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputMessageStep : WpfExpander
    {
        
        public OutputMessageStep(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "UI_ServiceTestTestStepExpander_Set the output variable (1)_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIUI_StepOutputs_SetthTable UIUI_StepOutputs_SetthTable
        {
            get
            {
                if ((this.mUIUI_StepOutputs_SetthTable == null))
                {
                    this.mUIUI_StepOutputs_SetthTable = new UIUI_StepOutputs_SetthTable(this);
                }
                return this.mUIUI_StepOutputs_SetthTable;
            }
        }
        
        public OutputStepHeader OutputStepHeader
        {
            get
            {
                if ((this.mOutputStepHeader == null))
                {
                    this.mOutputStepHeader = new OutputStepHeader(this);
                }
                return this.mOutputStepHeader;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_StepOutputs_SetthTable mUIUI_StepOutputs_SetthTable;
        
        private OutputStepHeader mOutputStepHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUI_StepOutputs_SetthTable : WpfTable
    {
        
        public UIUI_StepOutputs_SetthTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "UI_StepOutputs_Set the output variable (1)_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIItemRow UIItemRow
        {
            get
            {
                if ((this.mUIItemRow == null))
                {
                    this.mUIItemRow = new UIItemRow(this);
                }
                return this.mUIItemRow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemRow mUIItemRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemRow : WpfRow
    {
        
        public UIItemRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIItemWarewolfStudioViCell UIItemWarewolfStudioViCell
        {
            get
            {
                if ((this.mUIItemWarewolfStudioViCell == null))
                {
                    this.mUIItemWarewolfStudioViCell = new UIItemWarewolfStudioViCell(this);
                }
                return this.mUIItemWarewolfStudioViCell;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWarewolfStudioViCell mUIItemWarewolfStudioViCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWarewolfStudioViCell : WpfCell
    {
        
        public UIItemWarewolfStudioViCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIUI_AssertValue_HelloEdit
        {
            get
            {
                if ((this.mUIUI_AssertValue_HelloEdit == null))
                {
                    this.mUIUI_AssertValue_HelloEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUI_AssertValue_HelloEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_AssertValue_Hello There World_AutoID";
                    this.mUIUI_AssertValue_HelloEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIUI_AssertValue_HelloEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIUI_AssertValue_HelloEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputStepHeader : WpfButton
    {
        
        public OutputStepHeader(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText UIItemText
        {
            get
            {
                if ((this.mUIItemText == null))
                {
                    this.mUIItemText = new WpfText(this);
                    #region Search Criteria
                    this.mUIItemText.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mUIItemText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIItemText;
            }
        }
        
        public WpfButton Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new WpfButton(this);
                    #region Search Criteria
                    this.mDelete.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_TestStepDelete_AutoID";
                    this.mDelete.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDelete;
            }
        }
        
        public WpfText Status
        {
            get
            {
                if ((this.mStatus == null))
                {
                    this.mStatus = new WpfText(this);
                    #region Search Criteria
                    this.mStatus.SearchProperties[WpfText.PropertyNames.Name] = "?";
                    this.mStatus.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStatus;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIItemText;
        
        private WpfButton mDelete;
        
        private WpfText mStatus;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UserControl_1Custom : WpfCustom
    {
        
        public UserControl_1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane(this);
                }
                return this.mScrollViewerPane;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane mScrollViewerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane : WpfPane
    {
        
        public ScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "scrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ActivityBuilderCustom ActivityBuilderCustom
        {
            get
            {
                if ((this.mActivityBuilderCustom == null))
                {
                    this.mActivityBuilderCustom = new ActivityBuilderCustom(this);
                }
                return this.mActivityBuilderCustom;
            }
        }
        #endregion
        
        #region Fields
        private ActivityBuilderCustom mActivityBuilderCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ActivityBuilderCustom : WpfCustom
    {
        
        public ActivityBuilderCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ActivityTypeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActivityTypeDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowItemPresenteCustom WorkflowItemPresenteCustom
        {
            get
            {
                if ((this.mWorkflowItemPresenteCustom == null))
                {
                    this.mWorkflowItemPresenteCustom = new WorkflowItemPresenteCustom(this);
                }
                return this.mWorkflowItemPresenteCustom;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowItemPresenteCustom mWorkflowItemPresenteCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowItemPresenteCustom : WpfCustom
    {
        
        public WorkflowItemPresenteCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FlowchartCustom FlowchartCustom
        {
            get
            {
                if ((this.mFlowchartCustom == null))
                {
                    this.mFlowchartCustom = new FlowchartCustom(this);
                }
                return this.mFlowchartCustom;
            }
        }
        #endregion
        
        #region Fields
        private FlowchartCustom mFlowchartCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FlowchartCustom : WpfCustom
    {
        
        public FlowchartCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Hello World(FlowchartDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public MultiAssign MultiAssign
        {
            get
            {
                if ((this.mMultiAssign == null))
                {
                    this.mMultiAssign = new MultiAssign(this);
                }
                return this.mMultiAssign;
            }
        }
        
        public Decision Decision
        {
            get
            {
                if ((this.mDecision == null))
                {
                    this.mDecision = new Decision(this);
                }
                return this.mDecision;
            }
        }
        #endregion
        
        #region Fields
        private MultiAssign mMultiAssign;
        
        private Decision mDecision;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MultiAssign : WpfCustom
    {
        
        public MultiAssign(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.ClassName, "MultiAssignDesigner", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "MultiAssignDesigner", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit DisplayNameEdit
        {
            get
            {
                if ((this.mDisplayNameEdit == null))
                {
                    this.mDisplayNameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mDisplayNameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DisplayNameBox";
                    this.mDisplayNameEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisplayNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mDisplayNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Decision : WpfCustom
    {
        
        public Decision(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "FlowDecisionDesigner", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.ClassName, "FlowDecisionDesigner", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit DisplayNameEdit
        {
            get
            {
                if ((this.mDisplayNameEdit == null))
                {
                    this.mDisplayNameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mDisplayNameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DisplayNameTextBox";
                    this.mDisplayNameEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisplayNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mDisplayNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIInfragisticsControlsTreeItem : WpfTreeItem
    {
        
        public UIInfragisticsControlsTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIWarewolfStudioViewMoExpander UIWarewolfStudioViewMoExpander
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoExpander == null))
                {
                    this.mUIWarewolfStudioViewMoExpander = new UIWarewolfStudioViewMoExpander(this);
                }
                return this.mUIWarewolfStudioViewMoExpander;
            }
        }
        #endregion
        
        #region Fields
        private UIWarewolfStudioViewMoExpander mUIWarewolfStudioViewMoExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWarewolfStudioViewMoExpander : WpfExpander
    {
        
        public UIWarewolfStudioViewMoExpander(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "UI_ServiceTestTestStepExpander_.ctor _AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIUI_StepOutputs_ctor_Table UIUI_StepOutputs_ctor_Table
        {
            get
            {
                if ((this.mUIUI_StepOutputs_ctor_Table == null))
                {
                    this.mUIUI_StepOutputs_ctor_Table = new UIUI_StepOutputs_ctor_Table(this);
                }
                return this.mUIUI_StepOutputs_ctor_Table;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_StepOutputs_ctor_Table mUIUI_StepOutputs_ctor_Table;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUI_StepOutputs_ctor_Table : WpfTable
    {
        
        public UIUI_StepOutputs_ctor_Table(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "UI_StepOutputs_.ctor _AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIItemRow1 UIItemRow
        {
            get
            {
                if ((this.mUIItemRow == null))
                {
                    this.mUIItemRow = new UIItemRow1(this);
                }
                return this.mUIItemRow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemRow1 mUIItemRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemRow1 : WpfRow
    {
        
        public UIItemRow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIItemWarewolfStudioViCell1 UIItemWarewolfStudioViCell
        {
            get
            {
                if ((this.mUIItemWarewolfStudioViCell == null))
                {
                    this.mUIItemWarewolfStudioViCell = new UIItemWarewolfStudioViCell1(this);
                }
                return this.mUIItemWarewolfStudioViCell;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWarewolfStudioViCell1 mUIItemWarewolfStudioViCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWarewolfStudioViCell1 : WpfCell
    {
        
        public UIItemWarewolfStudioViCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIUI_AssertValue_id1tyComboBox UIUI_AssertValue_id1tyComboBox
        {
            get
            {
                if ((this.mUIUI_AssertValue_id1tyComboBox == null))
                {
                    this.mUIUI_AssertValue_id1tyComboBox = new UIUI_AssertValue_id1tyComboBox(this);
                }
                return this.mUIUI_AssertValue_id1tyComboBox;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_AssertValue_id1tyComboBox mUIUI_AssertValue_id1tyComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUI_AssertValue_id1tyComboBox : WpfComboBox
    {
        
        public UIUI_AssertValue_id1tyComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_AssertValue_{\r\n  \"$id\": \"1\",\r\n  \"$type\": \"TestingDotnetDllCascading.Human\",\r\n " +
                " \"Name\": \"Default\",\r\n  \"PersonFood\": {\r\n    \"$id\": \"2\",\r\n    \"$type\": \"TestingDo" +
                "tnetDllCascading.Food\",\r\n    \"FoodName\": \"DefaultFood\"\r\n  },\r\n  \"SurName\": null\r" +
                "\n}_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mTextEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPane_AutoIDCustom : WpfCustom
    {
        
        public SplitPane_AutoIDCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SplitPane_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIUI_TabManager_AutoIDTabList UIUI_TabManager_AutoIDTabList
        {
            get
            {
                if ((this.mUIUI_TabManager_AutoIDTabList == null))
                {
                    this.mUIUI_TabManager_AutoIDTabList = new UIUI_TabManager_AutoIDTabList(this);
                }
                return this.mUIUI_TabManager_AutoIDTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_TabManager_AutoIDTabList mUIUI_TabManager_AutoIDTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUI_TabManager_AutoIDTabList : WpfTabList
    {
        
        public UIUI_TabManager_AutoIDTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIDev2ViewModelsStudioTabPage UIDev2ViewModelsStudioTabPage
        {
            get
            {
                if ((this.mUIDev2ViewModelsStudioTabPage == null))
                {
                    this.mUIDev2ViewModelsStudioTabPage = new UIDev2ViewModelsStudioTabPage(this);
                }
                return this.mUIDev2ViewModelsStudioTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UIDev2ViewModelsStudioTabPage mUIDev2ViewModelsStudioTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDev2ViewModelsStudioTabPage : WpfTabPage
    {
        
        public UIDev2ViewModelsStudioTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.StudioTestViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIDev2StudioViewModelsCustom UIDev2StudioViewModelsCustom
        {
            get
            {
                if ((this.mUIDev2StudioViewModelsCustom == null))
                {
                    this.mUIDev2StudioViewModelsCustom = new UIDev2StudioViewModelsCustom(this);
                }
                return this.mUIDev2StudioViewModelsCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDev2StudioViewModelsCustom mUIDev2StudioViewModelsCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDev2StudioViewModelsCustom : WpfCustom
    {
        
        public UIDev2StudioViewModelsCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIContentDockManagerCustom UIContentDockManagerCustom
        {
            get
            {
                if ((this.mUIContentDockManagerCustom == null))
                {
                    this.mUIContentDockManagerCustom = new UIContentDockManagerCustom(this);
                }
                return this.mUIContentDockManagerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIContentDockManagerCustom mUIContentDockManagerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIContentDockManagerCustom : WpfCustom
    {
        
        public UIContentDockManagerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ContentDockManager";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIUI_ServiceTestView_ACustom UIUI_ServiceTestView_ACustom
        {
            get
            {
                if ((this.mUIUI_ServiceTestView_ACustom == null))
                {
                    this.mUIUI_ServiceTestView_ACustom = new UIUI_ServiceTestView_ACustom(this);
                }
                return this.mUIUI_ServiceTestView_ACustom;
            }
        }
        
        public UIOUTPUTCustom UIOUTPUTCustom
        {
            get
            {
                if ((this.mUIOUTPUTCustom == null))
                {
                    this.mUIOUTPUTCustom = new UIOUTPUTCustom(this);
                }
                return this.mUIOUTPUTCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_ServiceTestView_ACustom mUIUI_ServiceTestView_ACustom;
        
        private UIOUTPUTCustom mUIOUTPUTCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUI_ServiceTestView_ACustom : WpfCustom
    {
        
        public UIUI_ServiceTestView_ACustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceTestView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ServiceTestView_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIUserControl_1Custom UIUserControl_1Custom
        {
            get
            {
                if ((this.mUIUserControl_1Custom == null))
                {
                    this.mUIUserControl_1Custom = new UIUserControl_1Custom(this);
                }
                return this.mUIUserControl_1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIUserControl_1Custom mUIUserControl_1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUserControl_1Custom : WpfCustom
    {
        
        public UIUserControl_1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIScrollViewerPane UIScrollViewerPane
        {
            get
            {
                if ((this.mUIScrollViewerPane == null))
                {
                    this.mUIScrollViewerPane = new UIScrollViewerPane(this);
                }
                return this.mUIScrollViewerPane;
            }
        }
        #endregion
        
        #region Fields
        private UIScrollViewerPane mUIScrollViewerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIScrollViewerPane : WpfPane
    {
        
        public UIScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "scrollViewer";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIActivityBuilderCustom UIActivityBuilderCustom
        {
            get
            {
                if ((this.mUIActivityBuilderCustom == null))
                {
                    this.mUIActivityBuilderCustom = new UIActivityBuilderCustom(this);
                }
                return this.mUIActivityBuilderCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIActivityBuilderCustom mUIActivityBuilderCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIActivityBuilderCustom : WpfCustom
    {
        
        public UIActivityBuilderCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ActivityTypeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActivityTypeDesigner";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIWorkflowItemPresenteCustom UIWorkflowItemPresenteCustom
        {
            get
            {
                if ((this.mUIWorkflowItemPresenteCustom == null))
                {
                    this.mUIWorkflowItemPresenteCustom = new UIWorkflowItemPresenteCustom(this);
                }
                return this.mUIWorkflowItemPresenteCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIWorkflowItemPresenteCustom mUIWorkflowItemPresenteCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWorkflowItemPresenteCustom : WpfCustom
    {
        
        public UIWorkflowItemPresenteCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIFlowchartCustom1 UIFlowchartCustom
        {
            get
            {
                if ((this.mUIFlowchartCustom == null))
                {
                    this.mUIFlowchartCustom = new UIFlowchartCustom1(this);
                }
                return this.mUIFlowchartCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFlowchartCustom1 mUIFlowchartCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFlowchartCustom1 : WpfCustom
    {
        
        public UIFlowchartCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DecisionWF(FlowchartDesigner)";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfCustom UIFlowDecisionCustom
        {
            get
            {
                if ((this.mUIFlowDecisionCustom == null))
                {
                    this.mUIFlowDecisionCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIFlowDecisionCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowDecisionDesigner";
                    this.mUIFlowDecisionCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "FlowDecisionDesigner";
                    this.mUIFlowDecisionCustom.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIFlowDecisionCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUIFlowDecisionCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOUTPUTCustom : WpfCustom
    {
        
        public UIOUTPUTCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "OutputPane";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfButton UIUnpinBtnButton
        {
            get
            {
                if ((this.mUIUnpinBtnButton == null))
                {
                    this.mUIUnpinBtnButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIUnpinBtnButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mUIUnpinBtnButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIUnpinBtnButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIUnpinBtnButton;
        #endregion
    }
}
