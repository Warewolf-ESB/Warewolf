// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Warewolf.UITests.WorkflowTab.Tools.ControlFlow.ControlFlowToolsUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class ControlFlowToolsUIMap
    {
        
        /// <summary>
        /// Open_Tools_UI_Map_Designer_To_Flowchart - Use 'Open_Tools_UI_Map_Designer_To_FlowchartParams' to pass parameters into this method.
        /// </summary>
        public void Open_Tools_UI_Map_Designer_To_Flowchart()
        {
            #region Variable Declarations
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Verify that the 'Exists' property of 'Flowchart' custom control equals 'True'
            Assert.AreEqual(this.Open_Tools_UI_Map_Designer_To_FlowchartParams.FlowchartExists, flowchart.Exists, "Flowchart does not exist.");
        }
        
        #region Properties
        public virtual Open_Tools_UI_Map_Designer_To_FlowchartParams Open_Tools_UI_Map_Designer_To_FlowchartParams
        {
            get
            {
                if ((this.mOpen_Tools_UI_Map_Designer_To_FlowchartParams == null))
                {
                    this.mOpen_Tools_UI_Map_Designer_To_FlowchartParams = new Open_Tools_UI_Map_Designer_To_FlowchartParams();
                }
                return this.mOpen_Tools_UI_Map_Designer_To_FlowchartParams;
            }
        }
        
        public MainStudioWindow MainStudioWindow
        {
            get
            {
                if ((this.mMainStudioWindow == null))
                {
                    this.mMainStudioWindow = new MainStudioWindow();
                }
                return this.mMainStudioWindow;
            }
        }
        #endregion
        
        #region Fields
        private Open_Tools_UI_Map_Designer_To_FlowchartParams mOpen_Tools_UI_Map_Designer_To_FlowchartParams;
        
        private MainStudioWindow mMainStudioWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Tools_UI_Map_Designer_To_Flowchart'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Tools_UI_Map_Designer_To_FlowchartParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Flowchart' custom control equals 'True'
        /// </summary>
        public bool FlowchartExists = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MainStudioWindow : WpfWindow
    {
        
        public MainStudioWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.Name, "Warewolf", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DockManager DockManager
        {
            get
            {
                if ((this.mDockManager == null))
                {
                    this.mDockManager = new DockManager(this);
                }
                return this.mDockManager;
            }
        }
        #endregion
        
        #region Fields
        private DockManager mDockManager;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DockManager : WpfCustom
    {
        
        public DockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitPaneMiddle SplitPaneMiddle
        {
            get
            {
                if ((this.mSplitPaneMiddle == null))
                {
                    this.mSplitPaneMiddle = new SplitPaneMiddle(this);
                }
                return this.mSplitPaneMiddle;
            }
        }
        #endregion
        
        #region Fields
        private SplitPaneMiddle mSplitPaneMiddle;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneMiddle : WpfCustom
    {
        
        public SplitPaneMiddle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabManSplitPane TabManSplitPane
        {
            get
            {
                if ((this.mTabManSplitPane == null))
                {
                    this.mTabManSplitPane = new TabManSplitPane(this);
                }
                return this.mTabManSplitPane;
            }
        }
        #endregion
        
        #region Fields
        private TabManSplitPane mTabManSplitPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabManSplitPane : WpfCustom
    {
        
        public TabManSplitPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SplitPane_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabMan TabMan
        {
            get
            {
                if ((this.mTabMan == null))
                {
                    this.mTabMan = new TabMan(this);
                }
                return this.mTabMan;
            }
        }
        #endregion
        
        #region Fields
        private TabMan mTabMan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabMan : WpfTabList
    {
        
        public TabMan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowTab WorkflowTab
        {
            get
            {
                if ((this.mWorkflowTab == null))
                {
                    this.mWorkflowTab = new WorkflowTab(this);
                }
                return this.mWorkflowTab;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowTab mWorkflowTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowTab : WpfTabPage
    {
        
        public WorkflowTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.Workflow.WorkflowDesignerViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext mWorkSurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext : WpfCustom
    {
        
        public WorkSurfaceContext(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowDesignerView WorkflowDesignerView
        {
            get
            {
                if ((this.mWorkflowDesignerView == null))
                {
                    this.mWorkflowDesignerView = new WorkflowDesignerView(this);
                }
                return this.mWorkflowDesignerView;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowDesignerView mWorkflowDesignerView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowDesignerView : WpfCustom
    {
        
        public WorkflowDesignerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DesignerView DesignerView
        {
            get
            {
                if ((this.mDesignerView == null))
                {
                    this.mDesignerView = new DesignerView(this);
                }
                return this.mDesignerView;
            }
        }
        #endregion
        
        #region Fields
        private DesignerView mDesignerView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DesignerView : WpfCustom
    {
        
        public DesignerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane(this);
                }
                return this.mScrollViewerPane;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane mScrollViewerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane : WpfPane
    {
        
        public ScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "scrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ActivityTypeDesigner ActivityTypeDesigner
        {
            get
            {
                if ((this.mActivityTypeDesigner == null))
                {
                    this.mActivityTypeDesigner = new ActivityTypeDesigner(this);
                }
                return this.mActivityTypeDesigner;
            }
        }
        #endregion
        
        #region Fields
        private ActivityTypeDesigner mActivityTypeDesigner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ActivityTypeDesigner : WpfCustom
    {
        
        public ActivityTypeDesigner(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ActivityTypeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActivityTypeDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowItemPresenter WorkflowItemPresenter
        {
            get
            {
                if ((this.mWorkflowItemPresenter == null))
                {
                    this.mWorkflowItemPresenter = new WorkflowItemPresenter(this);
                }
                return this.mWorkflowItemPresenter;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowItemPresenter mWorkflowItemPresenter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowItemPresenter : WpfCustom
    {
        
        public WorkflowItemPresenter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Flowchart Flowchart
        {
            get
            {
                if ((this.mFlowchart == null))
                {
                    this.mFlowchart = new Flowchart(this);
                }
                return this.mFlowchart;
            }
        }
        #endregion
        
        #region Fields
        private Flowchart mFlowchart;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Flowchart : WpfCustom
    {
        
        public Flowchart(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Decision Decision
        {
            get
            {
                if ((this.mDecision == null))
                {
                    this.mDecision = new Decision(this);
                }
                return this.mDecision;
            }
        }
        
        public Sequence Sequence
        {
            get
            {
                if ((this.mSequence == null))
                {
                    this.mSequence = new Sequence(this);
                }
                return this.mSequence;
            }
        }
        
        public WpfCustom Switch
        {
            get
            {
                if ((this.mSwitch == null))
                {
                    this.mSwitch = new WpfCustom(this);
                    #region Search Criteria
                    this.mSwitch.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowSwitchDesigner";
                    this.mSwitch.SearchProperties[WpfControl.PropertyNames.AutomationId] = "FlowSwitchDesigner";
                    this.mSwitch.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mSwitch;
            }
        }
        #endregion
        
        #region Fields
        private Decision mDecision;
        
        private Sequence mSequence;
        
        private WpfCustom mSwitch;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Decision : WpfCustom
    {
        
        public Decision(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowDecisionDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "FlowDecisionDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit DisplayNameTextBoxEdit
        {
            get
            {
                if ((this.mDisplayNameTextBoxEdit == null))
                {
                    this.mDisplayNameTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mDisplayNameTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DisplayNameTextBox";
                    this.mDisplayNameTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisplayNameTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mDisplayNameTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Sequence : WpfCustom
    {
        
        public Sequence(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SequenceDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sequence(SequenceDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SequenceLargeView SequenceLargeView
        {
            get
            {
                if ((this.mSequenceLargeView == null))
                {
                    this.mSequenceLargeView = new SequenceLargeView(this);
                }
                return this.mSequenceLargeView;
            }
        }
        
        public SequenceSmallView SequenceSmallView
        {
            get
            {
                if ((this.mSequenceSmallView == null))
                {
                    this.mSequenceSmallView = new SequenceSmallView(this);
                }
                return this.mSequenceSmallView;
            }
        }
        
        public WpfButton UIDoneButton
        {
            get
            {
                if ((this.mUIDoneButton == null))
                {
                    this.mUIDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mUIDoneButton.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
                    #endregion
                }
                return this.mUIDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private SequenceLargeView mSequenceLargeView;
        
        private SequenceSmallView mSequenceSmallView;
        
        private WpfButton mUIDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SequenceLargeView : WpfCustom
    {
        
        public SequenceLargeView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SequenceDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sequence(SequenceDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AddModeNewActivity AddModeNewActivity
        {
            get
            {
                if ((this.mAddModeNewActivity == null))
                {
                    this.mAddModeNewActivity = new AddModeNewActivity(this);
                }
                return this.mAddModeNewActivity;
            }
        }
        
        public OnErrorCustom OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private AddModeNewActivity mAddModeNewActivity;
        
        private OnErrorCustom mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddModeNewActivity : WpfCustom
    {
        
        public AddModeNewActivity(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemsPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__ActivitiesPresenter_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom UISacdVerticalConnectoCustom
        {
            get
            {
                if ((this.mUISacdVerticalConnectoCustom == null))
                {
                    this.mUISacdVerticalConnectoCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUISacdVerticalConnectoCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.VerticalConnector";
                    this.mUISacdVerticalConnectoCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "sacd:VerticalConnector_1";
                    this.mUISacdVerticalConnectoCustom.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUISacdVerticalConnectoCustom;
            }
        }
        
        public WpfCustom MultiAssignObject
        {
            get
            {
                if ((this.mMultiAssignObject == null))
                {
                    this.mMultiAssignObject = new WpfCustom(this);
                    #region Search Criteria
                    this.mMultiAssignObject.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignObjectDesigner";
                    this.mMultiAssignObject.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Assign Object (0)(MultiAssignObjectDesigner)";
                    this.mMultiAssignObject.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mMultiAssignObject;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUISacdVerticalConnectoCustom;
        
        private WpfCustom mMultiAssignObject;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom : WpfCustom
    {
        
        public OnErrorCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup : WpfGroup
    {
        
        public OnErrorGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox UIEndthisworkflowCheckBox
        {
            get
            {
                if ((this.mUIEndthisworkflowCheckBox == null))
                {
                    this.mUIEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mUIEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox mErrorVariableComboBox;
        
        private WebServiceComboBox mWebServiceComboBox;
        
        private WpfCheckBox mUIEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox : WpfComboBox
    {
        
        public ErrorVariableComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox : WpfComboBox
    {
        
        public WebServiceComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SequenceSmallView : WpfCustom
    {
        
        public SequenceSmallView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
            #endregion
        }
        
        #region Properties
        public ElementTable ElementTable
        {
            get
            {
                if ((this.mElementTable == null))
                {
                    this.mElementTable = new ElementTable(this);
                }
                return this.mElementTable;
            }
        }
        
        public WpfCustom AddNewActivity
        {
            get
            {
                if ((this.mAddNewActivity == null))
                {
                    this.mAddNewActivity = new WpfCustom(this);
                    #region Search Criteria
                    this.mAddNewActivity.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
                    this.mAddNewActivity.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__DropPoint_AutoID";
                    this.mAddNewActivity.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mAddNewActivity;
            }
        }
        #endregion
        
        #region Fields
        private ElementTable mElementTable;
        
        private WpfCustom mAddNewActivity;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ElementTable : WpfTable
    {
        
        public ElementTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "InitialFocusElement";
            this.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
            #endregion
        }
        
        #region Properties
        public WpfRow AssignObject
        {
            get
            {
                if ((this.mAssignObject == null))
                {
                    this.mAssignObject = new WpfRow(this);
                    #region Search Criteria
                    this.mAssignObject.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mAssignObject.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mAssignObject;
            }
        }
        #endregion
        
        #region Fields
        private WpfRow mAssignObject;
        #endregion
    }
}
