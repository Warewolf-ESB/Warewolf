// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Warewolf.UITests.Settings.SettingsUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class SettingsUIMap
    {
        
        #region Properties
        public MainStudioWindow MainStudioWindow
        {
            get
            {
                if ((this.mMainStudioWindow == null))
                {
                    this.mMainStudioWindow = new MainStudioWindow();
                }
                return this.mMainStudioWindow;
            }
        }
        #endregion
        
        #region Fields
        private MainStudioWindow mMainStudioWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MainStudioWindow : WpfWindow
    {
        
        public MainStudioWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.Name, "Warewolf", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DockManager DockManager
        {
            get
            {
                if ((this.mDockManager == null))
                {
                    this.mDockManager = new DockManager(this);
                }
                return this.mDockManager;
            }
        }
        #endregion
        
        #region Fields
        private DockManager mDockManager;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DockManager : WpfCustom
    {
        
        public DockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitPaneMiddle SplitPaneMiddle
        {
            get
            {
                if ((this.mSplitPaneMiddle == null))
                {
                    this.mSplitPaneMiddle = new SplitPaneMiddle(this);
                }
                return this.mSplitPaneMiddle;
            }
        }
        #endregion
        
        #region Fields
        private SplitPaneMiddle mSplitPaneMiddle;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneMiddle : WpfCustom
    {
        
        public SplitPaneMiddle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabManSplitPane TabManSplitPane
        {
            get
            {
                if ((this.mTabManSplitPane == null))
                {
                    this.mTabManSplitPane = new TabManSplitPane(this);
                }
                return this.mTabManSplitPane;
            }
        }
        #endregion
        
        #region Fields
        private TabManSplitPane mTabManSplitPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabManSplitPane : WpfCustom
    {
        
        public TabManSplitPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SplitPane_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabMan TabMan
        {
            get
            {
                if ((this.mTabMan == null))
                {
                    this.mTabMan = new TabMan(this);
                }
                return this.mTabMan;
            }
        }
        #endregion
        
        #region Fields
        private TabMan mTabMan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabMan : WpfTabList
    {
        
        public TabMan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SettingsTab SettingsTab
        {
            get
            {
                if ((this.mSettingsTab == null))
                {
                    this.mSettingsTab = new SettingsTab(this);
                }
                return this.mSettingsTab;
            }
        }
        #endregion
        
        #region Fields
        private SettingsTab mSettingsTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SettingsTab : WpfTabPage
    {
        
        public SettingsTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Settings.SettingsViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorksurfaceContext WorksurfaceContext
        {
            get
            {
                if ((this.mWorksurfaceContext == null))
                {
                    this.mWorksurfaceContext = new WorksurfaceContext(this);
                }
                return this.mWorksurfaceContext;
            }
        }
        
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WorksurfaceContext mWorksurfaceContext;
        
        private WpfButton mCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorksurfaceContext : WpfCustom
    {
        
        public WorksurfaceContext(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SettingsView SettingsView
        {
            get
            {
                if ((this.mSettingsView == null))
                {
                    this.mSettingsView = new SettingsView(this);
                }
                return this.mSettingsView;
            }
        }
        #endregion
        
        #region Fields
        private SettingsView mSettingsView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SettingsView : WpfCustom
    {
        
        public SettingsView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SettingsView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SettingsView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabList TabList
        {
            get
            {
                if ((this.mTabList == null))
                {
                    this.mTabList = new TabList(this);
                }
                return this.mTabList;
            }
        }
        #endregion
        
        #region Fields
        private TabList mTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabList : WpfTabList
    {
        
        public TabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SecurityTab SecurityTab
        {
            get
            {
                if ((this.mSecurityTab == null))
                {
                    this.mSecurityTab = new SecurityTab(this);
                }
                return this.mSecurityTab;
            }
        }
        
        public LoggingTab LoggingTab
        {
            get
            {
                if ((this.mLoggingTab == null))
                {
                    this.mLoggingTab = new LoggingTab(this);
                }
                return this.mLoggingTab;
            }
        }
        
        public PerfomanceCounterTab PerfomanceCounterTab
        {
            get
            {
                if ((this.mPerfomanceCounterTab == null))
                {
                    this.mPerfomanceCounterTab = new PerfomanceCounterTab(this);
                }
                return this.mPerfomanceCounterTab;
            }
        }
        #endregion
        
        #region Fields
        private SecurityTab mSecurityTab;
        
        private LoggingTab mLoggingTab;
        
        private PerfomanceCounterTab mPerfomanceCounterTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SecurityTab : WpfTabPage
    {
        
        public SecurityTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "System.Windows.Controls.TabItem Header: Content:";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SecurityWindow SecurityWindow
        {
            get
            {
                if ((this.mSecurityWindow == null))
                {
                    this.mSecurityWindow = new SecurityWindow(this);
                }
                return this.mSecurityWindow;
            }
        }
        
        public WpfText SECURITY
        {
            get
            {
                if ((this.mSECURITY == null))
                {
                    this.mSECURITY = new WpfText(this);
                    #region Search Criteria
                    this.mSECURITY.SearchProperties[WpfText.PropertyNames.Name] = "SECURITY";
                    this.mSECURITY.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSECURITY;
            }
        }
        #endregion
        
        #region Fields
        private SecurityWindow mSecurityWindow;
        
        private WpfText mSECURITY;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SecurityWindow : WpfCustom
    {
        
        public SecurityWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SecurityView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SecurityViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ServerPermissions ServerPermissions
        {
            get
            {
                if ((this.mServerPermissions == null))
                {
                    this.mServerPermissions = new ServerPermissions(this);
                }
                return this.mServerPermissions;
            }
        }
        
        public ResourcePermissions ResourcePermissions
        {
            get
            {
                if ((this.mResourcePermissions == null))
                {
                    this.mResourcePermissions = new ResourcePermissions(this);
                }
                return this.mResourcePermissions;
            }
        }
        #endregion
        
        #region Fields
        private ServerPermissions mServerPermissions;
        
        private ResourcePermissions mResourcePermissions;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerPermissions : WpfTable
    {
        
        public ServerPermissions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ServerPermissionsDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WarewolfAdminROW WarewolfAdminROW
        {
            get
            {
                if ((this.mWarewolfAdminROW == null))
                {
                    this.mWarewolfAdminROW = new WarewolfAdminROW(this);
                }
                return this.mWarewolfAdminROW;
            }
        }
        
        public PublicROW PublicROW
        {
            get
            {
                if ((this.mPublicROW == null))
                {
                    this.mPublicROW = new PublicROW(this);
                }
                return this.mPublicROW;
            }
        }
        #endregion
        
        #region Fields
        private WarewolfAdminROW mWarewolfAdminROW;
        
        private PublicROW mPublicROW;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WarewolfAdminROW : WpfPane
    {
        
        public WarewolfAdminROW(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "0";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DeleteCell DeleteCell
        {
            get
            {
                if ((this.mDeleteCell == null))
                {
                    this.mDeleteCell = new DeleteCell(this);
                }
                return this.mDeleteCell;
            }
        }
        
        public DeployToCell DeployToCell
        {
            get
            {
                if ((this.mDeployToCell == null))
                {
                    this.mDeployToCell = new DeployToCell(this);
                }
                return this.mDeployToCell;
            }
        }
        
        public DeployFromCell DeployFromCell
        {
            get
            {
                if ((this.mDeployFromCell == null))
                {
                    this.mDeployFromCell = new DeployFromCell(this);
                }
                return this.mDeployFromCell;
            }
        }
        
        public AdministratorCell AdministratorCell
        {
            get
            {
                if ((this.mAdministratorCell == null))
                {
                    this.mAdministratorCell = new AdministratorCell(this);
                }
                return this.mAdministratorCell;
            }
        }
        
        public ViewCell ViewCell
        {
            get
            {
                if ((this.mViewCell == null))
                {
                    this.mViewCell = new ViewCell(this);
                }
                return this.mViewCell;
            }
        }
        
        public ExecuteCell ExecuteCell
        {
            get
            {
                if ((this.mExecuteCell == null))
                {
                    this.mExecuteCell = new ExecuteCell(this);
                }
                return this.mExecuteCell;
            }
        }
        
        public ContributeCell ContributeCell
        {
            get
            {
                if ((this.mContributeCell == null))
                {
                    this.mContributeCell = new ContributeCell(this);
                }
                return this.mContributeCell;
            }
        }
        #endregion
        
        #region Fields
        private DeleteCell mDeleteCell;
        
        private DeployToCell mDeployToCell;
        
        private DeployFromCell mDeployFromCell;
        
        private AdministratorCell mAdministratorCell;
        
        private ViewCell mViewCell;
        
        private ExecuteCell mExecuteCell;
        
        private ContributeCell mContributeCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteCell : WpfCell
    {
        
        public DeleteCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "Dev2.Runtime.Configuration.ViewModels.Base.RelayCommand";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_AddRemovebtn_AutoID";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeployToCell : WpfCell
    {
        
        public DeployToCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox DeployToCheckBox
        {
            get
            {
                if ((this.mDeployToCheckBox == null))
                {
                    this.mDeployToCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mDeployToCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_DeployToPermissionCheckBox_AutoID";
                    this.mDeployToCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Instance] = "1";
                    this.mDeployToCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployToCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mDeployToCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeployFromCell : WpfCell
    {
        
        public DeployFromCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox DeployFromCheckBox
        {
            get
            {
                if ((this.mDeployFromCheckBox == null))
                {
                    this.mDeployFromCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mDeployFromCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_DeployFromPermissionCheckBox_AutoID";
                    this.mDeployFromCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployFromCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mDeployFromCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AdministratorCell : WpfCell
    {
        
        public AdministratorCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox AdministratorCheckBox
        {
            get
            {
                if ((this.mAdministratorCheckBox == null))
                {
                    this.mAdministratorCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mAdministratorCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_AdministratorPermissionCheckBox_AutoID";
                    this.mAdministratorCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAdministratorCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mAdministratorCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ViewCell : WpfCell
    {
        
        public ViewCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ViewCheckBox
        {
            get
            {
                if ((this.mViewCheckBox == null))
                {
                    this.mViewCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mViewCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_ViewPermissionCheckBox_AutoID";
                    this.mViewCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mViewCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExecuteCell : WpfCell
    {
        
        public ExecuteCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ExecuteCheckBox
        {
            get
            {
                if ((this.mExecuteCheckBox == null))
                {
                    this.mExecuteCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mExecuteCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_ExecutePermissionCheckBox_AutoID";
                    this.mExecuteCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExecuteCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mExecuteCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ContributeCell : WpfCell
    {
        
        public ContributeCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ContributeCheckBox
        {
            get
            {
                if ((this.mContributeCheckBox == null))
                {
                    this.mContributeCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mContributeCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_ContributePermissionCheckBox_AutoID";
                    this.mContributeCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mContributeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mContributeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PublicROW : WpfPane
    {
        
        public PublicROW(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Public_DeployToCell Public_DeployToCell
        {
            get
            {
                if ((this.mPublic_DeployToCell == null))
                {
                    this.mPublic_DeployToCell = new Public_DeployToCell(this);
                }
                return this.mPublic_DeployToCell;
            }
        }
        
        public Public_DeployFromCell Public_DeployFromCell
        {
            get
            {
                if ((this.mPublic_DeployFromCell == null))
                {
                    this.mPublic_DeployFromCell = new Public_DeployFromCell(this);
                }
                return this.mPublic_DeployFromCell;
            }
        }
        
        public Public_AdministratorCell Public_AdministratorCell
        {
            get
            {
                if ((this.mPublic_AdministratorCell == null))
                {
                    this.mPublic_AdministratorCell = new Public_AdministratorCell(this);
                }
                return this.mPublic_AdministratorCell;
            }
        }
        
        public Public_ViewCell Public_ViewCell
        {
            get
            {
                if ((this.mPublic_ViewCell == null))
                {
                    this.mPublic_ViewCell = new Public_ViewCell(this);
                }
                return this.mPublic_ViewCell;
            }
        }
        
        public Public_ExecuteCell Public_ExecuteCell
        {
            get
            {
                if ((this.mPublic_ExecuteCell == null))
                {
                    this.mPublic_ExecuteCell = new Public_ExecuteCell(this);
                }
                return this.mPublic_ExecuteCell;
            }
        }
        
        public Public_ContributeCell Public_ContributeCell
        {
            get
            {
                if ((this.mPublic_ContributeCell == null))
                {
                    this.mPublic_ContributeCell = new Public_ContributeCell(this);
                }
                return this.mPublic_ContributeCell;
            }
        }
        
        public WindowsGroup WindowsGroup
        {
            get
            {
                if ((this.mWindowsGroup == null))
                {
                    this.mWindowsGroup = new WindowsGroup(this);
                }
                return this.mWindowsGroup;
            }
        }
        #endregion
        
        #region Fields
        private Public_DeployToCell mPublic_DeployToCell;
        
        private Public_DeployFromCell mPublic_DeployFromCell;
        
        private Public_AdministratorCell mPublic_AdministratorCell;
        
        private Public_ViewCell mPublic_ViewCell;
        
        private Public_ExecuteCell mPublic_ExecuteCell;
        
        private Public_ContributeCell mPublic_ContributeCell;
        
        private WindowsGroup mWindowsGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_DeployToCell : WpfCell
    {
        
        public Public_DeployToCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_DeployToCheckBox
        {
            get
            {
                if ((this.mPublic_DeployToCheckBox == null))
                {
                    this.mPublic_DeployToCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_DeployToCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_DeployToPermissionCheckBox_AutoID";
                    this.mPublic_DeployToCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_DeployToCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_DeployToCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_DeployFromCell : WpfCell
    {
        
        public Public_DeployFromCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_DeployFromCheckBox
        {
            get
            {
                if ((this.mPublic_DeployFromCheckBox == null))
                {
                    this.mPublic_DeployFromCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_DeployFromCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_DeployFromPermissionCheckBox_AutoID";
                    this.mPublic_DeployFromCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_DeployFromCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_DeployFromCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_AdministratorCell : WpfCell
    {
        
        public Public_AdministratorCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_AdministratorCheckBox
        {
            get
            {
                if ((this.mPublic_AdministratorCheckBox == null))
                {
                    this.mPublic_AdministratorCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_AdministratorCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_AdministratorPermissionCheckBox_AutoID";
                    this.mPublic_AdministratorCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_AdministratorCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_AdministratorCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_ViewCell : WpfCell
    {
        
        public Public_ViewCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_ViewCheckBox
        {
            get
            {
                if ((this.mPublic_ViewCheckBox == null))
                {
                    this.mPublic_ViewCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_ViewCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_ViewPermissionCheckBox_AutoID";
                    this.mPublic_ViewCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_ViewCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_ViewCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_ExecuteCell : WpfCell
    {
        
        public Public_ExecuteCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_ExecuteCheckBox
        {
            get
            {
                if ((this.mPublic_ExecuteCheckBox == null))
                {
                    this.mPublic_ExecuteCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_ExecuteCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_ExecutePermissionCheckBox_AutoID";
                    this.mPublic_ExecuteCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_ExecuteCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_ExecuteCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_ContributeCell : WpfCell
    {
        
        public Public_ContributeCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "7";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_ContributeCheckBox
        {
            get
            {
                if ((this.mPublic_ContributeCheckBox == null))
                {
                    this.mPublic_ContributeCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_ContributeCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_ContributePermissionCheckBox_AutoID";
                    this.mPublic_ContributeCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_ContributeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_ContributeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WindowsGroup : WpfCell
    {
        
        public WindowsGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "Public";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton Select_GroupButton
        {
            get
            {
                if ((this.mSelect_GroupButton == null))
                {
                    this.mSelect_GroupButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSelect_GroupButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Public_AddWindowsGroupButton_AutoID";
                    this.mSelect_GroupButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelect_GroupButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mSelect_GroupButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourcePermissions : WpfTable
    {
        
        public ResourcePermissions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ResourcePermissionsDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row1 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row1(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row1 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row1 : WpfPane
    {
        
        public Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "0";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton RemovePermissionButton
        {
            get
            {
                if ((this.mRemovePermissionButton == null))
                {
                    this.mRemovePermissionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRemovePermissionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_AddRemovebtn_AutoID";
                    this.mRemovePermissionButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mRemovePermissionButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mRemovePermissionButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LoggingTab : WpfTabPage
    {
        
        public LoggingTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "System.Windows.Controls.TabItem Header: Content:";
            this.SearchProperties[WpfTabPage.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LogSettingsViewConte LogSettingsViewConte
        {
            get
            {
                if ((this.mLogSettingsViewConte == null))
                {
                    this.mLogSettingsViewConte = new LogSettingsViewConte(this);
                }
                return this.mLogSettingsViewConte;
            }
        }
        #endregion
        
        #region Fields
        private LogSettingsViewConte mLogSettingsViewConte;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LogSettingsViewConte : WpfCustom
    {
        
        public LogSettingsViewConte(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.LoggingView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LogSettingsViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public StudioLogs StudioLogs
        {
            get
            {
                if ((this.mStudioLogs == null))
                {
                    this.mStudioLogs = new StudioLogs(this);
                }
                return this.mStudioLogs;
            }
        }
        
        public ServerLogs ServerLogs
        {
            get
            {
                if ((this.mServerLogs == null))
                {
                    this.mServerLogs = new ServerLogs(this);
                }
                return this.mServerLogs;
            }
        }
        #endregion
        
        #region Fields
        private StudioLogs mStudioLogs;
        
        private ServerLogs mServerLogs;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StudioLogs : WpfPane
    {
        
        public StudioLogs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public StudioLogFile StudioLogFile
        {
            get
            {
                if ((this.mStudioLogFile == null))
                {
                    this.mStudioLogFile = new StudioLogFile(this);
                }
                return this.mStudioLogFile;
            }
        }
        #endregion
        
        #region Fields
        private StudioLogFile mStudioLogFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StudioLogFile : WpfText
    {
        
        public StudioLogFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "   ";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink ItemHyperlink
        {
            get
            {
                if ((this.mItemHyperlink == null))
                {
                    this.mItemHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mItemHyperlink.SearchProperties[WpfHyperlink.PropertyNames.Instance] = "1";
                    this.mItemHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mItemHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerLogs : WpfPane
    {
        
        public ServerLogs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ServerLogFile ServerLogFile
        {
            get
            {
                if ((this.mServerLogFile == null))
                {
                    this.mServerLogFile = new ServerLogFile(this);
                }
                return this.mServerLogFile;
            }
        }
        #endregion
        
        #region Fields
        private ServerLogFile mServerLogFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerLogFile : WpfText
    {
        
        public ServerLogFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "   ";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink ItemHyperlink
        {
            get
            {
                if ((this.mItemHyperlink == null))
                {
                    this.mItemHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mItemHyperlink.SearchProperties[WpfHyperlink.PropertyNames.Instance] = "1";
                    this.mItemHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mItemHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PerfomanceCounterTab : WpfTabPage
    {
        
        public PerfomanceCounterTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "System.Windows.Controls.TabItem Header: Content:";
            this.SearchProperties[WpfTabPage.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public PerfmonViewContent PerfmonViewContent
        {
            get
            {
                if ((this.mPerfmonViewContent == null))
                {
                    this.mPerfmonViewContent = new PerfmonViewContent(this);
                }
                return this.mPerfmonViewContent;
            }
        }
        #endregion
        
        #region Fields
        private PerfmonViewContent mPerfmonViewContent;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PerfmonViewContent : WpfCustom
    {
        
        public PerfmonViewContent(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.PerfCounterView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PerfmonViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResourceTable ResourceTable
        {
            get
            {
                if ((this.mResourceTable == null))
                {
                    this.mResourceTable = new ResourceTable(this);
                }
                return this.mResourceTable;
            }
        }
        
        public ServerTable ServerTable
        {
            get
            {
                if ((this.mServerTable == null))
                {
                    this.mServerTable = new ServerTable(this);
                }
                return this.mServerTable;
            }
        }
        
        public ResetCounter ResetCounter
        {
            get
            {
                if ((this.mResetCounter == null))
                {
                    this.mResetCounter = new ResetCounter(this);
                }
                return this.mResetCounter;
            }
        }
        #endregion
        
        #region Fields
        private ResourceTable mResourceTable;
        
        private ServerTable mServerTable;
        
        private ResetCounter mResetCounter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceTable : WpfTable
    {
        
        public ResourceTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ResourcePermissionsDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row11 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row11(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row11 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row11 : WpfPane
    {
        
        public Row11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "0";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TotalErrors TotalErrors
        {
            get
            {
                if ((this.mTotalErrors == null))
                {
                    this.mTotalErrors = new TotalErrors(this);
                }
                return this.mTotalErrors;
            }
        }
        
        public ResourceCell ResourceCell
        {
            get
            {
                if ((this.mResourceCell == null))
                {
                    this.mResourceCell = new ResourceCell(this);
                }
                return this.mResourceCell;
            }
        }
        
        public RequestPerSecond RequestPerSecond
        {
            get
            {
                if ((this.mRequestPerSecond == null))
                {
                    this.mRequestPerSecond = new RequestPerSecond(this);
                }
                return this.mRequestPerSecond;
            }
        }
        
        public DeleteCell1 DeleteCell
        {
            get
            {
                if ((this.mDeleteCell == null))
                {
                    this.mDeleteCell = new DeleteCell1(this);
                }
                return this.mDeleteCell;
            }
        }
        
        public ConcurrentRequest ConcurrentRequest
        {
            get
            {
                if ((this.mConcurrentRequest == null))
                {
                    this.mConcurrentRequest = new ConcurrentRequest(this);
                }
                return this.mConcurrentRequest;
            }
        }
        
        public AverageExecTime AverageExecTime
        {
            get
            {
                if ((this.mAverageExecTime == null))
                {
                    this.mAverageExecTime = new AverageExecTime(this);
                }
                return this.mAverageExecTime;
            }
        }
        #endregion
        
        #region Fields
        private TotalErrors mTotalErrors;
        
        private ResourceCell mResourceCell;
        
        private RequestPerSecond mRequestPerSecond;
        
        private DeleteCell1 mDeleteCell;
        
        private ConcurrentRequest mConcurrentRequest;
        
        private AverageExecTime mAverageExecTime;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TotalErrors : WpfCell
    {
        
        public TotalErrors(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TotalErrorsCheckbox
        {
            get
            {
                if ((this.mTotalErrorsCheckbox == null))
                {
                    this.mTotalErrorsCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTotalErrorsCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTotalErrorsCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTotalErrorsCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceCell : WpfCell
    {
        
        public ResourceCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText ResourceTextBox
        {
            get
            {
                if ((this.mResourceTextBox == null))
                {
                    this.mResourceTextBox = new WpfText(this);
                    #region Search Criteria
                    this.mResourceTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResourceTextBox;
            }
        }
        
        public WpfButton ResourceButton
        {
            get
            {
                if ((this.mResourceButton == null))
                {
                    this.mResourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mResourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResourceButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mResourceTextBox;
        
        private WpfButton mResourceButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RequestPerSecond : WpfCell
    {
        
        public RequestPerSecond(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox RequestPerSecondCheckbox
        {
            get
            {
                if ((this.mRequestPerSecondCheckbox == null))
                {
                    this.mRequestPerSecondCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRequestPerSecondCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRequestPerSecondCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mRequestPerSecondCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteCell1 : WpfCell
    {
        
        public DeleteCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConcurrentRequest : WpfCell
    {
        
        public ConcurrentRequest(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ConcurrentRequestCheckbox
        {
            get
            {
                if ((this.mConcurrentRequestCheckbox == null))
                {
                    this.mConcurrentRequestCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mConcurrentRequestCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConcurrentRequestCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mConcurrentRequestCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AverageExecTime : WpfCell
    {
        
        public AverageExecTime(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox AverageExecTimeCheckbox
        {
            get
            {
                if ((this.mAverageExecTimeCheckbox == null))
                {
                    this.mAverageExecTimeCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mAverageExecTimeCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAverageExecTimeCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mAverageExecTimeCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerTable : WpfTable
    {
        
        public ServerTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ServerPermissionsDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AverageExecCounter AverageExecCounter
        {
            get
            {
                if ((this.mAverageExecCounter == null))
                {
                    this.mAverageExecCounter = new AverageExecCounter(this);
                }
                return this.mAverageExecCounter;
            }
        }
        
        public ConcurrRequest ConcurrRequest
        {
            get
            {
                if ((this.mConcurrRequest == null))
                {
                    this.mConcurrRequest = new ConcurrRequest(this);
                }
                return this.mConcurrRequest;
            }
        }
        
        public RequestPerSeccond RequestPerSeccond
        {
            get
            {
                if ((this.mRequestPerSeccond == null))
                {
                    this.mRequestPerSeccond = new RequestPerSeccond(this);
                }
                return this.mRequestPerSeccond;
            }
        }
        
        public TotalErrors1 TotalErrors
        {
            get
            {
                if ((this.mTotalErrors == null))
                {
                    this.mTotalErrors = new TotalErrors1(this);
                }
                return this.mTotalErrors;
            }
        }
        
        public WorkflowsNotFound WorkflowsNotFound
        {
            get
            {
                if ((this.mWorkflowsNotFound == null))
                {
                    this.mWorkflowsNotFound = new WorkflowsNotFound(this);
                }
                return this.mWorkflowsNotFound;
            }
        }
        
        public NotAuthorisedErrors NotAuthorisedErrors
        {
            get
            {
                if ((this.mNotAuthorisedErrors == null))
                {
                    this.mNotAuthorisedErrors = new NotAuthorisedErrors(this);
                }
                return this.mNotAuthorisedErrors;
            }
        }
        #endregion
        
        #region Fields
        private AverageExecCounter mAverageExecCounter;
        
        private ConcurrRequest mConcurrRequest;
        
        private RequestPerSeccond mRequestPerSeccond;
        
        private TotalErrors1 mTotalErrors;
        
        private WorkflowsNotFound mWorkflowsNotFound;
        
        private NotAuthorisedErrors mNotAuthorisedErrors;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AverageExecCounter : WpfCell
    {
        
        public AverageExecCounter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox AverageExecCounterCheckBox
        {
            get
            {
                if ((this.mAverageExecCounterCheckBox == null))
                {
                    this.mAverageExecCounterCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mAverageExecCounterCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_New_DeployToPermissionCheckBox_AutoID";
                    this.mAverageExecCounterCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAverageExecCounterCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mAverageExecCounterCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConcurrRequest : WpfCell
    {
        
        public ConcurrRequest(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ConcurrRequestCheckBox
        {
            get
            {
                if ((this.mConcurrRequestCheckBox == null))
                {
                    this.mConcurrRequestCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mConcurrRequestCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConcurrRequestCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mConcurrRequestCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RequestPerSeccond : WpfCell
    {
        
        public RequestPerSeccond(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox RequestPerSeccondCheckBox
        {
            get
            {
                if ((this.mRequestPerSeccondCheckBox == null))
                {
                    this.mRequestPerSeccondCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRequestPerSeccondCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRequestPerSeccondCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mRequestPerSeccondCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TotalErrors1 : WpfCell
    {
        
        public TotalErrors1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TotalErrorsCheckBox
        {
            get
            {
                if ((this.mTotalErrorsCheckBox == null))
                {
                    this.mTotalErrorsCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTotalErrorsCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTotalErrorsCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTotalErrorsCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowsNotFound : WpfCell
    {
        
        public WorkflowsNotFound(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox WorkflowsNotFoundCheckBox
        {
            get
            {
                if ((this.mWorkflowsNotFoundCheckBox == null))
                {
                    this.mWorkflowsNotFoundCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mWorkflowsNotFoundCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWorkflowsNotFoundCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mWorkflowsNotFoundCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NotAuthorisedErrors : WpfCell
    {
        
        public NotAuthorisedErrors(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox NotAuthorisedErrorsCheckBox
        {
            get
            {
                if ((this.mNotAuthorisedErrorsCheckBox == null))
                {
                    this.mNotAuthorisedErrorsCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mNotAuthorisedErrorsCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNotAuthorisedErrorsCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mNotAuthorisedErrorsCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResetCounter : WpfText
    {
        
        public ResetCounter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "   ";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink ItemHyperlink
        {
            get
            {
                if ((this.mItemHyperlink == null))
                {
                    this.mItemHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mItemHyperlink.SearchProperties[WpfHyperlink.PropertyNames.Instance] = "1";
                    this.mItemHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mItemHyperlink;
        #endregion
    }
}
