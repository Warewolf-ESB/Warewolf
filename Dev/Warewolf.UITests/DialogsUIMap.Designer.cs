// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Warewolf.UITests.DialogsUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class DialogsUIMap
    {
        
        #region Properties
        public MessageBoxWindow MessageBoxWindow
        {
            get
            {
                if ((this.mMessageBoxWindow == null))
                {
                    this.mMessageBoxWindow = new MessageBoxWindow();
                }
                return this.mMessageBoxWindow;
            }
        }
        
        public SaveDialogWindow SaveDialogWindow
        {
            get
            {
                if ((this.mSaveDialogWindow == null))
                {
                    this.mSaveDialogWindow = new SaveDialogWindow();
                }
                return this.mSaveDialogWindow;
            }
        }
        
        public SplashPageWindow SplashPageWindow
        {
            get
            {
                if ((this.mSplashPageWindow == null))
                {
                    this.mSplashPageWindow = new SplashPageWindow();
                }
                return this.mSplashPageWindow;
            }
        }
        
        public DecisionOrSwitchDialog DecisionOrSwitchDialog
        {
            get
            {
                if ((this.mDecisionOrSwitchDialog == null))
                {
                    this.mDecisionOrSwitchDialog = new DecisionOrSwitchDialog();
                }
                return this.mDecisionOrSwitchDialog;
            }
        }
        
        public SelectWindowsGroupDialog SelectWindowsGroupDialog
        {
            get
            {
                if ((this.mSelectWindowsGroupDialog == null))
                {
                    this.mSelectWindowsGroupDialog = new SelectWindowsGroupDialog();
                }
                return this.mSelectWindowsGroupDialog;
            }
        }
        
        public ServicePickerDialog ServicePickerDialog
        {
            get
            {
                if ((this.mServicePickerDialog == null))
                {
                    this.mServicePickerDialog = new ServicePickerDialog();
                }
                return this.mServicePickerDialog;
            }
        }
        
        public StartNodePopupWindow StartNodePopupWindow
        {
            get
            {
                if ((this.mStartNodePopupWindow == null))
                {
                    this.mStartNodePopupWindow = new StartNodePopupWindow();
                }
                return this.mStartNodePopupWindow;
            }
        }
        
        public ErrorWindow ErrorWindow
        {
            get
            {
                if ((this.mErrorWindow == null))
                {
                    this.mErrorWindow = new ErrorWindow();
                }
                return this.mErrorWindow;
            }
        }
        
        public CriticalErrorWindow CriticalErrorWindow
        {
            get
            {
                if ((this.mCriticalErrorWindow == null))
                {
                    this.mCriticalErrorWindow = new CriticalErrorWindow();
                }
                return this.mCriticalErrorWindow;
            }
        }
        
        public WebBrowserErrorWindow WebBrowserErrorWindow
        {
            get
            {
                if ((this.mWebBrowserErrorWindow == null))
                {
                    this.mWebBrowserErrorWindow = new WebBrowserErrorWindow();
                }
                return this.mWebBrowserErrorWindow;
            }
        }
        
        public ChooseDLLWindow ChooseDLLWindow
        {
            get
            {
                if ((this.mChooseDLLWindow == null))
                {
                    this.mChooseDLLWindow = new ChooseDLLWindow();
                }
                return this.mChooseDLLWindow;
            }
        }
        
        public SelectFilesWindow SelectFilesWindow
        {
            get
            {
                if ((this.mSelectFilesWindow == null))
                {
                    this.mSelectFilesWindow = new SelectFilesWindow();
                }
                return this.mSelectFilesWindow;
            }
        }
        #endregion
        
        #region Fields
        private MessageBoxWindow mMessageBoxWindow;
        
        private SaveDialogWindow mSaveDialogWindow;
        
        private SplashPageWindow mSplashPageWindow;
        
        private DecisionOrSwitchDialog mDecisionOrSwitchDialog;
        
        private SelectWindowsGroupDialog mSelectWindowsGroupDialog;
        
        private ServicePickerDialog mServicePickerDialog;
        
        private StartNodePopupWindow mStartNodePopupWindow;
        
        private ErrorWindow mErrorWindow;
        
        private CriticalErrorWindow mCriticalErrorWindow;
        
        private WebBrowserErrorWindow mWebBrowserErrorWindow;
        
        private ChooseDLLWindow mChooseDLLWindow;
        
        private SelectFilesWindow mSelectFilesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MessageBoxWindow : WpfWindow
    {
        
        public MessageBoxWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "WarewolfMessageBox";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public YesButton YesButton
        {
            get
            {
                if ((this.mYesButton == null))
                {
                    this.mYesButton = new YesButton(this);
                }
                return this.mYesButton;
            }
        }
        
        public NoButton NoButton
        {
            get
            {
                if ((this.mNoButton == null))
                {
                    this.mNoButton = new NoButton(this);
                }
                return this.mNoButton;
            }
        }
        
        public CancelButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new CancelButton(this);
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton OKButton
        {
            get
            {
                if ((this.mOKButton == null))
                {
                    this.mOKButton = new WpfButton(this);
                    #region Search Criteria
                    this.mOKButton.SearchProperties[WpfButton.PropertyNames.Name] = "OK";
                    this.mOKButton.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mOKButton;
            }
        }
        
        public WpfText UIPleasesavecurrentlyeText
        {
            get
            {
                if ((this.mUIPleasesavecurrentlyeText == null))
                {
                    this.mUIPleasesavecurrentlyeText = new WpfText(this);
                    #region Search Criteria
                    this.mUIPleasesavecurrentlyeText.SearchProperties[WpfText.PropertyNames.Name] = "Please save currently edited Test(s) before running the tests.";
                    this.mUIPleasesavecurrentlyeText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mUIPleasesavecurrentlyeText;
            }
        }
        
        public WpfText UIThefollowingerroroccText
        {
            get
            {
                if ((this.mUIThefollowingerroroccText == null))
                {
                    this.mUIThefollowingerroroccText = new WpfText(this);
                    #region Search Criteria
                    this.mUIThefollowingerroroccText.SearchProperties[WpfText.PropertyNames.Name] = "\r\n                  The following error occurred on save:\r\n                  Erro" +
                        "r while saving: This task requires that the user account specified has \'Log On A" +
                        "s Batch\' job rights\r\n                ";
                    this.mUIThefollowingerroroccText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mUIThefollowingerroroccText;
            }
        }
        
        public WpfText DropnotallowedText
        {
            get
            {
                if ((this.mDropnotallowedText == null))
                {
                    this.mDropnotallowedText = new WpfText(this);
                    #region Search Criteria
                    this.mDropnotallowedText.SearchProperties[WpfText.PropertyNames.Name] = "Drop not allowed";
                    this.mDropnotallowedText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mDropnotallowedText;
            }
        }
        
        public WpfText ResourcesDeployedSucText
        {
            get
            {
                if ((this.mResourcesDeployedSucText == null))
                {
                    this.mResourcesDeployedSucText = new WpfText(this);
                    #region Search Criteria
                    this.mResourcesDeployedSucText.SearchProperties[WpfText.PropertyNames.Name] = "Resource(s) Deployed Successfully";
                    this.mResourcesDeployedSucText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mResourcesDeployedSucText;
            }
        }
        
        public WpfText SaveBeforeAddingTest
        {
            get
            {
                if ((this.mSaveBeforeAddingTest == null))
                {
                    this.mSaveBeforeAddingTest = new WpfText(this);
                    #region Search Criteria
                    this.mSaveBeforeAddingTest.SearchProperties[WpfText.PropertyNames.Name] = "Please save currently edited Test(s) before creating a new one.";
                    this.mSaveBeforeAddingTest.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mSaveBeforeAddingTest;
            }
        }
        
        public WpfText DeployVersionConflicText
        {
            get
            {
                if ((this.mDeployVersionConflicText == null))
                {
                    this.mDeployVersionConflicText = new WpfText(this);
                    #region Search Criteria
                    this.mDeployVersionConflicText.SearchProperties[WpfText.PropertyNames.Name] = "Deploy Version Conflicts";
                    this.mDeployVersionConflicText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mDeployVersionConflicText;
            }
        }
        
        public WpfText DeployConflictsText
        {
            get
            {
                if ((this.mDeployConflictsText == null))
                {
                    this.mDeployConflictsText = new WpfText(this);
                    #region Search Criteria
                    this.mDeployConflictsText.SearchProperties[WpfText.PropertyNames.Name] = "Deploy Conflicts";
                    this.mDeployConflictsText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mDeployConflictsText;
            }
        }
        
        public WpfText DeleteConfirmation
        {
            get
            {
                if ((this.mDeleteConfirmation == null))
                {
                    this.mDeleteConfirmation = new WpfText(this);
                    #region Search Criteria
                    this.mDeleteConfirmation.SearchProperties[WpfText.PropertyNames.Name] = "Are you sure?";
                    this.mDeleteConfirmation.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mDeleteConfirmation;
            }
        }
        
        public WpfCheckBox Applytoall
        {
            get
            {
                if ((this.mApplytoall == null))
                {
                    this.mApplytoall = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mApplytoall.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "ChkBoxApplyToAll";
                    this.mApplytoall.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mApplytoall;
            }
        }
        
        public WpfButton ShowDependencies
        {
            get
            {
                if ((this.mShowDependencies == null))
                {
                    this.mShowDependencies = new WpfButton(this);
                    #region Search Criteria
                    this.mShowDependencies.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BtnDependencies";
                    this.mShowDependencies.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mShowDependencies;
            }
        }
        
        public WpfButton DeleteAnyway
        {
            get
            {
                if ((this.mDeleteAnyway == null))
                {
                    this.mDeleteAnyway = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteAnyway.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BtnDeleteAll";
                    this.mDeleteAnyway.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mDeleteAnyway;
            }
        }
        
        public WpfText UIResourcesDeployedSucText
        {
            get
            {
                if ((this.mUIResourcesDeployedSucText == null))
                {
                    this.mUIResourcesDeployedSucText = new WpfText(this);
                    #region Search Criteria
                    this.mUIResourcesDeployedSucText.SearchProperties[WpfText.PropertyNames.Name] = "Resource(s) Deployed Successfully";
                    this.mUIResourcesDeployedSucText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mUIResourcesDeployedSucText;
            }
        }
        
        public WpfText DeleteAnywayText
        {
            get
            {
                if ((this.mDeleteAnywayText == null))
                {
                    this.mDeleteAnywayText = new WpfText(this);
                    #region Search Criteria
                    this.mDeleteAnywayText.SearchProperties[WpfText.PropertyNames.Name] = "Error Deleting - UITestDependencyOne";
                    this.mDeleteAnywayText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mDeleteAnywayText;
            }
        }
        
        public WpfText SaveBeforeAddingNewTestText
        {
            get
            {
                if ((this.mSaveBeforeAddingNewTestText == null))
                {
                    this.mSaveBeforeAddingNewTestText = new WpfText(this);
                    #region Search Criteria
                    this.mSaveBeforeAddingNewTestText.SearchProperties[WpfText.PropertyNames.Name] = "Save before continuing";
                    this.mSaveBeforeAddingNewTestText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mSaveBeforeAddingNewTestText;
            }
        }
        
        public WpfText DuplicateTestNameText
        {
            get
            {
                if ((this.mDuplicateTestNameText == null))
                {
                    this.mDuplicateTestNameText = new WpfText(this);
                    #region Search Criteria
                    this.mDuplicateTestNameText.SearchProperties[WpfText.PropertyNames.Name] = "Duplicate Test Name";
                    this.mDuplicateTestNameText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mDuplicateTestNameText;
            }
        }
        
        public WpfButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BtnYesCommand";
                    this.mUIYesButton.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private YesButton mYesButton;
        
        private NoButton mNoButton;
        
        private CancelButton mCancelButton;
        
        private WpfButton mOKButton;
        
        private WpfText mUIPleasesavecurrentlyeText;
        
        private WpfText mUIThefollowingerroroccText;
        
        private WpfText mDropnotallowedText;
        
        private WpfText mResourcesDeployedSucText;
        
        private WpfText mSaveBeforeAddingTest;
        
        private WpfText mDeployVersionConflicText;
        
        private WpfText mDeployConflictsText;
        
        private WpfText mDeleteConfirmation;
        
        private WpfCheckBox mApplytoall;
        
        private WpfButton mShowDependencies;
        
        private WpfButton mDeleteAnyway;
        
        private WpfText mUIResourcesDeployedSucText;
        
        private WpfText mDeleteAnywayText;
        
        private WpfText mSaveBeforeAddingNewTestText;
        
        private WpfText mDuplicateTestNameText;
        
        private WpfButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class YesButton : WpfButton
    {
        
        public YesButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Yes";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText YesButtonText
        {
            get
            {
                if ((this.mYesButtonText == null))
                {
                    this.mYesButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mYesButtonText.SearchProperties[WpfText.PropertyNames.Name] = "Yes";
                    this.mYesButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mYesButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mYesButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NoButton : WpfButton
    {
        
        public NoButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "No";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText NOButtonText
        {
            get
            {
                if ((this.mNOButtonText == null))
                {
                    this.mNOButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mNOButtonText.SearchProperties[WpfText.PropertyNames.Name] = "No";
                    this.mNOButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mNOButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mNOButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CancelButton : WpfButton
    {
        
        public CancelButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Cancel";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText CancelButtonText
        {
            get
            {
                if ((this.mCancelButtonText == null))
                {
                    this.mCancelButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mCancelButtonText.SearchProperties[WpfText.PropertyNames.Name] = "Cancel";
                    this.mCancelButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mCancelButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mCancelButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SaveDialogWindow : WpfWindow
    {
        
        public SaveDialogWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "SaveDialogView";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public ExplorerView ExplorerView
        {
            get
            {
                if ((this.mExplorerView == null))
                {
                    this.mExplorerView = new ExplorerView(this);
                }
                return this.mExplorerView;
            }
        }
        
        public WpfText NameLabel
        {
            get
            {
                if ((this.mNameLabel == null))
                {
                    this.mNameLabel = new WpfText(this);
                    #region Search Criteria
                    this.mNameLabel.SearchProperties[WpfText.PropertyNames.Name] = "Name:";
                    this.mNameLabel.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mNameLabel;
            }
        }
        
        public WpfEdit ServiceNameTextBox
        {
            get
            {
                if ((this.mServiceNameTextBox == null))
                {
                    this.mServiceNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mServiceNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ServiceNameTextBox";
                    this.mServiceNameTextBox.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mServiceNameTextBox;
            }
        }
        
        public WpfText ErrorLabel
        {
            get
            {
                if ((this.mErrorLabel == null))
                {
                    this.mErrorLabel = new WpfText(this);
                    #region Search Criteria
                    this.mErrorLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorMessageTextBlock";
                    this.mErrorLabel.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mErrorLabel;
            }
        }
        
        public WpfButton SaveButton
        {
            get
            {
                if ((this.mSaveButton == null))
                {
                    this.mSaveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSaveButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "OkButton";
                    this.mSaveButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mSaveButton;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelButton";
                    this.mCancelButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton DuplicateButton
        {
            get
            {
                if ((this.mDuplicateButton == null))
                {
                    this.mDuplicateButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDuplicateButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DuplicateButton";
                    this.mDuplicateButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mDuplicateButton;
            }
        }
        
        public WpfCheckBox UpdateDuplicatedRelat
        {
            get
            {
                if ((this.mUpdateDuplicatedRelat == null))
                {
                    this.mUpdateDuplicatedRelat = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUpdateDuplicatedRelat.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Update duplicated relationships?";
                    this.mUpdateDuplicatedRelat.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mUpdateDuplicatedRelat;
            }
        }
        
        public SaveDialogContextMenu SaveDialogContextMenu
        {
            get
            {
                if ((this.mSaveDialogContextMenu == null))
                {
                    this.mSaveDialogContextMenu = new SaveDialogContextMenu(this);
                }
                return this.mSaveDialogContextMenu;
            }
        }
        #endregion
        
        #region Fields
        private ExplorerView mExplorerView;
        
        private WpfText mNameLabel;
        
        private WpfEdit mServiceNameTextBox;
        
        private WpfText mErrorLabel;
        
        private WpfButton mSaveButton;
        
        private WpfButton mCancelButton;
        
        private WpfButton mDuplicateButton;
        
        private WpfCheckBox mUpdateDuplicatedRelat;
        
        private SaveDialogContextMenu mSaveDialogContextMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerView : WpfCustom
    {
        
        public ExplorerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ExplorerView";
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public WpfEdit SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSearchTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mSearchTextBox.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mSearchTextBox;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public ExplorerTree ExplorerTree
        {
            get
            {
                if ((this.mExplorerTree == null))
                {
                    this.mExplorerTree = new ExplorerTree(this);
                }
                return this.mExplorerTree;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mSearchTextBox;
        
        private WpfButton mRefreshButton;
        
        private ExplorerTree mExplorerTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerTree : WpfTree
    {
        
        public ExplorerTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public localhost localhost
        {
            get
            {
                if ((this.mlocalhost == null))
                {
                    this.mlocalhost = new localhost(this);
                }
                return this.mlocalhost;
            }
        }
        
        public WpfTreeItem UIWarewolfStudioViewMoTreeItem
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoTreeItem == null))
                {
                    this.mUIWarewolfStudioViewMoTreeItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoTreeItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.EnvironmentViewModel";
                    this.mUIWarewolfStudioViewMoTreeItem.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private localhost mlocalhost;
        
        private WpfTreeItem mUIWarewolfStudioViewMoTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class localhost : WpfTreeItem
    {
        
        public localhost(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.EnvironmentViewModel";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Checkbox Checkbox
        {
            get
            {
                if ((this.mCheckbox == null))
                {
                    this.mCheckbox = new Checkbox(this);
                }
                return this.mCheckbox;
            }
        }
        
        public FirstItem FirstItem
        {
            get
            {
                if ((this.mFirstItem == null))
                {
                    this.mFirstItem = new FirstItem(this);
                }
                return this.mFirstItem;
            }
        }
        
        public WpfTreeItem SecondItem
        {
            get
            {
                if ((this.mSecondItem == null))
                {
                    this.mSecondItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mSecondItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ExplorerItemViewModel";
                    this.mSecondItem.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
                    this.mSecondItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSecondItem.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mSecondItem.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mSecondItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSecondItem;
            }
        }
        
        public NinethItem NinethItem
        {
            get
            {
                if ((this.mNinethItem == null))
                {
                    this.mNinethItem = new NinethItem(this);
                }
                return this.mNinethItem;
            }
        }
        
        public WpfTreeItem ThirdItem
        {
            get
            {
                if ((this.mThirdItem == null))
                {
                    this.mThirdItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mThirdItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ExplorerItemViewModel";
                    this.mThirdItem.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "3";
                    this.mThirdItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdItem.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mThirdItem;
            }
        }
        #endregion
        
        #region Fields
        private Checkbox mCheckbox;
        
        private FirstItem mFirstItem;
        
        private WpfTreeItem mSecondItem;
        
        private NinethItem mNinethItem;
        
        private WpfTreeItem mThirdItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Checkbox : WpfCheckBox
    {
        
        public Checkbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "Checkbox";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton IconButton
        {
            get
            {
                if ((this.mIconButton == null))
                {
                    this.mIconButton = new WpfButton(this);
                    #region Search Criteria
                    this.mIconButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mIconButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mIconButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIconButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mIconButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FirstItem : WpfTreeItem
    {
        
        public FirstItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ExplorerItemViewModel";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResourceImageImage ResourceImageImage
        {
            get
            {
                if ((this.mResourceImageImage == null))
                {
                    this.mResourceImageImage = new ResourceImageImage(this);
                }
                return this.mResourceImageImage;
            }
        }
        
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIItemEdit.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        
        public FirstSubItem FirstSubItem
        {
            get
            {
                if ((this.mFirstSubItem == null))
                {
                    this.mFirstSubItem = new FirstSubItem(this);
                }
                return this.mFirstSubItem;
            }
        }
        #endregion
        
        #region Fields
        private ResourceImageImage mResourceImageImage;
        
        private WpfEdit mUIItemEdit;
        
        private FirstSubItem mFirstSubItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceImageImage : WpfImage
    {
        
        public ResourceImageImage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfImage.PropertyNames.AutomationId] = "ResourceImage";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FirstSubItem : WpfTreeItem
    {
        
        public FirstSubItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ExplorerItemViewModel";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIItemEdit.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NinethItem : WpfTreeItem
    {
        
        public NinethItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ExplorerItemViewModel";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "9";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIItemEdit.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SaveDialogContextMenu : WpfMenu
    {
        
        public SaveDialogContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem NewFolderMenuItem
        {
            get
            {
                if ((this.mNewFolderMenuItem == null))
                {
                    this.mNewFolderMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewFolderMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewFolder";
                    this.mNewFolderMenuItem.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mNewFolderMenuItem;
            }
        }
        
        public WpfMenuItem RenameMenuItem
        {
            get
            {
                if ((this.mRenameMenuItem == null))
                {
                    this.mRenameMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mRenameMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Rename";
                    this.mRenameMenuItem.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mRenameMenuItem;
            }
        }
        
        public WpfMenuItem DeleteMenuItem
        {
            get
            {
                if ((this.mDeleteMenuItem == null))
                {
                    this.mDeleteMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeleteMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Delete";
                    this.mDeleteMenuItem.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mDeleteMenuItem;
            }
        }
        
        public WpfMenuItem UINewFolderMenuItem
        {
            get
            {
                if ((this.mUINewFolderMenuItem == null))
                {
                    this.mUINewFolderMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUINewFolderMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewFolderFromItem";
                    this.mUINewFolderMenuItem.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mUINewFolderMenuItem;
            }
        }
        
        public WpfMenuItem SourcesMenuItem
        {
            get
            {
                if ((this.mSourcesMenuItem == null))
                {
                    this.mSourcesMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mSourcesMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Sources";
                    this.mSourcesMenuItem.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mSourcesMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mNewFolderMenuItem;
        
        private WpfMenuItem mRenameMenuItem;
        
        private WpfMenuItem mDeleteMenuItem;
        
        private WpfMenuItem mUINewFolderMenuItem;
        
        private WpfMenuItem mSourcesMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplashPageWindow : WpfWindow
    {
        
        public SplashPageWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "SplashPage";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SplashPage");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DecisionOrSwitchDialog : WpfWindow
    {
        
        public DecisionOrSwitchDialog()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "ActivityDefaultWindow";
            #endregion
        }
        
        #region Properties
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelButton";
                    this.mCancelButton.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public OnErrorGroup OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup(this);
                }
                return this.mOnErrorGroup;
            }
        }
        
        public LargeView LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfListItem ComboboxListItemAsStartsWith
        {
            get
            {
                if ((this.mComboboxListItemAsStartsWith == null))
                {
                    this.mComboboxListItemAsStartsWith = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsStartsWith.SearchProperties[WpfListItem.PropertyNames.Name] = "Starts With";
                    this.mComboboxListItemAsStartsWith.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsStartsWith;
            }
        }
        
        public WpfListItem ComboboxListItemAsNotEqual
        {
            get
            {
                if ((this.mComboboxListItemAsNotEqual == null))
                {
                    this.mComboboxListItemAsNotEqual = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsNotEqual.SearchProperties[WpfListItem.PropertyNames.Name] = "<> (Not Equal)";
                    this.mComboboxListItemAsNotEqual.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsNotEqual;
            }
        }
        
        public WpfListItem ComboboxListItemAsLessThanOrEqualTo
        {
            get
            {
                if ((this.mComboboxListItemAsLessThanOrEqualTo == null))
                {
                    this.mComboboxListItemAsLessThanOrEqualTo = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsLessThanOrEqualTo.SearchProperties[WpfListItem.PropertyNames.Name] = "<=";
                    this.mComboboxListItemAsLessThanOrEqualTo.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsLessThanOrEqualTo;
            }
        }
        
        public WpfListItem ComboboxListItemAsLessThan
        {
            get
            {
                if ((this.mComboboxListItemAsLessThan == null))
                {
                    this.mComboboxListItemAsLessThan = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsLessThan.SearchProperties[WpfListItem.PropertyNames.Name] = "<";
                    this.mComboboxListItemAsLessThan.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsLessThan;
            }
        }
        
        public WpfListItem ComboboxListItemAsGreaterThanOrEqualTo
        {
            get
            {
                if ((this.mComboboxListItemAsGreaterThanOrEqualTo == null))
                {
                    this.mComboboxListItemAsGreaterThanOrEqualTo = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsGreaterThanOrEqualTo.SearchProperties[WpfListItem.PropertyNames.Name] = ">=";
                    this.mComboboxListItemAsGreaterThanOrEqualTo.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsGreaterThanOrEqualTo;
            }
        }
        
        public WpfListItem ComboboxListItemAsGreaterThan
        {
            get
            {
                if ((this.mComboboxListItemAsGreaterThan == null))
                {
                    this.mComboboxListItemAsGreaterThan = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsGreaterThan.SearchProperties[WpfListItem.PropertyNames.Name] = ">";
                    this.mComboboxListItemAsGreaterThan.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsGreaterThan;
            }
        }
        
        public WpfListItem ComboboxListItemAsEndsWith
        {
            get
            {
                if ((this.mComboboxListItemAsEndsWith == null))
                {
                    this.mComboboxListItemAsEndsWith = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsEndsWith.SearchProperties[WpfListItem.PropertyNames.Name] = "Ends With";
                    this.mComboboxListItemAsEndsWith.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsEndsWith;
            }
        }
        
        public WpfListItem ComboboxListItemAsContains
        {
            get
            {
                if ((this.mComboboxListItemAsContains == null))
                {
                    this.mComboboxListItemAsContains = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsContains.SearchProperties[WpfListItem.PropertyNames.Name] = "Contains";
                    this.mComboboxListItemAsContains.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsContains;
            }
        }
        
        public WpfListItem ComboboxListItemAsDoesntContain
        {
            get
            {
                if ((this.mComboboxListItemAsDoesntContain == null))
                {
                    this.mComboboxListItemAsDoesntContain = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsDoesntContain.SearchProperties[WpfListItem.PropertyNames.Name] = "Doesn\'t Contain";
                    this.mComboboxListItemAsDoesntContain.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsDoesntContain;
            }
        }
        
        public WpfListItem ComboboxListItemAsDoesntEndWith
        {
            get
            {
                if ((this.mComboboxListItemAsDoesntEndWith == null))
                {
                    this.mComboboxListItemAsDoesntEndWith = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsDoesntEndWith.SearchProperties[WpfListItem.PropertyNames.Name] = "Doesn\'t End With";
                    this.mComboboxListItemAsDoesntEndWith.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsDoesntEndWith;
            }
        }
        
        public WpfListItem ComboboxListItemAsDoesntStartWith
        {
            get
            {
                if ((this.mComboboxListItemAsDoesntStartWith == null))
                {
                    this.mComboboxListItemAsDoesntStartWith = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsDoesntStartWith.SearchProperties[WpfListItem.PropertyNames.Name] = "Doesn\'t Start With";
                    this.mComboboxListItemAsDoesntStartWith.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsDoesntStartWith;
            }
        }
        
        public WpfListItem ComboboxListItemAsEquals
        {
            get
            {
                if ((this.mComboboxListItemAsEquals == null))
                {
                    this.mComboboxListItemAsEquals = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsEquals.SearchProperties[WpfListItem.PropertyNames.Name] = "=";
                    this.mComboboxListItemAsEquals.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsEquals;
            }
        }
        
        public WpfListItem ComboboxListItemAsIsAlphanumeric
        {
            get
            {
                if ((this.mComboboxListItemAsIsAlphanumeric == null))
                {
                    this.mComboboxListItemAsIsAlphanumeric = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsIsAlphanumeric.SearchProperties[WpfListItem.PropertyNames.Name] = "Is Alphanumeric";
                    this.mComboboxListItemAsIsAlphanumeric.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsIsAlphanumeric;
            }
        }
        
        public WpfListItem ComboboxListItemAsIsBase64
        {
            get
            {
                if ((this.mComboboxListItemAsIsBase64 == null))
                {
                    this.mComboboxListItemAsIsBase64 = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsIsBase64.SearchProperties[WpfListItem.PropertyNames.Name] = "Is Base64";
                    this.mComboboxListItemAsIsBase64.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsIsBase64;
            }
        }
        
        public WpfListItem ComboboxListItemAsIsBetween
        {
            get
            {
                if ((this.mComboboxListItemAsIsBetween == null))
                {
                    this.mComboboxListItemAsIsBetween = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsIsBetween.SearchProperties[WpfListItem.PropertyNames.Name] = "Is Between";
                    this.mComboboxListItemAsIsBetween.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsIsBetween;
            }
        }
        
        public WpfListItem ComboboxListItemAsIsBinary
        {
            get
            {
                if ((this.mComboboxListItemAsIsBinary == null))
                {
                    this.mComboboxListItemAsIsBinary = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsIsBinary.SearchProperties[WpfListItem.PropertyNames.Name] = "Is Binary";
                    this.mComboboxListItemAsIsBinary.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsIsBinary;
            }
        }
        
        public WpfListItem ComboboxListItemAsIsDate
        {
            get
            {
                if ((this.mComboboxListItemAsIsDate == null))
                {
                    this.mComboboxListItemAsIsDate = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsIsDate.SearchProperties[WpfListItem.PropertyNames.Name] = "Is Date";
                    this.mComboboxListItemAsIsDate.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsIsDate;
            }
        }
        
        public WpfListItem ComboboxListItemAsIsEmail
        {
            get
            {
                if ((this.mComboboxListItemAsIsEmail == null))
                {
                    this.mComboboxListItemAsIsEmail = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsIsEmail.SearchProperties[WpfListItem.PropertyNames.Name] = "Is Email";
                    this.mComboboxListItemAsIsEmail.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsIsEmail;
            }
        }
        
        public WpfListItem ComboboxListItemAsIsHex
        {
            get
            {
                if ((this.mComboboxListItemAsIsHex == null))
                {
                    this.mComboboxListItemAsIsHex = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsIsHex.SearchProperties[WpfListItem.PropertyNames.Name] = "Is Hex";
                    this.mComboboxListItemAsIsHex.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsIsHex;
            }
        }
        
        public WpfListItem ComboboxListItemAsIsNotNULL
        {
            get
            {
                if ((this.mComboboxListItemAsIsNotNULL == null))
                {
                    this.mComboboxListItemAsIsNotNULL = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsIsNotNULL.SearchProperties[WpfListItem.PropertyNames.Name] = "Is Not NULL";
                    this.mComboboxListItemAsIsNotNULL.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsIsNotNULL;
            }
        }
        
        public WpfListItem ComboboxListItemAsIsNULL
        {
            get
            {
                if ((this.mComboboxListItemAsIsNULL == null))
                {
                    this.mComboboxListItemAsIsNULL = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsIsNULL.SearchProperties[WpfListItem.PropertyNames.Name] = "Is NULL";
                    this.mComboboxListItemAsIsNULL.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsIsNULL;
            }
        }
        
        public WpfListItem ComboboxListItemAsIsNumeric
        {
            get
            {
                if ((this.mComboboxListItemAsIsNumeric == null))
                {
                    this.mComboboxListItemAsIsNumeric = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsIsNumeric.SearchProperties[WpfListItem.PropertyNames.Name] = "Is Numeric";
                    this.mComboboxListItemAsIsNumeric.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsIsNumeric;
            }
        }
        
        public WpfListItem ComboboxListItemAsIsRegex
        {
            get
            {
                if ((this.mComboboxListItemAsIsRegex == null))
                {
                    this.mComboboxListItemAsIsRegex = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsIsRegex.SearchProperties[WpfListItem.PropertyNames.Name] = "Is Regex";
                    this.mComboboxListItemAsIsRegex.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsIsRegex;
            }
        }
        
        public WpfListItem ComboboxListItemAsIsText
        {
            get
            {
                if ((this.mComboboxListItemAsIsText == null))
                {
                    this.mComboboxListItemAsIsText = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsIsText.SearchProperties[WpfListItem.PropertyNames.Name] = "Is Text";
                    this.mComboboxListItemAsIsText.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsIsText;
            }
        }
        
        public WpfListItem ComboboxListItemAsIsXML
        {
            get
            {
                if ((this.mComboboxListItemAsIsXML == null))
                {
                    this.mComboboxListItemAsIsXML = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsIsXML.SearchProperties[WpfListItem.PropertyNames.Name] = "Is XML";
                    this.mComboboxListItemAsIsXML.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsIsXML;
            }
        }
        
        public WpfListItem ComboboxListItemAsNotAlphanumeric
        {
            get
            {
                if ((this.mComboboxListItemAsNotAlphanumeric == null))
                {
                    this.mComboboxListItemAsNotAlphanumeric = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsNotAlphanumeric.SearchProperties[WpfListItem.PropertyNames.Name] = "Not Alphanumeric";
                    this.mComboboxListItemAsNotAlphanumeric.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsNotAlphanumeric;
            }
        }
        
        public WpfListItem ComboboxListItemAsNotBase64
        {
            get
            {
                if ((this.mComboboxListItemAsNotBase64 == null))
                {
                    this.mComboboxListItemAsNotBase64 = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsNotBase64.SearchProperties[WpfListItem.PropertyNames.Name] = "Not Base64";
                    this.mComboboxListItemAsNotBase64.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsNotBase64;
            }
        }
        
        public WpfListItem ComboboxListItemAsNotBetween
        {
            get
            {
                if ((this.mComboboxListItemAsNotBetween == null))
                {
                    this.mComboboxListItemAsNotBetween = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsNotBetween.SearchProperties[WpfListItem.PropertyNames.Name] = "Not Between";
                    this.mComboboxListItemAsNotBetween.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsNotBetween;
            }
        }
        
        public WpfListItem ComboboxListItemAsNotBinary
        {
            get
            {
                if ((this.mComboboxListItemAsNotBinary == null))
                {
                    this.mComboboxListItemAsNotBinary = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsNotBinary.SearchProperties[WpfListItem.PropertyNames.Name] = "Not Binary";
                    this.mComboboxListItemAsNotBinary.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsNotBinary;
            }
        }
        
        public WpfListItem ComboboxListItemAsNotDate
        {
            get
            {
                if ((this.mComboboxListItemAsNotDate == null))
                {
                    this.mComboboxListItemAsNotDate = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsNotDate.SearchProperties[WpfListItem.PropertyNames.Name] = "Not Date";
                    this.mComboboxListItemAsNotDate.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsNotDate;
            }
        }
        
        public WpfListItem ComboboxListItemAsNotEmail
        {
            get
            {
                if ((this.mComboboxListItemAsNotEmail == null))
                {
                    this.mComboboxListItemAsNotEmail = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsNotEmail.SearchProperties[WpfListItem.PropertyNames.Name] = "Not Email";
                    this.mComboboxListItemAsNotEmail.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsNotEmail;
            }
        }
        
        public WpfListItem ComboboxListItemAsNotHex
        {
            get
            {
                if ((this.mComboboxListItemAsNotHex == null))
                {
                    this.mComboboxListItemAsNotHex = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsNotHex.SearchProperties[WpfListItem.PropertyNames.Name] = "Not Hex";
                    this.mComboboxListItemAsNotHex.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsNotHex;
            }
        }
        
        public WpfListItem ComboboxListItemAsNotNumeric
        {
            get
            {
                if ((this.mComboboxListItemAsNotNumeric == null))
                {
                    this.mComboboxListItemAsNotNumeric = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsNotNumeric.SearchProperties[WpfListItem.PropertyNames.Name] = "Not Numeric";
                    this.mComboboxListItemAsNotNumeric.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsNotNumeric;
            }
        }
        
        public WpfListItem ComboboxListItemAsNotRegex
        {
            get
            {
                if ((this.mComboboxListItemAsNotRegex == null))
                {
                    this.mComboboxListItemAsNotRegex = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsNotRegex.SearchProperties[WpfListItem.PropertyNames.Name] = "Not Regex";
                    this.mComboboxListItemAsNotRegex.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsNotRegex;
            }
        }
        
        public WpfListItem ComboboxListItemAsNotText
        {
            get
            {
                if ((this.mComboboxListItemAsNotText == null))
                {
                    this.mComboboxListItemAsNotText = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsNotText.SearchProperties[WpfListItem.PropertyNames.Name] = "Not Text";
                    this.mComboboxListItemAsNotText.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsNotText;
            }
        }
        
        public WpfListItem ComboboxListItemAsNotXML
        {
            get
            {
                if ((this.mComboboxListItemAsNotXML == null))
                {
                    this.mComboboxListItemAsNotXML = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsNotXML.SearchProperties[WpfListItem.PropertyNames.Name] = "Not XML";
                    this.mComboboxListItemAsNotXML.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsNotXML;
            }
        }
        
        public WpfListItem ComboboxListItemAsThereisAnError
        {
            get
            {
                if ((this.mComboboxListItemAsThereisAnError == null))
                {
                    this.mComboboxListItemAsThereisAnError = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsThereisAnError.SearchProperties[WpfListItem.PropertyNames.Name] = "There is An Error";
                    this.mComboboxListItemAsThereisAnError.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsThereisAnError;
            }
        }
        
        public WpfListItem ComboboxListItemAsThereisNoError
        {
            get
            {
                if ((this.mComboboxListItemAsThereisNoError == null))
                {
                    this.mComboboxListItemAsThereisNoError = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsThereisNoError.SearchProperties[WpfListItem.PropertyNames.Name] = "There is No Error";
                    this.mComboboxListItemAsThereisNoError.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mComboboxListItemAsThereisNoError;
            }
        }
        
        public VariableComboBox VariableComboBox
        {
            get
            {
                if ((this.mVariableComboBox == null))
                {
                    this.mVariableComboBox = new VariableComboBox(this);
                }
                return this.mVariableComboBox;
            }
        }
        
        public WpfEdit DisplayText
        {
            get
            {
                if ((this.mDisplayText == null))
                {
                    this.mDisplayText = new WpfEdit(this);
                    #region Search Criteria
                    this.mDisplayText.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DisplayText";
                    this.mDisplayText.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mDisplayText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCancelButton;
        
        private WpfButton mDoneButton;
        
        private OnErrorGroup mOnErrorGroup;
        
        private LargeView mLargeView;
        
        private WpfListItem mComboboxListItemAsStartsWith;
        
        private WpfListItem mComboboxListItemAsNotEqual;
        
        private WpfListItem mComboboxListItemAsLessThanOrEqualTo;
        
        private WpfListItem mComboboxListItemAsLessThan;
        
        private WpfListItem mComboboxListItemAsGreaterThanOrEqualTo;
        
        private WpfListItem mComboboxListItemAsGreaterThan;
        
        private WpfListItem mComboboxListItemAsEndsWith;
        
        private WpfListItem mComboboxListItemAsContains;
        
        private WpfListItem mComboboxListItemAsDoesntContain;
        
        private WpfListItem mComboboxListItemAsDoesntEndWith;
        
        private WpfListItem mComboboxListItemAsDoesntStartWith;
        
        private WpfListItem mComboboxListItemAsEquals;
        
        private WpfListItem mComboboxListItemAsIsAlphanumeric;
        
        private WpfListItem mComboboxListItemAsIsBase64;
        
        private WpfListItem mComboboxListItemAsIsBetween;
        
        private WpfListItem mComboboxListItemAsIsBinary;
        
        private WpfListItem mComboboxListItemAsIsDate;
        
        private WpfListItem mComboboxListItemAsIsEmail;
        
        private WpfListItem mComboboxListItemAsIsHex;
        
        private WpfListItem mComboboxListItemAsIsNotNULL;
        
        private WpfListItem mComboboxListItemAsIsNULL;
        
        private WpfListItem mComboboxListItemAsIsNumeric;
        
        private WpfListItem mComboboxListItemAsIsRegex;
        
        private WpfListItem mComboboxListItemAsIsText;
        
        private WpfListItem mComboboxListItemAsIsXML;
        
        private WpfListItem mComboboxListItemAsNotAlphanumeric;
        
        private WpfListItem mComboboxListItemAsNotBase64;
        
        private WpfListItem mComboboxListItemAsNotBetween;
        
        private WpfListItem mComboboxListItemAsNotBinary;
        
        private WpfListItem mComboboxListItemAsNotDate;
        
        private WpfListItem mComboboxListItemAsNotEmail;
        
        private WpfListItem mComboboxListItemAsNotHex;
        
        private WpfListItem mComboboxListItemAsNotNumeric;
        
        private WpfListItem mComboboxListItemAsNotRegex;
        
        private WpfListItem mComboboxListItemAsNotText;
        
        private WpfListItem mComboboxListItemAsNotXML;
        
        private WpfListItem mComboboxListItemAsThereisAnError;
        
        private WpfListItem mComboboxListItemAsThereisNoError;
        
        private VariableComboBox mVariableComboBox;
        
        private WpfEdit mDisplayText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup : WpfGroup
    {
        
        public OnErrorGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("ActivityDefaultWindow");
            #endregion
        }
        
        #region Properties
        public ErrorVariableIntellisenseCombobox ErrorVariableIntellisenseCombobox
        {
            get
            {
                if ((this.mErrorVariableIntellisenseCombobox == null))
                {
                    this.mErrorVariableIntellisenseCombobox = new ErrorVariableIntellisenseCombobox(this);
                }
                return this.mErrorVariableIntellisenseCombobox;
            }
        }
        
        public ErrorServiceIntellisenseCombobox ErrorServiceIntellisenseCombobox
        {
            get
            {
                if ((this.mErrorServiceIntellisenseCombobox == null))
                {
                    this.mErrorServiceIntellisenseCombobox = new ErrorServiceIntellisenseCombobox(this);
                }
                return this.mErrorServiceIntellisenseCombobox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableIntellisenseCombobox mErrorVariableIntellisenseCombobox;
        
        private ErrorServiceIntellisenseCombobox mErrorServiceIntellisenseCombobox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableIntellisenseCombobox : WpfComboBox
    {
        
        public ErrorVariableIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("ActivityDefaultWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorServiceIntellisenseCombobox : WpfComboBox
    {
        
        public ErrorServiceIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("ActivityDefaultWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView : WpfCustom
    {
        
        public LargeView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.WindowTitles.Add("ActivityDefaultWindow");
            #endregion
        }
        
        #region Properties
        public Table Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table(this);
                }
                return this.mTable;
            }
        }
        
        public WpfCheckBox RequireAllDecisionsToBeTrueCheckbox
        {
            get
            {
                if ((this.mRequireAllDecisionsToBeTrueCheckbox == null))
                {
                    this.mRequireAllDecisionsToBeTrueCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRequireAllDecisionsToBeTrueCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__RequireAllTrue_AutoID";
                    this.mRequireAllDecisionsToBeTrueCheckbox.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mRequireAllDecisionsToBeTrueCheckbox;
            }
        }
        
        public WpfEdit DisplayTextbox
        {
            get
            {
                if ((this.mDisplayTextbox == null))
                {
                    this.mDisplayTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mDisplayTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Result_AutoID";
                    this.mDisplayTextbox.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mDisplayTextbox;
            }
        }
        
        public WpfEdit TrueArmTextbox
        {
            get
            {
                if ((this.mTrueArmTextbox == null))
                {
                    this.mTrueArmTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTrueArmTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Result_AutoID";
                    this.mTrueArmTextbox.SearchProperties[WpfEdit.PropertyNames.Instance] = "2";
                    this.mTrueArmTextbox.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mTrueArmTextbox;
            }
        }
        
        public WpfEdit FalseArmTextbox
        {
            get
            {
                if ((this.mFalseArmTextbox == null))
                {
                    this.mFalseArmTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mFalseArmTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Result_AutoID";
                    this.mFalseArmTextbox.SearchProperties[WpfEdit.PropertyNames.Instance] = "3";
                    this.mFalseArmTextbox.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mFalseArmTextbox;
            }
        }
        #endregion
        
        #region Fields
        private Table mTable;
        
        private WpfCheckBox mRequireAllDecisionsToBeTrueCheckbox;
        
        private WpfEdit mDisplayTextbox;
        
        private WpfEdit mTrueArmTextbox;
        
        private WpfEdit mFalseArmTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table : WpfTable
    {
        
        public Table(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("ActivityDefaultWindow");
            #endregion
        }
        
        #region Properties
        public Row1 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row1(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row1 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row1 : WpfRow
    {
        
        public Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("ActivityDefaultWindow");
            #endregion
        }
        
        #region Properties
        public MatchValueCell MatchValueCell
        {
            get
            {
                if ((this.mMatchValueCell == null))
                {
                    this.mMatchValueCell = new MatchValueCell(this);
                }
                return this.mMatchValueCell;
            }
        }
        
        public DeleteRowCell DeleteRowCell
        {
            get
            {
                if ((this.mDeleteRowCell == null))
                {
                    this.mDeleteRowCell = new DeleteRowCell(this);
                }
                return this.mDeleteRowCell;
            }
        }
        
        public MatchTypeCell MatchTypeCell
        {
            get
            {
                if ((this.mMatchTypeCell == null))
                {
                    this.mMatchTypeCell = new MatchTypeCell(this);
                }
                return this.mMatchTypeCell;
            }
        }
        
        public WpfCell MatchCell
        {
            get
            {
                if ((this.mMatchCell == null))
                {
                    this.mMatchCell = new WpfCell(this);
                    #region Search Criteria
                    this.mMatchCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Match";
                    this.mMatchCell.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
                    this.mMatchCell.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn3";
                    this.mMatchCell.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mMatchCell;
            }
        }
        #endregion
        
        #region Fields
        private MatchValueCell mMatchValueCell;
        
        private DeleteRowCell mDeleteRowCell;
        
        private MatchTypeCell mMatchTypeCell;
        
        private WpfCell mMatchCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MatchValueCell : WpfCell
    {
        
        public MatchValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Match";
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn1";
            this.WindowTitles.Add("ActivityDefaultWindow");
            #endregion
        }
        
        #region Properties
        public MatchValueIntellisenseCombobox MatchValueIntellisenseCombobox
        {
            get
            {
                if ((this.mMatchValueIntellisenseCombobox == null))
                {
                    this.mMatchValueIntellisenseCombobox = new MatchValueIntellisenseCombobox(this);
                }
                return this.mMatchValueIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private MatchValueIntellisenseCombobox mMatchValueIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MatchValueIntellisenseCombobox : WpfComboBox
    {
        
        public MatchValueIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchCriteria_AutoID";
            this.WindowTitles.Add("ActivityDefaultWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteRowCell : WpfCell
    {
        
        public DeleteRowCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "#";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn0";
            this.WindowTitles.Add("ActivityDefaultWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteRowButton
        {
            get
            {
                if ((this.mDeleteRowButton == null))
                {
                    this.mDeleteRowButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteRowButton.SearchProperties[WpfButton.PropertyNames.Name] = "?";
                    this.mDeleteRowButton.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mDeleteRowButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteRowButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MatchTypeCell : WpfCell
    {
        
        public MatchTypeCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "MatchType";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn2";
            this.WindowTitles.Add("ActivityDefaultWindow");
            #endregion
        }
        
        #region Properties
        public WpfComboBox MatchTypeCombobox
        {
            get
            {
                if ((this.mMatchTypeCombobox == null))
                {
                    this.mMatchTypeCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mMatchTypeCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchType_AutoID";
                    this.mMatchTypeCombobox.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mMatchTypeCombobox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mMatchTypeCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableComboBox : WpfComboBox
    {
        
        public VariableComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Result_AutoID";
            this.WindowTitles.Add("ActivityDefaultWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectWindowsGroupDialog : WinWindow
    {
        
        public SelectWindowsGroupDialog()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Select Group";
            this.WindowTitles.Add("Select Group");
            #endregion
        }
        
        #region Properties
        public ItemPanel ItemPanel
        {
            get
            {
                if ((this.mItemPanel == null))
                {
                    this.mItemPanel = new ItemPanel(this);
                }
                return this.mItemPanel;
            }
        }
        
        public OKPanel OKPanel
        {
            get
            {
                if ((this.mOKPanel == null))
                {
                    this.mOKPanel = new OKPanel(this);
                }
                return this.mOKPanel;
            }
        }
        
        public CancelPanel CancelPanel
        {
            get
            {
                if ((this.mCancelPanel == null))
                {
                    this.mCancelPanel = new CancelPanel(this);
                }
                return this.mCancelPanel;
            }
        }
        #endregion
        
        #region Fields
        private ItemPanel mItemPanel;
        
        private OKPanel mOKPanel;
        
        private CancelPanel mCancelPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemPanel : WinWindow
    {
        
        public ItemPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "214";
            this.WindowTitles.Add("Select Group");
            #endregion
        }
        
        #region Properties
        public WinEdit ObjectNameTextbox
        {
            get
            {
                if ((this.mObjectNameTextbox == null))
                {
                    this.mObjectNameTextbox = new WinEdit(this);
                    #region Search Criteria
                    this.mObjectNameTextbox.SearchProperties.Add(new PropertyExpression(WinEdit.PropertyNames.Name, "Enter the object name to select", PropertyExpressionOperator.Contains));
                    this.mObjectNameTextbox.WindowTitles.Add("Select Group");
                    #endregion
                }
                return this.mObjectNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mObjectNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OKPanel : WinWindow
    {
        
        public OKPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Select Group");
            #endregion
        }
        
        #region Properties
        public WinButton OK
        {
            get
            {
                if ((this.mOK == null))
                {
                    this.mOK = new WinButton(this);
                    #region Search Criteria
                    this.mOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mOK.WindowTitles.Add("Select Group");
                    #endregion
                }
                return this.mOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CancelPanel : WinWindow
    {
        
        public CancelPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Select Group");
            #endregion
        }
        
        #region Properties
        public WinButton Cancel
        {
            get
            {
                if ((this.mCancel == null))
                {
                    this.mCancel = new WinButton(this);
                    #region Search Criteria
                    this.mCancel.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mCancel.WindowTitles.Add("Select Group");
                    #endregion
                }
                return this.mCancel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServicePickerDialog : WpfWindow
    {
        
        public ServicePickerDialog()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Select A Service";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchProperties[WpfWindow.PropertyNames.AutomationId] = "UI_SelectServiceWindow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Explorer Explorer
        {
            get
            {
                if ((this.mExplorer == null))
                {
                    this.mExplorer = new Explorer(this);
                }
                return this.mExplorer;
            }
        }
        
        public WpfButton OK
        {
            get
            {
                if ((this.mOK == null))
                {
                    this.mOK = new WpfButton(this);
                    #region Search Criteria
                    this.mOK.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SelectServiceOKButton_AutoID";
                    this.mOK.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOK;
            }
        }
        
        public WpfButton Cancel
        {
            get
            {
                if ((this.mCancel == null))
                {
                    this.mCancel = new WpfButton(this);
                    #region Search Criteria
                    this.mCancel.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SelectServiceCancelButton_AutoID";
                    this.mCancel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancel;
            }
        }
        #endregion
        
        #region Fields
        private Explorer mExplorer;
        
        private WpfButton mOK;
        
        private WpfButton mCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Explorer : WpfCustom
    {
        
        public Explorer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ExplorerView";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit FilterTextbox
        {
            get
            {
                if ((this.mFilterTextbox == null))
                {
                    this.mFilterTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mFilterTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mFilterTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFilterTextbox;
            }
        }
        
        public WpfButton Refresh
        {
            get
            {
                if ((this.mRefresh == null))
                {
                    this.mRefresh = new WpfButton(this);
                    #region Search Criteria
                    this.mRefresh.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefresh;
            }
        }
        
        public ExplorerTree1 ExplorerTree
        {
            get
            {
                if ((this.mExplorerTree == null))
                {
                    this.mExplorerTree = new ExplorerTree1(this);
                }
                return this.mExplorerTree;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mFilterTextbox;
        
        private WpfButton mRefresh;
        
        private ExplorerTree1 mExplorerTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerTree1 : WpfTree
    {
        
        public ExplorerTree1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Localhost1 Localhost
        {
            get
            {
                if ((this.mLocalhost == null))
                {
                    this.mLocalhost = new Localhost1(this);
                }
                return this.mLocalhost;
            }
        }
        #endregion
        
        #region Fields
        private Localhost1 mLocalhost;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Localhost1 : WpfTreeItem
    {
        
        public Localhost1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.EnvironmentViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TreeItem1 TreeItem1
        {
            get
            {
                if ((this.mTreeItem1 == null))
                {
                    this.mTreeItem1 = new TreeItem1(this);
                }
                return this.mTreeItem1;
            }
        }
        
        public TreeItem2 TreeItem2
        {
            get
            {
                if ((this.mTreeItem2 == null))
                {
                    this.mTreeItem2 = new TreeItem2(this);
                }
                return this.mTreeItem2;
            }
        }
        
        public Checkbox1 Checkbox
        {
            get
            {
                if ((this.mCheckbox == null))
                {
                    this.mCheckbox = new Checkbox1(this);
                }
                return this.mCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private TreeItem1 mTreeItem1;
        
        private TreeItem2 mTreeItem2;
        
        private Checkbox1 mCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem1 : WpfTreeItem
    {
        
        public TreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ExplorerItemViewModel";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem TreeItem11
        {
            get
            {
                if ((this.mTreeItem11 == null))
                {
                    this.mTreeItem11 = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mTreeItem11.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ExplorerItemViewModel";
                    this.mTreeItem11.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mTreeItem11.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mTreeItem11.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTreeItem11;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mTreeItem11;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem2 : WpfTreeItem
    {
        
        public TreeItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ExplorerItemViewModel";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem TreeItem1
        {
            get
            {
                if ((this.mTreeItem1 == null))
                {
                    this.mTreeItem1 = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mTreeItem1.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ExplorerItemViewModel";
                    this.mTreeItem1.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mTreeItem1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mTreeItem1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTreeItem1;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mTreeItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Checkbox1 : WpfCheckBox
    {
        
        public Checkbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "Checkbox";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StartNodePopupWindow : WpfWindow
    {
        
        public StartNodePopupWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchProperties[WpfWindow.PropertyNames.Name] = null;
            this.SearchProperties[WpfWindow.PropertyNames.AutomationId] = null;
            #endregion
        }
        
        #region Properties
        public CustomWindow CustomWindow
        {
            get
            {
                if ((this.mCustomWindow == null))
                {
                    this.mCustomWindow = new CustomWindow(this);
                }
                return this.mCustomWindow;
            }
        }
        
        public FloatingWindowCustom FloatingWindowCustom
        {
            get
            {
                if ((this.mFloatingWindowCustom == null))
                {
                    this.mFloatingWindowCustom = new FloatingWindowCustom(this);
                }
                return this.mFloatingWindowCustom;
            }
        }
        
        public ItemMenu ItemMenu
        {
            get
            {
                if ((this.mItemMenu == null))
                {
                    this.mItemMenu = new ItemMenu(this);
                }
                return this.mItemMenu;
            }
        }
        
        public DesignSurfaceMenu DesignSurfaceMenu
        {
            get
            {
                if ((this.mDesignSurfaceMenu == null))
                {
                    this.mDesignSurfaceMenu = new DesignSurfaceMenu(this);
                }
                return this.mDesignSurfaceMenu;
            }
        }
        #endregion
        
        #region Fields
        private CustomWindow mCustomWindow;
        
        private FloatingWindowCustom mFloatingWindowCustom;
        
        private ItemMenu mItemMenu;
        
        private DesignSurfaceMenu mDesignSurfaceMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CustomWindow : WpfWindow
    {
        
        public CustomWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public StartNodeItemMenu StartNodeItemMenu
        {
            get
            {
                if ((this.mStartNodeItemMenu == null))
                {
                    this.mStartNodeItemMenu = new StartNodeItemMenu(this);
                }
                return this.mStartNodeItemMenu;
            }
        }
        #endregion
        
        #region Fields
        private StartNodeItemMenu mStartNodeItemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StartNodeItemMenu : WpfMenu
    {
        
        public StartNodeItemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            #endregion
        }
        
        #region Properties
        public WpfMenuItem DebugInputsMenuItem
        {
            get
            {
                if ((this.mDebugInputsMenuItem == null))
                {
                    this.mDebugInputsMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDebugInputsMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "DebugInputs";
                    #endregion
                }
                return this.mDebugInputsMenuItem;
            }
        }
        
        public WpfMenuItem DebugStudioMenuItem
        {
            get
            {
                if ((this.mDebugStudioMenuItem == null))
                {
                    this.mDebugStudioMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDebugStudioMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "DebugStudio";
                    #endregion
                }
                return this.mDebugStudioMenuItem;
            }
        }
        
        public WpfMenuItem DebugBrowserMenuItem
        {
            get
            {
                if ((this.mDebugBrowserMenuItem == null))
                {
                    this.mDebugBrowserMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDebugBrowserMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "DebugBrowser";
                    #endregion
                }
                return this.mDebugBrowserMenuItem;
            }
        }
        
        public WpfMenuItem ScheduleMenuItem
        {
            get
            {
                if ((this.mScheduleMenuItem == null))
                {
                    this.mScheduleMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mScheduleMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Schedule";
                    #endregion
                }
                return this.mScheduleMenuItem;
            }
        }
        
        public WpfMenuItem TestEditorMenuItem
        {
            get
            {
                if ((this.mTestEditorMenuItem == null))
                {
                    this.mTestEditorMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mTestEditorMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "TestEditor";
                    #endregion
                }
                return this.mTestEditorMenuItem;
            }
        }
        
        public WpfMenuItem RunAllTestsMenuItem
        {
            get
            {
                if ((this.mRunAllTestsMenuItem == null))
                {
                    this.mRunAllTestsMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mRunAllTestsMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "RunAllTests";
                    #endregion
                }
                return this.mRunAllTestsMenuItem;
            }
        }
        
        public WpfMenuItem DuplicateMenuItem
        {
            get
            {
                if ((this.mDuplicateMenuItem == null))
                {
                    this.mDuplicateMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDuplicateMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Duplicate";
                    #endregion
                }
                return this.mDuplicateMenuItem;
            }
        }
        
        public WpfMenuItem DeployMenuItem
        {
            get
            {
                if ((this.mDeployMenuItem == null))
                {
                    this.mDeployMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeployMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Deploy";
                    #endregion
                }
                return this.mDeployMenuItem;
            }
        }
        
        public WpfMenuItem ShowDependenciesMenuItem
        {
            get
            {
                if ((this.mShowDependenciesMenuItem == null))
                {
                    this.mShowDependenciesMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowDependenciesMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Dependencies";
                    #endregion
                }
                return this.mShowDependenciesMenuItem;
            }
        }
        
        public WpfMenuItem ViewSwaggerMenuItem
        {
            get
            {
                if ((this.mViewSwaggerMenuItem == null))
                {
                    this.mViewSwaggerMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mViewSwaggerMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ViewSwagger";
                    #endregion
                }
                return this.mViewSwaggerMenuItem;
            }
        }
        
        public WpfMenuItem CopyURLtoClipboardMenuItem
        {
            get
            {
                if ((this.mCopyURLtoClipboardMenuItem == null))
                {
                    this.mCopyURLtoClipboardMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mCopyURLtoClipboardMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "CopyUrl";
                    #endregion
                }
                return this.mCopyURLtoClipboardMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mDebugInputsMenuItem;
        
        private WpfMenuItem mDebugStudioMenuItem;
        
        private WpfMenuItem mDebugBrowserMenuItem;
        
        private WpfMenuItem mScheduleMenuItem;
        
        private WpfMenuItem mTestEditorMenuItem;
        
        private WpfMenuItem mRunAllTestsMenuItem;
        
        private WpfMenuItem mDuplicateMenuItem;
        
        private WpfMenuItem mDeployMenuItem;
        
        private WpfMenuItem mShowDependenciesMenuItem;
        
        private WpfMenuItem mViewSwaggerMenuItem;
        
        private WpfMenuItem mCopyURLtoClipboardMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FloatingWindowCustom : WpfCustom
    {
        
        public FloatingWindowCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ToolWindow";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "FloatingWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.HelpText, "Floating window for -", PropertyExpressionOperator.Contains));
            this.SearchProperties[WpfControl.PropertyNames.Name] = null;
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext mWorkSurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext : WpfCustom
    {
        
        public WorkSurfaceContext(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowDesignerView WorkflowDesignerView
        {
            get
            {
                if ((this.mWorkflowDesignerView == null))
                {
                    this.mWorkflowDesignerView = new WorkflowDesignerView(this);
                }
                return this.mWorkflowDesignerView;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowDesignerView mWorkflowDesignerView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowDesignerView : WpfCustom
    {
        
        public WorkflowDesignerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DesignerView DesignerView
        {
            get
            {
                if ((this.mDesignerView == null))
                {
                    this.mDesignerView = new DesignerView(this);
                }
                return this.mDesignerView;
            }
        }
        #endregion
        
        #region Fields
        private DesignerView mDesignerView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DesignerView : WpfCustom
    {
        
        public DesignerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfToggleButton ExpandAllToggleButton
        {
            get
            {
                if ((this.mExpandAllToggleButton == null))
                {
                    this.mExpandAllToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mExpandAllToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "expandAllButton";
                    this.mExpandAllToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpandAllToggleButton;
            }
        }
        
        public WpfToggleButton CollapseAllToggleButton
        {
            get
            {
                if ((this.mCollapseAllToggleButton == null))
                {
                    this.mCollapseAllToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mCollapseAllToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "collapseAllButton";
                    this.mCollapseAllToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCollapseAllToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane mScrollViewerPane;
        
        private WpfToggleButton mExpandAllToggleButton;
        
        private WpfToggleButton mCollapseAllToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane : WpfPane
    {
        
        public ScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "scrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ActivityTypeDesigner ActivityTypeDesigner
        {
            get
            {
                if ((this.mActivityTypeDesigner == null))
                {
                    this.mActivityTypeDesigner = new ActivityTypeDesigner(this);
                }
                return this.mActivityTypeDesigner;
            }
        }
        #endregion
        
        #region Fields
        private ActivityTypeDesigner mActivityTypeDesigner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ActivityTypeDesigner : WpfCustom
    {
        
        public ActivityTypeDesigner(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ActivityTypeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActivityTypeDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowItemPresenter WorkflowItemPresenter
        {
            get
            {
                if ((this.mWorkflowItemPresenter == null))
                {
                    this.mWorkflowItemPresenter = new WorkflowItemPresenter(this);
                }
                return this.mWorkflowItemPresenter;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowItemPresenter mWorkflowItemPresenter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowItemPresenter : WpfCustom
    {
        
        public WorkflowItemPresenter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Flowchart Flowchart
        {
            get
            {
                if ((this.mFlowchart == null))
                {
                    this.mFlowchart = new Flowchart(this);
                }
                return this.mFlowchart;
            }
        }
        #endregion
        
        #region Fields
        private Flowchart mFlowchart;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Flowchart : WpfCustom
    {
        
        public Flowchart(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public MultiAssign MultiAssign
        {
            get
            {
                if ((this.mMultiAssign == null))
                {
                    this.mMultiAssign = new MultiAssign(this);
                }
                return this.mMultiAssign;
            }
        }
        #endregion
        
        #region Fields
        private MultiAssign mMultiAssign;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MultiAssign : WpfCustom
    {
        
        public MultiAssign(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "MultiAssignDesigner", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallView SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView(this);
                }
                return this.mSmallView;
            }
        }
        
        public LargeView1 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView1(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        
        public WpfCustom QuickVariableInputContent
        {
            get
            {
                if ((this.mQuickVariableInputContent == null))
                {
                    this.mQuickVariableInputContent = new WpfCustom(this);
                    #region Search Criteria
                    this.mQuickVariableInputContent.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.QuickVariableInputView";
                    this.mQuickVariableInputContent.SearchProperties[WpfControl.PropertyNames.AutomationId] = "QuickVariableInputContent";
                    this.mQuickVariableInputContent.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQuickVariableInputContent;
            }
        }
        #endregion
        
        #region Fields
        private SmallView mSmallView;
        
        private LargeView1 mLargeView;
        
        private WpfButton mDoneButton;
        
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        
        private WpfCustom mQuickVariableInputContent;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView : WpfCustom
    {
        
        public SmallView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid(this);
                }
                return this.mDataGrid;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid mDataGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid : WpfTable
    {
        
        public DataGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row11 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row11(this);
                }
                return this.mRow1;
            }
        }
        
        public Row2 Row2
        {
            get
            {
                if ((this.mRow2 == null))
                {
                    this.mRow2 = new Row2(this);
                }
                return this.mRow2;
            }
        }
        
        public Row3 Row3
        {
            get
            {
                if ((this.mRow3 == null))
                {
                    this.mRow3 = new Row3(this);
                }
                return this.mRow3;
            }
        }
        #endregion
        
        #region Fields
        private Row11 mRow1;
        
        private Row2 mRow2;
        
        private Row3 mRow3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row11 : WpfRow
    {
        
        public Row11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_0_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell(this);
                }
                return this.mValueCell;
            }
        }
        
        public RowNumberCell RowNumberCell
        {
            get
            {
                if ((this.mRowNumberCell == null))
                {
                    this.mRowNumberCell = new RowNumberCell(this);
                }
                return this.mRowNumberCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell mVariableCell;
        
        private ValueCell mValueCell;
        
        private RowNumberCell mRowNumberCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell : WpfCell
    {
        
        public VariableCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox : WpfComboBox
    {
        
        public Listbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Textbox Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new Textbox(this);
                }
                return this.mTextbox;
            }
        }
        
        public WpfListItem ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "[[SomeVariable]]";
                    this.mListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private Textbox mTextbox;
        
        private WpfListItem mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Textbox : WpfEdit
    {
        
        public Textbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "[[Variable1]]";
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell : WpfCell
    {
        
        public ValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox1 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox1(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox1 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox1 : WpfComboBox
    {
        
        public Listbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RowNumberCell : WpfCell
    {
        
        public RowNumberCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "0";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "1";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row2 : WpfRow
    {
        
        public Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_1_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell1 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell1(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell1 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell1(this);
                }
                return this.mValueCell;
            }
        }
        
        public RowNumberCell1 RowNumberCell
        {
            get
            {
                if ((this.mRowNumberCell == null))
                {
                    this.mRowNumberCell = new RowNumberCell1(this);
                }
                return this.mRowNumberCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell1 mVariableCell;
        
        private ValueCell1 mValueCell;
        
        private RowNumberCell1 mRowNumberCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell1 : WpfCell
    {
        
        public VariableCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox2 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox2(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox2 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox2 : WpfComboBox
    {
        
        public Listbox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Textbox1 Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new Textbox1(this);
                }
                return this.mTextbox;
            }
        }
        
        public WpfListItem ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "[[SomeVariable]]";
                    this.mListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private Textbox1 mTextbox;
        
        private WpfListItem mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Textbox1 : WpfEdit
    {
        
        public Textbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell1 : WpfCell
    {
        
        public ValueCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox3 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox3(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox3 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox3 : WpfComboBox
    {
        
        public Listbox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RowNumberCell1 : WpfCell
    {
        
        public RowNumberCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "0";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "2";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row3 : WpfRow
    {
        
        public Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_2_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell2 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell2(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell2 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell2(this);
                }
                return this.mValueCell;
            }
        }
        
        public RowNumberCell2 RowNumberCell
        {
            get
            {
                if ((this.mRowNumberCell == null))
                {
                    this.mRowNumberCell = new RowNumberCell2(this);
                }
                return this.mRowNumberCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell2 mVariableCell;
        
        private ValueCell2 mValueCell;
        
        private RowNumberCell2 mRowNumberCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell2 : WpfCell
    {
        
        public VariableCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox4 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox4(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox4 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox4 : WpfComboBox
    {
        
        public Listbox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Textbox2 Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new Textbox2(this);
                }
                return this.mTextbox;
            }
        }
        
        public WpfListItem ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "[[SomeVariable]]";
                    this.mListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private Textbox2 mTextbox;
        
        private WpfListItem mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Textbox2 : WpfEdit
    {
        
        public Textbox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell2 : WpfCell
    {
        
        public ValueCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox5 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox5(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox5 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox5 : WpfComboBox
    {
        
        public Listbox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RowNumberCell2 : WpfCell
    {
        
        public RowNumberCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "0";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "3";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView1 : WpfCustom
    {
        
        public LargeView1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid1 DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid1(this);
                }
                return this.mDataGrid;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid1 mDataGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid1 : WpfTable
    {
        
        public DataGrid1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row12 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row12(this);
                }
                return this.mRow1;
            }
        }
        
        public Row21 Row2
        {
            get
            {
                if ((this.mRow2 == null))
                {
                    this.mRow2 = new Row21(this);
                }
                return this.mRow2;
            }
        }
        
        public Row31 Row3
        {
            get
            {
                if ((this.mRow3 == null))
                {
                    this.mRow3 = new Row31(this);
                }
                return this.mRow3;
            }
        }
        
        public Row4 Row4
        {
            get
            {
                if ((this.mRow4 == null))
                {
                    this.mRow4 = new Row4(this);
                }
                return this.mRow4;
            }
        }
        #endregion
        
        #region Fields
        private Row12 mRow1;
        
        private Row21 mRow2;
        
        private Row31 mRow3;
        
        private Row4 mRow4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row12 : WpfRow
    {
        
        public Row12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfRow.PropertyNames.AutomationId, "UI_ActivityGridRow_0_AutoID", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell3 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell3(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell3 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell3(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell3 mVariableCell;
        
        private ValueCell3 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell3 : WpfCell
    {
        
        public VariableCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox6 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox6(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox6 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox6 : WpfComboBox
    {
        
        public Listbox6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FieldName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell3 : WpfCell
    {
        
        public ValueCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AssignValueCombobox AssignValueCombobox
        {
            get
            {
                if ((this.mAssignValueCombobox == null))
                {
                    this.mAssignValueCombobox = new AssignValueCombobox(this);
                }
                return this.mAssignValueCombobox;
            }
        }
        #endregion
        
        #region Fields
        private AssignValueCombobox mAssignValueCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssignValueCombobox : WpfComboBox
    {
        
        public AssignValueCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row21 : WpfRow
    {
        
        public Row21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_1_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell4 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell4(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell4 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell4(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell4 mVariableCell;
        
        private ValueCell4 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell4 : WpfCell
    {
        
        public VariableCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox7 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox7(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox7 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox7 : WpfComboBox
    {
        
        public Listbox7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_FieldName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell4 : WpfCell
    {
        
        public ValueCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AssignValueCombobox1 AssignValueCombobox
        {
            get
            {
                if ((this.mAssignValueCombobox == null))
                {
                    this.mAssignValueCombobox = new AssignValueCombobox1(this);
                }
                return this.mAssignValueCombobox;
            }
        }
        #endregion
        
        #region Fields
        private AssignValueCombobox1 mAssignValueCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssignValueCombobox1 : WpfComboBox
    {
        
        public AssignValueCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row31 : WpfRow
    {
        
        public Row31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_2_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell5 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell5(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell5 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell5(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell5 mVariableCell;
        
        private ValueCell5 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell5 : WpfCell
    {
        
        public VariableCell5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox8 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox8(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox8 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox8 : WpfComboBox
    {
        
        public Listbox8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row4_FieldName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell5 : WpfCell
    {
        
        public ValueCell5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AssignValueCombobox2 AssignValueCombobox
        {
            get
            {
                if ((this.mAssignValueCombobox == null))
                {
                    this.mAssignValueCombobox = new AssignValueCombobox2(this);
                }
                return this.mAssignValueCombobox;
            }
        }
        #endregion
        
        #region Fields
        private AssignValueCombobox2 mAssignValueCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssignValueCombobox2 : WpfComboBox
    {
        
        public AssignValueCombobox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row4_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row4 : WpfRow
    {
        
        public Row4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_3_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell6 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell6(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell6 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell6(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell6 mVariableCell;
        
        private ValueCell6 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell6 : WpfCell
    {
        
        public VariableCell6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox9 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox9(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox9 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox9 : WpfComboBox
    {
        
        public Listbox9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row5_FieldName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell6 : WpfCell
    {
        
        public ValueCell6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AssignValueCombobox3 AssignValueCombobox
        {
            get
            {
                if ((this.mAssignValueCombobox == null))
                {
                    this.mAssignValueCombobox = new AssignValueCombobox3(this);
                }
                return this.mAssignValueCombobox;
            }
        }
        #endregion
        
        #region Fields
        private AssignValueCombobox3 mAssignValueCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssignValueCombobox3 : WpfComboBox
    {
        
        public AssignValueCombobox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row5_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemMenu : WpfMenu
    {
        
        public ItemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            #endregion
        }
        
        #region Properties
        public WpfMenuItem TabbedMenuItem
        {
            get
            {
                if ((this.mTabbedMenuItem == null))
                {
                    this.mTabbedMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mTabbedMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Tabbed Document";
                    #endregion
                }
                return this.mTabbedMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mTabbedMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DesignSurfaceMenu : WpfMenu
    {
        
        public DesignSurfaceMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            #endregion
        }
        
        #region Properties
        public WpfMenuItem DeleteMenuItem
        {
            get
            {
                if ((this.mDeleteMenuItem == null))
                {
                    this.mDeleteMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeleteMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "DeleteMenuItem";
                    #endregion
                }
                return this.mDeleteMenuItem;
            }
        }
        
        public WpfMenuItem DeleteRowMenuItem
        {
            get
            {
                if ((this.mDeleteRowMenuItem == null))
                {
                    this.mDeleteRowMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeleteRowMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_DeleteRowMenuItem_AutoID";
                    this.mDeleteRowMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteRowMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mDeleteMenuItem;
        
        private WpfMenuItem mDeleteRowMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorWindow : WinWindow
    {
        
        public ErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Error";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public WinButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mCloseButton.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CriticalErrorWindow : WinWindow
    {
        
        public CriticalErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Critical Error";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Critical Error");
            #endregion
        }
        
        #region Properties
        public WinButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mCloseButton.WindowTitles.Add("Critical Error");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebBrowserErrorWindow : WinWindow
    {
        
        public WebBrowserErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Web Browser";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Web Browser");
            #endregion
        }
        
        #region Properties
        public Pane Pane
        {
            get
            {
                if ((this.mPane == null))
                {
                    this.mPane = new Pane(this);
                }
                return this.mPane;
            }
        }
        #endregion
        
        #region Fields
        private Pane mPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Pane : WinPane
    {
        
        public Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Web Browser";
            this.WindowTitles.Add("Web Browser");
            #endregion
        }
        
        #region Properties
        public WinButton OKButton
        {
            get
            {
                if ((this.mOKButton == null))
                {
                    this.mOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mOKButton.WindowTitles.Add("Web Browser");
                    #endregion
                }
                return this.mOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ChooseDLLWindow : WpfWindow
    {
        
        public ChooseDLLWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Choose DLL";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Choose DLL");
            #endregion
        }
        
        #region Properties
        public WpfEdit FilesTextBox
        {
            get
            {
                if ((this.mFilesTextBox == null))
                {
                    this.mFilesTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mFilesTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "FilesTextBox";
                    this.mFilesTextBox.WindowTitles.Add("Choose DLL");
                    #endregion
                }
                return this.mFilesTextBox;
            }
        }
        
        public WpfButton SelectButton
        {
            get
            {
                if ((this.mSelectButton == null))
                {
                    this.mSelectButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSelectButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SelectButton";
                    this.mSelectButton.WindowTitles.Add("Choose DLL");
                    #endregion
                }
                return this.mSelectButton;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelButton";
                    this.mCancelButton.WindowTitles.Add("Choose DLL");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public DLLDataTree DLLDataTree
        {
            get
            {
                if ((this.mDLLDataTree == null))
                {
                    this.mDLLDataTree = new DLLDataTree(this);
                }
                return this.mDLLDataTree;
            }
        }
        
        public FilterTextBox FilterTextBox
        {
            get
            {
                if ((this.mFilterTextBox == null))
                {
                    this.mFilterTextBox = new FilterTextBox(this);
                }
                return this.mFilterTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mFilesTextBox;
        
        private WpfButton mSelectButton;
        
        private WpfButton mCancelButton;
        
        private DLLDataTree mDLLDataTree;
        
        private FilterTextBox mFilterTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DLLDataTree : WpfTree
    {
        
        public DLLDataTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "DllDataTree";
            this.WindowTitles.Add("Choose DLL");
            #endregion
        }
        
        #region Properties
        public CDrive CDrive
        {
            get
            {
                if ((this.mCDrive == null))
                {
                    this.mCDrive = new CDrive(this);
                }
                return this.mCDrive;
            }
        }
        
        public GAC GAC
        {
            get
            {
                if ((this.mGAC == null))
                {
                    this.mGAC = new GAC(this);
                }
                return this.mGAC;
            }
        }
        #endregion
        
        #region Fields
        private CDrive mCDrive;
        
        private GAC mGAC;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CDrive : WpfTreeItem
    {
        
        public CDrive(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "C:\\";
            this.WindowTitles.Add("Choose DLL");
            #endregion
        }
        
        #region Properties
        public WpfText DLLTreeCText
        {
            get
            {
                if ((this.mDLLTreeCText == null))
                {
                    this.mDLLTreeCText = new WpfText(this);
                    #region Search Criteria
                    this.mDLLTreeCText.SearchProperties[WpfText.PropertyNames.Name] = "C:\\";
                    this.mDLLTreeCText.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDLLTreeCText.WindowTitles.Add("Choose DLL");
                    #endregion
                }
                return this.mDLLTreeCText;
            }
        }
        
        public WpfCheckBox Expander
        {
            get
            {
                if ((this.mExpander == null))
                {
                    this.mExpander = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mExpander.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "ExpansionIndicator";
                    this.mExpander.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpander.WindowTitles.Add("Choose DLL");
                    #endregion
                }
                return this.mExpander;
            }
        }
        
        public WpfTreeItem FirstItem
        {
            get
            {
                if ((this.mFirstItem == null))
                {
                    this.mFirstItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mFirstItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mFirstItem.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
                    this.mFirstItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFirstItem.WindowTitles.Add("Choose DLL");
                    #endregion
                }
                return this.mFirstItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mDLLTreeCText;
        
        private WpfCheckBox mExpander;
        
        private WpfTreeItem mFirstItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class GAC : WpfTreeItem
    {
        
        public GAC(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "GAC";
            this.WindowTitles.Add("Choose DLL");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem DataTreeItem
        {
            get
            {
                if ((this.mDataTreeItem == null))
                {
                    this.mDataTreeItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mDataTreeItem.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
                    this.mDataTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDataTreeItem.WindowTitles.Add("Choose DLL");
                    #endregion
                }
                return this.mDataTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mDataTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FilterTextBox : WpfEdit
    {
        
        public FilterTextBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
            this.WindowTitles.Add("Choose DLL");
            #endregion
        }
        
        #region Properties
        public WpfButton ClearSearchButton
        {
            get
            {
                if ((this.mClearSearchButton == null))
                {
                    this.mClearSearchButton = new WpfButton(this);
                    #region Search Criteria
                    this.mClearSearchButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ClearSearchButton";
                    this.mClearSearchButton.WindowTitles.Add("Choose DLL");
                    #endregion
                }
                return this.mClearSearchButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mClearSearchButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectFilesWindow : WpfWindow
    {
        
        public SelectFilesWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Select File(s)";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Select File(s)");
            #endregion
        }
        
        #region Properties
        public DrivesDataTree DrivesDataTree
        {
            get
            {
                if ((this.mDrivesDataTree == null))
                {
                    this.mDrivesDataTree = new DrivesDataTree(this);
                }
                return this.mDrivesDataTree;
            }
        }
        
        public WpfButton SelectButton
        {
            get
            {
                if ((this.mSelectButton == null))
                {
                    this.mSelectButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSelectButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SaveButton";
                    this.mSelectButton.WindowTitles.Add("Select File(s)");
                    #endregion
                }
                return this.mSelectButton;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelButton";
                    this.mCancelButton.WindowTitles.Add("Select File(s)");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfEdit FileNameTextBox
        {
            get
            {
                if ((this.mFileNameTextBox == null))
                {
                    this.mFileNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mFileNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DriveNameTextBox";
                    this.mFileNameTextBox.WindowTitles.Add("Select File(s)");
                    #endregion
                }
                return this.mFileNameTextBox;
            }
        }
        
        public DriveNameIntellisensComboBox DriveNameIntellisensComboBox
        {
            get
            {
                if ((this.mDriveNameIntellisensComboBox == null))
                {
                    this.mDriveNameIntellisensComboBox = new DriveNameIntellisensComboBox(this);
                }
                return this.mDriveNameIntellisensComboBox;
            }
        }
        #endregion
        
        #region Fields
        private DrivesDataTree mDrivesDataTree;
        
        private WpfButton mSelectButton;
        
        private WpfButton mCancelButton;
        
        private WpfEdit mFileNameTextBox;
        
        private DriveNameIntellisensComboBox mDriveNameIntellisensComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DrivesDataTree : WpfTree
    {
        
        public DrivesDataTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "DrivesDataTree";
            this.WindowTitles.Add("Select File(s)");
            #endregion
        }
        
        #region Properties
        public CTreeItem CTreeItem
        {
            get
            {
                if ((this.mCTreeItem == null))
                {
                    this.mCTreeItem = new CTreeItem(this);
                }
                return this.mCTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private CTreeItem mCTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CTreeItem : WpfTreeItem
    {
        
        public CTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Select File(s)");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem FirstItem
        {
            get
            {
                if ((this.mFirstItem == null))
                {
                    this.mFirstItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mFirstItem.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
                    this.mFirstItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFirstItem.WindowTitles.Add("Choose DLL");
                    #endregion
                }
                return this.mFirstItem;
            }
        }
        
        public bootmgrFile bootmgrFile
        {
            get
            {
                if ((this.mbootmgrFile == null))
                {
                    this.mbootmgrFile = new bootmgrFile(this);
                }
                return this.mbootmgrFile;
            }
        }
        
        public BOOTNXTFile BOOTNXTFile
        {
            get
            {
                if ((this.mBOOTNXTFile == null))
                {
                    this.mBOOTNXTFile = new BOOTNXTFile(this);
                }
                return this.mBOOTNXTFile;
            }
        }
        
        public WpfTreeItem swapfile
        {
            get
            {
                if ((this.mswapfile == null))
                {
                    this.mswapfile = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mswapfile.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "17";
                    this.mswapfile.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mswapfile.WindowTitles.Add("Select File(s)");
                    #endregion
                }
                return this.mswapfile;
            }
        }
        
        public AttachmentsForEmailFolder AttachmentsForEmailFolder
        {
            get
            {
                if ((this.mAttachmentsForEmailFolder == null))
                {
                    this.mAttachmentsForEmailFolder = new AttachmentsForEmailFolder(this);
                }
                return this.mAttachmentsForEmailFolder;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mFirstItem;
        
        private bootmgrFile mbootmgrFile;
        
        private BOOTNXTFile mBOOTNXTFile;
        
        private WpfTreeItem mswapfile;
        
        private AttachmentsForEmailFolder mAttachmentsForEmailFolder;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class bootmgrFile : WpfTreeItem
    {
        
        public bootmgrFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "13";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Select File(s)");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Checkbox
        {
            get
            {
                if ((this.mCheckbox == null))
                {
                    this.mCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_CheckBoxbootmgr_AutoID";
                    this.mCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCheckbox.WindowTitles.Add("Select File(s)");
                    #endregion
                }
                return this.mCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BOOTNXTFile : WpfTreeItem
    {
        
        public BOOTNXTFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "14";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Select File(s)");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Checkbox
        {
            get
            {
                if ((this.mCheckbox == null))
                {
                    this.mCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_CheckBoxBOOTNXT_AutoID";
                    this.mCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCheckbox.WindowTitles.Add("Select File(s)");
                    #endregion
                }
                return this.mCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AttachmentsForEmailFolder : WpfTreeItem
    {
        
        public AttachmentsForEmailFolder(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Select File(s)");
            #endregion
        }
        
        #region Properties
        public attachment1 attachment1
        {
            get
            {
                if ((this.mattachment1 == null))
                {
                    this.mattachment1 = new attachment1(this);
                }
                return this.mattachment1;
            }
        }
        
        public attachment2 attachment2
        {
            get
            {
                if ((this.mattachment2 == null))
                {
                    this.mattachment2 = new attachment2(this);
                }
                return this.mattachment2;
            }
        }
        #endregion
        
        #region Fields
        private attachment1 mattachment1;
        
        private attachment2 mattachment2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class attachment1 : WpfTreeItem
    {
        
        public attachment1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Select File(s)");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox CheckBox
        {
            get
            {
                if ((this.mCheckBox == null))
                {
                    this.mCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_CheckBoxattachment1.txt_AutoID";
                    this.mCheckBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCheckBox.WindowTitles.Add("Select File(s)");
                    #endregion
                }
                return this.mCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class attachment2 : WpfTreeItem
    {
        
        public attachment2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Select File(s)");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox CheckBox
        {
            get
            {
                if ((this.mCheckBox == null))
                {
                    this.mCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_CheckBoxattachment2.txt_AutoID";
                    this.mCheckBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCheckBox.WindowTitles.Add("Select File(s)");
                    #endregion
                }
                return this.mCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DriveNameIntellisensComboBox : WpfComboBox
    {
        
        public DriveNameIntellisensComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "DriveNameIntellisenseTextBox";
            this.WindowTitles.Add("Select File(s)");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Select File(s)");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
}
