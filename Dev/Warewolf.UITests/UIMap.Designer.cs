// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Warewolf.UITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Assert_CancelConnectionButton_Exists - Use 'Assert_CancelConnectionButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_CancelConnectionButton_Exists()
        {
            #region Variable Declarations
            WpfButton cancelTestButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DBSourceWizardTab.WorkSurfaceContext.CancelTestButton;
            #endregion

            // Verify that the 'Exists' property of 'Cancel Test' button equals 'True'
            Assert.AreEqual(this.Assert_CancelConnectionButton_ExistsExpectedValues.CancelTestButtonExists, cancelTestButton.Exists, "Cancel Button does not exist");
        }
        
        /// <summary>
        /// Assert_Connection_Passed - Use 'Assert_Connection_PassedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Connection_Passed()
        {
            #region Variable Declarations
            WpfImage connectionPassedImage = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DBSourceWizardTab.WorkSurfaceContext.ConnectionPassedImage;
            #endregion

            // Verify that the 'Exists' property of first image next to 'Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceCont...' custom control equals 'True'
            Assert.AreEqual(this.Assert_Connection_PassedExpectedValues.ConnectionPassedImageExists, connectionPassedImage.Exists, "Test connection failed");
        }
        
        /// <summary>
        /// Assert_RunDebug_Button_Exist_And_Enabled - Use 'Assert_RunDebug_Button_Exist_And_EnabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_RunDebug_Button_Exist_And_Enabled()
        {
            #region Variable Declarations
            WpfButton runAndDebugButton = this.MainStudioWindow.SideMenuBar.RunAndDebugButton;
            #endregion

            // Verify that the 'Exists' property of 'Run and debug your workflow service' button equals 'True'
            Assert.AreEqual(this.Assert_RunDebug_Button_Exist_And_EnabledExpectedValues.RunAndDebugButtonExists, runAndDebugButton.Exists, "Run button does not exist");

            // Verify that the 'Enabled' property of 'Run and debug your workflow service' button equals 'True'
            Assert.AreEqual(this.Assert_RunDebug_Button_Exist_And_EnabledExpectedValues.RunAndDebugButtonEnabled, runAndDebugButton.Enabled, "RunDebug button is disabled");
        }
        
        /// <summary>
        /// Assert_variable_filter_textbox_exist - Use 'Assert_variable_filter_textbox_existExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_variable_filter_textbox_exist()
        {
            #region Variable Declarations
            WpfText filterText = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableSearchTextBoxEdit.FilterText;
            #endregion

            // Verify that the 'Exists' property of 'Filter' label equals 'True'
            Assert.AreEqual(this.Assert_variable_filter_textbox_existExpectedValues.FilterTextExists, filterText.Exists, "Variable filter textbox does not exist");
        }
        
        /// <summary>
        /// AssertMethod6 - Use 'AssertMethod6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod6()
        {
            #region Variable Declarations
            WpfButton createanewtestButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.ServiceTestView.TestsListbox.WarewolfStudioView.CreateanewtestButton;
            WpfCustom serviceTestView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.ServiceTestView;
            WpfHyperlink urlHyperlink = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.ServiceTestView.UrlText.UrlHyperlink;
            WpfText passingText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.ServiceTestView.PassingText;
            WpfButton runAllButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.ServiceTestView.RunAllButton;
            WpfList testsListboxList = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.ServiceTestView.TestsListboxList;
            #endregion

            // Verify that the 'Exists' property of 'CreateTest' button equals 'True'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.CreateanewtestButtonExists, createanewtestButton.Exists, "Create new tests button does not exist");

            // Verify that the 'ControlType' property of 'UI_ServiceTestView_AutoID' custom control equals 'Custom'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.ServiceTestViewControlType, serviceTestView.ControlType.ToString(), "TestWindoe does not exist after clicking Tests on the Explorer Context Menu");

            // Verify that the 'Exists' property of link equals 'True'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.UrlHyperlinkExists, urlHyperlink.Exists, "Test URL does not exist after clicking Tests from Context Menu");

            // Verify that the 'Exists' property of 'Passing:' label equals 'True'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.PassingTextExists, passingText.Exists, "Passing text does not exist after clicking tests from context Menu");

            // Verify that the 'Exists' property of 'Run All' button equals 'True'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.RunAllButtonExists, runAllButton.Exists, "RunAll button does not exist after clicking Tests from Context Menu");

            // Verify that the 'Exists' property of 'TestsListbox' list box equals 'True'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.TestsListboxListExists, testsListboxList.Exists, "Tests listbox does not exist after clicking Tests from Context Menu");
        }
        
        /// <summary>
        /// Assign_Value_To_Variable - Use 'Assign_Value_To_VariableParams' to pass parameters into this method.
        /// </summary>
        public void Assign_Value_To_Variable()
        {
            #region Variable Declarations
            WpfEdit textEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.LargeView.DataGrid.Row1.ValueCell.AssignValueCombobox.TextEdit;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.DoneButton;
            #endregion

            // Verify that the 'Exists' property of 'Text' text box equals 'True'
            Assert.AreEqual(this.Assign_Value_To_VariableParams.TextEditExists, textEdit.Exists, "Value textbox does not exist");

            // Type '50' in 'Text' text box
            textEdit.Text = this.Assign_Value_To_VariableParams.TextEditText;

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 3));
        }
        
        /// <summary>
        /// Click_AddNew_Web_Source_From_tool - Use 'Click_AddNew_Web_Source_From_toolParams' to pass parameters into this method.
        /// </summary>
        public void Click_AddNew_Web_Source_From_tool()
        {
            #region Variable Declarations
            WpfButton newButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.LargeView.NewButton;
            #endregion

            // Verify that the 'Exists' property of 'New' button equals 'True'
            Assert.AreEqual(this.Click_AddNew_Web_Source_From_toolParams.NewButtonExists, newButton.Exists, "NewButton does not exist");

            // Click 'New' button
            Mouse.Click(newButton, new Point(30, 4));
        }
        
        /// <summary>
        /// Click_Assign_Tool_CollapseAll - Use 'Click_Assign_Tool_CollapseAllParams' to pass parameters into this method.
        /// </summary>
        public void Click_Assign_Tool_CollapseAll()
        {
            #region Variable Declarations
            WpfToggleButton collapseAllToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.CollapseAllToggleButton;
            #endregion

            // Verify that the 'Exists' property of 'CollapseAll' toggle button equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_CollapseAllParams.CollapseAllToggleButtonExists, collapseAllToggleButton.Exists, "Expand all button does not exist");

            // Set to 'Pressed' state 'CollapseAll' toggle button
            collapseAllToggleButton.Pressed = this.Click_Assign_Tool_CollapseAllParams.CollapseAllToggleButtonPressed;
        }
        
        /// <summary>
        /// Click_Assign_Tool_ExpandAll - Use 'Click_Assign_Tool_ExpandAllParams' to pass parameters into this method.
        /// </summary>
        public void Click_Assign_Tool_ExpandAll()
        {
            #region Variable Declarations
            WpfToggleButton expandAllToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ExpandAllToggleButton;
            WpfCustom multiAssign = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign;
            #endregion

            // Verify that the 'Exists' property of 'ExpandAll' toggle button equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_ExpandAllParams.ExpandAllToggleButtonExists, expandAllToggleButton.Exists, "Expand all button does not exist");

            // Set to 'Pressed' state 'ExpandAll' toggle button
            expandAllToggleButton.Pressed = this.Click_Assign_Tool_ExpandAllParams.ExpandAllToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_ExpandAllParams.MultiAssignExists, multiAssign.Exists, "Assign tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Click_Assign_Tool_Large_View_Done_Button - Use 'Click_Assign_Tool_Large_View_Done_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Assign_Tool_Large_View_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.DoneButton;
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row1.VariableCell.Listbox.Textbox;
            WpfEdit textBox1 = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.VariableDataItem.List.ListItem.Table.DataItem1.VariableNameCell.ValueEditor.TextBox;
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.OpenQuickVariableInpToggleButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));

            // Verify that the 'Text' property of 'UI_TextBox_AutoID' text box equals '[[SomeVariable]]'
            Assert.AreEqual(this.Click_Assign_Tool_Large_View_Done_ButtonParams.TextboxText, textbox.Text, "Assign small view row1 variable textbox does not contain text somevariable");

            // Verify that the 'Text' property of 'UI_NameTextBox_AutoID' text box equals 'SomeVariable'
            Assert.AreEqual(this.Click_Assign_Tool_Large_View_Done_ButtonParams.TextBoxText1, textBox1.Text, "Variable list scalar row 1 textbox text does not equal somevariable");

            // Verify that the 'Exists' property of 'Open Quick Variable Input' toggle button equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_Large_View_Done_ButtonParams.OpenQuickVariableInpToggleButtonExists, openQuickVariableInpToggleButton.Exists, "QVI toggle button does not exist in assign tool small view after clicking done bu" +
                    "tton on large view.");
        }
        
        /// <summary>
        /// Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableName - Use 'Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams' to pass parameters into this method.
        /// </summary>
        public void Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableName()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.DoneButton;
            WpfHyperlink hyperlink = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Error1.Hyperlink;
            WpfEdit textBox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.VariableDataItem.List.ListItem.Table.DataItem1.VariableNameCell.ValueEditor.TextBox;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));

            // Verify that the 'Exists' property of 'Hyperlink' link equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams.HyperlinkExists, hyperlink.Exists, "Error popup does not exist on flowchart designer.");

            // Verify that the 'Text' property of 'UI_NameTextBox_AutoID' text box equals ''
            Assert.AreEqual(this.Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams.TextBoxText, textBox.Text, "Variable list scalar row 1 textbox text is not blank with invalid variable.");
        }
        
        /// <summary>
        /// Click_Assign_Tool_Remove_Variable_From_Tool - Use 'Click_Assign_Tool_Remove_Variable_From_ToolParams' to pass parameters into this method.
        /// </summary>
        public void Click_Assign_Tool_Remove_Variable_From_Tool()
        {
            #region Variable Declarations
            WpfCustom multiAssign = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign;
            WpfMenuItem showLargeView = this.MainStudioWindow.DesignSurfaceContextMenu.ShowLargeView;
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.LargeView.DataGrid.Row1.VariableCell.Listbox.Textbox;
            WpfEdit variableSearchTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableSearchTextBoxEdit;
            WpfButton clearSearchButton = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableSearchTextBoxEdit.ClearSearchButton;
            WpfButton deleteButton = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.VariableDataItem.List.ListItem.Table.DataItem1.VariableNameCell.ValueEditor.TextBox.DeleteButton;
            #endregion

            // Right-Click 'DsfMultiAssignActivity' custom control
            Mouse.Click(multiAssign, MouseButtons.Right, ModifierKeys.None, new Point(134, 7));

            // Click 'Show Large View' menu item
            Mouse.Click(showLargeView, new Point(43, 15));

            // Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_Remove_Variable_From_ToolParams.MultiAssignExists, multiAssign.Exists, "Assign tool large view on the design surface does not exist");

            // Type '[[SomeOtherVariable]]' in 'UI__Row1_FieldName_AutoID' text box
            textbox.Text = this.Click_Assign_Tool_Remove_Variable_From_ToolParams.TextboxText;

            // Type '{Right}{Tab}' in 'UI__Row1_FieldName_AutoID' text box
            Keyboard.SendKeys(textbox, this.Click_Assign_Tool_Remove_Variable_From_ToolParams.TextboxSendKeys, ModifierKeys.None);

            // Verify that the 'Text' property of 'UI__Row1_FieldName_AutoID' text box equals '[[SomeOtherVariable]]'
            Assert.AreEqual(this.Click_Assign_Tool_Remove_Variable_From_ToolParams.TextboxText1, textbox.Text, "Multiassign small view row 1 variable textbox text does not equal \"[[Some$Invalid" +
                    "%Variable]]\".");

            // Verify that the 'Exists' property of 'UI__Row1_FieldName_AutoID' text box equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_Remove_Variable_From_ToolParams.TextboxExists, textbox.Exists, "Assign large view row 1 variable textbox does not exist");

            // Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_Remove_Variable_From_ToolParams.VariableSearchTextBoxEditExists, variableSearchTextBoxEdit.Exists, "Variable filter textbox does not exist");

            // Type 'Other' in 'SearchTextBox' text box
            variableSearchTextBoxEdit.Text = this.Click_Assign_Tool_Remove_Variable_From_ToolParams.VariableSearchTextBoxEditText;

            // Verify that the 'Exists' property of 'ClearSearchButton' button equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_Remove_Variable_From_ToolParams.ClearSearchButtonExists, clearSearchButton.Exists, "Variable clear filter button does not exist");

            // Click 'ClearSearchButton' button
            Mouse.Click(clearSearchButton, new Point(8, 13));

            // Verify that the 'Exists' property of 'DeleteButton' button equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_Remove_Variable_From_ToolParams.DeleteButtonExists, deleteButton.Exists, "Variable delete does not exist");

            // Click 'DeleteButton' button
            Mouse.Click(deleteButton, new Point(9, 8));
        }
        
        /// <summary>
        /// Click_Assign_Tool_url - Use 'Click_Assign_Tool_urlParams' to pass parameters into this method.
        /// </summary>
        public void Click_Assign_Tool_url()
        {
            #region Variable Declarations
            WpfHyperlink httprsaklfsanele3142Hyperlink = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.TopScrollViewerPane.Httprsaklfsanele3142Text.Httprsaklfsanele3142Hyperlink;
            WpfWindow messageBoxWindow = this.MessageBoxWindow;
            WpfButton oKButton = this.MessageBoxWindow.OKButton;
            #endregion

            // Verify that the 'Exists' property of 'http://rsaklfsanele:3142/secure/Unassigned/Unsaved...' link equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_urlParams.Httprsaklfsanele3142HyperlinkExists, httprsaklfsanele3142Hyperlink.Exists, "Url hyperlink does not exist");

            // Click 'http://rsaklfsanele:3142/secure/Unassigned/Unsaved...' link
            Mouse.Click(httprsaklfsanele3142Hyperlink, new Point(201, 10));

            // Verify that the 'Exists' property of 'WarewolfMessageBox' window equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_urlParams.MessageBoxWindowExists, messageBoxWindow.Exists, "Did you know popup does not exis");

            // Verify that the 'Exists' property of 'OK' button equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_urlParams.OKButtonExists, oKButton.Exists, "Ok button does not exist on the DidYouKnow button");

            // Click 'OK' button
            Mouse.Click(oKButton, new Point(38, 12));
        }
        
        /// <summary>
        /// Click_Base_Convert_Large_View_Done_Button - Use 'Click_Base_Convert_Large_View_Done_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Base_Convert_Large_View_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert.DoneButton;
            WpfEdit valueTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert.SmallView.DataGrid.Row1.Cell.Listbox.ValueTextbox;
            WpfEdit textBox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.VariableDataItem.List.ListItem.Table.DataItem1.VariableNameCell.ValueEditor.TextBox;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(36, 11));

            // Verify that the 'Text' property of 'UI__Row1_FromExpressiontxt_AutoID' text box equals '[[SomeVariable]]'
            Assert.AreEqual(this.Click_Base_Convert_Large_View_Done_ButtonParams.ValueTextboxText, valueTextbox.Text, "Base convert small view row1 variable textbox does not contain text somevariable." +
                    "");

            // Verify that the 'Text' property of 'UI_NameTextBox_AutoID' text box equals 'SomeVariable'
            Assert.AreEqual(this.Click_Base_Convert_Large_View_Done_ButtonParams.TextBoxText, textBox.Text, "Variable list scalar row 1 textbox text does not equal somevariable");
        }
        
        /// <summary>
        /// Click_Calculate_Large_View_Done_Button - Use 'Click_Calculate_Large_View_Done_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Calculate_Large_View_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate.DoneButton;
            WpfEdit functionTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate.SmallView.Listbox.FunctionTextbox;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(45, 8));

            // Verify that the 'Text' property of 'FunctionTextbox' text box equals '[[SomeVariable]]'
            Assert.AreEqual(this.Click_Calculate_Large_View_Done_ButtonParams.FunctionTextboxText, functionTextbox.Text, "Calculate small view function textbox text does not equal SomeVariable.");
        }
        
        /// <summary>
        /// Click_Cancel_DebugInput_Window - Use 'Click_Cancel_DebugInput_WindowParams' to pass parameters into this method.
        /// </summary>
        public void Click_Cancel_DebugInput_Window()
        {
            #region Variable Declarations
            WpfButton cancelButton = this.MainStudioWindow.DebugInputDialog.CancelButton;
            #endregion

            // Verify that the 'Enabled' property of 'Cancel' button equals 'True'
            Assert.AreEqual(this.Click_Cancel_DebugInput_WindowParams.CancelButtonEnabled, cancelButton.Enabled, "CancelButton is not enabled after clicking RunDebug from Menu.");

            // Click 'Cancel' button
            Mouse.Click(cancelButton, new Point(26, 13));
        }
        
        /// <summary>
        /// Click_Clear_Toolbox_Filter_Clear_Button
        /// </summary>
        public void Click_Clear_Toolbox_Filter_Clear_Button()
        {
            #region Variable Declarations
            WpfButton clearFilterButton = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox.ClearFilterButton;
            #endregion

            // Click 'ClearSearchButton' button
            Mouse.Click(clearFilterButton, new Point(8, 7));
        }
        
        /// <summary>
        /// Click_Close_DB_Source_Wizard_Tab_Button
        /// </summary>
        public void Click_Close_DB_Source_Wizard_Tab_Button()
        {
            #region Variable Declarations
            WpfButton closeButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DBSourceWizardTab.CloseButton;
            #endregion

            // Click '' button
            Mouse.Click(closeButton, new Point(13, 4));
        }
        
        /// <summary>
        /// Click_Close_Deploy_Tab_Button - Use 'Click_Close_Deploy_Tab_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Close_Deploy_Tab_Button()
        {
            #region Variable Declarations
            WpfButton tabCloseButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DeployTab.TabCloseButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Click_Close_Deploy_Tab_ButtonParams.TabCloseButtonExists, tabCloseButton.Exists, "Settings close tab button does not exist.");

            // Click '' button
            Mouse.Click(tabCloseButton, new Point(16, 6));
        }
        
        /// <summary>
        /// Click_Close_FullScreen
        /// </summary>
        public void Click_Close_FullScreen()
        {
            #region Variable Declarations
            WpfHyperlink exitFullScreenF11Hyperlink = this.MainStudioWindow.ExitFullScreenF11Text.ExitFullScreenF11Hyperlink;
            #endregion

            // Click 'Exit Full Screen (F11)' link
            Mouse.Click(exitFullScreenF11Hyperlink, new Point(64, 5));
        }
        
        /// <summary>
        /// Click_Close_Plugin_Source_Wizard_Tab_Button
        /// </summary>
        public void Click_Close_Plugin_Source_Wizard_Tab_Button()
        {
            #region Variable Declarations
            WpfButton closeButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.PluginSourceWizardTab.CloseButton;
            #endregion

            // Click '' button
            Mouse.Click(closeButton, new Point(13, 4));
        }
        
        /// <summary>
        /// Click_Close_Server_Source_Wizard_Tab_Button
        /// </summary>
        public void Click_Close_Server_Source_Wizard_Tab_Button()
        {
            #region Variable Declarations
            WpfButton tabCloseButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.ServerSourceWizardTab.TabCloseButton;
            #endregion

            // Click '' button
            Mouse.Click(tabCloseButton, new Point(5, 5));
        }
        
        /// <summary>
        /// Click_Close_Settings_Tab_Button - Use 'Click_Close_Settings_Tab_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Close_Settings_Tab_Button()
        {
            #region Variable Declarations
            WpfButton closeButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.SettingsTab.CloseButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Click_Close_Settings_Tab_ButtonParams.CloseButtonExists, closeButton.Exists, "Settings close tab button does not exist.");

            // Click '' button
            Mouse.Click(closeButton, new Point(16, 6));
        }
        
        /// <summary>
        /// Click_Close_Studio_TopRibbon_Button
        /// </summary>
        public void Click_Close_Studio_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton closeStudioButton = this.MainStudioWindow.CloseStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(closeStudioButton, new Point(23, 1));
        }
        
        /// <summary>
        /// Click_Close_Tab_Context_Menu_Button
        /// </summary>
        public void Click_Close_Tab_Context_Menu_Button()
        {
            #region Variable Declarations
            WpfMenuItem close = this.MainStudioWindow.TabContextMenu.Close;
            #endregion

            // Click 'Close' menu item
            Mouse.Click(close, new Point(27, 13));
        }
        
        /// <summary>
        /// Click_Close_Web_Source_Wizard_Tab_Button
        /// </summary>
        public void Click_Close_Web_Source_Wizard_Tab_Button()
        {
            #region Variable Declarations
            WpfButton closeButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WebSourceWizardTab.CloseButton;
            #endregion

            // Click '' button
            Mouse.Click(closeButton, new Point(9, 6));
        }
        
        /// <summary>
        /// Click_Close_Workflow_Tab_Button - Use 'Click_Close_Workflow_Tab_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Close_Workflow_Tab_Button()
        {
            #region Variable Declarations
            WpfButton closeButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.CloseButton;
            #endregion

            // Verify that the 'Exists' property of 'closeBtn' custom control equals 'True'
            Assert.AreEqual(this.Click_Close_Workflow_Tab_ButtonParams.CloseButtonExists, closeButton.Exists, "Close tab button does not exist");

            // Click 'closeBtn' custom control
            Mouse.Click(closeButton, new Point(5, 5));
        }
        
        /// <summary>
        /// Click_CloseAllButThis_Tab_Context_Menu_Button
        /// </summary>
        public void Click_CloseAllButThis_Tab_Context_Menu_Button()
        {
            #region Variable Declarations
            WpfMenuItem uICloseAllButThisMenuItem = this.MainStudioWindow.TabContextMenu.UICloseAllButThisMenuItem;
            #endregion

            // Click 'Close All But This' menu item
            Mouse.Click(uICloseAllButThisMenuItem, new Point(44, 12));
        }
        
        /// <summary>
        /// Click_Connect_Control_InExplorer
        /// </summary>
        public void Click_Connect_Control_InExplorer()
        {
            #region Variable Declarations
            WpfButton serverListComboBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ConnectControl.ServerComboBox.ServerListComboBox;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(serverListComboBox, new Point(217, 8));
        }
        
        /// <summary>
        /// Click_Create_New_Tests - Use 'Click_Create_New_TestsParams' to pass parameters into this method.
        /// </summary>
        public void Click_Create_New_Tests()
        {
            #region Variable Declarations
            WpfButton createTestButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.ServiceTestView.TestsListboxList.CreateTest.CreateTestButton;
            WpfListItem test1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.ServiceTestView.TestsListboxList.Test1;
            WpfText testNameText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.ServiceTestView.TestNameText;
            WpfCheckBox testEnabledSelector = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.ServiceTestView.TestsListboxList.Test1.TestEnabledSelector;
            WpfButton createTestButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.WorksurfaceContext.ServiceTestView.TestsListboxList.CreateTest.CreateTestButton;
            WpfListItem test1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.WorksurfaceContext.ServiceTestView.TestsListboxList.Test1;
            WpfButton duplicateButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.WorksurfaceContext.ServiceTestView.DuplicateButton;
            WpfText testNameText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.WorksurfaceContext.ServiceTestView.TestNameText;
            WpfCheckBox testEnabledSelector = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.WorksurfaceContext.ServiceTestView.TestsListboxList.Test1.TestEnabledSelector;
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.WorksurfaceContext.ServiceTestView.TestInputsTable.Row1.Cell.IntellisenseComboBox.Textbox;
            #endregion

            // Click 'Create a new test' button
            Mouse.Click(createTestButton, new Point(158, 10));

            // Verify that the 'Exists' property of 'Warewolf.Studio.ViewModels.ServiceTestModel' list item equals 'True'
            Assert.AreEqual(this.Click_Create_New_TestsParams.Test1Exists, test1.Exists, "Test1 does not exist after clicking Create New Test");

            // Verify that the 'Exists' property of 'Test Name' label equals 'True'
            Assert.AreEqual(this.Click_Create_New_TestsParams.TestNameTextExists, testNameText.Exists, "Test1 Name textbox does not exist after clicking Create New Test");

            // Verify that the 'Checked' property of 'Select or De-Select to run the test' check box equals 'True'
            Assert.AreEqual(this.Click_Create_New_TestsParams.TestEnabledSelectorChecked, testEnabledSelector.Checked, "Test 1 is disabled after clicking Create new test from context menu");
            Assert.AreEqual(this.Click_Create_New_TestsParams.TestEnabledSelectorChecked, testEnabledSelector.Checked, "Test 1 is diabled after clicking Create new test from context menu");

            // Verify that the 'Exists' property of 'Text' text box equals 'True'
            Assert.AreEqual(this.Click_Create_New_TestsParams.TextboxExists, textbox.Exists, "Row 1 input value textbox does not exist on workflow tests tab.");
        }
        
        /// <summary>
        /// Click_Debug_Output_Assign_Cell - Use 'Click_Debug_Output_Assign_CellParams' to pass parameters into this method.
        /// </summary>
        public void Click_Debug_Output_Assign_Cell()
        {
            #region Variable Declarations
            WpfText variableTextbox = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.Step1.VariableTextbox;
            WpfButton assign1Button = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.Step1.Assign1Button;
            WpfCustom multiAssign = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign;
            #endregion

            // Verify that the 'DisplayText' property of '[[SomeVariable]]' label equals '[[SomeVariable]]'
            Assert.AreEqual(this.Click_Debug_Output_Assign_CellParams.VariableTextboxDisplayText, variableTextbox.DisplayText, "Wrong variable name in debug output");

            // Click 'Assign (1)' button
            Mouse.Click(assign1Button, new Point(21, 9));

            // Verify that the 'ItemStatus' property of 'DsfMultiAssignActivity' custom control equals 'IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid '
            Assert.AreEqual(this.Click_Debug_Output_Assign_CellParams.MultiAssignItemStatus, multiAssign.ItemStatus, "Multiassign small view is not selected.");
        }
        
        /// <summary>
        /// Click_Debug_Output_BaseConvert_Cell - Use 'Click_Debug_Output_BaseConvert_CellParams' to pass parameters into this method.
        /// </summary>
        public void Click_Debug_Output_BaseConvert_Cell()
        {
            #region Variable Declarations
            WpfButton baseConversion1Button = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.Step1.BaseConversion1Button;
            WpfCustom baseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert;
            #endregion

            // Click 'Base Conversion (1)' button
            Mouse.Click(baseConversion1Button, new Point(33, 7));

            // Verify that the 'ItemStatus' property of 'DsfBaseConvertActivity' custom control equals 'IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid '
            Assert.AreEqual(this.Click_Debug_Output_BaseConvert_CellParams.BaseConvertItemStatus, baseConvert.ItemStatus, "Base conversion small view is not selected.");
        }
        
        /// <summary>
        /// Click_Debug_Output_Calculate_Cell - Use 'Click_Debug_Output_Calculate_CellParams' to pass parameters into this method.
        /// </summary>
        public void Click_Debug_Output_Calculate_Cell()
        {
            #region Variable Declarations
            WpfButton calculateButton = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.Step1.CalculateButton;
            WpfCustom calculate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate;
            #endregion

            // Click 'Calculate' button
            Mouse.Click(calculateButton, new Point(24, 10));

            // Verify that the 'ItemStatus' property of 'DsfCalculateActivity' custom control equals 'IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid '
            Assert.AreEqual(this.Click_Debug_Output_Calculate_CellParams.CalculateItemStatus, calculate.ItemStatus, "Calculate tool small view is not selected.");
        }
        
        /// <summary>
        /// Click_Debug_Output_Workflow1_Name - Use 'Click_Debug_Output_Workflow1_NameParams' to pass parameters into this method.
        /// </summary>
        public void Click_Debug_Output_Workflow1_Name()
        {
            #region Variable Declarations
            WpfButton workflow1Button = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.ServiceTreeItem.Workflow1Button;
            WpfText workflow1ciremoteText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.Workflow1ciremoteText;
            #endregion

            // Click 'workflow1' button
            Mouse.Click(workflow1Button, new Point(24, 8));

            // Verify that the 'DisplayText' property of 'workflow1 - ci-remote' label equals 'workflow1 - ci-remote'
            Assert.AreEqual(this.Click_Debug_Output_Workflow1_NameParams.Workflow1ciremoteTextDisplayText, workflow1ciremoteText.DisplayText, "Workflow1 remote workflow tab is not open.");
        }
        
        /// <summary>
        /// Click_DebugInput_Cancel_Button
        /// </summary>
        public void Click_DebugInput_Cancel_Button()
        {
            #region Variable Declarations
            WpfButton cancelButton = this.MainStudioWindow.DebugInputDialog.CancelButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(cancelButton, new Point(34, 10));
        }
        
        /// <summary>
        /// Click_DebugInput_Debug_Button - Use 'Click_DebugInput_Debug_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_DebugInput_Debug_Button()
        {
            #region Variable Declarations
            WpfButton debugF6Button = this.MainStudioWindow.DebugInputDialog.DebugF6Button;
            WpfCustom debugOutput = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput;
            WpfButton settingsButton = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.SettingsButton;
            WpfButton expandCollapseButton = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.ExpandCollapseButton;
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.SearchTextBox;
            WpfTree debugOutputTree = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree;
            #endregion

            // Verify that the 'Enabled' property of 'Debug (F6)' button equals 'True'
            Assert.AreEqual(this.Click_DebugInput_Debug_ButtonParams.DebugF6ButtonEnabled, debugF6Button.Enabled, "DebugF6Button is not enabled after clicking RunDebug from Menu.");

            // Click 'Debug (F6)' button
            Mouse.Click(debugF6Button, new Point(34, 10));

            // Verify that the 'Exists' property of 'OUTPUT' custom control equals 'True'
            Assert.AreEqual(this.Click_DebugInput_Debug_ButtonParams.DebugOutputExists, debugOutput.Exists, "Debug output does not exist");

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Click_DebugInput_Debug_ButtonParams.SettingsButtonExists, settingsButton.Exists, "Debug output settings button does not exist");

            // Verify that the 'Exists' property of '+' button equals 'True'
            Assert.AreEqual(this.Click_DebugInput_Debug_ButtonParams.ExpandCollapseButtonExists, expandCollapseButton.Exists, "Debug output expand collapse button does not exist");

            // Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
            Assert.AreEqual(this.Click_DebugInput_Debug_ButtonParams.SearchTextBoxExists, searchTextBox.Exists, "Debug output filter textbox does not exist");

            // Verify that the 'Exists' property of 'DebugOutputTree' tree equals 'True'
            Assert.AreEqual(this.Click_DebugInput_Debug_ButtonParams.DebugOutputTreeExists, debugOutputTree.Exists, "Debug output results tree does not exist");

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Click_DebugInput_Debug_ButtonParams.SettingsButtonExists1, settingsButton.Exists, "Debug output settings button does not exist");
        }
        
        /// <summary>
        /// Click_DebugInput_ViewInBrowser_Button - Use 'Click_DebugInput_ViewInBrowser_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_DebugInput_ViewInBrowser_Button()
        {
            #region Variable Declarations
            WpfButton viewInBrowserF7Button = this.MainStudioWindow.DebugInputDialog.ViewInBrowserF7Button;
            #endregion

            // Verify that the 'Enabled' property of 'View In Browser (F7)' button equals 'True'
            Assert.AreEqual(this.Click_DebugInput_ViewInBrowser_ButtonParams.ViewInBrowserF7ButtonEnabled, viewInBrowserF7Button.Enabled, "ViewInBrowserF7Button is not enabled after clicking RunDebug from Menu.");

            // Click 'View In Browser (F7)' button
            Mouse.Click(viewInBrowserF7Button, new Point(82, 14));
        }
        
        /// <summary>
        /// Click_Decision_Dialog_Done_Button - Use 'Click_Decision_Dialog_Done_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Decision_Dialog_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.DecisionOrSwitchDialog.DoneButton;
            WpfCustom decision = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Decision;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(10, 14));

            // Verify that the 'Exists' property of 'FlowDecision' custom control equals 'True'
            Assert.AreEqual(this.Click_Decision_Dialog_Done_ButtonParams.DecisionExists, decision.Exists, "Decision on the design surface does not exist");

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Click_Decision_Dialog_Done_ButtonParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Click_Deploy_Tab_Destination_Server_Combobox - Use 'Click_Deploy_Tab_Destination_Server_ComboboxParams' to pass parameters into this method.
        /// </summary>
        public void Click_Deploy_Tab_Destination_Server_Combobox()
        {
            #region Variable Declarations
            WpfButton toggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DeployTab.WorkSurfaceContext.DestinationServerConectControl.Combobox.ToggleButton;
            WpfCustom comboboxListItemAsNewRemoteServer = this.MainStudioWindow.ComboboxListItemAsNewRemoteServer;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleButton, new Point(230, 9));

            // Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
            Assert.AreEqual(this.Click_Deploy_Tab_Destination_Server_ComboboxParams.ComboboxListItemAsNewRemoteServerExists, comboboxListItemAsNewRemoteServer.Exists, "New Remote Server... option does not exist in Destination server combobox.");
        }
        
        /// <summary>
        /// Click_Deploy_Tab_Destination_Server_Connect_Button
        /// </summary>
        public void Click_Deploy_Tab_Destination_Server_Connect_Button()
        {
            #region Variable Declarations
            WpfButton connectDestinationButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DeployTab.WorkSurfaceContext.DestinationServerConectControl.ConnectDestinationButton;
            #endregion

            // Click 'UI_DestinationServerConnectbtn_AutoID' button
            Mouse.Click(connectDestinationButton, new Point(13, 12));
        }
        
        /// <summary>
        /// Click_Deploy_Tab_Destination_Server_New_Remote_Server_Item
        /// </summary>
        public void Click_Deploy_Tab_Destination_Server_New_Remote_Server_Item()
        {
            #region Variable Declarations
            WpfCustom comboboxListItemAsNewRemoteServer = this.MainStudioWindow.ComboboxListItemAsNewRemoteServer;
            #endregion

            // Click 'New Remote Server...' custom control
            Mouse.Click(comboboxListItemAsNewRemoteServer, new Point(223, 10));
        }
        
        /// <summary>
        /// Click_Deploy_Tab_Source_Server_Combobox - Use 'Click_Deploy_Tab_Source_Server_ComboboxParams' to pass parameters into this method.
        /// </summary>
        public void Click_Deploy_Tab_Source_Server_Combobox()
        {
            #region Variable Declarations
            WpfButton toggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DeployTab.WorkSurfaceContext.SourceServerConectControl.Combobox.ToggleButton;
            WpfCustom comboboxListItemAsNewRemoteServer = this.MainStudioWindow.ComboboxListItemAsNewRemoteServer;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleButton, new Point(230, 9));

            // Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
            Assert.AreEqual(this.Click_Deploy_Tab_Source_Server_ComboboxParams.ComboboxListItemAsNewRemoteServerExists, comboboxListItemAsNewRemoteServer.Exists, "New Remote Server... option does not exist in Source server combobox.");
        }
        
        /// <summary>
        /// Click_Deploy_Tab_WarewolfStore_Item
        /// </summary>
        public void Click_Deploy_Tab_WarewolfStore_Item()
        {
            #region Variable Declarations
            WpfCustom comboboxListItemAsWarewolfStore = this.MainStudioWindow.ComboboxListItemAsWarewolfStore;
            #endregion

            // Click 'WarewolfStore' custom control
            Mouse.Click(comboboxListItemAsWarewolfStore, new Point(214, 9));
        }
        
        /// <summary>
        /// Click_DotNet_DLL_Large_View_Done_Button - Use 'Click_DotNet_DLL_Large_View_Done_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_DotNet_DLL_Large_View_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.DoneButton;
            WpfCustom smallView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.SmallView;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(33, 11));

            // Verify that the 'Exists' property of 'SmallViewContent' custom control equals 'True'
            Assert.AreEqual(this.Click_DotNet_DLL_Large_View_Done_ButtonParams.SmallViewExists, smallView.Exists, "DotNet DLL small view does not exist after clicking done on large view.");
        }
        
        /// <summary>
        /// Click_DotNet_DLL_Large_View_Generate_Outputs - Use 'Click_DotNet_DLL_Large_View_Generate_OutputsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Click_DotNet_DLL_Large_View_Generate_Outputs()
        {
            #region Variable Declarations
            WpfButton generateOutputsButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.GenerateOutputsButton;
            WpfButton testButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.TestButton;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.DoneButton;
            #endregion

            // Click 'Generate Outputs' button
            Mouse.Click(generateOutputsButton, new Point(7, 7));

            // Verify that the 'Exists' property of 'Test' button equals 'True'
            Assert.AreEqual(this.Click_DotNet_DLL_Large_View_Generate_OutputsExpectedValues.TestButtonExists, testButton.Exists, "DotNet DLL generate outputs test button does not exist.");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Click_DotNet_DLL_Large_View_Generate_OutputsExpectedValues.DoneButtonExists, doneButton.Exists, "DotNet DLL generate outputs done button does not exist.");
        }
        
        /// <summary>
        /// Click_DotNet_DLL_Large_View_Test_Inputs_Button
        /// </summary>
        public void Click_DotNet_DLL_Large_View_Test_Inputs_Button()
        {
            #region Variable Declarations
            WpfButton testButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.TestButton;
            #endregion

            // Click 'Test' button
            Mouse.Click(testButton, new Point(21, 11));
        }
        
        /// <summary>
        /// Click_DotNet_DLL_Large_View_Test_Inputs_Done_Button
        /// </summary>
        public void Click_DotNet_DLL_Large_View_Test_Inputs_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_ExpandAndStepIn_NestedWorkflow - Use 'Click_ExpandAndStepIn_NestedWorkflowParams' to pass parameters into this method.
        /// </summary>
        public void Click_ExpandAndStepIn_NestedWorkflow()
        {
            #region Variable Declarations
            WpfTreeItem subWorkflow = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.SubWorkflow;
            #endregion

            // Expand 'Hello World' tree item
            subWorkflow.Expanded = this.Click_ExpandAndStepIn_NestedWorkflowParams.SubWorkflowExpanded;
        }
        
        /// <summary>
        /// Click_Explorer_Filter_Clear_Button - Use 'Click_Explorer_Filter_Clear_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Explorer_Filter_Clear_Button()
        {
            #region Variable Declarations
            WpfButton clearFilterButton = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.SearchTextBox.ClearFilterButton;
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.SearchTextBox;
            #endregion

            // Click 'ClearSearchButton' button
            Mouse.Click(clearFilterButton, new Point(6, 8));

            // Verify that the 'Text' property of 'SearchTextBox' text box equals ''
            Assert.AreEqual(this.Click_Explorer_Filter_Clear_ButtonParams.SearchTextBoxText, searchTextBox.Text, "Explorer Filter Textbox text is not blank after clicking the clear button.");
        }
        
        /// <summary>
        /// Click_Explorer_Refresh_Button
        /// </summary>
        public void Click_Explorer_Refresh_Button()
        {
            #region Variable Declarations
            WpfButton explorerRefreshButton = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerRefreshButton;
            #endregion

            // Click '' button
            Mouse.Click(explorerRefreshButton, new Point(10, 10));
        }
        
        /// <summary>
        /// Click_Explorer_RemoteServer_Connect_Button - Use 'Click_Explorer_RemoteServer_Connect_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Explorer_RemoteServer_Connect_Button()
        {
            #region Variable Declarations
            WpfButton connectServerButton = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ConnectControl.ConnectServerButton;
            WpfTreeItem firstRemoteServer = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.FirstRemoteServer;
            #endregion

            // Click 'UI_ConnectServerBtn_AutoID' button
            Mouse.Click(connectServerButton, new Point(11, 10));

            // Wait for 2 seconds for user delay between actions; Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
            Playback.Wait(2000);
            Assert.AreEqual(this.Click_Explorer_RemoteServer_Connect_ButtonParams.FirstRemoteServerExists, firstRemoteServer.Exists, "No remote servers in explorer.");
        }
        
        /// <summary>
        /// Click_FullScreen_TopRibbon_Button
        /// </summary>
        public void Click_FullScreen_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton maximizeRestoreStudioButton = this.MainStudioWindow.MaximizeRestoreStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(maximizeRestoreStudioButton, new Point(12, 9));
        }
        
        /// <summary>
        /// Click_GET_Web_Large_View_Done_Button - Use 'Click_GET_Web_Large_View_Done_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_GET_Web_Large_View_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.DoneButton;
            WpfCustom smallView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.SmallView;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(33, 11));

            // Verify that the 'Exists' property of 'SmallViewContent' custom control equals 'True'
            Assert.AreEqual(this.Click_GET_Web_Large_View_Done_ButtonParams.SmallViewExists, smallView.Exists, "Web GET small view does not exist after clicking large view done button.");
        }
        
        /// <summary>
        /// Click_GET_Web_Large_View_Generate_Outputs - Use 'Click_GET_Web_Large_View_Generate_OutputsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Click_GET_Web_Large_View_Generate_Outputs()
        {
            #region Variable Declarations
            WpfButton generateOutputsButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.LargeView.GenerateOutputsButton;
            WpfButton testButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.LargeView.TestButton;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.LargeView.DoneButton;
            #endregion

            // Click 'Generate Outputs' button
            Mouse.Click(generateOutputsButton, new Point(7, 7));

            // Wait for 1 seconds for user delay between actions; Verify that the 'Exists' property of 'Test' button equals 'True'
            Playback.Wait(500);
            Assert.AreEqual(this.Click_GET_Web_Large_View_Generate_OutputsExpectedValues.TestButtonExists, testButton.Exists, "Web GET large view generate outputs test button does not exist.");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Click_GET_Web_Large_View_Generate_OutputsExpectedValues.DoneButtonExists, doneButton.Exists, "Web GET tool large view generate inputs done button does not exist.");
        }
        
        /// <summary>
        /// Click_GET_Web_Large_View_Test_Inputs_Button
        /// </summary>
        public void Click_GET_Web_Large_View_Test_Inputs_Button()
        {
            #region Variable Declarations
            WpfButton testButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.LargeView.TestButton;
            #endregion

            // Click 'Test' button
            Mouse.Click(testButton, new Point(21, 11));
        }
        
        /// <summary>
        /// Click_GET_Web_Large_View_Test_Inputs_Done_Button
        /// </summary>
        public void Click_GET_Web_Large_View_Test_Inputs_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.LargeView.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_Knowledge_Ribbon_Button
        /// </summary>
        public void Click_Knowledge_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton knowledgeBaseButton = this.MainStudioWindow.SideMenuBar.KnowledgeBaseButton;
            #endregion

            // Click 'Knowledge Base' button
            Mouse.Click(knowledgeBaseButton, new Point(4, 8));
        }
        
        /// <summary>
        /// Click_Lock_Ribbon_Button
        /// </summary>
        public void Click_Lock_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton lockStudioButton = this.MainStudioWindow.LockStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(lockStudioButton, new Point(14, 5));
        }
        
        /// <summary>
        /// Click_Maximize_Restore_TopRibbon_Button
        /// </summary>
        public void Click_Maximize_Restore_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton maximizeStudioButton = this.MainStudioWindow.MaximizeStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(maximizeStudioButton, new Point(9, 11));
        }
        
        /// <summary>
        /// Click_Maximize_TopRibbon_Button
        /// </summary>
        public void Click_Maximize_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton maximizeStudioButton = this.MainStudioWindow.MaximizeStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(maximizeStudioButton, new Point(14, 14));
        }
        
        /// <summary>
        /// Click_MessageBox_No
        /// </summary>
        public void Click_MessageBox_No()
        {
            #region Variable Declarations
            WpfButton noButton = this.MessageBoxWindow.NoButton;
            #endregion

            // Click 'No' button
            Mouse.Click(noButton, new Point(32, 5));
        }
        
        /// <summary>
        /// Click_MessageBox_OK
        /// </summary>
        public void Click_MessageBox_OK()
        {
            #region Variable Declarations
            WpfButton oKButton = this.MessageBoxWindow.OKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(oKButton, new Point(35, 11));
        }
        
        /// <summary>
        /// Click_MessageBox_Yes - Use 'Click_MessageBox_YesParams' to pass parameters into this method.
        /// </summary>
        public void Click_MessageBox_Yes()
        {
            #region Variable Declarations
            WpfButton yesButton = this.MessageBoxWindow.YesButton;
            WpfWindow messageBoxWindow = this.MessageBoxWindow;
            #endregion

            // Click 'Yes' button
            Mouse.Click(yesButton, new Point(32, 5));

            // Verify that the 'Exists' property of 'WarewolfMessageBox' window equals 'False'
            Assert.AreEqual(this.Click_MessageBox_YesParams.MessageBoxWindowExists, messageBoxWindow.Exists, "Message box does exist");
        }
        
        /// <summary>
        /// Click_Minimize_TopRibbon_Button
        /// </summary>
        public void Click_Minimize_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton minimizeStudioButton = this.MainStudioWindow.MinimizeStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(minimizeStudioButton, new Point(6, 14));
        }
        
        /// <summary>
        /// Click_Nested_Workflow_Name
        /// </summary>
        public void Click_Nested_Workflow_Name()
        {
            #region Variable Declarations
            WpfButton uIHelloWorldButton = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.SubWorkflow.UIHelloWorldTreeItem1.UIHelloWorldButton;
            #endregion

            // Click 'Hello World' button
            Mouse.Click(uIHelloWorldButton, new Point(37, 10));
        }
        
        /// <summary>
        /// Click_New_Database_Source_Ribbon_Button
        /// </summary>
        public void Click_New_Database_Source_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton databaseSourceButton = this.MainStudioWindow.SideMenuBar.DatabaseSourceButton;
            #endregion

            // Click 'Create a new database source' button
            Mouse.Click(databaseSourceButton, new Point(16, 15));
        }
        
        /// <summary>
        /// Click_New_Web_Source_Test_Connection_Button - Use 'Click_New_Web_Source_Test_Connection_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_New_Web_Source_Test_Connection_Button()
        {
            #region Variable Declarations
            WpfButton testConnectionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WebSourceWizardTab.WorkSurfaceContext.TestConnectionButton;
            WpfButton saveButton = this.MainStudioWindow.SideMenuBar.SaveButton;
            #endregion

            // Click 'Test Connection' button
            Mouse.Click(testConnectionButton, new Point(52, 14));

            // Verify that the 'Enabled' property of 'Save this tab' button equals 'True'
            Assert.AreEqual(this.Click_New_Web_Source_Test_Connection_ButtonParams.SaveButtonEnabled, saveButton.Enabled, "Save ribbon button is not enabled after testing a valid web source.");
        }
        
        /// <summary>
        /// Click_NewPluginSource_Ribbon_Button - Use 'Click_NewPluginSource_Ribbon_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_NewPluginSource_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton pluginSourceButton = this.MainStudioWindow.SideMenuBar.PluginSourceButton;
            WpfTree tree = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.PluginSourceWizardTab.WorkSurfaceContext.NewPluginSourceWizard.ScrollViewer.Tree;
            WpfEdit assemblyNameTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.PluginSourceWizardTab.WorkSurfaceContext.AssemblyNameTextbox;
            #endregion

            // Click 'Create a new plugin source' button
            Mouse.Click(pluginSourceButton, new Point(22, 13));

            // Wait for 1 seconds for user delay between actions; Verify that the 'Exists' property of 'ExplorerTree' tree equals 'True'
            Playback.Wait(1000);
            Assert.AreEqual(this.Click_NewPluginSource_Ribbon_ButtonParams.TreeExists, tree.Exists, "Select assembly tree does not exist in new plugin source wizard tab.");

            // Verify that the 'Exists' property of 'AssemblyNameTextBox' text box equals 'True'
            Assert.AreEqual(this.Click_NewPluginSource_Ribbon_ButtonParams.AssemblyNameTextboxExists, assemblyNameTextbox.Exists, "Assembly textbox does not exist in new plugin source wizard tab.");
        }
        
        /// <summary>
        /// Click_NewVersion_button - Use 'Click_NewVersion_buttonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Click_NewVersion_button()
        {
            #region Variable Declarations
            WpfButton newVersionButton = this.MainStudioWindow.SideMenuBar.NewVersionButton;
            #endregion

            // Verify that the 'Exists' property of 'VersionButton' button equals 'True'
            Assert.AreEqual(this.Click_NewVersion_buttonExpectedValues.NewVersionButtonExists, newVersionButton.Exists, "New version available button does not exist");

            // Verify that the 'Enabled' property of 'VersionButton' button equals 'True'
            Assert.AreEqual(this.Click_NewVersion_buttonExpectedValues.NewVersionButtonEnabled, newVersionButton.Enabled, "New version available button is disabled");

            // Click 'VersionButton' button
            Mouse.Click(newVersionButton, new Point(17, 9));
        }
        
        /// <summary>
        /// Click_Output_OnRecordset_InVariableList - Use 'Click_Output_OnRecordset_InVariableListParams' to pass parameters into this method.
        /// </summary>
        public void Click_Output_OnRecordset_InVariableList()
        {
            #region Variable Declarations
            WpfCheckBox isOutputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.RecordsetDataItem.List.ListItem.Table.DataItem1.OutputCell.IsOutputCheckbox;
            #endregion

            // Select 'UI_IsOutputCheckbox_AutoID' check box
            isOutputCheckbox.Checked = this.Click_Output_OnRecordset_InVariableListParams.IsOutputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_Output_OnVariable_InVariableList - Use 'Click_Output_OnVariable_InVariableListParams' to pass parameters into this method.
        /// </summary>
        public void Click_Output_OnVariable_InVariableList()
        {
            #region Variable Declarations
            WpfCheckBox isOutputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.VariableDataItem.List.ListItem.Table.DataItem1.OutputCell.IsOutputCheckbox;
            #endregion

            // Select 'UI_IsOutputCheckbox_AutoID' check box
            isOutputCheckbox.Checked = this.Click_Output_OnVariable_InVariableListParams.IsOutputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_Pin_Toggle_DebugOutput
        /// </summary>
        public void Click_Pin_Toggle_DebugOutput()
        {
            #region Variable Declarations
            WpfButton debugOutputUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(debugOutputUnpinBtn, new Point(11, 10));
        }
        
        /// <summary>
        /// Click_Pin_Toggle_Documentor
        /// </summary>
        public void Click_Pin_Toggle_Documentor()
        {
            #region Variable Declarations
            WpfButton documentorUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.Help.DocumentorUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(documentorUnpinBtn, new Point(2, 11));
        }
        
        /// <summary>
        /// Click_Pin_Toggle_Explorer
        /// </summary>
        public void Click_Pin_Toggle_Explorer()
        {
            #region Variable Declarations
            WpfButton explorerUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(explorerUnpinBtn, new Point(12, 9));
        }
        
        /// <summary>
        /// Click_Pin_Toggle_Toolbox
        /// </summary>
        public void Click_Pin_Toggle_Toolbox()
        {
            #region Variable Declarations
            WpfButton toolUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(toolUnpinBtn, new Point(10, 8));
        }
        
        /// <summary>
        /// Click_Pin_Toggle_VariableList
        /// </summary>
        public void Click_Pin_Toggle_VariableList()
        {
            #region Variable Declarations
            WpfButton variableUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariableUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(variableUnpinBtn, new Point(10, 14));
        }
        
        /// <summary>
        /// Click_Position_Button
        /// </summary>
        public void Click_Position_Button()
        {
            #region Variable Declarations
            WpfMenuItem positionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.FilesMenu.PositionButton;
            #endregion

            // Click 'PART_FilesMenuItem' menu item
            Mouse.Click(positionButton, new Point(8, 7));
        }
        
        /// <summary>
        /// Click_RunDebug_button - Use 'Click_RunDebug_buttonParams' to pass parameters into this method.
        /// </summary>
        public void Click_RunDebug_button()
        {
            #region Variable Declarations
            WpfButton runAndDebugButton = this.MainStudioWindow.SideMenuBar.RunAndDebugButton;
            WpfWindow debugInputDialog = this.MainStudioWindow.DebugInputDialog;
            WpfButton cancelButton = this.MainStudioWindow.DebugInputDialog.CancelButton;
            WpfCheckBox rememberDebugInputCheckBox = this.MainStudioWindow.DebugInputDialog.RememberDebugInputCheckBox;
            WpfTabPage inputDataTab = this.MainStudioWindow.DebugInputDialog.TabItemsTabList.InputDataTab;
            WpfTabPage xMLTab = this.MainStudioWindow.DebugInputDialog.TabItemsTabList.XMLTab;
            WpfTabPage jSONTab = this.MainStudioWindow.DebugInputDialog.TabItemsTabList.JSONTab;
            #endregion

            // Click 'Run and debug your workflow service' button
            Mouse.Click(runAndDebugButton, new Point(6, 10));

            // Verify that the 'Exists' property of 'Wpf' window equals 'True'
            Assert.AreEqual(this.Click_RunDebug_buttonParams.DebugInputDialogExists, debugInputDialog.Exists, "RunDebug window does not exist");

            // Verify that the 'Enabled' property of 'Cancel' button equals 'True'
            Assert.AreEqual(this.Click_RunDebug_buttonParams.CancelButtonEnabled, cancelButton.Enabled, "CancelButton is not enabled after clicking RunDebug from Menu.");

            // Verify that the 'Enabled' property of 'Remember Debug Inputs' check box equals 'True'
            Assert.AreEqual(this.Click_RunDebug_buttonParams.RememberDebugInputCheckBoxEnabled, rememberDebugInputCheckBox.Enabled, "RememberDebugInputCheckBox is not enabled after clicking RunDebug from Menu.");

            // Verify that the 'Enabled' property of 'Input Data' tab equals 'True'
            Assert.AreEqual(this.Click_RunDebug_buttonParams.InputDataTabEnabled, inputDataTab.Enabled, "InputDataTab is not enabled after clicking RunDebug from Menu.");

            // Verify that the 'Checked' property of 'Remember Debug Inputs' check box equals 'True'
            Assert.AreEqual(this.Click_RunDebug_buttonParams.RememberDebugInputCheckBoxChecked, rememberDebugInputCheckBox.Checked, "RememberDebugInputCheckBox is not Checked after clicking RunDebug from Menu.");

            // Verify that the 'Exists' property of 'XML' tab equals 'True'
            Assert.AreEqual(this.Click_RunDebug_buttonParams.XMLTabExists, xMLTab.Exists, "XMLTab does not exist after clicking RunDebug from Menu.");

            // Verify that the 'Exists' property of 'JSON' tab equals 'True'
            Assert.AreEqual(this.Click_RunDebug_buttonParams.JSONTabExists, jSONTab.Exists, "JSONTab does not exist after clicking RunDebug from Menu.");
        }
        
        /// <summary>
        /// Click_Save_Ribbon_Button_to_Open_Save_Dialog - Use 'Click_Save_Ribbon_Button_to_Open_Save_DialogParams' to pass parameters into this method.
        /// </summary>
        public void Click_Save_Ribbon_Button_to_Open_Save_Dialog()
        {
            #region Variable Declarations
            WpfButton saveButton = this.MainStudioWindow.SideMenuBar.SaveButton;
            WpfButton cancelButton = this.SaveDialogWindow.CancelButton;
            WpfText errorLabel = this.SaveDialogWindow.ErrorLabel;
            WpfTree explorerTree = this.SaveDialogWindow.ExplorerView.ExplorerTree;
            WpfCustom explorerView = this.SaveDialogWindow.ExplorerView;
            WpfEdit searchTextBox = this.SaveDialogWindow.ExplorerView.SearchTextBox;
            WpfText nameLabel = this.SaveDialogWindow.NameLabel;
            WpfButton refreshButton = this.SaveDialogWindow.ExplorerView.RefreshButton;
            WpfButton saveButton1 = this.SaveDialogWindow.SaveButton;
            WpfWindow saveDialogWindow = this.SaveDialogWindow;
            WpfEdit serviceNameTextBox = this.SaveDialogWindow.ServiceNameTextBox;
            #endregion

            // Verify that the 'Exists' property of 'Save this tab' button equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.SaveButtonExists, saveButton.Exists, "Save ribbon button does not exist");

            // Click 'Save this tab' button
            Mouse.Click(saveButton, new Point(10, 5));

            // Wait for 2 seconds for user delay between actions; Verify that the 'Exists' property of 'Cancel' button equals 'True'
            Playback.Wait(2000);
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.CancelButtonExists, cancelButton.Exists, "Save dialog cancel button does not exist");

            // Verify that the 'Exists' property of ''Name' cannot be empty.' label equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.ErrorLabelExists, errorLabel.Exists, "Save dialog error label does not exist");

            // Verify that the 'Exists' property of 'ExplorerTree' tree equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.ExplorerTreeExists, explorerTree.Exists, "Save dialog explorer tree does not exist");

            // Verify that the 'Exists' property of 'ExplorerView' custom control equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.ExplorerViewExists, explorerView.Exists, "Save dialog explorer view does not exist");

            // Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.SearchTextBoxExists, searchTextBox.Exists, "Save dialog filter textbox does not exist");

            // Verify that the 'Exists' property of 'Name:' label equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.NameLabelExists, nameLabel.Exists, "Save dialog name label does not exist");

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.RefreshButtonExists, refreshButton.Exists, "Save dialog refresh button does not exist");

            // Verify that the 'Exists' property of 'Save' button equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.SaveButtonExists1, saveButton1.Exists, "Save dialog save button does not exist");

            // Verify that the 'Exists' property of 'SaveDialogView' window equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.SaveDialogWindowExists, saveDialogWindow.Exists, "Save dialog window does not exist");

            // Verify that the 'Exists' property of 'ServiceNameTextBox' text box equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.ServiceNameTextBoxExists, serviceNameTextBox.Exists, "Save dialog service name textbox does not exist");

            // Verify that the 'Exists' property of 'SaveDialogView' window equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.SaveDialogWindowExists1, saveDialogWindow.Exists, "Save dialog window does not exist");

            // Verify that the 'Exists' property of 'ServiceNameTextBox' text box equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.ServiceNameTextBoxExists1, serviceNameTextBox.Exists, "Save dialog service name textbox does not exist");
        }
        
        /// <summary>
        /// Click_Save_Ribbon_Button_With_No_Save_Dialog - Use 'Click_Save_Ribbon_Button_With_No_Save_DialogParams' to pass parameters into this method.
        /// </summary>
        public void Click_Save_Ribbon_Button_With_No_Save_Dialog()
        {
            #region Variable Declarations
            WpfButton saveButton = this.MainStudioWindow.SideMenuBar.SaveButton;
            #endregion

            // Verify that the 'Exists' property of 'Save this tab' button equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_With_No_Save_DialogParams.SaveButtonExists, saveButton.Exists, "Save ribbon button does not exist");

            // Click 'Save this tab' button
            Mouse.Click(saveButton, new Point(10, 5));

            // Wait for 2 seconds for user delay between actions; Verify that the 'Enabled' property of 'Save this tab' button equals 'False'
            Playback.Wait(2000);
            Assert.AreEqual(this.Click_Save_Ribbon_Button_With_No_Save_DialogParams.SaveButtonEnabled, saveButton.Enabled, "Save ribbon button is still enabled after clicking it.");
        }
        
        /// <summary>
        /// Click_SaveDialog_CancelButton
        /// </summary>
        public void Click_SaveDialog_CancelButton()
        {
            #region Variable Declarations
            WpfButton cancelButton = this.SaveDialogWindow.CancelButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(cancelButton, new Point(6, 7));
        }
        
        /// <summary>
        /// Click_Scheduler_Create_New_Task_Ribbon_Button
        /// </summary>
        public void Click_Scheduler_Create_New_Task_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton newTaskButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.SchedulerTab.SchedulesList.SchedulerListItem.CreateTaskButton.NewTaskButton;
            #endregion

            // Click first button next to '' button
            Mouse.Click(newTaskButton, new Point(151, 13));
        }
        
        /// <summary>
        /// Click_Scheduler_Delete_Task
        /// </summary>
        public void Click_Scheduler_Delete_Task()
        {
            #region Variable Declarations
            WpfButton deleteTaskButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.SchedulerTab.SchedulesList.DeleteTaskButton;
            #endregion

            // Click '...' button
            Mouse.Click(deleteTaskButton, new Point(3, 17));
        }
        
        /// <summary>
        /// Click_Scheduler_Disable_Task_Radio_Button - Use 'Click_Scheduler_Disable_Task_Radio_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Scheduler_Disable_Task_Radio_Button()
        {
            #region Variable Declarations
            WpfCheckBox statusCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.SchedulerTab.SchedulesList.UINameworkflow1ResourcListItem.StatusCheckBox;
            #endregion

            // Clear check box
            statusCheckBox.Checked = this.Click_Scheduler_Disable_Task_Radio_ButtonParams.StatusCheckBoxChecked;
        }
        
        /// <summary>
        /// Click_Scheduler_EditTrigger_Button
        /// </summary>
        public void Click_Scheduler_EditTrigger_Button()
        {
            #region Variable Declarations
            WpfButton editTriggerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.SchedulerTab.EditTriggerButton;
            #endregion

            // Click '' button
            Mouse.Click(editTriggerButton, new Point(10, 9));
        }
        
        /// <summary>
        /// Click_Scheduler_Enable_Task_Radio_Button - Use 'Click_Scheduler_Enable_Task_Radio_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Scheduler_Enable_Task_Radio_Button()
        {
            #region Variable Declarations
            WpfCheckBox statusCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.SchedulerTab.SchedulesList.UINameworkflow1ResourcListItem.StatusCheckBox;
            #endregion

            // Select check box
            statusCheckBox.Checked = this.Click_Scheduler_Enable_Task_Radio_ButtonParams.StatusCheckBoxChecked;
        }
        
        /// <summary>
        /// Click_Scheduler_ResourcePicker
        /// </summary>
        public void Click_Scheduler_ResourcePicker()
        {
            #region Variable Declarations
            WpfButton resourcePickerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.SchedulerTab.ResourcePickerButton;
            #endregion

            // Click '...' button
            Mouse.Click(resourcePickerButton, new Point(20, 12));
        }
        
        /// <summary>
        /// Click_Scheduler_ResourcePicker_Button
        /// </summary>
        public void Click_Scheduler_ResourcePicker_Button()
        {
            #region Variable Declarations
            WpfButton resourcePickerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.SchedulerTab.ResourcePickerButton;
            #endregion

            // Click '...' button
            Mouse.Click(resourcePickerButton, new Point(14, 13));
        }
        
        /// <summary>
        /// Click_Scheduler_Ribbon_Button
        /// </summary>
        public void Click_Scheduler_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton schedulerButton = this.MainStudioWindow.SideMenuBar.SchedulerButton;
            #endregion

            // Click 'Schedule a service to run' button
            Mouse.Click(schedulerButton, new Point(4, 12));
        }
        
        /// <summary>
        /// Click_Scheduler_RunTask - Use 'Click_Scheduler_RunTaskParams' to pass parameters into this method.
        /// </summary>
        public void Click_Scheduler_RunTask()
        {
            #region Variable Declarations
            WpfCheckBox runTaskCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.SchedulerTab.RunTaskCheckBox;
            #endregion

            // Select 'Run task as soon as possible after a scheduled sta...' check box
            runTaskCheckBox.Checked = this.Click_Scheduler_RunTaskParams.RunTaskCheckBoxChecked;
        }
        
        /// <summary>
        /// Click_Select_Windows_Group_Cancel_Button - Use 'Click_Select_Windows_Group_Cancel_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Select_Windows_Group_Cancel_Button()
        {
            #region Variable Declarations
            WinButton cancel = this.SelectWindowsGroupDialog.CancelPanel.Cancel;
            #endregion

            // Verify that the 'Exists' property of 'Cancel' button equals 'True'
            Assert.AreEqual(this.Click_Select_Windows_Group_Cancel_ButtonParams.CancelExists, cancel.Exists, "Select Windows group dialog cancel buttton does not exist.");

            // Click 'Cancel' button
            Mouse.Click(cancel, new Point(28, 9));
        }
        
        /// <summary>
        /// Click_Select_Windows_Group_OK_Button
        /// </summary>
        public void Click_Select_Windows_Group_OK_Button()
        {
            #region Variable Declarations
            WinButton ok = this.SelectWindowsGroupDialog.OKPanel.OK;
            #endregion

            // Click 'OK' button
            Mouse.Click(ok, new Point(37, 9));
        }
        
        /// <summary>
        /// Click_Server_Source_Wizard_Address_Protocol_Dropdown - Use 'Click_Server_Source_Wizard_Address_Protocol_DropdownParams' to pass parameters into this method.
        /// </summary>
        public void Click_Server_Source_Wizard_Address_Protocol_Dropdown()
        {
            #region Variable Declarations
            WpfButton toggleDropdown = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.ProtocolCombobox.ToggleDropdown;
            WpfCustom comboboxListItemAsHttp = this.MainStudioWindow.ComboboxListItemAsHttp;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleDropdown, new Point(54, 8));

            // Verify that the 'Exists' property of 'http' custom control equals 'True'
            Assert.AreEqual(this.Click_Server_Source_Wizard_Address_Protocol_DropdownParams.ComboboxListItemAsHttpExists, comboboxListItemAsHttp.Exists, "Http does not exist in server source wizard address protocol dropdown list.");
        }
        
        /// <summary>
        /// Click_Server_Source_Wizard_Test_Connection_Button - Use 'Click_Server_Source_Wizard_Test_Connection_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Server_Source_Wizard_Test_Connection_Button()
        {
            #region Variable Declarations
            WpfButton testConnectionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.TestConnectionButton;
            WpfButton saveButton = this.MainStudioWindow.SideMenuBar.SaveButton;
            #endregion

            // Click 'Test Connection' button
            Mouse.Click(testConnectionButton, new Point(51, 8));

            // Wait for 3 seconds for user delay between actions; Verify that the 'Enabled' property of 'Save this tab' button equals 'True'
            Playback.Wait(3000);
            Assert.AreEqual(this.Click_Server_Source_Wizard_Test_Connection_ButtonParams.SaveButtonEnabled, saveButton.Enabled, "Save ribbon button is not enabled");
        }
        
        /// <summary>
        /// Click_Service_Picker_Dialog_Cancel
        /// </summary>
        public void Click_Service_Picker_Dialog_Cancel()
        {
            #region Variable Declarations
            WpfButton cancel = this.ServicePickerDialog.Cancel;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(cancel, new Point(57, 6));
        }
        
        /// <summary>
        /// Click_Service_Picker_Dialog_First_Service_In_Explorer
        /// </summary>
        public void Click_Service_Picker_Dialog_First_Service_In_Explorer()
        {
            #region Variable Declarations
            WpfTreeItem subTreeItem1 = this.ServicePickerDialog.Explorer.ExplorerTree.TreeItem1.SubTreeItem1;
            #endregion

            // Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(subTreeItem1, new Point(91, 9));
        }
        
        /// <summary>
        /// Click_Service_Picker_Dialog_OK - Use 'Click_Service_Picker_Dialog_OKParams' to pass parameters into this method.
        /// </summary>
        public void Click_Service_Picker_Dialog_OK()
        {
            #region Variable Declarations
            WpfButton ok = this.ServicePickerDialog.OK;
            WpfWindow servicePickerDialog = this.ServicePickerDialog;
            #endregion

            // Click 'OK' button
            Mouse.Click(ok, new Point(52, 10));

            // Verify that the 'Exists' property of 'ServicePickerDialog' window equals 'False'
            Assert.AreEqual(this.Click_Service_Picker_Dialog_OKParams.ServicePickerDialogExists, servicePickerDialog.Exists, "Service picker dialog does exist");
        }
        
        /// <summary>
        /// Click_Settings_Security_Resource_Permissions_Add_Resource_Button
        /// </summary>
        public void Click_Settings_Security_Resource_Permissions_Add_Resource_Button()
        {
            #region Variable Declarations
            WpfButton addResourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ResourcePermissions.Row1.ResourceCell.AddResourceButton;
            #endregion

            // Click '...' button
            Mouse.Click(addResourceButton, new Point(6, 15));
        }
        
        /// <summary>
        /// Click_Show_Dependencies_In_Explorer_Context_Menu - Use 'Click_Show_Dependencies_In_Explorer_Context_MenuParams' to pass parameters into this method.
        /// </summary>
        public void Click_Show_Dependencies_In_Explorer_Context_Menu()
        {
            #region Variable Declarations
            WpfMenuItem showDependencies = this.MainStudioWindow.ExplorerContextMenu.ShowDependencies;
            WpfRadioButton showwhatdependsonthisRadioButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DependencyGraphTab.WorksurfaceContext.DependencyView.ScrollViewer.ShowwhatdependsonthisRadioButton;
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DependencyGraphTab.WorksurfaceContext.DependencyView.ScrollViewer.NestingLevelsText.Textbox;
            WpfButton refreshButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DependencyGraphTab.WorksurfaceContext.DependencyView.ScrollViewer.RefreshButton;
            WpfText text = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DependencyGraphTab.WorksurfaceContext.DependencyView.ScrollViewer.Node1.Text;
            #endregion

            // Click 'Show Dependencies' menu item
            Mouse.Click(showDependencies, new Point(50, 15));

            // Verify that the 'Selected' property of 'Show what depends on this' radio button equals 'True'
            Assert.AreEqual(this.Click_Show_Dependencies_In_Explorer_Context_MenuParams.ShowwhatdependsonthisRadioButtonSelected, showwhatdependsonthisRadioButton.Selected, "Dependency graph show dependencies radio button is not selected.");

            // Verify that the 'Exists' property of first text box next to 'Nesting Levels' label equals 'True'
            Assert.AreEqual(this.Click_Show_Dependencies_In_Explorer_Context_MenuParams.TextboxExists, textbox.Exists, "Dependency graph nesting levels textbox does not exist.");

            // Verify that the 'Exists' property of 'Refresh' button equals 'True'
            Assert.AreEqual(this.Click_Show_Dependencies_In_Explorer_Context_MenuParams.RefreshButtonExists, refreshButton.Exists, "Refresh button does not exist on dependency graph");

            // Verify that the 'DisplayText' property of 'RemoteServerUITestWorkflow' label equals 'RemoteServerUITestWorkflow'
            Assert.AreEqual(this.Click_Show_Dependencies_In_Explorer_Context_MenuParams.TextDisplayText, text.DisplayText, "Dependant workflow not shown in dependency diagram");
        }
        
        /// <summary>
        /// Click_Show_Server_Version_Explorer_Context_menu
        /// </summary>
        public void Click_Show_Server_Version_Explorer_Context_menu()
        {
            #region Variable Declarations
            WpfMenuItem showServerVersion = this.MainStudioWindow.ExplorerContextMenu.ShowServerVersion;
            #endregion

            // Click 'Server Version' menu item
            Mouse.Click(showServerVersion, new Point(45, 13));
        }
        
        /// <summary>
        /// Click_SQL_Server_Large_View_Done_Button - Use 'Click_SQL_Server_Large_View_Done_ButtonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Click_SQL_Server_Large_View_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.DoneButton;
            #endregion

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Click_SQL_Server_Large_View_Done_ButtonExpectedValues.DoneButtonExists, doneButton.Exists, "SQL Server large view done button does not exist.");

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_SQL_Server_Large_View_Generate_Outputs - Use 'Click_SQL_Server_Large_View_Generate_OutputsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Click_SQL_Server_Large_View_Generate_Outputs()
        {
            #region Variable Declarations
            WpfButton generateOutputsButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.GenerateOutputsButton;
            WpfEdit testDataTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.TestInputsTable.Row1.TestDataCell.TestDataComboBox.TestDataTextbox;
            #endregion

            // Verify that the 'Exists' property of 'Generate Outputs' button equals 'True'
            Assert.AreEqual(this.Click_SQL_Server_Large_View_Generate_OutputsExpectedValues.GenerateOutputsButtonExists, generateOutputsButton.Exists, "SQL Server large view does not contain a generate outputs button.");

            // Click 'Generate Outputs' button
            Mouse.Click(generateOutputsButton, new Point(7, 7));

            // Verify that the 'Exists' property of 'Text' text box equals 'True'
            Assert.AreEqual(this.Click_SQL_Server_Large_View_Generate_OutputsExpectedValues.TestDataTextboxExists, testDataTextbox.Exists, "SQL Server large view test inputs row 1 test data textbox does not exist.");
        }
        
        /// <summary>
        /// Click_SQL_Server_Large_View_Test_Inputs_Button
        /// </summary>
        public void Click_SQL_Server_Large_View_Test_Inputs_Button()
        {
            #region Variable Declarations
            WpfButton testInputsButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.TestInputsButton;
            #endregion

            // Click 'Test' button
            Mouse.Click(testInputsButton, new Point(21, 11));
        }
        
        /// <summary>
        /// Click_SQL_Server_Large_View_Test_Inputs_Done_Button - Use 'Click_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Click_SQL_Server_Large_View_Test_Inputs_Done_Button()
        {
            #region Variable Declarations
            WpfButton testInputsDoneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.TestInputsDoneButton;
            #endregion

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Click_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues.TestInputsDoneButtonExists, testInputsDoneButton.Exists, "SQL Server large view test inputs done button does not exist.");

            // Click 'Done' button
            Mouse.Click(testInputsDoneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_Switch_Dialog_Done_Button - Use 'Click_Switch_Dialog_Done_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Switch_Dialog_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.DecisionOrSwitchDialog.DoneButton;
            WpfCustom switch1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Switch;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(24, 7));

            // Verify that the 'Exists' property of 'FlowSwitch`1[String]' custom control equals 'True'
            Assert.AreEqual(this.Click_Switch_Dialog_Done_ButtonParams.SwitchExists, switch1.Exists, "Switch on the design surface does not exist");

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Click_Switch_Dialog_Done_ButtonParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Click_UnDock_Explorer
        /// </summary>
        public void Click_UnDock_Explorer()
        {
            #region Variable Declarations
            WpfButton explorerUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(explorerUnpinBtn, new Point(177, -13));
        }
        
        /// <summary>
        /// Click_Unlock_Ribbon_Button
        /// </summary>
        public void Click_Unlock_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton lockMenuButton = this.MainStudioWindow.SideMenuBar.LockMenuButton;
            #endregion

            // Click 'Lock / unlock the menu' button
            Mouse.Click(lockMenuButton, new Point(8, 6));
        }
        
        /// <summary>
        /// Click_Unlock_TopRibbon_Button
        /// </summary>
        public void Click_Unlock_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton lockStudioButton = this.MainStudioWindow.LockStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(lockStudioButton, new Point(10, 12));
        }
        
        /// <summary>
        /// Click_Variable_IsInput - Use 'Click_Variable_IsInputParams' to pass parameters into this method.
        /// </summary>
        public void Click_Variable_IsInput()
        {
            #region Variable Declarations
            WpfCell inputCell = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.VariableDataItem.List.ListItem.Table.DataItem1.InputCell;
            WpfCheckBox isInputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.VariableDataItem.List.ListItem.Table.DataItem1.InputCell.IsInputCheckbox;
            #endregion

            // Verify that the 'Exists' property of 'InputCell' cell equals 'True'
            Assert.AreEqual(this.Click_Variable_IsInputParams.InputCellExists, inputCell.Exists, "Input Checkbox does not exist.");

            // Verify that the 'Enabled' property of 'InputCell' cell equals 'True'
            Assert.AreEqual(this.Click_Variable_IsInputParams.InputCellEnabled, inputCell.Enabled, "Input Checkbox is disabled.");

            // Select 'UI_IsInputCheckbox_AutoID' check box
            isInputCheckbox.Checked = this.Click_Variable_IsInputParams.IsInputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_VariableList_Recordset_Row1_IsInputCheckbox - Use 'Click_VariableList_Recordset_Row1_IsInputCheckboxParams' to pass parameters into this method.
        /// </summary>
        public void Click_VariableList_Recordset_Row1_IsInputCheckbox()
        {
            #region Variable Declarations
            WpfCheckBox isInputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.RecordsetDataItem.List.ListItem.Table.DataItem1.List.ListItem.Table.DataItem.InputCell.IsInputCheckbox;
            #endregion

            // Select 'UI_IsInputCheckbox_AutoID' check box
            isInputCheckbox.Checked = this.Click_VariableList_Recordset_Row1_IsInputCheckboxParams.IsInputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_VariableList_Scalar_Row1_IsInputCheckbox - Use 'Click_VariableList_Scalar_Row1_IsInputCheckboxParams' to pass parameters into this method.
        /// </summary>
        public void Click_VariableList_Scalar_Row1_IsInputCheckbox()
        {
            #region Variable Declarations
            WpfCheckBox isInputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.VariableDataItem.List.ListItem.Table.DataItem1.InputCell.IsInputCheckbox;
            #endregion

            // Select 'UI_IsInputCheckbox_AutoID' check box
            isInputCheckbox.Checked = this.Click_VariableList_Scalar_Row1_IsInputCheckboxParams.IsInputCheckboxChecked;
        }
        
        /// <summary>
        /// DoubleClick_Explorer_First_Remote_Server_First_Item
        /// </summary>
        public void DoubleClick_Explorer_First_Remote_Server_First_Item()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.FirstRemoteServer.FirstItem;
            #endregion

            // Double-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.DoubleClick(firstItem, new Point(63, 11));
        }
        
        /// <summary>
        /// DoubleClick_Explorer_Localhost_First_Item
        /// </summary>
        public void DoubleClick_Explorer_Localhost_First_Item()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            #endregion

            // Double-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.DoubleClick(firstItem, new Point(63, 11));
        }
        
        /// <summary>
        /// Drag_DotNet_DLL_Connector_Onto_DesignSurface - Use 'Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_DotNet_DLL_Connector_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem dotNetDLL = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.ResourceTools.DotNetDLL;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom dotNetDll1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll;
            #endregion

            // Type 'DotNet DLL' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 127));
            Mouse.StartDragging(dotNetDLL, new Point(16, 25));
            Mouse.StopDragging(flowchart, new Point(308, 127));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfDotNetDllActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams.DotNetDllExists, dotNetDll1.Exists, "DotNet DLL tool does not exist on the design surface");
        }
        
        /// <summary>
        /// Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_Surface - Use 'Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_Surface()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
            Assert.AreEqual(this.Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams.FirstItemExists, firstItem.Exists, "No items to drag found in the explorer tree.");

            // Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, new Point(64, 5));

            // Move 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 128));
            Mouse.StartDragging(firstItem, new Point(64, 5));
            Mouse.StopDragging(flowchart, new Point(307, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_Surface - Use 'Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_Surface()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.FirstRemoteServer.FirstItem;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom subWorkflow = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SubWorkflow;
            #endregion

            // Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
            Assert.AreEqual(this.Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams.FirstItemExists, firstItem.Exists, "Explorer first remote server does not contain any items.");

            // Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, new Point(64, 5));

            // Move 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 128));
            Mouse.StartDragging(firstItem, new Point(64, 5));
            Mouse.StopDragging(flowchart, new Point(307, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams.SubWorkflowExists, subWorkflow.Exists, "Workflow on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_GET_Web_Connector_Onto_DesignSurface - Use 'Drag_GET_Web_Connector_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_GET_Web_Connector_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem gET = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.HTTPWebMethods.GET;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom webGet = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet;
            #endregion

            // Type 'GET' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_GET_Web_Connector_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 126));
            Mouse.StartDragging(gET, new Point(16, 25));
            Mouse.StopDragging(flowchart, new Point(306, 126));

            // Verify that the 'Exists' property of 'DsfWebGetActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_GET_Web_Connector_Onto_DesignSurfaceParams.WebGetExists, webGet.Exists, "GET Web connectoer does not exist on the design surface after drag and drop from " +
                    "toolbox.");
        }
        
        /// <summary>
        /// Drag_GetWeb_RequestTool_Onto_DesignSurface - Use 'Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_GetWeb_RequestTool_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem webRequest = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.WebRequest;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom webRequest1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebRequest;
            #endregion

            // Type 'Web Request' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 124));
            Mouse.StartDragging(webRequest, new Point(12, 3));
            Mouse.StopDragging(flowchart, new Point(305, 124));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfWebRequestActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams.WebRequestExists, webRequest1.Exists, "Web Get Request small view does not exist on the design surface");
        }
        
        /// <summary>
        /// Drag_PostWeb_RequestTool_Onto_DesignSurface - Use 'Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_PostWeb_RequestTool_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem pOST = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.HTTPWebMethods.POST;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom webPost = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPost;
            #endregion

            // Type 'POST' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 128));
            Mouse.StartDragging(pOST, new Point(20, 35));
            Mouse.StopDragging(flowchart, new Point(306, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfWebPostActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams.WebPostExists, webPost.Exists, "Web Post Request small view does not exist on the design surface");
        }
        
        /// <summary>
        /// Drag_Toolbox_Base_Conversion_Onto_DesignSurface - Use 'Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Base_Conversion_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem baseConvert = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.BaseConvert;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom baseConvert1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert;
            #endregion

            // Type 'Base Convert' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(303, 128));
            Mouse.StartDragging(baseConvert, new Point(12, 12));
            Mouse.StopDragging(flowchart, new Point(303, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfBaseConvertActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams.BaseConvertExists, baseConvert1.Exists, "Base Conversion on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Calculate_Onto_DesignSurface - Use 'Drag_Toolbox_Calculate_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Calculate_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem calculate = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.Calculate;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom calculate1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate;
            #endregion

            // Type 'Calculate' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Calculate_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 131));
            Mouse.StartDragging(calculate, new Point(59, -17));
            Mouse.StopDragging(flowchart, new Point(305, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Calculate_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfCalculateActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Calculate_Onto_DesignSurfaceParams.CalculateExists, calculate1.Exists, "Calculate tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Case_Conversion_Onto_DesignSurface - Use 'Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Case_Conversion_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem caseConvert = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.CaseConvert;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom caseConvert1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert;
            #endregion

            // Type 'Case Convert' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(303, 130));
            Mouse.StartDragging(caseConvert, new Point(19, 13));
            Mouse.StopDragging(flowchart, new Point(303, 130));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfCaseConvertActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams.CaseConvertExists, caseConvert1.Exists, "Case Conversion on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_CMD_Line_Onto_DesignSurface - Use 'Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_CMD_Line_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem cMDScript = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.ScriptingTools.CMDScript;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom executeCommandLine = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            #endregion

            // Type 'CMD Script' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 122));
            Mouse.StartDragging(cMDScript, new Point(19, 19));
            Mouse.StopDragging(flowchart, new Point(305, 122));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfExecuteCommandLineActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams.ExecuteCommandLineExists, executeCommandLine.Exists, "CMD Line tool on the design surface tool does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Comment_Onto_DesignSurface - Use 'Drag_Toolbox_Comment_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Comment_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem comment = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.Comment;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom comment1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Comment;
            #endregion

            // Type 'Comment' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Comment_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 129));
            Mouse.StartDragging(comment, new Point(40, 15));
            Mouse.StopDragging(flowchart, new Point(308, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Comment_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfCommentActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Comment_Onto_DesignSurfaceParams.CommentExists, comment1.Exists, "Comment tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Copy_Onto_DesignSurface - Use 'Drag_Toolbox_Copy_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Copy_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem copy = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Copy;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom pathCopy = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy;
            #endregion

            // Type 'Copy' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Copy_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(310, 129));
            Mouse.StartDragging(copy, new Point(19, -3));
            Mouse.StopDragging(flowchart, new Point(310, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Copy_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfPathCopy' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Copy_Onto_DesignSurfaceParams.PathCopyExists, pathCopy.Exists, "Copy on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Count_Records_Onto_DesignSurface - Use 'Drag_Toolbox_Count_Records_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Count_Records_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem count = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.Count;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Count' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Count_Records_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 125));
            Mouse.StartDragging(count, new Point(13, 18));
            Mouse.StopDragging(flowchart, new Point(307, 125));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Count_Records_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Create_Onto_DesignSurface - Use 'Drag_Toolbox_Create_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Create_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem create = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Create;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom pathCreate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate;
            #endregion

            // Type 'Create' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Create_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 131));
            Mouse.StartDragging(create, new Point(9, 16));
            Mouse.StopDragging(flowchart, new Point(308, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Create_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfPathCreate' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Create_Onto_DesignSurfaceParams.PathCreateExists, pathCreate.Exists, "Create tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Data_Merge_Onto_DesignSurface - Use 'Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Data_Merge_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem dataMerge = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.DataMerge;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom dataMerge1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Type 'Data Merge' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 133));
            Mouse.StartDragging(dataMerge, new Point(54, 23));
            Mouse.StopDragging(flowchart, new Point(305, 133));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams.DataMergeExists, dataMerge1.Exists, "Data Merge on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Data_Split_Onto_DesignSurface - Use 'Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Data_Split_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem dataSplit = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.DataSplit;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom dataSplit1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Type 'Data Split' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 129));
            Mouse.StartDragging(dataSplit, new Point(3, 8));
            Mouse.StopDragging(flowchart, new Point(308, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams.DataSplitExists, dataSplit1.Exists, "Data Split on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Date_And_Time_Onto_DesignSurface - Use 'Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Date_And_Time_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem dateTime = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.DateTime;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom dateTime1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTime;
            #endregion

            // Type 'Date Time' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 127));
            Mouse.StartDragging(dateTime, new Point(20, -1));
            Mouse.StopDragging(flowchart, new Point(304, 127));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfDateTimeActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams.DateTimeExists, dateTime1.Exists, "Date and Time tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_DateTime_Difference_Onto_DesignSurface - Use 'Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_DateTime_Difference_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem dateTimeDifference = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.DateTimeDifference;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom dateTimeDifference1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTimeDifference;
            #endregion

            // Type 'Date Time Diff' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 131));
            Mouse.StartDragging(dateTimeDifference, new Point(48, 7));
            Mouse.StopDragging(flowchart, new Point(306, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfDateTimeDifferenceActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams.DateTimeDifferenceExists, dateTimeDifference1.Exists, "Date And Time Difference tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Decision_Onto_DesignSurface - Use 'Drag_Toolbox_Decision_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Decision_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem decision = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FlowTools.Decision;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfButton doneButton = this.DecisionOrSwitchDialog.DoneButton;
            #endregion

            // Type 'Decision' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Decision_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(309, 128));
            Mouse.StartDragging(decision, new Point(16, 11));
            Mouse.StopDragging(flowchart, new Point(309, 128));

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Decision_Onto_DesignSurfaceParams.DoneButtonExists, doneButton.Exists, "Decision dialog done button does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Delete_Onto_DesignSurface - Use 'Drag_Toolbox_Delete_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Delete_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem delete = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Delete;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom pathDelete = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathDelete;
            #endregion

            // Type 'Delete' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Delete_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 125));
            Mouse.StartDragging(delete, new Point(13, 9));
            Mouse.StopDragging(flowchart, new Point(306, 125));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Delete_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfPathDelete' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Delete_Onto_DesignSurfaceParams.PathDeleteExists, pathDelete.Exists, "Delete tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Delete_Record_Onto_DesignSurface - Use 'Drag_Toolbox_Delete_Record_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Delete_Record_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem delete = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.Delete;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Delete' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Delete_Record_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(309, 128));
            Mouse.StartDragging(delete, new Point(1, 15));
            Mouse.StopDragging(flowchart, new Point(309, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Delete_Record_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Dropbox_Download_Onto_DesignSurface - Use 'Drag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Dropbox_Download_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem download = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.StorageDropbox.Download;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Download' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 131));
            Mouse.StartDragging(download, new Point(30, 8));
            Mouse.StopDragging(flowchart, new Point(307, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Dropbox_Upload_Onto_DesignSurface - Use 'Drag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Dropbox_Upload_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem upload = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.StorageDropbox.Upload;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Upload' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 131));
            Mouse.StartDragging(upload, new Point(30, 8));
            Mouse.StopDragging(flowchart, new Point(307, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Exchange_Email_Onto_DesignSurface - Use 'Drag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Exchange_Email_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem exchangeSend = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.Email.ExchangeSend;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Exchange Email' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 129));
            Mouse.StartDragging(exchangeSend, new Point(16, -39));
            Mouse.StopDragging(flowchart, new Point(308, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Find_Index_Onto_DesignSurface - Use 'Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Find_Index_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem findIndex = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.FindIndex;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom findIndex1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindIndex;
            #endregion

            // Type 'Find Index' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 131));
            Mouse.StartDragging(findIndex, new Point(9, 5));
            Mouse.StopDragging(flowchart, new Point(305, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfIndexActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams.FindIndexExists, findIndex1.Exists, "Find Index on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Find_Record_Index_Onto_DesignSurface - Use 'Drag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Find_Record_Index_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem findRecords = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.FindRecords;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Find Records' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 130));
            Mouse.StartDragging(findRecords, new Point(8, 8));
            Mouse.StopDragging(flowchart, new Point(307, 130));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_For_Each_Onto_DesignSurface - Use 'Drag_Toolbox_For_Each_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_For_Each_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem forEach = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.LoopTools.ForEach;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom forEach1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach;
            WpfComboBox forEachTypeComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach.SmallView.ForEachTypeComboBox;
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach.SmallView.FromIntellisenseTextbox.Textbox;
            WpfCustom dropActivityHere = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach.SmallView.DropActivityHere;
            WpfEdit textbox1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach.SmallView.ToIntellisenseTextbox.Textbox;
            #endregion

            // Type 'ForEach' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_For_Each_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 129));
            Mouse.StartDragging(forEach, new Point(40, 19));
            Mouse.StopDragging(flowchart, new Point(307, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_For_Each_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfForEachActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_For_Each_Onto_DesignSurfaceParams.ForEachExists, forEach1.Exists, "For Each tool on the design surface does not exist");

            // Verify that the 'Exists' property of 'UI__ForEachType_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_For_Each_Onto_DesignSurfaceParams.ForEachTypeComboBoxExists, forEachTypeComboBox.Exists, "Type dropdown does not exist on for each on the design surface.");

            // Verify that the 'Exists' property of 'Text' text box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_For_Each_Onto_DesignSurfaceParams.TextboxExists, textbox.Exists, "Start textbox in in range foreach on the design surface does not exist.");

            // Verify that the 'Exists' property of 'Drop Activity Here' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_For_Each_Onto_DesignSurfaceParams.DropActivityHereExists, dropActivityHere.Exists, "Activity drop box does not exist on for each.");

            // Verify that the 'Exists' property of 'Text' text box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_For_Each_Onto_DesignSurfaceParams.TextboxExists1, textbox1.Exists, "End textbox in in range foreach on the design surface does not exist.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Format_Number_Onto_DesignSurface - Use 'Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Format_Number_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem formatNumber = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.FormatNumber;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom formatNumber1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber;
            #endregion

            // Type 'Format Number' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 131));
            Mouse.StartDragging(formatNumber, new Point(18, 11));
            Mouse.StopDragging(flowchart, new Point(305, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfNumberFormatActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams.FormatNumberExists, formatNumber1.Exists, "Format Number tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_JSON_Onto_DesignSurface - Use 'Drag_Toolbox_JSON_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_JSON_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem createJSON = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.CreateJSON;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom createJson1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Type 'Create JSON' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_JSON_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 127));
            Mouse.StartDragging(createJSON, new Point(0, 10));
            Mouse.StopDragging(flowchart, new Point(305, 127));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_JSON_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_JSON_Onto_DesignSurfaceParams.CreateJsonExists, createJson1.Exists, "Create JSON tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Length_Onto_DesignSurface - Use 'Drag_Toolbox_Length_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Length_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem length = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.Length;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom length1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Length;
            #endregion

            // Type 'Length' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Length_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 125));
            Mouse.StartDragging(length, new Point(16, 6));
            Mouse.StopDragging(flowchart, new Point(308, 125));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Length_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfRecordsetLengthActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Length_Onto_DesignSurfaceParams.LengthExists, length1.Exists, "Length tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Move_Onto_DesignSurface - Use 'Drag_Toolbox_Move_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Move_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem move = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Move;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom pathMove = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove;
            #endregion

            // Type 'Move' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Move_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 129));
            Mouse.StartDragging(move, new Point(32, 4));
            Mouse.StopDragging(flowchart, new Point(306, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Move_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfPathMove' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Move_Onto_DesignSurfaceParams.PathMoveExists, pathMove.Exists, "Move tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_MultiAssign_Onto_DesignSurface - Use 'Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_MultiAssign_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem multiAssign = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.MultiAssign;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row1.VariableCell.Listbox.Textbox;
            #endregion

            // Type 'Assign' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Verify that the 'Exists' property of 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams.MultiAssignExists, multiAssign.Exists, "Toolbox Multiassign does not exist");

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 128));
            Mouse.StartDragging(multiAssign, new Point(13, 17));
            Mouse.StopDragging(flowchart, new Point(307, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'UI_TextBox_AutoID' text box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams.TextboxExists, textbox.Exists, "Assign small view row 1 variable textbox does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_MySql_Database_Onto_DesignSurface - Use 'Drag_Toolbox_MySql_Database_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_MySql_Database_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem mySQL = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.Database.MySQL;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'MySQL' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_MySql_Database_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 130));
            Mouse.StartDragging(mySQL, new Point(4, 2));
            Mouse.StopDragging(flowchart, new Point(306, 130));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_MySql_Database_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Random_Onto_DesignSurface - Use 'Drag_Toolbox_Random_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Random_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem random = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.Random;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom random1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random;
            #endregion

            // Type 'Random' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Random_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 127));
            Mouse.StartDragging(random, new Point(9, -21));
            Mouse.StopDragging(flowchart, new Point(308, 127));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Random_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfRandomActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Random_Onto_DesignSurfaceParams.RandomExists, random1.Exists, "Random tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Read_File_Onto_DesignSurface - Use 'Drag_Toolbox_Read_File_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Read_File_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem readFile = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.ReadFile;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom fileRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead;
            #endregion

            // Type 'Read File' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Read_File_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 125));
            Mouse.StartDragging(readFile, new Point(12, 15));
            Mouse.StopDragging(flowchart, new Point(304, 125));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Read_File_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfFileRead' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Read_File_Onto_DesignSurfaceParams.FileReadExists, fileRead.Exists, "Read File tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Read_Folder_Onto_DesignSurface - Use 'Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Read_Folder_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem readFolder = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.ReadFolder;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom folderRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead;
            #endregion

            // Type 'Read Folder' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 129));
            Mouse.StartDragging(readFolder, new Point(14, 3));
            Mouse.StopDragging(flowchart, new Point(305, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfFolderRead' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams.FolderReadExists, folderRead.Exists, "Read folder tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Rename_Onto_DesignSurface - Use 'Drag_Toolbox_Rename_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Rename_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem rename = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Rename;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom pathRename = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename;
            #endregion

            // Type 'Rename' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Rename_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 128));
            Mouse.StartDragging(rename, new Point(6, 11));
            Mouse.StopDragging(flowchart, new Point(305, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Rename_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfPathRename' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Rename_Onto_DesignSurfaceParams.PathRenameExists, pathRename.Exists, "Rename tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Replace_Onto_DesignSurface - Use 'Drag_Toolbox_Replace_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Replace_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem replace = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.Replace;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom replace1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Replace;
            #endregion

            // Type 'Replace' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Replace_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 121));
            Mouse.StartDragging(replace, new Point(16, 10));
            Mouse.StopDragging(flowchart, new Point(306, 121));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Replace_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfReplaceActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Replace_Onto_DesignSurfaceParams.ReplaceExists, replace1.Exists, "Replace on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Script_Onto_DesignSurface - Use 'Drag_Toolbox_Script_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Script_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem script = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.ScriptingTools.Script;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom scripting = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Scripting;
            #endregion

            // Type 'Script' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Script_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 130));
            Mouse.StartDragging(script, new Point(49, 17));
            Mouse.StopDragging(flowchart, new Point(307, 130));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Script_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfScriptingActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Script_Onto_DesignSurfaceParams.ScriptingExists, scripting.Exists, "Script tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Sequence_Onto_DesignSurface - Use 'Drag_Toolbox_Sequence_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Sequence_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem sequence = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FlowTools.Sequence;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom sequence1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Sequence;
            #endregion

            // Type 'Sequence' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Sequence_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 131));
            Mouse.StartDragging(sequence, new Point(18, -12));
            Mouse.StopDragging(flowchart, new Point(305, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sequence_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfSequenceActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sequence_Onto_DesignSurfaceParams.SequenceExists, sequence1.Exists, "Sequence on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Service_Picker_Onto_DesignSurface - Use 'Drag_Toolbox_Service_Picker_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Service_Picker_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem service = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.ResourceTools.Service;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfButton cancel = this.ServicePickerDialog.Cancel;
            #endregion

            // Type 'Service' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Service_Picker_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 126));
            Mouse.StartDragging(service, new Point(50, 5));
            Mouse.StopDragging(flowchart, new Point(304, 126));

            // Verify that the 'Exists' property of 'Cancel' button equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Service_Picker_Onto_DesignSurfaceParams.CancelExists, cancel.Exists, "Service picker dialog cancel button does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Create_Onto_DesignSurface - Use 'Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Sharepoint_Create_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem createListItems = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.SharepointTools.CreateListItems;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Create List Item' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(311, 128));
            Mouse.StartDragging(createListItems, new Point(10, 16));
            Mouse.StopDragging(flowchart, new Point(311, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurface - Use 'Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem deleteListItems = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.SharepointTools.DeleteListItems;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Delete List Item' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 131));
            Mouse.StartDragging(deleteListItems, new Point(16, 5));
            Mouse.StopDragging(flowchart, new Point(306, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Read_Onto_DesignSurface - Use 'Drag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Sharepoint_Read_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem readListItems = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.SharepointTools.ReadListItems;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Read List Item' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(303, 128));
            Mouse.StartDragging(readListItems, new Point(13, 15));
            Mouse.StopDragging(flowchart, new Point(303, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Update_Onto_DesignSurface - Use 'Drag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Sharepoint_Update_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem updateListItems = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.SharepointTools.UpdateListItems;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Update List Item' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(300, 127));
            Mouse.StartDragging(updateListItems, new Point(17, 9));
            Mouse.StopDragging(flowchart, new Point(300, 127));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_SMTP_Email_Onto_DesignSurface - Use 'Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_SMTP_Email_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem sMTPSend = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.Email.SMTPSend;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom sMTPEmail = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SMTPEmail;
            #endregion

            // Type 'SMTP Send' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 129));
            Mouse.StartDragging(sMTPSend, new Point(16, -39));
            Mouse.StopDragging(flowchart, new Point(308, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfSendEmailActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams.SMTPEmailExists, sMTPEmail.Exists, "Email tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Sort_Record_Onto_DesignSurface - Use 'Drag_Toolbox_Sort_Record_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Sort_Record_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem sort = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.Sort;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Sort' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Sort_Record_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(300, 122));
            Mouse.StartDragging(sort, new Point(7, 8));
            Mouse.StopDragging(flowchart, new Point(300, 122));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sort_Record_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurface - Use 'Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem sQLBulkInsert = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.Database.SQLBulkInsert;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom sqlBulkInsert1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Type 'SQL Bulk Insert' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 129));
            Mouse.StartDragging(sQLBulkInsert, new Point(11, 16));
            Mouse.StopDragging(flowchart, new Point(304, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams.SqlBulkInsertExists, sqlBulkInsert1.Exists, "Sql Bulk Insert tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurface - Use 'Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem sQLServer = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.Database.SQLServer;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'SQL Server' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 127));
            Mouse.StartDragging(sQLServer, new Point(10, -7));
            Mouse.StopDragging(flowchart, new Point(304, 127));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Switch_Onto_DesignSurface - Use 'Drag_Toolbox_Switch_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Switch_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem switch1 = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FlowTools.Switch;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfButton doneButton = this.DecisionOrSwitchDialog.DoneButton;
            #endregion

            // Type 'Switch' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Switch_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(303, 126));
            Mouse.StartDragging(switch1, new Point(22, 30));
            Mouse.StopDragging(flowchart, new Point(303, 126));

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Switch_Onto_DesignSurfaceParams.DoneButtonExists, doneButton.Exists, "Decision dialog done button does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_System_Information_Onto_DesignSurface - Use 'Drag_Toolbox_System_Information_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_System_Information_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem sysInfo = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.SysInfo;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom gatherSystemInfo = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo;
            #endregion

            // Type 'Sys Info' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_System_Information_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 129));
            Mouse.StartDragging(sysInfo, new Point(8, 12));
            Mouse.StopDragging(flowchart, new Point(304, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_System_Information_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfGatherSystemInformationActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_System_Information_Onto_DesignSurfaceParams.GatherSystemInfoExists, gatherSystemInfo.Exists, "System Info tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Unique_Records_Onto_DesignSurface - Use 'Drag_Toolbox_Unique_Records_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Unique_Records_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem uniqueRecords = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.UniqueRecords;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Unique' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Unique_Records_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 133));
            Mouse.StartDragging(uniqueRecords, new Point(43, 6));
            Mouse.StopDragging(flowchart, new Point(304, 133));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Unique_Records_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Unzip_Onto_DesignSurface - Use 'Drag_Toolbox_Unzip_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Unzip_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem unZip = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.UnZip;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom unZip1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip;
            #endregion

            // Type 'Unzip' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Unzip_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 128));
            Mouse.StartDragging(unZip, new Point(15, 15));
            Mouse.StopDragging(flowchart, new Point(306, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Unzip_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfUnZip' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Unzip_Onto_DesignSurfaceParams.UnZipExists, unZip1.Exists, "Unzip on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Web_Request_Onto_DesignSurface - Use 'Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Web_Request_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem webRequest = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.WebRequest;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom webRequest1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebRequest;
            #endregion

            // Type 'Web Request' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 128));
            Mouse.StartDragging(webRequest, new Point(14, 3));
            Mouse.StopDragging(flowchart, new Point(308, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfWebRequestActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams.WebRequestExists, webRequest1.Exists, "Web Request on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Write_File_Onto_DesignSurface - Use 'Drag_Toolbox_Write_File_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Write_File_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem writeFile = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.WriteFile;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom fileWrite = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite;
            #endregion

            // Type 'Write File' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Write_File_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 132));
            Mouse.StartDragging(writeFile, new Point(10, 18));
            Mouse.StopDragging(flowchart, new Point(306, 132));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Write_File_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfFileWrite' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Write_File_Onto_DesignSurfaceParams.FileWriteExists, fileWrite.Exists, "Write File tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_XPath_Onto_DesignSurface - Use 'Drag_Toolbox_XPath_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_XPath_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem xPath = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.XPath;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom xPath1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Type 'XPath' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_XPath_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 123));
            Mouse.StartDragging(xPath, new Point(12, -13));
            Mouse.StopDragging(flowchart, new Point(307, 123));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_XPath_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_XPath_Onto_DesignSurfaceParams.XPathExists, xPath1.Exists, "XPath tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Zip_Onto_DesignSurface - Use 'Drag_Toolbox_Zip_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        public void Drag_Toolbox_Zip_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem zip = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Zip;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom zip1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip;
            #endregion

            // Type 'Zip' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Zip_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 131));
            Mouse.StartDragging(zip, new Point(16, 4));
            Mouse.StopDragging(flowchart, new Point(306, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Zip_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfZip' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Zip_Onto_DesignSurfaceParams.ZipExists, zip1.Exists, "Zip tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Enter_DeployViewOnly_Into_Deploy_Source_Filter - Use 'Enter_DeployViewOnly_Into_Deploy_Source_FilterParams' to pass parameters into this method.
        /// </summary>
        public void Enter_DeployViewOnly_Into_Deploy_Source_Filter()
        {
            #region Variable Declarations
            WpfEdit searchTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DeployTab.WorkSurfaceContext.SourceServerExplorer.SearchTextbox;
            WpfTreeItem firstExplorerTreeItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DeployTab.WorkSurfaceContext.SourceServerExplorer.ExplorerTree.SourceServerName.FirstExplorerTreeItem;
            WpfCheckBox checkBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DeployTab.WorkSurfaceContext.SourceServerExplorer.ExplorerTree.SourceServerName.FirstExplorerTreeItem.CheckBox;
            #endregion

            // Type 'DeployViewOnly' in 'SearchTextBox' text box
            searchTextbox.Text = this.Enter_DeployViewOnly_Into_Deploy_Source_FilterParams.SearchTextboxText;

            // Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
            Assert.AreEqual(this.Enter_DeployViewOnly_Into_Deploy_Source_FilterParams.FirstExplorerTreeItemExists, firstExplorerTreeItem.Exists, "First deploy tab source explorer item does not exist after filter is applied.");

            // Verify that the 'Exists' property of 'ResourceNameCheckBox' check box equals 'True'
            Assert.AreEqual(this.Enter_DeployViewOnly_Into_Deploy_Source_FilterParams.CheckBoxExists, checkBox.Exists, "Deploy source server explorer tree first item checkbox does not exist.");
        }
        
        /// <summary>
        /// Enter_InputDebug_value - Use 'Enter_InputDebug_valueParams' to pass parameters into this method.
        /// </summary>
        public void Enter_InputDebug_value()
        {
            #region Variable Declarations
            WpfPane row1 = this.MainStudioWindow.DebugInputDialog.TabItemsTabList.InputDataTab.InputsTable.Row1;
            WpfEdit inputValueText = this.MainStudioWindow.DebugInputDialog.TabItemsTabList.InputDataTab.InputsTable.Row1.Cell.InputValueCell.InputValueComboboxl.InputValueText;
            #endregion

            // Verify that the 'Exists' property of 'Row1' pane equals 'True'
            Assert.AreEqual(this.Enter_InputDebug_valueParams.Row1Exists, row1.Exists, "InputData row does not exist.");

            // Verify that the 'Exists' property of 'Text' text box equals 'True'
            Assert.AreEqual(this.Enter_InputDebug_valueParams.InputValueTextExists, inputValueText.Exists, "InputData row does not exist.");

            // Type '100' in 'Text' text box
            inputValueText.Text = this.Enter_InputDebug_valueParams.InputValueTextText;
        }
        
        /// <summary>
        /// Enter_RunAsUser_Username_And_Password - Use 'Enter_RunAsUser_Username_And_PasswordParams' to pass parameters into this method.
        /// </summary>
        public void Enter_RunAsUser_Username_And_Password()
        {
            #region Variable Declarations
            WpfEdit usernameTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.ServiceTestView.UsernameTextBoxEdit;
            WpfEdit passwordTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.ServiceTestView.PasswordTextBoxEdit;
            #endregion

            // Type 'testuser' in 'UsernameTextBox' text box
            usernameTextBoxEdit.Text = this.Enter_RunAsUser_Username_And_PasswordParams.UsernameTextBoxEditText;

            // Type '{Tab}' in 'UsernameTextBox' text box
            Keyboard.SendKeys(usernameTextBoxEdit, this.Enter_RunAsUser_Username_And_PasswordParams.UsernameTextBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'PasswordTextBox' text box
            Keyboard.SendKeys(passwordTextBoxEdit, this.Enter_RunAsUser_Username_And_PasswordParams.PasswordTextBoxEditSendKeys, true);
        }
        
        /// <summary>
        /// Enter_SomeVariable_Into_Base_Convert_Large_View_Row1_Value_Textbox - Use 'Enter_SomeVariable_Into_Base_Convert_Large_View_Row1_Value_TextboxParams' to pass parameters into this method.
        /// </summary>
        public void Enter_SomeVariable_Into_Base_Convert_Large_View_Row1_Value_Textbox()
        {
            #region Variable Declarations
            WpfEdit valueTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert.LargeView.DataGrid.Row1.Cell.Listbox.ValueTextbox;
            #endregion

            // Type '[[SomeVariable]]' in 'UI__Row1_FromExpressiontxt_AutoID' text box
            valueTextbox.Text = this.Enter_SomeVariable_Into_Base_Convert_Large_View_Row1_Value_TextboxParams.ValueTextboxText;
        }
        
        /// <summary>
        /// Enter_SomeVariable_Into_Calculate_Large_View_Function_Textbox - Use 'Enter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams' to pass parameters into this method.
        /// </summary>
        public void Enter_SomeVariable_Into_Calculate_Large_View_Function_Textbox()
        {
            #region Variable Declarations
            WpfEdit functionTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate.LargeView.Listbox.FunctionTextbox;
            #endregion

            // Type '[[SomeVariable]]' in 'FunctionTextbox' text box
            functionTextbox.Text = this.Enter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams.FunctionTextboxText;

            // Verify that the 'Text' property of 'FunctionTextbox' text box equals '[[SomeVariable]]'
            Assert.AreEqual(this.Enter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams.FunctionTextboxText1, functionTextbox.Text, "Calculate large view function textbox text does not equal \"[[SomeVariable]]\"");
        }
        
        /// <summary>
        /// Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableName - Use 'Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams' to pass parameters into this method.
        /// </summary>
        public void Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableName()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.LargeView.DataGrid.Row1.VariableCell.Listbox.Textbox;
            #endregion

            // Type '[[Some$Invalid%Variable]]' in 'UI__Row1_FieldName_AutoID' text box
            textbox.Text = this.Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams.TextboxText;

            // Verify that the 'Text' property of 'UI__Row1_FieldName_AutoID' text box equals '[[Some$Invalid%Variable]]'
            Assert.AreEqual(this.Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams.TextboxText1, textbox.Text, "Multiassign small view row 1 variable textbox text does not equal \"[[Some$Invalid" +
                    "%Variable]]\".");
        }
        
        /// <summary>
        /// Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariable - Use 'Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams' to pass parameters into this method.
        /// </summary>
        public void Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariable()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.LargeView.DataGrid.Row1.VariableCell.Listbox.Textbox;
            #endregion

            // Type '[[Some{Down}{Enter}Variable]]' in 'UI__Row1_FieldName_AutoID' text box
            Keyboard.SendKeys(textbox, this.Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams.TextboxSendKeys, ModifierKeys.None);

            // Verify that the 'Text' property of 'UI__Row1_FieldName_AutoID' text box equals '[[SomeVariable]]'
            Assert.AreEqual(this.Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams.TextboxText, textbox.Text, "Assign large view row1 variable textbox text does not equal \"[[SomeVariable]]\"");
        }
        
        /// <summary>
        /// Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_Suggestion - Use 'Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams' to pass parameters into this method.
        /// </summary>
        public void Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_Suggestion()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row1.VariableCell.Listbox.Textbox;
            WpfListItem listItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row1.VariableCell.Listbox.ListItem;
            #endregion

            // Type '[[' in 'UI_TextBox_AutoID' text box
            textbox.Text = this.Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams.TextboxText;

            // Click 'SomeVariableListItem' list item
            Mouse.Click(listItem, new Point(39, 10));

            // Verify that the 'Text' property of 'UI_TextBox_AutoID' text box equals '[[SomeVariable]]'
            Assert.AreEqual(this.Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams.TextboxText1, textbox.Text, "Multiassign small view row 1 variable textbox text does not equal \"[[SomeVariable" +
                    "]]\".");
        }
        
        /// <summary>
        /// Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisense - Use 'Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams' to pass parameters into this method.
        /// </summary>
        public void Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisense()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row1.VariableCell.Listbox.Textbox;
            #endregion

            // Type '[[{Down}{Enter}' in 'UI_TextBox_AutoID' text box
            Keyboard.SendKeys(textbox, this.Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams.TextboxSendKeys, ModifierKeys.None);

            // Verify that the 'Text' property of 'UI_TextBox_AutoID' text box equals '[[SomeVariable]]'
            Assert.AreEqual(this.Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams.TextboxText, textbox.Text, "Multiassign small view row 1 variable textbox text does not equal \"[[SomeVariable" +
                    "]]\".");
        }
        
        /// <summary>
        /// Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITest - Use 'Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams' to pass parameters into this method.
        /// </summary>
        public void Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITest()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.WorksurfaceContext.ServiceTestView.TestInputsTable.Row1.Cell.IntellisenseComboBox.Textbox;
            #endregion

            // Type 'Coded UI Test' in 'Text' text box
            Keyboard.SendKeys(textbox, this.Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams.TextboxSendKeys, ModifierKeys.None);

            // Verify that the 'Text' property of 'Text' text box equals 'Coded UI Test'
            Assert.AreEqual(this.Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams.TextboxText, textbox.Text, "Workflow tests row 1 value textbox text does not equal Coded UI Test after typing" +
                    " that in.");
        }
        
        /// <summary>
        /// Filter_variables - Use 'Filter_variablesParams' to pass parameters into this method.
        /// </summary>
        public void Filter_variables()
        {
            #region Variable Declarations
            WpfText filterText = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableSearchTextBoxEdit.FilterText;
            WpfEdit variableSearchTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableSearchTextBoxEdit;
            #endregion

            // Verify that the 'Exists' property of 'Filter' label equals 'True'
            Assert.AreEqual(this.Filter_variablesParams.FilterTextExists, filterText.Exists, "Variable filter textbox does not exist");

            // Click 'SearchTextBox' text box
            Mouse.Click(variableSearchTextBoxEdit, new Point(89, 7));

            // Type 'Other' in 'SearchTextBox' text box
            variableSearchTextBoxEdit.Text = this.Filter_variablesParams.VariableSearchTextBoxEditText;
        }
        
        /// <summary>
        /// Open_Assign_Tool_Large_View - Use 'Open_Assign_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Assign_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom multiAssign = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign;
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.LargeView.DataGrid.Row1.VariableCell.Listbox.Textbox;
            #endregion

            // Double-Click 'DsfMultiAssignActivity' custom control
            Mouse.DoubleClick(multiAssign, new Point(145, 5));

            // Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Assign_Tool_Large_ViewParams.MultiAssignExists, multiAssign.Exists, "Assign tool large view on the design surface does not exist");

            // Verify that the 'Exists' property of 'UI__Row1_FieldName_AutoID' text box equals 'True'
            Assert.AreEqual(this.Open_Assign_Tool_Large_ViewParams.TextboxExists, textbox.Exists, "Assign large view row 1 variable textbox does not exist");
        }
        
        /// <summary>
        /// Open_Assign_Tool_Qvi_Large_View - Use 'Open_Assign_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Assign_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.OpenQuickVariableInpToggleButton;
            WpfCustom quickVariableInputContent = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.QuickVariableInputContent;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Assign_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
            Assert.AreEqual(this.Open_Assign_Tool_Qvi_Large_ViewParams.QuickVariableInputContentExists, quickVariableInputContent.Exists, "QVI on assign is not open");
        }
        
        /// <summary>
        /// Open_Base_Conversion_Tool_Large_View - Use 'Open_Base_Conversion_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Base_Conversion_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom baseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert;
            WpfEdit valueTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert.LargeView.DataGrid.Row1.Cell.Listbox.ValueTextbox;
            #endregion

            // Double-Click 'DsfBaseConvertActivity' custom control
            Mouse.DoubleClick(baseConvert, new Point(160, 15));

            // Verify that the 'Enabled' property of 'UI__Row1_FromExpressiontxt_AutoID' text box equals 'True'
            Assert.AreEqual(this.Open_Base_Conversion_Tool_Large_ViewParams.ValueTextboxEnabled, valueTextbox.Enabled, "Base convert large view row 1 data testbox does not exist.");
        }
        
        /// <summary>
        /// Open_Base_Conversion_Tool_Qvi_Large_View - Use 'Open_Base_Conversion_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Base_Conversion_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert.OpenQuickVariableInpToggleButton;
            WpfCustom baseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Base_Conversion_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfBaseConvertActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Base_Conversion_Tool_Qvi_Large_ViewParams.BaseConvertExists, baseConvert.Exists, "Base Conversion QVI Window does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_Calculate_Tool_Large_View - Use 'Open_Calculate_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Calculate_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom calculate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate;
            WpfCustom largeView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate.LargeView;
            WpfControl listbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate.LargeView.Listbox;
            WpfEdit functionTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate.LargeView.Listbox.FunctionTextbox;
            #endregion

            // Double-Click 'DsfCalculateActivity' custom control
            Mouse.DoubleClick(calculate, new Point(105, 7));

            // Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
            Assert.AreEqual(this.Open_Calculate_Tool_Large_ViewParams.LargeViewExists, largeView.Exists, "Calculate tool large view does not exist on design surface.");

            // Verify that the 'Exists' property of 'Listbox' combo box equals 'True'
            Assert.AreEqual(this.Open_Calculate_Tool_Large_ViewParams.ListboxExists, listbox.Exists, "Autocomplete listbox does not exisst on Calculate tool large view.");

            // Verify that the 'Exists' property of 'FunctionTextbox' text box equals 'True'
            Assert.AreEqual(this.Open_Calculate_Tool_Large_ViewParams.FunctionTextboxExists, functionTextbox.Exists, "Function textbox does not exist on calculate tool large view.");
        }
        
        /// <summary>
        /// Open_Case_Conversion_Tool_Qvi_Large_View - Use 'Open_Case_Conversion_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Case_Conversion_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert.OpenQuickVariableInpToggleButton;
            WpfCustom caseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Case_Conversion_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfCaseConvertActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Case_Conversion_Tool_Qvi_Large_ViewParams.CaseConvertExists, caseConvert.Exists, "Case Conversion QVI Window does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_CMD_Line_Tool_Large_View - Use 'Open_CMD_Line_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_CMD_Line_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom executeCommandLine = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            #endregion

            // Double-Click 'DsfExecuteCommandLineActivity' custom control
            Mouse.DoubleClick(executeCommandLine, new Point(174, 10));

            // Verify that the 'Exists' property of 'DsfExecuteCommandLineActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_CMD_Line_Tool_Large_ViewParams.ExecuteCommandLineExists, executeCommandLine.Exists, "CMD Line large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_Context_Menu_OnDesignSurface
        /// </summary>
        public void Open_Context_Menu_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Right-Click 'Flowchart' custom control
            Mouse.Click(flowchart, MouseButtons.Right, ModifierKeys.None, new Point(304, 286));
        }
        
        /// <summary>
        /// Open_Copy_Tool_Large_View - Use 'Open_Copy_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Copy_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathCopy = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy;
            #endregion

            // Double-Click 'DsfPathCopy' custom control
            Mouse.DoubleClick(pathCopy, new Point(144, 11));

            // Verify that the 'Exists' property of 'DsfPathCopy' custom control equals 'True'
            Assert.AreEqual(this.Open_Copy_Tool_Large_ViewParams.PathCopyExists, pathCopy.Exists, "Copy Tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_CountRecords_Large_View
        /// </summary>
        public void Open_CountRecords_Large_View()
        {
            #region Variable Declarations
            WpfCustom countRecordset = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CountRecordset;
            #endregion

            // Double-Click 'DsfCountRecordsetActivity' custom control
            Mouse.DoubleClick(countRecordset, new Point(130, 11));
        }
        
        /// <summary>
        /// Open_Create_JSON_Large_View
        /// </summary>
        public void Open_Create_JSON_Large_View()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Double-Click 'DsfCreateJsonActivity' custom control
            Mouse.DoubleClick(createJson, new Point(124, 9));
        }
        
        /// <summary>
        /// Open_Create_Tool_Large_View - Use 'Open_Create_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Create_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathCreate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate;
            #endregion

            // Double-Click 'DsfPathCreate' custom control
            Mouse.DoubleClick(pathCreate, new Point(118, 13));

            // Verify that the 'Exists' property of 'DsfPathCreate' custom control equals 'True'
            Assert.AreEqual(this.Open_Create_Tool_Large_ViewParams.PathCreateExists, pathCreate.Exists, "Create Path large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_Data_Merge_Large_View - Use 'Open_Data_Merge_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Data_Merge_Large_View()
        {
            #region Variable Declarations
            WpfCustom dataMerge = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Double-Click 'DsfDataMergeActivity' custom control
            Mouse.DoubleClick(dataMerge, new Point(185, 9));

            // Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Data_Merge_Large_ViewParams.DataMergeExists, dataMerge.Exists, "Data merge large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_Data_Merge_Tool_Qvi_Large_View - Use 'Open_Data_Merge_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Data_Merge_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.OpenQuickVariableInpToggleButton;
            WpfCustom dataMerge = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Data_Merge_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Data_Merge_Tool_Qvi_Large_ViewParams.DataMergeExists, dataMerge.Exists, "Data Merge QVi on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_Data_Split_Large_View - Use 'Open_Data_Split_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Data_Split_Large_View()
        {
            #region Variable Declarations
            WpfCustom dataSplit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Double-Click 'DsfDataSplitActivity' custom control
            Mouse.DoubleClick(dataSplit, new Point(203, 10));

            // Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Data_Split_Large_ViewParams.DataSplitExists, dataSplit.Exists, "Data Split large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_Data_Split_Tool_Qvi_Large_View - Use 'Open_Data_Split_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Data_Split_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit.OpenQuickVariableInpToggleButton;
            WpfCustom dataSplit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Data_Split_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Data_Split_Tool_Qvi_Large_ViewParams.DataSplitExists, dataSplit.Exists, "Data Split Qvi does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_Delete_Tool_Large_View - Use 'Open_Delete_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Delete_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathDelete = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathDelete;
            #endregion

            // Double-Click 'DsfPathDelete' custom control
            Mouse.DoubleClick(pathDelete, new Point(118, 13));

            // Verify that the 'Exists' property of 'DsfPathDelete' custom control equals 'True'
            Assert.AreEqual(this.Open_Delete_Tool_Large_ViewParams.PathDeleteExists, pathDelete.Exists, "Delete Path large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_DotNet_DLL_Connector_Tool_Large_View - Use 'Open_DotNet_DLL_Connector_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_DotNet_DLL_Connector_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom dotNetDll = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll;
            WpfCustom largeView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView;
            WpfComboBox classNameComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ClassNameComboBox;
            WpfComboBox actionsComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ActionsComboBox;
            WpfButton generateOutputsButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.GenerateOutputsButton;
            WpfTable inputsTable = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.InputsTable;
            #endregion

            // Double-Click 'DsfDotNetDllActivity' custom control
            Mouse.DoubleClick(dotNetDll, new Point(238, 16));

            // Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
            Assert.AreEqual(this.Open_DotNet_DLL_Connector_Tool_Large_ViewParams.LargeViewExists, largeView.Exists, "DotNet DLL tool large view does not exist on the design surface");

            // Verify that the 'Exists' property of 'NamespaceComboBox' combo box equals 'True'
            Assert.AreEqual(this.Open_DotNet_DLL_Connector_Tool_Large_ViewParams.ClassNameComboBoxExists, classNameComboBox.Exists, "DotNet DLL tool large view namespace combobox does not exist.");

            // Verify that the 'Exists' property of 'ActionsComboBox' combo box equals 'True'
            Assert.AreEqual(this.Open_DotNet_DLL_Connector_Tool_Large_ViewParams.ActionsComboBoxExists, actionsComboBox.Exists, "DotNet DLL tool large view action combobox does not exist.");

            // Verify that the 'Exists' property of 'Generate Outputs' button equals 'True'
            Assert.AreEqual(this.Open_DotNet_DLL_Connector_Tool_Large_ViewParams.GenerateOutputsButtonExists, generateOutputsButton.Exists, "DotNet DLL large view generate outputs button does not exist.");

            // Verify that the 'Exists' property of 'LargeDataGrid' table equals 'True'
            Assert.AreEqual(this.Open_DotNet_DLL_Connector_Tool_Large_ViewParams.InputsTableExists, inputsTable.Exists, "DotNet DLL tool large view inputs table does not exist.");
        }
        
        /// <summary>
        /// Open_DropboxFileOperation_Large_View
        /// </summary>
        public void Open_DropboxFileOperation_Large_View()
        {
            #region Variable Declarations
            WpfCustom dropBox_DOWNLOAD = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DropBox_DOWNLOAD;
            #endregion

            // Double-Click 'DsfDropBoxFileActivity' custom control
            Mouse.DoubleClick(dropBox_DOWNLOAD, new Point(174, 14));
        }
        
        /// <summary>
        /// Open_Exchange_Email_Tool_Large_View
        /// </summary>
        public void Open_Exchange_Email_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom exchangeEmail = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExchangeEmail;
            #endregion

            // Double-Click 'DsfSendEmailActivity' custom control
            Mouse.DoubleClick(exchangeEmail, new Point(168, 11));
        }
        
        /// <summary>
        /// Open_ExecuteCommandline_LargeView
        /// </summary>
        public void Open_ExecuteCommandline_LargeView()
        {
            #region Variable Declarations
            WpfCustom executeCommandLine = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            #endregion

            // Double-Click 'DsfExecuteCommandLineActivity' custom control
            Mouse.DoubleClick(executeCommandLine, new Point(178, 10));
        }
        
        /// <summary>
        /// Open_Explorer_First_Item_Tests_With_Context_Menu - Use 'Open_Explorer_First_Item_Tests_With_Context_MenuParams' to pass parameters into this method.
        /// </summary>
        public void Open_Explorer_First_Item_Tests_With_Context_Menu()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            WpfMenuItem tests = this.MainStudioWindow.ExplorerContextMenu.Tests;
            WpfButton runAllButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.WorksurfaceContext.ServiceTestView.RunAllButton;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, MouseButtons.Right, ModifierKeys.None, new Point(107, 9));

            // Verify that the 'Exists' property of 'Tests' menu item equals 'True'
            Assert.AreEqual(this.Open_Explorer_First_Item_Tests_With_Context_MenuParams.TestsExists, tests.Exists, "Open does not exist in explorer context menu.");

            // Click 'Tests' menu item
            Mouse.Click(tests, new Point(30, 11));

            // Verify that the 'Exists' property of 'Run All' button equals 'True'
            Assert.AreEqual(this.Open_Explorer_First_Item_Tests_With_Context_MenuParams.RunAllButtonExists, runAllButton.Exists, "Run all button does not exist on tests tab");
        }
        
        /// <summary>
        /// Open_Explorer_First_Item_With_Context_Menu - Use 'Open_Explorer_First_Item_With_Context_MenuParams' to pass parameters into this method.
        /// </summary>
        public void Open_Explorer_First_Item_With_Context_Menu()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            WpfMenuItem open = this.MainStudioWindow.ExplorerContextMenu.Open;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, MouseButtons.Right, ModifierKeys.None, new Point(107, 9));

            // Verify that the 'Exists' property of 'Open' menu item equals 'True'
            Assert.AreEqual(this.Open_Explorer_First_Item_With_Context_MenuParams.OpenExists, open.Exists, "Open does not exist in explorer context menu.");

            // Click 'Open' menu item
            Mouse.Click(open, new Point(30, 11));
        }
        
        /// <summary>
        /// Open_Find_Record_Index_Tool_Large_View
        /// </summary>
        public void Open_Find_Record_Index_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom findRecordsIndex = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindRecordsIndex;
            #endregion

            // Double-Click 'DsfFindRecordsMultipleCriteriaActivity' custom control
            Mouse.DoubleClick(findRecordsIndex, new Point(172, 5));
        }
        
        /// <summary>
        /// Open_ForEach_Large_View
        /// </summary>
        public void Open_ForEach_Large_View()
        {
            #region Variable Declarations
            WpfCustom forEach = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach;
            #endregion

            // Double-Click 'DsfForEachActivity' custom control
            Mouse.DoubleClick(forEach, new Point(131, 14));
        }
        
        /// <summary>
        /// Open_GET_Web_Connector_Tool_Large_View - Use 'Open_GET_Web_Connector_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_GET_Web_Connector_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom webGet = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet;
            WpfComboBox sourcesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.LargeView.SourcesComboBox;
            WpfButton generateOutputsButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.LargeView.GenerateOutputsButton;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.DoneButton;
            #endregion

            // Double-Click 'DsfWebGetActivity' custom control
            Mouse.DoubleClick(webGet, new Point(238, 16));

            // Verify that the 'Exists' property of 'SourcesComboBox' combo box equals 'True'
            Assert.AreEqual(this.Open_GET_Web_Connector_Tool_Large_ViewParams.SourcesComboBoxExists, sourcesComboBox.Exists, "Web GET large view sources combobox does not exist.");

            // Verify that the 'Exists' property of 'Generate Outputs' button equals 'True'
            Assert.AreEqual(this.Open_GET_Web_Connector_Tool_Large_ViewParams.GenerateOutputsButtonExists, generateOutputsButton.Exists, "Web GET large view generate inputs button does not exist.");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_GET_Web_Connector_Tool_Large_ViewParams.DoneButtonExists, doneButton.Exists, "Web GET large view done does not exist.");
        }
        
        /// <summary>
        /// Open_GetWeb_RequestTool_small_View
        /// </summary>
        public void Open_GetWeb_RequestTool_small_View()
        {
            #region Variable Declarations
            WpfCustom webRequest = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebRequest;
            #endregion

            // Double-Click 'DsfWebRequestActivity' custom control
            Mouse.DoubleClick(webRequest, new Point(237, 7));
        }
        
        /// <summary>
        /// Open_Json_Tool_Large_View - Use 'Open_Json_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Json_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Double-Click 'DsfCreateJsonActivity' custom control
            Mouse.DoubleClick(createJson, new Point(158, 13));

            // Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Json_Tool_Large_ViewParams.CreateJsonExists, createJson.Exists, "JSON tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_Json_Tool_Qvi_Large_View - Use 'Open_Json_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Json_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson.OpenQuickVariableInpToggleButton;
            WpfCustom createJson = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Json_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Json_Tool_Qvi_Large_ViewParams.CreateJsonExists, createJson.Exists, "JSON QVI window does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_Large_View_FromContextMenu - Use 'Open_Large_View_FromContextMenuParams' to pass parameters into this method.
        /// </summary>
        public void Open_Large_View_FromContextMenu()
        {
            #region Variable Declarations
            WpfCustom sqlServerDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase;
            WpfMenuItem showLargeView = this.MainStudioWindow.DesignSurfaceContextMenu.ShowLargeView;
            WpfButton newDbSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.NewDbSourceButton;
            #endregion

            // Right-Click 'DsfSqlServerDatabaseActivity' custom control
            Mouse.Click(sqlServerDatabase, MouseButtons.Right, ModifierKeys.None, new Point(143, 6));

            // Click 'Show Large View' menu item
            Mouse.Click(showLargeView, new Point(43, 15));

            // Verify that the 'Exists' property of 'New' button equals 'True'
            Assert.AreEqual(this.Open_Large_View_FromContextMenuParams.NewDbSourceButtonExists, newDbSourceButton.Exists, "\"New button does not exist\"");
        }
        
        /// <summary>
        /// Open_Move_Tool_Large_View - Use 'Open_Move_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Move_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathMove = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove;
            #endregion

            // Double-Click 'DsfPathMove' custom control
            Mouse.DoubleClick(pathMove, new Point(125, 6));

            // Verify that the 'Exists' property of 'DsfPathMove' custom control equals 'True'
            Assert.AreEqual(this.Open_Move_Tool_Large_ViewParams.PathMoveExists, pathMove.Exists, "Move tool large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_MySql_Database_Tool_Small_View
        /// </summary>
        public void Open_MySql_Database_Tool_Small_View()
        {
            #region Variable Declarations
            WpfCustom mySqlDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MySqlDatabase;
            #endregion

            // Double-Click 'DsfMySqlDatabaseActivity' custom control
            Mouse.DoubleClick(mySqlDatabase, new Point(238, 15));
        }
        
        /// <summary>
        /// Open_PostWeb_RequestTool_Large_View - Use 'Open_PostWeb_RequestTool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_PostWeb_RequestTool_Large_View()
        {
            #region Variable Declarations
            WpfCustom webPost = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPost;
            WpfCustom largeView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPost.LargeView;
            #endregion

            // Double-Click 'DsfWebPostActivity' custom control
            Mouse.DoubleClick(webPost, new Point(128, 8));

            // Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
            Assert.AreEqual(this.Open_PostWeb_RequestTool_Large_ViewParams.LargeViewExists, largeView.Exists, "Post web request large view does not exist on design surface.");
        }
        
        /// <summary>
        /// Open_Read_File_Tool_Large_View - Use 'Open_Read_File_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Read_File_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom fileRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead;
            #endregion

            // Double-Click 'DsfFileRead' custom control
            Mouse.DoubleClick(fileRead, new Point(120, 5));

            // Verify that the 'Exists' property of 'DsfFileRead' custom control equals 'True'
            Assert.AreEqual(this.Open_Read_File_Tool_Large_ViewParams.FileReadExists, fileRead.Exists, "Read file large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_Read_Folder_Tool_Large_View - Use 'Open_Read_Folder_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Read_Folder_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom folderRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead;
            #endregion

            // Double-Click 'DsfFolderRead' custom control
            Mouse.DoubleClick(folderRead, new Point(138, 14));

            // Verify that the 'Exists' property of 'DsfFolderRead' custom control equals 'True'
            Assert.AreEqual(this.Open_Read_Folder_Tool_Large_ViewParams.FolderReadExists, folderRead.Exists, "Read Folder large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_Rename_Tool_Large_View - Use 'Open_Rename_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Rename_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathRename = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename;
            #endregion

            // Double-Click 'DsfPathRename' custom control
            Mouse.DoubleClick(pathRename, new Point(145, 7));

            // Verify that the 'Exists' property of 'DsfPathRename' custom control equals 'True'
            Assert.AreEqual(this.Open_Rename_Tool_Large_ViewParams.PathRenameExists, pathRename.Exists, "Rename tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_Sharepoint_Create_Tool_Large_View
        /// </summary>
        public void Open_Sharepoint_Create_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointCreate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreate;
            #endregion

            // Double-Click 'SharepointCreateListItemActivity' custom control
            Mouse.DoubleClick(sharepointCreate, new Point(195, 11));
        }
        
        /// <summary>
        /// Open_Sharepoint_Delete_Tool_Large_View
        /// </summary>
        public void Open_Sharepoint_Delete_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointDelete = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointDelete;
            #endregion

            // Double-Click 'SharepointDeleteListItemActivity' custom control
            Mouse.DoubleClick(sharepointDelete, new Point(218, 11));
        }
        
        /// <summary>
        /// Open_Sharepoint_Read_Tool_Large_View
        /// </summary>
        public void Open_Sharepoint_Read_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead;
            #endregion

            // Double-Click 'SharepointReadListActivity' custom control
            Mouse.DoubleClick(sharepointRead, new Point(195, 7));
        }
        
        /// <summary>
        /// Open_Sharepoint_Update_Tool_Large_View
        /// </summary>
        public void Open_Sharepoint_Update_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointUpdate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUpdate;
            #endregion

            // Double-Click 'SharepointUpdateListItemActivity' custom control
            Mouse.DoubleClick(sharepointUpdate, new Point(230, 11));
        }
        
        /// <summary>
        /// Open_SMTP_Email_Tool_Large_View - Use 'Open_SMTP_Email_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_SMTP_Email_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sMTPEmail = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SMTPEmail;
            WpfCustom largeView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SMTPEmail.LargeView;
            #endregion

            // Double-Click 'DsfSendEmailActivity' custom control
            Mouse.DoubleClick(sMTPEmail, new Point(168, 11));

            // Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
            Assert.AreEqual(this.Open_SMTP_Email_Tool_Large_ViewParams.LargeViewExists, largeView.Exists, "Email Tool large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_SortRecords_Large_View
        /// </summary>
        public void Open_SortRecords_Large_View()
        {
            #region Variable Declarations
            WpfCustom sortRecords = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SortRecords;
            #endregion

            // Double-Click 'DsfSortRecordsActivity' custom control
            Mouse.DoubleClick(sortRecords, new Point(114, 13));
        }
        
        /// <summary>
        /// Open_SQL_Bulk_Insert_Tool_Large_View - Use 'Open_SQL_Bulk_Insert_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_SQL_Bulk_Insert_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sqlBulkInsert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Double-Click 'DsfSqlBulkInsertActivity' custom control
            Mouse.DoubleClick(sqlBulkInsert, new Point(157, 6));

            // Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_SQL_Bulk_Insert_Tool_Large_ViewParams.SqlBulkInsertExists, sqlBulkInsert.Exists, "Sql Bulk Insert large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_SQL_Bulk_Insert_Tool_Qvi_Large_View - Use 'Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_SQL_Bulk_Insert_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert.OpenQuickVariableInpToggleButton;
            WpfCustom sqlBulkInsert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams.SqlBulkInsertExists, sqlBulkInsert.Exists, "Sql Bulk Insert Qvi window on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_Sql_Server_Tool_Large_View - Use 'Open_Sql_Server_Tool_Large_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Open_Sql_Server_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sqlServerDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase;
            WpfCustom largeView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView;
            #endregion

            // Double-Click 'DsfSqlServerDatabaseActivity' custom control
            Mouse.DoubleClick(sqlServerDatabase, new Point(145, 5));

            // Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
            Assert.AreEqual(this.Open_Sql_Server_Tool_Large_ViewExpectedValues.LargeViewExists, largeView.Exists, "SQL Server tool large view does not exist on the design surface.");
        }
        
        /// <summary>
        /// Open_Sql_Server_Tool_small_View
        /// </summary>
        public void Open_Sql_Server_Tool_small_View()
        {
            #region Variable Declarations
            WpfCustom sqlServerDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase;
            #endregion

            // Double-Click 'DsfSqlServerDatabaseActivity' custom control
            Mouse.DoubleClick(sqlServerDatabase, new Point(253, 18));
        }
        
        /// <summary>
        /// Open_System_Information_Tool_Qvi_Large_View - Use 'Open_System_Information_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_System_Information_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo.OpenQuickVariableInpToggleButton;
            WpfCustom gatherSystemInfo = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_System_Information_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfGatherSystemInformationActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_System_Information_Tool_Qvi_Large_ViewParams.GatherSystemInfoExists, gatherSystemInfo.Exists, "System Info QVI window does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_UniqueRecords_Large_View
        /// </summary>
        public void Open_UniqueRecords_Large_View()
        {
            #region Variable Declarations
            WpfCustom unique = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Unique;
            #endregion

            // Double-Click 'DsfUniqueActivity' custom control
            Mouse.DoubleClick(unique, new Point(134, 10));
        }
        
        /// <summary>
        /// Open_Unzip_Tool_Large_View - Use 'Open_Unzip_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Unzip_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom unZip = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip;
            #endregion

            // Double-Click 'DsfUnZip' custom control
            Mouse.DoubleClick(unZip, new Point(102, 14));

            // Verify that the 'Exists' property of 'DsfUnZip' custom control equals 'True'
            Assert.AreEqual(this.Open_Unzip_Tool_Large_ViewParams.UnZipExists, unZip.Exists, "Unzip large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_WebRequest_LargeView - Use 'Open_WebRequest_LargeViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_WebRequest_LargeView()
        {
            #region Variable Declarations
            WpfCustom webRequest = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebRequest;
            WpfCustom largeView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebRequest.LargeView;
            #endregion

            // Double-Click 'DsfWebRequestActivity' custom control
            Mouse.DoubleClick(webRequest, new Point(126, 13));

            // Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
            Assert.AreEqual(this.Open_WebRequest_LargeViewParams.LargeViewExists, largeView.Exists, "Web request large view does not exist on design surface.");
        }
        
        /// <summary>
        /// Open_Write_File_Tool_Large_View - Use 'Open_Write_File_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Write_File_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom fileWrite = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite;
            #endregion

            // Double-Click 'DsfFileWrite' custom control
            Mouse.DoubleClick(fileWrite, new Point(149, 13));

            // Verify that the 'Exists' property of 'DsfFileWrite' custom control equals 'True'
            Assert.AreEqual(this.Open_Write_File_Tool_Large_ViewParams.FileWriteExists, fileWrite.Exists, "Write file large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_Xpath_Tool_Large_View - Use 'Open_Xpath_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Xpath_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom xPath = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Double-Click 'DsfXPathActivity' custom control
            Mouse.DoubleClick(xPath, new Point(113, 12));

            // Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Xpath_Tool_Large_ViewParams.XPathExists, xPath.Exists, "Xpath large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_Xpath_Tool_Qvi_Large_View - Use 'Open_Xpath_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Xpath_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath.OpenQuickVariableInpToggleButton;
            WpfCustom xPath = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Xpath_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Xpath_Tool_Qvi_Large_ViewParams.XPathExists, xPath.Exists, "Xpath Qvi does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_Zip_Tool_Large_View - Use 'Open_Zip_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Zip_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom zip = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip;
            #endregion

            // Double-Click 'DsfZip' custom control
            Mouse.DoubleClick(zip, new Point(124, 12));

            // Verify that the 'Exists' property of 'DsfZip' custom control equals 'True'
            Assert.AreEqual(this.Open_Zip_Tool_Large_ViewParams.ZipExists, zip.Exists, "Zip large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Press_F6 - Use 'Press_F6Params' to pass parameters into this method.
        /// </summary>
        public void Press_F6()
        {
            #region Variable Declarations
            WpfWindow mainStudioWindow = this.MainStudioWindow;
            #endregion

            // Type '{F6}' in 'Warewolf' window
            Keyboard.SendKeys(mainStudioWindow, this.Press_F6Params.MainStudioWindowSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// PressF11_EnterFullScreen - Use 'PressF11_EnterFullScreenParams' to pass parameters into this method.
        /// </summary>
        public void PressF11_EnterFullScreen()
        {
            #region Variable Declarations
            WpfWindow mainStudioWindow = this.MainStudioWindow;
            #endregion

            // Type '{F11}' in 'Warewolf' window
            Keyboard.SendKeys(mainStudioWindow, this.PressF11_EnterFullScreenParams.MainStudioWindowSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Right_Click_Help_Tab
        /// </summary>
        public void Right_Click_Help_Tab()
        {
            #region Variable Declarations
            WpfTabPage helpTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.HelpTab;
            #endregion

            // Right-Click 'Dev2.Studio.ViewModels.Help.HelpViewModel' tab
            Mouse.Click(helpTab, MouseButtons.Right, ModifierKeys.None, new Point(64, 15));
        }
        
        /// <summary>
        /// RightClick_Assign_OnDesignSurface
        /// </summary>
        public void RightClick_Assign_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom multiAssign = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign;
            #endregion

            // Right-Click 'DsfMultiAssignActivity' custom control
            Mouse.Click(multiAssign, MouseButtons.Right, ModifierKeys.None, new Point(115, 10));
        }
        
        /// <summary>
        /// RightClick_BaseConvert_OnDesignSurface
        /// </summary>
        public void RightClick_BaseConvert_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom baseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert;
            #endregion

            // Right-Click 'DsfBaseConvertActivity' custom control
            Mouse.Click(baseConvert, MouseButtons.Right, ModifierKeys.None, new Point(148, 12));
        }
        
        /// <summary>
        /// RightClick_Calculate_OnDesignSurface
        /// </summary>
        public void RightClick_Calculate_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom calculate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate;
            #endregion

            // Right-Click 'DsfCalculateActivity' custom control
            Mouse.Click(calculate, MouseButtons.Right, ModifierKeys.None, new Point(144, 10));
        }
        
        /// <summary>
        /// RightClick_CaseConvert_OnDesignSurface
        /// </summary>
        public void RightClick_CaseConvert_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom caseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert;
            #endregion

            // Right-Click 'DsfCaseConvertActivity' custom control
            Mouse.Click(caseConvert, MouseButtons.Right, ModifierKeys.None, new Point(156, 10));
        }
        
        /// <summary>
        /// RightClick_Comment_OnDesignSurface
        /// </summary>
        public void RightClick_Comment_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom comment = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Comment;
            #endregion

            // Right-Click 'DsfCommentActivity' custom control
            Mouse.Click(comment, MouseButtons.Right, ModifierKeys.None, new Point(121, 10));
        }
        
        /// <summary>
        /// RightClick_Copy_OnDesignSurface
        /// </summary>
        public void RightClick_Copy_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathCopy = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy;
            #endregion

            // Right-Click 'DsfPathCopy' custom control
            Mouse.Click(pathCopy, MouseButtons.Right, ModifierKeys.None, new Point(104, 10));
        }
        
        /// <summary>
        /// RightClick_CountRecords_OnDesignSurface
        /// </summary>
        public void RightClick_CountRecords_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom countRecordset = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CountRecordset;
            #endregion

            // Right-Click 'DsfCountRecordsetActivity' custom control
            Mouse.Click(countRecordset, MouseButtons.Right, ModifierKeys.None, new Point(131, 10));
        }
        
        /// <summary>
        /// RightClick_CreateJSON_OnDesignSurface
        /// </summary>
        public void RightClick_CreateJSON_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Right-Click 'DsfCreateJsonActivity' custom control
            Mouse.Click(createJson, MouseButtons.Right, ModifierKeys.None, new Point(128, 9));
        }
        
        /// <summary>
        /// RightClick_CreateTool_OnDesignSurface
        /// </summary>
        public void RightClick_CreateTool_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathCreate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate;
            #endregion

            // Right-Click 'DsfPathCreate' custom control
            Mouse.Click(pathCreate, MouseButtons.Right, ModifierKeys.None, new Point(108, 14));
        }
        
        /// <summary>
        /// RightClick_DataMerge_OnDesignSurface
        /// </summary>
        public void RightClick_DataMerge_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataMerge = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Right-Click 'DsfDataMergeActivity' custom control
            Mouse.Click(dataMerge, MouseButtons.Right, ModifierKeys.None, new Point(140, 7));
        }
        
        /// <summary>
        /// RightClick_DataSplit_OnDesignSurface
        /// </summary>
        public void RightClick_DataSplit_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataSplit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Right-Click 'DsfDataSplitActivity' custom control
            Mouse.Click(dataSplit, MouseButtons.Right, ModifierKeys.None, new Point(153, 6));
        }
        
        /// <summary>
        /// RightClick_DateTime_OnDesignSurface
        /// </summary>
        public void RightClick_DateTime_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dateTime = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTime;
            #endregion

            // Right-Click 'DsfDateTimeActivity' custom control
            Mouse.Click(dateTime, MouseButtons.Right, ModifierKeys.None, new Point(145, 13));
        }
        
        /// <summary>
        /// RightClick_DateTimeDifference_OnDesignSurface
        /// </summary>
        public void RightClick_DateTimeDifference_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dateTimeDifference = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTimeDifference;
            #endregion

            // Right-Click 'DsfDateTimeDifferenceActivity' custom control
            Mouse.Click(dateTimeDifference, MouseButtons.Right, ModifierKeys.None, new Point(174, 10));
        }
        
        /// <summary>
        /// RightClick_Decision_OnDesignSurface
        /// </summary>
        public void RightClick_Decision_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom decision = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Decision;
            #endregion

            // Right-Click 'FlowDecision' custom control
            Mouse.Click(decision, MouseButtons.Right, ModifierKeys.None, new Point(28, 22));
        }
        
        /// <summary>
        /// RightClick_Delete_OnDesignSurface
        /// </summary>
        public void RightClick_Delete_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathDelete = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathDelete;
            #endregion

            // Right-Click 'DsfPathDelete' custom control
            Mouse.Click(pathDelete, MouseButtons.Right, ModifierKeys.None, new Point(100, 10));
        }
        
        /// <summary>
        /// RightClick_DeleteRecord_OnDesignSurface
        /// </summary>
        public void RightClick_DeleteRecord_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom deleteRecord = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DeleteRecord;
            #endregion

            // Right-Click 'DsfDeleteRecordActivity' custom control
            Mouse.Click(deleteRecord, MouseButtons.Right, ModifierKeys.None, new Point(116, 9));
        }
        
        /// <summary>
        /// RightClick_DotNetDllConnector_OnDesignSurface
        /// </summary>
        public void RightClick_DotNetDllConnector_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dotNetDll = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll;
            #endregion

            // Right-Click 'DsfDotNetDllActivity' custom control
            Mouse.Click(dotNetDll, MouseButtons.Right, ModifierKeys.None, new Point(164, 10));
        }
        
        /// <summary>
        /// RightClick_DropboxFileOperation_OnDesignSurface
        /// </summary>
        public void RightClick_DropboxFileOperation_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dropBox_DOWNLOAD = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DropBox_DOWNLOAD;
            #endregion

            // Right-Click 'DsfDropBoxFileActivity' custom control
            Mouse.Click(dropBox_DOWNLOAD, MouseButtons.Right, ModifierKeys.None, new Point(181, 11));
        }
        
        /// <summary>
        /// RightClick_Email_OnDesignSurface
        /// </summary>
        public void RightClick_Email_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sMTPEmail = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SMTPEmail;
            #endregion

            // Right-Click 'DsfSendEmailActivity' custom control
            Mouse.Click(sMTPEmail, MouseButtons.Right, ModifierKeys.None, new Point(129, 11));
        }
        
        /// <summary>
        /// RightClick_ExecuteCommandLine_OnDesignSurface
        /// </summary>
        public void RightClick_ExecuteCommandLine_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom executeCommandLine = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            #endregion

            // Right-Click 'DsfExecuteCommandLineActivity' custom control
            Mouse.Click(executeCommandLine, MouseButtons.Right, ModifierKeys.None, new Point(165, 13));
        }
        
        /// <summary>
        /// RightClick_Explorer_First_Remote_Server_First_Item
        /// </summary>
        public void RightClick_Explorer_First_Remote_Server_First_Item()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.FirstRemoteServer.FirstItem;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, MouseButtons.Right, ModifierKeys.None, new Point(107, 9));
        }
        
        /// <summary>
        /// RightClick_Explorer_Localhost_First_Item - Use 'RightClick_Explorer_Localhost_First_ItemParams' to pass parameters into this method.
        /// </summary>
        public void RightClick_Explorer_Localhost_First_Item()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            WpfMenuItem open = this.MainStudioWindow.ExplorerContextMenu.Open;
            WpfMenuItem showDependencies = this.MainStudioWindow.ExplorerContextMenu.ShowDependencies;
            WpfMenuItem delete = this.MainStudioWindow.ExplorerContextMenu.Delete;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, MouseButtons.Right, ModifierKeys.None, new Point(107, 9));

            // Verify that the 'Exists' property of 'Open' menu item equals 'True'
            Assert.AreEqual(this.RightClick_Explorer_Localhost_First_ItemParams.OpenExists, open.Exists, "Open does not exist in explorer context menu.");

            // Verify that the 'Exists' property of 'Show Dependencies' menu item equals 'True'
            Assert.AreEqual(this.RightClick_Explorer_Localhost_First_ItemParams.ShowDependenciesExists, showDependencies.Exists, "ShowDependencies does not exist in explorer context menu.");

            // Verify that the 'Exists' property of 'Delete' menu item equals 'True'
            Assert.AreEqual(this.RightClick_Explorer_Localhost_First_ItemParams.DeleteExists, delete.Exists, "Delete does not exist in ExplorerContextMenu");
        }
        
        /// <summary>
        /// RightClick_FindIndex_OnDesignSurface
        /// </summary>
        public void RightClick_FindIndex_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom findIndex = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindIndex;
            #endregion

            // Right-Click 'DsfIndexActivity' custom control
            Mouse.Click(findIndex, MouseButtons.Right, ModifierKeys.None, new Point(113, 8));
        }
        
        /// <summary>
        /// RightClick_FindRecordIndex_OnDesignSurface
        /// </summary>
        public void RightClick_FindRecordIndex_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom findRecordsIndex = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindRecordsIndex;
            #endregion

            // Right-Click 'DsfFindRecordsMultipleCriteriaActivity' custom control
            Mouse.Click(findRecordsIndex, MouseButtons.Right, ModifierKeys.None, new Point(191, 11));
        }
        
        /// <summary>
        /// RightClick_ForEach_OnDesignSurface
        /// </summary>
        public void RightClick_ForEach_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom forEach = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach;
            #endregion

            // Right-Click 'DsfForEachActivity' custom control
            Mouse.Click(forEach, MouseButtons.Right, ModifierKeys.None, new Point(137, 9));
        }
        
        /// <summary>
        /// RightClick_FormatNumber_OnDesignSurface
        /// </summary>
        public void RightClick_FormatNumber_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom formatNumber = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber;
            #endregion

            // Right-Click 'DsfNumberFormatActivity' custom control
            Mouse.Click(formatNumber, MouseButtons.Right, ModifierKeys.None, new Point(143, 9));
        }
        
        /// <summary>
        /// RightClick_Length_OnDesignSurface
        /// </summary>
        public void RightClick_Length_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom length = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Length;
            #endregion

            // Right-Click 'DsfRecordsetLengthActivity' custom control
            Mouse.Click(length, MouseButtons.Right, ModifierKeys.None, new Point(97, 10));
        }
        
        /// <summary>
        /// RightClick_Move_OnDesignSurface
        /// </summary>
        public void RightClick_Move_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathMove = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove;
            #endregion

            // Right-Click 'DsfPathMove' custom control
            Mouse.Click(pathMove, MouseButtons.Right, ModifierKeys.None, new Point(98, 11));
        }
        
        /// <summary>
        /// RightClick_MySQLConnector_OnDesignSurface
        /// </summary>
        public void RightClick_MySQLConnector_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom mySqlDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MySqlDatabase;
            #endregion

            // Right-Click 'DsfMySqlDatabaseActivity' custom control
            Mouse.Click(mySqlDatabase, MouseButtons.Right, ModifierKeys.None, new Point(202, 10));
        }
        
        /// <summary>
        /// RightClick_New_Workflow_Tab
        /// </summary>
        public void RightClick_New_Workflow_Tab()
        {
            #region Variable Declarations
            WpfTabPage workflowTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab;
            #endregion

            // Right-Click 'Dev2.Studio.ViewModels.Workflow.WorkflowDesignerVi...' tab
            Mouse.Click(workflowTab, MouseButtons.Right, ModifierKeys.None, new Point(63, 18));
        }
        
        /// <summary>
        /// RightClick_Random_OnDesignSurface
        /// </summary>
        public void RightClick_Random_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom random = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random;
            #endregion

            // Right-Click 'DsfRandomActivity' custom control
            Mouse.Click(random, MouseButtons.Right, ModifierKeys.None, new Point(107, 13));
        }
        
        /// <summary>
        /// RightClick_ReadFile_OnDesignSurface
        /// </summary>
        public void RightClick_ReadFile_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom fileRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead;
            #endregion

            // Right-Click 'DsfFileRead' custom control
            Mouse.Click(fileRead, MouseButtons.Right, ModifierKeys.None, new Point(99, 14));
        }
        
        /// <summary>
        /// RightClick_ReadFolder_OnDesignSurface
        /// </summary>
        public void RightClick_ReadFolder_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom folderRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead;
            #endregion

            // Right-Click 'DsfFolderRead' custom control
            Mouse.Click(folderRead, MouseButtons.Right, ModifierKeys.None, new Point(115, 12));
        }
        
        /// <summary>
        /// RightClick_Rename_OnDesignSurface
        /// </summary>
        public void RightClick_Rename_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathRename = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename;
            #endregion

            // Right-Click 'DsfPathRename' custom control
            Mouse.Click(pathRename, MouseButtons.Right, ModifierKeys.None, new Point(103, 7));
        }
        
        /// <summary>
        /// RightClick_Replace_OnDesignSurface
        /// </summary>
        public void RightClick_Replace_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom replace = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Replace;
            #endregion

            // Right-Click 'DsfReplaceActivity' custom control
            Mouse.Click(replace, MouseButtons.Right, ModifierKeys.None, new Point(100, 7));
        }
        
        /// <summary>
        /// RightClick_ScriptTool_OnDesignSurface
        /// </summary>
        public void RightClick_ScriptTool_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom scripting = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Scripting;
            #endregion

            // Right-Click 'DsfScriptingActivity' custom control
            Mouse.Click(scripting, MouseButtons.Right, ModifierKeys.None, new Point(110, 11));
        }
        
        /// <summary>
        /// RightClick_Sequence_OnDesignSurface
        /// </summary>
        public void RightClick_Sequence_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sequence = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Sequence;
            #endregion

            // Right-Click 'DsfSequenceActivity' custom control
            Mouse.Click(sequence, MouseButtons.Right, ModifierKeys.None, new Point(119, 8));
        }
        
        /// <summary>
        /// RightClick_SharepointCreateListItem_OnDesignSurface
        /// </summary>
        public void RightClick_SharepointCreateListItem_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointCreate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreate;
            #endregion

            // Right-Click 'SharepointCreateListItemActivity' custom control
            Mouse.Click(sharepointCreate, MouseButtons.Right, ModifierKeys.None, new Point(199, 12));
        }
        
        /// <summary>
        /// RightClick_SharepointDelete_OnDesignSurface
        /// </summary>
        public void RightClick_SharepointDelete_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointDelete = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointDelete;
            #endregion

            // Right-Click 'SharepointDeleteListItemActivity' custom control
            Mouse.Click(sharepointDelete, MouseButtons.Right, ModifierKeys.None, new Point(217, 8));
        }
        
        /// <summary>
        /// RightClick_SharepointRead_OnDesignSurface
        /// </summary>
        public void RightClick_SharepointRead_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead;
            #endregion

            // Right-Click 'SharepointReadListActivity' custom control
            Mouse.Click(sharepointRead, MouseButtons.Right, ModifierKeys.None, new Point(203, 9));
        }
        
        /// <summary>
        /// RightClick_SharepointUpdate_OnDesignSurface
        /// </summary>
        public void RightClick_SharepointUpdate_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointUpdate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUpdate;
            #endregion

            // Right-Click 'SharepointUpdateListItemActivity' custom control
            Mouse.Click(sharepointUpdate, MouseButtons.Right, ModifierKeys.None, new Point(210, 5));
        }
        
        /// <summary>
        /// RightClick_SortRecords_OnDesignSurface
        /// </summary>
        public void RightClick_SortRecords_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sortRecords = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SortRecords;
            #endregion

            // Right-Click 'DsfSortRecordsActivity' custom control
            Mouse.Click(sortRecords, MouseButtons.Right, ModifierKeys.None, new Point(118, 8));
        }
        
        /// <summary>
        /// RightClick_SQLConnector_OnDesignSurface
        /// </summary>
        public void RightClick_SQLConnector_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sqlBulkInsert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Right-Click 'DsfSqlBulkInsertActivity' custom control
            Mouse.Click(sqlBulkInsert, MouseButtons.Right, ModifierKeys.None, new Point(143, 6));
        }
        
        /// <summary>
        /// RightClick_SqlServerConnector_OnDesignSurface
        /// </summary>
        public void RightClick_SqlServerConnector_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sqlServerDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase;
            #endregion

            // Right-Click 'DsfSqlServerDatabaseActivity' custom control
            Mouse.Click(sqlServerDatabase, MouseButtons.Right, ModifierKeys.None, new Point(198, 8));
        }
        
        /// <summary>
        /// RightClick_Switch_OnDesignSurface
        /// </summary>
        public void RightClick_Switch_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom switch1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Switch;
            #endregion

            // Right-Click 'FlowSwitch`1[String]' custom control
            Mouse.Click(switch1, MouseButtons.Right, ModifierKeys.None, new Point(46, 15));
        }
        
        /// <summary>
        /// RightClick_SystemInformation_OnDesignSurface
        /// </summary>
        public void RightClick_SystemInformation_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom gatherSystemInfo = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo;
            #endregion

            // Right-Click 'DsfGatherSystemInformationActivity' custom control
            Mouse.Click(gatherSystemInfo, MouseButtons.Right, ModifierKeys.None, new Point(217, 10));
        }
        
        /// <summary>
        /// RightClick_UniqueRecords_OnDesignSurface
        /// </summary>
        public void RightClick_UniqueRecords_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom unique = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Unique;
            #endregion

            // Right-Click 'DsfUniqueActivity' custom control
            Mouse.Click(unique, MouseButtons.Right, ModifierKeys.None, new Point(133, 11));
        }
        
        /// <summary>
        /// RightClick_Unzip_OnDesignSurface
        /// </summary>
        public void RightClick_Unzip_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom unZip = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip;
            #endregion

            // Right-Click 'DsfUnZip' custom control
            Mouse.Click(unZip, MouseButtons.Right, ModifierKeys.None, new Point(101, 10));
        }
        
        /// <summary>
        /// RightClick_WebRequest_OnDesignSurface
        /// </summary>
        public void RightClick_WebRequest_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom webRequest = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebRequest;
            #endregion

            // Right-Click 'DsfWebRequestActivity' custom control
            Mouse.Click(webRequest, MouseButtons.Right, ModifierKeys.None, new Point(165, 8));
        }
        
        /// <summary>
        /// RightClick_WriteFile_OnDesignSurface
        /// </summary>
        public void RightClick_WriteFile_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom fileWrite = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite;
            #endregion

            // Right-Click 'DsfFileWrite' custom control
            Mouse.Click(fileWrite, MouseButtons.Right, ModifierKeys.None, new Point(96, 12));
        }
        
        /// <summary>
        /// RightClick_XPath_OnDesignSurface
        /// </summary>
        public void RightClick_XPath_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom xPath = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Right-Click 'DsfXPathActivity' custom control
            Mouse.Click(xPath, MouseButtons.Right, ModifierKeys.None, new Point(99, 8));
        }
        
        /// <summary>
        /// RightClick_Zip_OnDesignSurface
        /// </summary>
        public void RightClick_Zip_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom zip = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip;
            #endregion

            // Right-Click 'DsfZip' custom control
            Mouse.Click(zip, MouseButtons.Right, ModifierKeys.None, new Point(95, 12));
        }
        
        /// <summary>
        /// Select_Copy_FromContextMenu
        /// </summary>
        public void Select_Copy_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem copy = this.MainStudioWindow.DesignSurfaceContextMenu.Copy;
            #endregion

            // Click 'Copy' menu item
            Mouse.Click(copy, new Point(27, 18));
        }
        
        /// <summary>
        /// Select_CopyAsImage_FromContextMenu
        /// </summary>
        public void Select_CopyAsImage_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem copyasImage = this.MainStudioWindow.DesignSurfaceContextMenu.CopyasImage;
            #endregion

            // Click 'Copy as Image' menu item
            Mouse.Click(copyasImage, new Point(62, 22));
        }
        
        /// <summary>
        /// Select_Cut_FromContextMenu
        /// </summary>
        public void Select_Cut_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem cut = this.MainStudioWindow.DesignSurfaceContextMenu.Cut;
            #endregion

            // Click 'Cut' menu item
            Mouse.Click(cut, new Point(53, 16));
        }
        
        /// <summary>
        /// Select_Delete_FromContextMenu
        /// </summary>
        public void Select_Delete_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem delete = this.MainStudioWindow.DesignSurfaceContextMenu.Delete;
            #endregion

            // Click 'Delete' menu item
            Mouse.Click(delete, new Point(27, 18));
        }
        
        /// <summary>
        /// Select_Delete_FromExplorerContextMenu - Use 'Select_Delete_FromExplorerContextMenuParams' to pass parameters into this method.
        /// </summary>
        public void Select_Delete_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem delete = this.MainStudioWindow.ExplorerContextMenu.Delete;
            WpfButton yesButton = this.MessageBoxWindow.YesButton;
            #endregion

            // Click 'Delete' menu item
            Mouse.Click(delete, new Point(87, 12));

            // Verify that the 'Exists' property of 'Yes' button equals 'True'
            Assert.AreEqual(this.Select_Delete_FromExplorerContextMenuParams.YesButtonExists, yesButton.Exists, "Message box Yes button does not exist");
        }
        
        /// <summary>
        /// Select_DeleteRow_FromContextMenu
        /// </summary>
        public void Select_DeleteRow_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem deleteRow = this.MainStudioWindow.DesignSurfaceContextMenu.DeleteRow;
            #endregion

            // Click 'Delete Row' menu item
            Mouse.Click(deleteRow, new Point(74, 9));
        }
        
        /// <summary>
        /// Select_Deploy_FromExplorerContextMenu
        /// </summary>
        public void Select_Deploy_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem deploy = this.MainStudioWindow.ExplorerContextMenu.Deploy;
            #endregion

            // Click 'Deploy' menu item
            Mouse.Click(deploy, new Point(57, 11));
        }
        
        /// <summary>
        /// Select_Dev2TestingDB_From_DB_Source_Wizard_Database_Combobox - Use 'Select_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams' to pass parameters into this method.
        /// </summary>
        public void Select_Dev2TestingDB_From_DB_Source_Wizard_Database_Combobox()
        {
            #region Variable Declarations
            WpfCustom databaseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.DatabaseCombobox;
            WpfCustom comboboxListItemAsDev2TestingDB = this.MainStudioWindow.ComboboxListItemAsDev2TestingDB;
            WpfText uIDev2TestingDBText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.UIDatabaseComboxBoxCustom.UIDev2TestingDBText;
            #endregion

            // Click 'DatabaseComboxBox' custom control
            Mouse.Click(databaseCombobox, new Point(221, 9));

            // Click 'Dev2TestingDB' custom control
            Mouse.Click(comboboxListItemAsDev2TestingDB, new Point(129, 19));

            // Verify that the 'DisplayText' property of 'Dev2TestingDB' label equals 'Dev2TestingDB'
            Assert.AreEqual(this.Select_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams.UIDev2TestingDBTextDisplayText, uIDev2TestingDBText.DisplayText);
        }
        
        /// <summary>
        /// Select_First_Item_From_DotNet_DLL_Large_View_Source_Combobox
        /// </summary>
        public void Select_First_Item_From_DotNet_DLL_Large_View_Source_Combobox()
        {
            #region Variable Declarations
            WpfComboBox sourcesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.SourcesComboBox;
            WpfListItem listItem1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.SourcesComboBox.ListItem1;
            #endregion

            // Click 'SourcesComboBox' combo box
            Mouse.Click(sourcesComboBox, new Point(175, 9));

            // Click 'Dev2.Common.Interfaces.Core.PluginSourceDefinition' list item
            Mouse.Click(listItem1, new Point(163, 17));
        }
        
        /// <summary>
        /// Select_GetCountries_From_SQL_Server_Large_View_Action_Combobox - Use 'Select_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Select_GetCountries_From_SQL_Server_Large_View_Action_Combobox()
        {
            #region Variable Declarations
            WpfComboBox actionsCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.ActionsCombobox;
            WpfListItem getCountriesListItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.ActionsCombobox.GetCountriesListItem;
            #endregion

            // Click 'ActionsComboBox' combo box
            Mouse.Click(actionsCombobox, new Point(216, 7));

            // Click 'GetCountries' list item
            Mouse.Click(getCountriesListItem, new Point(137, 7));

            // Verify that the 'SelectedItem' property of 'ActionsComboBox' combo box equals 'dbo.GetCountries'
            Assert.AreEqual(this.Select_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues.ActionsComboboxSelectedItem, actionsCombobox.SelectedItem, "GetCountries is not selected in SQL server large view action combobox.");
        }
        
        /// <summary>
        /// Select_http_From_Server_Source_Wizard_Address_Protocol_Dropdown - Use 'Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams' to pass parameters into this method.
        /// </summary>
        public void Select_http_From_Server_Source_Wizard_Address_Protocol_Dropdown()
        {
            #region Variable Declarations
            WpfCustom comboboxListItemAsHttp = this.MainStudioWindow.ComboboxListItemAsHttp;
            WpfText httpSelectedItemText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.ProtocolCombobox.HttpSelectedItemText;
            WpfEdit addressEditBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.AddressComboBox.AddressEditBox;
            #endregion

            // Click 'http' custom control
            Mouse.Click(comboboxListItemAsHttp, new Point(31, 12));

            // Verify that the 'DisplayText' property of 'http' label equals 'http'
            Assert.AreEqual(this.Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams.HttpSelectedItemTextDisplayText, httpSelectedItemText.DisplayText, "Server source wizard address protocol is not equal to http.");

            // Verify that the 'Exists' property of 'Text' text box equals 'True'
            Assert.AreEqual(this.Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams.AddressEditBoxExists, addressEditBox.Exists, "Server source wizard address textbox does not exist");
        }
        
        /// <summary>
        /// Select_InsertRow_FromContextMenu
        /// </summary>
        public void Select_InsertRow_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem insertRow = this.MainStudioWindow.DesignSurfaceContextMenu.InsertRow;
            #endregion

            // Click 'Insert Row' menu item
            Mouse.Click(insertRow, new Point(66, 19));
        }
        
        /// <summary>
        /// Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_Combobox - Use 'Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams' to pass parameters into this method.
        /// </summary>
        public void Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_Combobox()
        {
            #region Variable Declarations
            WpfButton toggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DeployTab.WorkSurfaceContext.DestinationServerConectControl.Combobox.ToggleButton;
            WpfCustom comboboxListItemAsNewRemoteServer = this.MainStudioWindow.ComboboxListItemAsNewRemoteServer;
            WpfCustom comboboxListItemAsLocalhostConnected = this.MainStudioWindow.ComboboxListItemAsLocalhostConnected;
            WpfText remoteConnectionIntegrationText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DeployTab.WorkSurfaceContext.SourceServerConectControl.Combobox.RemoteConnectionIntegrationText;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleButton, new Point(230, 9));

            // Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
            Assert.AreEqual(this.Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams.ComboboxListItemAsNewRemoteServerExists, comboboxListItemAsNewRemoteServer.Exists, "New Remote Server... option does not exist in Destination server combobox.");

            // Verify that the 'Exists' property of 'localhost (Connected)' custom control equals 'True'
            Assert.AreEqual(this.Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams.ComboboxListItemAsLocalhostConnectedExists, comboboxListItemAsLocalhostConnected.Exists, "Remote Connection Integration option does not exist in Destination server combobo" +
                    "x.");

            // Click 'localhost (Connected)' custom control
            Mouse.Click(comboboxListItemAsLocalhostConnected, new Point(226, 13));

            // Verify that the 'DisplayText' property of 'Remote Connection Integration' label equals 'Remote Connection Integration'
            Assert.AreEqual(this.Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams.RemoteConnectionIntegrationTextDisplayText, remoteConnectionIntegrationText.DisplayText, "Selected source server in deploy is not Remote Connection Integration.");
        }
        
        /// <summary>
        /// Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_Dropdown - Use 'Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams' to pass parameters into this method.
        /// </summary>
        public void Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_Dropdown()
        {
            #region Variable Declarations
            WpfButton toggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.ServerTypeComboBox.ToggleButton;
            WpfText microsoftSQLServerText = this.MainStudioWindow.ComboboxListItemAsMicrosoftSQLServer.MicrosoftSQLServerText;
            WpfText microsoftSQLServer = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.ServerTypeComboBox.MicrosoftSQLServer;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleButton, new Point(625, 11));

            // Verify that the 'Exists' property of 'Microsoft SQL Server' label equals 'True'
            Assert.AreEqual(this.Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams.MicrosoftSQLServerTextExists, microsoftSQLServerText.Exists, "Microsoft SQL Server does not exist as an option in new DB source wizard type com" +
                    "bobox.");

            // Click 'Microsoft SQL Server' label
            Mouse.Click(microsoftSQLServerText, new Point(118, 6));

            // Verify that the 'DisplayText' property of 'Microsoft SQL Server' label equals 'Microsoft SQL Server'
            Assert.AreEqual(this.Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams.MicrosoftSQLServerDisplayText, microsoftSQLServer.DisplayText, "Microsoft SQL Server is not selected in DB source wizard.");
        }
        
        /// <summary>
        /// Select_NewDatabaseSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewDatabaseSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newDatabaseSource = this.MainStudioWindow.ExplorerContextMenu.NewDatabaseSource;
            #endregion

            // Click 'New Database Source' menu item
            Mouse.Click(newDatabaseSource, new Point(72, 14));
        }
        
        /// <summary>
        /// Select_NewDatabaseSource_FromSqlServerTool - Use 'Select_NewDatabaseSource_FromSqlServerToolParams' to pass parameters into this method.
        /// </summary>
        public void Select_NewDatabaseSource_FromSqlServerTool()
        {
            #region Variable Declarations
            WpfButton newDbSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.NewDbSourceButton;
            WpfText microsoftSQLServer = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.ServerTypeComboBox.MicrosoftSQLServer;
            WpfEdit userNameTextBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DBSourceWizardTab.WorkSurfaceContext.UserNameTextBox;
            WpfEdit passwordTextBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DBSourceWizardTab.WorkSurfaceContext.PasswordTextBox;
            #endregion

            // Click 'New' button
            Mouse.Click(newDbSourceButton, new Point(16, 13));

            // Verify that the 'DisplayText' property of 'Microsoft SQL Server' label equals 'Microsoft SQL Server'
            Assert.AreEqual(this.Select_NewDatabaseSource_FromSqlServerToolParams.MicrosoftSQLServerDisplayText, microsoftSQLServer.DisplayText, "Microsoft SQL Server is not selected in DB source wizard.");

            // Verify that the 'Exists' property of 'UserNameTextBox' text box equals 'True'
            Assert.AreEqual(this.Select_NewDatabaseSource_FromSqlServerToolParams.UserNameTextBoxExists, userNameTextBox.Exists, "User name testbox does not exist on db source wizard.");

            // Verify that the 'Exists' property of 'PasswordTextBox' text box equals 'True'
            Assert.AreEqual(this.Select_NewDatabaseSource_FromSqlServerToolParams.PasswordTextBoxExists, passwordTextBox.Exists, "Password textbox does not exist on database source wizard.");
        }
        
        /// <summary>
        /// Select_NewDropboxSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewDropboxSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newDropboxSource = this.MainStudioWindow.ExplorerContextMenu.NewDropboxSource;
            #endregion

            // Click 'New Dropbox Source' menu item
            Mouse.Click(newDropboxSource, new Point(119, 15));
        }
        
        /// <summary>
        /// Select_NewEmailSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewEmailSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newEmailSource = this.MainStudioWindow.ExplorerContextMenu.NewEmailSource;
            #endregion

            // Click 'New Email Source' menu item
            Mouse.Click(newEmailSource, new Point(101, 13));
        }
        
        /// <summary>
        /// Select_NewFolder_FromExplorerContextMenu
        /// </summary>
        public void Select_NewFolder_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newFolder = this.MainStudioWindow.ExplorerContextMenu.NewFolder;
            #endregion

            // Click 'New Folder' menu item
            Mouse.Click(newFolder, new Point(87, 14));
        }
        
        /// <summary>
        /// Select_NewPluginSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewPluginSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newPluginSource = this.MainStudioWindow.ExplorerContextMenu.NewPluginSource;
            #endregion

            // Click 'New Plugin Source' menu item
            Mouse.Click(newPluginSource, new Point(78, 11));
        }
        
        /// <summary>
        /// Select_NewServerSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewServerSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newServerSource = this.MainStudioWindow.ExplorerContextMenu.NewServerSource;
            #endregion

            // Click 'New Server Source' menu item
            Mouse.Click(newServerSource, new Point(44, 13));
        }
        
        /// <summary>
        /// Select_NewSharepointSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewSharepointSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newSharepointSource = this.MainStudioWindow.ExplorerContextMenu.NewSharepointSource;
            #endregion

            // Click 'New Sharepoint Source' menu item
            Mouse.Click(newSharepointSource, new Point(126, 17));
        }
        
        /// <summary>
        /// Select_NewWebSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewWebSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newWebServiceSource = this.MainStudioWindow.ExplorerContextMenu.NewWebServiceSource;
            #endregion

            // Click 'New Web Service Source' menu item
            Mouse.Click(newWebServiceSource, new Point(82, 20));
        }
        
        /// <summary>
        /// Select_NewWorkflow_FromExplorerContextMenu
        /// </summary>
        public void Select_NewWorkflow_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newWorkflow = this.MainStudioWindow.ExplorerContextMenu.NewWorkflow;
            #endregion

            // Click 'New Workflow Service' menu item
            Mouse.Click(newWorkflow, new Point(30, 11));
        }
        
        /// <summary>
        /// Select_Next_From_DotNet_DLL_Large_View_Action_Combobox - Use 'Select_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Select_Next_From_DotNet_DLL_Large_View_Action_Combobox()
        {
            #region Variable Declarations
            WpfComboBox actionsComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ActionsComboBox;
            WpfListItem nextListItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ActionsComboBox.NextListItem;
            #endregion

            // Click 'ActionsComboBox' combo box
            Mouse.Click(actionsComboBox, new Point(216, 7));

            // Click 'Next' list item
            Mouse.Click(nextListItem, new Point(137, 7));

            // Verify that the 'SelectedItem' property of 'ActionsComboBox' combo box equals 'Next'
            Assert.AreEqual(this.Select_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues.ActionsComboBoxSelectedItem, actionsComboBox.SelectedItem, "System.Random is not selected in DotNet DLL tool large view namespace combobox.");
        }
        
        /// <summary>
        /// Select_Open_FromExplorerContextMenu
        /// </summary>
        public void Select_Open_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem open = this.MainStudioWindow.ExplorerContextMenu.Open;
            #endregion

            // Click 'Open' menu item
            Mouse.Click(open, new Point(30, 11));
        }
        
        /// <summary>
        /// Select_Paste_FromContextMenu
        /// </summary>
        public void Select_Paste_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem paste = this.MainStudioWindow.DesignSurfaceContextMenu.Paste;
            #endregion

            // Click 'Paste' menu item
            Mouse.Click(paste, new Point(52, 16));
        }
        
        /// <summary>
        /// Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_Combobox - Use 'Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams' to pass parameters into this method.
        /// </summary>
        public void Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_Combobox()
        {
            #region Variable Declarations
            WpfButton toggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DeployTab.WorkSurfaceContext.DestinationServerConectControl.Combobox.ToggleButton;
            WpfCustom comboboxListItemAsNewRemoteServer = this.MainStudioWindow.ComboboxListItemAsNewRemoteServer;
            WpfCustom comboboxListItemAsRemoteConnectionIntegration = this.MainStudioWindow.ComboboxListItemAsRemoteConnectionIntegration;
            WpfText remoteConnectionIntegrationText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DeployTab.WorkSurfaceContext.DestinationServerConectControl.Combobox.RemoteConnectionIntegrationText;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleButton, new Point(230, 9));

            // Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
            Assert.AreEqual(this.Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams.ComboboxListItemAsNewRemoteServerExists, comboboxListItemAsNewRemoteServer.Exists, "New Remote Server... option does not exist in Destination server combobox.");

            // Verify that the 'Exists' property of 'Remote Connection Integration' custom control equals 'True'
            Assert.AreEqual(this.Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams.ComboboxListItemAsRemoteConnectionIntegrationExists, comboboxListItemAsRemoteConnectionIntegration.Exists, "Remote Connection Integration option does not exist in Destination server combobo" +
                    "x.");

            // Click 'Remote Connection Integration' custom control
            Mouse.Click(comboboxListItemAsRemoteConnectionIntegration, new Point(226, 13));

            // Verify that the 'DisplayText' property of 'Remote Connection Integration' label equals 'Remote Connection Integration'
            Assert.AreEqual(this.Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams.RemoteConnectionIntegrationTextDisplayText, remoteConnectionIntegrationText.DisplayText, "Selected destination server in deploy is not Remote Connection Integration.");
        }
        
        /// <summary>
        /// Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_Combobox - Use 'Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams' to pass parameters into this method.
        /// </summary>
        public void Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_Combobox()
        {
            #region Variable Declarations
            WpfButton toggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DeployTab.WorkSurfaceContext.SourceServerConectControl.Combobox.ToggleButton;
            WpfCustom comboboxListItemAsNewRemoteServer = this.MainStudioWindow.ComboboxListItemAsNewRemoteServer;
            WpfCustom comboboxListItemAsRemoteConnectionIntegration = this.MainStudioWindow.ComboboxListItemAsRemoteConnectionIntegration;
            WpfText remoteConnectionIntegrationText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DeployTab.WorkSurfaceContext.SourceServerConectControl.Combobox.RemoteConnectionIntegrationText;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleButton, new Point(230, 9));

            // Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
            Assert.AreEqual(this.Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams.ComboboxListItemAsNewRemoteServerExists, comboboxListItemAsNewRemoteServer.Exists, "New Remote Server... option does not exist in Destination server combobox.");

            // Verify that the 'Exists' property of 'Remote Connection Integration' custom control equals 'True'
            Assert.AreEqual(this.Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams.ComboboxListItemAsRemoteConnectionIntegrationExists, comboboxListItemAsRemoteConnectionIntegration.Exists, "Remote Connection Integration option does not exist in Destination server combobo" +
                    "x.");

            // Click 'Remote Connection Integration' custom control
            Mouse.Click(comboboxListItemAsRemoteConnectionIntegration, new Point(226, 13));

            // Verify that the 'DisplayText' property of 'Remote Connection Integration' label equals 'Remote Connection Integration'
            Assert.AreEqual(this.Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams.RemoteConnectionIntegrationTextDisplayText, remoteConnectionIntegrationText.DisplayText, "Selected source server in deploy is not Remote Connection Integration.");
        }
        
        /// <summary>
        /// Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_Combobox - Use 'Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams' to pass parameters into this method.
        /// </summary>
        public void Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_Combobox()
        {
            #region Variable Declarations
            WpfButton toggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DeployTab.WorkSurfaceContext.SourceServerConectControl.Combobox.ToggleButton;
            WpfCustom comboboxListItemAsNewRemoteServer = this.MainStudioWindow.ComboboxListItemAsNewRemoteServer;
            WpfCustom comboboxListItemAsRemoteConnectionIntegrationConnected = this.MainStudioWindow.ComboboxListItemAsRemoteConnectionIntegrationConnected;
            WpfText remoteConnectionIntegrationText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DeployTab.WorkSurfaceContext.SourceServerConectControl.Combobox.RemoteConnectionIntegrationText;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleButton, new Point(230, 9));

            // Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
            Assert.AreEqual(this.Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams.ComboboxListItemAsNewRemoteServerExists, comboboxListItemAsNewRemoteServer.Exists, "New Remote Server... option does not exist in Destination server combobox.");

            // Verify that the 'Exists' property of 'Remote Connection Integration (Connected)' custom control equals 'True'
            Assert.AreEqual(this.Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams.ComboboxListItemAsRemoteConnectionIntegrationConnectedExists, comboboxListItemAsRemoteConnectionIntegrationConnected.Exists, "Remote Connection Integration option does not exist in Destination server combobo" +
                    "x.");

            // Click 'Remote Connection Integration (Connected)' custom control
            Mouse.Click(comboboxListItemAsRemoteConnectionIntegrationConnected, new Point(226, 13));

            // Verify that the 'DisplayText' property of 'Remote Connection Integration' label equals 'Remote Connection Integration'
            Assert.AreEqual(this.Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams.RemoteConnectionIntegrationTextDisplayText, remoteConnectionIntegrationText.DisplayText, "Selected source server in deploy is not Remote Connection Integration.");
        }
        
        /// <summary>
        /// Select_Rename_FromExplorerContextMenu
        /// </summary>
        public void Select_Rename_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem rename = this.MainStudioWindow.ExplorerContextMenu.Rename;
            #endregion

            // Click 'Rename' menu item
            Mouse.Click(rename, new Point(73, 15));
        }
        
        /// <summary>
        /// Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_Dropdownlist - Use 'Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_Dropdownlist()
        {
            #region Variable Declarations
            WpfListItem rSAKLFSVRGENDEV = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.ServerComboBox.RSAKLFSVRGENDEV;
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.ServerComboBox.Textbox;
            #endregion

            // Click 'RSAKLFSVRGENDEV' list item
            Mouse.Click(rSAKLFSVRGENDEV, new Point(97, 17));

            // Verify that the 'Text' property of 'Text' text box equals 'RSAKLFSVRGENDEV'
            Assert.AreEqual(this.Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues.TextboxText, textbox.Text, "RSAKLFSVRGENDEV is not selected as the server in the DB source wizard.");
        }
        
        /// <summary>
        /// Select_SaveAsImage_FromContextMenu
        /// </summary>
        public void Select_SaveAsImage_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem saveasImage = this.MainStudioWindow.DesignSurfaceContextMenu.SaveasImage;
            #endregion

            // Click 'Save as Image' menu item
            Mouse.Click(saveasImage, new Point(38, 15));
        }
        
        /// <summary>
        /// Select_SetAsStartNode_FromContextMenu
        /// </summary>
        public void Select_SetAsStartNode_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem setasStartNode = this.MainStudioWindow.DesignSurfaceContextMenu.SetasStartNode;
            #endregion

            // Click 'Set as Start Node' menu item
            Mouse.Click(setasStartNode, new Point(67, 16));
        }
        
        /// <summary>
        /// Select_ShowLargeView_FromContextMenu
        /// </summary>
        public void Select_ShowLargeView_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem showLargeView = this.MainStudioWindow.DesignSurfaceContextMenu.ShowLargeView;
            #endregion

            // Click 'Show Large View' menu item
            Mouse.Click(showLargeView, new Point(43, 15));
        }
        
        /// <summary>
        /// Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_Combobox - Use 'Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_Combobox()
        {
            #region Variable Declarations
            WpfComboBox classNameComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ClassNameComboBox;
            WpfListItem systemRandomListItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ClassNameComboBox.SystemRandomListItem;
            #endregion

            // Click 'NamespaceComboBox' combo box
            Mouse.Click(classNameComboBox, new Point(216, 7));

            // Click 'SystemRandom' list item
            Mouse.Click(systemRandomListItem, new Point(137, 7));

            // Verify that the 'SelectedItem' property of 'NamespaceComboBox' combo box equals '{"AssemblyLocation":"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorlib.dll","AssemblyName":"mscorlib.dll","FullName":"System.Random","MethodName":null}'
            Assert.AreEqual(this.Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues.ClassNameComboBoxSelectedItem, classNameComboBox.SelectedItem, "System.Random is not selected in DotNet DLL tool large view namespace combobox.");
        }
        
        /// <summary>
        /// Select_Tests_From_Context_Menu
        /// </summary>
        public void Select_Tests_From_Context_Menu()
        {
            #region Variable Declarations
            WpfMenuItem tests = this.MainStudioWindow.ExplorerContextMenu.Tests;
            #endregion

            // Click 'Tests' menu item
            Mouse.Click(tests, new Point(46, 16));
        }
        
        /// <summary>
        /// Select_TSTCIREMOTE_From_Server_Source_Wizard_Dropdownlist - Use 'Select_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams' to pass parameters into this method.
        /// </summary>
        public void Select_TSTCIREMOTE_From_Server_Source_Wizard_Dropdownlist()
        {
            #region Variable Declarations
            WpfListItem tSTCIREMOTE = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.AddressComboBox.TSTCIREMOTE;
            WpfEdit addressEditBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.AddressComboBox.AddressEditBox;
            WpfButton testConnectionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.TestConnectionButton;
            #endregion

            // Click 'TST-CI-REMOTE' list item
            Mouse.Click(tSTCIREMOTE, new Point(70, 19));

            // Verify that the 'Text' property of 'Text' text box equals 'TST-CI-REMOTE'
            Assert.AreEqual(this.Select_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams.AddressEditBoxText, addressEditBox.Text, "Server source address textbox text does not equal TST-CI-REMOTE");

            // Verify that the 'Exists' property of 'Test Connection' button equals 'True'
            Assert.AreEqual(this.Select_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams.TestConnectionButtonExists, testConnectionButton.Exists, "Server source wizard does not contain a test connection button");
        }
        
        /// <summary>
        /// Select_UITestingDBSource_From_SQL_Server_Large_View_Source_Combobox - Use 'Select_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams' to pass parameters into this method.
        /// </summary>
        public void Select_UITestingDBSource_From_SQL_Server_Large_View_Source_Combobox()
        {
            #region Variable Declarations
            WpfComboBox sourcesCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.SourcesCombobox;
            WpfListItem uITestingDBSourceListItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.SourcesCombobox.UITestingDBSourceListItem;
            #endregion

            // Click 'SourcesComboBox' combo box
            Mouse.Click(sourcesCombobox, new Point(216, 7));

            // Click 'UITestingDBSource' list item
            Mouse.Click(uITestingDBSourceListItem, new Point(137, 7));

            // Verify that the 'SelectedItem' property of 'SourcesComboBox' combo box equals 'UITestingDBSource'
            Assert.AreEqual(this.Select_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams.SourcesComboboxSelectedItem, sourcesCombobox.SelectedItem, "SQL Server large view source combobox selected item is not equal to UITestingDBSo" +
                    "urce.");
        }
        
        /// <summary>
        /// Select_User_From_RunTestAs - Use 'Select_User_From_RunTestAsParams' to pass parameters into this method.
        /// </summary>
        public void Select_User_From_RunTestAs()
        {
            #region Variable Declarations
            WpfRadioButton userRadioButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.ServiceTestView.UserRadioButton;
            WpfEdit usernameTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.ServiceTestView.UsernameTextBoxEdit;
            WpfEdit passwordTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.ServiceTestView.PasswordTextBoxEdit;
            WpfButton saveButton = this.MainStudioWindow.SideMenuBar.SaveButton;
            #endregion

            // Select 'User' radio button
            userRadioButton.Selected = this.Select_User_From_RunTestAsParams.UserRadioButtonSelected;

            // Verify that the 'Exists' property of 'UsernameTextBox' text box equals 'True'
            Assert.AreEqual(this.Select_User_From_RunTestAsParams.UsernameTextBoxEditExists, usernameTextBoxEdit.Exists, "Username textbox does not exist after clicking RunAsUser radio button");

            // Verify that the 'Exists' property of 'PasswordTextBox' text box equals 'True'
            Assert.AreEqual(this.Select_User_From_RunTestAsParams.PasswordTextBoxEditExists, passwordTextBoxEdit.Exists, "Password textbox does not exist after clicking RunAsUser radio button");

            // Verify that the 'Enabled' property of 'Save this tab' button equals 'True'
            Assert.AreEqual(this.Select_User_From_RunTestAsParams.SaveButtonEnabled, saveButton.Enabled, "Save Ribbon Menu buton is disabled after changing test");
        }
        
        /// <summary>
        /// Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_Textbox - Use 'Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_Textbox()
        {
            #region Variable Declarations
            WpfEdit dataTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.InputsTable.Row1.DataCell.DataCombobox.DataTextbox;
            #endregion

            // Type '0' in 'Text' text box
            dataTextbox.Text = this.Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues.DataTextboxText;

            // Verify that the 'Text' property of 'Text' text box equals '0'
            Assert.AreEqual(this.Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues.DataTextboxText1, dataTextbox.Text, "SQL Server large view inputs row 1 data textbox text is not equal to S");
        }
        
        /// <summary>
        /// Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_Textbox - Use 'Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_Textbox()
        {
            #region Variable Declarations
            WpfEdit testDataTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.TestInputsTable.Row1.TestDataCell.TestDataComboBox.TestDataTextbox;
            #endregion

            // Type '0' in 'Text' text box
            testDataTextbox.Text = this.Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues.TestDataTextboxText;

            // Verify that the 'Text' property of 'Text' text box equals '0'
            Assert.AreEqual(this.Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues.TestDataTextboxText1, testDataTextbox.Text, "SQL Server large view test inputs row 1 test data textbox text is not equal to S");
        }
        
        /// <summary>
        /// Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_Textbox - Use 'Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams' to pass parameters into this method.
        /// </summary>
        public void Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_Textbox()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.ServerComboBox.Textbox;
            WpfListItem rSAKLFSVRGENDEV = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.ServerComboBox.RSAKLFSVRGENDEV;
            #endregion

            // Type 'rsaklfsvrgen' in 'Text' text box
            textbox.Text = this.Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams.TextboxText;

            // Verify that the 'Exists' property of 'RSAKLFSVRGENDEV' list item equals 'True'
            Assert.AreEqual(this.Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams.RSAKLFSVRGENDEVExists, rSAKLFSVRGENDEV.Exists, "RSAKLFSVRGENDEV does not exist as an option in DB source wizard server combobox.");
        }
        
        /// <summary>
        /// Type_TestSite_into_Web_Source_Wizard_Address_Textbox - Use 'Type_TestSite_into_Web_Source_Wizard_Address_TextboxParams' to pass parameters into this method.
        /// </summary>
        public void Type_TestSite_into_Web_Source_Wizard_Address_Textbox()
        {
            #region Variable Declarations
            WpfEdit addressTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WebSourceWizardTab.WorkSurfaceContext.AddressTextbox;
            WpfButton testConnectionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.WebSourceWizardTab.WorkSurfaceContext.TestConnectionButton;
            #endregion

            // Type 'http://rsaklfsvrtfsbld/IntegrationTestSite/Proxy.ashx' in 'ServerTextBox' text box
            addressTextbox.Text = this.Type_TestSite_into_Web_Source_Wizard_Address_TextboxParams.AddressTextboxText;

            // Verify that the 'Enabled' property of 'Test Connection' button equals 'True'
            Assert.AreEqual(this.Type_TestSite_into_Web_Source_Wizard_Address_TextboxParams.TestConnectionButtonEnabled, testConnectionButton.Enabled, "New web source wizard test connection button is not enabled after entering a vali" +
                    "d web address.");
        }
        
        /// <summary>
        /// Search_And_Select_HelloWolrd - Use 'Search_And_Select_HelloWolrdParams' to pass parameters into this method.
        /// </summary>
        public void Search_And_Select_HelloWolrd()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.SearchTextBox;
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            WpfEdit uIItemEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabMan.TestsTabPage.WorksurfaceContext.ServiceTestView.TestNameText.UIItemEdit;
            #endregion

            // Click 'SearchTextBox' text box
            Mouse.Click(searchTextBox, new Point(165, 9));

            // Type 'Hello World' in 'SearchTextBox' text box
            searchTextBox.Text = this.Search_And_Select_HelloWolrdParams.SearchTextBoxText;

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, MouseButtons.Right, ModifierKeys.None, new Point(101, 9));
        }
        
        #region Properties
        public virtual Assert_CancelConnectionButton_ExistsExpectedValues Assert_CancelConnectionButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_CancelConnectionButton_ExistsExpectedValues == null))
                {
                    this.mAssert_CancelConnectionButton_ExistsExpectedValues = new Assert_CancelConnectionButton_ExistsExpectedValues();
                }
                return this.mAssert_CancelConnectionButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Connection_PassedExpectedValues Assert_Connection_PassedExpectedValues
        {
            get
            {
                if ((this.mAssert_Connection_PassedExpectedValues == null))
                {
                    this.mAssert_Connection_PassedExpectedValues = new Assert_Connection_PassedExpectedValues();
                }
                return this.mAssert_Connection_PassedExpectedValues;
            }
        }
        
        public virtual Assert_RunDebug_Button_Exist_And_EnabledExpectedValues Assert_RunDebug_Button_Exist_And_EnabledExpectedValues
        {
            get
            {
                if ((this.mAssert_RunDebug_Button_Exist_And_EnabledExpectedValues == null))
                {
                    this.mAssert_RunDebug_Button_Exist_And_EnabledExpectedValues = new Assert_RunDebug_Button_Exist_And_EnabledExpectedValues();
                }
                return this.mAssert_RunDebug_Button_Exist_And_EnabledExpectedValues;
            }
        }
        
        public virtual Assert_variable_filter_textbox_existExpectedValues Assert_variable_filter_textbox_existExpectedValues
        {
            get
            {
                if ((this.mAssert_variable_filter_textbox_existExpectedValues == null))
                {
                    this.mAssert_variable_filter_textbox_existExpectedValues = new Assert_variable_filter_textbox_existExpectedValues();
                }
                return this.mAssert_variable_filter_textbox_existExpectedValues;
            }
        }
        
        public virtual AssertMethod6ExpectedValues AssertMethod6ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod6ExpectedValues == null))
                {
                    this.mAssertMethod6ExpectedValues = new AssertMethod6ExpectedValues();
                }
                return this.mAssertMethod6ExpectedValues;
            }
        }
        
        public virtual Assign_Value_To_VariableParams Assign_Value_To_VariableParams
        {
            get
            {
                if ((this.mAssign_Value_To_VariableParams == null))
                {
                    this.mAssign_Value_To_VariableParams = new Assign_Value_To_VariableParams();
                }
                return this.mAssign_Value_To_VariableParams;
            }
        }
        
        public virtual Click_AddNew_Web_Source_From_toolParams Click_AddNew_Web_Source_From_toolParams
        {
            get
            {
                if ((this.mClick_AddNew_Web_Source_From_toolParams == null))
                {
                    this.mClick_AddNew_Web_Source_From_toolParams = new Click_AddNew_Web_Source_From_toolParams();
                }
                return this.mClick_AddNew_Web_Source_From_toolParams;
            }
        }
        
        public virtual Click_Assign_Tool_CollapseAllParams Click_Assign_Tool_CollapseAllParams
        {
            get
            {
                if ((this.mClick_Assign_Tool_CollapseAllParams == null))
                {
                    this.mClick_Assign_Tool_CollapseAllParams = new Click_Assign_Tool_CollapseAllParams();
                }
                return this.mClick_Assign_Tool_CollapseAllParams;
            }
        }
        
        public virtual Click_Assign_Tool_ExpandAllParams Click_Assign_Tool_ExpandAllParams
        {
            get
            {
                if ((this.mClick_Assign_Tool_ExpandAllParams == null))
                {
                    this.mClick_Assign_Tool_ExpandAllParams = new Click_Assign_Tool_ExpandAllParams();
                }
                return this.mClick_Assign_Tool_ExpandAllParams;
            }
        }
        
        public virtual Click_Assign_Tool_Large_View_Done_ButtonParams Click_Assign_Tool_Large_View_Done_ButtonParams
        {
            get
            {
                if ((this.mClick_Assign_Tool_Large_View_Done_ButtonParams == null))
                {
                    this.mClick_Assign_Tool_Large_View_Done_ButtonParams = new Click_Assign_Tool_Large_View_Done_ButtonParams();
                }
                return this.mClick_Assign_Tool_Large_View_Done_ButtonParams;
            }
        }
        
        public virtual Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams
        {
            get
            {
                if ((this.mClick_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams == null))
                {
                    this.mClick_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams = new Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams();
                }
                return this.mClick_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams;
            }
        }
        
        public virtual Click_Assign_Tool_Remove_Variable_From_ToolParams Click_Assign_Tool_Remove_Variable_From_ToolParams
        {
            get
            {
                if ((this.mClick_Assign_Tool_Remove_Variable_From_ToolParams == null))
                {
                    this.mClick_Assign_Tool_Remove_Variable_From_ToolParams = new Click_Assign_Tool_Remove_Variable_From_ToolParams();
                }
                return this.mClick_Assign_Tool_Remove_Variable_From_ToolParams;
            }
        }
        
        public virtual Click_Assign_Tool_urlParams Click_Assign_Tool_urlParams
        {
            get
            {
                if ((this.mClick_Assign_Tool_urlParams == null))
                {
                    this.mClick_Assign_Tool_urlParams = new Click_Assign_Tool_urlParams();
                }
                return this.mClick_Assign_Tool_urlParams;
            }
        }
        
        public virtual Click_Base_Convert_Large_View_Done_ButtonParams Click_Base_Convert_Large_View_Done_ButtonParams
        {
            get
            {
                if ((this.mClick_Base_Convert_Large_View_Done_ButtonParams == null))
                {
                    this.mClick_Base_Convert_Large_View_Done_ButtonParams = new Click_Base_Convert_Large_View_Done_ButtonParams();
                }
                return this.mClick_Base_Convert_Large_View_Done_ButtonParams;
            }
        }
        
        public virtual Click_Calculate_Large_View_Done_ButtonParams Click_Calculate_Large_View_Done_ButtonParams
        {
            get
            {
                if ((this.mClick_Calculate_Large_View_Done_ButtonParams == null))
                {
                    this.mClick_Calculate_Large_View_Done_ButtonParams = new Click_Calculate_Large_View_Done_ButtonParams();
                }
                return this.mClick_Calculate_Large_View_Done_ButtonParams;
            }
        }
        
        public virtual Click_Cancel_DebugInput_WindowParams Click_Cancel_DebugInput_WindowParams
        {
            get
            {
                if ((this.mClick_Cancel_DebugInput_WindowParams == null))
                {
                    this.mClick_Cancel_DebugInput_WindowParams = new Click_Cancel_DebugInput_WindowParams();
                }
                return this.mClick_Cancel_DebugInput_WindowParams;
            }
        }
        
        public virtual Click_Close_Deploy_Tab_ButtonParams Click_Close_Deploy_Tab_ButtonParams
        {
            get
            {
                if ((this.mClick_Close_Deploy_Tab_ButtonParams == null))
                {
                    this.mClick_Close_Deploy_Tab_ButtonParams = new Click_Close_Deploy_Tab_ButtonParams();
                }
                return this.mClick_Close_Deploy_Tab_ButtonParams;
            }
        }
        
        public virtual Click_Close_Settings_Tab_ButtonParams Click_Close_Settings_Tab_ButtonParams
        {
            get
            {
                if ((this.mClick_Close_Settings_Tab_ButtonParams == null))
                {
                    this.mClick_Close_Settings_Tab_ButtonParams = new Click_Close_Settings_Tab_ButtonParams();
                }
                return this.mClick_Close_Settings_Tab_ButtonParams;
            }
        }
        
        public virtual Click_Close_Workflow_Tab_ButtonParams Click_Close_Workflow_Tab_ButtonParams
        {
            get
            {
                if ((this.mClick_Close_Workflow_Tab_ButtonParams == null))
                {
                    this.mClick_Close_Workflow_Tab_ButtonParams = new Click_Close_Workflow_Tab_ButtonParams();
                }
                return this.mClick_Close_Workflow_Tab_ButtonParams;
            }
        }
        
        public virtual Click_Create_New_TestsParams Click_Create_New_TestsParams
        {
            get
            {
                if ((this.mClick_Create_New_TestsParams == null))
                {
                    this.mClick_Create_New_TestsParams = new Click_Create_New_TestsParams();
                }
                return this.mClick_Create_New_TestsParams;
            }
        }
        
        public virtual Click_Debug_Output_Assign_CellParams Click_Debug_Output_Assign_CellParams
        {
            get
            {
                if ((this.mClick_Debug_Output_Assign_CellParams == null))
                {
                    this.mClick_Debug_Output_Assign_CellParams = new Click_Debug_Output_Assign_CellParams();
                }
                return this.mClick_Debug_Output_Assign_CellParams;
            }
        }
        
        public virtual Click_Debug_Output_BaseConvert_CellParams Click_Debug_Output_BaseConvert_CellParams
        {
            get
            {
                if ((this.mClick_Debug_Output_BaseConvert_CellParams == null))
                {
                    this.mClick_Debug_Output_BaseConvert_CellParams = new Click_Debug_Output_BaseConvert_CellParams();
                }
                return this.mClick_Debug_Output_BaseConvert_CellParams;
            }
        }
        
        public virtual Click_Debug_Output_Calculate_CellParams Click_Debug_Output_Calculate_CellParams
        {
            get
            {
                if ((this.mClick_Debug_Output_Calculate_CellParams == null))
                {
                    this.mClick_Debug_Output_Calculate_CellParams = new Click_Debug_Output_Calculate_CellParams();
                }
                return this.mClick_Debug_Output_Calculate_CellParams;
            }
        }
        
        public virtual Click_Debug_Output_Workflow1_NameParams Click_Debug_Output_Workflow1_NameParams
        {
            get
            {
                if ((this.mClick_Debug_Output_Workflow1_NameParams == null))
                {
                    this.mClick_Debug_Output_Workflow1_NameParams = new Click_Debug_Output_Workflow1_NameParams();
                }
                return this.mClick_Debug_Output_Workflow1_NameParams;
            }
        }
        
        public virtual Click_DebugInput_Debug_ButtonParams Click_DebugInput_Debug_ButtonParams
        {
            get
            {
                if ((this.mClick_DebugInput_Debug_ButtonParams == null))
                {
                    this.mClick_DebugInput_Debug_ButtonParams = new Click_DebugInput_Debug_ButtonParams();
                }
                return this.mClick_DebugInput_Debug_ButtonParams;
            }
        }
        
        public virtual Click_DebugInput_ViewInBrowser_ButtonParams Click_DebugInput_ViewInBrowser_ButtonParams
        {
            get
            {
                if ((this.mClick_DebugInput_ViewInBrowser_ButtonParams == null))
                {
                    this.mClick_DebugInput_ViewInBrowser_ButtonParams = new Click_DebugInput_ViewInBrowser_ButtonParams();
                }
                return this.mClick_DebugInput_ViewInBrowser_ButtonParams;
            }
        }
        
        public virtual Click_Decision_Dialog_Done_ButtonParams Click_Decision_Dialog_Done_ButtonParams
        {
            get
            {
                if ((this.mClick_Decision_Dialog_Done_ButtonParams == null))
                {
                    this.mClick_Decision_Dialog_Done_ButtonParams = new Click_Decision_Dialog_Done_ButtonParams();
                }
                return this.mClick_Decision_Dialog_Done_ButtonParams;
            }
        }
        
        public virtual Click_Deploy_Tab_Destination_Server_ComboboxParams Click_Deploy_Tab_Destination_Server_ComboboxParams
        {
            get
            {
                if ((this.mClick_Deploy_Tab_Destination_Server_ComboboxParams == null))
                {
                    this.mClick_Deploy_Tab_Destination_Server_ComboboxParams = new Click_Deploy_Tab_Destination_Server_ComboboxParams();
                }
                return this.mClick_Deploy_Tab_Destination_Server_ComboboxParams;
            }
        }
        
        public virtual Click_Deploy_Tab_Source_Server_ComboboxParams Click_Deploy_Tab_Source_Server_ComboboxParams
        {
            get
            {
                if ((this.mClick_Deploy_Tab_Source_Server_ComboboxParams == null))
                {
                    this.mClick_Deploy_Tab_Source_Server_ComboboxParams = new Click_Deploy_Tab_Source_Server_ComboboxParams();
                }
                return this.mClick_Deploy_Tab_Source_Server_ComboboxParams;
            }
        }
        
        public virtual Click_DotNet_DLL_Large_View_Done_ButtonParams Click_DotNet_DLL_Large_View_Done_ButtonParams
        {
            get
            {
                if ((this.mClick_DotNet_DLL_Large_View_Done_ButtonParams == null))
                {
                    this.mClick_DotNet_DLL_Large_View_Done_ButtonParams = new Click_DotNet_DLL_Large_View_Done_ButtonParams();
                }
                return this.mClick_DotNet_DLL_Large_View_Done_ButtonParams;
            }
        }
        
        public virtual Click_DotNet_DLL_Large_View_Generate_OutputsExpectedValues Click_DotNet_DLL_Large_View_Generate_OutputsExpectedValues
        {
            get
            {
                if ((this.mClick_DotNet_DLL_Large_View_Generate_OutputsExpectedValues == null))
                {
                    this.mClick_DotNet_DLL_Large_View_Generate_OutputsExpectedValues = new Click_DotNet_DLL_Large_View_Generate_OutputsExpectedValues();
                }
                return this.mClick_DotNet_DLL_Large_View_Generate_OutputsExpectedValues;
            }
        }
        
        public virtual Click_ExpandAndStepIn_NestedWorkflowParams Click_ExpandAndStepIn_NestedWorkflowParams
        {
            get
            {
                if ((this.mClick_ExpandAndStepIn_NestedWorkflowParams == null))
                {
                    this.mClick_ExpandAndStepIn_NestedWorkflowParams = new Click_ExpandAndStepIn_NestedWorkflowParams();
                }
                return this.mClick_ExpandAndStepIn_NestedWorkflowParams;
            }
        }
        
        public virtual Click_Explorer_Filter_Clear_ButtonParams Click_Explorer_Filter_Clear_ButtonParams
        {
            get
            {
                if ((this.mClick_Explorer_Filter_Clear_ButtonParams == null))
                {
                    this.mClick_Explorer_Filter_Clear_ButtonParams = new Click_Explorer_Filter_Clear_ButtonParams();
                }
                return this.mClick_Explorer_Filter_Clear_ButtonParams;
            }
        }
        
        public virtual Click_Explorer_RemoteServer_Connect_ButtonParams Click_Explorer_RemoteServer_Connect_ButtonParams
        {
            get
            {
                if ((this.mClick_Explorer_RemoteServer_Connect_ButtonParams == null))
                {
                    this.mClick_Explorer_RemoteServer_Connect_ButtonParams = new Click_Explorer_RemoteServer_Connect_ButtonParams();
                }
                return this.mClick_Explorer_RemoteServer_Connect_ButtonParams;
            }
        }
        
        public virtual Click_GET_Web_Large_View_Done_ButtonParams Click_GET_Web_Large_View_Done_ButtonParams
        {
            get
            {
                if ((this.mClick_GET_Web_Large_View_Done_ButtonParams == null))
                {
                    this.mClick_GET_Web_Large_View_Done_ButtonParams = new Click_GET_Web_Large_View_Done_ButtonParams();
                }
                return this.mClick_GET_Web_Large_View_Done_ButtonParams;
            }
        }
        
        public virtual Click_GET_Web_Large_View_Generate_OutputsExpectedValues Click_GET_Web_Large_View_Generate_OutputsExpectedValues
        {
            get
            {
                if ((this.mClick_GET_Web_Large_View_Generate_OutputsExpectedValues == null))
                {
                    this.mClick_GET_Web_Large_View_Generate_OutputsExpectedValues = new Click_GET_Web_Large_View_Generate_OutputsExpectedValues();
                }
                return this.mClick_GET_Web_Large_View_Generate_OutputsExpectedValues;
            }
        }
        
        public virtual Click_MessageBox_YesParams Click_MessageBox_YesParams
        {
            get
            {
                if ((this.mClick_MessageBox_YesParams == null))
                {
                    this.mClick_MessageBox_YesParams = new Click_MessageBox_YesParams();
                }
                return this.mClick_MessageBox_YesParams;
            }
        }
        
        public virtual Click_New_Web_Source_Test_Connection_ButtonParams Click_New_Web_Source_Test_Connection_ButtonParams
        {
            get
            {
                if ((this.mClick_New_Web_Source_Test_Connection_ButtonParams == null))
                {
                    this.mClick_New_Web_Source_Test_Connection_ButtonParams = new Click_New_Web_Source_Test_Connection_ButtonParams();
                }
                return this.mClick_New_Web_Source_Test_Connection_ButtonParams;
            }
        }
        
        public virtual Click_NewPluginSource_Ribbon_ButtonParams Click_NewPluginSource_Ribbon_ButtonParams
        {
            get
            {
                if ((this.mClick_NewPluginSource_Ribbon_ButtonParams == null))
                {
                    this.mClick_NewPluginSource_Ribbon_ButtonParams = new Click_NewPluginSource_Ribbon_ButtonParams();
                }
                return this.mClick_NewPluginSource_Ribbon_ButtonParams;
            }
        }
        
        public virtual Click_NewVersion_buttonExpectedValues Click_NewVersion_buttonExpectedValues
        {
            get
            {
                if ((this.mClick_NewVersion_buttonExpectedValues == null))
                {
                    this.mClick_NewVersion_buttonExpectedValues = new Click_NewVersion_buttonExpectedValues();
                }
                return this.mClick_NewVersion_buttonExpectedValues;
            }
        }
        
        public virtual Click_Output_OnRecordset_InVariableListParams Click_Output_OnRecordset_InVariableListParams
        {
            get
            {
                if ((this.mClick_Output_OnRecordset_InVariableListParams == null))
                {
                    this.mClick_Output_OnRecordset_InVariableListParams = new Click_Output_OnRecordset_InVariableListParams();
                }
                return this.mClick_Output_OnRecordset_InVariableListParams;
            }
        }
        
        public virtual Click_Output_OnVariable_InVariableListParams Click_Output_OnVariable_InVariableListParams
        {
            get
            {
                if ((this.mClick_Output_OnVariable_InVariableListParams == null))
                {
                    this.mClick_Output_OnVariable_InVariableListParams = new Click_Output_OnVariable_InVariableListParams();
                }
                return this.mClick_Output_OnVariable_InVariableListParams;
            }
        }
        
        public virtual Click_RunDebug_buttonParams Click_RunDebug_buttonParams
        {
            get
            {
                if ((this.mClick_RunDebug_buttonParams == null))
                {
                    this.mClick_RunDebug_buttonParams = new Click_RunDebug_buttonParams();
                }
                return this.mClick_RunDebug_buttonParams;
            }
        }
        
        public virtual Click_Save_Ribbon_Button_to_Open_Save_DialogParams Click_Save_Ribbon_Button_to_Open_Save_DialogParams
        {
            get
            {
                if ((this.mClick_Save_Ribbon_Button_to_Open_Save_DialogParams == null))
                {
                    this.mClick_Save_Ribbon_Button_to_Open_Save_DialogParams = new Click_Save_Ribbon_Button_to_Open_Save_DialogParams();
                }
                return this.mClick_Save_Ribbon_Button_to_Open_Save_DialogParams;
            }
        }
        
        public virtual Click_Save_Ribbon_Button_With_No_Save_DialogParams Click_Save_Ribbon_Button_With_No_Save_DialogParams
        {
            get
            {
                if ((this.mClick_Save_Ribbon_Button_With_No_Save_DialogParams == null))
                {
                    this.mClick_Save_Ribbon_Button_With_No_Save_DialogParams = new Click_Save_Ribbon_Button_With_No_Save_DialogParams();
                }
                return this.mClick_Save_Ribbon_Button_With_No_Save_DialogParams;
            }
        }
        
        public virtual Click_Scheduler_Disable_Task_Radio_ButtonParams Click_Scheduler_Disable_Task_Radio_ButtonParams
        {
            get
            {
                if ((this.mClick_Scheduler_Disable_Task_Radio_ButtonParams == null))
                {
                    this.mClick_Scheduler_Disable_Task_Radio_ButtonParams = new Click_Scheduler_Disable_Task_Radio_ButtonParams();
                }
                return this.mClick_Scheduler_Disable_Task_Radio_ButtonParams;
            }
        }
        
        public virtual Click_Scheduler_Enable_Task_Radio_ButtonParams Click_Scheduler_Enable_Task_Radio_ButtonParams
        {
            get
            {
                if ((this.mClick_Scheduler_Enable_Task_Radio_ButtonParams == null))
                {
                    this.mClick_Scheduler_Enable_Task_Radio_ButtonParams = new Click_Scheduler_Enable_Task_Radio_ButtonParams();
                }
                return this.mClick_Scheduler_Enable_Task_Radio_ButtonParams;
            }
        }
        
        public virtual Click_Scheduler_RunTaskParams Click_Scheduler_RunTaskParams
        {
            get
            {
                if ((this.mClick_Scheduler_RunTaskParams == null))
                {
                    this.mClick_Scheduler_RunTaskParams = new Click_Scheduler_RunTaskParams();
                }
                return this.mClick_Scheduler_RunTaskParams;
            }
        }
        
        public virtual Click_Select_Windows_Group_Cancel_ButtonParams Click_Select_Windows_Group_Cancel_ButtonParams
        {
            get
            {
                if ((this.mClick_Select_Windows_Group_Cancel_ButtonParams == null))
                {
                    this.mClick_Select_Windows_Group_Cancel_ButtonParams = new Click_Select_Windows_Group_Cancel_ButtonParams();
                }
                return this.mClick_Select_Windows_Group_Cancel_ButtonParams;
            }
        }
        
        public virtual Click_Server_Source_Wizard_Address_Protocol_DropdownParams Click_Server_Source_Wizard_Address_Protocol_DropdownParams
        {
            get
            {
                if ((this.mClick_Server_Source_Wizard_Address_Protocol_DropdownParams == null))
                {
                    this.mClick_Server_Source_Wizard_Address_Protocol_DropdownParams = new Click_Server_Source_Wizard_Address_Protocol_DropdownParams();
                }
                return this.mClick_Server_Source_Wizard_Address_Protocol_DropdownParams;
            }
        }
        
        public virtual Click_Server_Source_Wizard_Test_Connection_ButtonParams Click_Server_Source_Wizard_Test_Connection_ButtonParams
        {
            get
            {
                if ((this.mClick_Server_Source_Wizard_Test_Connection_ButtonParams == null))
                {
                    this.mClick_Server_Source_Wizard_Test_Connection_ButtonParams = new Click_Server_Source_Wizard_Test_Connection_ButtonParams();
                }
                return this.mClick_Server_Source_Wizard_Test_Connection_ButtonParams;
            }
        }
        
        public virtual Click_Service_Picker_Dialog_OKParams Click_Service_Picker_Dialog_OKParams
        {
            get
            {
                if ((this.mClick_Service_Picker_Dialog_OKParams == null))
                {
                    this.mClick_Service_Picker_Dialog_OKParams = new Click_Service_Picker_Dialog_OKParams();
                }
                return this.mClick_Service_Picker_Dialog_OKParams;
            }
        }
        
        public virtual Click_Show_Dependencies_In_Explorer_Context_MenuParams Click_Show_Dependencies_In_Explorer_Context_MenuParams
        {
            get
            {
                if ((this.mClick_Show_Dependencies_In_Explorer_Context_MenuParams == null))
                {
                    this.mClick_Show_Dependencies_In_Explorer_Context_MenuParams = new Click_Show_Dependencies_In_Explorer_Context_MenuParams();
                }
                return this.mClick_Show_Dependencies_In_Explorer_Context_MenuParams;
            }
        }
        
        public virtual Click_SQL_Server_Large_View_Done_ButtonExpectedValues Click_SQL_Server_Large_View_Done_ButtonExpectedValues
        {
            get
            {
                if ((this.mClick_SQL_Server_Large_View_Done_ButtonExpectedValues == null))
                {
                    this.mClick_SQL_Server_Large_View_Done_ButtonExpectedValues = new Click_SQL_Server_Large_View_Done_ButtonExpectedValues();
                }
                return this.mClick_SQL_Server_Large_View_Done_ButtonExpectedValues;
            }
        }
        
        public virtual Click_SQL_Server_Large_View_Generate_OutputsExpectedValues Click_SQL_Server_Large_View_Generate_OutputsExpectedValues
        {
            get
            {
                if ((this.mClick_SQL_Server_Large_View_Generate_OutputsExpectedValues == null))
                {
                    this.mClick_SQL_Server_Large_View_Generate_OutputsExpectedValues = new Click_SQL_Server_Large_View_Generate_OutputsExpectedValues();
                }
                return this.mClick_SQL_Server_Large_View_Generate_OutputsExpectedValues;
            }
        }
        
        public virtual Click_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues Click_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues
        {
            get
            {
                if ((this.mClick_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues == null))
                {
                    this.mClick_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues = new Click_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues();
                }
                return this.mClick_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues;
            }
        }
        
        public virtual Click_Switch_Dialog_Done_ButtonParams Click_Switch_Dialog_Done_ButtonParams
        {
            get
            {
                if ((this.mClick_Switch_Dialog_Done_ButtonParams == null))
                {
                    this.mClick_Switch_Dialog_Done_ButtonParams = new Click_Switch_Dialog_Done_ButtonParams();
                }
                return this.mClick_Switch_Dialog_Done_ButtonParams;
            }
        }
        
        public virtual Click_Variable_IsInputParams Click_Variable_IsInputParams
        {
            get
            {
                if ((this.mClick_Variable_IsInputParams == null))
                {
                    this.mClick_Variable_IsInputParams = new Click_Variable_IsInputParams();
                }
                return this.mClick_Variable_IsInputParams;
            }
        }
        
        public virtual Click_VariableList_Recordset_Row1_IsInputCheckboxParams Click_VariableList_Recordset_Row1_IsInputCheckboxParams
        {
            get
            {
                if ((this.mClick_VariableList_Recordset_Row1_IsInputCheckboxParams == null))
                {
                    this.mClick_VariableList_Recordset_Row1_IsInputCheckboxParams = new Click_VariableList_Recordset_Row1_IsInputCheckboxParams();
                }
                return this.mClick_VariableList_Recordset_Row1_IsInputCheckboxParams;
            }
        }
        
        public virtual Click_VariableList_Scalar_Row1_IsInputCheckboxParams Click_VariableList_Scalar_Row1_IsInputCheckboxParams
        {
            get
            {
                if ((this.mClick_VariableList_Scalar_Row1_IsInputCheckboxParams == null))
                {
                    this.mClick_VariableList_Scalar_Row1_IsInputCheckboxParams = new Click_VariableList_Scalar_Row1_IsInputCheckboxParams();
                }
                return this.mClick_VariableList_Scalar_Row1_IsInputCheckboxParams;
            }
        }
        
        public virtual Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_DotNet_DLL_Connector_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_DotNet_DLL_Connector_Onto_DesignSurfaceParams = new Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams();
                }
                return this.mDrag_DotNet_DLL_Connector_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams
        {
            get
            {
                if ((this.mDrag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams == null))
                {
                    this.mDrag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams = new Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams();
                }
                return this.mDrag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams;
            }
        }
        
        public virtual Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams
        {
            get
            {
                if ((this.mDrag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams == null))
                {
                    this.mDrag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams = new Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams();
                }
                return this.mDrag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams;
            }
        }
        
        public virtual Drag_GET_Web_Connector_Onto_DesignSurfaceParams Drag_GET_Web_Connector_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_GET_Web_Connector_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_GET_Web_Connector_Onto_DesignSurfaceParams = new Drag_GET_Web_Connector_Onto_DesignSurfaceParams();
                }
                return this.mDrag_GET_Web_Connector_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_GetWeb_RequestTool_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_GetWeb_RequestTool_Onto_DesignSurfaceParams = new Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams();
                }
                return this.mDrag_GetWeb_RequestTool_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_PostWeb_RequestTool_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_PostWeb_RequestTool_Onto_DesignSurfaceParams = new Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams();
                }
                return this.mDrag_PostWeb_RequestTool_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams = new Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Calculate_Onto_DesignSurfaceParams Drag_Toolbox_Calculate_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Calculate_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Calculate_Onto_DesignSurfaceParams = new Drag_Toolbox_Calculate_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Calculate_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams = new Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_CMD_Line_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_CMD_Line_Onto_DesignSurfaceParams = new Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_CMD_Line_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Comment_Onto_DesignSurfaceParams Drag_Toolbox_Comment_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Comment_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Comment_Onto_DesignSurfaceParams = new Drag_Toolbox_Comment_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Comment_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Copy_Onto_DesignSurfaceParams Drag_Toolbox_Copy_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Copy_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Copy_Onto_DesignSurfaceParams = new Drag_Toolbox_Copy_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Copy_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Count_Records_Onto_DesignSurfaceParams Drag_Toolbox_Count_Records_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Count_Records_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Count_Records_Onto_DesignSurfaceParams = new Drag_Toolbox_Count_Records_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Count_Records_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Create_Onto_DesignSurfaceParams Drag_Toolbox_Create_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Create_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Create_Onto_DesignSurfaceParams = new Drag_Toolbox_Create_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Create_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Data_Merge_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Data_Merge_Onto_DesignSurfaceParams = new Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Data_Merge_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Data_Split_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Data_Split_Onto_DesignSurfaceParams = new Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Data_Split_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams = new Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams = new Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Decision_Onto_DesignSurfaceParams Drag_Toolbox_Decision_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Decision_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Decision_Onto_DesignSurfaceParams = new Drag_Toolbox_Decision_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Decision_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Delete_Onto_DesignSurfaceParams Drag_Toolbox_Delete_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Delete_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Delete_Onto_DesignSurfaceParams = new Drag_Toolbox_Delete_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Delete_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Delete_Record_Onto_DesignSurfaceParams Drag_Toolbox_Delete_Record_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Delete_Record_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Delete_Record_Onto_DesignSurfaceParams = new Drag_Toolbox_Delete_Record_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Delete_Record_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams Drag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams = new Drag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams Drag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams = new Drag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams Drag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams = new Drag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Find_Index_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Find_Index_Onto_DesignSurfaceParams = new Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Find_Index_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams Drag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams = new Drag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_For_Each_Onto_DesignSurfaceParams Drag_Toolbox_For_Each_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_For_Each_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_For_Each_Onto_DesignSurfaceParams = new Drag_Toolbox_For_Each_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_For_Each_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Format_Number_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Format_Number_Onto_DesignSurfaceParams = new Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Format_Number_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_JSON_Onto_DesignSurfaceParams Drag_Toolbox_JSON_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_JSON_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_JSON_Onto_DesignSurfaceParams = new Drag_Toolbox_JSON_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_JSON_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Length_Onto_DesignSurfaceParams Drag_Toolbox_Length_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Length_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Length_Onto_DesignSurfaceParams = new Drag_Toolbox_Length_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Length_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Move_Onto_DesignSurfaceParams Drag_Toolbox_Move_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Move_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Move_Onto_DesignSurfaceParams = new Drag_Toolbox_Move_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Move_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_MultiAssign_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_MultiAssign_Onto_DesignSurfaceParams = new Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_MultiAssign_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_MySql_Database_Onto_DesignSurfaceParams Drag_Toolbox_MySql_Database_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_MySql_Database_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_MySql_Database_Onto_DesignSurfaceParams = new Drag_Toolbox_MySql_Database_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_MySql_Database_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Random_Onto_DesignSurfaceParams Drag_Toolbox_Random_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Random_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Random_Onto_DesignSurfaceParams = new Drag_Toolbox_Random_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Random_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Read_File_Onto_DesignSurfaceParams Drag_Toolbox_Read_File_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Read_File_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Read_File_Onto_DesignSurfaceParams = new Drag_Toolbox_Read_File_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Read_File_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Read_Folder_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Read_Folder_Onto_DesignSurfaceParams = new Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Read_Folder_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Rename_Onto_DesignSurfaceParams Drag_Toolbox_Rename_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Rename_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Rename_Onto_DesignSurfaceParams = new Drag_Toolbox_Rename_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Rename_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Replace_Onto_DesignSurfaceParams Drag_Toolbox_Replace_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Replace_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Replace_Onto_DesignSurfaceParams = new Drag_Toolbox_Replace_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Replace_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Script_Onto_DesignSurfaceParams Drag_Toolbox_Script_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Script_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Script_Onto_DesignSurfaceParams = new Drag_Toolbox_Script_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Script_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Sequence_Onto_DesignSurfaceParams Drag_Toolbox_Sequence_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Sequence_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Sequence_Onto_DesignSurfaceParams = new Drag_Toolbox_Sequence_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Sequence_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Service_Picker_Onto_DesignSurfaceParams Drag_Toolbox_Service_Picker_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Service_Picker_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Service_Picker_Onto_DesignSurfaceParams = new Drag_Toolbox_Service_Picker_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Service_Picker_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams = new Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams = new Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams Drag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams = new Drag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams Drag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams = new Drag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams = new Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Sort_Record_Onto_DesignSurfaceParams Drag_Toolbox_Sort_Record_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Sort_Record_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Sort_Record_Onto_DesignSurfaceParams = new Drag_Toolbox_Sort_Record_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Sort_Record_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams = new Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams = new Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Switch_Onto_DesignSurfaceParams Drag_Toolbox_Switch_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Switch_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Switch_Onto_DesignSurfaceParams = new Drag_Toolbox_Switch_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Switch_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_System_Information_Onto_DesignSurfaceParams Drag_Toolbox_System_Information_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_System_Information_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_System_Information_Onto_DesignSurfaceParams = new Drag_Toolbox_System_Information_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_System_Information_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Unique_Records_Onto_DesignSurfaceParams Drag_Toolbox_Unique_Records_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Unique_Records_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Unique_Records_Onto_DesignSurfaceParams = new Drag_Toolbox_Unique_Records_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Unique_Records_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Unzip_Onto_DesignSurfaceParams Drag_Toolbox_Unzip_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Unzip_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Unzip_Onto_DesignSurfaceParams = new Drag_Toolbox_Unzip_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Unzip_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Web_Request_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Web_Request_Onto_DesignSurfaceParams = new Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Web_Request_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Write_File_Onto_DesignSurfaceParams Drag_Toolbox_Write_File_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Write_File_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Write_File_Onto_DesignSurfaceParams = new Drag_Toolbox_Write_File_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Write_File_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_XPath_Onto_DesignSurfaceParams Drag_Toolbox_XPath_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_XPath_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_XPath_Onto_DesignSurfaceParams = new Drag_Toolbox_XPath_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_XPath_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Zip_Onto_DesignSurfaceParams Drag_Toolbox_Zip_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Zip_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Zip_Onto_DesignSurfaceParams = new Drag_Toolbox_Zip_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Zip_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Enter_DeployViewOnly_Into_Deploy_Source_FilterParams Enter_DeployViewOnly_Into_Deploy_Source_FilterParams
        {
            get
            {
                if ((this.mEnter_DeployViewOnly_Into_Deploy_Source_FilterParams == null))
                {
                    this.mEnter_DeployViewOnly_Into_Deploy_Source_FilterParams = new Enter_DeployViewOnly_Into_Deploy_Source_FilterParams();
                }
                return this.mEnter_DeployViewOnly_Into_Deploy_Source_FilterParams;
            }
        }
        
        public virtual Enter_InputDebug_valueParams Enter_InputDebug_valueParams
        {
            get
            {
                if ((this.mEnter_InputDebug_valueParams == null))
                {
                    this.mEnter_InputDebug_valueParams = new Enter_InputDebug_valueParams();
                }
                return this.mEnter_InputDebug_valueParams;
            }
        }
        
        public virtual Enter_RunAsUser_Username_And_PasswordParams Enter_RunAsUser_Username_And_PasswordParams
        {
            get
            {
                if ((this.mEnter_RunAsUser_Username_And_PasswordParams == null))
                {
                    this.mEnter_RunAsUser_Username_And_PasswordParams = new Enter_RunAsUser_Username_And_PasswordParams();
                }
                return this.mEnter_RunAsUser_Username_And_PasswordParams;
            }
        }
        
        public virtual Enter_SomeVariable_Into_Base_Convert_Large_View_Row1_Value_TextboxParams Enter_SomeVariable_Into_Base_Convert_Large_View_Row1_Value_TextboxParams
        {
            get
            {
                if ((this.mEnter_SomeVariable_Into_Base_Convert_Large_View_Row1_Value_TextboxParams == null))
                {
                    this.mEnter_SomeVariable_Into_Base_Convert_Large_View_Row1_Value_TextboxParams = new Enter_SomeVariable_Into_Base_Convert_Large_View_Row1_Value_TextboxParams();
                }
                return this.mEnter_SomeVariable_Into_Base_Convert_Large_View_Row1_Value_TextboxParams;
            }
        }
        
        public virtual Enter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams Enter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams
        {
            get
            {
                if ((this.mEnter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams == null))
                {
                    this.mEnter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams = new Enter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams();
                }
                return this.mEnter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams;
            }
        }
        
        public virtual Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams
        {
            get
            {
                if ((this.mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams == null))
                {
                    this.mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams = new Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams();
                }
                return this.mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams;
            }
        }
        
        public virtual Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams
        {
            get
            {
                if ((this.mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams == null))
                {
                    this.mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams = new Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams();
                }
                return this.mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams;
            }
        }
        
        public virtual Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams
        {
            get
            {
                if ((this.mEnter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams == null))
                {
                    this.mEnter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams = new Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams();
                }
                return this.mEnter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams;
            }
        }
        
        public virtual Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams
        {
            get
            {
                if ((this.mEnter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams == null))
                {
                    this.mEnter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams = new Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams();
                }
                return this.mEnter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams;
            }
        }
        
        public virtual Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams
        {
            get
            {
                if ((this.mEnter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams == null))
                {
                    this.mEnter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams = new Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams();
                }
                return this.mEnter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams;
            }
        }
        
        public virtual Filter_variablesParams Filter_variablesParams
        {
            get
            {
                if ((this.mFilter_variablesParams == null))
                {
                    this.mFilter_variablesParams = new Filter_variablesParams();
                }
                return this.mFilter_variablesParams;
            }
        }
        
        public virtual Open_Assign_Tool_Large_ViewParams Open_Assign_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Assign_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Assign_Tool_Large_ViewParams = new Open_Assign_Tool_Large_ViewParams();
                }
                return this.mOpen_Assign_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Assign_Tool_Qvi_Large_ViewParams Open_Assign_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Assign_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Assign_Tool_Qvi_Large_ViewParams = new Open_Assign_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Assign_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Base_Conversion_Tool_Large_ViewParams Open_Base_Conversion_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Base_Conversion_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Base_Conversion_Tool_Large_ViewParams = new Open_Base_Conversion_Tool_Large_ViewParams();
                }
                return this.mOpen_Base_Conversion_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Base_Conversion_Tool_Qvi_Large_ViewParams Open_Base_Conversion_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Base_Conversion_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Base_Conversion_Tool_Qvi_Large_ViewParams = new Open_Base_Conversion_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Base_Conversion_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Calculate_Tool_Large_ViewParams Open_Calculate_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Calculate_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Calculate_Tool_Large_ViewParams = new Open_Calculate_Tool_Large_ViewParams();
                }
                return this.mOpen_Calculate_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Case_Conversion_Tool_Qvi_Large_ViewParams Open_Case_Conversion_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Case_Conversion_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Case_Conversion_Tool_Qvi_Large_ViewParams = new Open_Case_Conversion_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Case_Conversion_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_CMD_Line_Tool_Large_ViewParams Open_CMD_Line_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_CMD_Line_Tool_Large_ViewParams == null))
                {
                    this.mOpen_CMD_Line_Tool_Large_ViewParams = new Open_CMD_Line_Tool_Large_ViewParams();
                }
                return this.mOpen_CMD_Line_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Copy_Tool_Large_ViewParams Open_Copy_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Copy_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Copy_Tool_Large_ViewParams = new Open_Copy_Tool_Large_ViewParams();
                }
                return this.mOpen_Copy_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Create_Tool_Large_ViewParams Open_Create_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Create_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Create_Tool_Large_ViewParams = new Open_Create_Tool_Large_ViewParams();
                }
                return this.mOpen_Create_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Data_Merge_Large_ViewParams Open_Data_Merge_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Data_Merge_Large_ViewParams == null))
                {
                    this.mOpen_Data_Merge_Large_ViewParams = new Open_Data_Merge_Large_ViewParams();
                }
                return this.mOpen_Data_Merge_Large_ViewParams;
            }
        }
        
        public virtual Open_Data_Merge_Tool_Qvi_Large_ViewParams Open_Data_Merge_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Data_Merge_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Data_Merge_Tool_Qvi_Large_ViewParams = new Open_Data_Merge_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Data_Merge_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Data_Split_Large_ViewParams Open_Data_Split_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Data_Split_Large_ViewParams == null))
                {
                    this.mOpen_Data_Split_Large_ViewParams = new Open_Data_Split_Large_ViewParams();
                }
                return this.mOpen_Data_Split_Large_ViewParams;
            }
        }
        
        public virtual Open_Data_Split_Tool_Qvi_Large_ViewParams Open_Data_Split_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Data_Split_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Data_Split_Tool_Qvi_Large_ViewParams = new Open_Data_Split_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Data_Split_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Delete_Tool_Large_ViewParams Open_Delete_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Delete_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Delete_Tool_Large_ViewParams = new Open_Delete_Tool_Large_ViewParams();
                }
                return this.mOpen_Delete_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_DotNet_DLL_Connector_Tool_Large_ViewParams Open_DotNet_DLL_Connector_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_DotNet_DLL_Connector_Tool_Large_ViewParams == null))
                {
                    this.mOpen_DotNet_DLL_Connector_Tool_Large_ViewParams = new Open_DotNet_DLL_Connector_Tool_Large_ViewParams();
                }
                return this.mOpen_DotNet_DLL_Connector_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Explorer_First_Item_Tests_With_Context_MenuParams Open_Explorer_First_Item_Tests_With_Context_MenuParams
        {
            get
            {
                if ((this.mOpen_Explorer_First_Item_Tests_With_Context_MenuParams == null))
                {
                    this.mOpen_Explorer_First_Item_Tests_With_Context_MenuParams = new Open_Explorer_First_Item_Tests_With_Context_MenuParams();
                }
                return this.mOpen_Explorer_First_Item_Tests_With_Context_MenuParams;
            }
        }
        
        public virtual Open_Explorer_First_Item_With_Context_MenuParams Open_Explorer_First_Item_With_Context_MenuParams
        {
            get
            {
                if ((this.mOpen_Explorer_First_Item_With_Context_MenuParams == null))
                {
                    this.mOpen_Explorer_First_Item_With_Context_MenuParams = new Open_Explorer_First_Item_With_Context_MenuParams();
                }
                return this.mOpen_Explorer_First_Item_With_Context_MenuParams;
            }
        }
        
        public virtual Open_GET_Web_Connector_Tool_Large_ViewParams Open_GET_Web_Connector_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_GET_Web_Connector_Tool_Large_ViewParams == null))
                {
                    this.mOpen_GET_Web_Connector_Tool_Large_ViewParams = new Open_GET_Web_Connector_Tool_Large_ViewParams();
                }
                return this.mOpen_GET_Web_Connector_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Json_Tool_Large_ViewParams Open_Json_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Json_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Json_Tool_Large_ViewParams = new Open_Json_Tool_Large_ViewParams();
                }
                return this.mOpen_Json_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Json_Tool_Qvi_Large_ViewParams Open_Json_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Json_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Json_Tool_Qvi_Large_ViewParams = new Open_Json_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Json_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Large_View_FromContextMenuParams Open_Large_View_FromContextMenuParams
        {
            get
            {
                if ((this.mOpen_Large_View_FromContextMenuParams == null))
                {
                    this.mOpen_Large_View_FromContextMenuParams = new Open_Large_View_FromContextMenuParams();
                }
                return this.mOpen_Large_View_FromContextMenuParams;
            }
        }
        
        public virtual Open_Move_Tool_Large_ViewParams Open_Move_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Move_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Move_Tool_Large_ViewParams = new Open_Move_Tool_Large_ViewParams();
                }
                return this.mOpen_Move_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_PostWeb_RequestTool_Large_ViewParams Open_PostWeb_RequestTool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_PostWeb_RequestTool_Large_ViewParams == null))
                {
                    this.mOpen_PostWeb_RequestTool_Large_ViewParams = new Open_PostWeb_RequestTool_Large_ViewParams();
                }
                return this.mOpen_PostWeb_RequestTool_Large_ViewParams;
            }
        }
        
        public virtual Open_Read_File_Tool_Large_ViewParams Open_Read_File_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Read_File_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Read_File_Tool_Large_ViewParams = new Open_Read_File_Tool_Large_ViewParams();
                }
                return this.mOpen_Read_File_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Read_Folder_Tool_Large_ViewParams Open_Read_Folder_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Read_Folder_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Read_Folder_Tool_Large_ViewParams = new Open_Read_Folder_Tool_Large_ViewParams();
                }
                return this.mOpen_Read_Folder_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Rename_Tool_Large_ViewParams Open_Rename_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Rename_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Rename_Tool_Large_ViewParams = new Open_Rename_Tool_Large_ViewParams();
                }
                return this.mOpen_Rename_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_SMTP_Email_Tool_Large_ViewParams Open_SMTP_Email_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_SMTP_Email_Tool_Large_ViewParams == null))
                {
                    this.mOpen_SMTP_Email_Tool_Large_ViewParams = new Open_SMTP_Email_Tool_Large_ViewParams();
                }
                return this.mOpen_SMTP_Email_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_SQL_Bulk_Insert_Tool_Large_ViewParams Open_SQL_Bulk_Insert_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_SQL_Bulk_Insert_Tool_Large_ViewParams == null))
                {
                    this.mOpen_SQL_Bulk_Insert_Tool_Large_ViewParams = new Open_SQL_Bulk_Insert_Tool_Large_ViewParams();
                }
                return this.mOpen_SQL_Bulk_Insert_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams = new Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Sql_Server_Tool_Large_ViewExpectedValues Open_Sql_Server_Tool_Large_ViewExpectedValues
        {
            get
            {
                if ((this.mOpen_Sql_Server_Tool_Large_ViewExpectedValues == null))
                {
                    this.mOpen_Sql_Server_Tool_Large_ViewExpectedValues = new Open_Sql_Server_Tool_Large_ViewExpectedValues();
                }
                return this.mOpen_Sql_Server_Tool_Large_ViewExpectedValues;
            }
        }
        
        public virtual Open_System_Information_Tool_Qvi_Large_ViewParams Open_System_Information_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_System_Information_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_System_Information_Tool_Qvi_Large_ViewParams = new Open_System_Information_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_System_Information_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Unzip_Tool_Large_ViewParams Open_Unzip_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Unzip_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Unzip_Tool_Large_ViewParams = new Open_Unzip_Tool_Large_ViewParams();
                }
                return this.mOpen_Unzip_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_WebRequest_LargeViewParams Open_WebRequest_LargeViewParams
        {
            get
            {
                if ((this.mOpen_WebRequest_LargeViewParams == null))
                {
                    this.mOpen_WebRequest_LargeViewParams = new Open_WebRequest_LargeViewParams();
                }
                return this.mOpen_WebRequest_LargeViewParams;
            }
        }
        
        public virtual Open_Write_File_Tool_Large_ViewParams Open_Write_File_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Write_File_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Write_File_Tool_Large_ViewParams = new Open_Write_File_Tool_Large_ViewParams();
                }
                return this.mOpen_Write_File_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Xpath_Tool_Large_ViewParams Open_Xpath_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Xpath_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Xpath_Tool_Large_ViewParams = new Open_Xpath_Tool_Large_ViewParams();
                }
                return this.mOpen_Xpath_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Xpath_Tool_Qvi_Large_ViewParams Open_Xpath_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Xpath_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Xpath_Tool_Qvi_Large_ViewParams = new Open_Xpath_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Xpath_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Zip_Tool_Large_ViewParams Open_Zip_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Zip_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Zip_Tool_Large_ViewParams = new Open_Zip_Tool_Large_ViewParams();
                }
                return this.mOpen_Zip_Tool_Large_ViewParams;
            }
        }
        
        public virtual Press_F6Params Press_F6Params
        {
            get
            {
                if ((this.mPress_F6Params == null))
                {
                    this.mPress_F6Params = new Press_F6Params();
                }
                return this.mPress_F6Params;
            }
        }
        
        public virtual PressF11_EnterFullScreenParams PressF11_EnterFullScreenParams
        {
            get
            {
                if ((this.mPressF11_EnterFullScreenParams == null))
                {
                    this.mPressF11_EnterFullScreenParams = new PressF11_EnterFullScreenParams();
                }
                return this.mPressF11_EnterFullScreenParams;
            }
        }
        
        public virtual RightClick_Explorer_Localhost_First_ItemParams RightClick_Explorer_Localhost_First_ItemParams
        {
            get
            {
                if ((this.mRightClick_Explorer_Localhost_First_ItemParams == null))
                {
                    this.mRightClick_Explorer_Localhost_First_ItemParams = new RightClick_Explorer_Localhost_First_ItemParams();
                }
                return this.mRightClick_Explorer_Localhost_First_ItemParams;
            }
        }
        
        public virtual Select_Delete_FromExplorerContextMenuParams Select_Delete_FromExplorerContextMenuParams
        {
            get
            {
                if ((this.mSelect_Delete_FromExplorerContextMenuParams == null))
                {
                    this.mSelect_Delete_FromExplorerContextMenuParams = new Select_Delete_FromExplorerContextMenuParams();
                }
                return this.mSelect_Delete_FromExplorerContextMenuParams;
            }
        }
        
        public virtual Select_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams Select_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams
        {
            get
            {
                if ((this.mSelect_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams == null))
                {
                    this.mSelect_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams = new Select_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams();
                }
                return this.mSelect_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams;
            }
        }
        
        public virtual Select_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues Select_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues
        {
            get
            {
                if ((this.mSelect_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues == null))
                {
                    this.mSelect_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues = new Select_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues();
                }
                return this.mSelect_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues;
            }
        }
        
        public virtual Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams
        {
            get
            {
                if ((this.mSelect_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams == null))
                {
                    this.mSelect_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams = new Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams();
                }
                return this.mSelect_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams;
            }
        }
        
        public virtual Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams
        {
            get
            {
                if ((this.mSelect_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams == null))
                {
                    this.mSelect_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams = new Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams();
                }
                return this.mSelect_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams;
            }
        }
        
        public virtual Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams
        {
            get
            {
                if ((this.mSelect_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams == null))
                {
                    this.mSelect_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams = new Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams();
                }
                return this.mSelect_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams;
            }
        }
        
        public virtual Select_NewDatabaseSource_FromSqlServerToolParams Select_NewDatabaseSource_FromSqlServerToolParams
        {
            get
            {
                if ((this.mSelect_NewDatabaseSource_FromSqlServerToolParams == null))
                {
                    this.mSelect_NewDatabaseSource_FromSqlServerToolParams = new Select_NewDatabaseSource_FromSqlServerToolParams();
                }
                return this.mSelect_NewDatabaseSource_FromSqlServerToolParams;
            }
        }
        
        public virtual Select_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues Select_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues
        {
            get
            {
                if ((this.mSelect_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues == null))
                {
                    this.mSelect_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues = new Select_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues();
                }
                return this.mSelect_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues;
            }
        }
        
        public virtual Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams
        {
            get
            {
                if ((this.mSelect_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams == null))
                {
                    this.mSelect_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams = new Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams();
                }
                return this.mSelect_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams;
            }
        }
        
        public virtual Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams
        {
            get
            {
                if ((this.mSelect_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams == null))
                {
                    this.mSelect_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams = new Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams();
                }
                return this.mSelect_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams;
            }
        }
        
        public virtual Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams
        {
            get
            {
                if ((this.mSelect_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams == null))
                {
                    this.mSelect_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams = new Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams();
                }
                return this.mSelect_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams;
            }
        }
        
        public virtual Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues
        {
            get
            {
                if ((this.mSelect_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues == null))
                {
                    this.mSelect_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues = new Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues();
                }
                return this.mSelect_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues;
            }
        }
        
        public virtual Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues
        {
            get
            {
                if ((this.mSelect_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues == null))
                {
                    this.mSelect_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues = new Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues();
                }
                return this.mSelect_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues;
            }
        }
        
        public virtual Select_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams Select_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams
        {
            get
            {
                if ((this.mSelect_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams == null))
                {
                    this.mSelect_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams = new Select_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams();
                }
                return this.mSelect_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams;
            }
        }
        
        public virtual Select_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams Select_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams
        {
            get
            {
                if ((this.mSelect_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams == null))
                {
                    this.mSelect_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams = new Select_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams();
                }
                return this.mSelect_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams;
            }
        }
        
        public virtual Select_User_From_RunTestAsParams Select_User_From_RunTestAsParams
        {
            get
            {
                if ((this.mSelect_User_From_RunTestAsParams == null))
                {
                    this.mSelect_User_From_RunTestAsParams = new Select_User_From_RunTestAsParams();
                }
                return this.mSelect_User_From_RunTestAsParams;
            }
        }
        
        public virtual Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues
        {
            get
            {
                if ((this.mType_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues == null))
                {
                    this.mType_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues = new Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues();
                }
                return this.mType_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues;
            }
        }
        
        public virtual Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues
        {
            get
            {
                if ((this.mType_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues == null))
                {
                    this.mType_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues = new Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues();
                }
                return this.mType_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues;
            }
        }
        
        public virtual Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams
        {
            get
            {
                if ((this.mType_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams == null))
                {
                    this.mType_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams = new Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams();
                }
                return this.mType_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams;
            }
        }
        
        public virtual Type_TestSite_into_Web_Source_Wizard_Address_TextboxParams Type_TestSite_into_Web_Source_Wizard_Address_TextboxParams
        {
            get
            {
                if ((this.mType_TestSite_into_Web_Source_Wizard_Address_TextboxParams == null))
                {
                    this.mType_TestSite_into_Web_Source_Wizard_Address_TextboxParams = new Type_TestSite_into_Web_Source_Wizard_Address_TextboxParams();
                }
                return this.mType_TestSite_into_Web_Source_Wizard_Address_TextboxParams;
            }
        }
        
        public virtual Search_And_Select_HelloWolrdParams Search_And_Select_HelloWolrdParams
        {
            get
            {
                if ((this.mSearch_And_Select_HelloWolrdParams == null))
                {
                    this.mSearch_And_Select_HelloWolrdParams = new Search_And_Select_HelloWolrdParams();
                }
                return this.mSearch_And_Select_HelloWolrdParams;
            }
        }
        
        public MainStudioWindow MainStudioWindow
        {
            get
            {
                if ((this.mMainStudioWindow == null))
                {
                    this.mMainStudioWindow = new MainStudioWindow();
                }
                return this.mMainStudioWindow;
            }
        }
        
        public MessageBoxWindow MessageBoxWindow
        {
            get
            {
                if ((this.mMessageBoxWindow == null))
                {
                    this.mMessageBoxWindow = new MessageBoxWindow();
                }
                return this.mMessageBoxWindow;
            }
        }
        
        public SaveDialogWindow SaveDialogWindow
        {
            get
            {
                if ((this.mSaveDialogWindow == null))
                {
                    this.mSaveDialogWindow = new SaveDialogWindow();
                }
                return this.mSaveDialogWindow;
            }
        }
        
        public SplashPageWindow SplashPageWindow
        {
            get
            {
                if ((this.mSplashPageWindow == null))
                {
                    this.mSplashPageWindow = new SplashPageWindow();
                }
                return this.mSplashPageWindow;
            }
        }
        
        public DecisionOrSwitchDialog DecisionOrSwitchDialog
        {
            get
            {
                if ((this.mDecisionOrSwitchDialog == null))
                {
                    this.mDecisionOrSwitchDialog = new DecisionOrSwitchDialog();
                }
                return this.mDecisionOrSwitchDialog;
            }
        }
        
        public SelectWindowsGroupDialog SelectWindowsGroupDialog
        {
            get
            {
                if ((this.mSelectWindowsGroupDialog == null))
                {
                    this.mSelectWindowsGroupDialog = new SelectWindowsGroupDialog();
                }
                return this.mSelectWindowsGroupDialog;
            }
        }
        
        public ServicePickerDialog ServicePickerDialog
        {
            get
            {
                if ((this.mServicePickerDialog == null))
                {
                    this.mServicePickerDialog = new ServicePickerDialog();
                }
                return this.mServicePickerDialog;
            }
        }
        
        public SwitchCaseDialog SwitchCaseDialog
        {
            get
            {
                if ((this.mSwitchCaseDialog == null))
                {
                    this.mSwitchCaseDialog = new SwitchCaseDialog();
                }
                return this.mSwitchCaseDialog;
            }
        }
        
        public UIWarewolfDEV2SANELEMTWindow UIWarewolfDEV2SANELEMTWindow
        {
            get
            {
                if ((this.mUIWarewolfDEV2SANELEMTWindow == null))
                {
                    this.mUIWarewolfDEV2SANELEMTWindow = new UIWarewolfDEV2SANELEMTWindow();
                }
                return this.mUIWarewolfDEV2SANELEMTWindow;
            }
        }
        #endregion
        
        #region Fields
        private Assert_CancelConnectionButton_ExistsExpectedValues mAssert_CancelConnectionButton_ExistsExpectedValues;
        
        private Assert_Connection_PassedExpectedValues mAssert_Connection_PassedExpectedValues;
        
        private Assert_RunDebug_Button_Exist_And_EnabledExpectedValues mAssert_RunDebug_Button_Exist_And_EnabledExpectedValues;
        
        private Assert_variable_filter_textbox_existExpectedValues mAssert_variable_filter_textbox_existExpectedValues;
        
        private AssertMethod6ExpectedValues mAssertMethod6ExpectedValues;
        
        private Assign_Value_To_VariableParams mAssign_Value_To_VariableParams;
        
        private Click_AddNew_Web_Source_From_toolParams mClick_AddNew_Web_Source_From_toolParams;
        
        private Click_Assign_Tool_CollapseAllParams mClick_Assign_Tool_CollapseAllParams;
        
        private Click_Assign_Tool_ExpandAllParams mClick_Assign_Tool_ExpandAllParams;
        
        private Click_Assign_Tool_Large_View_Done_ButtonParams mClick_Assign_Tool_Large_View_Done_ButtonParams;
        
        private Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams mClick_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams;
        
        private Click_Assign_Tool_Remove_Variable_From_ToolParams mClick_Assign_Tool_Remove_Variable_From_ToolParams;
        
        private Click_Assign_Tool_urlParams mClick_Assign_Tool_urlParams;
        
        private Click_Base_Convert_Large_View_Done_ButtonParams mClick_Base_Convert_Large_View_Done_ButtonParams;
        
        private Click_Calculate_Large_View_Done_ButtonParams mClick_Calculate_Large_View_Done_ButtonParams;
        
        private Click_Cancel_DebugInput_WindowParams mClick_Cancel_DebugInput_WindowParams;
        
        private Click_Close_Deploy_Tab_ButtonParams mClick_Close_Deploy_Tab_ButtonParams;
        
        private Click_Close_Settings_Tab_ButtonParams mClick_Close_Settings_Tab_ButtonParams;
        
        private Click_Close_Workflow_Tab_ButtonParams mClick_Close_Workflow_Tab_ButtonParams;
        
        private Click_Create_New_TestsParams mClick_Create_New_TestsParams;
        
        private Click_Debug_Output_Assign_CellParams mClick_Debug_Output_Assign_CellParams;
        
        private Click_Debug_Output_BaseConvert_CellParams mClick_Debug_Output_BaseConvert_CellParams;
        
        private Click_Debug_Output_Calculate_CellParams mClick_Debug_Output_Calculate_CellParams;
        
        private Click_Debug_Output_Workflow1_NameParams mClick_Debug_Output_Workflow1_NameParams;
        
        private Click_DebugInput_Debug_ButtonParams mClick_DebugInput_Debug_ButtonParams;
        
        private Click_DebugInput_ViewInBrowser_ButtonParams mClick_DebugInput_ViewInBrowser_ButtonParams;
        
        private Click_Decision_Dialog_Done_ButtonParams mClick_Decision_Dialog_Done_ButtonParams;
        
        private Click_Deploy_Tab_Destination_Server_ComboboxParams mClick_Deploy_Tab_Destination_Server_ComboboxParams;
        
        private Click_Deploy_Tab_Source_Server_ComboboxParams mClick_Deploy_Tab_Source_Server_ComboboxParams;
        
        private Click_DotNet_DLL_Large_View_Done_ButtonParams mClick_DotNet_DLL_Large_View_Done_ButtonParams;
        
        private Click_DotNet_DLL_Large_View_Generate_OutputsExpectedValues mClick_DotNet_DLL_Large_View_Generate_OutputsExpectedValues;
        
        private Click_ExpandAndStepIn_NestedWorkflowParams mClick_ExpandAndStepIn_NestedWorkflowParams;
        
        private Click_Explorer_Filter_Clear_ButtonParams mClick_Explorer_Filter_Clear_ButtonParams;
        
        private Click_Explorer_RemoteServer_Connect_ButtonParams mClick_Explorer_RemoteServer_Connect_ButtonParams;
        
        private Click_GET_Web_Large_View_Done_ButtonParams mClick_GET_Web_Large_View_Done_ButtonParams;
        
        private Click_GET_Web_Large_View_Generate_OutputsExpectedValues mClick_GET_Web_Large_View_Generate_OutputsExpectedValues;
        
        private Click_MessageBox_YesParams mClick_MessageBox_YesParams;
        
        private Click_New_Web_Source_Test_Connection_ButtonParams mClick_New_Web_Source_Test_Connection_ButtonParams;
        
        private Click_NewPluginSource_Ribbon_ButtonParams mClick_NewPluginSource_Ribbon_ButtonParams;
        
        private Click_NewVersion_buttonExpectedValues mClick_NewVersion_buttonExpectedValues;
        
        private Click_Output_OnRecordset_InVariableListParams mClick_Output_OnRecordset_InVariableListParams;
        
        private Click_Output_OnVariable_InVariableListParams mClick_Output_OnVariable_InVariableListParams;
        
        private Click_RunDebug_buttonParams mClick_RunDebug_buttonParams;
        
        private Click_Save_Ribbon_Button_to_Open_Save_DialogParams mClick_Save_Ribbon_Button_to_Open_Save_DialogParams;
        
        private Click_Save_Ribbon_Button_With_No_Save_DialogParams mClick_Save_Ribbon_Button_With_No_Save_DialogParams;
        
        private Click_Scheduler_Disable_Task_Radio_ButtonParams mClick_Scheduler_Disable_Task_Radio_ButtonParams;
        
        private Click_Scheduler_Enable_Task_Radio_ButtonParams mClick_Scheduler_Enable_Task_Radio_ButtonParams;
        
        private Click_Scheduler_RunTaskParams mClick_Scheduler_RunTaskParams;
        
        private Click_Select_Windows_Group_Cancel_ButtonParams mClick_Select_Windows_Group_Cancel_ButtonParams;
        
        private Click_Server_Source_Wizard_Address_Protocol_DropdownParams mClick_Server_Source_Wizard_Address_Protocol_DropdownParams;
        
        private Click_Server_Source_Wizard_Test_Connection_ButtonParams mClick_Server_Source_Wizard_Test_Connection_ButtonParams;
        
        private Click_Service_Picker_Dialog_OKParams mClick_Service_Picker_Dialog_OKParams;
        
        private Click_Show_Dependencies_In_Explorer_Context_MenuParams mClick_Show_Dependencies_In_Explorer_Context_MenuParams;
        
        private Click_SQL_Server_Large_View_Done_ButtonExpectedValues mClick_SQL_Server_Large_View_Done_ButtonExpectedValues;
        
        private Click_SQL_Server_Large_View_Generate_OutputsExpectedValues mClick_SQL_Server_Large_View_Generate_OutputsExpectedValues;
        
        private Click_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues mClick_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues;
        
        private Click_Switch_Dialog_Done_ButtonParams mClick_Switch_Dialog_Done_ButtonParams;
        
        private Click_Variable_IsInputParams mClick_Variable_IsInputParams;
        
        private Click_VariableList_Recordset_Row1_IsInputCheckboxParams mClick_VariableList_Recordset_Row1_IsInputCheckboxParams;
        
        private Click_VariableList_Scalar_Row1_IsInputCheckboxParams mClick_VariableList_Scalar_Row1_IsInputCheckboxParams;
        
        private Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams mDrag_DotNet_DLL_Connector_Onto_DesignSurfaceParams;
        
        private Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams mDrag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams;
        
        private Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams mDrag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams;
        
        private Drag_GET_Web_Connector_Onto_DesignSurfaceParams mDrag_GET_Web_Connector_Onto_DesignSurfaceParams;
        
        private Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams mDrag_GetWeb_RequestTool_Onto_DesignSurfaceParams;
        
        private Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams mDrag_PostWeb_RequestTool_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams mDrag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Calculate_Onto_DesignSurfaceParams mDrag_Toolbox_Calculate_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams mDrag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams mDrag_Toolbox_CMD_Line_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Comment_Onto_DesignSurfaceParams mDrag_Toolbox_Comment_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Copy_Onto_DesignSurfaceParams mDrag_Toolbox_Copy_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Count_Records_Onto_DesignSurfaceParams mDrag_Toolbox_Count_Records_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Create_Onto_DesignSurfaceParams mDrag_Toolbox_Create_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams mDrag_Toolbox_Data_Merge_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams mDrag_Toolbox_Data_Split_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams mDrag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams mDrag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Decision_Onto_DesignSurfaceParams mDrag_Toolbox_Decision_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Delete_Onto_DesignSurfaceParams mDrag_Toolbox_Delete_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Delete_Record_Onto_DesignSurfaceParams mDrag_Toolbox_Delete_Record_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams mDrag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams mDrag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams mDrag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams mDrag_Toolbox_Find_Index_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams mDrag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_For_Each_Onto_DesignSurfaceParams mDrag_Toolbox_For_Each_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams mDrag_Toolbox_Format_Number_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_JSON_Onto_DesignSurfaceParams mDrag_Toolbox_JSON_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Length_Onto_DesignSurfaceParams mDrag_Toolbox_Length_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Move_Onto_DesignSurfaceParams mDrag_Toolbox_Move_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams mDrag_Toolbox_MultiAssign_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_MySql_Database_Onto_DesignSurfaceParams mDrag_Toolbox_MySql_Database_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Random_Onto_DesignSurfaceParams mDrag_Toolbox_Random_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Read_File_Onto_DesignSurfaceParams mDrag_Toolbox_Read_File_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams mDrag_Toolbox_Read_Folder_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Rename_Onto_DesignSurfaceParams mDrag_Toolbox_Rename_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Replace_Onto_DesignSurfaceParams mDrag_Toolbox_Replace_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Script_Onto_DesignSurfaceParams mDrag_Toolbox_Script_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Sequence_Onto_DesignSurfaceParams mDrag_Toolbox_Sequence_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Service_Picker_Onto_DesignSurfaceParams mDrag_Toolbox_Service_Picker_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams mDrag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams mDrag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams mDrag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams mDrag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams mDrag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Sort_Record_Onto_DesignSurfaceParams mDrag_Toolbox_Sort_Record_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams mDrag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams mDrag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Switch_Onto_DesignSurfaceParams mDrag_Toolbox_Switch_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_System_Information_Onto_DesignSurfaceParams mDrag_Toolbox_System_Information_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Unique_Records_Onto_DesignSurfaceParams mDrag_Toolbox_Unique_Records_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Unzip_Onto_DesignSurfaceParams mDrag_Toolbox_Unzip_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams mDrag_Toolbox_Web_Request_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Write_File_Onto_DesignSurfaceParams mDrag_Toolbox_Write_File_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_XPath_Onto_DesignSurfaceParams mDrag_Toolbox_XPath_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Zip_Onto_DesignSurfaceParams mDrag_Toolbox_Zip_Onto_DesignSurfaceParams;
        
        private Enter_DeployViewOnly_Into_Deploy_Source_FilterParams mEnter_DeployViewOnly_Into_Deploy_Source_FilterParams;
        
        private Enter_InputDebug_valueParams mEnter_InputDebug_valueParams;
        
        private Enter_RunAsUser_Username_And_PasswordParams mEnter_RunAsUser_Username_And_PasswordParams;
        
        private Enter_SomeVariable_Into_Base_Convert_Large_View_Row1_Value_TextboxParams mEnter_SomeVariable_Into_Base_Convert_Large_View_Row1_Value_TextboxParams;
        
        private Enter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams mEnter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams;
        
        private Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams;
        
        private Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams;
        
        private Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams mEnter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams;
        
        private Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams mEnter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams;
        
        private Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams mEnter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams;
        
        private Filter_variablesParams mFilter_variablesParams;
        
        private Open_Assign_Tool_Large_ViewParams mOpen_Assign_Tool_Large_ViewParams;
        
        private Open_Assign_Tool_Qvi_Large_ViewParams mOpen_Assign_Tool_Qvi_Large_ViewParams;
        
        private Open_Base_Conversion_Tool_Large_ViewParams mOpen_Base_Conversion_Tool_Large_ViewParams;
        
        private Open_Base_Conversion_Tool_Qvi_Large_ViewParams mOpen_Base_Conversion_Tool_Qvi_Large_ViewParams;
        
        private Open_Calculate_Tool_Large_ViewParams mOpen_Calculate_Tool_Large_ViewParams;
        
        private Open_Case_Conversion_Tool_Qvi_Large_ViewParams mOpen_Case_Conversion_Tool_Qvi_Large_ViewParams;
        
        private Open_CMD_Line_Tool_Large_ViewParams mOpen_CMD_Line_Tool_Large_ViewParams;
        
        private Open_Copy_Tool_Large_ViewParams mOpen_Copy_Tool_Large_ViewParams;
        
        private Open_Create_Tool_Large_ViewParams mOpen_Create_Tool_Large_ViewParams;
        
        private Open_Data_Merge_Large_ViewParams mOpen_Data_Merge_Large_ViewParams;
        
        private Open_Data_Merge_Tool_Qvi_Large_ViewParams mOpen_Data_Merge_Tool_Qvi_Large_ViewParams;
        
        private Open_Data_Split_Large_ViewParams mOpen_Data_Split_Large_ViewParams;
        
        private Open_Data_Split_Tool_Qvi_Large_ViewParams mOpen_Data_Split_Tool_Qvi_Large_ViewParams;
        
        private Open_Delete_Tool_Large_ViewParams mOpen_Delete_Tool_Large_ViewParams;
        
        private Open_DotNet_DLL_Connector_Tool_Large_ViewParams mOpen_DotNet_DLL_Connector_Tool_Large_ViewParams;
        
        private Open_Explorer_First_Item_Tests_With_Context_MenuParams mOpen_Explorer_First_Item_Tests_With_Context_MenuParams;
        
        private Open_Explorer_First_Item_With_Context_MenuParams mOpen_Explorer_First_Item_With_Context_MenuParams;
        
        private Open_GET_Web_Connector_Tool_Large_ViewParams mOpen_GET_Web_Connector_Tool_Large_ViewParams;
        
        private Open_Json_Tool_Large_ViewParams mOpen_Json_Tool_Large_ViewParams;
        
        private Open_Json_Tool_Qvi_Large_ViewParams mOpen_Json_Tool_Qvi_Large_ViewParams;
        
        private Open_Large_View_FromContextMenuParams mOpen_Large_View_FromContextMenuParams;
        
        private Open_Move_Tool_Large_ViewParams mOpen_Move_Tool_Large_ViewParams;
        
        private Open_PostWeb_RequestTool_Large_ViewParams mOpen_PostWeb_RequestTool_Large_ViewParams;
        
        private Open_Read_File_Tool_Large_ViewParams mOpen_Read_File_Tool_Large_ViewParams;
        
        private Open_Read_Folder_Tool_Large_ViewParams mOpen_Read_Folder_Tool_Large_ViewParams;
        
        private Open_Rename_Tool_Large_ViewParams mOpen_Rename_Tool_Large_ViewParams;
        
        private Open_SMTP_Email_Tool_Large_ViewParams mOpen_SMTP_Email_Tool_Large_ViewParams;
        
        private Open_SQL_Bulk_Insert_Tool_Large_ViewParams mOpen_SQL_Bulk_Insert_Tool_Large_ViewParams;
        
        private Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams mOpen_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams;
        
        private Open_Sql_Server_Tool_Large_ViewExpectedValues mOpen_Sql_Server_Tool_Large_ViewExpectedValues;
        
        private Open_System_Information_Tool_Qvi_Large_ViewParams mOpen_System_Information_Tool_Qvi_Large_ViewParams;
        
        private Open_Unzip_Tool_Large_ViewParams mOpen_Unzip_Tool_Large_ViewParams;
        
        private Open_WebRequest_LargeViewParams mOpen_WebRequest_LargeViewParams;
        
        private Open_Write_File_Tool_Large_ViewParams mOpen_Write_File_Tool_Large_ViewParams;
        
        private Open_Xpath_Tool_Large_ViewParams mOpen_Xpath_Tool_Large_ViewParams;
        
        private Open_Xpath_Tool_Qvi_Large_ViewParams mOpen_Xpath_Tool_Qvi_Large_ViewParams;
        
        private Open_Zip_Tool_Large_ViewParams mOpen_Zip_Tool_Large_ViewParams;
        
        private Press_F6Params mPress_F6Params;
        
        private PressF11_EnterFullScreenParams mPressF11_EnterFullScreenParams;
        
        private RightClick_Explorer_Localhost_First_ItemParams mRightClick_Explorer_Localhost_First_ItemParams;
        
        private Select_Delete_FromExplorerContextMenuParams mSelect_Delete_FromExplorerContextMenuParams;
        
        private Select_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams mSelect_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams;
        
        private Select_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues mSelect_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues;
        
        private Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams mSelect_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams;
        
        private Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams mSelect_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams;
        
        private Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams mSelect_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams;
        
        private Select_NewDatabaseSource_FromSqlServerToolParams mSelect_NewDatabaseSource_FromSqlServerToolParams;
        
        private Select_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues mSelect_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues;
        
        private Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams mSelect_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams;
        
        private Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams mSelect_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams;
        
        private Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams mSelect_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams;
        
        private Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues mSelect_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues;
        
        private Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues mSelect_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues;
        
        private Select_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams mSelect_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams;
        
        private Select_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams mSelect_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams;
        
        private Select_User_From_RunTestAsParams mSelect_User_From_RunTestAsParams;
        
        private Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues mType_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues;
        
        private Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues mType_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues;
        
        private Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams mType_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams;
        
        private Type_TestSite_into_Web_Source_Wizard_Address_TextboxParams mType_TestSite_into_Web_Source_Wizard_Address_TextboxParams;
        
        private Search_And_Select_HelloWolrdParams mSearch_And_Select_HelloWolrdParams;
        
        private MainStudioWindow mMainStudioWindow;
        
        private MessageBoxWindow mMessageBoxWindow;
        
        private SaveDialogWindow mSaveDialogWindow;
        
        private SplashPageWindow mSplashPageWindow;
        
        private DecisionOrSwitchDialog mDecisionOrSwitchDialog;
        
        private SelectWindowsGroupDialog mSelectWindowsGroupDialog;
        
        private ServicePickerDialog mServicePickerDialog;
        
        private SwitchCaseDialog mSwitchCaseDialog;
        
        private UIWarewolfDEV2SANELEMTWindow mUIWarewolfDEV2SANELEMTWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_CancelConnectionButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_CancelConnectionButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Cancel Test' button equals 'True'
        /// </summary>
        public bool CancelTestButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Connection_Passed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Connection_PassedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of first image next to 'Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceCont...' custom control equals 'True'
        /// </summary>
        public bool ConnectionPassedImageExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_RunDebug_Button_Exist_And_Enabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_RunDebug_Button_Exist_And_EnabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Run and debug your workflow service' button equals 'True'
        /// </summary>
        public bool RunAndDebugButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Run and debug your workflow service' button equals 'True'
        /// </summary>
        public bool RunAndDebugButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_variable_filter_textbox_exist'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_variable_filter_textbox_existExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Filter' label equals 'True'
        /// </summary>
        public bool FilterTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'CreateTest' button equals 'True'
        /// </summary>
        public bool CreateanewtestButtonExists = true;
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'UI_ServiceTestView_AutoID' custom control equals 'Custom'
        /// </summary>
        public string ServiceTestViewControlType = "Custom";
        
        /// <summary>
        /// Verify that the 'Exists' property of link equals 'True'
        /// </summary>
        public bool UrlHyperlinkExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Passing:' label equals 'True'
        /// </summary>
        public bool PassingTextExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Run All' button equals 'True'
        /// </summary>
        public bool RunAllButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'TestsListbox' list box equals 'True'
        /// </summary>
        public bool TestsListboxListExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assign_Value_To_Variable'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assign_Value_To_VariableParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Text' text box equals 'True'
        /// </summary>
        public bool TextEditExists = true;
        
        /// <summary>
        /// Type '50' in 'Text' text box
        /// </summary>
        public string TextEditText = "50";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_AddNew_Web_Source_From_tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_AddNew_Web_Source_From_toolParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New' button equals 'True'
        /// </summary>
        public bool NewButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Assign_Tool_CollapseAll'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Assign_Tool_CollapseAllParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'CollapseAll' toggle button equals 'True'
        /// </summary>
        public bool CollapseAllToggleButtonExists = true;
        
        /// <summary>
        /// Set to 'Pressed' state 'CollapseAll' toggle button
        /// </summary>
        public bool CollapseAllToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Assign_Tool_ExpandAll'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Assign_Tool_ExpandAllParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ExpandAll' toggle button equals 'True'
        /// </summary>
        public bool ExpandAllToggleButtonExists = true;
        
        /// <summary>
        /// Set to 'Pressed' state 'ExpandAll' toggle button
        /// </summary>
        public bool ExpandAllToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
        /// </summary>
        public bool MultiAssignExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Assign_Tool_Large_View_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Assign_Tool_Large_View_Done_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'UI_TextBox_AutoID' text box equals '[[SomeVariable]]'
        /// </summary>
        public string TextboxText = "[[SomeVariable]]";
        
        /// <summary>
        /// Verify that the 'Text' property of 'UI_NameTextBox_AutoID' text box equals 'SomeVariable'
        /// </summary>
        public string TextBoxText1 = "SomeVariable";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Open Quick Variable Input' toggle button equals 'True'
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Hyperlink' link equals 'True'
        /// </summary>
        public bool HyperlinkExists = true;
        
        /// <summary>
        /// Verify that the 'Text' property of 'UI_NameTextBox_AutoID' text box equals ''
        /// </summary>
        public string TextBoxText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Assign_Tool_Remove_Variable_From_Tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Assign_Tool_Remove_Variable_From_ToolParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
        /// </summary>
        public bool MultiAssignExists = true;
        
        /// <summary>
        /// Type '[[SomeOtherVariable]]' in 'UI__Row1_FieldName_AutoID' text box
        /// </summary>
        public string TextboxText = "[[SomeOtherVariable]]";
        
        /// <summary>
        /// Type '{Right}{Tab}' in 'UI__Row1_FieldName_AutoID' text box
        /// </summary>
        public string TextboxSendKeys = "{Right}{Tab}";
        
        /// <summary>
        /// Verify that the 'Text' property of 'UI__Row1_FieldName_AutoID' text box equals '[[SomeOtherVariable]]'
        /// </summary>
        public string TextboxText1 = "[[SomeOtherVariable]]";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Row1_FieldName_AutoID' text box equals 'True'
        /// </summary>
        public bool TextboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
        /// </summary>
        public bool VariableSearchTextBoxEditExists = true;
        
        /// <summary>
        /// Type 'Other' in 'SearchTextBox' text box
        /// </summary>
        public string VariableSearchTextBoxEditText = "Other";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'ClearSearchButton' button equals 'True'
        /// </summary>
        public bool ClearSearchButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DeleteButton' button equals 'True'
        /// </summary>
        public bool DeleteButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Assign_Tool_url'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Assign_Tool_urlParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'http://rsaklfsanele:3142/secure/Unassigned/Unsaved...' link equals 'True'
        /// </summary>
        public bool Httprsaklfsanele3142HyperlinkExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'WarewolfMessageBox' window equals 'True'
        /// </summary>
        public bool MessageBoxWindowExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'OK' button equals 'True'
        /// </summary>
        public bool OKButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Base_Convert_Large_View_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Base_Convert_Large_View_Done_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'UI__Row1_FromExpressiontxt_AutoID' text box equals '[[SomeVariable]]'
        /// </summary>
        public string ValueTextboxText = "[[SomeVariable]]";
        
        /// <summary>
        /// Verify that the 'Text' property of 'UI_NameTextBox_AutoID' text box equals 'SomeVariable'
        /// </summary>
        public string TextBoxText = "SomeVariable";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Calculate_Large_View_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Calculate_Large_View_Done_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'FunctionTextbox' text box equals '[[SomeVariable]]'
        /// </summary>
        public string FunctionTextboxText = "[[SomeVariable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Cancel_DebugInput_Window'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Cancel_DebugInput_WindowParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Cancel' button equals 'True'
        /// </summary>
        public bool CancelButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Close_Deploy_Tab_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Close_Deploy_Tab_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool TabCloseButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Close_Settings_Tab_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Close_Settings_Tab_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool CloseButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Close_Workflow_Tab_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Close_Workflow_Tab_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'closeBtn' custom control equals 'True'
        /// </summary>
        public bool CloseButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Create_New_Tests'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Create_New_TestsParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Warewolf.Studio.ViewModels.ServiceTestModel' list item equals 'True'
        /// </summary>
        public bool Test1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Test Name' label equals 'True'
        /// </summary>
        public bool TestNameTextExists = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'Select or De-Select to run the test' check box equals 'True'
        /// </summary>
        public bool TestEnabledSelectorChecked = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Text' text box equals 'True'
        /// </summary>
        public bool TextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Debug_Output_Assign_Cell'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Debug_Output_Assign_CellParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '[[SomeVariable]]' label equals '[[SomeVariable]]'
        /// </summary>
        public string VariableTextboxDisplayText = "[[SomeVariable]]";
        
        /// <summary>
        /// Verify that the 'ItemStatus' property of 'DsfMultiAssignActivity' custom control equals 'IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid '
        /// </summary>
        public string MultiAssignItemStatus = "IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=" +
            "null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Debug_Output_BaseConvert_Cell'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Debug_Output_BaseConvert_CellParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ItemStatus' property of 'DsfBaseConvertActivity' custom control equals 'IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid '
        /// </summary>
        public string BaseConvertItemStatus = "IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=" +
            "null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Debug_Output_Calculate_Cell'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Debug_Output_Calculate_CellParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ItemStatus' property of 'DsfCalculateActivity' custom control equals 'IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid '
        /// </summary>
        public string CalculateItemStatus = "IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=" +
            "null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Debug_Output_Workflow1_Name'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Debug_Output_Workflow1_NameParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'workflow1 - ci-remote' label equals 'workflow1 - ci-remote'
        /// </summary>
        public string Workflow1ciremoteTextDisplayText = "workflow1 - ci-remote";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_DebugInput_Debug_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_DebugInput_Debug_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Debug (F6)' button equals 'True'
        /// </summary>
        public bool DebugF6ButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'OUTPUT' custom control equals 'True'
        /// </summary>
        public bool DebugOutputExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool SettingsButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of '+' button equals 'True'
        /// </summary>
        public bool ExpandCollapseButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
        /// </summary>
        public bool SearchTextBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DebugOutputTree' tree equals 'True'
        /// </summary>
        public bool DebugOutputTreeExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool SettingsButtonExists1 = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_DebugInput_ViewInBrowser_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_DebugInput_ViewInBrowser_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'View In Browser (F7)' button equals 'True'
        /// </summary>
        public bool ViewInBrowserF7ButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Decision_Dialog_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Decision_Dialog_Done_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'FlowDecision' custom control equals 'True'
        /// </summary>
        public bool DecisionExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Deploy_Tab_Destination_Server_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Deploy_Tab_Destination_Server_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsNewRemoteServerExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Deploy_Tab_Source_Server_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Deploy_Tab_Source_Server_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsNewRemoteServerExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_DotNet_DLL_Large_View_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_DotNet_DLL_Large_View_Done_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SmallViewContent' custom control equals 'True'
        /// </summary>
        public bool SmallViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_DotNet_DLL_Large_View_Generate_Outputs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_DotNet_DLL_Large_View_Generate_OutputsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Test' button equals 'True'
        /// </summary>
        public bool TestButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_ExpandAndStepIn_NestedWorkflow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_ExpandAndStepIn_NestedWorkflowParams
    {
        
        #region Fields
        /// <summary>
        /// Expand 'Hello World' tree item
        /// </summary>
        public bool SubWorkflowExpanded = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Explorer_Filter_Clear_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Explorer_Filter_Clear_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'SearchTextBox' text box equals ''
        /// </summary>
        public string SearchTextBoxText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Explorer_RemoteServer_Connect_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Explorer_RemoteServer_Connect_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Wait for 2 seconds for user delay between actions; Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
        /// </summary>
        public bool FirstRemoteServerExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_GET_Web_Large_View_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_GET_Web_Large_View_Done_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SmallViewContent' custom control equals 'True'
        /// </summary>
        public bool SmallViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_GET_Web_Large_View_Generate_Outputs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_GET_Web_Large_View_Generate_OutputsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Verify that the 'Exists' property of 'Test' button equals 'True'
        /// </summary>
        public bool TestButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_MessageBox_Yes'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_MessageBox_YesParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'WarewolfMessageBox' window equals 'False'
        /// </summary>
        public bool MessageBoxWindowExists = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_New_Web_Source_Test_Connection_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_New_Web_Source_Test_Connection_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Save this tab' button equals 'True'
        /// </summary>
        public bool SaveButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_NewPluginSource_Ribbon_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_NewPluginSource_Ribbon_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Verify that the 'Exists' property of 'ExplorerTree' tree equals 'True'
        /// </summary>
        public bool TreeExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'AssemblyNameTextBox' text box equals 'True'
        /// </summary>
        public bool AssemblyNameTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_NewVersion_button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_NewVersion_buttonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'VersionButton' button equals 'True'
        /// </summary>
        public bool NewVersionButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'VersionButton' button equals 'True'
        /// </summary>
        public bool NewVersionButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Output_OnRecordset_InVariableList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Output_OnRecordset_InVariableListParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsOutputCheckbox_AutoID' check box
        /// </summary>
        public bool IsOutputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Output_OnVariable_InVariableList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Output_OnVariable_InVariableListParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsOutputCheckbox_AutoID' check box
        /// </summary>
        public bool IsOutputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_RunDebug_button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_RunDebug_buttonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Wpf' window equals 'True'
        /// </summary>
        public bool DebugInputDialogExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Cancel' button equals 'True'
        /// </summary>
        public bool CancelButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Remember Debug Inputs' check box equals 'True'
        /// </summary>
        public bool RememberDebugInputCheckBoxEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Input Data' tab equals 'True'
        /// </summary>
        public bool InputDataTabEnabled = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'Remember Debug Inputs' check box equals 'True'
        /// </summary>
        public bool RememberDebugInputCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'XML' tab equals 'True'
        /// </summary>
        public bool XMLTabExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'JSON' tab equals 'True'
        /// </summary>
        public bool JSONTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Save_Ribbon_Button_to_Open_Save_Dialog'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Save_Ribbon_Button_to_Open_Save_DialogParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Save this tab' button equals 'True'
        /// </summary>
        public bool SaveButtonExists = true;
        
        /// <summary>
        /// Wait for 2 seconds for user delay between actions; Verify that the 'Exists' property of 'Cancel' button equals 'True'
        /// </summary>
        public bool CancelButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of ''Name' cannot be empty.' label equals 'True'
        /// </summary>
        public bool ErrorLabelExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'ExplorerTree' tree equals 'True'
        /// </summary>
        public bool ExplorerTreeExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'ExplorerView' custom control equals 'True'
        /// </summary>
        public bool ExplorerViewExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
        /// </summary>
        public bool SearchTextBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Name:' label equals 'True'
        /// </summary>
        public bool NameLabelExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool RefreshButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Save' button equals 'True'
        /// </summary>
        public bool SaveButtonExists1 = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'SaveDialogView' window equals 'True'
        /// </summary>
        public bool SaveDialogWindowExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'ServiceNameTextBox' text box equals 'True'
        /// </summary>
        public bool ServiceNameTextBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'SaveDialogView' window equals 'True'
        /// </summary>
        public bool SaveDialogWindowExists1 = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'ServiceNameTextBox' text box equals 'True'
        /// </summary>
        public bool ServiceNameTextBoxExists1 = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Save_Ribbon_Button_With_No_Save_Dialog'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Save_Ribbon_Button_With_No_Save_DialogParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Save this tab' button equals 'True'
        /// </summary>
        public bool SaveButtonExists = true;
        
        /// <summary>
        /// Wait for 2 seconds for user delay between actions; Verify that the 'Enabled' property of 'Save this tab' button equals 'False'
        /// </summary>
        public bool SaveButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Scheduler_Disable_Task_Radio_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Scheduler_Disable_Task_Radio_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Clear check box
        /// </summary>
        public bool StatusCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Scheduler_Enable_Task_Radio_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Scheduler_Enable_Task_Radio_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Select check box
        /// </summary>
        public bool StatusCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Scheduler_RunTask'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Scheduler_RunTaskParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Run task as soon as possible after a scheduled sta...' check box
        /// </summary>
        public bool RunTaskCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Select_Windows_Group_Cancel_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Select_Windows_Group_Cancel_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Cancel' button equals 'True'
        /// </summary>
        public bool CancelExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Server_Source_Wizard_Address_Protocol_Dropdown'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Server_Source_Wizard_Address_Protocol_DropdownParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'http' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsHttpExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Server_Source_Wizard_Test_Connection_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Server_Source_Wizard_Test_Connection_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Wait for 3 seconds for user delay between actions; Verify that the 'Enabled' property of 'Save this tab' button equals 'True'
        /// </summary>
        public bool SaveButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Service_Picker_Dialog_OK'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Service_Picker_Dialog_OKParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ServicePickerDialog' window equals 'False'
        /// </summary>
        public bool ServicePickerDialogExists = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Show_Dependencies_In_Explorer_Context_Menu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Show_Dependencies_In_Explorer_Context_MenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Selected' property of 'Show what depends on this' radio button equals 'True'
        /// </summary>
        public bool ShowwhatdependsonthisRadioButtonSelected = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of first text box next to 'Nesting Levels' label equals 'True'
        /// </summary>
        public bool TextboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Refresh' button equals 'True'
        /// </summary>
        public bool RefreshButtonExists = true;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'RemoteServerUITestWorkflow' label equals 'RemoteServerUITestWorkflow'
        /// </summary>
        public string TextDisplayText = "RemoteServerUITestWorkflow";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_SQL_Server_Large_View_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_SQL_Server_Large_View_Done_ButtonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_SQL_Server_Large_View_Generate_Outputs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_SQL_Server_Large_View_Generate_OutputsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Generate Outputs' button equals 'True'
        /// </summary>
        public bool GenerateOutputsButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Text' text box equals 'True'
        /// </summary>
        public bool TestDataTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_SQL_Server_Large_View_Test_Inputs_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool TestInputsDoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Switch_Dialog_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Switch_Dialog_Done_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'FlowSwitch`1[String]' custom control equals 'True'
        /// </summary>
        public bool SwitchExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Variable_IsInput'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Variable_IsInputParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'InputCell' cell equals 'True'
        /// </summary>
        public bool InputCellExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'InputCell' cell equals 'True'
        /// </summary>
        public bool InputCellEnabled = true;
        
        /// <summary>
        /// Select 'UI_IsInputCheckbox_AutoID' check box
        /// </summary>
        public bool IsInputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_VariableList_Recordset_Row1_IsInputCheckbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_VariableList_Recordset_Row1_IsInputCheckboxParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsInputCheckbox_AutoID' check box
        /// </summary>
        public bool IsInputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_VariableList_Scalar_Row1_IsInputCheckbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_VariableList_Scalar_Row1_IsInputCheckboxParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsInputCheckbox_AutoID' check box
        /// </summary>
        public bool IsInputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_DotNet_DLL_Connector_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'DotNet DLL' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "DotNet DLL";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDotNetDllActivity' custom control equals 'True'
        /// </summary>
        public bool DotNetDllExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_Surface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
        /// </summary>
        public bool FirstItemExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_Surface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
        /// </summary>
        public bool FirstItemExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfActivity' custom control equals 'True'
        /// </summary>
        public bool SubWorkflowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_GET_Web_Connector_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_GET_Web_Connector_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'GET' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "GET";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebGetActivity' custom control equals 'True'
        /// </summary>
        public bool WebGetExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_GetWeb_RequestTool_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Web Request' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Web Request";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebRequestActivity' custom control equals 'True'
        /// </summary>
        public bool WebRequestExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_PostWeb_RequestTool_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'POST' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "POST";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebPostActivity' custom control equals 'True'
        /// </summary>
        public bool WebPostExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Base_Conversion_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Base Convert' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Base Convert";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfBaseConvertActivity' custom control equals 'True'
        /// </summary>
        public bool BaseConvertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Calculate_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Calculate_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Calculate' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Calculate";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCalculateActivity' custom control equals 'True'
        /// </summary>
        public bool CalculateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Case_Conversion_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Case Convert' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Case Convert";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCaseConvertActivity' custom control equals 'True'
        /// </summary>
        public bool CaseConvertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_CMD_Line_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'CMD Script' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "CMD Script";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfExecuteCommandLineActivity' custom control equals 'True'
        /// </summary>
        public bool ExecuteCommandLineExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Comment_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Comment_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Comment' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Comment";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCommentActivity' custom control equals 'True'
        /// </summary>
        public bool CommentExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Copy_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Copy_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Copy' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Copy";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathCopy' custom control equals 'True'
        /// </summary>
        public bool PathCopyExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Count_Records_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Count_Records_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Count' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Count";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Create_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Create_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Create' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Create";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathCreate' custom control equals 'True'
        /// </summary>
        public bool PathCreateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Data_Merge_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Data Merge' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Data Merge";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
        /// </summary>
        public bool DataMergeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Data_Split_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Data Split' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Data Split";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
        /// </summary>
        public bool DataSplitExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Date_And_Time_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Date Time' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Date Time";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDateTimeActivity' custom control equals 'True'
        /// </summary>
        public bool DateTimeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_DateTime_Difference_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Date Time Diff' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Date Time Diff";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDateTimeDifferenceActivity' custom control equals 'True'
        /// </summary>
        public bool DateTimeDifferenceExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Decision_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Decision_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Decision' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Decision";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Delete_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Delete_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Delete' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Delete";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathDelete' custom control equals 'True'
        /// </summary>
        public bool PathDeleteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Delete_Record_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Delete_Record_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Delete' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Delete";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Dropbox_Download_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Download' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Download";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Dropbox_Upload_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Upload' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Upload";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Exchange_Email_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Exchange Email' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Exchange Email";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Find_Index_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Find Index' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Find Index";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfIndexActivity' custom control equals 'True'
        /// </summary>
        public bool FindIndexExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Find_Record_Index_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Find Records' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Find Records";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_For_Each_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_For_Each_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'ForEach' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "ForEach";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfForEachActivity' custom control equals 'True'
        /// </summary>
        public bool ForEachExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__ForEachType_AutoID' combo box equals 'True'
        /// </summary>
        public bool ForEachTypeComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Text' text box equals 'True'
        /// </summary>
        public bool TextboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Drop Activity Here' custom control equals 'True'
        /// </summary>
        public bool DropActivityHereExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Text' text box equals 'True'
        /// </summary>
        public bool TextboxExists1 = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Format_Number_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Format Number' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Format Number";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfNumberFormatActivity' custom control equals 'True'
        /// </summary>
        public bool FormatNumberExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_JSON_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_JSON_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Create JSON' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Create JSON";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
        /// </summary>
        public bool CreateJsonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Length_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Length_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Length' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Length";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfRecordsetLengthActivity' custom control equals 'True'
        /// </summary>
        public bool LengthExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Move_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Move_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Move' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Move";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathMove' custom control equals 'True'
        /// </summary>
        public bool PathMoveExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_MultiAssign_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Assign' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Assign";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item equals 'True'
        /// </summary>
        public bool MultiAssignExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_TextBox_AutoID' text box equals 'True'
        /// </summary>
        public bool TextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_MySql_Database_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_MySql_Database_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'MySQL' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "MySQL";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Random_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Random_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Random' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Random";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfRandomActivity' custom control equals 'True'
        /// </summary>
        public bool RandomExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Read_File_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Read_File_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Read File' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Read File";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFileRead' custom control equals 'True'
        /// </summary>
        public bool FileReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Read_Folder_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Read Folder' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Read Folder";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFolderRead' custom control equals 'True'
        /// </summary>
        public bool FolderReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Rename_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Rename_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Rename' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Rename";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathRename' custom control equals 'True'
        /// </summary>
        public bool PathRenameExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Replace_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Replace_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Replace' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Replace";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfReplaceActivity' custom control equals 'True'
        /// </summary>
        public bool ReplaceExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Script_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Script_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Script' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Script";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfScriptingActivity' custom control equals 'True'
        /// </summary>
        public bool ScriptingExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Sequence_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Sequence_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Sequence' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Sequence";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSequenceActivity' custom control equals 'True'
        /// </summary>
        public bool SequenceExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Service_Picker_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Service_Picker_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Service' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Service";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Cancel' button equals 'True'
        /// </summary>
        public bool CancelExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Sharepoint_Create_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Create List Item' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Create List Item";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Delete List Item' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Delete List Item";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Sharepoint_Read_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Read List Item' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Read List Item";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Sharepoint_Update_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Update List Item' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Update List Item";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_SMTP_Email_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'SMTP Send' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "SMTP Send";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSendEmailActivity' custom control equals 'True'
        /// </summary>
        public bool SMTPEmailExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Sort_Record_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Sort_Record_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Sort' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Sort";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'SQL Bulk Insert' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "SQL Bulk Insert";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
        /// </summary>
        public bool SqlBulkInsertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'SQL Server' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "SQL Server";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Switch_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Switch_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Switch' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Switch";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_System_Information_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_System_Information_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Sys Info' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Sys Info";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfGatherSystemInformationActivity' custom control equals 'True'
        /// </summary>
        public bool GatherSystemInfoExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Unique_Records_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Unique_Records_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Unique' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Unique";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Unzip_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Unzip_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Unzip' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Unzip";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfUnZip' custom control equals 'True'
        /// </summary>
        public bool UnZipExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Web_Request_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Web Request' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Web Request";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebRequestActivity' custom control equals 'True'
        /// </summary>
        public bool WebRequestExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Write_File_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Write_File_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Write File' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Write File";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFileWrite' custom control equals 'True'
        /// </summary>
        public bool FileWriteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_XPath_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_XPath_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'XPath' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "XPath";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
        /// </summary>
        public bool XPathExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Zip_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Zip_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Zip' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Zip";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfZip' custom control equals 'True'
        /// </summary>
        public bool ZipExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_DeployViewOnly_Into_Deploy_Source_Filter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_DeployViewOnly_Into_Deploy_Source_FilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'DeployViewOnly' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextboxText = "DeployViewOnly";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
        /// </summary>
        public bool FirstExplorerTreeItemExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'ResourceNameCheckBox' check box equals 'True'
        /// </summary>
        public bool CheckBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_InputDebug_value'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_InputDebug_valueParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Row1' pane equals 'True'
        /// </summary>
        public bool Row1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Text' text box equals 'True'
        /// </summary>
        public bool InputValueTextExists = true;
        
        /// <summary>
        /// Type '100' in 'Text' text box
        /// </summary>
        public string InputValueTextText = "100";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_RunAsUser_Username_And_Password'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_RunAsUser_Username_And_PasswordParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'testuser' in 'UsernameTextBox' text box
        /// </summary>
        public string UsernameTextBoxEditText = "testuser";
        
        /// <summary>
        /// Type '{Tab}' in 'UsernameTextBox' text box
        /// </summary>
        public string UsernameTextBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'PasswordTextBox' text box
        /// </summary>
        public string PasswordTextBoxEditSendKeys = "a1cbgHEVu098QBN0jqs55wYP/bLfpGNMxw2YxtLIgKOALxPfITSBDjNERdIi/KEq";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_SomeVariable_Into_Base_Convert_Large_View_Row1_Value_Textbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_SomeVariable_Into_Base_Convert_Large_View_Row1_Value_TextboxParams
    {
        
        #region Fields
        /// <summary>
        /// Type '[[SomeVariable]]' in 'UI__Row1_FromExpressiontxt_AutoID' text box
        /// </summary>
        public string ValueTextboxText = "[[SomeVariable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_SomeVariable_Into_Calculate_Large_View_Function_Textbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams
    {
        
        #region Fields
        /// <summary>
        /// Type '[[SomeVariable]]' in 'FunctionTextbox' text box
        /// </summary>
        public string FunctionTextboxText = "[[SomeVariable]]";
        
        /// <summary>
        /// Verify that the 'Text' property of 'FunctionTextbox' text box equals '[[SomeVariable]]'
        /// </summary>
        public string FunctionTextboxText1 = "[[SomeVariable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams
    {
        
        #region Fields
        /// <summary>
        /// Type '[[Some$Invalid%Variable]]' in 'UI__Row1_FieldName_AutoID' text box
        /// </summary>
        public string TextboxText = "[[Some$Invalid%Variable]]";
        
        /// <summary>
        /// Verify that the 'Text' property of 'UI__Row1_FieldName_AutoID' text box equals '[[Some$Invalid%Variable]]'
        /// </summary>
        public string TextboxText1 = "[[Some$Invalid%Variable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariable'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams
    {
        
        #region Fields
        /// <summary>
        /// Type '[[Some{Down}{Enter}Variable]]' in 'UI__Row1_FieldName_AutoID' text box
        /// </summary>
        public string TextboxSendKeys = "[[Some{Down}{Enter}Variable]]";
        
        /// <summary>
        /// Verify that the 'Text' property of 'UI__Row1_FieldName_AutoID' text box equals '[[SomeVariable]]'
        /// </summary>
        public string TextboxText = "[[SomeVariable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_Suggestion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams
    {
        
        #region Fields
        /// <summary>
        /// Type '[[' in 'UI_TextBox_AutoID' text box
        /// </summary>
        public string TextboxText = "[[";
        
        /// <summary>
        /// Verify that the 'Text' property of 'UI_TextBox_AutoID' text box equals '[[SomeVariable]]'
        /// </summary>
        public string TextboxText1 = "[[SomeVariable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisense'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams
    {
        
        #region Fields
        /// <summary>
        /// Type '[[{Down}{Enter}' in 'UI_TextBox_AutoID' text box
        /// </summary>
        public string TextboxSendKeys = "[[{Down}{Enter}";
        
        /// <summary>
        /// Verify that the 'Text' property of 'UI_TextBox_AutoID' text box equals '[[SomeVariable]]'
        /// </summary>
        public string TextboxText = "[[SomeVariable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Coded UI Test' in 'Text' text box
        /// </summary>
        public string TextboxSendKeys = "Coded UI Test";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Text' text box equals 'Coded UI Test'
        /// </summary>
        public string TextboxText = "Coded UI Test";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Filter_variables'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Filter_variablesParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Filter' label equals 'True'
        /// </summary>
        public bool FilterTextExists = true;
        
        /// <summary>
        /// Type 'Other' in 'SearchTextBox' text box
        /// </summary>
        public string VariableSearchTextBoxEditText = "Other";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Assign_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Assign_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
        /// </summary>
        public bool MultiAssignExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Row1_FieldName_AutoID' text box equals 'True'
        /// </summary>
        public bool TextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Assign_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Assign_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
        /// </summary>
        public bool QuickVariableInputContentExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Base_Conversion_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Base_Conversion_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'UI__Row1_FromExpressiontxt_AutoID' text box equals 'True'
        /// </summary>
        public bool ValueTextboxEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Base_Conversion_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Base_Conversion_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfBaseConvertActivity' custom control equals 'True'
        /// </summary>
        public bool BaseConvertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Calculate_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Calculate_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
        /// </summary>
        public bool LargeViewExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Listbox' combo box equals 'True'
        /// </summary>
        public bool ListboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'FunctionTextbox' text box equals 'True'
        /// </summary>
        public bool FunctionTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Case_Conversion_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Case_Conversion_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCaseConvertActivity' custom control equals 'True'
        /// </summary>
        public bool CaseConvertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_CMD_Line_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_CMD_Line_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfExecuteCommandLineActivity' custom control equals 'True'
        /// </summary>
        public bool ExecuteCommandLineExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Copy_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Copy_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathCopy' custom control equals 'True'
        /// </summary>
        public bool PathCopyExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Create_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Create_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathCreate' custom control equals 'True'
        /// </summary>
        public bool PathCreateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Data_Merge_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Data_Merge_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
        /// </summary>
        public bool DataMergeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Data_Merge_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Data_Merge_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
        /// </summary>
        public bool DataMergeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Data_Split_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Data_Split_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
        /// </summary>
        public bool DataSplitExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Data_Split_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Data_Split_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
        /// </summary>
        public bool DataSplitExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Delete_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Delete_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathDelete' custom control equals 'True'
        /// </summary>
        public bool PathDeleteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_DotNet_DLL_Connector_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_DotNet_DLL_Connector_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
        /// </summary>
        public bool LargeViewExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'NamespaceComboBox' combo box equals 'True'
        /// </summary>
        public bool ClassNameComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'ActionsComboBox' combo box equals 'True'
        /// </summary>
        public bool ActionsComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Generate Outputs' button equals 'True'
        /// </summary>
        public bool GenerateOutputsButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeDataGrid' table equals 'True'
        /// </summary>
        public bool InputsTableExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Explorer_First_Item_Tests_With_Context_Menu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Explorer_First_Item_Tests_With_Context_MenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Tests' menu item equals 'True'
        /// </summary>
        public bool TestsExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Run All' button equals 'True'
        /// </summary>
        public bool RunAllButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Explorer_First_Item_With_Context_Menu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Explorer_First_Item_With_Context_MenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Open' menu item equals 'True'
        /// </summary>
        public bool OpenExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_GET_Web_Connector_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_GET_Web_Connector_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SourcesComboBox' combo box equals 'True'
        /// </summary>
        public bool SourcesComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Generate Outputs' button equals 'True'
        /// </summary>
        public bool GenerateOutputsButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Json_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Json_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
        /// </summary>
        public bool CreateJsonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Json_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Json_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
        /// </summary>
        public bool CreateJsonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Large_View_FromContextMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Large_View_FromContextMenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New' button equals 'True'
        /// </summary>
        public bool NewDbSourceButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Move_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Move_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathMove' custom control equals 'True'
        /// </summary>
        public bool PathMoveExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_PostWeb_RequestTool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_PostWeb_RequestTool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
        /// </summary>
        public bool LargeViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Read_File_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Read_File_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFileRead' custom control equals 'True'
        /// </summary>
        public bool FileReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Read_Folder_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Read_Folder_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFolderRead' custom control equals 'True'
        /// </summary>
        public bool FolderReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Rename_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Rename_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathRename' custom control equals 'True'
        /// </summary>
        public bool PathRenameExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_SMTP_Email_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_SMTP_Email_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
        /// </summary>
        public bool LargeViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_SQL_Bulk_Insert_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_SQL_Bulk_Insert_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
        /// </summary>
        public bool SqlBulkInsertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_SQL_Bulk_Insert_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
        /// </summary>
        public bool SqlBulkInsertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Sql_Server_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Sql_Server_Tool_Large_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
        /// </summary>
        public bool LargeViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_System_Information_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_System_Information_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfGatherSystemInformationActivity' custom control equals 'True'
        /// </summary>
        public bool GatherSystemInfoExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Unzip_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Unzip_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfUnZip' custom control equals 'True'
        /// </summary>
        public bool UnZipExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_WebRequest_LargeView'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_WebRequest_LargeViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
        /// </summary>
        public bool LargeViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Write_File_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Write_File_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFileWrite' custom control equals 'True'
        /// </summary>
        public bool FileWriteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Xpath_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Xpath_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
        /// </summary>
        public bool XPathExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Xpath_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Xpath_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
        /// </summary>
        public bool XPathExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Zip_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Zip_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfZip' custom control equals 'True'
        /// </summary>
        public bool ZipExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Press_F6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Press_F6Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{F6}' in 'Warewolf' window
        /// </summary>
        public string MainStudioWindowSendKeys = "{F6}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PressF11_EnterFullScreen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PressF11_EnterFullScreenParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{F11}' in 'Warewolf' window
        /// </summary>
        public string MainStudioWindowSendKeys = "{F11}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RightClick_Explorer_Localhost_First_Item'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RightClick_Explorer_Localhost_First_ItemParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Open' menu item equals 'True'
        /// </summary>
        public bool OpenExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Show Dependencies' menu item equals 'True'
        /// </summary>
        public bool ShowDependenciesExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Delete' menu item equals 'True'
        /// </summary>
        public bool DeleteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_Delete_FromExplorerContextMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_Delete_FromExplorerContextMenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Yes' button equals 'True'
        /// </summary>
        public bool YesButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_Dev2TestingDB_From_DB_Source_Wizard_Database_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Dev2TestingDB' label equals 'Dev2TestingDB'
        /// </summary>
        public string UIDev2TestingDBTextDisplayText = "Dev2TestingDB";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_GetCountries_From_SQL_Server_Large_View_Action_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'ActionsComboBox' combo box equals 'dbo.GetCountries'
        /// </summary>
        public string ActionsComboboxSelectedItem = "dbo.GetCountries";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_http_From_Server_Source_Wizard_Address_Protocol_Dropdown'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'http' label equals 'http'
        /// </summary>
        public string HttpSelectedItemTextDisplayText = "http";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Text' text box equals 'True'
        /// </summary>
        public bool AddressEditBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsNewRemoteServerExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'localhost (Connected)' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsLocalhostConnectedExists = true;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Remote Connection Integration' label equals 'Remote Connection Integration'
        /// </summary>
        public string RemoteConnectionIntegrationTextDisplayText = "Remote Connection Integration";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_Dropdown'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Microsoft SQL Server' label equals 'True'
        /// </summary>
        public bool MicrosoftSQLServerTextExists = true;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Microsoft SQL Server' label equals 'Microsoft SQL Server'
        /// </summary>
        public string MicrosoftSQLServerDisplayText = "Microsoft SQL Server";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_NewDatabaseSource_FromSqlServerTool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_NewDatabaseSource_FromSqlServerToolParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Microsoft SQL Server' label equals 'Microsoft SQL Server'
        /// </summary>
        public string MicrosoftSQLServerDisplayText = "Microsoft SQL Server";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UserNameTextBox' text box equals 'True'
        /// </summary>
        public bool UserNameTextBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'PasswordTextBox' text box equals 'True'
        /// </summary>
        public bool PasswordTextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_Next_From_DotNet_DLL_Large_View_Action_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'ActionsComboBox' combo box equals 'Next'
        /// </summary>
        public string ActionsComboBoxSelectedItem = "Next";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsNewRemoteServerExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Remote Connection Integration' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsRemoteConnectionIntegrationExists = true;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Remote Connection Integration' label equals 'Remote Connection Integration'
        /// </summary>
        public string RemoteConnectionIntegrationTextDisplayText = "Remote Connection Integration";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsNewRemoteServerExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Remote Connection Integration' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsRemoteConnectionIntegrationExists = true;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Remote Connection Integration' label equals 'Remote Connection Integration'
        /// </summary>
        public string RemoteConnectionIntegrationTextDisplayText = "Remote Connection Integration";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsNewRemoteServerExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Remote Connection Integration (Connected)' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsRemoteConnectionIntegrationConnectedExists = true;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Remote Connection Integration' label equals 'Remote Connection Integration'
        /// </summary>
        public string RemoteConnectionIntegrationTextDisplayText = "Remote Connection Integration";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_Dropdownlist'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Text' text box equals 'RSAKLFSVRGENDEV'
        /// </summary>
        public string TextboxText = "RSAKLFSVRGENDEV";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'NamespaceComboBox' combo box equals '{"AssemblyLocation":"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorlib.dll","AssemblyName":"mscorlib.dll","FullName":"System.Random","MethodName":null}'
        /// </summary>
        public string ClassNameComboBoxSelectedItem = "{\"AssemblyLocation\":\"C:\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\v4.0.30319\\\\mscorli" +
            "b.dll\",\"AssemblyName\":\"mscorlib.dll\",\"FullName\":\"System.Random\",\"MethodName\":nul" +
            "l}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_TSTCIREMOTE_From_Server_Source_Wizard_Dropdownlist'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Text' text box equals 'TST-CI-REMOTE'
        /// </summary>
        public string AddressEditBoxText = "TST-CI-REMOTE";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Test Connection' button equals 'True'
        /// </summary>
        public bool TestConnectionButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_UITestingDBSource_From_SQL_Server_Large_View_Source_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'SourcesComboBox' combo box equals 'UITestingDBSource'
        /// </summary>
        public string SourcesComboboxSelectedItem = "UITestingDBSource";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_User_From_RunTestAs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_User_From_RunTestAsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'User' radio button
        /// </summary>
        public bool UserRadioButtonSelected = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UsernameTextBox' text box equals 'True'
        /// </summary>
        public bool UsernameTextBoxEditExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'PasswordTextBox' text box equals 'True'
        /// </summary>
        public bool PasswordTextBoxEditExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Save this tab' button equals 'True'
        /// </summary>
        public bool SaveButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_Textbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Type '0' in 'Text' text box
        /// </summary>
        public string DataTextboxText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Text' text box equals '0'
        /// </summary>
        public string DataTextboxText1 = "0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_Textbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Type '0' in 'Text' text box
        /// </summary>
        public string TestDataTextboxText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Text' text box equals '0'
        /// </summary>
        public string TestDataTextboxText1 = "0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_Textbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'rsaklfsvrgen' in 'Text' text box
        /// </summary>
        public string TextboxText = "rsaklfsvrgen";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'RSAKLFSVRGENDEV' list item equals 'True'
        /// </summary>
        public bool RSAKLFSVRGENDEVExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Type_TestSite_into_Web_Source_Wizard_Address_Textbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Type_TestSite_into_Web_Source_Wizard_Address_TextboxParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'http://rsaklfsvrtfsbld/IntegrationTestSite/Proxy.ashx' in 'ServerTextBox' text box
        /// </summary>
        public string AddressTextboxText = "http://rsaklfsvrtfsbld/IntegrationTestSite/Proxy.ashx";
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Test Connection' button equals 'True'
        /// </summary>
        public bool TestConnectionButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Search_And_Select_HelloWolrd'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Search_And_Select_HelloWolrdParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello World' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Hello World";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MainStudioWindow : WpfWindow
    {
        
        public MainStudioWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.Name, "Warewolf", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabContextMenu TabContextMenu
        {
            get
            {
                if ((this.mTabContextMenu == null))
                {
                    this.mTabContextMenu = new TabContextMenu(this);
                }
                return this.mTabContextMenu;
            }
        }
        
        public ExplorerContextMenu ExplorerContextMenu
        {
            get
            {
                if ((this.mExplorerContextMenu == null))
                {
                    this.mExplorerContextMenu = new ExplorerContextMenu(this);
                }
                return this.mExplorerContextMenu;
            }
        }
        
        public DesignSurfaceContextMenu DesignSurfaceContextMenu
        {
            get
            {
                if ((this.mDesignSurfaceContextMenu == null))
                {
                    this.mDesignSurfaceContextMenu = new DesignSurfaceContextMenu(this);
                }
                return this.mDesignSurfaceContextMenu;
            }
        }
        
        public ExitFullScreenF11Text ExitFullScreenF11Text
        {
            get
            {
                if ((this.mExitFullScreenF11Text == null))
                {
                    this.mExitFullScreenF11Text = new ExitFullScreenF11Text(this);
                }
                return this.mExitFullScreenF11Text;
            }
        }
        
        public WpfButton LockStudioButton
        {
            get
            {
                if ((this.mLockStudioButton == null))
                {
                    this.mLockStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mLockStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_LOCK";
                    this.mLockStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLockStudioButton;
            }
        }
        
        public WpfButton MinimizeStudioButton
        {
            get
            {
                if ((this.mMinimizeStudioButton == null))
                {
                    this.mMinimizeStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mMinimizeStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_MINIMIZE";
                    this.mMinimizeStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMinimizeStudioButton;
            }
        }
        
        public WpfButton MaximizeRestoreStudioButton
        {
            get
            {
                if ((this.mMaximizeRestoreStudioButton == null))
                {
                    this.mMaximizeRestoreStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mMaximizeRestoreStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_SUPER_MAXIMIZE_RESTORE";
                    this.mMaximizeRestoreStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMaximizeRestoreStudioButton;
            }
        }
        
        public WpfButton MaximizeStudioButton
        {
            get
            {
                if ((this.mMaximizeStudioButton == null))
                {
                    this.mMaximizeStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mMaximizeStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_MAXIMIZE_RESTORE";
                    this.mMaximizeStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMaximizeStudioButton;
            }
        }
        
        public WpfButton CloseStudioButton
        {
            get
            {
                if ((this.mCloseStudioButton == null))
                {
                    this.mCloseStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_CLOSE";
                    this.mCloseStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseStudioButton;
            }
        }
        
        public SideMenuBar SideMenuBar
        {
            get
            {
                if ((this.mSideMenuBar == null))
                {
                    this.mSideMenuBar = new SideMenuBar(this);
                }
                return this.mSideMenuBar;
            }
        }
        
        public DockManager DockManager
        {
            get
            {
                if ((this.mDockManager == null))
                {
                    this.mDockManager = new DockManager(this);
                }
                return this.mDockManager;
            }
        }
        
        public DebugInputDialog DebugInputDialog
        {
            get
            {
                if ((this.mDebugInputDialog == null))
                {
                    this.mDebugInputDialog = new DebugInputDialog(this);
                }
                return this.mDebugInputDialog;
            }
        }
        
        public ComboboxListItemAsNewRemoteServer ComboboxListItemAsNewRemoteServer
        {
            get
            {
                if ((this.mComboboxListItemAsNewRemoteServer == null))
                {
                    this.mComboboxListItemAsNewRemoteServer = new ComboboxListItemAsNewRemoteServer(this);
                }
                return this.mComboboxListItemAsNewRemoteServer;
            }
        }
        
        public WpfText ComboboxListItemAsTSTCIREMOTE
        {
            get
            {
                if ((this.mComboboxListItemAsTSTCIREMOTE == null))
                {
                    this.mComboboxListItemAsTSTCIREMOTE = new WpfText(this);
                    #region Search Criteria
                    this.mComboboxListItemAsTSTCIREMOTE.SearchProperties[WpfText.PropertyNames.Name] = "TSTCIREMOTE";
                    this.mComboboxListItemAsTSTCIREMOTE.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsTSTCIREMOTE;
            }
        }
        
        public WpfText ComboboxListItemAsTSTCIREMOTEConnected
        {
            get
            {
                if ((this.mComboboxListItemAsTSTCIREMOTEConnected == null))
                {
                    this.mComboboxListItemAsTSTCIREMOTEConnected = new WpfText(this);
                    #region Search Criteria
                    this.mComboboxListItemAsTSTCIREMOTEConnected.SearchProperties[WpfText.PropertyNames.Name] = "TSTCIREMOTE (Connected)";
                    this.mComboboxListItemAsTSTCIREMOTEConnected.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsTSTCIREMOTEConnected;
            }
        }
        
        public WpfText ComboboxListItemAsLocalhost
        {
            get
            {
                if ((this.mComboboxListItemAsLocalhost == null))
                {
                    this.mComboboxListItemAsLocalhost = new WpfText(this);
                    #region Search Criteria
                    this.mComboboxListItemAsLocalhost.SearchProperties[WpfText.PropertyNames.Name] = "localhost";
                    this.mComboboxListItemAsLocalhost.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsLocalhost;
            }
        }
        
        public WpfCustom ComboboxListItemAsRemoteConnectionIntegration
        {
            get
            {
                if ((this.mComboboxListItemAsRemoteConnectionIntegration == null))
                {
                    this.mComboboxListItemAsRemoteConnectionIntegration = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsRemoteConnectionIntegration.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAsRemoteConnectionIntegration.SearchProperties[WpfControl.PropertyNames.Name] = "Remote Connection Integration";
                    this.mComboboxListItemAsRemoteConnectionIntegration.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsRemoteConnectionIntegration;
            }
        }
        
        public WpfCustom ComboboxListItemAsLocalhostConnected
        {
            get
            {
                if ((this.mComboboxListItemAsLocalhostConnected == null))
                {
                    this.mComboboxListItemAsLocalhostConnected = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsLocalhostConnected.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAsLocalhostConnected.SearchProperties[WpfControl.PropertyNames.Name] = "localhost (Connected)";
                    this.mComboboxListItemAsLocalhostConnected.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsLocalhostConnected;
            }
        }
        
        public WpfCustom ComboboxListItemAsRemoteConnectionIntegrationConnected
        {
            get
            {
                if ((this.mComboboxListItemAsRemoteConnectionIntegrationConnected == null))
                {
                    this.mComboboxListItemAsRemoteConnectionIntegrationConnected = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsRemoteConnectionIntegrationConnected.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAsRemoteConnectionIntegrationConnected.SearchProperties[WpfControl.PropertyNames.Name] = "Remote Connection Integration (Connected)";
                    this.mComboboxListItemAsRemoteConnectionIntegrationConnected.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsRemoteConnectionIntegrationConnected;
            }
        }
        
        public WpfCustom ComboboxListItemAsHttp
        {
            get
            {
                if ((this.mComboboxListItemAsHttp == null))
                {
                    this.mComboboxListItemAsHttp = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsHttp.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAsHttp.SearchProperties[WpfControl.PropertyNames.Name] = "http";
                    this.mComboboxListItemAsHttp.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsHttp;
            }
        }
        
        public ComboboxListItemAsMicrosoftSQLServer ComboboxListItemAsMicrosoftSQLServer
        {
            get
            {
                if ((this.mComboboxListItemAsMicrosoftSQLServer == null))
                {
                    this.mComboboxListItemAsMicrosoftSQLServer = new ComboboxListItemAsMicrosoftSQLServer(this);
                }
                return this.mComboboxListItemAsMicrosoftSQLServer;
            }
        }
        
        public WpfCustom ComboboxListItemAsDev2TestingDB
        {
            get
            {
                if ((this.mComboboxListItemAsDev2TestingDB == null))
                {
                    this.mComboboxListItemAsDev2TestingDB = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsDev2TestingDB.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAsDev2TestingDB.SearchProperties[WpfControl.PropertyNames.Name] = "Dev2TestingDB";
                    this.mComboboxListItemAsDev2TestingDB.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsDev2TestingDB;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem1
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem1 == null))
                {
                    this.mWebServerSourceComboboxListItem1 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem1.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem1.SearchProperties[WpfListItem.PropertyNames.Instance] = "1";
                    this.mWebServerSourceComboboxListItem1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem1;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem10
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem10 == null))
                {
                    this.mWebServerSourceComboboxListItem10 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem10.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem10.SearchProperties[WpfListItem.PropertyNames.Instance] = "10";
                    this.mWebServerSourceComboboxListItem10.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem10;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem2
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem2 == null))
                {
                    this.mWebServerSourceComboboxListItem2 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem2.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem2.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mWebServerSourceComboboxListItem2.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem2;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem3
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem3 == null))
                {
                    this.mWebServerSourceComboboxListItem3 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem3.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem3.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
                    this.mWebServerSourceComboboxListItem3.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem3;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem4
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem4 == null))
                {
                    this.mWebServerSourceComboboxListItem4 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem4.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem4.SearchProperties[WpfListItem.PropertyNames.Instance] = "4";
                    this.mWebServerSourceComboboxListItem4.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem4;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem5
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem5 == null))
                {
                    this.mWebServerSourceComboboxListItem5 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem5.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem5.SearchProperties[WpfListItem.PropertyNames.Instance] = "5";
                    this.mWebServerSourceComboboxListItem5.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem5;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem6
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem6 == null))
                {
                    this.mWebServerSourceComboboxListItem6 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem6.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem6.SearchProperties[WpfListItem.PropertyNames.Instance] = "6";
                    this.mWebServerSourceComboboxListItem6.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem6;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem7
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem7 == null))
                {
                    this.mWebServerSourceComboboxListItem7 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem7.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem7.SearchProperties[WpfListItem.PropertyNames.Instance] = "7";
                    this.mWebServerSourceComboboxListItem7.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem7;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem8
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem8 == null))
                {
                    this.mWebServerSourceComboboxListItem8 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem8.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem8.SearchProperties[WpfListItem.PropertyNames.Instance] = "8";
                    this.mWebServerSourceComboboxListItem8.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem8;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem9
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem9 == null))
                {
                    this.mWebServerSourceComboboxListItem9 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem9.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem9.SearchProperties[WpfListItem.PropertyNames.Instance] = "9";
                    this.mWebServerSourceComboboxListItem9.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem9;
            }
        }
        
        public WpfCustom ComboboxListItemAsWarewolfStore
        {
            get
            {
                if ((this.mComboboxListItemAsWarewolfStore == null))
                {
                    this.mComboboxListItemAsWarewolfStore = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsWarewolfStore.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAsWarewolfStore.SearchProperties[WpfControl.PropertyNames.Name] = "WarewolfStore";
                    this.mComboboxListItemAsWarewolfStore.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsWarewolfStore;
            }
        }
        
        public ComboboxListItemPostgreSqlDatabase ComboboxListItemPostgreSqlDatabase
        {
            get
            {
                if ((this.mComboboxListItemPostgreSqlDatabase == null))
                {
                    this.mComboboxListItemPostgreSqlDatabase = new ComboboxListItemPostgreSqlDatabase(this);
                }
                return this.mComboboxListItemPostgreSqlDatabase;
            }
        }
        
        public WpfCustom ComboboxListItemOracleDatabase
        {
            get
            {
                if ((this.mComboboxListItemOracleDatabase == null))
                {
                    this.mComboboxListItemOracleDatabase = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemOracleDatabase.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemOracleDatabase.SearchProperties[WpfControl.PropertyNames.Name] = "Oracle Database";
                    this.mComboboxListItemOracleDatabase.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mComboboxListItemOracleDatabase;
            }
        }
        
        public ComboboxListItemODBCDatabase ComboboxListItemODBCDatabase
        {
            get
            {
                if ((this.mComboboxListItemODBCDatabase == null))
                {
                    this.mComboboxListItemODBCDatabase = new ComboboxListItemODBCDatabase(this);
                }
                return this.mComboboxListItemODBCDatabase;
            }
        }
        
        public ComboboxListItemMySqlDatabase ComboboxListItemMySqlDatabase
        {
            get
            {
                if ((this.mComboboxListItemMySqlDatabase == null))
                {
                    this.mComboboxListItemMySqlDatabase = new ComboboxListItemMySqlDatabase(this);
                }
                return this.mComboboxListItemMySqlDatabase;
            }
        }
        
        public WpfToggleButton ExpandAllToggleButton
        {
            get
            {
                if ((this.mExpandAllToggleButton == null))
                {
                    this.mExpandAllToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mExpandAllToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "expandAllButton";
                    this.mExpandAllToggleButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mExpandAllToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private TabContextMenu mTabContextMenu;
        
        private ExplorerContextMenu mExplorerContextMenu;
        
        private DesignSurfaceContextMenu mDesignSurfaceContextMenu;
        
        private ExitFullScreenF11Text mExitFullScreenF11Text;
        
        private WpfButton mLockStudioButton;
        
        private WpfButton mMinimizeStudioButton;
        
        private WpfButton mMaximizeRestoreStudioButton;
        
        private WpfButton mMaximizeStudioButton;
        
        private WpfButton mCloseStudioButton;
        
        private SideMenuBar mSideMenuBar;
        
        private DockManager mDockManager;
        
        private DebugInputDialog mDebugInputDialog;
        
        private ComboboxListItemAsNewRemoteServer mComboboxListItemAsNewRemoteServer;
        
        private WpfText mComboboxListItemAsTSTCIREMOTE;
        
        private WpfText mComboboxListItemAsTSTCIREMOTEConnected;
        
        private WpfText mComboboxListItemAsLocalhost;
        
        private WpfCustom mComboboxListItemAsRemoteConnectionIntegration;
        
        private WpfCustom mComboboxListItemAsLocalhostConnected;
        
        private WpfCustom mComboboxListItemAsRemoteConnectionIntegrationConnected;
        
        private WpfCustom mComboboxListItemAsHttp;
        
        private ComboboxListItemAsMicrosoftSQLServer mComboboxListItemAsMicrosoftSQLServer;
        
        private WpfCustom mComboboxListItemAsDev2TestingDB;
        
        private WpfListItem mWebServerSourceComboboxListItem1;
        
        private WpfListItem mWebServerSourceComboboxListItem10;
        
        private WpfListItem mWebServerSourceComboboxListItem2;
        
        private WpfListItem mWebServerSourceComboboxListItem3;
        
        private WpfListItem mWebServerSourceComboboxListItem4;
        
        private WpfListItem mWebServerSourceComboboxListItem5;
        
        private WpfListItem mWebServerSourceComboboxListItem6;
        
        private WpfListItem mWebServerSourceComboboxListItem7;
        
        private WpfListItem mWebServerSourceComboboxListItem8;
        
        private WpfListItem mWebServerSourceComboboxListItem9;
        
        private WpfCustom mComboboxListItemAsWarewolfStore;
        
        private ComboboxListItemPostgreSqlDatabase mComboboxListItemPostgreSqlDatabase;
        
        private WpfCustom mComboboxListItemOracleDatabase;
        
        private ComboboxListItemODBCDatabase mComboboxListItemODBCDatabase;
        
        private ComboboxListItemMySqlDatabase mComboboxListItemMySqlDatabase;
        
        private WpfToggleButton mExpandAllToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabContextMenu : WpfMenu
    {
        
        public TabContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem Close
        {
            get
            {
                if ((this.mClose == null))
                {
                    this.mClose = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mClose.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Close";
                    this.mClose.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mClose;
            }
        }
        
        public WpfMenuItem UICloseAllButThisMenuItem
        {
            get
            {
                if ((this.mUICloseAllButThisMenuItem == null))
                {
                    this.mUICloseAllButThisMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUICloseAllButThisMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Close All But This";
                    this.mUICloseAllButThisMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUICloseAllButThisMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mClose;
        
        private WpfMenuItem mUICloseAllButThisMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerContextMenu : WpfMenu
    {
        
        public ExplorerContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.AutomationId] = "ExplorerMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem Open
        {
            get
            {
                if ((this.mOpen == null))
                {
                    this.mOpen = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mOpen.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Open";
                    this.mOpen.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpen;
            }
        }
        
        public WpfMenuItem NewWorkflow
        {
            get
            {
                if ((this.mNewWorkflow == null))
                {
                    this.mNewWorkflow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewWorkflow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewService";
                    this.mNewWorkflow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWorkflow;
            }
        }
        
        public WpfMenuItem NewServerSource
        {
            get
            {
                if ((this.mNewServerSource == null))
                {
                    this.mNewServerSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewServerSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewServerSource";
                    this.mNewServerSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerSource;
            }
        }
        
        public WpfMenuItem NewDatabaseSource
        {
            get
            {
                if ((this.mNewDatabaseSource == null))
                {
                    this.mNewDatabaseSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewDatabaseSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewDataBaseSource";
                    this.mNewDatabaseSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewDatabaseSource;
            }
        }
        
        public WpfMenuItem NewWebServiceSource
        {
            get
            {
                if ((this.mNewWebServiceSource == null))
                {
                    this.mNewWebServiceSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewWebServiceSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewWebSource";
                    this.mNewWebServiceSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWebServiceSource;
            }
        }
        
        public WpfMenuItem NewPluginSource
        {
            get
            {
                if ((this.mNewPluginSource == null))
                {
                    this.mNewPluginSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewPluginSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewPluginSource";
                    this.mNewPluginSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewPluginSource;
            }
        }
        
        public WpfMenuItem NewEmailSource
        {
            get
            {
                if ((this.mNewEmailSource == null))
                {
                    this.mNewEmailSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewEmailSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewEmailSource";
                    this.mNewEmailSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewEmailSource;
            }
        }
        
        public WpfMenuItem NewDropboxSource
        {
            get
            {
                if ((this.mNewDropboxSource == null))
                {
                    this.mNewDropboxSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewDropboxSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewDropboxSource";
                    this.mNewDropboxSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewDropboxSource;
            }
        }
        
        public WpfMenuItem NewSharepointSource
        {
            get
            {
                if ((this.mNewSharepointSource == null))
                {
                    this.mNewSharepointSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewSharepointSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewSharepointSource";
                    this.mNewSharepointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharepointSource;
            }
        }
        
        public WpfMenuItem NewFolder
        {
            get
            {
                if ((this.mNewFolder == null))
                {
                    this.mNewFolder = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewFolder.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewFolderFromItem";
                    this.mNewFolder.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewFolder;
            }
        }
        
        public WpfMenuItem Rename
        {
            get
            {
                if ((this.mRename == null))
                {
                    this.mRename = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mRename.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Rename";
                    this.mRename.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRename;
            }
        }
        
        public WpfMenuItem Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDelete.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Delete";
                    this.mDelete.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDelete;
            }
        }
        
        public WpfMenuItem Deploy
        {
            get
            {
                if ((this.mDeploy == null))
                {
                    this.mDeploy = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeploy.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Deploy";
                    this.mDeploy.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeploy;
            }
        }
        
        public WpfMenuItem ShowServerVersion
        {
            get
            {
                if ((this.mShowServerVersion == null))
                {
                    this.mShowServerVersion = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowServerVersion.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ServerVersion";
                    this.mShowServerVersion.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowServerVersion;
            }
        }
        
        public WpfMenuItem ShowDependencies
        {
            get
            {
                if ((this.mShowDependencies == null))
                {
                    this.mShowDependencies = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowDependencies.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Dependencies";
                    this.mShowDependencies.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowDependencies;
            }
        }
        
        public WpfMenuItem Tests
        {
            get
            {
                if ((this.mTests == null))
                {
                    this.mTests = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mTests.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Test";
                    this.mTests.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTests;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mOpen;
        
        private WpfMenuItem mNewWorkflow;
        
        private WpfMenuItem mNewServerSource;
        
        private WpfMenuItem mNewDatabaseSource;
        
        private WpfMenuItem mNewWebServiceSource;
        
        private WpfMenuItem mNewPluginSource;
        
        private WpfMenuItem mNewEmailSource;
        
        private WpfMenuItem mNewDropboxSource;
        
        private WpfMenuItem mNewSharepointSource;
        
        private WpfMenuItem mNewFolder;
        
        private WpfMenuItem mRename;
        
        private WpfMenuItem mDelete;
        
        private WpfMenuItem mDeploy;
        
        private WpfMenuItem mShowServerVersion;
        
        private WpfMenuItem mShowDependencies;
        
        private WpfMenuItem mTests;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DesignSurfaceContextMenu : WpfMenu
    {
        
        public DesignSurfaceContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem Cut
        {
            get
            {
                if ((this.mCut == null))
                {
                    this.mCut = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mCut.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "CutMenuItem";
                    this.mCut.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCut;
            }
        }
        
        public WpfMenuItem Paste
        {
            get
            {
                if ((this.mPaste == null))
                {
                    this.mPaste = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mPaste.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "PasteMenuItem";
                    this.mPaste.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPaste;
            }
        }
        
        public WpfMenuItem Copy
        {
            get
            {
                if ((this.mCopy == null))
                {
                    this.mCopy = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mCopy.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "CopyMenuItem";
                    this.mCopy.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCopy;
            }
        }
        
        public WpfMenuItem Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDelete.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "DeleteMenuItem";
                    this.mDelete.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDelete;
            }
        }
        
        public WpfMenuItem CopyasImage
        {
            get
            {
                if ((this.mCopyasImage == null))
                {
                    this.mCopyasImage = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mCopyasImage.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "CopyAsImageMenuItem";
                    this.mCopyasImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCopyasImage;
            }
        }
        
        public WpfMenuItem SaveasImage
        {
            get
            {
                if ((this.mSaveasImage == null))
                {
                    this.mSaveasImage = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mSaveasImage.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "SaveAsImageMenuItem";
                    this.mSaveasImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSaveasImage;
            }
        }
        
        public WpfMenuItem SetasStartNode
        {
            get
            {
                if ((this.mSetasStartNode == null))
                {
                    this.mSetasStartNode = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mSetasStartNode.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "SetAsStartNodeMenuItem";
                    this.mSetasStartNode.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSetasStartNode;
            }
        }
        
        public WpfMenuItem ShowLargeView
        {
            get
            {
                if ((this.mShowLargeView == null))
                {
                    this.mShowLargeView = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowLargeView.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_ShowLargeViewMenuItem_AutoID";
                    this.mShowLargeView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowLargeView;
            }
        }
        
        public WpfMenuItem InsertRow
        {
            get
            {
                if ((this.mInsertRow == null))
                {
                    this.mInsertRow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mInsertRow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_InsertRowMenuItem_AutoID";
                    this.mInsertRow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInsertRow;
            }
        }
        
        public WpfMenuItem DeleteRow
        {
            get
            {
                if ((this.mDeleteRow == null))
                {
                    this.mDeleteRow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeleteRow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_DeleteRowMenuItem_AutoID";
                    this.mDeleteRow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteRow;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mCut;
        
        private WpfMenuItem mPaste;
        
        private WpfMenuItem mCopy;
        
        private WpfMenuItem mDelete;
        
        private WpfMenuItem mCopyasImage;
        
        private WpfMenuItem mSaveasImage;
        
        private WpfMenuItem mSetasStartNode;
        
        private WpfMenuItem mShowLargeView;
        
        private WpfMenuItem mInsertRow;
        
        private WpfMenuItem mDeleteRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExitFullScreenF11Text : WpfText
    {
        
        public ExitFullScreenF11Text(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Exit Full Screen (F11)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink ExitFullScreenF11Hyperlink
        {
            get
            {
                if ((this.mExitFullScreenF11Hyperlink == null))
                {
                    this.mExitFullScreenF11Hyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mExitFullScreenF11Hyperlink.SearchProperties[WpfHyperlink.PropertyNames.Name] = "Exit Full Screen (F11)";
                    this.mExitFullScreenF11Hyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExitFullScreenF11Hyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mExitFullScreenF11Hyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SideMenuBar : WpfCustom
    {
        
        public SideMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MenuView";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DatabaseSourceButton
        {
            get
            {
                if ((this.mDatabaseSourceButton == null))
                {
                    this.mDatabaseSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDatabaseSourceButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new database source", PropertyExpressionOperator.Contains));
                    this.mDatabaseSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDatabaseSourceButton;
            }
        }
        
        public WpfButton PluginSourceButton
        {
            get
            {
                if ((this.mPluginSourceButton == null))
                {
                    this.mPluginSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mPluginSourceButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new plugin source", PropertyExpressionOperator.Contains));
                    this.mPluginSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPluginSourceButton;
            }
        }
        
        public WpfButton WebSourceButton
        {
            get
            {
                if ((this.mWebSourceButton == null))
                {
                    this.mWebSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mWebSourceButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new web source", PropertyExpressionOperator.Contains));
                    this.mWebSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebSourceButton;
            }
        }
        
        public WpfButton NewVersionButton
        {
            get
            {
                if ((this.mNewVersionButton == null))
                {
                    this.mNewVersionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewVersionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "VersionButton";
                    this.mNewVersionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewVersionButton;
            }
        }
        
        public WpfButton ConfigureSettingsButton
        {
            get
            {
                if ((this.mConfigureSettingsButton == null))
                {
                    this.mConfigureSettingsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConfigureSettingsButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Configure settings", PropertyExpressionOperator.Contains));
                    this.mConfigureSettingsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConfigureSettingsButton;
            }
        }
        
        public WpfButton RunAndDebugButton
        {
            get
            {
                if ((this.mRunAndDebugButton == null))
                {
                    this.mRunAndDebugButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunAndDebugButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Run and debug your workflow service", PropertyExpressionOperator.Contains));
                    this.mRunAndDebugButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunAndDebugButton;
            }
        }
        
        public WpfButton SchedulerButton
        {
            get
            {
                if ((this.mSchedulerButton == null))
                {
                    this.mSchedulerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSchedulerButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Schedule a service to run", PropertyExpressionOperator.Contains));
                    this.mSchedulerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSchedulerButton;
            }
        }
        
        public WpfButton DeployButton
        {
            get
            {
                if ((this.mDeployButton == null))
                {
                    this.mDeployButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeployButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Move resources between Warewolf servers", PropertyExpressionOperator.Contains));
                    this.mDeployButton.WindowTitles.Add("Warewolf");
                    this.mDeployButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployButton;
            }
        }
        
        public WpfButton SaveButton
        {
            get
            {
                if ((this.mSaveButton == null))
                {
                    this.mSaveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSaveButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Save this tab", PropertyExpressionOperator.Contains));
                    this.mSaveButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSaveButton;
            }
        }
        
        public NewWorkflowButton NewWorkflowButton
        {
            get
            {
                if ((this.mNewWorkflowButton == null))
                {
                    this.mNewWorkflowButton = new NewWorkflowButton(this);
                }
                return this.mNewWorkflowButton;
            }
        }
        
        public WpfButton NewWebServiceButton
        {
            get
            {
                if ((this.mNewWebServiceButton == null))
                {
                    this.mNewWebServiceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewWebServiceButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new web service", PropertyExpressionOperator.Contains));
                    this.mNewWebServiceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWebServiceButton;
            }
        }
        
        public WpfButton KnowledgeBaseButton
        {
            get
            {
                if ((this.mKnowledgeBaseButton == null))
                {
                    this.mKnowledgeBaseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mKnowledgeBaseButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Knowledge Base", PropertyExpressionOperator.Contains));
                    this.mKnowledgeBaseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mKnowledgeBaseButton;
            }
        }
        
        public WpfButton LockMenuButton
        {
            get
            {
                if ((this.mLockMenuButton == null))
                {
                    this.mLockMenuButton = new WpfButton(this);
                    #region Search Criteria
                    this.mLockMenuButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Lock / unlock the menu", PropertyExpressionOperator.Contains));
                    this.mLockMenuButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLockMenuButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDatabaseSourceButton;
        
        private WpfButton mPluginSourceButton;
        
        private WpfButton mWebSourceButton;
        
        private WpfButton mNewVersionButton;
        
        private WpfButton mConfigureSettingsButton;
        
        private WpfButton mRunAndDebugButton;
        
        private WpfButton mSchedulerButton;
        
        private WpfButton mDeployButton;
        
        private WpfButton mSaveButton;
        
        private NewWorkflowButton mNewWorkflowButton;
        
        private WpfButton mNewWebServiceButton;
        
        private WpfButton mKnowledgeBaseButton;
        
        private WpfButton mLockMenuButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewWorkflowButton : WpfButton
    {
        
        public NewWorkflowButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new service", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = " ";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DockManager : WpfCustom
    {
        
        public DockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitPaneLeft SplitPaneLeft
        {
            get
            {
                if ((this.mSplitPaneLeft == null))
                {
                    this.mSplitPaneLeft = new SplitPaneLeft(this);
                }
                return this.mSplitPaneLeft;
            }
        }
        
        public SplitPaneMiddle SplitPaneMiddle
        {
            get
            {
                if ((this.mSplitPaneMiddle == null))
                {
                    this.mSplitPaneMiddle = new SplitPaneMiddle(this);
                }
                return this.mSplitPaneMiddle;
            }
        }
        
        public SplitPaneRight SplitPaneRight
        {
            get
            {
                if ((this.mSplitPaneRight == null))
                {
                    this.mSplitPaneRight = new SplitPaneRight(this);
                }
                return this.mSplitPaneRight;
            }
        }
        
        public WpfTabList UnpinnedTabAreaTop
        {
            get
            {
                if ((this.mUnpinnedTabAreaTop == null))
                {
                    this.mUnpinnedTabAreaTop = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaTop.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaTop";
                    this.mUnpinnedTabAreaTop.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaTop;
            }
        }
        
        public WpfTabList UnpinnedTabAreaBottom
        {
            get
            {
                if ((this.mUnpinnedTabAreaBottom == null))
                {
                    this.mUnpinnedTabAreaBottom = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaBottom.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaBottom";
                    this.mUnpinnedTabAreaBottom.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaBottom;
            }
        }
        
        public WpfTabList UnpinnedTabAreaLeft
        {
            get
            {
                if ((this.mUnpinnedTabAreaLeft == null))
                {
                    this.mUnpinnedTabAreaLeft = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaLeft.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaLeft";
                    this.mUnpinnedTabAreaLeft.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaLeft;
            }
        }
        
        public WpfTabList UnpinnedTabAreaRight
        {
            get
            {
                if ((this.mUnpinnedTabAreaRight == null))
                {
                    this.mUnpinnedTabAreaRight = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaRight.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaRight";
                    this.mUnpinnedTabAreaRight.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaRight;
            }
        }
        #endregion
        
        #region Fields
        private SplitPaneLeft mSplitPaneLeft;
        
        private SplitPaneMiddle mSplitPaneMiddle;
        
        private SplitPaneRight mSplitPaneRight;
        
        private WpfTabList mUnpinnedTabAreaTop;
        
        private WpfTabList mUnpinnedTabAreaBottom;
        
        private WpfTabList mUnpinnedTabAreaLeft;
        
        private WpfTabList mUnpinnedTabAreaRight;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneLeft : WpfCustom
    {
        
        public SplitPaneLeft(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Explorer Explorer
        {
            get
            {
                if ((this.mExplorer == null))
                {
                    this.mExplorer = new Explorer(this);
                }
                return this.mExplorer;
            }
        }
        
        public WpfControl ExplorerToolboxSplitter
        {
            get
            {
                if ((this.mExplorerToolboxSplitter == null))
                {
                    this.mExplorerToolboxSplitter = new WpfControl(this);
                    #region Search Criteria
                    this.mExplorerToolboxSplitter.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mExplorerToolboxSplitter.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mExplorerToolboxSplitter.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExplorerToolboxSplitter;
            }
        }
        
        public ToolBox ToolBox
        {
            get
            {
                if ((this.mToolBox == null))
                {
                    this.mToolBox = new ToolBox(this);
                }
                return this.mToolBox;
            }
        }
        
        public WpfControl ToolboxHelpSplitter
        {
            get
            {
                if ((this.mToolboxHelpSplitter == null))
                {
                    this.mToolboxHelpSplitter = new WpfControl(this);
                    #region Search Criteria
                    this.mToolboxHelpSplitter.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mToolboxHelpSplitter.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
                    this.mToolboxHelpSplitter.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mToolboxHelpSplitter.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToolboxHelpSplitter;
            }
        }
        
        public Help Help
        {
            get
            {
                if ((this.mHelp == null))
                {
                    this.mHelp = new Help(this);
                }
                return this.mHelp;
            }
        }
        #endregion
        
        #region Fields
        private Explorer mExplorer;
        
        private WpfControl mExplorerToolboxSplitter;
        
        private ToolBox mToolBox;
        
        private WpfControl mToolboxHelpSplitter;
        
        private Help mHelp;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Explorer : WpfCustom
    {
        
        public Explorer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ExplorerControl_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ExplorerUnpinBtn
        {
            get
            {
                if ((this.mExplorerUnpinBtn == null))
                {
                    this.mExplorerUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mExplorerUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mExplorerUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExplorerUnpinBtn;
            }
        }
        
        public ConnectControl ConnectControl
        {
            get
            {
                if ((this.mConnectControl == null))
                {
                    this.mConnectControl = new ConnectControl(this);
                }
                return this.mConnectControl;
            }
        }
        
        public SearchTextBox SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new SearchTextBox(this);
                }
                return this.mSearchTextBox;
            }
        }
        
        public WpfButton ExplorerRefreshButton
        {
            get
            {
                if ((this.mExplorerRefreshButton == null))
                {
                    this.mExplorerRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExplorerRefreshButton.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    this.mExplorerRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExplorerRefreshButton;
            }
        }
        
        public ExplorerTree ExplorerTree
        {
            get
            {
                if ((this.mExplorerTree == null))
                {
                    this.mExplorerTree = new ExplorerTree(this);
                }
                return this.mExplorerTree;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mExplorerUnpinBtn;
        
        private ConnectControl mConnectControl;
        
        private SearchTextBox mSearchTextBox;
        
        private WpfButton mExplorerRefreshButton;
        
        private ExplorerTree mExplorerTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConnectControl : WpfCustom
    {
        
        public ConnectControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ConnectControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ServerComboBox ServerComboBox
        {
            get
            {
                if ((this.mServerComboBox == null))
                {
                    this.mServerComboBox = new ServerComboBox(this);
                }
                return this.mServerComboBox;
            }
        }
        
        public WpfButton EditServerButton
        {
            get
            {
                if ((this.mEditServerButton == null))
                {
                    this.mEditServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_ServerEditBtn_AutoID";
                    this.mEditServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditServerButton;
            }
        }
        
        public WpfButton ConnectServerButton
        {
            get
            {
                if ((this.mConnectServerButton == null))
                {
                    this.mConnectServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_ConnectServerBtn_AutoID";
                    this.mConnectServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectServerButton;
            }
        }
        #endregion
        
        #region Fields
        private ServerComboBox mServerComboBox;
        
        private WpfButton mEditServerButton;
        
        private WpfButton mConnectServerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerComboBox : WpfCustom
    {
        
        public ServerComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TheServerComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ServerListComboBox
        {
            get
            {
                if ((this.mServerListComboBox == null))
                {
                    this.mServerListComboBox = new WpfButton(this);
                    #region Search Criteria
                    this.mServerListComboBox.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mServerListComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServerListComboBox;
            }
        }
        
        public WpfEdit TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TextBoxPresenter";
                    this.mTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextBox;
            }
        }
        
        public WpfText SelectedItemAsTSTCIREMOTE
        {
            get
            {
                if ((this.mSelectedItemAsTSTCIREMOTE == null))
                {
                    this.mSelectedItemAsTSTCIREMOTE = new WpfText(this);
                    #region Search Criteria
                    this.mSelectedItemAsTSTCIREMOTE.SearchProperties[WpfText.PropertyNames.Name] = "TSTCIREMOTE";
                    this.mSelectedItemAsTSTCIREMOTE.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelectedItemAsTSTCIREMOTE;
            }
        }
        
        public WpfText SelectedItemAsTSTCIREMOTEConnected
        {
            get
            {
                if ((this.mSelectedItemAsTSTCIREMOTEConnected == null))
                {
                    this.mSelectedItemAsTSTCIREMOTEConnected = new WpfText(this);
                    #region Search Criteria
                    this.mSelectedItemAsTSTCIREMOTEConnected.SearchProperties[WpfText.PropertyNames.Name] = "TSTCIREMOTE (Connected)";
                    this.mSelectedItemAsTSTCIREMOTEConnected.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelectedItemAsTSTCIREMOTEConnected;
            }
        }
        
        public WpfText SelectedItemAsLocalhost
        {
            get
            {
                if ((this.mSelectedItemAsLocalhost == null))
                {
                    this.mSelectedItemAsLocalhost = new WpfText(this);
                    #region Search Criteria
                    this.mSelectedItemAsLocalhost.SearchProperties[WpfText.PropertyNames.Name] = "localhost";
                    this.mSelectedItemAsLocalhost.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelectedItemAsLocalhost;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mServerListComboBox;
        
        private WpfEdit mTextBox;
        
        private WpfText mSelectedItemAsTSTCIREMOTE;
        
        private WpfText mSelectedItemAsTSTCIREMOTEConnected;
        
        private WpfText mSelectedItemAsLocalhost;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SearchTextBox : WpfEdit
    {
        
        public SearchTextBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText FilterText
        {
            get
            {
                if ((this.mFilterText == null))
                {
                    this.mFilterText = new WpfText(this);
                    #region Search Criteria
                    this.mFilterText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mFilterText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFilterText;
            }
        }
        
        public WpfButton ClearFilterButton
        {
            get
            {
                if ((this.mClearFilterButton == null))
                {
                    this.mClearFilterButton = new WpfButton(this);
                    #region Search Criteria
                    this.mClearFilterButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ClearSearchButton";
                    this.mClearFilterButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mClearFilterButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mFilterText;
        
        private WpfButton mClearFilterButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerTree : WpfTree
    {
        
        public ExplorerTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public localhost localhost
        {
            get
            {
                if ((this.mlocalhost == null))
                {
                    this.mlocalhost = new localhost(this);
                }
                return this.mlocalhost;
            }
        }
        
        public FirstRemoteServer FirstRemoteServer
        {
            get
            {
                if ((this.mFirstRemoteServer == null))
                {
                    this.mFirstRemoteServer = new FirstRemoteServer(this);
                }
                return this.mFirstRemoteServer;
            }
        }
        #endregion
        
        #region Fields
        private localhost mlocalhost;
        
        private FirstRemoteServer mFirstRemoteServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class localhost : WpfTreeItem
    {
        
        public localhost(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Checkbox Checkbox
        {
            get
            {
                if ((this.mCheckbox == null))
                {
                    this.mCheckbox = new Checkbox(this);
                }
                return this.mCheckbox;
            }
        }
        
        public WpfTreeItem FirstItem
        {
            get
            {
                if ((this.mFirstItem == null))
                {
                    this.mFirstItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mFirstItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mFirstItem.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
                    this.mFirstItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFirstItem.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mFirstItem.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mFirstItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFirstItem;
            }
        }
        
        public WpfTreeItem SecondItem
        {
            get
            {
                if ((this.mSecondItem == null))
                {
                    this.mSecondItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mSecondItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mSecondItem.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
                    this.mSecondItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSecondItem.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mSecondItem.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mSecondItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSecondItem;
            }
        }
        #endregion
        
        #region Fields
        private Checkbox mCheckbox;
        
        private WpfTreeItem mFirstItem;
        
        private WpfTreeItem mSecondItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Checkbox : WpfCheckBox
    {
        
        public Checkbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "Checkbox";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton IconButton
        {
            get
            {
                if ((this.mIconButton == null))
                {
                    this.mIconButton = new WpfButton(this);
                    #region Search Criteria
                    this.mIconButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mIconButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mIconButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIconButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mIconButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FirstRemoteServer : WpfTreeItem
    {
        
        public FirstRemoteServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Checkbox1 Checkbox
        {
            get
            {
                if ((this.mCheckbox == null))
                {
                    this.mCheckbox = new Checkbox1(this);
                }
                return this.mCheckbox;
            }
        }
        
        public WpfTreeItem FirstItem
        {
            get
            {
                if ((this.mFirstItem == null))
                {
                    this.mFirstItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mFirstItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mFirstItem.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
                    this.mFirstItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFirstItem.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mFirstItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFirstItem;
            }
        }
        
        public WpfTreeItem SecondItem
        {
            get
            {
                if ((this.mSecondItem == null))
                {
                    this.mSecondItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mSecondItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mSecondItem.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
                    this.mSecondItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSecondItem.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mSecondItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSecondItem;
            }
        }
        #endregion
        
        #region Fields
        private Checkbox1 mCheckbox;
        
        private WpfTreeItem mFirstItem;
        
        private WpfTreeItem mSecondItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Checkbox1 : WpfCheckBox
    {
        
        public Checkbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "Checkbox";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton IconButton
        {
            get
            {
                if ((this.mIconButton == null))
                {
                    this.mIconButton = new WpfButton(this);
                    #region Search Criteria
                    this.mIconButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mIconButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mIconButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIconButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mIconButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ToolBox : WpfCustom
    {
        
        public ToolBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ToolboxView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ToolboxControl_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ToolUnpinBtn
        {
            get
            {
                if ((this.mToolUnpinBtn == null))
                {
                    this.mToolUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mToolUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mToolUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToolUnpinBtn;
            }
        }
        
        public SearchTextBox1 SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new SearchTextBox1(this);
                }
                return this.mSearchTextBox;
            }
        }
        
        public ToolListBox ToolListBox
        {
            get
            {
                if ((this.mToolListBox == null))
                {
                    this.mToolListBox = new ToolListBox(this);
                }
                return this.mToolListBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mToolUnpinBtn;
        
        private SearchTextBox1 mSearchTextBox;
        
        private ToolListBox mToolListBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SearchTextBox1 : WpfEdit
    {
        
        public SearchTextBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ClearFilterButton
        {
            get
            {
                if ((this.mClearFilterButton == null))
                {
                    this.mClearFilterButton = new WpfButton(this);
                    #region Search Criteria
                    this.mClearFilterButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ClearSearchButton";
                    this.mClearFilterButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mClearFilterButton;
            }
        }
        
        public WpfText FloatingText
        {
            get
            {
                if ((this.mFloatingText == null))
                {
                    this.mFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mFloatingText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mClearFilterButton;
        
        private WpfText mFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ToolListBox : WpfList
    {
        
        public ToolListBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "ToolListBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FlowTools FlowTools
        {
            get
            {
                if ((this.mFlowTools == null))
                {
                    this.mFlowTools = new FlowTools(this);
                }
                return this.mFlowTools;
            }
        }
        
        public DataTools DataTools
        {
            get
            {
                if ((this.mDataTools == null))
                {
                    this.mDataTools = new DataTools(this);
                }
                return this.mDataTools;
            }
        }
        
        public Database Database
        {
            get
            {
                if ((this.mDatabase == null))
                {
                    this.mDatabase = new Database(this);
                }
                return this.mDatabase;
            }
        }
        
        public Email Email
        {
            get
            {
                if ((this.mEmail == null))
                {
                    this.mEmail = new Email(this);
                }
                return this.mEmail;
            }
        }
        
        public FileAndFTP FileAndFTP
        {
            get
            {
                if ((this.mFileAndFTP == null))
                {
                    this.mFileAndFTP = new FileAndFTP(this);
                }
                return this.mFileAndFTP;
            }
        }
        
        public HTTPWebMethods HTTPWebMethods
        {
            get
            {
                if ((this.mHTTPWebMethods == null))
                {
                    this.mHTTPWebMethods = new HTTPWebMethods(this);
                }
                return this.mHTTPWebMethods;
            }
        }
        
        public LoopTools LoopTools
        {
            get
            {
                if ((this.mLoopTools == null))
                {
                    this.mLoopTools = new LoopTools(this);
                }
                return this.mLoopTools;
            }
        }
        
        public RecordsetTools RecordsetTools
        {
            get
            {
                if ((this.mRecordsetTools == null))
                {
                    this.mRecordsetTools = new RecordsetTools(this);
                }
                return this.mRecordsetTools;
            }
        }
        
        public ResourceTools ResourceTools
        {
            get
            {
                if ((this.mResourceTools == null))
                {
                    this.mResourceTools = new ResourceTools(this);
                }
                return this.mResourceTools;
            }
        }
        
        public ScriptingTools ScriptingTools
        {
            get
            {
                if ((this.mScriptingTools == null))
                {
                    this.mScriptingTools = new ScriptingTools(this);
                }
                return this.mScriptingTools;
            }
        }
        
        public SharepointTools SharepointTools
        {
            get
            {
                if ((this.mSharepointTools == null))
                {
                    this.mSharepointTools = new SharepointTools(this);
                }
                return this.mSharepointTools;
            }
        }
        
        public StorageDropbox StorageDropbox
        {
            get
            {
                if ((this.mStorageDropbox == null))
                {
                    this.mStorageDropbox = new StorageDropbox(this);
                }
                return this.mStorageDropbox;
            }
        }
        
        public UtilityTools UtilityTools
        {
            get
            {
                if ((this.mUtilityTools == null))
                {
                    this.mUtilityTools = new UtilityTools(this);
                }
                return this.mUtilityTools;
            }
        }
        #endregion
        
        #region Fields
        private FlowTools mFlowTools;
        
        private DataTools mDataTools;
        
        private Database mDatabase;
        
        private Email mEmail;
        
        private FileAndFTP mFileAndFTP;
        
        private HTTPWebMethods mHTTPWebMethods;
        
        private LoopTools mLoopTools;
        
        private RecordsetTools mRecordsetTools;
        
        private ResourceTools mResourceTools;
        
        private ScriptingTools mScriptingTools;
        
        private SharepointTools mSharepointTools;
        
        private StorageDropbox mStorageDropbox;
        
        private UtilityTools mUtilityTools;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FlowTools : WpfGroup
    {
        
        public FlowTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Control Flow";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Decision Decision
        {
            get
            {
                if ((this.mDecision == null))
                {
                    this.mDecision = new Decision(this);
                }
                return this.mDecision;
            }
        }
        
        public Switch Switch
        {
            get
            {
                if ((this.mSwitch == null))
                {
                    this.mSwitch = new Switch(this);
                }
                return this.mSwitch;
            }
        }
        
        public Sequence Sequence
        {
            get
            {
                if ((this.mSequence == null))
                {
                    this.mSequence = new Sequence(this);
                }
                return this.mSequence;
            }
        }
        #endregion
        
        #region Fields
        private Decision mDecision;
        
        private Switch mSwitch;
        
        private Sequence mSequence;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Decision : WpfListItem
    {
        
        public Decision(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Decision";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DecisionImage
        {
            get
            {
                if ((this.mDecisionImage == null))
                {
                    this.mDecisionImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDecisionImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Decision";
                    this.mDecisionImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDecisionImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDecisionImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Switch : WpfListItem
    {
        
        public Switch(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Switch";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SwitchImage
        {
            get
            {
                if ((this.mSwitchImage == null))
                {
                    this.mSwitchImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSwitchImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Switch";
                    this.mSwitchImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSwitchImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSwitchImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Sequence : WpfListItem
    {
        
        public Sequence(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Sequence";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SequenceImage
        {
            get
            {
                if ((this.mSequenceImage == null))
                {
                    this.mSequenceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSequenceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Sequence";
                    this.mSequenceImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSequenceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSequenceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataTools : WpfGroup
    {
        
        public DataTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Data";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public MultiAssign MultiAssign
        {
            get
            {
                if ((this.mMultiAssign == null))
                {
                    this.mMultiAssign = new MultiAssign(this);
                }
                return this.mMultiAssign;
            }
        }
        
        public DataMerge DataMerge
        {
            get
            {
                if ((this.mDataMerge == null))
                {
                    this.mDataMerge = new DataMerge(this);
                }
                return this.mDataMerge;
            }
        }
        
        public BaseConvert BaseConvert
        {
            get
            {
                if ((this.mBaseConvert == null))
                {
                    this.mBaseConvert = new BaseConvert(this);
                }
                return this.mBaseConvert;
            }
        }
        
        public CaseConvert CaseConvert
        {
            get
            {
                if ((this.mCaseConvert == null))
                {
                    this.mCaseConvert = new CaseConvert(this);
                }
                return this.mCaseConvert;
            }
        }
        
        public DataSplit DataSplit
        {
            get
            {
                if ((this.mDataSplit == null))
                {
                    this.mDataSplit = new DataSplit(this);
                }
                return this.mDataSplit;
            }
        }
        
        public FindIndex FindIndex
        {
            get
            {
                if ((this.mFindIndex == null))
                {
                    this.mFindIndex = new FindIndex(this);
                }
                return this.mFindIndex;
            }
        }
        
        public Replace Replace
        {
            get
            {
                if ((this.mReplace == null))
                {
                    this.mReplace = new Replace(this);
                }
                return this.mReplace;
            }
        }
        #endregion
        
        #region Fields
        private MultiAssign mMultiAssign;
        
        private DataMerge mDataMerge;
        
        private BaseConvert mBaseConvert;
        
        private CaseConvert mCaseConvert;
        
        private DataSplit mDataSplit;
        
        private FindIndex mFindIndex;
        
        private Replace mReplace;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MultiAssign : WpfListItem
    {
        
        public MultiAssign(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Assign";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage AssignImage
        {
            get
            {
                if ((this.mAssignImage == null))
                {
                    this.mAssignImage = new WpfImage(this);
                    #region Search Criteria
                    this.mAssignImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Assign";
                    this.mAssignImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssignImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mAssignImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataMerge : WpfListItem
    {
        
        public DataMerge(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Data Merge";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DataMergeImage
        {
            get
            {
                if ((this.mDataMergeImage == null))
                {
                    this.mDataMergeImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDataMergeImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Data Merge";
                    this.mDataMergeImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDataMergeImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDataMergeImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BaseConvert : WpfListItem
    {
        
        public BaseConvert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Base Convert";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage BaseConvertImage
        {
            get
            {
                if ((this.mBaseConvertImage == null))
                {
                    this.mBaseConvertImage = new WpfImage(this);
                    #region Search Criteria
                    this.mBaseConvertImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Base Convert";
                    this.mBaseConvertImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mBaseConvertImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mBaseConvertImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CaseConvert : WpfListItem
    {
        
        public CaseConvert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Case Convert";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CaseConvertImage
        {
            get
            {
                if ((this.mCaseConvertImage == null))
                {
                    this.mCaseConvertImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCaseConvertImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Case Convert";
                    this.mCaseConvertImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCaseConvertImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCaseConvertImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataSplit : WpfListItem
    {
        
        public DataSplit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Data Split";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DataSplitImage
        {
            get
            {
                if ((this.mDataSplitImage == null))
                {
                    this.mDataSplitImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDataSplitImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Data Split";
                    this.mDataSplitImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDataSplitImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDataSplitImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FindIndex : WpfListItem
    {
        
        public FindIndex(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Find Index";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage FindIndexImage
        {
            get
            {
                if ((this.mFindIndexImage == null))
                {
                    this.mFindIndexImage = new WpfImage(this);
                    #region Search Criteria
                    this.mFindIndexImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Find Index";
                    this.mFindIndexImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFindIndexImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mFindIndexImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Replace : WpfListItem
    {
        
        public Replace(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Replace";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ReplaceImage
        {
            get
            {
                if ((this.mReplaceImage == null))
                {
                    this.mReplaceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReplaceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Replace";
                    this.mReplaceImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReplaceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReplaceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Database : WpfGroup
    {
        
        public Database(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Database";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public MySQL MySQL
        {
            get
            {
                if ((this.mMySQL == null))
                {
                    this.mMySQL = new MySQL(this);
                }
                return this.mMySQL;
            }
        }
        
        public SQLBulkInsert SQLBulkInsert
        {
            get
            {
                if ((this.mSQLBulkInsert == null))
                {
                    this.mSQLBulkInsert = new SQLBulkInsert(this);
                }
                return this.mSQLBulkInsert;
            }
        }
        
        public SQLServer SQLServer
        {
            get
            {
                if ((this.mSQLServer == null))
                {
                    this.mSQLServer = new SQLServer(this);
                }
                return this.mSQLServer;
            }
        }
        #endregion
        
        #region Fields
        private MySQL mMySQL;
        
        private SQLBulkInsert mSQLBulkInsert;
        
        private SQLServer mSQLServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MySQL : WpfListItem
    {
        
        public MySQL(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "MySQL";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage MySQLImage
        {
            get
            {
                if ((this.mMySQLImage == null))
                {
                    this.mMySQLImage = new WpfImage(this);
                    #region Search Criteria
                    this.mMySQLImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "MySQL";
                    this.mMySQLImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMySQLImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mMySQLImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SQLBulkInsert : WpfListItem
    {
        
        public SQLBulkInsert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "SQL Bulk Insert";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SQLBulkInsertImage
        {
            get
            {
                if ((this.mSQLBulkInsertImage == null))
                {
                    this.mSQLBulkInsertImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSQLBulkInsertImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "SQL Bulk Insert";
                    this.mSQLBulkInsertImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSQLBulkInsertImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSQLBulkInsertImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SQLServer : WpfListItem
    {
        
        public SQLServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "SQL Server";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SQLServerImage
        {
            get
            {
                if ((this.mSQLServerImage == null))
                {
                    this.mSQLServerImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSQLServerImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "SQL Server";
                    this.mSQLServerImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSQLServerImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSQLServerImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Email : WpfGroup
    {
        
        public Email(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Email";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SMTPSend SMTPSend
        {
            get
            {
                if ((this.mSMTPSend == null))
                {
                    this.mSMTPSend = new SMTPSend(this);
                }
                return this.mSMTPSend;
            }
        }
        
        public ExchangeSend ExchangeSend
        {
            get
            {
                if ((this.mExchangeSend == null))
                {
                    this.mExchangeSend = new ExchangeSend(this);
                }
                return this.mExchangeSend;
            }
        }
        #endregion
        
        #region Fields
        private SMTPSend mSMTPSend;
        
        private ExchangeSend mExchangeSend;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SMTPSend : WpfListItem
    {
        
        public SMTPSend(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "SMTP Send";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SMTPSendImage
        {
            get
            {
                if ((this.mSMTPSendImage == null))
                {
                    this.mSMTPSendImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSMTPSendImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "SMTP Send";
                    this.mSMTPSendImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSMTPSendImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSMTPSendImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExchangeSend : WpfListItem
    {
        
        public ExchangeSend(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Exchange Send";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ExchangeSendImage
        {
            get
            {
                if ((this.mExchangeSendImage == null))
                {
                    this.mExchangeSendImage = new WpfImage(this);
                    #region Search Criteria
                    this.mExchangeSendImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Exchange Send";
                    this.mExchangeSendImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExchangeSendImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mExchangeSendImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileAndFTP : WpfGroup
    {
        
        public FileAndFTP(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "File, FTP, FTPS & SFTP";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Create Create
        {
            get
            {
                if ((this.mCreate == null))
                {
                    this.mCreate = new Create(this);
                }
                return this.mCreate;
            }
        }
        
        public Copy Copy
        {
            get
            {
                if ((this.mCopy == null))
                {
                    this.mCopy = new Copy(this);
                }
                return this.mCopy;
            }
        }
        
        public Delete Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new Delete(this);
                }
                return this.mDelete;
            }
        }
        
        public Move Move
        {
            get
            {
                if ((this.mMove == null))
                {
                    this.mMove = new Move(this);
                }
                return this.mMove;
            }
        }
        
        public ReadFolder ReadFolder
        {
            get
            {
                if ((this.mReadFolder == null))
                {
                    this.mReadFolder = new ReadFolder(this);
                }
                return this.mReadFolder;
            }
        }
        
        public ReadFile ReadFile
        {
            get
            {
                if ((this.mReadFile == null))
                {
                    this.mReadFile = new ReadFile(this);
                }
                return this.mReadFile;
            }
        }
        
        public WriteFile WriteFile
        {
            get
            {
                if ((this.mWriteFile == null))
                {
                    this.mWriteFile = new WriteFile(this);
                }
                return this.mWriteFile;
            }
        }
        
        public Rename Rename
        {
            get
            {
                if ((this.mRename == null))
                {
                    this.mRename = new Rename(this);
                }
                return this.mRename;
            }
        }
        
        public UnZip UnZip
        {
            get
            {
                if ((this.mUnZip == null))
                {
                    this.mUnZip = new UnZip(this);
                }
                return this.mUnZip;
            }
        }
        
        public Zip Zip
        {
            get
            {
                if ((this.mZip == null))
                {
                    this.mZip = new Zip(this);
                }
                return this.mZip;
            }
        }
        #endregion
        
        #region Fields
        private Create mCreate;
        
        private Copy mCopy;
        
        private Delete mDelete;
        
        private Move mMove;
        
        private ReadFolder mReadFolder;
        
        private ReadFile mReadFile;
        
        private WriteFile mWriteFile;
        
        private Rename mRename;
        
        private UnZip mUnZip;
        
        private Zip mZip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Create : WpfListItem
    {
        
        public Create(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Create";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CreateImage
        {
            get
            {
                if ((this.mCreateImage == null))
                {
                    this.mCreateImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCreateImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Create";
                    this.mCreateImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCreateImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCreateImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Copy : WpfListItem
    {
        
        public Copy(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Copy";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CopyImage
        {
            get
            {
                if ((this.mCopyImage == null))
                {
                    this.mCopyImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCopyImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Copy";
                    this.mCopyImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCopyImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCopyImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Delete : WpfListItem
    {
        
        public Delete(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteImage
        {
            get
            {
                if ((this.mDeleteImage == null))
                {
                    this.mDeleteImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete";
                    this.mDeleteImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Move : WpfListItem
    {
        
        public Move(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Move";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage MoveImage
        {
            get
            {
                if ((this.mMoveImage == null))
                {
                    this.mMoveImage = new WpfImage(this);
                    #region Search Criteria
                    this.mMoveImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Move";
                    this.mMoveImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMoveImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mMoveImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReadFolder : WpfListItem
    {
        
        public ReadFolder(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Read Folder";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ReadFolderImage
        {
            get
            {
                if ((this.mReadFolderImage == null))
                {
                    this.mReadFolderImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReadFolderImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Read Folder";
                    this.mReadFolderImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReadFolderImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReadFolderImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReadFile : WpfListItem
    {
        
        public ReadFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Read File";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ReadFileImage
        {
            get
            {
                if ((this.mReadFileImage == null))
                {
                    this.mReadFileImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReadFileImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Read File";
                    this.mReadFileImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReadFileImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReadFileImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WriteFile : WpfListItem
    {
        
        public WriteFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Write File";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage WriteFileImage
        {
            get
            {
                if ((this.mWriteFileImage == null))
                {
                    this.mWriteFileImage = new WpfImage(this);
                    #region Search Criteria
                    this.mWriteFileImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Write File";
                    this.mWriteFileImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWriteFileImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mWriteFileImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Rename : WpfListItem
    {
        
        public Rename(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Rename";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage RenameImage
        {
            get
            {
                if ((this.mRenameImage == null))
                {
                    this.mRenameImage = new WpfImage(this);
                    #region Search Criteria
                    this.mRenameImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Rename";
                    this.mRenameImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRenameImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mRenameImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UnZip : WpfListItem
    {
        
        public UnZip(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "UnZip";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UnZipImage
        {
            get
            {
                if ((this.mUnZipImage == null))
                {
                    this.mUnZipImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUnZipImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "UnZip";
                    this.mUnZipImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnZipImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUnZipImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Zip : WpfListItem
    {
        
        public Zip(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Zip";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ZipImage
        {
            get
            {
                if ((this.mZipImage == null))
                {
                    this.mZipImage = new WpfImage(this);
                    #region Search Criteria
                    this.mZipImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Zip";
                    this.mZipImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mZipImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mZipImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HTTPWebMethods : WpfGroup
    {
        
        public HTTPWebMethods(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "HTTP Web Methods";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DELETE1 DELETE
        {
            get
            {
                if ((this.mDELETE == null))
                {
                    this.mDELETE = new DELETE1(this);
                }
                return this.mDELETE;
            }
        }
        
        public GET GET
        {
            get
            {
                if ((this.mGET == null))
                {
                    this.mGET = new GET(this);
                }
                return this.mGET;
            }
        }
        
        public POST POST
        {
            get
            {
                if ((this.mPOST == null))
                {
                    this.mPOST = new POST(this);
                }
                return this.mPOST;
            }
        }
        
        public PUT PUT
        {
            get
            {
                if ((this.mPUT == null))
                {
                    this.mPUT = new PUT(this);
                }
                return this.mPUT;
            }
        }
        #endregion
        
        #region Fields
        private DELETE1 mDELETE;
        
        private GET mGET;
        
        private POST mPOST;
        
        private PUT mPUT;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DELETE1 : WpfListItem
    {
        
        public DELETE1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "DELETE";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DELETEImage
        {
            get
            {
                if ((this.mDELETEImage == null))
                {
                    this.mDELETEImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDELETEImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DELETE";
                    this.mDELETEImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDELETEImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDELETEImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class GET : WpfListItem
    {
        
        public GET(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "GET";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage GETImage
        {
            get
            {
                if ((this.mGETImage == null))
                {
                    this.mGETImage = new WpfImage(this);
                    #region Search Criteria
                    this.mGETImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "GET";
                    this.mGETImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGETImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mGETImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class POST : WpfListItem
    {
        
        public POST(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "POST";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage POSTImage
        {
            get
            {
                if ((this.mPOSTImage == null))
                {
                    this.mPOSTImage = new WpfImage(this);
                    #region Search Criteria
                    this.mPOSTImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "POST";
                    this.mPOSTImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPOSTImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mPOSTImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PUT : WpfListItem
    {
        
        public PUT(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "PUT";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage PUTImage
        {
            get
            {
                if ((this.mPUTImage == null))
                {
                    this.mPUTImage = new WpfImage(this);
                    #region Search Criteria
                    this.mPUTImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "PUT";
                    this.mPUTImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPUTImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mPUTImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LoopTools : WpfGroup
    {
        
        public LoopTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Loop Constructs";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ForEach ForEach
        {
            get
            {
                if ((this.mForEach == null))
                {
                    this.mForEach = new ForEach(this);
                }
                return this.mForEach;
            }
        }
        #endregion
        
        #region Fields
        private ForEach mForEach;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ForEach : WpfListItem
    {
        
        public ForEach(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "ForEach";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ForEachImage
        {
            get
            {
                if ((this.mForEachImage == null))
                {
                    this.mForEachImage = new WpfImage(this);
                    #region Search Criteria
                    this.mForEachImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "ForEach";
                    this.mForEachImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mForEachImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mForEachImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetTools : WpfGroup
    {
        
        public RecordsetTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Recordset";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Length Length
        {
            get
            {
                if ((this.mLength == null))
                {
                    this.mLength = new Length(this);
                }
                return this.mLength;
            }
        }
        
        public FindRecords FindRecords
        {
            get
            {
                if ((this.mFindRecords == null))
                {
                    this.mFindRecords = new FindRecords(this);
                }
                return this.mFindRecords;
            }
        }
        
        public Delete2 Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new Delete2(this);
                }
                return this.mDelete;
            }
        }
        
        public Sort Sort
        {
            get
            {
                if ((this.mSort == null))
                {
                    this.mSort = new Sort(this);
                }
                return this.mSort;
            }
        }
        
        public Count Count
        {
            get
            {
                if ((this.mCount == null))
                {
                    this.mCount = new Count(this);
                }
                return this.mCount;
            }
        }
        
        public UniqueRecords UniqueRecords
        {
            get
            {
                if ((this.mUniqueRecords == null))
                {
                    this.mUniqueRecords = new UniqueRecords(this);
                }
                return this.mUniqueRecords;
            }
        }
        #endregion
        
        #region Fields
        private Length mLength;
        
        private FindRecords mFindRecords;
        
        private Delete2 mDelete;
        
        private Sort mSort;
        
        private Count mCount;
        
        private UniqueRecords mUniqueRecords;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Length : WpfListItem
    {
        
        public Length(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Length";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage LengthImage
        {
            get
            {
                if ((this.mLengthImage == null))
                {
                    this.mLengthImage = new WpfImage(this);
                    #region Search Criteria
                    this.mLengthImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Length";
                    this.mLengthImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLengthImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mLengthImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FindRecords : WpfListItem
    {
        
        public FindRecords(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Find Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage FindRecordsImage
        {
            get
            {
                if ((this.mFindRecordsImage == null))
                {
                    this.mFindRecordsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mFindRecordsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Find Records";
                    this.mFindRecordsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFindRecordsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mFindRecordsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Delete2 : WpfListItem
    {
        
        public Delete2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteImage
        {
            get
            {
                if ((this.mDeleteImage == null))
                {
                    this.mDeleteImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete";
                    this.mDeleteImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Sort : WpfListItem
    {
        
        public Sort(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Sort";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SortImage
        {
            get
            {
                if ((this.mSortImage == null))
                {
                    this.mSortImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSortImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Sort";
                    this.mSortImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSortImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSortImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Count : WpfListItem
    {
        
        public Count(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Count";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CountImage
        {
            get
            {
                if ((this.mCountImage == null))
                {
                    this.mCountImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCountImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Count";
                    this.mCountImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCountImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCountImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UniqueRecords : WpfListItem
    {
        
        public UniqueRecords(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Unique Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UniqueRecordsImage
        {
            get
            {
                if ((this.mUniqueRecordsImage == null))
                {
                    this.mUniqueRecordsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUniqueRecordsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Unique Records";
                    this.mUniqueRecordsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUniqueRecordsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUniqueRecordsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceTools : WpfGroup
    {
        
        public ResourceTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Resources";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DotNetDLL DotNetDLL
        {
            get
            {
                if ((this.mDotNetDLL == null))
                {
                    this.mDotNetDLL = new DotNetDLL(this);
                }
                return this.mDotNetDLL;
            }
        }
        
        public Service Service
        {
            get
            {
                if ((this.mService == null))
                {
                    this.mService = new Service(this);
                }
                return this.mService;
            }
        }
        #endregion
        
        #region Fields
        private DotNetDLL mDotNetDLL;
        
        private Service mService;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DotNetDLL : WpfListItem
    {
        
        public DotNetDLL(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "DotNet DLL";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DotNetDLLImage
        {
            get
            {
                if ((this.mDotNetDLLImage == null))
                {
                    this.mDotNetDLLImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDotNetDLLImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DotNet DLL";
                    this.mDotNetDLLImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDotNetDLLImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDotNetDLLImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Service : WpfListItem
    {
        
        public Service(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Service";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ServiceImage
        {
            get
            {
                if ((this.mServiceImage == null))
                {
                    this.mServiceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mServiceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Service";
                    this.mServiceImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServiceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mServiceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScriptingTools : WpfGroup
    {
        
        public ScriptingTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Scripting";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CMDScript CMDScript
        {
            get
            {
                if ((this.mCMDScript == null))
                {
                    this.mCMDScript = new CMDScript(this);
                }
                return this.mCMDScript;
            }
        }
        
        public Script Script
        {
            get
            {
                if ((this.mScript == null))
                {
                    this.mScript = new Script(this);
                }
                return this.mScript;
            }
        }
        #endregion
        
        #region Fields
        private CMDScript mCMDScript;
        
        private Script mScript;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CMDScript : WpfListItem
    {
        
        public CMDScript(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "CMD Script";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CMDScriptImage
        {
            get
            {
                if ((this.mCMDScriptImage == null))
                {
                    this.mCMDScriptImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCMDScriptImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "CMD Script";
                    this.mCMDScriptImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCMDScriptImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCMDScriptImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Script : WpfListItem
    {
        
        public Script(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Script";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ScriptImage
        {
            get
            {
                if ((this.mScriptImage == null))
                {
                    this.mScriptImage = new WpfImage(this);
                    #region Search Criteria
                    this.mScriptImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Script";
                    this.mScriptImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mScriptImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mScriptImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SharepointTools : WpfGroup
    {
        
        public SharepointTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Sharepoint";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CreateListItems CreateListItems
        {
            get
            {
                if ((this.mCreateListItems == null))
                {
                    this.mCreateListItems = new CreateListItems(this);
                }
                return this.mCreateListItems;
            }
        }
        
        public DeleteListItems DeleteListItems
        {
            get
            {
                if ((this.mDeleteListItems == null))
                {
                    this.mDeleteListItems = new DeleteListItems(this);
                }
                return this.mDeleteListItems;
            }
        }
        
        public ReadListItems ReadListItems
        {
            get
            {
                if ((this.mReadListItems == null))
                {
                    this.mReadListItems = new ReadListItems(this);
                }
                return this.mReadListItems;
            }
        }
        
        public UpdateListItems UpdateListItems
        {
            get
            {
                if ((this.mUpdateListItems == null))
                {
                    this.mUpdateListItems = new UpdateListItems(this);
                }
                return this.mUpdateListItems;
            }
        }
        #endregion
        
        #region Fields
        private CreateListItems mCreateListItems;
        
        private DeleteListItems mDeleteListItems;
        
        private ReadListItems mReadListItems;
        
        private UpdateListItems mUpdateListItems;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateListItems : WpfListItem
    {
        
        public CreateListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Create List Item(s)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CreateListItemsImage
        {
            get
            {
                if ((this.mCreateListItemsImage == null))
                {
                    this.mCreateListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCreateListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Create List Item(s)";
                    this.mCreateListItemsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCreateListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCreateListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteListItems : WpfListItem
    {
        
        public DeleteListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete List Item(s)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteListItemsImage
        {
            get
            {
                if ((this.mDeleteListItemsImage == null))
                {
                    this.mDeleteListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete List Item(s)";
                    this.mDeleteListItemsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReadListItems : WpfListItem
    {
        
        public ReadListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Read List Item(s)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ReadListItemsImage
        {
            get
            {
                if ((this.mReadListItemsImage == null))
                {
                    this.mReadListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReadListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Read List Item(s)";
                    this.mReadListItemsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReadListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReadListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UpdateListItems : WpfListItem
    {
        
        public UpdateListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Update List Item(s)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UpdateListItemsImage
        {
            get
            {
                if ((this.mUpdateListItemsImage == null))
                {
                    this.mUpdateListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUpdateListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Update List Item(s)";
                    this.mUpdateListItemsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUpdateListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUpdateListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StorageDropbox : WpfGroup
    {
        
        public StorageDropbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Storage: Dropbox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Download Download
        {
            get
            {
                if ((this.mDownload == null))
                {
                    this.mDownload = new Download(this);
                }
                return this.mDownload;
            }
        }
        
        public Upload Upload
        {
            get
            {
                if ((this.mUpload == null))
                {
                    this.mUpload = new Upload(this);
                }
                return this.mUpload;
            }
        }
        
        public ListContents ListContents
        {
            get
            {
                if ((this.mListContents == null))
                {
                    this.mListContents = new ListContents(this);
                }
                return this.mListContents;
            }
        }
        
        public Delete3 Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new Delete3(this);
                }
                return this.mDelete;
            }
        }
        #endregion
        
        #region Fields
        private Download mDownload;
        
        private Upload mUpload;
        
        private ListContents mListContents;
        
        private Delete3 mDelete;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Download : WpfListItem
    {
        
        public Download(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Download";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DownloadImage
        {
            get
            {
                if ((this.mDownloadImage == null))
                {
                    this.mDownloadImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDownloadImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Download";
                    this.mDownloadImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDownloadImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDownloadImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Upload : WpfListItem
    {
        
        public Upload(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Upload";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UploadImage
        {
            get
            {
                if ((this.mUploadImage == null))
                {
                    this.mUploadImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUploadImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Upload";
                    this.mUploadImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUploadImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUploadImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListContents : WpfListItem
    {
        
        public ListContents(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "List Contents";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ListContentsImage
        {
            get
            {
                if ((this.mListContentsImage == null))
                {
                    this.mListContentsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mListContentsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "List Contents";
                    this.mListContentsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mListContentsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mListContentsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Delete3 : WpfListItem
    {
        
        public Delete3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteImage
        {
            get
            {
                if ((this.mDeleteImage == null))
                {
                    this.mDeleteImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete";
                    this.mDeleteImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UtilityTools : WpfGroup
    {
        
        public UtilityTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Utility";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CreateJSON CreateJSON
        {
            get
            {
                if ((this.mCreateJSON == null))
                {
                    this.mCreateJSON = new CreateJSON(this);
                }
                return this.mCreateJSON;
            }
        }
        
        public Calculate Calculate
        {
            get
            {
                if ((this.mCalculate == null))
                {
                    this.mCalculate = new Calculate(this);
                }
                return this.mCalculate;
            }
        }
        
        public DateTime DateTime
        {
            get
            {
                if ((this.mDateTime == null))
                {
                    this.mDateTime = new DateTime(this);
                }
                return this.mDateTime;
            }
        }
        
        public DateTimeDifference DateTimeDifference
        {
            get
            {
                if ((this.mDateTimeDifference == null))
                {
                    this.mDateTimeDifference = new DateTimeDifference(this);
                }
                return this.mDateTimeDifference;
            }
        }
        
        public SysInfo SysInfo
        {
            get
            {
                if ((this.mSysInfo == null))
                {
                    this.mSysInfo = new SysInfo(this);
                }
                return this.mSysInfo;
            }
        }
        
        public FormatNumber FormatNumber
        {
            get
            {
                if ((this.mFormatNumber == null))
                {
                    this.mFormatNumber = new FormatNumber(this);
                }
                return this.mFormatNumber;
            }
        }
        
        public Random Random
        {
            get
            {
                if ((this.mRandom == null))
                {
                    this.mRandom = new Random(this);
                }
                return this.mRandom;
            }
        }
        
        public Email1 Email
        {
            get
            {
                if ((this.mEmail == null))
                {
                    this.mEmail = new Email1(this);
                }
                return this.mEmail;
            }
        }
        
        public WebRequest WebRequest
        {
            get
            {
                if ((this.mWebRequest == null))
                {
                    this.mWebRequest = new WebRequest(this);
                }
                return this.mWebRequest;
            }
        }
        
        public Comment Comment
        {
            get
            {
                if ((this.mComment == null))
                {
                    this.mComment = new Comment(this);
                }
                return this.mComment;
            }
        }
        
        public XPath XPath
        {
            get
            {
                if ((this.mXPath == null))
                {
                    this.mXPath = new XPath(this);
                }
                return this.mXPath;
            }
        }
        #endregion
        
        #region Fields
        private CreateJSON mCreateJSON;
        
        private Calculate mCalculate;
        
        private DateTime mDateTime;
        
        private DateTimeDifference mDateTimeDifference;
        
        private SysInfo mSysInfo;
        
        private FormatNumber mFormatNumber;
        
        private Random mRandom;
        
        private Email1 mEmail;
        
        private WebRequest mWebRequest;
        
        private Comment mComment;
        
        private XPath mXPath;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateJSON : WpfListItem
    {
        
        public CreateJSON(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Create JSON";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CreateJSONImage
        {
            get
            {
                if ((this.mCreateJSONImage == null))
                {
                    this.mCreateJSONImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCreateJSONImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Create JSON";
                    this.mCreateJSONImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCreateJSONImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCreateJSONImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Calculate : WpfListItem
    {
        
        public Calculate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Calculate";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CalculateImage
        {
            get
            {
                if ((this.mCalculateImage == null))
                {
                    this.mCalculateImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCalculateImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Calculate";
                    this.mCalculateImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCalculateImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCalculateImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DateTime : WpfListItem
    {
        
        public DateTime(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Date Time";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DateTimeImage
        {
            get
            {
                if ((this.mDateTimeImage == null))
                {
                    this.mDateTimeImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDateTimeImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Date Time";
                    this.mDateTimeImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDateTimeImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDateTimeImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DateTimeDifference : WpfListItem
    {
        
        public DateTimeDifference(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Date Time Diff";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DateTimeDifferenceImage
        {
            get
            {
                if ((this.mDateTimeDifferenceImage == null))
                {
                    this.mDateTimeDifferenceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDateTimeDifferenceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Date Time Diff";
                    this.mDateTimeDifferenceImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDateTimeDifferenceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDateTimeDifferenceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SysInfo : WpfListItem
    {
        
        public SysInfo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Sys Info";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SysInfoImage
        {
            get
            {
                if ((this.mSysInfoImage == null))
                {
                    this.mSysInfoImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSysInfoImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Sys Info";
                    this.mSysInfoImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSysInfoImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSysInfoImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FormatNumber : WpfListItem
    {
        
        public FormatNumber(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Format Number";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage FormatNumberImage
        {
            get
            {
                if ((this.mFormatNumberImage == null))
                {
                    this.mFormatNumberImage = new WpfImage(this);
                    #region Search Criteria
                    this.mFormatNumberImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Format Number";
                    this.mFormatNumberImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFormatNumberImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mFormatNumberImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Random : WpfListItem
    {
        
        public Random(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Random";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage RandomImage
        {
            get
            {
                if ((this.mRandomImage == null))
                {
                    this.mRandomImage = new WpfImage(this);
                    #region Search Criteria
                    this.mRandomImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Random";
                    this.mRandomImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRandomImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mRandomImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Email1 : WpfListItem
    {
        
        public Email1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Email";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage EmailImage
        {
            get
            {
                if ((this.mEmailImage == null))
                {
                    this.mEmailImage = new WpfImage(this);
                    #region Search Criteria
                    this.mEmailImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Email";
                    this.mEmailImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEmailImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mEmailImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebRequest : WpfListItem
    {
        
        public WebRequest(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Web Request";
            #endregion
        }
        
        #region Properties
        public WpfImage WebRequestImage
        {
            get
            {
                if ((this.mWebRequestImage == null))
                {
                    this.mWebRequestImage = new WpfImage(this);
                    #region Search Criteria
                    this.mWebRequestImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Web Request";
                    this.mWebRequestImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebRequestImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mWebRequestImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Comment : WpfListItem
    {
        
        public Comment(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Comment";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CommentImage
        {
            get
            {
                if ((this.mCommentImage == null))
                {
                    this.mCommentImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCommentImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Comment";
                    this.mCommentImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCommentImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCommentImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XPath : WpfListItem
    {
        
        public XPath(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "XPath";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage XPathImage
        {
            get
            {
                if ((this.mXPathImage == null))
                {
                    this.mXPathImage = new WpfImage(this);
                    #region Search Criteria
                    this.mXPathImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "XPath";
                    this.mXPathImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mXPathImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mXPathImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Help : WpfCustom
    {
        
        public Help(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Help";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DocumentorUnpinBtn
        {
            get
            {
                if ((this.mDocumentorUnpinBtn == null))
                {
                    this.mDocumentorUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mDocumentorUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mDocumentorUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDocumentorUnpinBtn;
            }
        }
        
        public WpfControl HelpWindow
        {
            get
            {
                if ((this.mHelpWindow == null))
                {
                    this.mHelpWindow = new WpfControl(this);
                    #region Search Criteria
                    this.mHelpWindow.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mHelpWindow.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mHelpWindow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHelpWindow;
            }
        }
        
        public WpfCustom HelpTextEditor
        {
            get
            {
                if ((this.mHelpTextEditor == null))
                {
                    this.mHelpTextEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mHelpTextEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamRichTextEditor";
                    this.mHelpTextEditor.SearchProperties[WpfControl.PropertyNames.AutomationId] = "XamRichTextEditor";
                    this.mHelpTextEditor.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mHelpTextEditor;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDocumentorUnpinBtn;
        
        private WpfControl mHelpWindow;
        
        private WpfCustom mHelpTextEditor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneMiddle : WpfCustom
    {
        
        public SplitPaneMiddle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SplitPane_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabMan TabMan
        {
            get
            {
                if ((this.mTabMan == null))
                {
                    this.mTabMan = new TabMan(this);
                }
                return this.mTabMan;
            }
        }
        #endregion
        
        #region Fields
        private TabMan mTabMan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabMan : WpfTabList
    {
        
        public TabMan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public StartPage StartPage
        {
            get
            {
                if ((this.mStartPage == null))
                {
                    this.mStartPage = new StartPage(this);
                }
                return this.mStartPage;
            }
        }
        
        public WpfTabPage HelpTab
        {
            get
            {
                if ((this.mHelpTab == null))
                {
                    this.mHelpTab = new WpfTabPage(this);
                    #region Search Criteria
                    this.mHelpTab.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.Help.HelpViewModel";
                    this.mHelpTab.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHelpTab;
            }
        }
        
        public DeployTab DeployTab
        {
            get
            {
                if ((this.mDeployTab == null))
                {
                    this.mDeployTab = new DeployTab(this);
                }
                return this.mDeployTab;
            }
        }
        
        public ServerSourceWizardTab ServerSourceWizardTab
        {
            get
            {
                if ((this.mServerSourceWizardTab == null))
                {
                    this.mServerSourceWizardTab = new ServerSourceWizardTab(this);
                }
                return this.mServerSourceWizardTab;
            }
        }
        
        public SchedulerTab SchedulerTab
        {
            get
            {
                if ((this.mSchedulerTab == null))
                {
                    this.mSchedulerTab = new SchedulerTab(this);
                }
                return this.mSchedulerTab;
            }
        }
        
        public SettingsTab SettingsTab
        {
            get
            {
                if ((this.mSettingsTab == null))
                {
                    this.mSettingsTab = new SettingsTab(this);
                }
                return this.mSettingsTab;
            }
        }
        
        public WorkflowTab WorkflowTab
        {
            get
            {
                if ((this.mWorkflowTab == null))
                {
                    this.mWorkflowTab = new WorkflowTab(this);
                }
                return this.mWorkflowTab;
            }
        }
        
        public DBSourceWizardTab DBSourceWizardTab
        {
            get
            {
                if ((this.mDBSourceWizardTab == null))
                {
                    this.mDBSourceWizardTab = new DBSourceWizardTab(this);
                }
                return this.mDBSourceWizardTab;
            }
        }
        
        public FilesMenu FilesMenu
        {
            get
            {
                if ((this.mFilesMenu == null))
                {
                    this.mFilesMenu = new FilesMenu(this);
                }
                return this.mFilesMenu;
            }
        }
        
        public WpfButton NavigatorButton
        {
            get
            {
                if ((this.mNavigatorButton == null))
                {
                    this.mNavigatorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNavigatorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "showNavigatorButton";
                    this.mNavigatorButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNavigatorButton;
            }
        }
        
        public DependencyGraphTab DependencyGraphTab
        {
            get
            {
                if ((this.mDependencyGraphTab == null))
                {
                    this.mDependencyGraphTab = new DependencyGraphTab(this);
                }
                return this.mDependencyGraphTab;
            }
        }
        
        public PluginSourceWizardTab PluginSourceWizardTab
        {
            get
            {
                if ((this.mPluginSourceWizardTab == null))
                {
                    this.mPluginSourceWizardTab = new PluginSourceWizardTab(this);
                }
                return this.mPluginSourceWizardTab;
            }
        }
        
        public WebSourceWizardTab WebSourceWizardTab
        {
            get
            {
                if ((this.mWebSourceWizardTab == null))
                {
                    this.mWebSourceWizardTab = new WebSourceWizardTab(this);
                }
                return this.mWebSourceWizardTab;
            }
        }
        
        public ServiceTestView ServiceTestView
        {
            get
            {
                if ((this.mServiceTestView == null))
                {
                    this.mServiceTestView = new ServiceTestView(this);
                }
                return this.mServiceTestView;
            }
        }
        
        public TestsTabPage TestsTabPage
        {
            get
            {
                if ((this.mTestsTabPage == null))
                {
                    this.mTestsTabPage = new TestsTabPage(this);
                }
                return this.mTestsTabPage;
            }
        }
        #endregion
        
        #region Fields
        private StartPage mStartPage;
        
        private WpfTabPage mHelpTab;
        
        private DeployTab mDeployTab;
        
        private ServerSourceWizardTab mServerSourceWizardTab;
        
        private SchedulerTab mSchedulerTab;
        
        private SettingsTab mSettingsTab;
        
        private WorkflowTab mWorkflowTab;
        
        private DBSourceWizardTab mDBSourceWizardTab;
        
        private FilesMenu mFilesMenu;
        
        private WpfButton mNavigatorButton;
        
        private DependencyGraphTab mDependencyGraphTab;
        
        private PluginSourceWizardTab mPluginSourceWizardTab;
        
        private WebSourceWizardTab mWebSourceWizardTab;
        
        private ServiceTestView mServiceTestView;
        
        private TestsTabPage mTestsTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StartPage : WpfTabPage
    {
        
        public StartPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.Help.HelpViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorksurfaceContext WorksurfaceContext
        {
            get
            {
                if ((this.mWorksurfaceContext == null))
                {
                    this.mWorksurfaceContext = new WorksurfaceContext(this);
                }
                return this.mWorksurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WorksurfaceContext mWorksurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorksurfaceContext : WpfCustom
    {
        
        public WorksurfaceContext(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public BrowserHostPane BrowserHostPane
        {
            get
            {
                if ((this.mBrowserHostPane == null))
                {
                    this.mBrowserHostPane = new BrowserHostPane(this);
                }
                return this.mBrowserHostPane;
            }
        }
        #endregion
        
        #region Fields
        private BrowserHostPane mBrowserHostPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BrowserHostPane : WpfPane
    {
        
        public BrowserHostPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.HwndHost";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "WebBrowserHost";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemClient ItemClient
        {
            get
            {
                if ((this.mItemClient == null))
                {
                    this.mItemClient = new ItemClient(this);
                }
                return this.mItemClient;
            }
        }
        #endregion
        
        #region Fields
        private ItemClient mItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemClient : WinClient
    {
        
        public ItemClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.ClassName] = "Internet Explorer_Server";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CommunityPage CommunityPage
        {
            get
            {
                if ((this.mCommunityPage == null))
                {
                    this.mCommunityPage = new CommunityPage(this);
                }
                return this.mCommunityPage;
            }
        }
        #endregion
        
        #region Fields
        private CommunityPage mCommunityPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CommunityPage : HtmlDocument
    {
        
        public CommunityPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Community / Warewolf";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://community.warewolf.io/";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WrapPane WrapPane
        {
            get
            {
                if ((this.mWrapPane == null))
                {
                    this.mWrapPane = new WrapPane(this);
                }
                return this.mWrapPane;
            }
        }
        #endregion
        
        #region Fields
        private WrapPane mWrapPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WrapPane : HtmlDiv
    {
        
        public WrapPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "wrap";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "function showSigninPanel(locResult){ par";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"wrap\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public HtmlDiv KnowledgebasePane
        {
            get
            {
                if ((this.mKnowledgebasePane == null))
                {
                    this.mKnowledgebasePane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mKnowledgebasePane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mKnowledgebasePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mKnowledgebasePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = @"
                                                            Warewolf

                                                            Knowledge base

                                                            function
                                                          ";
                    this.mKnowledgebasePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mKnowledgebasePane.FilterProperties[HtmlDiv.PropertyNames.Class] = "container";
                    this.mKnowledgebasePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"container\"";
                    this.mKnowledgebasePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
                    this.mKnowledgebasePane.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mKnowledgebasePane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mKnowledgebasePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeployTab : WpfTabPage
    {
        
        public DeployTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.DeployWorksurfaceViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext1 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext1(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfButton TabCloseButton
        {
            get
            {
                if ((this.mTabCloseButton == null))
                {
                    this.mTabCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTabCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mTabCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTabCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext1 mWorkSurfaceContext;
        
        private WpfButton mTabCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext1 : WpfCustom
    {
        
        public WorkSurfaceContext1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton RefreshSourceServerButton
        {
            get
            {
                if ((this.mRefreshSourceServerButton == null))
                {
                    this.mRefreshSourceServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshSourceServerButton.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    this.mRefreshSourceServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshSourceServerButton;
            }
        }
        
        public WpfHyperlink OverrideHyperlink
        {
            get
            {
                if ((this.mOverrideHyperlink == null))
                {
                    this.mOverrideHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mOverrideHyperlink.SearchProperties[WpfHyperlink.PropertyNames.AutomationId] = "OverridesCountView";
                    this.mOverrideHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOverrideHyperlink;
            }
        }
        
        public WpfHyperlink NewResourceHyperlink
        {
            get
            {
                if ((this.mNewResourceHyperlink == null))
                {
                    this.mNewResourceHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mNewResourceHyperlink.SearchProperties[WpfHyperlink.PropertyNames.AutomationId] = "NewResourcesView";
                    this.mNewResourceHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewResourceHyperlink;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SourceServerEditbtn_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfButton SourceConnectButton
        {
            get
            {
                if ((this.mSourceConnectButton == null))
                {
                    this.mSourceConnectButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSourceConnectButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SourceConnectServerbtn_AutoID";
                    this.mSourceConnectButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourceConnectButton;
            }
        }
        
        public WpfButton EditDestinationButton
        {
            get
            {
                if ((this.mEditDestinationButton == null))
                {
                    this.mEditDestinationButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditDestinationButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DestinationServerEditbtn_AutoID";
                    this.mEditDestinationButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditDestinationButton;
            }
        }
        
        public WpfCustom SourceConnectControl
        {
            get
            {
                if ((this.mSourceConnectControl == null))
                {
                    this.mSourceConnectControl = new WpfCustom(this);
                    #region Search Criteria
                    this.mSourceConnectControl.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
                    this.mSourceConnectControl.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourceConnectControl";
                    this.mSourceConnectControl.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourceConnectControl;
            }
        }
        
        public WpfButton ShowDependenciesButton
        {
            get
            {
                if ((this.mShowDependenciesButton == null))
                {
                    this.mShowDependenciesButton = new WpfButton(this);
                    #region Search Criteria
                    this.mShowDependenciesButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SelectDepbtn_AutoID";
                    this.mShowDependenciesButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowDependenciesButton;
            }
        }
        
        public WpfText ServicesText
        {
            get
            {
                if ((this.mServicesText == null))
                {
                    this.mServicesText = new WpfText(this);
                    #region Search Criteria
                    this.mServicesText.SearchProperties[WpfText.PropertyNames.Name] = "Services";
                    this.mServicesText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServicesText;
            }
        }
        
        public WpfText ServiceCountText
        {
            get
            {
                if ((this.mServiceCountText == null))
                {
                    this.mServiceCountText = new WpfText(this);
                    #region Search Criteria
                    this.mServiceCountText.SearchProperties[WpfText.PropertyNames.AutomationId] = "WorkflowsCount";
                    this.mServiceCountText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServiceCountText;
            }
        }
        
        public WpfText SourcesText
        {
            get
            {
                if ((this.mSourcesText == null))
                {
                    this.mSourcesText = new WpfText(this);
                    #region Search Criteria
                    this.mSourcesText.SearchProperties[WpfText.PropertyNames.Name] = "Sources";
                    this.mSourcesText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesText;
            }
        }
        
        public WpfText SourceCountText
        {
            get
            {
                if ((this.mSourceCountText == null))
                {
                    this.mSourceCountText = new WpfText(this);
                    #region Search Criteria
                    this.mSourceCountText.SearchProperties[WpfText.PropertyNames.AutomationId] = "SourcesCount";
                    this.mSourceCountText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourceCountText;
            }
        }
        
        public WpfText NewResourcesText
        {
            get
            {
                if ((this.mNewResourcesText == null))
                {
                    this.mNewResourcesText = new WpfText(this);
                    #region Search Criteria
                    this.mNewResourcesText.SearchProperties[WpfText.PropertyNames.Name] = "New Resources";
                    this.mNewResourcesText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewResourcesText;
            }
        }
        
        public WpfText OverrideText
        {
            get
            {
                if ((this.mOverrideText == null))
                {
                    this.mOverrideText = new WpfText(this);
                    #region Search Criteria
                    this.mOverrideText.SearchProperties[WpfText.PropertyNames.Name] = "Override";
                    this.mOverrideText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOverrideText;
            }
        }
        
        public DeployButton DeployButton
        {
            get
            {
                if ((this.mDeployButton == null))
                {
                    this.mDeployButton = new DeployButton(this);
                }
                return this.mDeployButton;
            }
        }
        
        public WpfText DeployButtonMessageText
        {
            get
            {
                if ((this.mDeployButtonMessageText == null))
                {
                    this.mDeployButtonMessageText = new WpfText(this);
                    #region Search Criteria
                    this.mDeployButtonMessageText.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_DeploySelectTB_AutoID";
                    this.mDeployButtonMessageText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployButtonMessageText;
            }
        }
        
        public DestinationServerConectControl DestinationServerConectControl
        {
            get
            {
                if ((this.mDestinationServerConectControl == null))
                {
                    this.mDestinationServerConectControl = new DestinationServerConectControl(this);
                }
                return this.mDestinationServerConectControl;
            }
        }
        
        public SourceServerConectControl SourceServerConectControl
        {
            get
            {
                if ((this.mSourceServerConectControl == null))
                {
                    this.mSourceServerConectControl = new SourceServerConectControl(this);
                }
                return this.mSourceServerConectControl;
            }
        }
        
        public SourceServerExplorer SourceServerExplorer
        {
            get
            {
                if ((this.mSourceServerExplorer == null))
                {
                    this.mSourceServerExplorer = new SourceServerExplorer(this);
                }
                return this.mSourceServerExplorer;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mRefreshSourceServerButton;
        
        private WpfHyperlink mOverrideHyperlink;
        
        private WpfHyperlink mNewResourceHyperlink;
        
        private WpfButton mEditSourceButton;
        
        private WpfButton mSourceConnectButton;
        
        private WpfButton mEditDestinationButton;
        
        private WpfCustom mSourceConnectControl;
        
        private WpfButton mShowDependenciesButton;
        
        private WpfText mServicesText;
        
        private WpfText mServiceCountText;
        
        private WpfText mSourcesText;
        
        private WpfText mSourceCountText;
        
        private WpfText mNewResourcesText;
        
        private WpfText mOverrideText;
        
        private DeployButton mDeployButton;
        
        private WpfText mDeployButtonMessageText;
        
        private DestinationServerConectControl mDestinationServerConectControl;
        
        private SourceServerConectControl mSourceServerConectControl;
        
        private SourceServerExplorer mSourceServerExplorer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeployButton : WpfButton
    {
        
        public DeployButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Deploybtn_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DestinationServerConectControl : WpfCustom
    {
        
        public DestinationServerConectControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DestinationConnectControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Combobox Combobox
        {
            get
            {
                if ((this.mCombobox == null))
                {
                    this.mCombobox = new Combobox(this);
                }
                return this.mCombobox;
            }
        }
        
        public WpfButton ConnectDestinationButton
        {
            get
            {
                if ((this.mConnectDestinationButton == null))
                {
                    this.mConnectDestinationButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectDestinationButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DestinationServerConnectbtn_AutoID";
                    this.mConnectDestinationButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectDestinationButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_IndicatorConnecting_AutoID";
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private Combobox mCombobox;
        
        private WpfButton mConnectDestinationButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Combobox : WpfCustom
    {
        
        public Combobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TheServerComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ToggleButton
        {
            get
            {
                if ((this.mToggleButton == null))
                {
                    this.mToggleButton = new WpfButton(this);
                    #region Search Criteria
                    this.mToggleButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToggleButton;
            }
        }
        
        public WpfText RemoteConnectionIntegrationText
        {
            get
            {
                if ((this.mRemoteConnectionIntegrationText == null))
                {
                    this.mRemoteConnectionIntegrationText = new WpfText(this);
                    #region Search Criteria
                    this.mRemoteConnectionIntegrationText.SearchProperties[WpfText.PropertyNames.Name] = "Remote Connection Integration";
                    this.mRemoteConnectionIntegrationText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRemoteConnectionIntegrationText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mToggleButton;
        
        private WpfText mRemoteConnectionIntegrationText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourceServerConectControl : WpfCustom
    {
        
        public SourceServerConectControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourceConnectControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Combobox1 Combobox
        {
            get
            {
                if ((this.mCombobox == null))
                {
                    this.mCombobox = new Combobox1(this);
                }
                return this.mCombobox;
            }
        }
        
        public WpfButton ConnectSourceButton
        {
            get
            {
                if ((this.mConnectSourceButton == null))
                {
                    this.mConnectSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SourceServerConnectbtn_AutoID";
                    this.mConnectSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectSourceButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_IndicatorConnecting_AutoID";
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private Combobox1 mCombobox;
        
        private WpfButton mConnectSourceButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Combobox1 : WpfCustom
    {
        
        public Combobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TheServerComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ToggleButton
        {
            get
            {
                if ((this.mToggleButton == null))
                {
                    this.mToggleButton = new WpfButton(this);
                    #region Search Criteria
                    this.mToggleButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToggleButton;
            }
        }
        
        public WpfText RemoteConnectionIntegrationText
        {
            get
            {
                if ((this.mRemoteConnectionIntegrationText == null))
                {
                    this.mRemoteConnectionIntegrationText = new WpfText(this);
                    #region Search Criteria
                    this.mRemoteConnectionIntegrationText.SearchProperties[WpfText.PropertyNames.Name] = "Remote Connection Integration";
                    this.mRemoteConnectionIntegrationText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRemoteConnectionIntegrationText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mToggleButton;
        
        private WpfText mRemoteConnectionIntegrationText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourceServerExplorer : WpfCustom
    {
        
        public SourceServerExplorer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourceNavigationView";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit SearchTextbox
        {
            get
            {
                if ((this.mSearchTextbox == null))
                {
                    this.mSearchTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSearchTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mSearchTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSearchTextbox;
            }
        }
        
        public ExplorerTree1 ExplorerTree
        {
            get
            {
                if ((this.mExplorerTree == null))
                {
                    this.mExplorerTree = new ExplorerTree1(this);
                }
                return this.mExplorerTree;
            }
        }
        
        public WpfText FilterText
        {
            get
            {
                if ((this.mFilterText == null))
                {
                    this.mFilterText = new WpfText(this);
                    #region Search Criteria
                    this.mFilterText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mFilterText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFilterText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mSearchTextbox;
        
        private ExplorerTree1 mExplorerTree;
        
        private WpfText mFilterText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerTree1 : WpfTree
    {
        
        public ExplorerTree1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SourceServerName SourceServerName
        {
            get
            {
                if ((this.mSourceServerName == null))
                {
                    this.mSourceServerName = new SourceServerName(this);
                }
                return this.mSourceServerName;
            }
        }
        #endregion
        
        #region Fields
        private SourceServerName mSourceServerName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourceServerName : WpfTreeItem
    {
        
        public SourceServerName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FirstExplorerTreeItem FirstExplorerTreeItem
        {
            get
            {
                if ((this.mFirstExplorerTreeItem == null))
                {
                    this.mFirstExplorerTreeItem = new FirstExplorerTreeItem(this);
                }
                return this.mFirstExplorerTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private FirstExplorerTreeItem mFirstExplorerTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FirstExplorerTreeItem : WpfTreeItem
    {
        
        public FirstExplorerTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox CheckBox
        {
            get
            {
                if ((this.mCheckBox == null))
                {
                    this.mCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "ResourceNameCheckBox";
                    this.mCheckBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerSourceWizardTab : WpfTabPage
    {
        
        public ServerSourceWizardTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.IServerSource]";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext2 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext2(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfButton TabCloseButton
        {
            get
            {
                if ((this.mTabCloseButton == null))
                {
                    this.mTabCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTabCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mTabCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTabCloseButton;
            }
        }
        
        public WpfImage NoAuthMessageText
        {
            get
            {
                if ((this.mNoAuthMessageText == null))
                {
                    this.mNoAuthMessageText = new WpfImage(this);
                    #region Search Criteria
                    this.mNoAuthMessageText.SearchProperties[WpfImage.PropertyNames.HelpText] = "You are not authorized to edit this resource";
                    this.mNoAuthMessageText.SearchProperties[WpfImage.PropertyNames.Instance] = "2";
                    this.mNoAuthMessageText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNoAuthMessageText;
            }
        }
        
        public WpfText NewServerTitleText
        {
            get
            {
                if ((this.mNewServerTitleText == null))
                {
                    this.mNewServerTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mNewServerTitleText.SearchProperties[WpfText.PropertyNames.Name] = "New Server Source";
                    this.mNewServerTitleText.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mNewServerTitleText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerTitleText;
            }
        }
        
        public WpfImage NewServerBackground
        {
            get
            {
                if ((this.mNewServerBackground == null))
                {
                    this.mNewServerBackground = new WpfImage(this);
                    #region Search Criteria
                    this.mNewServerBackground.SearchProperties[WpfImage.PropertyNames.AutomationId] = "New Server Source";
                    this.mNewServerBackground.SearchProperties[WpfImage.PropertyNames.Instance] = "2";
                    this.mNewServerBackground.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerBackground;
            }
        }
        
        public WpfImage NoAuthImage
        {
            get
            {
                if ((this.mNoAuthImage == null))
                {
                    this.mNoAuthImage = new WpfImage(this);
                    #region Search Criteria
                    this.mNoAuthImage.SearchProperties[WpfImage.PropertyNames.HelpText] = "You are not authorized to edit this resource";
                    this.mNoAuthImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNoAuthImage;
            }
        }
        
        public WpfText AddressText
        {
            get
            {
                if ((this.mAddressText == null))
                {
                    this.mAddressText = new WpfText(this);
                    #region Search Criteria
                    this.mAddressText.SearchProperties[WpfText.PropertyNames.Name] = "New Server Source";
                    this.mAddressText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddressText;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext2 mWorkSurfaceContext;
        
        private WpfButton mTabCloseButton;
        
        private WpfImage mNoAuthMessageText;
        
        private WpfText mNewServerTitleText;
        
        private WpfImage mNewServerBackground;
        
        private WpfImage mNoAuthImage;
        
        private WpfText mAddressText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext2 : WpfCustom
    {
        
        public WorkSurfaceContext2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NewServerSourceWizard NewServerSourceWizard
        {
            get
            {
                if ((this.mNewServerSourceWizard == null))
                {
                    this.mNewServerSourceWizard = new NewServerSourceWizard(this);
                }
                return this.mNewServerSourceWizard;
            }
        }
        
        public ErrorText ErrorText
        {
            get
            {
                if ((this.mErrorText == null))
                {
                    this.mErrorText = new ErrorText(this);
                }
                return this.mErrorText;
            }
        }
        
        public WpfRadioButton PublicRadioButton
        {
            get
            {
                if ((this.mPublicRadioButton == null))
                {
                    this.mPublicRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mPublicRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "PublicRadioButton";
                    this.mPublicRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublicRadioButton;
            }
        }
        
        public WpfImage NewServerTabIcon
        {
            get
            {
                if ((this.mNewServerTabIcon == null))
                {
                    this.mNewServerTabIcon = new WpfImage(this);
                    #region Search Criteria
                    this.mNewServerTabIcon.SearchProperties[WpfImage.PropertyNames.AutomationId] = "New Server Source";
                    this.mNewServerTabIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerTabIcon;
            }
        }
        
        public WpfRadioButton UserRadioButton
        {
            get
            {
                if ((this.mUserRadioButton == null))
                {
                    this.mUserRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUserRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UserRadioButton";
                    this.mUserRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUserRadioButton;
            }
        }
        
        public WpfRadioButton WindowsRadioButton
        {
            get
            {
                if ((this.mWindowsRadioButton == null))
                {
                    this.mWindowsRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mWindowsRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "WindowsRadioButton";
                    this.mWindowsRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWindowsRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private NewServerSourceWizard mNewServerSourceWizard;
        
        private ErrorText mErrorText;
        
        private WpfRadioButton mPublicRadioButton;
        
        private WpfImage mNewServerTabIcon;
        
        private WpfRadioButton mUserRadioButton;
        
        private WpfRadioButton mWindowsRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewServerSourceWizard : WpfCustom
    {
        
        public NewServerSourceWizard(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ManageServerControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AuthTypeOptions AuthTypeOptions
        {
            get
            {
                if ((this.mAuthTypeOptions == null))
                {
                    this.mAuthTypeOptions = new AuthTypeOptions(this);
                }
                return this.mAuthTypeOptions;
            }
        }
        
        public ProtocolCombobox ProtocolCombobox
        {
            get
            {
                if ((this.mProtocolCombobox == null))
                {
                    this.mProtocolCombobox = new ProtocolCombobox(this);
                }
                return this.mProtocolCombobox;
            }
        }
        
        public AddressComboBox AddressComboBox
        {
            get
            {
                if ((this.mAddressComboBox == null))
                {
                    this.mAddressComboBox = new AddressComboBox(this);
                }
                return this.mAddressComboBox;
            }
        }
        
        public WpfButton TestConnectionButton
        {
            get
            {
                if ((this.mTestConnectionButton == null))
                {
                    this.mTestConnectionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestConnectionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestConnectionButton";
                    this.mTestConnectionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestConnectionButton;
            }
        }
        
        public WpfText ErrorText
        {
            get
            {
                if ((this.mErrorText == null))
                {
                    this.mErrorText = new WpfText(this);
                    #region Search Criteria
                    this.mErrorText.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorTextBlock";
                    this.mErrorText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mErrorText;
            }
        }
        #endregion
        
        #region Fields
        private AuthTypeOptions mAuthTypeOptions;
        
        private ProtocolCombobox mProtocolCombobox;
        
        private AddressComboBox mAddressComboBox;
        
        private WpfButton mTestConnectionButton;
        
        private WpfText mErrorText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AuthTypeOptions : WpfCustom
    {
        
        public AuthTypeOptions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ProtocolItems";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton WindowsAuth
        {
            get
            {
                if ((this.mWindowsAuth == null))
                {
                    this.mWindowsAuth = new WpfButton(this);
                    #region Search Criteria
                    this.mWindowsAuth.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mWindowsAuth.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWindowsAuth;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mWindowsAuth;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ProtocolCombobox : WpfCustom
    {
        
        public ProtocolCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ProtocolItems";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ToggleDropdown
        {
            get
            {
                if ((this.mToggleDropdown == null))
                {
                    this.mToggleDropdown = new WpfButton(this);
                    #region Search Criteria
                    this.mToggleDropdown.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mToggleDropdown.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToggleDropdown;
            }
        }
        
        public WpfText HttpSelectedItemText
        {
            get
            {
                if ((this.mHttpSelectedItemText == null))
                {
                    this.mHttpSelectedItemText = new WpfText(this);
                    #region Search Criteria
                    this.mHttpSelectedItemText.SearchProperties[WpfText.PropertyNames.Name] = "http";
                    this.mHttpSelectedItemText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHttpSelectedItemText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mToggleDropdown;
        
        private WpfText mHttpSelectedItemText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddressComboBox : WpfComboBox
    {
        
        public AddressComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "AddressTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit AddressEditBox
        {
            get
            {
                if ((this.mAddressEditBox == null))
                {
                    this.mAddressEditBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mAddressEditBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mAddressEditBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddressEditBox;
            }
        }
        
        public WpfListItem TSTCIREMOTE
        {
            get
            {
                if ((this.mTSTCIREMOTE == null))
                {
                    this.mTSTCIREMOTE = new WpfListItem(this);
                    #region Search Criteria
                    this.mTSTCIREMOTE.SearchProperties[WpfListItem.PropertyNames.Name] = "TST-CI-REMOTE";
                    this.mTSTCIREMOTE.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTSTCIREMOTE;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAddressEditBox;
        
        private WpfListItem mTSTCIREMOTE;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorText : WpfText
    {
        
        public ErrorText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorTextBlock";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SchedulerTab : WpfCustom
    {
        
        public SchedulerTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SchedulerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SchedulerView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox RunTaskCheckBox
        {
            get
            {
                if ((this.mRunTaskCheckBox == null))
                {
                    this.mRunTaskCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRunTaskCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_RunAsapCheckBox";
                    this.mRunTaskCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunTaskCheckBox;
            }
        }
        
        public WpfText NumberofHistoryText
        {
            get
            {
                if ((this.mNumberofHistoryText == null))
                {
                    this.mNumberofHistoryText = new WpfText(this);
                    #region Search Criteria
                    this.mNumberofHistoryText.SearchProperties[WpfText.PropertyNames.Name] = "Number of History records to load (0 = all) ";
                    this.mNumberofHistoryText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNumberofHistoryText;
            }
        }
        
        public WpfEdit NumOfHistoryTextBoxEdit
        {
            get
            {
                if ((this.mNumOfHistoryTextBoxEdit == null))
                {
                    this.mNumOfHistoryTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mNumOfHistoryTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NumOfHisTextBox";
                    this.mNumOfHistoryTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNumOfHistoryTextBoxEdit;
            }
        }
        
        public WpfText UIRunasthefollowinguseText
        {
            get
            {
                if ((this.mUIRunasthefollowinguseText == null))
                {
                    this.mUIRunasthefollowinguseText = new WpfText(this);
                    #region Search Criteria
                    this.mUIRunasthefollowinguseText.SearchProperties[WpfText.PropertyNames.Name] = "Run as the following user account ";
                    this.mUIRunasthefollowinguseText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIRunasthefollowinguseText;
            }
        }
        
        public WpfText UsernameText
        {
            get
            {
                if ((this.mUsernameText == null))
                {
                    this.mUsernameText = new WpfText(this);
                    #region Search Criteria
                    this.mUsernameText.SearchProperties[WpfText.PropertyNames.AutomationId] = "UsernameTextBlock";
                    this.mUsernameText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUsernameText;
            }
        }
        
        public WpfEdit UserNameTextBoxEdit
        {
            get
            {
                if ((this.mUserNameTextBoxEdit == null))
                {
                    this.mUserNameTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUserNameTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_UserNameTextBox";
                    this.mUserNameTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUserNameTextBoxEdit;
            }
        }
        
        public WpfText PasswordText
        {
            get
            {
                if ((this.mPasswordText == null))
                {
                    this.mPasswordText = new WpfText(this);
                    #region Search Criteria
                    this.mPasswordText.SearchProperties[WpfText.PropertyNames.Name] = "Password ";
                    this.mPasswordText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordText;
            }
        }
        
        public WpfEdit PasswordTextBoxEdit
        {
            get
            {
                if ((this.mPasswordTextBoxEdit == null))
                {
                    this.mPasswordTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_PasswordBox";
                    this.mPasswordTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordTextBoxEdit;
            }
        }
        
        public WpfText ErrorMessageText
        {
            get
            {
                if ((this.mErrorMessageText == null))
                {
                    this.mErrorMessageText = new WpfText(this);
                    #region Search Criteria
                    this.mErrorMessageText.SearchProperties[WpfText.PropertyNames.Name] = "Please select a workflow to schedule";
                    this.mErrorMessageText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mErrorMessageText;
            }
        }
        
        public WpfTable HistoryTable
        {
            get
            {
                if ((this.mHistoryTable == null))
                {
                    this.mHistoryTable = new WpfTable(this);
                    #region Search Criteria
                    this.mHistoryTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHistoryTable;
            }
        }
        
        public ConnectControl1 ConnectControl
        {
            get
            {
                if ((this.mConnectControl == null))
                {
                    this.mConnectControl = new ConnectControl1(this);
                }
                return this.mConnectControl;
            }
        }
        
        public SchedulesList SchedulesList
        {
            get
            {
                if ((this.mSchedulesList == null))
                {
                    this.mSchedulesList = new SchedulesList(this);
                }
                return this.mSchedulesList;
            }
        }
        
        public WpfText TriggerText
        {
            get
            {
                if ((this.mTriggerText == null))
                {
                    this.mTriggerText = new WpfText(this);
                    #region Search Criteria
                    this.mTriggerText.SearchProperties[WpfText.PropertyNames.Name] = "Triggered at ";
                    this.mTriggerText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTriggerText;
            }
        }
        
        public WpfText TriggerValueText
        {
            get
            {
                if ((this.mTriggerValueText == null))
                {
                    this.mTriggerValueText = new WpfText(this);
                    #region Search Criteria
                    this.mTriggerValueText.SearchProperties[WpfText.PropertyNames.Name] = "At 2:40 PM every day";
                    this.mTriggerValueText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTriggerValueText;
            }
        }
        
        public WpfButton EditTriggerButton
        {
            get
            {
                if ((this.mEditTriggerButton == null))
                {
                    this.mEditTriggerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditTriggerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_EditTriggerButton_AutoID";
                    this.mEditTriggerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditTriggerButton;
            }
        }
        
        public WpfText NameText
        {
            get
            {
                if ((this.mNameText == null))
                {
                    this.mNameText = new WpfText(this);
                    #region Search Criteria
                    this.mNameText.SearchProperties[WpfText.PropertyNames.Name] = "Name ";
                    this.mNameText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNameText;
            }
        }
        
        public WpfEdit NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mNameTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextbox";
                    this.mNameTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNameTextbox;
            }
        }
        
        public WpfText StatusText
        {
            get
            {
                if ((this.mStatusText == null))
                {
                    this.mStatusText = new WpfText(this);
                    #region Search Criteria
                    this.mStatusText.SearchProperties[WpfText.PropertyNames.Name] = "Status ";
                    this.mStatusText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStatusText;
            }
        }
        
        public WpfRadioButton EnabledRadioButton
        {
            get
            {
                if ((this.mEnabledRadioButton == null))
                {
                    this.mEnabledRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mEnabledRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_EnabledRadioButton";
                    this.mEnabledRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEnabledRadioButton;
            }
        }
        
        public WpfRadioButton DisabledRadioButton
        {
            get
            {
                if ((this.mDisabledRadioButton == null))
                {
                    this.mDisabledRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDisabledRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DisabledRadioButton";
                    this.mDisabledRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisabledRadioButton;
            }
        }
        
        public WpfText WorkflowText
        {
            get
            {
                if ((this.mWorkflowText == null))
                {
                    this.mWorkflowText = new WpfText(this);
                    #region Search Criteria
                    this.mWorkflowText.SearchProperties[WpfText.PropertyNames.Name] = "Workflow ";
                    this.mWorkflowText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWorkflowText;
            }
        }
        
        public WpfEdit WorkflowNameTextBox
        {
            get
            {
                if ((this.mWorkflowNameTextBox == null))
                {
                    this.mWorkflowNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mWorkflowNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_WorkflowNameTextBox_AutoID";
                    this.mWorkflowNameTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWorkflowNameTextBox;
            }
        }
        
        public WpfButton ResourcePickerButton
        {
            get
            {
                if ((this.mResourcePickerButton == null))
                {
                    this.mResourcePickerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mResourcePickerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_WorkflowSelectorButton_AutoID";
                    this.mResourcePickerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResourcePickerButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mRunTaskCheckBox;
        
        private WpfText mNumberofHistoryText;
        
        private WpfEdit mNumOfHistoryTextBoxEdit;
        
        private WpfText mUIRunasthefollowinguseText;
        
        private WpfText mUsernameText;
        
        private WpfEdit mUserNameTextBoxEdit;
        
        private WpfText mPasswordText;
        
        private WpfEdit mPasswordTextBoxEdit;
        
        private WpfText mErrorMessageText;
        
        private WpfTable mHistoryTable;
        
        private ConnectControl1 mConnectControl;
        
        private SchedulesList mSchedulesList;
        
        private WpfText mTriggerText;
        
        private WpfText mTriggerValueText;
        
        private WpfButton mEditTriggerButton;
        
        private WpfText mNameText;
        
        private WpfEdit mNameTextbox;
        
        private WpfText mStatusText;
        
        private WpfRadioButton mEnabledRadioButton;
        
        private WpfRadioButton mDisabledRadioButton;
        
        private WpfText mWorkflowText;
        
        private WpfEdit mWorkflowNameTextBox;
        
        private WpfButton mResourcePickerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConnectControl1 : WpfCustom
    {
        
        public ConnectControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ConnectUserControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox ServerComboBox
        {
            get
            {
                if ((this.mServerComboBox == null))
                {
                    this.mServerComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mServerComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_SettingsServerComboBox_AutoID";
                    this.mServerComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServerComboBox;
            }
        }
        
        public WpfButton EditServerButton
        {
            get
            {
                if ((this.mEditServerButton == null))
                {
                    this.mEditServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SettingsServerEditButton_AutoID";
                    this.mEditServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditServerButton;
            }
        }
        
        public WpfButton ConnectServerButton
        {
            get
            {
                if ((this.mConnectServerButton == null))
                {
                    this.mConnectServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SettingsServerConnectButton_AutoID";
                    this.mConnectServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectServerButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mServerComboBox;
        
        private WpfButton mEditServerButton;
        
        private WpfButton mConnectServerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SchedulesList : WpfList
    {
        
        public SchedulesList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "schedules";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UINameworkflow1ResourcListItem UINameworkflow1ResourcListItem
        {
            get
            {
                if ((this.mUINameworkflow1ResourcListItem == null))
                {
                    this.mUINameworkflow1ResourcListItem = new UINameworkflow1ResourcListItem(this);
                }
                return this.mUINameworkflow1ResourcListItem;
            }
        }
        
        public SchedulerListItem SchedulerListItem
        {
            get
            {
                if ((this.mSchedulerListItem == null))
                {
                    this.mSchedulerListItem = new SchedulerListItem(this);
                }
                return this.mSchedulerListItem;
            }
        }
        
        public NewTask NewTask
        {
            get
            {
                if ((this.mNewTask == null))
                {
                    this.mNewTask = new NewTask(this);
                }
                return this.mNewTask;
            }
        }
        
        public WpfButton DeleteTaskButton
        {
            get
            {
                if ((this.mDeleteTaskButton == null))
                {
                    this.mDeleteTaskButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteTaskButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_WorkflowSelectorButton_AutoID";
                    this.mDeleteTaskButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteTaskButton;
            }
        }
        #endregion
        
        #region Fields
        private UINameworkflow1ResourcListItem mUINameworkflow1ResourcListItem;
        
        private SchedulerListItem mSchedulerListItem;
        
        private NewTask mNewTask;
        
        private WpfButton mDeleteTaskButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINameworkflow1ResourcListItem : WpfListItem
    {
        
        public UINameworkflow1ResourcListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Name:workflow1 ResourceId:00000000-0000-0000-0000-000000000000";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox StatusCheckBox
        {
            get
            {
                if ((this.mStatusCheckBox == null))
                {
                    this.mStatusCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mStatusCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStatusCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mStatusCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SchedulerListItem : WpfListItem
    {
        
        public SchedulerListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Scheduler.DummyResource";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CreateTaskButton CreateTaskButton
        {
            get
            {
                if ((this.mCreateTaskButton == null))
                {
                    this.mCreateTaskButton = new CreateTaskButton(this);
                }
                return this.mCreateTaskButton;
            }
        }
        #endregion
        
        #region Fields
        private CreateTaskButton mCreateTaskButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateTaskButton : WpfButton
    {
        
        public CreateTaskButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton NewTaskButton
        {
            get
            {
                if ((this.mNewTaskButton == null))
                {
                    this.mNewTaskButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewTaskButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mNewTaskButton.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mNewTaskButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewTaskButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mNewTaskButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewTask : WpfListItem
    {
        
        public NewTask(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Name:New Task1 ResourceId:00000000-0000-0000-0000-000000000000";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox StatusCheckbox
        {
            get
            {
                if ((this.mStatusCheckbox == null))
                {
                    this.mStatusCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mStatusCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStatusCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mStatusCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SettingsTab : WpfTabPage
    {
        
        public SettingsTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Settings.SettingsViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorksurfaceContext3 WorksurfaceContext
        {
            get
            {
                if ((this.mWorksurfaceContext == null))
                {
                    this.mWorksurfaceContext = new WorksurfaceContext3(this);
                }
                return this.mWorksurfaceContext;
            }
        }
        
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WorksurfaceContext3 mWorksurfaceContext;
        
        private WpfButton mCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorksurfaceContext3 : WpfCustom
    {
        
        public WorksurfaceContext3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SettingsView SettingsView
        {
            get
            {
                if ((this.mSettingsView == null))
                {
                    this.mSettingsView = new SettingsView(this);
                }
                return this.mSettingsView;
            }
        }
        #endregion
        
        #region Fields
        private SettingsView mSettingsView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SettingsView : WpfCustom
    {
        
        public SettingsView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SettingsView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SettingsView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabList TabList
        {
            get
            {
                if ((this.mTabList == null))
                {
                    this.mTabList = new TabList(this);
                }
                return this.mTabList;
            }
        }
        #endregion
        
        #region Fields
        private TabList mTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabList : WpfTabList
    {
        
        public TabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SecurityTab SecurityTab
        {
            get
            {
                if ((this.mSecurityTab == null))
                {
                    this.mSecurityTab = new SecurityTab(this);
                }
                return this.mSecurityTab;
            }
        }
        
        public WpfTabPage LoggingTab
        {
            get
            {
                if ((this.mLoggingTab == null))
                {
                    this.mLoggingTab = new WpfTabPage(this);
                    #region Search Criteria
                    this.mLoggingTab.SearchProperties[WpfTabPage.PropertyNames.Name] = "System.Windows.Controls.TabItem Header: Content:";
                    this.mLoggingTab.SearchProperties[WpfTabPage.PropertyNames.Instance] = "2";
                    this.mLoggingTab.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLoggingTab;
            }
        }
        #endregion
        
        #region Fields
        private SecurityTab mSecurityTab;
        
        private WpfTabPage mLoggingTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SecurityTab : WpfTabPage
    {
        
        public SecurityTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "System.Windows.Controls.TabItem Header: Content:";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SecurityWindow SecurityWindow
        {
            get
            {
                if ((this.mSecurityWindow == null))
                {
                    this.mSecurityWindow = new SecurityWindow(this);
                }
                return this.mSecurityWindow;
            }
        }
        #endregion
        
        #region Fields
        private SecurityWindow mSecurityWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SecurityWindow : WpfCustom
    {
        
        public SecurityWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SecurityView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SecurityViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfTable ServerPermissions
        {
            get
            {
                if ((this.mServerPermissions == null))
                {
                    this.mServerPermissions = new WpfTable(this);
                    #region Search Criteria
                    this.mServerPermissions.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ServerPermissionsDataGrid";
                    this.mServerPermissions.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServerPermissions;
            }
        }
        
        public ResourcePermissions ResourcePermissions
        {
            get
            {
                if ((this.mResourcePermissions == null))
                {
                    this.mResourcePermissions = new ResourcePermissions(this);
                }
                return this.mResourcePermissions;
            }
        }
        #endregion
        
        #region Fields
        private WpfTable mServerPermissions;
        
        private ResourcePermissions mResourcePermissions;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourcePermissions : WpfTable
    {
        
        public ResourcePermissions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ResourcePermissionsDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row1 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row1(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row1 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row1 : WpfPane
    {
        
        public Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResourceCell ResourceCell
        {
            get
            {
                if ((this.mResourceCell == null))
                {
                    this.mResourceCell = new ResourceCell(this);
                }
                return this.mResourceCell;
            }
        }
        
        public WindowsGroupCell WindowsGroupCell
        {
            get
            {
                if ((this.mWindowsGroupCell == null))
                {
                    this.mWindowsGroupCell = new WindowsGroupCell(this);
                }
                return this.mWindowsGroupCell;
            }
        }
        
        public PermissionsCell PermissionsCell
        {
            get
            {
                if ((this.mPermissionsCell == null))
                {
                    this.mPermissionsCell = new PermissionsCell(this);
                }
                return this.mPermissionsCell;
            }
        }
        #endregion
        
        #region Fields
        private ResourceCell mResourceCell;
        
        private WindowsGroupCell mWindowsGroupCell;
        
        private PermissionsCell mPermissionsCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceCell : WpfCell
    {
        
        public ResourceCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton AddResourceButton
        {
            get
            {
                if ((this.mAddResourceButton == null))
                {
                    this.mAddResourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mAddResourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__AddResourceButton_AutoID";
                    this.mAddResourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddResourceButton;
            }
        }
        
        public WpfText AddResourceText
        {
            get
            {
                if ((this.mAddResourceText == null))
                {
                    this.mAddResourceText = new WpfText(this);
                    #region Search Criteria
                    this.mAddResourceText.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI__AddResourceTextBox_AutoID";
                    this.mAddResourceText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddResourceText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mAddResourceButton;
        
        private WpfText mAddResourceText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WindowsGroupCell : WpfCell
    {
        
        public WindowsGroupCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton AddWindowsGroupsButton
        {
            get
            {
                if ((this.mAddWindowsGroupsButton == null))
                {
                    this.mAddWindowsGroupsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mAddWindowsGroupsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__AddWindowsGroupsButton_AutoID";
                    this.mAddWindowsGroupsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddWindowsGroupsButton;
            }
        }
        
        public WpfEdit AddWindowsGroupsEdit
        {
            get
            {
                if ((this.mAddWindowsGroupsEdit == null))
                {
                    this.mAddWindowsGroupsEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mAddWindowsGroupsEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__AddWindowsGroupsTextBox_AutoID";
                    this.mAddWindowsGroupsEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddWindowsGroupsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mAddWindowsGroupsButton;
        
        private WpfEdit mAddWindowsGroupsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PermissionsCell : WpfCell
    {
        
        public PermissionsCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ViewCheckBox
        {
            get
            {
                if ((this.mViewCheckBox == null))
                {
                    this.mViewCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mViewCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__ViewPermissionCheckBox_AutoID";
                    this.mViewCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewCheckBox;
            }
        }
        
        public WpfCheckBox ExecuteCheckBox
        {
            get
            {
                if ((this.mExecuteCheckBox == null))
                {
                    this.mExecuteCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mExecuteCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__ExecutePermissionCheckBox_AutoID";
                    this.mExecuteCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExecuteCheckBox;
            }
        }
        
        public WpfCheckBox ContributeCheckBox
        {
            get
            {
                if ((this.mContributeCheckBox == null))
                {
                    this.mContributeCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mContributeCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__ContributePermissionCheckBox_AutoID";
                    this.mContributeCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mContributeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mViewCheckBox;
        
        private WpfCheckBox mExecuteCheckBox;
        
        private WpfCheckBox mContributeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowTab : WpfTabPage
    {
        
        public WorkflowTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.Workflow.WorkflowDesignerViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        
        public WorkSurfaceContext4 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext4(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfText Workflow1ciremoteText
        {
            get
            {
                if ((this.mWorkflow1ciremoteText == null))
                {
                    this.mWorkflow1ciremoteText = new WpfText(this);
                    #region Search Criteria
                    this.mWorkflow1ciremoteText.SearchProperties[WpfText.PropertyNames.Name] = "workflow1 - ci-remote";
                    this.mWorkflow1ciremoteText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWorkflow1ciremoteText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCloseButton;
        
        private WorkSurfaceContext4 mWorkSurfaceContext;
        
        private WpfText mWorkflow1ciremoteText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext4 : WpfCustom
    {
        
        public WorkSurfaceContext4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowDesignerView WorkflowDesignerView
        {
            get
            {
                if ((this.mWorkflowDesignerView == null))
                {
                    this.mWorkflowDesignerView = new WorkflowDesignerView(this);
                }
                return this.mWorkflowDesignerView;
            }
        }
        
        public TopScrollViewerPane TopScrollViewerPane
        {
            get
            {
                if ((this.mTopScrollViewerPane == null))
                {
                    this.mTopScrollViewerPane = new TopScrollViewerPane(this);
                }
                return this.mTopScrollViewerPane;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowDesignerView mWorkflowDesignerView;
        
        private TopScrollViewerPane mTopScrollViewerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowDesignerView : WpfCustom
    {
        
        public WorkflowDesignerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DesignerView DesignerView
        {
            get
            {
                if ((this.mDesignerView == null))
                {
                    this.mDesignerView = new DesignerView(this);
                }
                return this.mDesignerView;
            }
        }
        #endregion
        
        #region Fields
        private DesignerView mDesignerView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DesignerView : WpfCustom
    {
        
        public DesignerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfToggleButton ExpandAllToggleButton
        {
            get
            {
                if ((this.mExpandAllToggleButton == null))
                {
                    this.mExpandAllToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mExpandAllToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "expandAllButton";
                    this.mExpandAllToggleButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mExpandAllToggleButton;
            }
        }
        
        public WpfToggleButton CollapseAllToggleButton
        {
            get
            {
                if ((this.mCollapseAllToggleButton == null))
                {
                    this.mCollapseAllToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mCollapseAllToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "collapseAllButton";
                    this.mCollapseAllToggleButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCollapseAllToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane mScrollViewerPane;
        
        private WpfToggleButton mExpandAllToggleButton;
        
        private WpfToggleButton mCollapseAllToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane : WpfPane
    {
        
        public ScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "scrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ActivityTypeDesigner ActivityTypeDesigner
        {
            get
            {
                if ((this.mActivityTypeDesigner == null))
                {
                    this.mActivityTypeDesigner = new ActivityTypeDesigner(this);
                }
                return this.mActivityTypeDesigner;
            }
        }
        #endregion
        
        #region Fields
        private ActivityTypeDesigner mActivityTypeDesigner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ActivityTypeDesigner : WpfCustom
    {
        
        public ActivityTypeDesigner(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ActivityTypeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActivityTypeDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowItemPresenter WorkflowItemPresenter
        {
            get
            {
                if ((this.mWorkflowItemPresenter == null))
                {
                    this.mWorkflowItemPresenter = new WorkflowItemPresenter(this);
                }
                return this.mWorkflowItemPresenter;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowItemPresenter mWorkflowItemPresenter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowItemPresenter : WpfCustom
    {
        
        public WorkflowItemPresenter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Flowchart Flowchart
        {
            get
            {
                if ((this.mFlowchart == null))
                {
                    this.mFlowchart = new Flowchart(this);
                }
                return this.mFlowchart;
            }
        }
        #endregion
        
        #region Fields
        private Flowchart mFlowchart;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Flowchart : WpfCustom
    {
        
        public Flowchart(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AssignObject AssignObject
        {
            get
            {
                if ((this.mAssignObject == null))
                {
                    this.mAssignObject = new AssignObject(this);
                }
                return this.mAssignObject;
            }
        }
        
        public WebRequest1 WebRequest
        {
            get
            {
                if ((this.mWebRequest == null))
                {
                    this.mWebRequest = new WebRequest1(this);
                }
                return this.mWebRequest;
            }
        }
        
        public DotNetDll1 DotNetDll
        {
            get
            {
                if ((this.mDotNetDll == null))
                {
                    this.mDotNetDll = new DotNetDll1(this);
                }
                return this.mDotNetDll;
            }
        }
        
        public DataMerge1 DataMerge
        {
            get
            {
                if ((this.mDataMerge == null))
                {
                    this.mDataMerge = new DataMerge1(this);
                }
                return this.mDataMerge;
            }
        }
        
        public DataSplit1 DataSplit
        {
            get
            {
                if ((this.mDataSplit == null))
                {
                    this.mDataSplit = new DataSplit1(this);
                }
                return this.mDataSplit;
            }
        }
        
        public WpfCustom MySqlDatabase
        {
            get
            {
                if ((this.mMySqlDatabase == null))
                {
                    this.mMySqlDatabase = new WpfCustom(this);
                    #region Search Criteria
                    this.mMySqlDatabase.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MySqlDatabaseDesigner";
                    this.mMySqlDatabase.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MySql Database(MySqlDatabaseDesigner)";
                    this.mMySqlDatabase.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMySqlDatabase;
            }
        }
        
        public SqlServerDatabase SqlServerDatabase
        {
            get
            {
                if ((this.mSqlServerDatabase == null))
                {
                    this.mSqlServerDatabase = new SqlServerDatabase(this);
                }
                return this.mSqlServerDatabase;
            }
        }
        
        public BaseConvert1 BaseConvert
        {
            get
            {
                if ((this.mBaseConvert == null))
                {
                    this.mBaseConvert = new BaseConvert1(this);
                }
                return this.mBaseConvert;
            }
        }
        
        public CaseConvert1 CaseConvert
        {
            get
            {
                if ((this.mCaseConvert == null))
                {
                    this.mCaseConvert = new CaseConvert1(this);
                }
                return this.mCaseConvert;
            }
        }
        
        public WpfCustom SubWorkflow
        {
            get
            {
                if ((this.mSubWorkflow == null))
                {
                    this.mSubWorkflow = new WpfCustom(this);
                    #region Search Criteria
                    this.mSubWorkflow.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mSubWorkflow.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "workflow", PropertyExpressionOperator.Contains));
                    this.mSubWorkflow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSubWorkflow;
            }
        }
        
        public WpfCustom PluginConnector
        {
            get
            {
                if ((this.mPluginConnector == null))
                {
                    this.mPluginConnector = new WpfCustom(this);
                    #region Search Criteria
                    this.mPluginConnector.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mPluginConnector.SearchProperties[WpfControl.PropertyNames.AutomationId] = "wolf-829(ServiceDesigner)";
                    this.mPluginConnector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPluginConnector;
            }
        }
        
        public WpfCustom WebConnector
        {
            get
            {
                if ((this.mWebConnector == null))
                {
                    this.mWebConnector = new WpfCustom(this);
                    #region Search Criteria
                    this.mWebConnector.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mWebConnector.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Alert(ServiceDesigner)";
                    this.mWebConnector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebConnector;
            }
        }
        
        public WpfCustom DatabaseConnector
        {
            get
            {
                if ((this.mDatabaseConnector == null))
                {
                    this.mDatabaseConnector = new WpfCustom(this);
                    #region Search Criteria
                    this.mDatabaseConnector.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mDatabaseConnector.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MyDataCon(ServiceDesigner)";
                    this.mDatabaseConnector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDatabaseConnector;
            }
        }
        
        public ForEach1 ForEach
        {
            get
            {
                if ((this.mForEach == null))
                {
                    this.mForEach = new ForEach1(this);
                }
                return this.mForEach;
            }
        }
        
        public WpfCustom Length
        {
            get
            {
                if ((this.mLength == null))
                {
                    this.mLength = new WpfCustom(this);
                    #region Search Criteria
                    this.mLength.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RecordsLengthDesigner";
                    this.mLength.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Length(RecordsLengthDesigner)";
                    this.mLength.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLength;
            }
        }
        
        public WpfCustom FindRecordsIndex
        {
            get
            {
                if ((this.mFindRecordsIndex == null))
                {
                    this.mFindRecordsIndex = new WpfCustom(this);
                    #region Search Criteria
                    this.mFindRecordsIndex.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FindRecordsMultipleCriteriaDesigner";
                    this.mFindRecordsIndex.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Find Record Index (1)(FindRecordsMultipleCriteriaDesigner)";
                    this.mFindRecordsIndex.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFindRecordsIndex;
            }
        }
        
        public WpfCustom DeleteRecord
        {
            get
            {
                if ((this.mDeleteRecord == null))
                {
                    this.mDeleteRecord = new WpfCustom(this);
                    #region Search Criteria
                    this.mDeleteRecord.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DeleteRecordsDesigner";
                    this.mDeleteRecord.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Delete Record(DeleteRecordsDesigner)";
                    this.mDeleteRecord.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteRecord;
            }
        }
        
        public WpfCustom SortRecords
        {
            get
            {
                if ((this.mSortRecords == null))
                {
                    this.mSortRecords = new WpfCustom(this);
                    #region Search Criteria
                    this.mSortRecords.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SortRecordsDesigner";
                    this.mSortRecords.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sort Records(SortRecordsDesigner)";
                    this.mSortRecords.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSortRecords;
            }
        }
        
        public WpfCustom CountRecordset
        {
            get
            {
                if ((this.mCountRecordset == null))
                {
                    this.mCountRecordset = new WpfCustom(this);
                    #region Search Criteria
                    this.mCountRecordset.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CountRecordsDesigner";
                    this.mCountRecordset.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Count Records(CountRecordsDesigner)";
                    this.mCountRecordset.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCountRecordset;
            }
        }
        
        public SqlBulkInsert1 SqlBulkInsert
        {
            get
            {
                if ((this.mSqlBulkInsert == null))
                {
                    this.mSqlBulkInsert = new SqlBulkInsert1(this);
                }
                return this.mSqlBulkInsert;
            }
        }
        
        public WpfCustom Unique
        {
            get
            {
                if ((this.mUnique == null))
                {
                    this.mUnique = new WpfCustom(this);
                    #region Search Criteria
                    this.mUnique.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UniqueRecordsDesigner";
                    this.mUnique.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Unique Records(UniqueRecordsDesigner)";
                    this.mUnique.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnique;
            }
        }
        
        public CreateJson1 CreateJson
        {
            get
            {
                if ((this.mCreateJson == null))
                {
                    this.mCreateJson = new CreateJson1(this);
                }
                return this.mCreateJson;
            }
        }
        
        public WpfCustom ExecuteCommandLine
        {
            get
            {
                if ((this.mExecuteCommandLine == null))
                {
                    this.mExecuteCommandLine = new WpfCustom(this);
                    #region Search Criteria
                    this.mExecuteCommandLine.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CommandLineDesigner";
                    this.mExecuteCommandLine.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Execute Command Line(CommandLineDesigner)";
                    this.mExecuteCommandLine.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExecuteCommandLine;
            }
        }
        
        public WpfCustom Scripting
        {
            get
            {
                if ((this.mScripting == null))
                {
                    this.mScripting = new WpfCustom(this);
                    #region Search Criteria
                    this.mScripting.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ScriptDesigner";
                    this.mScripting.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Script(ScriptDesigner)";
                    this.mScripting.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mScripting;
            }
        }
        
        public WpfCustom SharepointCreate
        {
            get
            {
                if ((this.mSharepointCreate == null))
                {
                    this.mSharepointCreate = new WpfCustom(this);
                    #region Search Criteria
                    this.mSharepointCreate.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListCreateDesigner";
                    this.mSharepointCreate.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Create List Item(SharepointListCreateDesigner)";
                    this.mSharepointCreate.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointCreate;
            }
        }
        
        public WpfCustom SharepointDelete
        {
            get
            {
                if ((this.mSharepointDelete == null))
                {
                    this.mSharepointDelete = new WpfCustom(this);
                    #region Search Criteria
                    this.mSharepointDelete.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListDeleteDesigner";
                    this.mSharepointDelete.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Delete List Item (1)(SharepointListDeleteDesigner)";
                    this.mSharepointDelete.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointDelete;
            }
        }
        
        public WpfCustom SharepointRead
        {
            get
            {
                if ((this.mSharepointRead == null))
                {
                    this.mSharepointRead = new WpfCustom(this);
                    #region Search Criteria
                    this.mSharepointRead.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListReadDesigner";
                    this.mSharepointRead.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Read List Item (1)(SharepointListReadDesigner)";
                    this.mSharepointRead.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointRead;
            }
        }
        
        public WpfCustom SharepointUpdate
        {
            get
            {
                if ((this.mSharepointUpdate == null))
                {
                    this.mSharepointUpdate = new WpfCustom(this);
                    #region Search Criteria
                    this.mSharepointUpdate.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListUpdateDesigner";
                    this.mSharepointUpdate.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Update List Item (1)(SharepointListUpdateDesigner)";
                    this.mSharepointUpdate.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointUpdate;
            }
        }
        
        public Calculate1 Calculate
        {
            get
            {
                if ((this.mCalculate == null))
                {
                    this.mCalculate = new Calculate1(this);
                }
                return this.mCalculate;
            }
        }
        
        public WpfCustom DateTime
        {
            get
            {
                if ((this.mDateTime == null))
                {
                    this.mDateTime = new WpfCustom(this);
                    #region Search Criteria
                    this.mDateTime.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DateTimeDesigner";
                    this.mDateTime.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Date and Time(DateTimeDesigner)";
                    this.mDateTime.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDateTime;
            }
        }
        
        public WpfCustom DateTimeDifference
        {
            get
            {
                if ((this.mDateTimeDifference == null))
                {
                    this.mDateTimeDifference = new WpfCustom(this);
                    #region Search Criteria
                    this.mDateTimeDifference.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DateTimeDifferenceDesigner";
                    this.mDateTimeDifference.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Date and Time Difference(DateTimeDifferenceDesigner)";
                    this.mDateTimeDifference.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDateTimeDifference;
            }
        }
        
        public GatherSystemInfo GatherSystemInfo
        {
            get
            {
                if ((this.mGatherSystemInfo == null))
                {
                    this.mGatherSystemInfo = new GatherSystemInfo(this);
                }
                return this.mGatherSystemInfo;
            }
        }
        
        public WpfCustom FormatNumber
        {
            get
            {
                if ((this.mFormatNumber == null))
                {
                    this.mFormatNumber = new WpfCustom(this);
                    #region Search Criteria
                    this.mFormatNumber.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FormatNumberDesigner";
                    this.mFormatNumber.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Format Number(FormatNumberDesigner)";
                    this.mFormatNumber.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFormatNumber;
            }
        }
        
        public WpfCustom Random
        {
            get
            {
                if ((this.mRandom == null))
                {
                    this.mRandom = new WpfCustom(this);
                    #region Search Criteria
                    this.mRandom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RandomDesigner";
                    this.mRandom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Random(RandomDesigner)";
                    this.mRandom.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRandom;
            }
        }
        
        public SMTPEmail SMTPEmail
        {
            get
            {
                if ((this.mSMTPEmail == null))
                {
                    this.mSMTPEmail = new SMTPEmail(this);
                }
                return this.mSMTPEmail;
            }
        }
        
        public ExchangeEmail ExchangeEmail
        {
            get
            {
                if ((this.mExchangeEmail == null))
                {
                    this.mExchangeEmail = new ExchangeEmail(this);
                }
                return this.mExchangeEmail;
            }
        }
        
        public WpfCustom Comment
        {
            get
            {
                if ((this.mComment == null))
                {
                    this.mComment = new WpfCustom(this);
                    #region Search Criteria
                    this.mComment.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CommentDesigner";
                    this.mComment.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Comment(CommentDesigner)";
                    this.mComment.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComment;
            }
        }
        
        public XPath1 XPath
        {
            get
            {
                if ((this.mXPath == null))
                {
                    this.mXPath = new XPath1(this);
                }
                return this.mXPath;
            }
        }
        
        public WpfCustom DropBox_DOWNLOAD
        {
            get
            {
                if ((this.mDropBox_DOWNLOAD == null))
                {
                    this.mDropBox_DOWNLOAD = new WpfCustom(this);
                    #region Search Criteria
                    this.mDropBox_DOWNLOAD.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DropBoxDownloadDesigner";
                    this.mDropBox_DOWNLOAD.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DOWNLOAD from Dropbox(DropBoxDownloadDesigner)";
                    this.mDropBox_DOWNLOAD.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDropBox_DOWNLOAD;
            }
        }
        
        public WpfCustom DropBox_UPLOAD
        {
            get
            {
                if ((this.mDropBox_UPLOAD == null))
                {
                    this.mDropBox_UPLOAD = new WpfCustom(this);
                    #region Search Criteria
                    this.mDropBox_UPLOAD.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DropBoxUploadDesigner";
                    this.mDropBox_UPLOAD.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Upload to Dropbox(DropBoxUploadDesigner)";
                    this.mDropBox_UPLOAD.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDropBox_UPLOAD;
            }
        }
        
        public WpfCustom PathCreate
        {
            get
            {
                if ((this.mPathCreate == null))
                {
                    this.mPathCreate = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathCreate.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CreateDesigner";
                    this.mPathCreate.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Create(CreateDesigner)";
                    this.mPathCreate.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPathCreate;
            }
        }
        
        public WpfCustom PathCopy
        {
            get
            {
                if ((this.mPathCopy == null))
                {
                    this.mPathCopy = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathCopy.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CopyDesigner";
                    this.mPathCopy.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Copy(CopyDesigner)";
                    this.mPathCopy.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPathCopy;
            }
        }
        
        public WpfCustom PathDelete
        {
            get
            {
                if ((this.mPathDelete == null))
                {
                    this.mPathDelete = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathDelete.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DeleteDesigner";
                    this.mPathDelete.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Delete(DeleteDesigner)";
                    this.mPathDelete.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPathDelete;
            }
        }
        
        public WpfCustom PathMove
        {
            get
            {
                if ((this.mPathMove == null))
                {
                    this.mPathMove = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathMove.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MoveDesigner";
                    this.mPathMove.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Move(MoveDesigner)";
                    this.mPathMove.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPathMove;
            }
        }
        
        public WpfCustom FolderRead
        {
            get
            {
                if ((this.mFolderRead == null))
                {
                    this.mFolderRead = new WpfCustom(this);
                    #region Search Criteria
                    this.mFolderRead.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ReadFolderDesigner";
                    this.mFolderRead.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Read Folder(ReadFolderDesigner)";
                    this.mFolderRead.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFolderRead;
            }
        }
        
        public WpfCustom FileRead
        {
            get
            {
                if ((this.mFileRead == null))
                {
                    this.mFileRead = new WpfCustom(this);
                    #region Search Criteria
                    this.mFileRead.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ReadFileDesigner";
                    this.mFileRead.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Read File(ReadFileDesigner)";
                    this.mFileRead.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFileRead;
            }
        }
        
        public WpfCustom FileWrite
        {
            get
            {
                if ((this.mFileWrite == null))
                {
                    this.mFileWrite = new WpfCustom(this);
                    #region Search Criteria
                    this.mFileWrite.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WriteFileDesigner";
                    this.mFileWrite.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Write File(WriteFileDesigner)";
                    this.mFileWrite.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFileWrite;
            }
        }
        
        public WpfCustom PathRename
        {
            get
            {
                if ((this.mPathRename == null))
                {
                    this.mPathRename = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathRename.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RenameDesigner";
                    this.mPathRename.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Rename(RenameDesigner)";
                    this.mPathRename.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPathRename;
            }
        }
        
        public WpfCustom UnZip
        {
            get
            {
                if ((this.mUnZip == null))
                {
                    this.mUnZip = new WpfCustom(this);
                    #region Search Criteria
                    this.mUnZip.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UnzipDesigner";
                    this.mUnZip.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Unzip(UnzipDesigner)";
                    this.mUnZip.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnZip;
            }
        }
        
        public WpfCustom Zip
        {
            get
            {
                if ((this.mZip == null))
                {
                    this.mZip = new WpfCustom(this);
                    #region Search Criteria
                    this.mZip.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ZipDesigner";
                    this.mZip.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Zip(ZipDesigner)";
                    this.mZip.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mZip;
            }
        }
        
        public WpfCustom FindIndex
        {
            get
            {
                if ((this.mFindIndex == null))
                {
                    this.mFindIndex = new WpfCustom(this);
                    #region Search Criteria
                    this.mFindIndex.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FindIndexDesigner";
                    this.mFindIndex.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Find Index(FindIndexDesigner)";
                    this.mFindIndex.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFindIndex;
            }
        }
        
        public WpfCustom Replace
        {
            get
            {
                if ((this.mReplace == null))
                {
                    this.mReplace = new WpfCustom(this);
                    #region Search Criteria
                    this.mReplace.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ReplaceDesigner";
                    this.mReplace.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Replace(ReplaceDesigner)";
                    this.mReplace.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReplace;
            }
        }
        
        public WpfCustom Switch
        {
            get
            {
                if ((this.mSwitch == null))
                {
                    this.mSwitch = new WpfCustom(this);
                    #region Search Criteria
                    this.mSwitch.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowSwitchDesigner";
                    this.mSwitch.SearchProperties[WpfControl.PropertyNames.AutomationId] = "FlowSwitchDesigner";
                    this.mSwitch.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSwitch;
            }
        }
        
        public WpfCustom Sequence
        {
            get
            {
                if ((this.mSequence == null))
                {
                    this.mSequence = new WpfCustom(this);
                    #region Search Criteria
                    this.mSequence.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SequenceDesigner";
                    this.mSequence.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sequence(SequenceDesigner)";
                    this.mSequence.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSequence;
            }
        }
        
        public WpfCustom Decision
        {
            get
            {
                if ((this.mDecision == null))
                {
                    this.mDecision = new WpfCustom(this);
                    #region Search Criteria
                    this.mDecision.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowDecisionDesigner";
                    this.mDecision.SearchProperties[WpfControl.PropertyNames.AutomationId] = "FlowDecisionDesigner";
                    this.mDecision.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDecision;
            }
        }
        
        public MultiAssign1 MultiAssign
        {
            get
            {
                if ((this.mMultiAssign == null))
                {
                    this.mMultiAssign = new MultiAssign1(this);
                }
                return this.mMultiAssign;
            }
        }
        
        public WpfCustom StartNode
        {
            get
            {
                if ((this.mStartNode == null))
                {
                    this.mStartNode = new WpfCustom(this);
                    #region Search Criteria
                    this.mStartNode.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.StartSymbol";
                    this.mStartNode.SearchProperties[WpfControl.PropertyNames.AutomationId] = "StartSymbol";
                    this.mStartNode.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStartNode;
            }
        }
        
        public WebPost WebPost
        {
            get
            {
                if ((this.mWebPost == null))
                {
                    this.mWebPost = new WebPost(this);
                }
                return this.mWebPost;
            }
        }
        
        public WpfCustom Connector1
        {
            get
            {
                if ((this.mConnector1 == null))
                {
                    this.mConnector1 = new WpfCustom(this);
                    #region Search Criteria
                    this.mConnector1.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectorWithoutStartDot";
                    this.mConnector1.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
                    this.mConnector1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnector1;
            }
        }
        
        public WpfCustom Connector2
        {
            get
            {
                if ((this.mConnector2 == null))
                {
                    this.mConnector2 = new WpfCustom(this);
                    #region Search Criteria
                    this.mConnector2.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectorWithoutStartDot";
                    this.mConnector2.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
                    this.mConnector2.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnector2;
            }
        }
        
        public WpfCustom Connector3
        {
            get
            {
                if ((this.mConnector3 == null))
                {
                    this.mConnector3 = new WpfCustom(this);
                    #region Search Criteria
                    this.mConnector3.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectorWithoutStartDot";
                    this.mConnector3.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
                    this.mConnector3.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnector3;
            }
        }
        
        public Error1 Error1
        {
            get
            {
                if ((this.mError1 == null))
                {
                    this.mError1 = new Error1(this);
                }
                return this.mError1;
            }
        }
        
        public WebGet WebGet
        {
            get
            {
                if ((this.mWebGet == null))
                {
                    this.mWebGet = new WebGet(this);
                }
                return this.mWebGet;
            }
        }
        #endregion
        
        #region Fields
        private AssignObject mAssignObject;
        
        private WebRequest1 mWebRequest;
        
        private DotNetDll1 mDotNetDll;
        
        private DataMerge1 mDataMerge;
        
        private DataSplit1 mDataSplit;
        
        private WpfCustom mMySqlDatabase;
        
        private SqlServerDatabase mSqlServerDatabase;
        
        private BaseConvert1 mBaseConvert;
        
        private CaseConvert1 mCaseConvert;
        
        private WpfCustom mSubWorkflow;
        
        private WpfCustom mPluginConnector;
        
        private WpfCustom mWebConnector;
        
        private WpfCustom mDatabaseConnector;
        
        private ForEach1 mForEach;
        
        private WpfCustom mLength;
        
        private WpfCustom mFindRecordsIndex;
        
        private WpfCustom mDeleteRecord;
        
        private WpfCustom mSortRecords;
        
        private WpfCustom mCountRecordset;
        
        private SqlBulkInsert1 mSqlBulkInsert;
        
        private WpfCustom mUnique;
        
        private CreateJson1 mCreateJson;
        
        private WpfCustom mExecuteCommandLine;
        
        private WpfCustom mScripting;
        
        private WpfCustom mSharepointCreate;
        
        private WpfCustom mSharepointDelete;
        
        private WpfCustom mSharepointRead;
        
        private WpfCustom mSharepointUpdate;
        
        private Calculate1 mCalculate;
        
        private WpfCustom mDateTime;
        
        private WpfCustom mDateTimeDifference;
        
        private GatherSystemInfo mGatherSystemInfo;
        
        private WpfCustom mFormatNumber;
        
        private WpfCustom mRandom;
        
        private SMTPEmail mSMTPEmail;
        
        private ExchangeEmail mExchangeEmail;
        
        private WpfCustom mComment;
        
        private XPath1 mXPath;
        
        private WpfCustom mDropBox_DOWNLOAD;
        
        private WpfCustom mDropBox_UPLOAD;
        
        private WpfCustom mPathCreate;
        
        private WpfCustom mPathCopy;
        
        private WpfCustom mPathDelete;
        
        private WpfCustom mPathMove;
        
        private WpfCustom mFolderRead;
        
        private WpfCustom mFileRead;
        
        private WpfCustom mFileWrite;
        
        private WpfCustom mPathRename;
        
        private WpfCustom mUnZip;
        
        private WpfCustom mZip;
        
        private WpfCustom mFindIndex;
        
        private WpfCustom mReplace;
        
        private WpfCustom mSwitch;
        
        private WpfCustom mSequence;
        
        private WpfCustom mDecision;
        
        private MultiAssign1 mMultiAssign;
        
        private WpfCustom mStartNode;
        
        private WebPost mWebPost;
        
        private WpfCustom mConnector1;
        
        private WpfCustom mConnector2;
        
        private WpfCustom mConnector3;
        
        private Error1 mError1;
        
        private WebGet mWebGet;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssignObject : WpfCustom
    {
        
        public AssignObject(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignObjectDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Assign Object (1)(MultiAssignObjectDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInput
        {
            get
            {
                if ((this.mOpenQuickVariableInput == null))
                {
                    this.mOpenQuickVariableInput = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInput.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInput.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInput;
            }
        }
        
        public WpfEdit DisplayNameTextbox
        {
            get
            {
                if ((this.mDisplayNameTextbox == null))
                {
                    this.mDisplayNameTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mDisplayNameTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DisplayNameBox";
                    this.mDisplayNameTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisplayNameTextbox;
            }
        }
        
        public SmallView SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView(this);
                }
                return this.mSmallView;
            }
        }
        
        public LargeView LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInput;
        
        private WpfEdit mDisplayNameTextbox;
        
        private SmallView mSmallView;
        
        private LargeView mLargeView;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView : WpfCustom
    {
        
        public SmallView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid(this);
                }
                return this.mDataGrid;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid mDataGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid : WpfTable
    {
        
        public DataGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row11 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row11(this);
                }
                return this.mRow1;
            }
        }
        
        public Row2 Row2
        {
            get
            {
                if ((this.mRow2 == null))
                {
                    this.mRow2 = new Row2(this);
                }
                return this.mRow2;
            }
        }
        #endregion
        
        #region Fields
        private Row11 mRow1;
        
        private Row2 mRow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row11 : WpfRow
    {
        
        public Row11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_0_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell mVariableCell;
        
        private ValueCell mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell : WpfCell
    {
        
        public VariableCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableTextbox VariableTextbox
        {
            get
            {
                if ((this.mVariableTextbox == null))
                {
                    this.mVariableTextbox = new VariableTextbox(this);
                }
                return this.mVariableTextbox;
            }
        }
        #endregion
        
        #region Fields
        private VariableTextbox mVariableTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableTextbox : WpfEdit
    {
        
        public VariableTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText VariableTextboxFloatingText
        {
            get
            {
                if ((this.mVariableTextboxFloatingText == null))
                {
                    this.mVariableTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mVariableTextboxFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "[[Variable1]]";
                    this.mVariableTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextboxFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mVariableTextboxFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell : WpfCell
    {
        
        public ValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ValueTextbox
        {
            get
            {
                if ((this.mValueTextbox == null))
                {
                    this.mValueTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mValueTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row1_FieldValue_AutoID";
                    this.mValueTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mValueTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row2 : WpfRow
    {
        
        public Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_1_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell1 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell1(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell1 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell1(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell1 mVariableCell;
        
        private ValueCell1 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell1 : WpfCell
    {
        
        public VariableCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit VariableTextbox
        {
            get
            {
                if ((this.mVariableTextbox == null))
                {
                    this.mVariableTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mVariableTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
                    this.mVariableTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mVariableTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell1 : WpfCell
    {
        
        public ValueCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ValueTextbox
        {
            get
            {
                if ((this.mValueTextbox == null))
                {
                    this.mValueTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mValueTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row2_FieldValue_AutoID";
                    this.mValueTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mValueTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView : WpfCustom
    {
        
        public LargeView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid1 DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid1(this);
                }
                return this.mDataGrid;
            }
        }
        
        public WpfText AddRowsMessage
        {
            get
            {
                if ((this.mAddRowsMessage == null))
                {
                    this.mAddRowsMessage = new WpfText(this);
                    #region Search Criteria
                    this.mAddRowsMessage.SearchProperties[WpfText.PropertyNames.Name] = "Type in the empty rows to add new rows.";
                    this.mAddRowsMessage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddRowsMessage;
            }
        }
        
        public WpfText InsertDeleteRowsMessage
        {
            get
            {
                if ((this.mInsertDeleteRowsMessage == null))
                {
                    this.mInsertDeleteRowsMessage = new WpfText(this);
                    #region Search Criteria
                    this.mInsertDeleteRowsMessage.SearchProperties[WpfText.PropertyNames.Name] = "Right click to insert or delete rows.";
                    this.mInsertDeleteRowsMessage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInsertDeleteRowsMessage;
            }
        }
        
        public OnError OnError
        {
            get
            {
                if ((this.mOnError == null))
                {
                    this.mOnError = new OnError(this);
                }
                return this.mOnError;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid1 mDataGrid;
        
        private WpfText mAddRowsMessage;
        
        private WpfText mInsertDeleteRowsMessage;
        
        private OnError mOnError;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid1 : WpfTable
    {
        
        public DataGrid1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row12 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row12(this);
                }
                return this.mRow1;
            }
        }
        
        public Row21 Row2
        {
            get
            {
                if ((this.mRow2 == null))
                {
                    this.mRow2 = new Row21(this);
                }
                return this.mRow2;
            }
        }
        #endregion
        
        #region Fields
        private Row12 mRow1;
        
        private Row21 mRow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row12 : WpfRow
    {
        
        public Row12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_0_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell2 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell2(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell2 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell2(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell2 mVariableCell;
        
        private ValueCell2 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell2 : WpfCell
    {
        
        public VariableCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit VariableTextbox
        {
            get
            {
                if ((this.mVariableTextbox == null))
                {
                    this.mVariableTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mVariableTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row1_FieldName_AutoID";
                    this.mVariableTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mVariableTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell2 : WpfCell
    {
        
        public ValueCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ValueTextbox
        {
            get
            {
                if ((this.mValueTextbox == null))
                {
                    this.mValueTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mValueTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row1_FieldValue_AutoID";
                    this.mValueTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mValueTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row21 : WpfRow
    {
        
        public Row21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_1_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell3 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell3(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell3 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell3(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell3 mVariableCell;
        
        private ValueCell3 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell3 : WpfCell
    {
        
        public VariableCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit VariableTextbox
        {
            get
            {
                if ((this.mVariableTextbox == null))
                {
                    this.mVariableTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mVariableTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row2_FieldName_AutoID";
                    this.mVariableTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mVariableTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell3 : WpfCell
    {
        
        public ValueCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ValueTextbox
        {
            get
            {
                if ((this.mValueTextbox == null))
                {
                    this.mValueTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mValueTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row2_FieldValue_AutoID";
                    this.mValueTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mValueTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnError : WpfCustom
    {
        
        public OnError(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup : WpfGroup
    {
        
        public OnErrorGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ErrorVariable
        {
            get
            {
                if ((this.mErrorVariable == null))
                {
                    this.mErrorVariable = new WpfEdit(this);
                    #region Search Criteria
                    this.mErrorVariable.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Variable_AutoID";
                    this.mErrorVariable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mErrorVariable;
            }
        }
        
        public WpfEdit ErrorWebservice
        {
            get
            {
                if ((this.mErrorWebservice == null))
                {
                    this.mErrorWebservice = new WpfEdit(this);
                    #region Search Criteria
                    this.mErrorWebservice.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
                    this.mErrorWebservice.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mErrorWebservice;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mErrorVariable;
        
        private WpfEdit mErrorWebservice;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebRequest1 : WpfCustom
    {
        
        public WebRequest1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.GetWebRequestWithTimeOutDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Web Request(GetWebRequestWithTimeOutDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new WpfCustom(this);
                    #region Search Criteria
                    this.mLargeView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
                    this.mLargeView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
                    this.mLargeView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLargeView;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mLargeView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DotNetDll1 : WpfCustom
    {
        
        public DotNetDll1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DotNetDllDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DotNet DLL(DotNetDllDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeView1 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView1(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfCustom SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new WpfCustom(this);
                    #region Search Criteria
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
                    this.mSmallView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private LargeView1 mLargeView;
        
        private WpfButton mDoneButton;
        
        private WpfCustom mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView1 : WpfCustom
    {
        
        public LargeView1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SourcesComboBox SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new SourcesComboBox(this);
                }
                return this.mSourcesComboBox;
            }
        }
        
        public ActionsComboBox ActionsComboBox
        {
            get
            {
                if ((this.mActionsComboBox == null))
                {
                    this.mActionsComboBox = new ActionsComboBox(this);
                }
                return this.mActionsComboBox;
            }
        }
        
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public WpfTable InputsTable
        {
            get
            {
                if ((this.mInputsTable == null))
                {
                    this.mInputsTable = new WpfTable(this);
                    #region Search Criteria
                    this.mInputsTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
                    this.mInputsTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputsTable;
            }
        }
        
        public ClassNameComboBox ClassNameComboBox
        {
            get
            {
                if ((this.mClassNameComboBox == null))
                {
                    this.mClassNameComboBox = new ClassNameComboBox(this);
                }
                return this.mClassNameComboBox;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "GenerateOutputsDoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfButton TestButton
        {
            get
            {
                if ((this.mTestButton == null))
                {
                    this.mTestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestActionButton";
                    this.mTestButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestButton;
            }
        }
        #endregion
        
        #region Fields
        private SourcesComboBox mSourcesComboBox;
        
        private ActionsComboBox mActionsComboBox;
        
        private WpfButton mGenerateOutputsButton;
        
        private WpfTable mInputsTable;
        
        private ClassNameComboBox mClassNameComboBox;
        
        private WpfButton mDoneButton;
        
        private WpfButton mTestButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourcesComboBox : WpfComboBox
    {
        
        public SourcesComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem ListItem1
        {
            get
            {
                if ((this.mListItem1 == null))
                {
                    this.mListItem1 = new WpfListItem(this);
                    #region Search Criteria
                    this.mListItem1.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.PluginSourceDefinition";
                    this.mListItem1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mListItem1;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mListItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ActionsComboBox : WpfComboBox
    {
        
        public ActionsComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "ActionsComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NextListItem
        {
            get
            {
                if ((this.mNextListItem == null))
                {
                    this.mNextListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mNextListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Next";
                    this.mNextListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNextListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNextListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ClassNameComboBox : WpfComboBox
    {
        
        public ClassNameComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "NamespaceComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem SystemRandomListItem
        {
            get
            {
                if ((this.mSystemRandomListItem == null))
                {
                    this.mSystemRandomListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mSystemRandomListItem.SearchProperties.Add(new PropertyExpression(WpfListItem.PropertyNames.Name, "System.Random", PropertyExpressionOperator.Contains));
                    this.mSystemRandomListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSystemRandomListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mSystemRandomListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataMerge1 : WpfCustom
    {
        
        public DataMerge1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataMergeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Data Merge (1)(DataMergeDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        
        public WpfEdit DisplayName
        {
            get
            {
                if ((this.mDisplayName == null))
                {
                    this.mDisplayName = new WpfEdit(this);
                    #region Search Criteria
                    this.mDisplayName.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DisplayNameBox";
                    this.mDisplayName.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisplayName;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public SmallView1 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView1(this);
                }
                return this.mSmallView;
            }
        }
        
        public LargeView2 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView2(this);
                }
                return this.mLargeView;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        
        private WpfEdit mDisplayName;
        
        private WpfButton mDoneButton;
        
        private SmallView1 mSmallView;
        
        private LargeView2 mLargeView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView1 : WpfCustom
    {
        
        public SmallView1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UISmallDataGridTable UISmallDataGridTable
        {
            get
            {
                if ((this.mUISmallDataGridTable == null))
                {
                    this.mUISmallDataGridTable = new UISmallDataGridTable(this);
                }
                return this.mUISmallDataGridTable;
            }
        }
        
        public WpfEdit ResultTextbox
        {
            get
            {
                if ((this.mResultTextbox == null))
                {
                    this.mResultTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mResultTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
                    this.mResultTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResultTextbox;
            }
        }
        #endregion
        
        #region Fields
        private UISmallDataGridTable mUISmallDataGridTable;
        
        private WpfEdit mResultTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISmallDataGridTable : WpfTable
    {
        
        public UISmallDataGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row Row
        {
            get
            {
                if ((this.mRow == null))
                {
                    this.mRow = new Row(this);
                }
                return this.mRow;
            }
        }
        #endregion
        
        #region Fields
        private Row mRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row : WpfRow
    {
        
        public Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputCell InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell(this);
                }
                return this.mInputCell;
            }
        }
        
        public TypeCell TypeCell
        {
            get
            {
                if ((this.mTypeCell == null))
                {
                    this.mTypeCell = new TypeCell(this);
                }
                return this.mTypeCell;
            }
        }
        
        public IndexCell IndexCell
        {
            get
            {
                if ((this.mIndexCell == null))
                {
                    this.mIndexCell = new IndexCell(this);
                }
                return this.mIndexCell;
            }
        }
        #endregion
        
        #region Fields
        private InputCell mInputCell;
        
        private TypeCell mTypeCell;
        
        private IndexCell mIndexCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell : WpfCell
    {
        
        public InputCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row1InputTextbox Row1InputTextbox
        {
            get
            {
                if ((this.mRow1InputTextbox == null))
                {
                    this.mRow1InputTextbox = new Row1InputTextbox(this);
                }
                return this.mRow1InputTextbox;
            }
        }
        
        public WpfEdit Row2InputTextbox
        {
            get
            {
                if ((this.mRow2InputTextbox == null))
                {
                    this.mRow2InputTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRow2InputTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row2_InputVariable_AutoID";
                    this.mRow2InputTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRow2InputTextbox;
            }
        }
        #endregion
        
        #region Fields
        private Row1InputTextbox mRow1InputTextbox;
        
        private WpfEdit mRow2InputTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row1InputTextbox : WpfEdit
    {
        
        public Row1InputTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row1_InputVariable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText InputFloatingText
        {
            get
            {
                if ((this.mInputFloatingText == null))
                {
                    this.mInputFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mInputFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "[[Recordset().F1]]";
                    this.mInputFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mInputFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TypeCell : WpfCell
    {
        
        public TypeCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "2";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox Row1TypeCombobox
        {
            get
            {
                if ((this.mRow1TypeCombobox == null))
                {
                    this.mRow1TypeCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mRow1TypeCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_MergeType_AutoID";
                    this.mRow1TypeCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRow1TypeCombobox;
            }
        }
        
        public WpfComboBox Row2TypeCombobox
        {
            get
            {
                if ((this.mRow2TypeCombobox == null))
                {
                    this.mRow2TypeCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mRow2TypeCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_MergeType_AutoID";
                    this.mRow2TypeCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRow2TypeCombobox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mRow1TypeCombobox;
        
        private WpfComboBox mRow2TypeCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IndexCell : WpfCell
    {
        
        public IndexCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Row1IndexTextbox
        {
            get
            {
                if ((this.mRow1IndexTextbox == null))
                {
                    this.mRow1IndexTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRow1IndexTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__At_Row1_AutoID";
                    this.mRow1IndexTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRow1IndexTextbox;
            }
        }
        
        public WpfEdit Row2IndexTextbox
        {
            get
            {
                if ((this.mRow2IndexTextbox == null))
                {
                    this.mRow2IndexTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRow2IndexTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__At_Row2_AutoID";
                    this.mRow2IndexTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRow2IndexTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRow1IndexTextbox;
        
        private WpfEdit mRow2IndexTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView2 : WpfCustom
    {
        
        public LargeView2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DatGrid DatGrid
        {
            get
            {
                if ((this.mDatGrid == null))
                {
                    this.mDatGrid = new DatGrid(this);
                }
                return this.mDatGrid;
            }
        }
        
        public WpfEdit ResultTextbox
        {
            get
            {
                if ((this.mResultTextbox == null))
                {
                    this.mResultTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mResultTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
                    this.mResultTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResultTextbox;
            }
        }
        
        public OnErrorGroup1 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup1(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private DatGrid mDatGrid;
        
        private WpfEdit mResultTextbox;
        
        private OnErrorGroup1 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DatGrid : WpfTable
    {
        
        public DatGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row3 Row
        {
            get
            {
                if ((this.mRow == null))
                {
                    this.mRow = new Row3(this);
                }
                return this.mRow;
            }
        }
        #endregion
        
        #region Fields
        private Row3 mRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row3 : WpfRow
    {
        
        public Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputCell1 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell1(this);
                }
                return this.mInputCell;
            }
        }
        
        public WidthCell WidthCell
        {
            get
            {
                if ((this.mWidthCell == null))
                {
                    this.mWidthCell = new WidthCell(this);
                }
                return this.mWidthCell;
            }
        }
        
        public UsingCell UsingCell
        {
            get
            {
                if ((this.mUsingCell == null))
                {
                    this.mUsingCell = new UsingCell(this);
                }
                return this.mUsingCell;
            }
        }
        
        public PaddingCell PaddingCell
        {
            get
            {
                if ((this.mPaddingCell == null))
                {
                    this.mPaddingCell = new PaddingCell(this);
                }
                return this.mPaddingCell;
            }
        }
        
        public AlignCell AlignCell
        {
            get
            {
                if ((this.mAlignCell == null))
                {
                    this.mAlignCell = new AlignCell(this);
                }
                return this.mAlignCell;
            }
        }
        #endregion
        
        #region Fields
        private InputCell1 mInputCell;
        
        private WidthCell mWidthCell;
        
        private UsingCell mUsingCell;
        
        private PaddingCell mPaddingCell;
        
        private AlignCell mAlignCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell1 : WpfCell
    {
        
        public InputCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputTextbox InputTextbox
        {
            get
            {
                if ((this.mInputTextbox == null))
                {
                    this.mInputTextbox = new InputTextbox(this);
                }
                return this.mInputTextbox;
            }
        }
        #endregion
        
        #region Fields
        private InputTextbox mInputTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputTextbox : WpfEdit
    {
        
        public InputTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row1_InputVariable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText InputFloatingText
        {
            get
            {
                if ((this.mInputFloatingText == null))
                {
                    this.mInputFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mInputFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "[[Recordset().F1]]";
                    this.mInputFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mInputFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WidthCell : WpfCell
    {
        
        public WidthCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "With";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox WidthCombobox
        {
            get
            {
                if ((this.mWidthCombobox == null))
                {
                    this.mWidthCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mWidthCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_MergeType_AutoID";
                    this.mWidthCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWidthCombobox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mWidthCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UsingCell : WpfCell
    {
        
        public UsingCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Using";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit UsingTextbox
        {
            get
            {
                if ((this.mUsingTextbox == null))
                {
                    this.mUsingTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mUsingTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__At_Row1_AutoID";
                    this.mUsingTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUsingTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUsingTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PaddingCell : WpfCell
    {
        
        public PaddingCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Padding";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit PaddingTextbox
        {
            get
            {
                if ((this.mPaddingTextbox == null))
                {
                    this.mPaddingTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mPaddingTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Padding_Row1_AutoID";
                    this.mPaddingTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPaddingTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mPaddingTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AlignCell : WpfCell
    {
        
        public AlignCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Align";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox AlignCombobox
        {
            get
            {
                if ((this.mAlignCombobox == null))
                {
                    this.mAlignCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mAlignCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_Alignment_AutoID";
                    this.mAlignCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAlignCombobox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mAlignCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup1 : WpfGroup
    {
        
        public OnErrorGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit VariableTextbox
        {
            get
            {
                if ((this.mVariableTextbox == null))
                {
                    this.mVariableTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mVariableTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Variable_AutoID";
                    this.mVariableTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextbox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mVariableTextbox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataSplit1 : WpfCustom
    {
        
        public DataSplit1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataSplitDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Data Split (1)(DataSplitDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SqlServerDatabase : WpfCustom
    {
        
        public SqlServerDatabase(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SqlServerDatabaseDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "SQL Server Database", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeView3 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView3(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public UIItemMenu UIItemMenu
        {
            get
            {
                if ((this.mUIItemMenu == null))
                {
                    this.mUIItemMenu = new UIItemMenu(this);
                }
                return this.mUIItemMenu;
            }
        }
        
        public WpfCustom UIDsfSqlServerDatabaseCustom
        {
            get
            {
                if ((this.mUIDsfSqlServerDatabaseCustom == null))
                {
                    this.mUIDsfSqlServerDatabaseCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIDsfSqlServerDatabaseCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SqlServerDatabaseDesigner";
                    this.mUIDsfSqlServerDatabaseCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SQL Server Database(SqlServerDatabaseDesigner)";
                    this.mUIDsfSqlServerDatabaseCustom.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIDsfSqlServerDatabaseCustom;
            }
        }
        #endregion
        
        #region Fields
        private LargeView3 mLargeView;
        
        private WpfButton mDoneButton;
        
        private UIItemMenu mUIItemMenu;
        
        private WpfCustom mUIDsfSqlServerDatabaseCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView3 : WpfCustom
    {
        
        public LargeView3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ActionsCombobox1 ActionsCombobox
        {
            get
            {
                if ((this.mActionsCombobox == null))
                {
                    this.mActionsCombobox = new ActionsCombobox1(this);
                }
                return this.mActionsCombobox;
            }
        }
        
        public SourcesCombobox1 SourcesCombobox
        {
            get
            {
                if ((this.mSourcesCombobox == null))
                {
                    this.mSourcesCombobox = new SourcesCombobox1(this);
                }
                return this.mSourcesCombobox;
            }
        }
        
        public InputsTable InputsTable
        {
            get
            {
                if ((this.mInputsTable == null))
                {
                    this.mInputsTable = new InputsTable(this);
                }
                return this.mInputsTable;
            }
        }
        
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public TestInputsTable TestInputsTable
        {
            get
            {
                if ((this.mTestInputsTable == null))
                {
                    this.mTestInputsTable = new TestInputsTable(this);
                }
                return this.mTestInputsTable;
            }
        }
        
        public WpfButton TestInputsButton
        {
            get
            {
                if ((this.mTestInputsButton == null))
                {
                    this.mTestInputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestInputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestActionButton";
                    this.mTestInputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestInputsButton;
            }
        }
        
        public WpfButton TestInputsDoneButton
        {
            get
            {
                if ((this.mTestInputsDoneButton == null))
                {
                    this.mTestInputsDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestInputsDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "GenerateOutputsDoneButton";
                    this.mTestInputsDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestInputsDoneButton;
            }
        }
        
        public WpfButton NewDbSourceButton
        {
            get
            {
                if ((this.mNewDbSourceButton == null))
                {
                    this.mNewDbSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewDbSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceNewButton";
                    this.mNewDbSourceButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNewDbSourceButton;
            }
        }
        #endregion
        
        #region Fields
        private ActionsCombobox1 mActionsCombobox;
        
        private SourcesCombobox1 mSourcesCombobox;
        
        private InputsTable mInputsTable;
        
        private WpfButton mGenerateOutputsButton;
        
        private TestInputsTable mTestInputsTable;
        
        private WpfButton mTestInputsButton;
        
        private WpfButton mTestInputsDoneButton;
        
        private WpfButton mNewDbSourceButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ActionsCombobox1 : WpfComboBox
    {
        
        public ActionsCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "ActionsComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem GetCountriesListItem
        {
            get
            {
                if ((this.mGetCountriesListItem == null))
                {
                    this.mGetCountriesListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mGetCountriesListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "dbo.GetCountries";
                    this.mGetCountriesListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGetCountriesListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mGetCountriesListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourcesCombobox1 : WpfComboBox
    {
        
        public SourcesCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem UITestingDBSourceListItem
        {
            get
            {
                if ((this.mUITestingDBSourceListItem == null))
                {
                    this.mUITestingDBSourceListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUITestingDBSourceListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "UITestingDBSource";
                    this.mUITestingDBSourceListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUITestingDBSourceListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUITestingDBSourceListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputsTable : WpfTable
    {
        
        public InputsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row13 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row13(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row13 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row13 : WpfRow
    {
        
        public Row13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataCell DataCell
        {
            get
            {
                if ((this.mDataCell == null))
                {
                    this.mDataCell = new DataCell(this);
                }
                return this.mDataCell;
            }
        }
        #endregion
        
        #region Fields
        private DataCell mDataCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataCell : WpfCell
    {
        
        public DataCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input Data or [[Variable]]";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataCombobox DataCombobox
        {
            get
            {
                if ((this.mDataCombobox == null))
                {
                    this.mDataCombobox = new DataCombobox(this);
                }
                return this.mDataCombobox;
            }
        }
        #endregion
        
        #region Fields
        private DataCombobox mDataCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataCombobox : WpfComboBox
    {
        
        public DataCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "Hard coded values or variables.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit DataTextbox
        {
            get
            {
                if ((this.mDataTextbox == null))
                {
                    this.mDataTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mDataTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mDataTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDataTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mDataTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestInputsTable : WpfTable
    {
        
        public TestInputsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.SearchProperties[WpfTable.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row14 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row14(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row14 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row14 : WpfRow
    {
        
        public Row14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TestDataCell TestDataCell
        {
            get
            {
                if ((this.mTestDataCell == null))
                {
                    this.mTestDataCell = new TestDataCell(this);
                }
                return this.mTestDataCell;
            }
        }
        #endregion
        
        #region Fields
        private TestDataCell mTestDataCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestDataCell : WpfCell
    {
        
        public TestDataCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Test Data";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TestDataComboBox TestDataComboBox
        {
            get
            {
                if ((this.mTestDataComboBox == null))
                {
                    this.mTestDataComboBox = new TestDataComboBox(this);
                }
                return this.mTestDataComboBox;
            }
        }
        #endregion
        
        #region Fields
        private TestDataComboBox mTestDataComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestDataComboBox : WpfComboBox
    {
        
        public TestDataComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "This data is used for testing and not at run time.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TestDataTextbox
        {
            get
            {
                if ((this.mTestDataTextbox == null))
                {
                    this.mTestDataTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTestDataTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTestDataTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestDataTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTestDataTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemMenu : WpfMenu
    {
        
        public UIItemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIShowLargeViewMenuItem
        {
            get
            {
                if ((this.mUIShowLargeViewMenuItem == null))
                {
                    this.mUIShowLargeViewMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIShowLargeViewMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_ShowLargeViewMenuItem_AutoID";
                    this.mUIShowLargeViewMenuItem.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIShowLargeViewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIShowLargeViewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BaseConvert1 : WpfCustom
    {
        
        public BaseConvert1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.BaseConvertDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Base Conversion (1)(BaseConvertDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        
        public LargeView4 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView4(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public SmallView2 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView2(this);
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        
        private LargeView4 mLargeView;
        
        private WpfButton mDoneButton;
        
        private SmallView2 mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView4 : WpfCustom
    {
        
        public LargeView4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid2 DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid2(this);
                }
                return this.mDataGrid;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid2 mDataGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid2 : WpfTable
    {
        
        public DataGrid2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row15 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row15(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row15 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row15 : WpfRow
    {
        
        public Row15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Cell Cell
        {
            get
            {
                if ((this.mCell == null))
                {
                    this.mCell = new Cell(this);
                }
                return this.mCell;
            }
        }
        #endregion
        
        #region Fields
        private Cell mCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell : WpfCell
    {
        
        public Cell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox : WpfControl
    {
        
        public Listbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Combobox";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__Row1_FromExpressiontxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ValueTextbox
        {
            get
            {
                if ((this.mValueTextbox == null))
                {
                    this.mValueTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mValueTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mValueTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mValueTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView2 : WpfCustom
    {
        
        public SmallView2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid3 DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid3(this);
                }
                return this.mDataGrid;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid3 mDataGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid3 : WpfTable
    {
        
        public DataGrid3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row16 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row16(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row16 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row16 : WpfRow
    {
        
        public Row16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Cell1 Cell
        {
            get
            {
                if ((this.mCell == null))
                {
                    this.mCell = new Cell1(this);
                }
                return this.mCell;
            }
        }
        #endregion
        
        #region Fields
        private Cell1 mCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell1 : WpfCell
    {
        
        public Cell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox1 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox1(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox1 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox1 : WpfControl
    {
        
        public Listbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Combobox";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__Row1_FromExpressiontxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ValueTextbox
        {
            get
            {
                if ((this.mValueTextbox == null))
                {
                    this.mValueTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mValueTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mValueTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mValueTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CaseConvert1 : WpfCustom
    {
        
        public CaseConvert1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CaseConvertDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Case Conversion (1)(CaseConvertDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ForEach1 : WpfCustom
    {
        
        public ForEach1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ForeachDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "For Each(ForeachDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallView3 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView3(this);
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private SmallView3 mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView3 : WpfCustom
    {
        
        public SmallView3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox ForEachTypeComboBox
        {
            get
            {
                if ((this.mForEachTypeComboBox == null))
                {
                    this.mForEachTypeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mForEachTypeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__ForEachType_AutoID";
                    this.mForEachTypeComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mForEachTypeComboBox;
            }
        }
        
        public FromIntellisenseTextbox FromIntellisenseTextbox
        {
            get
            {
                if ((this.mFromIntellisenseTextbox == null))
                {
                    this.mFromIntellisenseTextbox = new FromIntellisenseTextbox(this);
                }
                return this.mFromIntellisenseTextbox;
            }
        }
        
        public ToIntellisenseTextbox ToIntellisenseTextbox
        {
            get
            {
                if ((this.mToIntellisenseTextbox == null))
                {
                    this.mToIntellisenseTextbox = new ToIntellisenseTextbox(this);
                }
                return this.mToIntellisenseTextbox;
            }
        }
        
        public WpfCustom DropActivityHere
        {
            get
            {
                if ((this.mDropActivityHere == null))
                {
                    this.mDropActivityHere = new WpfCustom(this);
                    #region Search Criteria
                    this.mDropActivityHere.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
                    this.mDropActivityHere.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__DropPoint_AutoID";
                    this.mDropActivityHere.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDropActivityHere;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mForEachTypeComboBox;
        
        private FromIntellisenseTextbox mFromIntellisenseTextbox;
        
        private ToIntellisenseTextbox mToIntellisenseTextbox;
        
        private WpfCustom mDropActivityHere;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FromIntellisenseTextbox : WpfComboBox
    {
        
        public FromIntellisenseTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__ForEachFromTextbox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ToIntellisenseTextbox : WpfComboBox
    {
        
        public ToIntellisenseTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__ForEachToTextbox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SqlBulkInsert1 : WpfCustom
    {
        
        public SqlBulkInsert1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SqlBulkInsertDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SQL Bulk Insert(SqlBulkInsertDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateJson1 : WpfCustom
    {
        
        public CreateJson1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CreateJsonDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Create JSON (1)(CreateJsonDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Calculate1 : WpfCustom
    {
        
        public Calculate1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CalculateDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Calculate(CalculateDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeView5 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView5(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public SmallView4 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView4(this);
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private LargeView5 mLargeView;
        
        private WpfButton mDoneButton;
        
        private SmallView4 mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView5 : WpfCustom
    {
        
        public LargeView5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox2 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox2(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox2 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox2 : WpfControl
    {
        
        public Listbox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Combobox";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__fxtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit FunctionTextbox
        {
            get
            {
                if ((this.mFunctionTextbox == null))
                {
                    this.mFunctionTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mFunctionTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mFunctionTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFunctionTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mFunctionTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView4 : WpfCustom
    {
        
        public SmallView4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox3 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox3(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox3 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox3 : WpfControl
    {
        
        public Listbox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Combobox";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__fxtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit FunctionTextbox
        {
            get
            {
                if ((this.mFunctionTextbox == null))
                {
                    this.mFunctionTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mFunctionTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mFunctionTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFunctionTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mFunctionTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class GatherSystemInfo : WpfCustom
    {
        
        public GatherSystemInfo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.GatherSystemInformationDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Gather System Information (1)(GatherSystemInformationDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SMTPEmail : WpfCustom
    {
        
        public SMTPEmail(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.EmailDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Email(EmailDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new WpfCustom(this);
                    #region Search Criteria
                    this.mLargeView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
                    this.mLargeView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
                    this.mLargeView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLargeView;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mLargeView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExchangeEmail : WpfCustom
    {
        
        public ExchangeEmail(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExchangeEmailDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Exchange Email(ExchangeEmailDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new WpfCustom(this);
                    #region Search Criteria
                    this.mLargeView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
                    this.mLargeView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
                    this.mLargeView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLargeView;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mLargeView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XPath1 : WpfCustom
    {
        
        public XPath1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XPathDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "XPath (1)(XPathDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MultiAssign1 : WpfCustom
    {
        
        public MultiAssign1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Assign (1)(MultiAssignDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallView5 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView5(this);
                }
                return this.mSmallView;
            }
        }
        
        public LargeView6 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView6(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        
        public WpfCustom QuickVariableInputContent
        {
            get
            {
                if ((this.mQuickVariableInputContent == null))
                {
                    this.mQuickVariableInputContent = new WpfCustom(this);
                    #region Search Criteria
                    this.mQuickVariableInputContent.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.QuickVariableInputView";
                    this.mQuickVariableInputContent.SearchProperties[WpfControl.PropertyNames.AutomationId] = "QuickVariableInputContent";
                    this.mQuickVariableInputContent.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQuickVariableInputContent;
            }
        }
        #endregion
        
        #region Fields
        private SmallView5 mSmallView;
        
        private LargeView6 mLargeView;
        
        private WpfButton mDoneButton;
        
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        
        private WpfCustom mQuickVariableInputContent;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView5 : WpfCustom
    {
        
        public SmallView5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid4 DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid4(this);
                }
                return this.mDataGrid;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid4 mDataGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid4 : WpfTable
    {
        
        public DataGrid4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row17 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row17(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row17 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row17 : WpfRow
    {
        
        public Row17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_0_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell4 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell4(this);
                }
                return this.mVariableCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell4 mVariableCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell4 : WpfCell
    {
        
        public VariableCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox4 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox4(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox4 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox4 : WpfComboBox
    {
        
        public Listbox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Textbox Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new Textbox(this);
                }
                return this.mTextbox;
            }
        }
        
        public WpfListItem ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "[[SomeVariable]]";
                    this.mListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private Textbox mTextbox;
        
        private WpfListItem mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Textbox : WpfEdit
    {
        
        public Textbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "[[Variable1]]";
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView6 : WpfCustom
    {
        
        public LargeView6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid5 DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid5(this);
                }
                return this.mDataGrid;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid5 mDataGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid5 : WpfTable
    {
        
        public DataGrid5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row18 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row18(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row18 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row18 : WpfRow
    {
        
        public Row18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_0_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell5 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell5(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell4 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell4(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell5 mVariableCell;
        
        private ValueCell4 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell5 : WpfCell
    {
        
        public VariableCell5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox5 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox5(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox5 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox5 : WpfComboBox
    {
        
        public Listbox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FieldName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell4 : WpfCell
    {
        
        public ValueCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public AssignValueCombobox AssignValueCombobox
        {
            get
            {
                if ((this.mAssignValueCombobox == null))
                {
                    this.mAssignValueCombobox = new AssignValueCombobox(this);
                }
                return this.mAssignValueCombobox;
            }
        }
        #endregion
        
        #region Fields
        private AssignValueCombobox mAssignValueCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssignValueCombobox : WpfComboBox
    {
        
        public AssignValueCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebPost : WpfCustom
    {
        
        public WebPost(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WebServicePostDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "POST Web Method(WebServicePostDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new WpfCustom(this);
                    #region Search Criteria
                    this.mLargeView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
                    this.mLargeView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
                    this.mLargeView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLargeView;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mLargeView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Error1 : WpfText
    {
        
        public Error1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_Error0_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink Hyperlink
        {
            get
            {
                if ((this.mHyperlink == null))
                {
                    this.mHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebGet : WpfCustom
    {
        
        public WebGet(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WebServiceGetDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "GET Web Method", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeView7 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView7(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfCustom SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new WpfCustom(this);
                    #region Search Criteria
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
                    this.mSmallView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private LargeView7 mLargeView;
        
        private WpfButton mDoneButton;
        
        private WpfCustom mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView7 : WpfCustom
    {
        
        public LargeView7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "GenerateOutputsDoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfButton TestButton
        {
            get
            {
                if ((this.mTestButton == null))
                {
                    this.mTestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestActionButton";
                    this.mTestButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestButton;
            }
        }
        
        public WpfComboBox SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSourcesComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
                    this.mSourcesComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesComboBox;
            }
        }
        
        public WpfButton NewButton
        {
            get
            {
                if ((this.mNewButton == null))
                {
                    this.mNewButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceNewButton";
                    this.mNewButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNewButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mGenerateOutputsButton;
        
        private WpfButton mDoneButton;
        
        private WpfButton mTestButton;
        
        private WpfComboBox mSourcesComboBox;
        
        private WpfButton mNewButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TopScrollViewerPane : WpfPane
    {
        
        public TopScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "ScrollViewer";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public Httprsaklfsanele3142Text Httprsaklfsanele3142Text
        {
            get
            {
                if ((this.mHttprsaklfsanele3142Text == null))
                {
                    this.mHttprsaklfsanele3142Text = new Httprsaklfsanele3142Text(this);
                }
                return this.mHttprsaklfsanele3142Text;
            }
        }
        #endregion
        
        #region Fields
        private Httprsaklfsanele3142Text mHttprsaklfsanele3142Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Httprsaklfsanele3142Text : WpfText
    {
        
        public Httprsaklfsanele3142Text(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "http://rsaklfsanele:3142/secure/Unassigned/Unsaved 1.json?<DataList></DataList>";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink Httprsaklfsanele3142Hyperlink
        {
            get
            {
                if ((this.mHttprsaklfsanele3142Hyperlink == null))
                {
                    this.mHttprsaklfsanele3142Hyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mHttprsaklfsanele3142Hyperlink.SearchProperties[WpfHyperlink.PropertyNames.Name] = "http://rsaklfsanele:3142/secure/Unassigned/Unsaved 1.json?<DataList></DataList>";
                    this.mHttprsaklfsanele3142Hyperlink.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mHttprsaklfsanele3142Hyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mHttprsaklfsanele3142Hyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DBSourceWizardTab : WpfTabPage
    {
        
        public DBSourceWizardTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.ServerProxyLayer.IDbSour" +
                "ce]";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext5 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext5(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfScrollBar VerticalScrollBar
        {
            get
            {
                if ((this.mVerticalScrollBar == null))
                {
                    this.mVerticalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mVerticalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "VerticalScrollBar";
                    this.mVerticalScrollBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVerticalScrollBar;
            }
        }
        
        public WpfScrollBar HorizontalScrollBar
        {
            get
            {
                if ((this.mHorizontalScrollBar == null))
                {
                    this.mHorizontalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mHorizontalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "HorizontalScrollBar";
                    this.mHorizontalScrollBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHorizontalScrollBar;
            }
        }
        
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext5 mWorkSurfaceContext;
        
        private WpfScrollBar mVerticalScrollBar;
        
        private WpfScrollBar mHorizontalScrollBar;
        
        private WpfButton mCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext5 : WpfCustom
    {
        
        public WorkSurfaceContext5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ManageDatabaseSourceControl ManageDatabaseSourceControl
        {
            get
            {
                if ((this.mManageDatabaseSourceControl == null))
                {
                    this.mManageDatabaseSourceControl = new ManageDatabaseSourceControl(this);
                }
                return this.mManageDatabaseSourceControl;
            }
        }
        
        public WpfButton TestConnectionButton
        {
            get
            {
                if ((this.mTestConnectionButton == null))
                {
                    this.mTestConnectionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestConnectionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestConnectionButton";
                    this.mTestConnectionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestConnectionButton;
            }
        }
        
        public ErrorText1 ErrorText
        {
            get
            {
                if ((this.mErrorText == null))
                {
                    this.mErrorText = new ErrorText1(this);
                }
                return this.mErrorText;
            }
        }
        
        public WpfEdit PasswordTextBox
        {
            get
            {
                if ((this.mPasswordTextBox == null))
                {
                    this.mPasswordTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PasswordTextBox";
                    this.mPasswordTextBox.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mPasswordTextBox;
            }
        }
        
        public WpfEdit UserNameTextBox
        {
            get
            {
                if ((this.mUserNameTextBox == null))
                {
                    this.mUserNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mUserNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UserNameTextBox";
                    this.mUserNameTextBox.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUserNameTextBox;
            }
        }
        
        public WpfRadioButton UserRadioButton
        {
            get
            {
                if ((this.mUserRadioButton == null))
                {
                    this.mUserRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUserRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UserRadioButton";
                    this.mUserRadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUserRadioButton;
            }
        }
        
        public WpfRadioButton WindowsRadioButton
        {
            get
            {
                if ((this.mWindowsRadioButton == null))
                {
                    this.mWindowsRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mWindowsRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "WindowsRadioButton";
                    this.mWindowsRadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mWindowsRadioButton;
            }
        }
        
        public WpfButton CancelTestButton
        {
            get
            {
                if ((this.mCancelTestButton == null))
                {
                    this.mCancelTestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelTestButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelTestButton";
                    this.mCancelTestButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCancelTestButton;
            }
        }
        
        public WpfImage ConnectionPassedImage
        {
            get
            {
                if ((this.mConnectionPassedImage == null))
                {
                    this.mConnectionPassedImage = new WpfImage(this);
                    #region Search Criteria
                    this.mConnectionPassedImage.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mConnectionPassedImage.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mConnectionPassedImage;
            }
        }
        #endregion
        
        #region Fields
        private ManageDatabaseSourceControl mManageDatabaseSourceControl;
        
        private WpfButton mTestConnectionButton;
        
        private ErrorText1 mErrorText;
        
        private WpfEdit mPasswordTextBox;
        
        private WpfEdit mUserNameTextBox;
        
        private WpfRadioButton mUserRadioButton;
        
        private WpfRadioButton mWindowsRadioButton;
        
        private WpfButton mCancelTestButton;
        
        private WpfImage mConnectionPassedImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ManageDatabaseSourceControl : WpfCustom
    {
        
        public ManageDatabaseSourceControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ManageDatabaseSourceControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ServerTypeComboBox ServerTypeComboBox
        {
            get
            {
                if ((this.mServerTypeComboBox == null))
                {
                    this.mServerTypeComboBox = new ServerTypeComboBox(this);
                }
                return this.mServerTypeComboBox;
            }
        }
        
        public ServerComboBox1 ServerComboBox
        {
            get
            {
                if ((this.mServerComboBox == null))
                {
                    this.mServerComboBox = new ServerComboBox1(this);
                }
                return this.mServerComboBox;
            }
        }
        
        public UIDatabaseComboxBoxCustom UIDatabaseComboxBoxCustom
        {
            get
            {
                if ((this.mUIDatabaseComboxBoxCustom == null))
                {
                    this.mUIDatabaseComboxBoxCustom = new UIDatabaseComboxBoxCustom(this);
                }
                return this.mUIDatabaseComboxBoxCustom;
            }
        }
        
        public WpfButton TestConnectionButton
        {
            get
            {
                if ((this.mTestConnectionButton == null))
                {
                    this.mTestConnectionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestConnectionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestConnectionButton";
                    this.mTestConnectionButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTestConnectionButton;
            }
        }
        
        public DatabaseCombobox DatabaseCombobox
        {
            get
            {
                if ((this.mDatabaseCombobox == null))
                {
                    this.mDatabaseCombobox = new DatabaseCombobox(this);
                }
                return this.mDatabaseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private ServerTypeComboBox mServerTypeComboBox;
        
        private ServerComboBox1 mServerComboBox;
        
        private UIDatabaseComboxBoxCustom mUIDatabaseComboxBoxCustom;
        
        private WpfButton mTestConnectionButton;
        
        private DatabaseCombobox mDatabaseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerTypeComboBox : WpfCustom
    {
        
        public ServerTypeComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ServerTypeComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ToggleButton
        {
            get
            {
                if ((this.mToggleButton == null))
                {
                    this.mToggleButton = new WpfButton(this);
                    #region Search Criteria
                    this.mToggleButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToggleButton;
            }
        }
        
        public WpfText MicrosoftSQLServer
        {
            get
            {
                if ((this.mMicrosoftSQLServer == null))
                {
                    this.mMicrosoftSQLServer = new WpfText(this);
                    #region Search Criteria
                    this.mMicrosoftSQLServer.SearchProperties[WpfText.PropertyNames.Name] = "Microsoft SQL Server";
                    this.mMicrosoftSQLServer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMicrosoftSQLServer;
            }
        }
        
        public WpfText OracleDatabase
        {
            get
            {
                if ((this.mOracleDatabase == null))
                {
                    this.mOracleDatabase = new WpfText(this);
                    #region Search Criteria
                    this.mOracleDatabase.SearchProperties[WpfText.PropertyNames.Name] = "Oracle Database";
                    this.mOracleDatabase.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mOracleDatabase;
            }
        }
        
        public WpfText ODBCDatabase
        {
            get
            {
                if ((this.mODBCDatabase == null))
                {
                    this.mODBCDatabase = new WpfText(this);
                    #region Search Criteria
                    this.mODBCDatabase.SearchProperties[WpfText.PropertyNames.Name] = "ODBC Database";
                    this.mODBCDatabase.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mODBCDatabase;
            }
        }
        
        public WpfText MySqlDatabase
        {
            get
            {
                if ((this.mMySqlDatabase == null))
                {
                    this.mMySqlDatabase = new WpfText(this);
                    #region Search Criteria
                    this.mMySqlDatabase.SearchProperties[WpfText.PropertyNames.Name] = "MySql Database";
                    this.mMySqlDatabase.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mMySqlDatabase;
            }
        }
        
        public WpfText PostgreSQLDatabaseText
        {
            get
            {
                if ((this.mPostgreSQLDatabaseText == null))
                {
                    this.mPostgreSQLDatabaseText = new WpfText(this);
                    #region Search Criteria
                    this.mPostgreSQLDatabaseText.SearchProperties[WpfText.PropertyNames.Name] = "PostgreSQL Database";
                    this.mPostgreSQLDatabaseText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mPostgreSQLDatabaseText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mToggleButton;
        
        private WpfText mMicrosoftSQLServer;
        
        private WpfText mOracleDatabase;
        
        private WpfText mODBCDatabase;
        
        private WpfText mMySqlDatabase;
        
        private WpfText mPostgreSQLDatabaseText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerComboBox1 : WpfComboBox
    {
        
        public ServerComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "ServerTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem RSAKLFSVRGENDEV
        {
            get
            {
                if ((this.mRSAKLFSVRGENDEV == null))
                {
                    this.mRSAKLFSVRGENDEV = new WpfListItem(this);
                    #region Search Criteria
                    this.mRSAKLFSVRGENDEV.SearchProperties[WpfListItem.PropertyNames.Name] = "RSAKLFSVRGENDEV";
                    this.mRSAKLFSVRGENDEV.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRSAKLFSVRGENDEV;
            }
        }
        
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mRSAKLFSVRGENDEV;
        
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDatabaseComboxBoxCustom : WpfCustom
    {
        
        public UIDatabaseComboxBoxCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DatabaseComboxBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText UIDev2TestingDBText
        {
            get
            {
                if ((this.mUIDev2TestingDBText == null))
                {
                    this.mUIDev2TestingDBText = new WpfText(this);
                    #region Search Criteria
                    this.mUIDev2TestingDBText.SearchProperties[WpfText.PropertyNames.Name] = "Dev2TestingDB";
                    this.mUIDev2TestingDBText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIDev2TestingDBText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIDev2TestingDBText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DatabaseCombobox : WpfCustom
    {
        
        public DatabaseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DatabaseComboxBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom DatabaseComboxBoxMsAccess
        {
            get
            {
                if ((this.mDatabaseComboxBoxMsAccess == null))
                {
                    this.mDatabaseComboxBoxMsAccess = new WpfCustom(this);
                    #region Search Criteria
                    this.mDatabaseComboxBoxMsAccess.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
                    this.mDatabaseComboxBoxMsAccess.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DatabaseComboxBox";
                    this.mDatabaseComboxBoxMsAccess.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDatabaseComboxBoxMsAccess;
            }
        }
        
        public WpfText MSAccessDatabaseText
        {
            get
            {
                if ((this.mMSAccessDatabaseText == null))
                {
                    this.mMSAccessDatabaseText = new WpfText(this);
                    #region Search Criteria
                    this.mMSAccessDatabaseText.SearchProperties[WpfText.PropertyNames.Name] = "MS Access Database";
                    this.mMSAccessDatabaseText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mMSAccessDatabaseText;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mDatabaseComboxBoxMsAccess;
        
        private WpfText mMSAccessDatabaseText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorText1 : WpfText
    {
        
        public ErrorText1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorTextBlock";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FilesMenu : WpfMenu
    {
        
        public FilesMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.AutomationId] = "filesMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem PositionButton
        {
            get
            {
                if ((this.mPositionButton == null))
                {
                    this.mPositionButton = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mPositionButton.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "PART_FilesMenuItem";
                    this.mPositionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPositionButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mPositionButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DependencyGraphTab : WpfTabPage
    {
        
        public DependencyGraphTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.DependencyVisualization.DependencyVisualiserViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorksurfaceContext6 WorksurfaceContext
        {
            get
            {
                if ((this.mWorksurfaceContext == null))
                {
                    this.mWorksurfaceContext = new WorksurfaceContext6(this);
                }
                return this.mWorksurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WorksurfaceContext6 mWorksurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorksurfaceContext6 : WpfCustom
    {
        
        public WorksurfaceContext6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DependencyView DependencyView
        {
            get
            {
                if ((this.mDependencyView == null))
                {
                    this.mDependencyView = new DependencyView(this);
                }
                return this.mDependencyView;
            }
        }
        #endregion
        
        #region Fields
        private DependencyView mDependencyView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DependencyView : WpfCustom
    {
        
        public DependencyView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DependencyVisualiserView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_DependencyView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewer ScrollViewer
        {
            get
            {
                if ((this.mScrollViewer == null))
                {
                    this.mScrollViewer = new ScrollViewer(this);
                }
                return this.mScrollViewer;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewer mScrollViewer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewer : WpfPane
    {
        
        public ScrollViewer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "UI_TopScrollView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.Name] = "Refresh";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfRadioButton ShowwhatdependsonthisRadioButton
        {
            get
            {
                if ((this.mShowwhatdependsonthisRadioButton == null))
                {
                    this.mShowwhatdependsonthisRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mShowwhatdependsonthisRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "WfDependsOn";
                    this.mShowwhatdependsonthisRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowwhatdependsonthisRadioButton;
            }
        }
        
        public WpfRadioButton ShowwhatthisdependsonRadioButton
        {
            get
            {
                if ((this.mShowwhatthisdependsonRadioButton == null))
                {
                    this.mShowwhatthisdependsonRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mShowwhatthisdependsonRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "DependsOnWf";
                    this.mShowwhatthisdependsonRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowwhatthisdependsonRadioButton;
            }
        }
        
        public NestingLevelsText NestingLevelsText
        {
            get
            {
                if ((this.mNestingLevelsText == null))
                {
                    this.mNestingLevelsText = new NestingLevelsText(this);
                }
                return this.mNestingLevelsText;
            }
        }
        
        public Node1 Node1
        {
            get
            {
                if ((this.mNode1 == null))
                {
                    this.mNode1 = new Node1(this);
                }
                return this.mNode1;
            }
        }
        
        public Node2 Node2
        {
            get
            {
                if ((this.mNode2 == null))
                {
                    this.mNode2 = new Node2(this);
                }
                return this.mNode2;
            }
        }
        
        public Node3 Node3
        {
            get
            {
                if ((this.mNode3 == null))
                {
                    this.mNode3 = new Node3(this);
                }
                return this.mNode3;
            }
        }
        
        public Node4 Node4
        {
            get
            {
                if ((this.mNode4 == null))
                {
                    this.mNode4 = new Node4(this);
                }
                return this.mNode4;
            }
        }
        
        public Node5 Node5
        {
            get
            {
                if ((this.mNode5 == null))
                {
                    this.mNode5 = new Node5(this);
                }
                return this.mNode5;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mRefreshButton;
        
        private WpfRadioButton mShowwhatdependsonthisRadioButton;
        
        private WpfRadioButton mShowwhatthisdependsonRadioButton;
        
        private NestingLevelsText mNestingLevelsText;
        
        private Node1 mNode1;
        
        private Node2 mNode2;
        
        private Node3 mNode3;
        
        private Node4 mNode4;
        
        private Node5 mNode5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NestingLevelsText : WpfText
    {
        
        public NestingLevelsText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Nesting Levels";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Node1 : WpfCustom
    {
        
        public Node1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamNetworkNode";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Nodes";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Node2 : WpfCustom
    {
        
        public Node2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamNetworkNode";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Nodes";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Node3 : WpfCustom
    {
        
        public Node3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamNetworkNode";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Nodes";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Node4 : WpfCustom
    {
        
        public Node4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamNetworkNode";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Nodes";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Node5 : WpfCustom
    {
        
        public Node5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamNetworkNode";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Nodes";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PluginSourceWizardTab : WpfTabPage
    {
        
        public PluginSourceWizardTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.IPluginSource]";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext7 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext7(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext7 mWorkSurfaceContext;
        
        private WpfButton mCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext7 : WpfCustom
    {
        
        public WorkSurfaceContext7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NewPluginSourceWizard NewPluginSourceWizard
        {
            get
            {
                if ((this.mNewPluginSourceWizard == null))
                {
                    this.mNewPluginSourceWizard = new NewPluginSourceWizard(this);
                }
                return this.mNewPluginSourceWizard;
            }
        }
        
        public WpfEdit AssemblyNameTextbox
        {
            get
            {
                if ((this.mAssemblyNameTextbox == null))
                {
                    this.mAssemblyNameTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mAssemblyNameTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "AssemblyNameTextBox";
                    this.mAssemblyNameTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssemblyNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NewPluginSourceWizard mNewPluginSourceWizard;
        
        private WpfEdit mAssemblyNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewPluginSourceWizard : WpfCustom
    {
        
        public NewPluginSourceWizard(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ManagePluginSourceControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewer1 ScrollViewer
        {
            get
            {
                if ((this.mScrollViewer == null))
                {
                    this.mScrollViewer = new ScrollViewer1(this);
                }
                return this.mScrollViewer;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewer1 mScrollViewer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewer1 : WpfPane
    {
        
        public ScrollViewer1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Tree Tree
        {
            get
            {
                if ((this.mTree == null))
                {
                    this.mTree = new Tree(this);
                }
                return this.mTree;
            }
        }
        #endregion
        
        #region Fields
        private Tree mTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Tree : WpfTree
    {
        
        public Tree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem FileSystemTreeItem
        {
            get
            {
                if ((this.mFileSystemTreeItem == null))
                {
                    this.mFileSystemTreeItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mFileSystemTreeItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "File System";
                    this.mFileSystemTreeItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFileSystemTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mFileSystemTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebSourceWizardTab : WpfTabPage
    {
        
        public WebSourceWizardTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.ServerProxyLayer.IWebSer" +
                "viceSource]";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext8 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext8(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext8 mWorkSurfaceContext;
        
        private WpfButton mCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext8 : WpfCustom
    {
        
        public WorkSurfaceContext8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit AddressTextbox
        {
            get
            {
                if ((this.mAddressTextbox == null))
                {
                    this.mAddressTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mAddressTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ServerTextBox";
                    this.mAddressTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddressTextbox;
            }
        }
        
        public WpfButton TestConnectionButton
        {
            get
            {
                if ((this.mTestConnectionButton == null))
                {
                    this.mTestConnectionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestConnectionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestConnectionButton";
                    this.mTestConnectionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestConnectionButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAddressTextbox;
        
        private WpfButton mTestConnectionButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServiceTestView : WpfCustom
    {
        
        public ServiceTestView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceTestView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ServiceTestView_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public TestsListbox TestsListbox
        {
            get
            {
                if ((this.mTestsListbox == null))
                {
                    this.mTestsListbox = new TestsListbox(this);
                }
                return this.mTestsListbox;
            }
        }
        #endregion
        
        #region Fields
        private TestsListbox mTestsListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestsListbox : WpfList
    {
        
        public TestsListbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "TestsListbox";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WarewolfStudioView WarewolfStudioView
        {
            get
            {
                if ((this.mWarewolfStudioView == null))
                {
                    this.mWarewolfStudioView = new WarewolfStudioView(this);
                }
                return this.mWarewolfStudioView;
            }
        }
        #endregion
        
        #region Fields
        private WarewolfStudioView mWarewolfStudioView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WarewolfStudioView : WpfListItem
    {
        
        public WarewolfStudioView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.DummyServiceTest";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfButton CreateanewtestButton
        {
            get
            {
                if ((this.mCreateanewtestButton == null))
                {
                    this.mCreateanewtestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCreateanewtestButton.SearchProperties[WpfButton.PropertyNames.Instance] = "1";
                    this.mCreateanewtestButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCreateanewtestButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCreateanewtestButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestsTabPage : WpfTabPage
    {
        
        public TestsTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.StudioTestViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WorksurfaceContext9 WorksurfaceContext
        public WpfCustom TestsStudioViewModel
        {
            get
            {
                if ((this.mWorksurfaceContext == null))
                {
                    this.mTestsStudioViewModel = new WpfCustom(this);
                    #region Search Criteria
                    this.mTestsStudioViewModel.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
                    this.mTestsStudioViewModel.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
                    this.mTestsStudioViewModel.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                    this.mWorksurfaceContext = new WorksurfaceContext9(this);
                }
                return this.mWorksurfaceContext;
            }
        }
        
        public ServiceTestView1 ServiceTestView
        {
            get
            {
                if ((this.mServiceTestView == null))
                {
                    this.mServiceTestView = new ServiceTestView1(this);
                }
                return this.mServiceTestView;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mTestsStudioViewModel;
        
        private ServiceTestView1 mServiceTestView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServiceTestView1 : WpfCustom
    {
        
        public ServiceTestView1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceTestView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ServiceTestView_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UrlText UrlText
        {
            get
            {
                if ((this.mUrlText == null))
                {
                    this.mUrlText = new UrlText(this);
                }
                return this.mUrlText;
            }
        }
        
        public WpfText PassingText
        {
            get
            {
                if ((this.mPassingText == null))
                {
                    this.mPassingText = new WpfText(this);
                    #region Search Criteria
                    this.mPassingText.SearchProperties[WpfText.PropertyNames.Name] = "Passing:";
                    this.mPassingText.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mPassingText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mPassingText;
            }
        }
        
        public WpfButton RunAllButton
        {
            get
            {
                if ((this.mRunAllButton == null))
                {
                    this.mRunAllButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunAllButton.SearchProperties[WpfButton.PropertyNames.Name] = "Run All";
                    this.mRunAllButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mRunAllButton;
            }
        }
        
        public TestsListboxList TestsListboxList
        {
            get
            {
                if ((this.mTestsListboxList == null))
                {
                    this.mTestsListboxList = new TestsListboxList(this);
                }
                return this.mTestsListboxList;
            }
        }
        
        public WpfText NumberOfPassingTestsTexbox
        {
            get
            {
                if ((this.mNumberOfPassingTestsTexbox == null))
                {
                    this.mNumberOfPassingTestsTexbox = new WpfText(this);
                    #region Search Criteria
                    this.mNumberOfPassingTestsTexbox.SearchProperties[WpfText.PropertyNames.AutomationId] = "VersionImage";
                    this.mNumberOfPassingTestsTexbox.SearchProperties[WpfText.PropertyNames.Instance] = "3";
                    this.mNumberOfPassingTestsTexbox.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNumberOfPassingTestsTexbox;
            }
        }
        
        public WpfButton DuplicateButton
        {
            get
            {
                if ((this.mDuplicateButton == null))
                {
                    this.mDuplicateButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDuplicateButton.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    this.mDuplicateButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDuplicateButton;
            }
        }
        
        public WpfText TestUrlText
        {
            get
            {
                if ((this.mTestUrlText == null))
                {
                    this.mTestUrlText = new WpfText(this);
                    #region Search Criteria
                    this.mTestUrlText.SearchProperties[WpfText.PropertyNames.Name] = "\\ ";
                    this.mTestUrlText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTestUrlText;
            }
        }
        
        public WpfRadioButton WindowsRadioButton
        {
            get
            {
                if ((this.mWindowsRadioButton == null))
                {
                    this.mWindowsRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mWindowsRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "WindowsRadioButton";
                    this.mWindowsRadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mWindowsRadioButton;
            }
        }
        
        public TestNameText TestNameText
        {
            get
            {
                if ((this.mTestNameText == null))
                {
                    this.mTestNameText = new TestNameText(this);
                }
                return this.mTestNameText;
            }
        }
        
        public TestInputsTable1 TestInputsTable
        {
            get
            {
                if ((this.mTestInputsTable == null))
                {
                    this.mTestInputsTable = new TestInputsTable1(this);
                }
                return this.mTestInputsTable;
            }
        }
        
        public WpfTable TestOutputsTable
        {
            get
            {
                if ((this.mTestOutputsTable == null))
                {
                    this.mTestOutputsTable = new WpfTable(this);
                    #region Search Criteria
                    this.mTestOutputsTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "TestOutputsGrid";
                    this.mTestOutputsTable.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTestOutputsTable;
            }
        }
        
        public WpfRadioButton ErrorRadioButton
        {
            get
            {
                if ((this.mErrorRadioButton == null))
                {
                    this.mErrorRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mErrorRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "ErrorRadioButton";
                    this.mErrorRadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mErrorRadioButton;
            }
        }
        
        public WpfRadioButton NoErrorRadioButton
        {
            get
            {
                if ((this.mNoErrorRadioButton == null))
                {
                    this.mNoErrorRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mNoErrorRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "NoErrorRadioButton";
                    this.mNoErrorRadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNoErrorRadioButton;
            }
        }
        
        public WpfRadioButton UserRadioButton
        {
            get
            {
                if ((this.mUserRadioButton == null))
                {
                    this.mUserRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUserRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UserRadioButton";
                    this.mUserRadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUserRadioButton;
            }
        }
        
        public WpfEdit PasswordTextBoxEdit
        {
            get
            {
                if ((this.mPasswordTextBoxEdit == null))
                {
                    this.mPasswordTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PasswordTextBox";
                    this.mPasswordTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mPasswordTextBoxEdit;
            }
        }
        
        public WpfEdit UsernameTextBoxEdit
        {
            get
            {
                if ((this.mUsernameTextBoxEdit == null))
                {
                    this.mUsernameTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUsernameTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UsernameTextBox";
                    this.mUsernameTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUsernameTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private UrlText mUrlText;
        
        private WpfText mPassingText;
        
        private WpfButton mRunAllButton;
        
        private TestsListboxList mTestsListboxList;
        
        private WpfText mNumberOfPassingTestsTexbox;
        
        private WpfButton mDuplicateButton;
        
        private WpfText mTestUrlText;
        
        private WpfRadioButton mWindowsRadioButton;
        
        private TestNameText mTestNameText;
        
        private TestInputsTable1 mTestInputsTable;
        
        private WpfTable mTestOutputsTable;
        
        private WpfRadioButton mErrorRadioButton;
        
        private WpfRadioButton mNoErrorRadioButton;
        
        private WpfRadioButton mUserRadioButton;
        
        private WpfEdit mPasswordTextBoxEdit;
        
        private WpfEdit mUsernameTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UrlText : WpfText
    {
        
        public UrlText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink UrlHyperlink
        {
            get
            {
                if ((this.mUrlHyperlink == null))
                {
                    this.mUrlHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mUrlHyperlink.SearchProperties[WpfHyperlink.PropertyNames.AutomationId] = "RunAllTestsUrl";
                    this.mUrlHyperlink.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUrlHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mUrlHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestsListboxList : WpfList
    {
        
        public TestsListboxList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "TestsListbox";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public CreateTest CreateTest
        {
            get
            {
                if ((this.mCreateTest == null))
                {
                    this.mCreateTest = new CreateTest(this);
                }
                return this.mCreateTest;
            }
        }
        
        public Test1 Test1
        {
            get
            {
                if ((this.mTest1 == null))
                {
                    this.mTest1 = new Test1(this);
                }
                return this.mTest1;
            }
        }
        #endregion
        
        #region Fields
        private CreateTest mCreateTest;
        
        private Test1 mTest1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateTest : WpfListItem
    {
        
        public CreateTest(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.DummyServiceTest";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfButton CreateTestButton
        {
            get
            {
                if ((this.mCreateTestButton == null))
                {
                    this.mCreateTestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCreateTestButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Create a new test";
                    this.mCreateTestButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCreateTestButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCreateTestButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test1 : WpfListItem
    {
        
        public Test1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ServiceTestModel";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TestEnabledSelector
        {
            get
            {
                if ((this.mTestEnabledSelector == null))
                {
                    this.mTestEnabledSelector = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTestEnabledSelector.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Select or De-Select to run the test";
                    this.mTestEnabledSelector.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTestEnabledSelector;
            }
        }
        
        public WpfButton RunButton
        {
            get
            {
                if ((this.mRunButton == null))
                {
                    this.mRunButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunButton.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    this.mRunButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mRunButton;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    this.mDeleteButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTestEnabledSelector;
        
        private WpfButton mRunButton;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestNameText : WpfText
    {
        
        public TestNameText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Test Name";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestInputsTable1 : WpfTable
    {
        
        public TestInputsTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "TestInputs";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public Row19 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row19(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row19 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row19 : WpfRow
    {
        
        public Row19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Cell2 Cell
        {
            get
            {
                if ((this.mCell == null))
                {
                    this.mCell = new Cell2(this);
                }
                return this.mCell;
            }
        }
        #endregion
        
        #region Fields
        private Cell2 mCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell2 : WpfCell
    {
        
        public Cell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseComboBox IntellisenseComboBox
        {
            get
            {
                if ((this.mIntellisenseComboBox == null))
                {
                    this.mIntellisenseComboBox = new IntellisenseComboBox(this);
                }
                return this.mIntellisenseComboBox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseComboBox mIntellisenseComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseComboBox : WpfComboBox
    {
        
        public IntellisenseComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_Coded UI Testtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneRight : WpfCustom
    {
        
        public SplitPaneRight(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Variables Variables
        {
            get
            {
                if ((this.mVariables == null))
                {
                    this.mVariables = new Variables(this);
                }
                return this.mVariables;
            }
        }
        
        public DebugOutput DebugOutput
        {
            get
            {
                if ((this.mDebugOutput == null))
                {
                    this.mDebugOutput = new DebugOutput(this);
                }
                return this.mDebugOutput;
            }
        }
        #endregion
        
        #region Fields
        private Variables mVariables;
        
        private DebugOutput mDebugOutput;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Variables : WpfCustom
    {
        
        public Variables(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Variables";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton VariableUnpinBtn
        {
            get
            {
                if ((this.mVariableUnpinBtn == null))
                {
                    this.mVariableUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mVariableUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mVariableUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableUnpinBtn;
            }
        }
        
        public VariablesControl VariablesControl
        {
            get
            {
                if ((this.mVariablesControl == null))
                {
                    this.mVariablesControl = new VariablesControl(this);
                }
                return this.mVariablesControl;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mVariableUnpinBtn;
        
        private VariablesControl mVariablesControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariablesControl : WpfCustom
    {
        
        public VariablesControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataListView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_VariablesControl_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_AddRemovebtn_AutoID";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        
        public WpfButton SortButton
        {
            get
            {
                if ((this.mSortButton == null))
                {
                    this.mSortButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSortButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Sortbtn_AutoID";
                    this.mSortButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSortButton;
            }
        }
        
        public XtgDataPresenter XtgDataPresenter
        {
            get
            {
                if ((this.mXtgDataPresenter == null))
                {
                    this.mXtgDataPresenter = new XtgDataPresenter(this);
                }
                return this.mXtgDataPresenter;
            }
        }
        
        public VariableSearchTextBoxEdit VariableSearchTextBoxEdit
        {
            get
            {
                if ((this.mVariableSearchTextBoxEdit == null))
                {
                    this.mVariableSearchTextBoxEdit = new VariableSearchTextBoxEdit(this);
                }
                return this.mVariableSearchTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteButton;
        
        private WpfButton mSortButton;
        
        private XtgDataPresenter mXtgDataPresenter;
        
        private VariableSearchTextBoxEdit mVariableSearchTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XtgDataPresenter : WpfCustom
    {
        
        public XtgDataPresenter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataPresenterBase";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Xtg";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Table Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table(this);
                }
                return this.mTable;
            }
        }
        #endregion
        
        #region Fields
        private Table mTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table : WpfTable
    {
        
        public Table(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableDataItem VariableDataItem
        {
            get
            {
                if ((this.mVariableDataItem == null))
                {
                    this.mVariableDataItem = new VariableDataItem(this);
                }
                return this.mVariableDataItem;
            }
        }
        
        public RecordsetDataItem RecordsetDataItem
        {
            get
            {
                if ((this.mRecordsetDataItem == null))
                {
                    this.mRecordsetDataItem = new RecordsetDataItem(this);
                }
                return this.mRecordsetDataItem;
            }
        }
        
        public ObjectDataItem ObjectDataItem
        {
            get
            {
                if ((this.mObjectDataItem == null))
                {
                    this.mObjectDataItem = new ObjectDataItem(this);
                }
                return this.mObjectDataItem;
            }
        }
        #endregion
        
        #region Fields
        private VariableDataItem mVariableDataItem;
        
        private RecordsetDataItem mRecordsetDataItem;
        
        private ObjectDataItem mObjectDataItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableDataItem : WpfControl
    {
        
        public VariableDataItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Variable";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DisplayNameHeaderCell DisplayNameHeaderCell
        {
            get
            {
                if ((this.mDisplayNameHeaderCell == null))
                {
                    this.mDisplayNameHeaderCell = new DisplayNameHeaderCell(this);
                }
                return this.mDisplayNameHeaderCell;
            }
        }
        
        public InputHeaderCell InputHeaderCell
        {
            get
            {
                if ((this.mInputHeaderCell == null))
                {
                    this.mInputHeaderCell = new InputHeaderCell(this);
                }
                return this.mInputHeaderCell;
            }
        }
        
        public OutputHeaderCell OutputHeaderCell
        {
            get
            {
                if ((this.mOutputHeaderCell == null))
                {
                    this.mOutputHeaderCell = new OutputHeaderCell(this);
                }
                return this.mOutputHeaderCell;
            }
        }
        
        public List List
        {
            get
            {
                if ((this.mList == null))
                {
                    this.mList = new List(this);
                }
                return this.mList;
            }
        }
        #endregion
        
        #region Fields
        private DisplayNameHeaderCell mDisplayNameHeaderCell;
        
        private InputHeaderCell mInputHeaderCell;
        
        private OutputHeaderCell mOutputHeaderCell;
        
        private List mList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DisplayNameHeaderCell : WpfCell
    {
        
        public DisplayNameHeaderCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = " Display Name";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText VariableText
        {
            get
            {
                if ((this.mVariableText == null))
                {
                    this.mVariableText = new WpfText(this);
                    #region Search Criteria
                    this.mVariableText.SearchProperties[WpfText.PropertyNames.Name] = "Variable";
                    this.mVariableText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableText;
            }
        }
        
        public WpfCustom ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mValueEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
                    this.mValueEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueEditor;
            }
        }
        
        public WpfToggleButton ExpanderToggleButton
        {
            get
            {
                if ((this.mExpanderToggleButton == null))
                {
                    this.mExpanderToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mExpanderToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Expander";
                    this.mExpanderToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mVariableText;
        
        private WpfCustom mValueEditor;
        
        private WpfToggleButton mExpanderToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputHeaderCell : WpfCell
    {
        
        public InputHeaderCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.AutomationId] = "TextBlock";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputHeaderCell : WpfCell
    {
        
        public OutputHeaderCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.AutomationId] = "TextBlock";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class List : WpfList
    {
        
        public List(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ListItem ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new ListItem(this);
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private ListItem mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListItem : WpfListItem
    {
        
        public ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Children";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Table1 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table1(this);
                }
                return this.mTable;
            }
        }
        #endregion
        
        #region Fields
        private Table1 mTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table1 : WpfTable
    {
        
        public Table1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataItem1 DataItem1
        {
            get
            {
                if ((this.mDataItem1 == null))
                {
                    this.mDataItem1 = new DataItem1(this);
                }
                return this.mDataItem1;
            }
        }
        
        public DataItem2 DataItem2
        {
            get
            {
                if ((this.mDataItem2 == null))
                {
                    this.mDataItem2 = new DataItem2(this);
                }
                return this.mDataItem2;
            }
        }
        
        public DataItem3 DataItem3
        {
            get
            {
                if ((this.mDataItem3 == null))
                {
                    this.mDataItem3 = new DataItem3(this);
                }
                return this.mDataItem3;
            }
        }
        
        public DataItem4 DataItem4
        {
            get
            {
                if ((this.mDataItem4 == null))
                {
                    this.mDataItem4 = new DataItem4(this);
                }
                return this.mDataItem4;
            }
        }
        
        public DataItem5 DataItem5
        {
            get
            {
                if ((this.mDataItem5 == null))
                {
                    this.mDataItem5 = new DataItem5(this);
                }
                return this.mDataItem5;
            }
        }
        #endregion
        
        #region Fields
        private DataItem1 mDataItem1;
        
        private DataItem2 mDataItem2;
        
        private DataItem3 mDataItem3;
        
        private DataItem4 mDataItem4;
        
        private DataItem5 mDataItem5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem1 : WpfControl
    {
        
        public DataItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputCell2 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell2(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell(this);
                }
                return this.mOutputCell;
            }
        }
        
        public VariableNameCell VariableNameCell
        {
            get
            {
                if ((this.mVariableNameCell == null))
                {
                    this.mVariableNameCell = new VariableNameCell(this);
                }
                return this.mVariableNameCell;
            }
        }
        #endregion
        
        #region Fields
        private InputCell2 mInputCell;
        
        private OutputCell mOutputCell;
        
        private VariableNameCell mVariableNameCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell2 : WpfCell
    {
        
        public InputCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell : WpfCell
    {
        
        public OutputCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableNameCell : WpfCell
    {
        
        public VariableNameCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor(this);
                }
                return this.mValueEditor;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor mValueEditor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor : WpfCustom
    {
        
        public ValueEditor(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TextBox1 TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new TextBox1(this);
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private TextBox1 mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TextBox1 : WpfEdit
    {
        
        public TextBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem2 : WpfControl
    {
        
        public DataItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputCell3 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell3(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell1 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell1(this);
                }
                return this.mOutputCell;
            }
        }
        
        public VariableNameCell1 VariableNameCell
        {
            get
            {
                if ((this.mVariableNameCell == null))
                {
                    this.mVariableNameCell = new VariableNameCell1(this);
                }
                return this.mVariableNameCell;
            }
        }
        #endregion
        
        #region Fields
        private InputCell3 mInputCell;
        
        private OutputCell1 mOutputCell;
        
        private VariableNameCell1 mVariableNameCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell3 : WpfCell
    {
        
        public InputCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell1 : WpfCell
    {
        
        public OutputCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableNameCell1 : WpfCell
    {
        
        public VariableNameCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor1 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor1(this);
                }
                return this.mValueEditor;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor1 mValueEditor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor1 : WpfCustom
    {
        
        public ValueEditor1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TextBox2 TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new TextBox2(this);
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private TextBox2 mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TextBox2 : WpfEdit
    {
        
        public TextBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem3 : WpfControl
    {
        
        public DataItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputCell4 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell4(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell2 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell2(this);
                }
                return this.mOutputCell;
            }
        }
        
        public VariableNameCell2 VariableNameCell
        {
            get
            {
                if ((this.mVariableNameCell == null))
                {
                    this.mVariableNameCell = new VariableNameCell2(this);
                }
                return this.mVariableNameCell;
            }
        }
        #endregion
        
        #region Fields
        private InputCell4 mInputCell;
        
        private OutputCell2 mOutputCell;
        
        private VariableNameCell2 mVariableNameCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell4 : WpfCell
    {
        
        public InputCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell2 : WpfCell
    {
        
        public OutputCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableNameCell2 : WpfCell
    {
        
        public VariableNameCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor2 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor2(this);
                }
                return this.mValueEditor;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor2 mValueEditor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor2 : WpfCustom
    {
        
        public ValueEditor2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TextBox3 TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new TextBox3(this);
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private TextBox3 mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TextBox3 : WpfEdit
    {
        
        public TextBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem4 : WpfControl
    {
        
        public DataItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputCell5 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell5(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell3 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell3(this);
                }
                return this.mOutputCell;
            }
        }
        
        public VariableNameCell3 VariableNameCell
        {
            get
            {
                if ((this.mVariableNameCell == null))
                {
                    this.mVariableNameCell = new VariableNameCell3(this);
                }
                return this.mVariableNameCell;
            }
        }
        #endregion
        
        #region Fields
        private InputCell5 mInputCell;
        
        private OutputCell3 mOutputCell;
        
        private VariableNameCell3 mVariableNameCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell5 : WpfCell
    {
        
        public InputCell5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell3 : WpfCell
    {
        
        public OutputCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableNameCell3 : WpfCell
    {
        
        public VariableNameCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor3 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor3(this);
                }
                return this.mValueEditor;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor3 mValueEditor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor3 : WpfCustom
    {
        
        public ValueEditor3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TextBox4 TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new TextBox4(this);
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private TextBox4 mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TextBox4 : WpfEdit
    {
        
        public TextBox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem5 : WpfControl
    {
        
        public DataItem5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputCell6 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell6(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell4 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell4(this);
                }
                return this.mOutputCell;
            }
        }
        
        public VariableNameCell4 VariableNameCell
        {
            get
            {
                if ((this.mVariableNameCell == null))
                {
                    this.mVariableNameCell = new VariableNameCell4(this);
                }
                return this.mVariableNameCell;
            }
        }
        #endregion
        
        #region Fields
        private InputCell6 mInputCell;
        
        private OutputCell4 mOutputCell;
        
        private VariableNameCell4 mVariableNameCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell6 : WpfCell
    {
        
        public InputCell6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell4 : WpfCell
    {
        
        public OutputCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableNameCell4 : WpfCell
    {
        
        public VariableNameCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor4 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor4(this);
                }
                return this.mValueEditor;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor4 mValueEditor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor4 : WpfCustom
    {
        
        public ValueEditor4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TextBox5 TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new TextBox5(this);
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private TextBox5 mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TextBox5 : WpfEdit
    {
        
        public TextBox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetDataItem : WpfControl
    {
        
        public RecordsetDataItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Recordset";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DisplayNameHeaderCell1 DisplayNameHeaderCell
        {
            get
            {
                if ((this.mDisplayNameHeaderCell == null))
                {
                    this.mDisplayNameHeaderCell = new DisplayNameHeaderCell1(this);
                }
                return this.mDisplayNameHeaderCell;
            }
        }
        
        public InputHeaderCell1 InputHeaderCell
        {
            get
            {
                if ((this.mInputHeaderCell == null))
                {
                    this.mInputHeaderCell = new InputHeaderCell1(this);
                }
                return this.mInputHeaderCell;
            }
        }
        
        public OutputHeaderCell1 OutputHeaderCell
        {
            get
            {
                if ((this.mOutputHeaderCell == null))
                {
                    this.mOutputHeaderCell = new OutputHeaderCell1(this);
                }
                return this.mOutputHeaderCell;
            }
        }
        
        public List1 List
        {
            get
            {
                if ((this.mList == null))
                {
                    this.mList = new List1(this);
                }
                return this.mList;
            }
        }
        #endregion
        
        #region Fields
        private DisplayNameHeaderCell1 mDisplayNameHeaderCell;
        
        private InputHeaderCell1 mInputHeaderCell;
        
        private OutputHeaderCell1 mOutputHeaderCell;
        
        private List1 mList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DisplayNameHeaderCell1 : WpfCell
    {
        
        public DisplayNameHeaderCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = " Display Name";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText RecordsetText
        {
            get
            {
                if ((this.mRecordsetText == null))
                {
                    this.mRecordsetText = new WpfText(this);
                    #region Search Criteria
                    this.mRecordsetText.SearchProperties[WpfText.PropertyNames.Name] = "Recordset";
                    this.mRecordsetText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordsetText;
            }
        }
        
        public WpfCustom ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mValueEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
                    this.mValueEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueEditor;
            }
        }
        
        public WpfToggleButton ExpanderToggleButton
        {
            get
            {
                if ((this.mExpanderToggleButton == null))
                {
                    this.mExpanderToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mExpanderToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Expander";
                    this.mExpanderToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mRecordsetText;
        
        private WpfCustom mValueEditor;
        
        private WpfToggleButton mExpanderToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputHeaderCell1 : WpfCell
    {
        
        public InputHeaderCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.AutomationId] = "TextBlock";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputHeaderCell1 : WpfCell
    {
        
        public OutputHeaderCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.AutomationId] = "TextBlock";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class List1 : WpfList
    {
        
        public List1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ListItem1 ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new ListItem1(this);
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private ListItem1 mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListItem1 : WpfListItem
    {
        
        public ListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Children";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Table2 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table2(this);
                }
                return this.mTable;
            }
        }
        #endregion
        
        #region Fields
        private Table2 mTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table2 : WpfTable
    {
        
        public Table2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataItem11 DataItem1
        {
            get
            {
                if ((this.mDataItem1 == null))
                {
                    this.mDataItem1 = new DataItem11(this);
                }
                return this.mDataItem1;
            }
        }
        
        public DataItem21 DataItem2
        {
            get
            {
                if ((this.mDataItem2 == null))
                {
                    this.mDataItem2 = new DataItem21(this);
                }
                return this.mDataItem2;
            }
        }
        
        public DataItem31 DataItem3
        {
            get
            {
                if ((this.mDataItem3 == null))
                {
                    this.mDataItem3 = new DataItem31(this);
                }
                return this.mDataItem3;
            }
        }
        
        public DataItem41 DataItem4
        {
            get
            {
                if ((this.mDataItem4 == null))
                {
                    this.mDataItem4 = new DataItem41(this);
                }
                return this.mDataItem4;
            }
        }
        
        public DataItem51 DataItem5
        {
            get
            {
                if ((this.mDataItem5 == null))
                {
                    this.mDataItem5 = new DataItem51(this);
                }
                return this.mDataItem5;
            }
        }
        #endregion
        
        #region Fields
        private DataItem11 mDataItem1;
        
        private DataItem21 mDataItem2;
        
        private DataItem31 mDataItem3;
        
        private DataItem41 mDataItem4;
        
        private DataItem51 mDataItem5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem11 : WpfControl
    {
        
        public DataItem11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RecordsetNameCell RecordsetNameCell
        {
            get
            {
                if ((this.mRecordsetNameCell == null))
                {
                    this.mRecordsetNameCell = new RecordsetNameCell(this);
                }
                return this.mRecordsetNameCell;
            }
        }
        
        public InputCell7 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell7(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell5 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell5(this);
                }
                return this.mOutputCell;
            }
        }
        
        public List2 List
        {
            get
            {
                if ((this.mList == null))
                {
                    this.mList = new List2(this);
                }
                return this.mList;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameCell mRecordsetNameCell;
        
        private InputCell7 mInputCell;
        
        private OutputCell5 mOutputCell;
        
        private List2 mList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetNameCell : WpfCell
    {
        
        public RecordsetNameCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor5 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor5(this);
                }
                return this.mValueEditor;
            }
        }
        
        public WpfToggleButton ExpanderToggleButton
        {
            get
            {
                if ((this.mExpanderToggleButton == null))
                {
                    this.mExpanderToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mExpanderToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Expander";
                    this.mExpanderToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor5 mValueEditor;
        
        private WpfToggleButton mExpanderToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor5 : WpfCustom
    {
        
        public ValueEditor5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell7 : WpfCell
    {
        
        public InputCell7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell5 : WpfCell
    {
        
        public OutputCell5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mValueEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
                    this.mValueEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueEditor;
            }
        }
        
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mValueEditor;
        
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class List2 : WpfList
    {
        
        public List2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ListItem2 ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new ListItem2(this);
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private ListItem2 mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListItem2 : WpfListItem
    {
        
        public ListItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Children";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Table3 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table3(this);
                }
                return this.mTable;
            }
        }
        #endregion
        
        #region Fields
        private Table3 mTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table3 : WpfTable
    {
        
        public Table3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataItem DataItem
        {
            get
            {
                if ((this.mDataItem == null))
                {
                    this.mDataItem = new DataItem(this);
                }
                return this.mDataItem;
            }
        }
        #endregion
        
        #region Fields
        private DataItem mDataItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem : WpfControl
    {
        
        public DataItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ExpansionIndicatorButton
        {
            get
            {
                if ((this.mExpansionIndicatorButton == null))
                {
                    this.mExpansionIndicatorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpansionIndicatorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExpansionIndicator";
                    this.mExpansionIndicatorButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpansionIndicatorButton;
            }
        }
        
        public FieldNameCell FieldNameCell
        {
            get
            {
                if ((this.mFieldNameCell == null))
                {
                    this.mFieldNameCell = new FieldNameCell(this);
                }
                return this.mFieldNameCell;
            }
        }
        
        public InputCell8 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell8(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell6 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell6(this);
                }
                return this.mOutputCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mExpansionIndicatorButton;
        
        private FieldNameCell mFieldNameCell;
        
        private InputCell8 mInputCell;
        
        private OutputCell6 mOutputCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FieldNameCell : WpfCell
    {
        
        public FieldNameCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor6 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor6(this);
                }
                return this.mValueEditor;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor6 mValueEditor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor6 : WpfCustom
    {
        
        public ValueEditor6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell8 : WpfCell
    {
        
        public InputCell8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell6 : WpfCell
    {
        
        public OutputCell6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem21 : WpfControl
    {
        
        public DataItem21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RecordsetNameCell1 RecordsetNameCell
        {
            get
            {
                if ((this.mRecordsetNameCell == null))
                {
                    this.mRecordsetNameCell = new RecordsetNameCell1(this);
                }
                return this.mRecordsetNameCell;
            }
        }
        
        public InputCell9 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell9(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell7 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell7(this);
                }
                return this.mOutputCell;
            }
        }
        
        public List3 List
        {
            get
            {
                if ((this.mList == null))
                {
                    this.mList = new List3(this);
                }
                return this.mList;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameCell1 mRecordsetNameCell;
        
        private InputCell9 mInputCell;
        
        private OutputCell7 mOutputCell;
        
        private List3 mList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetNameCell1 : WpfCell
    {
        
        public RecordsetNameCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor7 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor7(this);
                }
                return this.mValueEditor;
            }
        }
        
        public WpfToggleButton UIPART_ExpanderToggleButton
        {
            get
            {
                if ((this.mUIPART_ExpanderToggleButton == null))
                {
                    this.mUIPART_ExpanderToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIPART_ExpanderToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Expander";
                    this.mUIPART_ExpanderToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIPART_ExpanderToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor7 mValueEditor;
        
        private WpfToggleButton mUIPART_ExpanderToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor7 : WpfCustom
    {
        
        public ValueEditor7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell9 : WpfCell
    {
        
        public InputCell9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell7 : WpfCell
    {
        
        public OutputCell7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mValueEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
                    this.mValueEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueEditor;
            }
        }
        
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mValueEditor;
        
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class List3 : WpfList
    {
        
        public List3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ListItem3 ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new ListItem3(this);
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private ListItem3 mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListItem3 : WpfListItem
    {
        
        public ListItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Children";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Table4 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table4(this);
                }
                return this.mTable;
            }
        }
        #endregion
        
        #region Fields
        private Table4 mTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table4 : WpfTable
    {
        
        public Table4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataItem6 DataItem
        {
            get
            {
                if ((this.mDataItem == null))
                {
                    this.mDataItem = new DataItem6(this);
                }
                return this.mDataItem;
            }
        }
        #endregion
        
        #region Fields
        private DataItem6 mDataItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem6 : WpfControl
    {
        
        public DataItem6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ExpansionIndicatorButton
        {
            get
            {
                if ((this.mExpansionIndicatorButton == null))
                {
                    this.mExpansionIndicatorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpansionIndicatorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExpansionIndicator";
                    this.mExpansionIndicatorButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpansionIndicatorButton;
            }
        }
        
        public WpfCell FieldNameCell
        {
            get
            {
                if ((this.mFieldNameCell == null))
                {
                    this.mFieldNameCell = new WpfCell(this);
                    #region Search Criteria
                    this.mFieldNameCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
                    this.mFieldNameCell.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFieldNameCell;
            }
        }
        
        public InputCell10 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell10(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell8 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell8(this);
                }
                return this.mOutputCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mExpansionIndicatorButton;
        
        private WpfCell mFieldNameCell;
        
        private InputCell10 mInputCell;
        
        private OutputCell8 mOutputCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell10 : WpfCell
    {
        
        public InputCell10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell8 : WpfCell
    {
        
        public OutputCell8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem31 : WpfControl
    {
        
        public DataItem31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RecordsetNameCell2 RecordsetNameCell
        {
            get
            {
                if ((this.mRecordsetNameCell == null))
                {
                    this.mRecordsetNameCell = new RecordsetNameCell2(this);
                }
                return this.mRecordsetNameCell;
            }
        }
        
        public InputCell11 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell11(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell9 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell9(this);
                }
                return this.mOutputCell;
            }
        }
        
        public List4 List
        {
            get
            {
                if ((this.mList == null))
                {
                    this.mList = new List4(this);
                }
                return this.mList;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameCell2 mRecordsetNameCell;
        
        private InputCell11 mInputCell;
        
        private OutputCell9 mOutputCell;
        
        private List4 mList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetNameCell2 : WpfCell
    {
        
        public RecordsetNameCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor8 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor8(this);
                }
                return this.mValueEditor;
            }
        }
        
        public WpfToggleButton UIPART_ExpanderToggleButton
        {
            get
            {
                if ((this.mUIPART_ExpanderToggleButton == null))
                {
                    this.mUIPART_ExpanderToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIPART_ExpanderToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Expander";
                    this.mUIPART_ExpanderToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIPART_ExpanderToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor8 mValueEditor;
        
        private WpfToggleButton mUIPART_ExpanderToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor8 : WpfCustom
    {
        
        public ValueEditor8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell11 : WpfCell
    {
        
        public InputCell11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell9 : WpfCell
    {
        
        public OutputCell9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mValueEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
                    this.mValueEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueEditor;
            }
        }
        
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mValueEditor;
        
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class List4 : WpfList
    {
        
        public List4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ListItem4 ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new ListItem4(this);
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private ListItem4 mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListItem4 : WpfListItem
    {
        
        public ListItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Children";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Table5 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table5(this);
                }
                return this.mTable;
            }
        }
        #endregion
        
        #region Fields
        private Table5 mTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table5 : WpfTable
    {
        
        public Table5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataItem7 DataItem
        {
            get
            {
                if ((this.mDataItem == null))
                {
                    this.mDataItem = new DataItem7(this);
                }
                return this.mDataItem;
            }
        }
        #endregion
        
        #region Fields
        private DataItem7 mDataItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem7 : WpfControl
    {
        
        public DataItem7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ExpansionIndicatorButton
        {
            get
            {
                if ((this.mExpansionIndicatorButton == null))
                {
                    this.mExpansionIndicatorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpansionIndicatorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExpansionIndicator";
                    this.mExpansionIndicatorButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpansionIndicatorButton;
            }
        }
        
        public WpfCell FieldNameCell
        {
            get
            {
                if ((this.mFieldNameCell == null))
                {
                    this.mFieldNameCell = new WpfCell(this);
                    #region Search Criteria
                    this.mFieldNameCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
                    this.mFieldNameCell.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFieldNameCell;
            }
        }
        
        public InputCell12 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell12(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell10 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell10(this);
                }
                return this.mOutputCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mExpansionIndicatorButton;
        
        private WpfCell mFieldNameCell;
        
        private InputCell12 mInputCell;
        
        private OutputCell10 mOutputCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell12 : WpfCell
    {
        
        public InputCell12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell10 : WpfCell
    {
        
        public OutputCell10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem41 : WpfControl
    {
        
        public DataItem41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RecordsetNameCell3 RecordsetNameCell
        {
            get
            {
                if ((this.mRecordsetNameCell == null))
                {
                    this.mRecordsetNameCell = new RecordsetNameCell3(this);
                }
                return this.mRecordsetNameCell;
            }
        }
        
        public InputCell13 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell13(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell11 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell11(this);
                }
                return this.mOutputCell;
            }
        }
        
        public List5 List
        {
            get
            {
                if ((this.mList == null))
                {
                    this.mList = new List5(this);
                }
                return this.mList;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameCell3 mRecordsetNameCell;
        
        private InputCell13 mInputCell;
        
        private OutputCell11 mOutputCell;
        
        private List5 mList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetNameCell3 : WpfCell
    {
        
        public RecordsetNameCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor9 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor9(this);
                }
                return this.mValueEditor;
            }
        }
        
        public WpfToggleButton UIPART_ExpanderToggleButton
        {
            get
            {
                if ((this.mUIPART_ExpanderToggleButton == null))
                {
                    this.mUIPART_ExpanderToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIPART_ExpanderToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Expander";
                    this.mUIPART_ExpanderToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIPART_ExpanderToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor9 mValueEditor;
        
        private WpfToggleButton mUIPART_ExpanderToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor9 : WpfCustom
    {
        
        public ValueEditor9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell13 : WpfCell
    {
        
        public InputCell13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell11 : WpfCell
    {
        
        public OutputCell11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mValueEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
                    this.mValueEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueEditor;
            }
        }
        
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mValueEditor;
        
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class List5 : WpfList
    {
        
        public List5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ListItem5 ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new ListItem5(this);
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private ListItem5 mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListItem5 : WpfListItem
    {
        
        public ListItem5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Children";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Table6 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table6(this);
                }
                return this.mTable;
            }
        }
        #endregion
        
        #region Fields
        private Table6 mTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table6 : WpfTable
    {
        
        public Table6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataItem8 DataItem
        {
            get
            {
                if ((this.mDataItem == null))
                {
                    this.mDataItem = new DataItem8(this);
                }
                return this.mDataItem;
            }
        }
        #endregion
        
        #region Fields
        private DataItem8 mDataItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem8 : WpfControl
    {
        
        public DataItem8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ExpansionIndicatorButton
        {
            get
            {
                if ((this.mExpansionIndicatorButton == null))
                {
                    this.mExpansionIndicatorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpansionIndicatorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExpansionIndicator";
                    this.mExpansionIndicatorButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpansionIndicatorButton;
            }
        }
        
        public WpfCell FieldNameCell
        {
            get
            {
                if ((this.mFieldNameCell == null))
                {
                    this.mFieldNameCell = new WpfCell(this);
                    #region Search Criteria
                    this.mFieldNameCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
                    this.mFieldNameCell.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFieldNameCell;
            }
        }
        
        public InputCell14 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell14(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell12 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell12(this);
                }
                return this.mOutputCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mExpansionIndicatorButton;
        
        private WpfCell mFieldNameCell;
        
        private InputCell14 mInputCell;
        
        private OutputCell12 mOutputCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell14 : WpfCell
    {
        
        public InputCell14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell12 : WpfCell
    {
        
        public OutputCell12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem51 : WpfControl
    {
        
        public DataItem51(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RecordsetNameCell4 RecordsetNameCell
        {
            get
            {
                if ((this.mRecordsetNameCell == null))
                {
                    this.mRecordsetNameCell = new RecordsetNameCell4(this);
                }
                return this.mRecordsetNameCell;
            }
        }
        
        public InputCell15 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell15(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell13 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell13(this);
                }
                return this.mOutputCell;
            }
        }
        
        public List6 List
        {
            get
            {
                if ((this.mList == null))
                {
                    this.mList = new List6(this);
                }
                return this.mList;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameCell4 mRecordsetNameCell;
        
        private InputCell15 mInputCell;
        
        private OutputCell13 mOutputCell;
        
        private List6 mList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetNameCell4 : WpfCell
    {
        
        public RecordsetNameCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor10 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor10(this);
                }
                return this.mValueEditor;
            }
        }
        
        public WpfToggleButton UIPART_ExpanderToggleButton
        {
            get
            {
                if ((this.mUIPART_ExpanderToggleButton == null))
                {
                    this.mUIPART_ExpanderToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIPART_ExpanderToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Expander";
                    this.mUIPART_ExpanderToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIPART_ExpanderToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor10 mValueEditor;
        
        private WpfToggleButton mUIPART_ExpanderToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor10 : WpfCustom
    {
        
        public ValueEditor10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell15 : WpfCell
    {
        
        public InputCell15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell13 : WpfCell
    {
        
        public OutputCell13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mValueEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
                    this.mValueEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueEditor;
            }
        }
        
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mValueEditor;
        
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class List6 : WpfList
    {
        
        public List6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ListItem6 ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new ListItem6(this);
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private ListItem6 mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListItem6 : WpfListItem
    {
        
        public ListItem6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Children";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Table7 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table7(this);
                }
                return this.mTable;
            }
        }
        #endregion
        
        #region Fields
        private Table7 mTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table7 : WpfTable
    {
        
        public Table7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataItem9 DataItem
        {
            get
            {
                if ((this.mDataItem == null))
                {
                    this.mDataItem = new DataItem9(this);
                }
                return this.mDataItem;
            }
        }
        #endregion
        
        #region Fields
        private DataItem9 mDataItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem9 : WpfControl
    {
        
        public DataItem9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ExpansionIndicatorButton
        {
            get
            {
                if ((this.mExpansionIndicatorButton == null))
                {
                    this.mExpansionIndicatorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpansionIndicatorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExpansionIndicator";
                    this.mExpansionIndicatorButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpansionIndicatorButton;
            }
        }
        
        public WpfCell FieldNameCell
        {
            get
            {
                if ((this.mFieldNameCell == null))
                {
                    this.mFieldNameCell = new WpfCell(this);
                    #region Search Criteria
                    this.mFieldNameCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
                    this.mFieldNameCell.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFieldNameCell;
            }
        }
        
        public InputCell16 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell16(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell14 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell14(this);
                }
                return this.mOutputCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mExpansionIndicatorButton;
        
        private WpfCell mFieldNameCell;
        
        private InputCell16 mInputCell;
        
        private OutputCell14 mOutputCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell16 : WpfCell
    {
        
        public InputCell16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell14 : WpfCell
    {
        
        public OutputCell14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ObjectDataItem : WpfControl
    {
        
        public ObjectDataItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Object";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DisplayNameHeaderCell2 DisplayNameHeaderCell
        {
            get
            {
                if ((this.mDisplayNameHeaderCell == null))
                {
                    this.mDisplayNameHeaderCell = new DisplayNameHeaderCell2(this);
                }
                return this.mDisplayNameHeaderCell;
            }
        }
        
        public WpfCell InputHeaderCell
        {
            get
            {
                if ((this.mInputHeaderCell == null))
                {
                    this.mInputHeaderCell = new WpfCell(this);
                    #region Search Criteria
                    this.mInputHeaderCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
                    this.mInputHeaderCell.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputHeaderCell;
            }
        }
        
        public WpfCell OutputHeaderCell
        {
            get
            {
                if ((this.mOutputHeaderCell == null))
                {
                    this.mOutputHeaderCell = new WpfCell(this);
                    #region Search Criteria
                    this.mOutputHeaderCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
                    this.mOutputHeaderCell.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputHeaderCell;
            }
        }
        #endregion
        
        #region Fields
        private DisplayNameHeaderCell2 mDisplayNameHeaderCell;
        
        private WpfCell mInputHeaderCell;
        
        private WpfCell mOutputHeaderCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DisplayNameHeaderCell2 : WpfCell
    {
        
        public DisplayNameHeaderCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = " Display Name";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText ObjectText
        {
            get
            {
                if ((this.mObjectText == null))
                {
                    this.mObjectText = new WpfText(this);
                    #region Search Criteria
                    this.mObjectText.SearchProperties[WpfText.PropertyNames.Name] = "Object";
                    this.mObjectText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mObjectText;
            }
        }
        
        public WpfCustom ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mValueEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
                    this.mValueEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueEditor;
            }
        }
        
        public WpfToggleButton ExpanderToggleButton
        {
            get
            {
                if ((this.mExpanderToggleButton == null))
                {
                    this.mExpanderToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mExpanderToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Expander";
                    this.mExpanderToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mObjectText;
        
        private WpfCustom mValueEditor;
        
        private WpfToggleButton mExpanderToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableSearchTextBoxEdit : WpfEdit
    {
        
        public VariableSearchTextBoxEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfText FilterText
        {
            get
            {
                if ((this.mFilterText == null))
                {
                    this.mFilterText = new WpfText(this);
                    #region Search Criteria
                    this.mFilterText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mFilterText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mFilterText;
            }
        }
        
        public WpfButton ClearSearchButton
        {
            get
            {
                if ((this.mClearSearchButton == null))
                {
                    this.mClearSearchButton = new WpfButton(this);
                    #region Search Criteria
                    this.mClearSearchButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ClearSearchButton";
                    this.mClearSearchButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mClearSearchButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mFilterText;
        
        private WpfButton mClearSearchButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DebugOutput : WpfCustom
    {
        
        public DebugOutput(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DebugOutputView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DebugOutput";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DebugOutputUnpinBtn
        {
            get
            {
                if ((this.mDebugOutputUnpinBtn == null))
                {
                    this.mDebugOutputUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mDebugOutputUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mDebugOutputUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDebugOutputUnpinBtn;
            }
        }
        
        public WpfEdit SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSearchTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mSearchTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSearchTextBox;
            }
        }
        
        public WpfButton SettingsButton
        {
            get
            {
                if ((this.mSettingsButton == null))
                {
                    this.mSettingsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSettingsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DebugOutputOptionsButton_AutoID";
                    this.mSettingsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSettingsButton;
            }
        }
        
        public WpfButton ExpandCollapseButton
        {
            get
            {
                if ((this.mExpandCollapseButton == null))
                {
                    this.mExpandCollapseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpandCollapseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DebugOutputExpandAllMode_AutoID";
                    this.mExpandCollapseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpandCollapseButton;
            }
        }
        
        public DebugOutputTree DebugOutputTree
        {
            get
            {
                if ((this.mDebugOutputTree == null))
                {
                    this.mDebugOutputTree = new DebugOutputTree(this);
                }
                return this.mDebugOutputTree;
            }
        }
        
        public StatusBar StatusBar
        {
            get
            {
                if ((this.mStatusBar == null))
                {
                    this.mStatusBar = new StatusBar(this);
                }
                return this.mStatusBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDebugOutputUnpinBtn;
        
        private WpfEdit mSearchTextBox;
        
        private WpfButton mSettingsButton;
        
        private WpfButton mExpandCollapseButton;
        
        private DebugOutputTree mDebugOutputTree;
        
        private StatusBar mStatusBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DebugOutputTree : WpfTree
    {
        
        public DebugOutputTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "DebugOutputTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Step1 Step1
        {
            get
            {
                if ((this.mStep1 == null))
                {
                    this.mStep1 = new Step1(this);
                }
                return this.mStep1;
            }
        }
        
        public SubWorkflow SubWorkflow
        {
            get
            {
                if ((this.mSubWorkflow == null))
                {
                    this.mSubWorkflow = new SubWorkflow(this);
                }
                return this.mSubWorkflow;
            }
        }
        
        public ServiceTreeItem ServiceTreeItem
        {
            get
            {
                if ((this.mServiceTreeItem == null))
                {
                    this.mServiceTreeItem = new ServiceTreeItem(this);
                }
                return this.mServiceTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private Step1 mStep1;
        
        private SubWorkflow mSubWorkflow;
        
        private ServiceTreeItem mServiceTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Step1 : WpfTreeItem
    {
        
        public Step1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Step";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText VariableTextbox
        {
            get
            {
                if ((this.mVariableTextbox == null))
                {
                    this.mVariableTextbox = new WpfText(this);
                    #region Search Criteria
                    this.mVariableTextbox.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_DebugOutputVariableTextBlock_AutoID";
                    this.mVariableTextbox.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mVariableTextbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextbox;
            }
        }
        
        public WpfButton Assign1Button
        {
            get
            {
                if ((this.mAssign1Button == null))
                {
                    this.mAssign1Button = new WpfButton(this);
                    #region Search Criteria
                    this.mAssign1Button.SearchProperties[WpfButton.PropertyNames.Name] = "Assign (1)";
                    this.mAssign1Button.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssign1Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssign1Button;
            }
        }
        
        public WpfButton BaseConversion1Button
        {
            get
            {
                if ((this.mBaseConversion1Button == null))
                {
                    this.mBaseConversion1Button = new WpfButton(this);
                    #region Search Criteria
                    this.mBaseConversion1Button.SearchProperties[WpfButton.PropertyNames.Name] = "Base Conversion (1)";
                    this.mBaseConversion1Button.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mBaseConversion1Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mBaseConversion1Button;
            }
        }
        
        public WpfButton CalculateButton
        {
            get
            {
                if ((this.mCalculateButton == null))
                {
                    this.mCalculateButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCalculateButton.SearchProperties[WpfButton.PropertyNames.Name] = "Calculate";
                    this.mCalculateButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCalculateButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCalculateButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mVariableTextbox;
        
        private WpfButton mAssign1Button;
        
        private WpfButton mBaseConversion1Button;
        
        private WpfButton mCalculateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SubWorkflow : WpfTreeItem
    {
        
        public SubWorkflow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Service";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIHelloWorldTreeItem1 UIHelloWorldTreeItem1
        {
            get
            {
                if ((this.mUIHelloWorldTreeItem1 == null))
                {
                    this.mUIHelloWorldTreeItem1 = new UIHelloWorldTreeItem1(this);
                }
                return this.mUIHelloWorldTreeItem1;
            }
        }
        #endregion
        
        #region Fields
        private UIHelloWorldTreeItem1 mUIHelloWorldTreeItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelloWorldTreeItem1 : WpfTreeItem
    {
        
        public UIHelloWorldTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Start";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton UIHelloWorldButton
        {
            get
            {
                if ((this.mUIHelloWorldButton == null))
                {
                    this.mUIHelloWorldButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIHelloWorldButton.SearchProperties[WpfButton.PropertyNames.Name] = "Hello World";
                    this.mUIHelloWorldButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHelloWorldButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIHelloWorldButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIHelloWorldButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServiceTreeItem : WpfTreeItem
    {
        
        public ServiceTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Service";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton Workflow1Button
        {
            get
            {
                if ((this.mWorkflow1Button == null))
                {
                    this.mWorkflow1Button = new WpfButton(this);
                    #region Search Criteria
                    this.mWorkflow1Button.SearchProperties[WpfButton.PropertyNames.Name] = "workflow1";
                    this.mWorkflow1Button.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mWorkflow1Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWorkflow1Button;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mWorkflow1Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StatusBar : WpfEdit
    {
        
        public StatusBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Dev2StatusBarAutomationID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DebugInputDialog : WpfWindow
    {
        
        public DebugInputDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Debug input data";
            this.SearchProperties[WpfWindow.PropertyNames.ClassName] = "Uia.Window";
            this.SearchProperties[WpfWindow.PropertyNames.AutomationId] = "UI_DebugInputWindow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabItemsTabList TabItemsTabList
        {
            get
            {
                if ((this.mTabItemsTabList == null))
                {
                    this.mTabItemsTabList = new TabItemsTabList(this);
                }
                return this.mTabItemsTabList;
            }
        }
        
        public WpfCheckBox RememberDebugInputCheckBox
        {
            get
            {
                if ((this.mRememberDebugInputCheckBox == null))
                {
                    this.mRememberDebugInputCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRememberDebugInputCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_RememberInputsCb_AutoID";
                    this.mRememberDebugInputCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRememberDebugInputCheckBox;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Cancelbtn_AutoID";
                    this.mCancelButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton DebugF6Button
        {
            get
            {
                if ((this.mDebugF6Button == null))
                {
                    this.mDebugF6Button = new WpfButton(this);
                    #region Search Criteria
                    this.mDebugF6Button.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Executebtn_AutoID";
                    this.mDebugF6Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDebugF6Button;
            }
        }
        
        public WpfButton ViewInBrowserF7Button
        {
            get
            {
                if ((this.mViewInBrowserF7Button == null))
                {
                    this.mViewInBrowserF7Button = new WpfButton(this);
                    #region Search Criteria
                    this.mViewInBrowserF7Button.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Browserbtn_AutoID";
                    this.mViewInBrowserF7Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewInBrowserF7Button;
            }
        }
        #endregion
        
        #region Fields
        private TabItemsTabList mTabItemsTabList;
        
        private WpfCheckBox mRememberDebugInputCheckBox;
        
        private WpfButton mCancelButton;
        
        private WpfButton mDebugF6Button;
        
        private WpfButton mViewInBrowserF7Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabItemsTabList : WpfTabList
    {
        
        public TabItemsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "TabItems";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputDataTab InputDataTab
        {
            get
            {
                if ((this.mInputDataTab == null))
                {
                    this.mInputDataTab = new InputDataTab(this);
                }
                return this.mInputDataTab;
            }
        }
        
        public XMLTab XMLTab
        {
            get
            {
                if ((this.mXMLTab == null))
                {
                    this.mXMLTab = new XMLTab(this);
                }
                return this.mXMLTab;
            }
        }
        
        public JSONTab JSONTab
        {
            get
            {
                if ((this.mJSONTab == null))
                {
                    this.mJSONTab = new JSONTab(this);
                }
                return this.mJSONTab;
            }
        }
        #endregion
        
        #region Fields
        private InputDataTab mInputDataTab;
        
        private XMLTab mXMLTab;
        
        private JSONTab mJSONTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputDataTab : WpfTabPage
    {
        
        public InputDataTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "UI_InputDataTab_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputsTable1 InputsTable
        {
            get
            {
                if ((this.mInputsTable == null))
                {
                    this.mInputsTable = new InputsTable1(this);
                }
                return this.mInputsTable;
            }
        }
        #endregion
        
        #region Fields
        private InputsTable1 mInputsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputsTable1 : WpfTable
    {
        
        public InputsTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "DataListInputs";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row110 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row110(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row110 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row110 : WpfPane
    {
        
        public Row110(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "0";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Cell3 Cell
        {
            get
            {
                if ((this.mCell == null))
                {
                    this.mCell = new Cell3(this);
                }
                return this.mCell;
            }
        }
        #endregion
        
        #region Fields
        private Cell3 mCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell3 : WpfCell
    {
        
        public Cell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputValueCell InputValueCell
        {
            get
            {
                if ((this.mInputValueCell == null))
                {
                    this.mInputValueCell = new InputValueCell(this);
                }
                return this.mInputValueCell;
            }
        }
        
        public ComboBox2 ComboBox
        {
            get
            {
                if ((this.mComboBox == null))
                {
                    this.mComboBox = new ComboBox2(this);
                }
                return this.mComboBox;
            }
        }
        #endregion
        
        #region Fields
        private InputValueCell mInputValueCell;
        
        private ComboBox2 mComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputValueCell : WpfCell
    {
        
        public InputValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "100";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public InputValueComboboxl InputValueComboboxl
        {
            get
            {
                if ((this.mInputValueComboboxl == null))
                {
                    this.mInputValueComboboxl = new InputValueComboboxl(this);
                }
                return this.mInputValueComboboxl;
            }
        }
        #endregion
        
        #region Fields
        private InputValueComboboxl mInputValueComboboxl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputValueComboboxl : WpfComboBox
    {
        
        public InputValueComboboxl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_SomeVariabletxt_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit InputValueText
        {
            get
            {
                if ((this.mInputValueText == null))
                {
                    this.mInputValueText = new WpfEdit(this);
                    #region Search Criteria
                    this.mInputValueText.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mInputValueText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mInputValueText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mInputValueText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboBox2 : WpfComboBox
    {
        
        public ComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_SomeVariabletxt_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XMLTab : WpfTabPage
    {
        
        public XMLTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "UI_XMLTab_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom XMLWindow
        {
            get
            {
                if ((this.mXMLWindow == null))
                {
                    this.mXMLWindow = new WpfCustom(this);
                    #region Search Criteria
                    this.mXMLWindow.SearchProperties[WpfControl.PropertyNames.ClassName] = null;
                    this.mXMLWindow.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_XMLEditor_AutoID";
                    this.mXMLWindow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mXMLWindow;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mXMLWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class JSONTab : WpfTabPage
    {
        
        public JSONTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "UI_XMLTab_AutoID";
            this.SearchProperties[WpfTabPage.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom JSONWindow
        {
            get
            {
                if ((this.mJSONWindow == null))
                {
                    this.mJSONWindow = new WpfCustom(this);
                    #region Search Criteria
                    this.mJSONWindow.SearchProperties[WpfControl.PropertyNames.ClassName] = null;
                    this.mJSONWindow.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_JsonEditor_AutoID";
                    this.mJSONWindow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mJSONWindow;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mJSONWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAsNewRemoteServer : WpfCustom
    {
        
        public ComboboxListItemAsNewRemoteServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "New Remote Server...";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText NewRemoteServerItemText
        {
            get
            {
                if ((this.mNewRemoteServerItemText == null))
                {
                    this.mNewRemoteServerItemText = new WpfText(this);
                    #region Search Criteria
                    this.mNewRemoteServerItemText.SearchProperties[WpfText.PropertyNames.Name] = "New Remote Server...";
                    this.mNewRemoteServerItemText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewRemoteServerItemText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mNewRemoteServerItemText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAsMicrosoftSQLServer : WpfCustom
    {
        
        public ComboboxListItemAsMicrosoftSQLServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Microsoft SQL Server";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText MicrosoftSQLServerText
        {
            get
            {
                if ((this.mMicrosoftSQLServerText == null))
                {
                    this.mMicrosoftSQLServerText = new WpfText(this);
                    #region Search Criteria
                    this.mMicrosoftSQLServerText.SearchProperties[WpfText.PropertyNames.Name] = "Microsoft SQL Server";
                    this.mMicrosoftSQLServerText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMicrosoftSQLServerText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mMicrosoftSQLServerText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemPostgreSqlDatabase : WpfCustom
    {
        
        public ComboboxListItemPostgreSqlDatabase(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "PostgreSQL Database";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfText PostgreSQLDatabase
        {
            get
            {
                if ((this.mPostgreSQLDatabase == null))
                {
                    this.mPostgreSQLDatabase = new WpfText(this);
                    #region Search Criteria
                    this.mPostgreSQLDatabase.SearchProperties[WpfText.PropertyNames.Name] = "PostgreSQL Database";
                    this.mPostgreSQLDatabase.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mPostgreSQLDatabase;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mPostgreSQLDatabase;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemODBCDatabase : WpfCustom
    {
        
        public ComboboxListItemODBCDatabase(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "ODBC Database";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfText ODBCDatabaseText
        {
            get
            {
                if ((this.mODBCDatabaseText == null))
                {
                    this.mODBCDatabaseText = new WpfText(this);
                    #region Search Criteria
                    this.mODBCDatabaseText.SearchProperties[WpfText.PropertyNames.Name] = "ODBC Database";
                    this.mODBCDatabaseText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mODBCDatabaseText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mODBCDatabaseText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemMySqlDatabase : WpfCustom
    {
        
        public ComboboxListItemMySqlDatabase(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "MySql Database";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfText MySqlDatabaseText
        {
            get
            {
                if ((this.mMySqlDatabaseText == null))
                {
                    this.mMySqlDatabaseText = new WpfText(this);
                    #region Search Criteria
                    this.mMySqlDatabaseText.SearchProperties[WpfText.PropertyNames.Name] = "MySql Database";
                    this.mMySqlDatabaseText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mMySqlDatabaseText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mMySqlDatabaseText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MessageBoxWindow : WpfWindow
    {
        
        public MessageBoxWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "WarewolfMessageBox";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public YesButton YesButton
        {
            get
            {
                if ((this.mYesButton == null))
                {
                    this.mYesButton = new YesButton(this);
                }
                return this.mYesButton;
            }
        }
        
        public NoButton NoButton
        {
            get
            {
                if ((this.mNoButton == null))
                {
                    this.mNoButton = new NoButton(this);
                }
                return this.mNoButton;
            }
        }
        
        public CancelButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new CancelButton(this);
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton OKButton
        {
            get
            {
                if ((this.mOKButton == null))
                {
                    this.mOKButton = new WpfButton(this);
                    #region Search Criteria
                    this.mOKButton.SearchProperties[WpfButton.PropertyNames.Name] = "OK";
                    this.mOKButton.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mOKButton;
            }
        }
        
        public WpfText UIPleasesavecurrentlyeText
        {
            get
            {
                if ((this.mUIPleasesavecurrentlyeText == null))
                {
                    this.mUIPleasesavecurrentlyeText = new WpfText(this);
                    #region Search Criteria
                    this.mUIPleasesavecurrentlyeText.SearchProperties[WpfText.PropertyNames.Name] = "Please save currently edited Test(s) before running the tests.";
                    this.mUIPleasesavecurrentlyeText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mUIPleasesavecurrentlyeText;
            }
        }
        
        public WpfText UIThenamealreadyexistsText
        {
            get
            {
                if ((this.mUIThenamealreadyexistsText == null))
                {
                    this.mUIThenamealreadyexistsText = new WpfText(this);
                    #region Search Criteria
                    this.mUIThenamealreadyexistsText.SearchProperties[WpfText.PropertyNames.Name] = "The name already exists. Please choose a different name.";
                    this.mUIThenamealreadyexistsText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mUIThenamealreadyexistsText;
            }
        }
        #endregion
        
        #region Fields
        private YesButton mYesButton;
        
        private NoButton mNoButton;
        
        private CancelButton mCancelButton;
        
        private WpfButton mOKButton;
        
        private WpfText mUIPleasesavecurrentlyeText;
        
        private WpfText mUIThenamealreadyexistsText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class YesButton : WpfButton
    {
        
        public YesButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Yes";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText YesButtonText
        {
            get
            {
                if ((this.mYesButtonText == null))
                {
                    this.mYesButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mYesButtonText.SearchProperties[WpfText.PropertyNames.Name] = "Yes";
                    this.mYesButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mYesButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mYesButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NoButton : WpfButton
    {
        
        public NoButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "No";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText NOButtonText
        {
            get
            {
                if ((this.mNOButtonText == null))
                {
                    this.mNOButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mNOButtonText.SearchProperties[WpfText.PropertyNames.Name] = "No";
                    this.mNOButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mNOButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mNOButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CancelButton : WpfButton
    {
        
        public CancelButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Cancel";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText CancelButtonText
        {
            get
            {
                if ((this.mCancelButtonText == null))
                {
                    this.mCancelButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mCancelButtonText.SearchProperties[WpfText.PropertyNames.Name] = "Cancel";
                    this.mCancelButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mCancelButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mCancelButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SaveDialogWindow : WpfWindow
    {
        
        public SaveDialogWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "SaveDialogView";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public ExplorerView ExplorerView
        {
            get
            {
                if ((this.mExplorerView == null))
                {
                    this.mExplorerView = new ExplorerView(this);
                }
                return this.mExplorerView;
            }
        }
        
        public WpfText NameLabel
        {
            get
            {
                if ((this.mNameLabel == null))
                {
                    this.mNameLabel = new WpfText(this);
                    #region Search Criteria
                    this.mNameLabel.SearchProperties[WpfText.PropertyNames.Name] = "Name:";
                    this.mNameLabel.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mNameLabel;
            }
        }
        
        public WpfEdit ServiceNameTextBox
        {
            get
            {
                if ((this.mServiceNameTextBox == null))
                {
                    this.mServiceNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mServiceNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ServiceNameTextBox";
                    this.mServiceNameTextBox.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mServiceNameTextBox;
            }
        }
        
        public WpfText ErrorLabel
        {
            get
            {
                if ((this.mErrorLabel == null))
                {
                    this.mErrorLabel = new WpfText(this);
                    #region Search Criteria
                    this.mErrorLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorMessageTextBlock";
                    this.mErrorLabel.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mErrorLabel;
            }
        }
        
        public WpfButton SaveButton
        {
            get
            {
                if ((this.mSaveButton == null))
                {
                    this.mSaveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSaveButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "OkButton";
                    this.mSaveButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mSaveButton;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelButton";
                    this.mCancelButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        #endregion
        
        #region Fields
        private ExplorerView mExplorerView;
        
        private WpfText mNameLabel;
        
        private WpfEdit mServiceNameTextBox;
        
        private WpfText mErrorLabel;
        
        private WpfButton mSaveButton;
        
        private WpfButton mCancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerView : WpfCustom
    {
        
        public ExplorerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ExplorerView";
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public WpfEdit SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSearchTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mSearchTextBox.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mSearchTextBox;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    this.mRefreshButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public ExplorerTree2 ExplorerTree
        {
            get
            {
                if ((this.mExplorerTree == null))
                {
                    this.mExplorerTree = new ExplorerTree2(this);
                }
                return this.mExplorerTree;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mSearchTextBox;
        
        private WpfButton mRefreshButton;
        
        private ExplorerTree2 mExplorerTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerTree2 : WpfTree
    {
        
        public ExplorerTree2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public localhost1 localhost
        {
            get
            {
                if ((this.mlocalhost == null))
                {
                    this.mlocalhost = new localhost1(this);
                }
                return this.mlocalhost;
            }
        }
        #endregion
        
        #region Fields
        private localhost1 mlocalhost;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class localhost1 : WpfTreeItem
    {
        
        public localhost1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Checkbox2 Checkbox
        {
            get
            {
                if ((this.mCheckbox == null))
                {
                    this.mCheckbox = new Checkbox2(this);
                }
                return this.mCheckbox;
            }
        }
        
        public WpfTreeItem FirstItem
        {
            get
            {
                if ((this.mFirstItem == null))
                {
                    this.mFirstItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mFirstItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mFirstItem.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
                    this.mFirstItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFirstItem.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mFirstItem.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mFirstItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFirstItem;
            }
        }
        
        public WpfTreeItem SecondItem
        {
            get
            {
                if ((this.mSecondItem == null))
                {
                    this.mSecondItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mSecondItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mSecondItem.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
                    this.mSecondItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSecondItem.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mSecondItem.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mSecondItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSecondItem;
            }
        }
        #endregion
        
        #region Fields
        private Checkbox2 mCheckbox;
        
        private WpfTreeItem mFirstItem;
        
        private WpfTreeItem mSecondItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Checkbox2 : WpfCheckBox
    {
        
        public Checkbox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "Checkbox";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton IconButton
        {
            get
            {
                if ((this.mIconButton == null))
                {
                    this.mIconButton = new WpfButton(this);
                    #region Search Criteria
                    this.mIconButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mIconButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mIconButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIconButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mIconButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplashPageWindow : WpfWindow
    {
        
        public SplashPageWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "SplashPage";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SplashPage");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DecisionOrSwitchDialog : WpfWindow
    {
        
        public DecisionOrSwitchDialog()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "ActivityDefaultWindow";
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectWindowsGroupDialog : WinWindow
    {
        
        public SelectWindowsGroupDialog()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Select Group";
            this.WindowTitles.Add("Select Group");
            #endregion
        }
        
        #region Properties
        public ItemPanel ItemPanel
        {
            get
            {
                if ((this.mItemPanel == null))
                {
                    this.mItemPanel = new ItemPanel(this);
                }
                return this.mItemPanel;
            }
        }
        
        public OKPanel OKPanel
        {
            get
            {
                if ((this.mOKPanel == null))
                {
                    this.mOKPanel = new OKPanel(this);
                }
                return this.mOKPanel;
            }
        }
        
        public CancelPanel CancelPanel
        {
            get
            {
                if ((this.mCancelPanel == null))
                {
                    this.mCancelPanel = new CancelPanel(this);
                }
                return this.mCancelPanel;
            }
        }
        #endregion
        
        #region Fields
        private ItemPanel mItemPanel;
        
        private OKPanel mOKPanel;
        
        private CancelPanel mCancelPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemPanel : WinWindow
    {
        
        public ItemPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "214";
            this.WindowTitles.Add("Select Group");
            #endregion
        }
        
        #region Properties
        public WinEdit ObjectNameTextbox
        {
            get
            {
                if ((this.mObjectNameTextbox == null))
                {
                    this.mObjectNameTextbox = new WinEdit(this);
                    #region Search Criteria
                    this.mObjectNameTextbox.SearchProperties.Add(new PropertyExpression(WinEdit.PropertyNames.Name, "Enter the object name to select", PropertyExpressionOperator.Contains));
                    this.mObjectNameTextbox.WindowTitles.Add("Select Group");
                    #endregion
                }
                return this.mObjectNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mObjectNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OKPanel : WinWindow
    {
        
        public OKPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Select Group");
            #endregion
        }
        
        #region Properties
        public WinButton OK
        {
            get
            {
                if ((this.mOK == null))
                {
                    this.mOK = new WinButton(this);
                    #region Search Criteria
                    this.mOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mOK.WindowTitles.Add("Select Group");
                    #endregion
                }
                return this.mOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CancelPanel : WinWindow
    {
        
        public CancelPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Select Group");
            #endregion
        }
        
        #region Properties
        public WinButton Cancel
        {
            get
            {
                if ((this.mCancel == null))
                {
                    this.mCancel = new WinButton(this);
                    #region Search Criteria
                    this.mCancel.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mCancel.WindowTitles.Add("Select Group");
                    #endregion
                }
                return this.mCancel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServicePickerDialog : WpfWindow
    {
        
        public ServicePickerDialog()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Select A Service";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchProperties[WpfWindow.PropertyNames.AutomationId] = "UI_SelectServiceWindow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Explorer1 Explorer
        {
            get
            {
                if ((this.mExplorer == null))
                {
                    this.mExplorer = new Explorer1(this);
                }
                return this.mExplorer;
            }
        }
        
        public WpfButton OK
        {
            get
            {
                if ((this.mOK == null))
                {
                    this.mOK = new WpfButton(this);
                    #region Search Criteria
                    this.mOK.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SelectServiceOKButton_AutoID";
                    this.mOK.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOK;
            }
        }
        
        public WpfButton Cancel
        {
            get
            {
                if ((this.mCancel == null))
                {
                    this.mCancel = new WpfButton(this);
                    #region Search Criteria
                    this.mCancel.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SelectServiceCancelButton_AutoID";
                    this.mCancel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancel;
            }
        }
        #endregion
        
        #region Fields
        private Explorer1 mExplorer;
        
        private WpfButton mOK;
        
        private WpfButton mCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Explorer1 : WpfCustom
    {
        
        public Explorer1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ExplorerView";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit FilterTextbox
        {
            get
            {
                if ((this.mFilterTextbox == null))
                {
                    this.mFilterTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mFilterTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mFilterTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFilterTextbox;
            }
        }
        
        public WpfButton Refresh
        {
            get
            {
                if ((this.mRefresh == null))
                {
                    this.mRefresh = new WpfButton(this);
                    #region Search Criteria
                    this.mRefresh.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    this.mRefresh.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefresh;
            }
        }
        
        public ExplorerTree3 ExplorerTree
        {
            get
            {
                if ((this.mExplorerTree == null))
                {
                    this.mExplorerTree = new ExplorerTree3(this);
                }
                return this.mExplorerTree;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mFilterTextbox;
        
        private WpfButton mRefresh;
        
        private ExplorerTree3 mExplorerTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerTree3 : WpfTree
    {
        
        public ExplorerTree3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TreeItem1 TreeItem1
        {
            get
            {
                if ((this.mTreeItem1 == null))
                {
                    this.mTreeItem1 = new TreeItem1(this);
                }
                return this.mTreeItem1;
            }
        }
        #endregion
        
        #region Fields
        private TreeItem1 mTreeItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem1 : WpfTreeItem
    {
        
        public TreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem SubTreeItem1
        {
            get
            {
                if ((this.mSubTreeItem1 == null))
                {
                    this.mSubTreeItem1 = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mSubTreeItem1.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mSubTreeItem1.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSubTreeItem1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mSubTreeItem1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSubTreeItem1;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mSubTreeItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SwitchCaseDialog : WpfWindow
    {
        
        public SwitchCaseDialog()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "ActivityDefaultWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ActivityDefaultWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWarewolfDEV2SANELEMTWindow : WpfWindow
    {
        
        public UIWarewolfDEV2SANELEMTWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Warewolf (DEV2\\SANELE.MTHEMBU)";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIUI_ExplorerControl_ACustom UIUI_ExplorerControl_ACustom
        {
            get
            {
                if ((this.mUIUI_ExplorerControl_ACustom == null))
                {
                    this.mUIUI_ExplorerControl_ACustom = new UIUI_ExplorerControl_ACustom(this);
                }
                return this.mUIUI_ExplorerControl_ACustom;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_ExplorerControl_ACustom mUIUI_ExplorerControl_ACustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUI_ExplorerControl_ACustom : WpfCustom
    {
        
        public UIUI_ExplorerControl_ACustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ExplorerControl_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UISearchTextBoxEdit UISearchTextBoxEdit
        {
            get
            {
                if ((this.mUISearchTextBoxEdit == null))
                {
                    this.mUISearchTextBoxEdit = new UISearchTextBoxEdit(this);
                }
                return this.mUISearchTextBoxEdit;
            }
        }
        
        public UIExplorerTreeTree UIExplorerTreeTree
        {
            get
            {
                if ((this.mUIExplorerTreeTree == null))
                {
                    this.mUIExplorerTreeTree = new UIExplorerTreeTree(this);
                }
                return this.mUIExplorerTreeTree;
            }
        }
        #endregion
        
        #region Fields
        private UISearchTextBoxEdit mUISearchTextBoxEdit;
        
        private UIExplorerTreeTree mUIExplorerTreeTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISearchTextBoxEdit : WpfEdit
    {
        
        public UISearchTextBoxEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfText UIFilterText
        {
            get
            {
                if ((this.mUIFilterText == null))
                {
                    this.mUIFilterText = new WpfText(this);
                    #region Search Criteria
                    this.mUIFilterText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mUIFilterText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIFilterText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIFilterText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIExplorerTreeTree : WpfTree
    {
        
        public UIExplorerTreeTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIInfragisticsControlsTreeItem UIInfragisticsControlsTreeItem
        {
            get
            {
                if ((this.mUIInfragisticsControlsTreeItem == null))
                {
                    this.mUIInfragisticsControlsTreeItem = new UIInfragisticsControlsTreeItem(this);
                }
                return this.mUIInfragisticsControlsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIInfragisticsControlsTreeItem mUIInfragisticsControlsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIInfragisticsControlsTreeItem : WpfTreeItem
    {
        
        public UIInfragisticsControlsTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem UIInfragisticsControlsTreeItem1
        {
            get
            {
                if ((this.mUIInfragisticsControlsTreeItem1 == null))
                {
                    this.mUIInfragisticsControlsTreeItem1 = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUIInfragisticsControlsTreeItem1.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mUIInfragisticsControlsTreeItem1.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIInfragisticsControlsTreeItem1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIInfragisticsControlsTreeItem1.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIInfragisticsControlsTreeItem1;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mUIInfragisticsControlsTreeItem1;
        #endregion
    }
}
