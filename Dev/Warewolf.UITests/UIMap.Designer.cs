// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Warewolf.UITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WpfCustom uID7dccbadb86c4ae4afd4Custom = this.UIWarewolfASHASHWindow.UIWorkflowItemPresenteCustom.UIFlowchartCustom.UID7dccbadb86c4ae4afd4Custom;
            #endregion

            // Click 'd7dccbad-b86c-4ae4-afd4-05901b046de9,310;332 310;4...' custom control
            Mouse.Click(uID7dccbadb86c4ae4afd4Custom, new Point(249, 403));
        }
        
        #region Properties
        public MainStudioWindow MainStudioWindow
        {
            get
            {
                if ((this.mMainStudioWindow == null))
                {
                    this.mMainStudioWindow = new MainStudioWindow();
                }
                return this.mMainStudioWindow;
            }
        }
        
        public UIWarewolfASHASHWindow UIWarewolfASHASHWindow
        {
            get
            {
                if ((this.mUIWarewolfASHASHWindow == null))
                {
                    this.mUIWarewolfASHASHWindow = new UIWarewolfASHASHWindow();
                }
                return this.mUIWarewolfASHASHWindow;
            }
        }
        #endregion
        
        #region Fields
        private MainStudioWindow mMainStudioWindow;
        
        private UIWarewolfASHASHWindow mUIWarewolfASHASHWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MainStudioWindow : WpfWindow
    {
        
        public MainStudioWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.Name, "Warewolf", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabContextMenu TabContextMenu
        {
            get
            {
                if ((this.mTabContextMenu == null))
                {
                    this.mTabContextMenu = new TabContextMenu(this);
                }
                return this.mTabContextMenu;
            }
        }
        
        public ExplorerEnvironmentContextMenu ExplorerEnvironmentContextMenu
        {
            get
            {
                if ((this.mExplorerEnvironmentContextMenu == null))
                {
                    this.mExplorerEnvironmentContextMenu = new ExplorerEnvironmentContextMenu(this);
                }
                return this.mExplorerEnvironmentContextMenu;
            }
        }
        
        public ExplorerContextMenu ExplorerContextMenu
        {
            get
            {
                if ((this.mExplorerContextMenu == null))
                {
                    this.mExplorerContextMenu = new ExplorerContextMenu(this);
                }
                return this.mExplorerContextMenu;
            }
        }
        
        public DesignSurfaceContextMenu DesignSurfaceContextMenu
        {
            get
            {
                if ((this.mDesignSurfaceContextMenu == null))
                {
                    this.mDesignSurfaceContextMenu = new DesignSurfaceContextMenu(this);
                }
                return this.mDesignSurfaceContextMenu;
            }
        }
        
        public ExitFullScreenF11Text ExitFullScreenF11Text
        {
            get
            {
                if ((this.mExitFullScreenF11Text == null))
                {
                    this.mExitFullScreenF11Text = new ExitFullScreenF11Text(this);
                }
                return this.mExitFullScreenF11Text;
            }
        }
        
        public WpfButton LockStudioButton
        {
            get
            {
                if ((this.mLockStudioButton == null))
                {
                    this.mLockStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mLockStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_LOCK";
                    this.mLockStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLockStudioButton;
            }
        }
        
        public WpfButton MinimizeStudioButton
        {
            get
            {
                if ((this.mMinimizeStudioButton == null))
                {
                    this.mMinimizeStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mMinimizeStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_MINIMIZE";
                    this.mMinimizeStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMinimizeStudioButton;
            }
        }
        
        public WpfButton MaximizeRestoreStudioButton
        {
            get
            {
                if ((this.mMaximizeRestoreStudioButton == null))
                {
                    this.mMaximizeRestoreStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mMaximizeRestoreStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_SUPER_MAXIMIZE_RESTORE";
                    this.mMaximizeRestoreStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMaximizeRestoreStudioButton;
            }
        }
        
        public WpfButton MaximizeStudioButton
        {
            get
            {
                if ((this.mMaximizeStudioButton == null))
                {
                    this.mMaximizeStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mMaximizeStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_MAXIMIZE_RESTORE";
                    this.mMaximizeStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMaximizeStudioButton;
            }
        }
        
        public WpfButton CloseStudioButton
        {
            get
            {
                if ((this.mCloseStudioButton == null))
                {
                    this.mCloseStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_CLOSE";
                    this.mCloseStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseStudioButton;
            }
        }
        
        public SideMenuBar SideMenuBar
        {
            get
            {
                if ((this.mSideMenuBar == null))
                {
                    this.mSideMenuBar = new SideMenuBar(this);
                }
                return this.mSideMenuBar;
            }
        }
        
        public DockManager DockManager
        {
            get
            {
                if ((this.mDockManager == null))
                {
                    this.mDockManager = new DockManager(this);
                }
                return this.mDockManager;
            }
        }
        
        public DebugInputDialog DebugInputDialog
        {
            get
            {
                if ((this.mDebugInputDialog == null))
                {
                    this.mDebugInputDialog = new DebugInputDialog(this);
                }
                return this.mDebugInputDialog;
            }
        }
        
        public ComboboxListItemAsNewRemoteServer ComboboxListItemAsNewRemoteServer
        {
            get
            {
                if ((this.mComboboxListItemAsNewRemoteServer == null))
                {
                    this.mComboboxListItemAsNewRemoteServer = new ComboboxListItemAsNewRemoteServer(this);
                }
                return this.mComboboxListItemAsNewRemoteServer;
            }
        }
        
        public WpfText ComboboxListItemAsTSTCIREMOTE
        {
            get
            {
                if ((this.mComboboxListItemAsTSTCIREMOTE == null))
                {
                    this.mComboboxListItemAsTSTCIREMOTE = new WpfText(this);
                    #region Search Criteria
                    this.mComboboxListItemAsTSTCIREMOTE.SearchProperties[WpfText.PropertyNames.Name] = "TSTCIREMOTE";
                    this.mComboboxListItemAsTSTCIREMOTE.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsTSTCIREMOTE;
            }
        }
        
        public WpfText ComboboxListItemAsTSTCIREMOTEConnected
        {
            get
            {
                if ((this.mComboboxListItemAsTSTCIREMOTEConnected == null))
                {
                    this.mComboboxListItemAsTSTCIREMOTEConnected = new WpfText(this);
                    #region Search Criteria
                    this.mComboboxListItemAsTSTCIREMOTEConnected.SearchProperties[WpfText.PropertyNames.Name] = "TSTCIREMOTE (Connected)";
                    this.mComboboxListItemAsTSTCIREMOTEConnected.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsTSTCIREMOTEConnected;
            }
        }
        
        public ComboboxListItemAsLocalhost ComboboxListItemAsLocalhost
        {
            get
            {
                if ((this.mComboboxListItemAsLocalhost == null))
                {
                    this.mComboboxListItemAsLocalhost = new ComboboxListItemAsLocalhost(this);
                }
                return this.mComboboxListItemAsLocalhost;
            }
        }
        
        public ComboboxListItemAsLocalhostConnected ComboboxListItemAsLocalhostConnected
        {
            get
            {
                if ((this.mComboboxListItemAsLocalhostConnected == null))
                {
                    this.mComboboxListItemAsLocalhostConnected = new ComboboxListItemAsLocalhostConnected(this);
                }
                return this.mComboboxListItemAsLocalhostConnected;
            }
        }
        
        public ComboboxListItemAsRemoteConnectionIntegrationConnected ComboboxListItemAsRemoteConnectionIntegrationConnected
        {
            get
            {
                if ((this.mComboboxListItemAsRemoteConnectionIntegrationConnected == null))
                {
                    this.mComboboxListItemAsRemoteConnectionIntegrationConnected = new ComboboxListItemAsRemoteConnectionIntegrationConnected(this);
                }
                return this.mComboboxListItemAsRemoteConnectionIntegrationConnected;
            }
        }
        
        public WpfCustom ComboboxListItemAsHttp
        {
            get
            {
                if ((this.mComboboxListItemAsHttp == null))
                {
                    this.mComboboxListItemAsHttp = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsHttp.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAsHttp.SearchProperties[WpfControl.PropertyNames.Name] = "http";
                    this.mComboboxListItemAsHttp.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsHttp;
            }
        }
        
        public ComboboxListItemAsMicrosoftSQLServer ComboboxListItemAsMicrosoftSQLServer
        {
            get
            {
                if ((this.mComboboxListItemAsMicrosoftSQLServer == null))
                {
                    this.mComboboxListItemAsMicrosoftSQLServer = new ComboboxListItemAsMicrosoftSQLServer(this);
                }
                return this.mComboboxListItemAsMicrosoftSQLServer;
            }
        }
        
        public WpfCustom ComboboxListItemAsDev2TestingDB
        {
            get
            {
                if ((this.mComboboxListItemAsDev2TestingDB == null))
                {
                    this.mComboboxListItemAsDev2TestingDB = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsDev2TestingDB.SearchProperties[WpfControl.PropertyNames.Name] = @"{""ServerType"":""SqlDatabase"",""Server"":""RSAKLFSVRDEV"",""DatabaseName"":""Dev2TestingDB"",""Port"":1433,""AuthenticationType"":""User"",""UserID"":""testuser"",""Password"":""test123"",""DataList"":"""",""ConnectionString"":""Data Source=RSAKLFSVRDEV,1433;Initial Catalog=Dev2TestingDB;User ID=testuser;Password=test123;"",""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""Version"":null,""ResourceID"":""ffa6880d-3b24-4d34-b829-a2db45e1c664"",""ResourceType"":""SqlDatabase"",""ResourceName"":""TestingDb"",""IsValid"":false,""Errors"":[],""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":{""DateTimeStamp"":""2017-01-12T08:28:31.4692206+02:00"",""Reason"":""Save"",""User"":""Unknown"",""VersionNumber"":""1"",""ResourceId"":""ffa6880d-3b24-4d34-b829-a2db45e1c664"",""VersionId"":""47f2ec5f-a20a-41de-bbea-5653cb87b60c""}}";
                    this.mComboboxListItemAsDev2TestingDB.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsDev2TestingDB;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem1
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem1 == null))
                {
                    this.mWebServerSourceComboboxListItem1 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem1.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem1.SearchProperties[WpfListItem.PropertyNames.Instance] = "1";
                    this.mWebServerSourceComboboxListItem1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem1;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem10
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem10 == null))
                {
                    this.mWebServerSourceComboboxListItem10 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem10.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem10.SearchProperties[WpfListItem.PropertyNames.Instance] = "10";
                    this.mWebServerSourceComboboxListItem10.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem10;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem11
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem11 == null))
                {
                    this.mWebServerSourceComboboxListItem11 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem11.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem11.SearchProperties[WpfListItem.PropertyNames.Instance] = "11";
                    this.mWebServerSourceComboboxListItem11.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem11;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem2
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem2 == null))
                {
                    this.mWebServerSourceComboboxListItem2 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem2.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem2.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mWebServerSourceComboboxListItem2.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem2;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem3
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem3 == null))
                {
                    this.mWebServerSourceComboboxListItem3 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem3.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem3.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
                    this.mWebServerSourceComboboxListItem3.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem3;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem4
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem4 == null))
                {
                    this.mWebServerSourceComboboxListItem4 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem4.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem4.SearchProperties[WpfListItem.PropertyNames.Instance] = "4";
                    this.mWebServerSourceComboboxListItem4.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem4;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem5
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem5 == null))
                {
                    this.mWebServerSourceComboboxListItem5 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem5.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem5.SearchProperties[WpfListItem.PropertyNames.Instance] = "5";
                    this.mWebServerSourceComboboxListItem5.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem5;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem6
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem6 == null))
                {
                    this.mWebServerSourceComboboxListItem6 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem6.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem6.SearchProperties[WpfListItem.PropertyNames.Instance] = "6";
                    this.mWebServerSourceComboboxListItem6.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem6;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem7
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem7 == null))
                {
                    this.mWebServerSourceComboboxListItem7 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem7.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem7.SearchProperties[WpfListItem.PropertyNames.Instance] = "7";
                    this.mWebServerSourceComboboxListItem7.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem7;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem8
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem8 == null))
                {
                    this.mWebServerSourceComboboxListItem8 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem8.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem8.SearchProperties[WpfListItem.PropertyNames.Instance] = "8";
                    this.mWebServerSourceComboboxListItem8.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem8;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem9
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem9 == null))
                {
                    this.mWebServerSourceComboboxListItem9 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem9.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem9.SearchProperties[WpfListItem.PropertyNames.Instance] = "9";
                    this.mWebServerSourceComboboxListItem9.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem9;
            }
        }
        
        public WpfCustom ComboboxListItemAsWarewolfStore
        {
            get
            {
                if ((this.mComboboxListItemAsWarewolfStore == null))
                {
                    this.mComboboxListItemAsWarewolfStore = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsWarewolfStore.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAsWarewolfStore.SearchProperties[WpfControl.PropertyNames.Name] = "WarewolfStore";
                    this.mComboboxListItemAsWarewolfStore.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsWarewolfStore;
            }
        }
        
        public ComboboxListItemPostgreSqlDatabase ComboboxListItemPostgreSqlDatabase
        {
            get
            {
                if ((this.mComboboxListItemPostgreSqlDatabase == null))
                {
                    this.mComboboxListItemPostgreSqlDatabase = new ComboboxListItemPostgreSqlDatabase(this);
                }
                return this.mComboboxListItemPostgreSqlDatabase;
            }
        }
        
        public WpfCustom ComboboxListItemOracleDatabase
        {
            get
            {
                if ((this.mComboboxListItemOracleDatabase == null))
                {
                    this.mComboboxListItemOracleDatabase = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemOracleDatabase.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemOracleDatabase.SearchProperties[WpfControl.PropertyNames.Name] = "Oracle Database";
                    this.mComboboxListItemOracleDatabase.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemOracleDatabase;
            }
        }
        
        public ComboboxListItemODBCDatabase ComboboxListItemODBCDatabase
        {
            get
            {
                if ((this.mComboboxListItemODBCDatabase == null))
                {
                    this.mComboboxListItemODBCDatabase = new ComboboxListItemODBCDatabase(this);
                }
                return this.mComboboxListItemODBCDatabase;
            }
        }
        
        public ComboboxListItemMySqlDatabase ComboboxListItemMySqlDatabase
        {
            get
            {
                if ((this.mComboboxListItemMySqlDatabase == null))
                {
                    this.mComboboxListItemMySqlDatabase = new ComboboxListItemMySqlDatabase(this);
                }
                return this.mComboboxListItemMySqlDatabase;
            }
        }
        
        public WpfToggleButton ExpandAllToggleButton
        {
            get
            {
                if ((this.mExpandAllToggleButton == null))
                {
                    this.mExpandAllToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mExpandAllToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "expandAllButton";
                    this.mExpandAllToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpandAllToggleButton;
            }
        }
        
        public WpfListItem ComboBoxListItemAsForEachInCSV
        {
            get
            {
                if ((this.mComboBoxListItemAsForEachInCSV == null))
                {
                    this.mComboBoxListItemAsForEachInCSV = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboBoxListItemAsForEachInCSV.SearchProperties[WpfListItem.PropertyNames.Name] = "* in CSV";
                    this.mComboBoxListItemAsForEachInCSV.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboBoxListItemAsForEachInCSV;
            }
        }
        
        public WpfListItem ComboBoxListItemAsForEachInRange
        {
            get
            {
                if ((this.mComboBoxListItemAsForEachInRange == null))
                {
                    this.mComboBoxListItemAsForEachInRange = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboBoxListItemAsForEachInRange.SearchProperties[WpfListItem.PropertyNames.Name] = "* in Range";
                    this.mComboBoxListItemAsForEachInRange.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboBoxListItemAsForEachInRange;
            }
        }
        
        public WpfListItem ComboBoxListItemAsForEachInRecordset
        {
            get
            {
                if ((this.mComboBoxListItemAsForEachInRecordset == null))
                {
                    this.mComboBoxListItemAsForEachInRecordset = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboBoxListItemAsForEachInRecordset.SearchProperties[WpfListItem.PropertyNames.Name] = "* in Recordset";
                    this.mComboBoxListItemAsForEachInRecordset.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboBoxListItemAsForEachInRecordset;
            }
        }
        
        public WpfListItem ComboBoxListItemAsForEachNoofExecutes
        {
            get
            {
                if ((this.mComboBoxListItemAsForEachNoofExecutes == null))
                {
                    this.mComboBoxListItemAsForEachNoofExecutes = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboBoxListItemAsForEachNoofExecutes.SearchProperties[WpfListItem.PropertyNames.Name] = "No. of Executes";
                    this.mComboBoxListItemAsForEachNoofExecutes.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboBoxListItemAsForEachNoofExecutes;
            }
        }
        
        public UnpinnedTab UnpinnedTab
        {
            get
            {
                if ((this.mUnpinnedTab == null))
                {
                    this.mUnpinnedTab = new UnpinnedTab(this);
                }
                return this.mUnpinnedTab;
            }
        }
        
        public UnpinnedTabContextMenu UnpinnedTabContextMenu
        {
            get
            {
                if ((this.mUnpinnedTabContextMenu == null))
                {
                    this.mUnpinnedTabContextMenu = new UnpinnedTabContextMenu(this);
                }
                return this.mUnpinnedTabContextMenu;
            }
        }
        
        public ComboboxListItemAsRemoteConnectionIntegration ComboboxListItemAsRemoteConnectionIntegration
        {
            get
            {
                if ((this.mComboboxListItemAsRemoteConnectionIntegration == null))
                {
                    this.mComboboxListItemAsRemoteConnectionIntegration = new ComboboxListItemAsRemoteConnectionIntegration(this);
                }
                return this.mComboboxListItemAsRemoteConnectionIntegration;
            }
        }
        
        public ComboboxListItemAspostgresDB ComboboxListItemAspostgresDB
        {
            get
            {
                if ((this.mComboboxListItemAspostgresDB == null))
                {
                    this.mComboboxListItemAspostgresDB = new ComboboxListItemAspostgresDB(this);
                }
                return this.mComboboxListItemAspostgresDB;
            }
        }
        
        public ComboboxListItemAsmysqlDB ComboboxListItemAsmysqlDB
        {
            get
            {
                if ((this.mComboboxListItemAsmysqlDB == null))
                {
                    this.mComboboxListItemAsmysqlDB = new ComboboxListItemAsmysqlDB(this);
                }
                return this.mComboboxListItemAsmysqlDB;
            }
        }
        
        public ComboboxListItemAsHRDB ComboboxListItemAsHRDB
        {
            get
            {
                if ((this.mComboboxListItemAsHRDB == null))
                {
                    this.mComboboxListItemAsHRDB = new ComboboxListItemAsHRDB(this);
                }
                return this.mComboboxListItemAsHRDB;
            }
        }
        
        public ComboboxListItemAsExcelFilesDB ComboboxListItemAsExcelFilesDB
        {
            get
            {
                if ((this.mComboboxListItemAsExcelFilesDB == null))
                {
                    this.mComboboxListItemAsExcelFilesDB = new ComboboxListItemAsExcelFilesDB(this);
                }
                return this.mComboboxListItemAsExcelFilesDB;
            }
        }
        
        public ComboboxListItemAsDropboxServerType ComboboxListItemAsDropboxServerType
        {
            get
            {
                if ((this.mComboboxListItemAsDropboxServerType == null))
                {
                    this.mComboboxListItemAsDropboxServerType = new ComboboxListItemAsDropboxServerType(this);
                }
                return this.mComboboxListItemAsDropboxServerType;
            }
        }
        
        public Dev2TestingDBCustom Dev2TestingDBCustom
        {
            get
            {
                if ((this.mDev2TestingDBCustom == null))
                {
                    this.mDev2TestingDBCustom = new Dev2TestingDBCustom(this);
                }
                return this.mDev2TestingDBCustom;
            }
        }
        
        public WpfListItem getName
        {
            get
            {
                if ((this.mgetName == null))
                {
                    this.mgetName = new WpfListItem(this);
                    #region Search Criteria
                    this.mgetName.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.PluginAction";
                    this.mgetName.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mgetName;
            }
        }
        
        public WpfListItem PhoneNumbers
        {
            get
            {
                if ((this.mPhoneNumbers == null))
                {
                    this.mPhoneNumbers = new WpfListItem(this);
                    #region Search Criteria
                    this.mPhoneNumbers.SearchProperties[WpfListItem.PropertyNames.Instance] = "4";
                    this.mPhoneNumbers.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mPhoneNumbers;
            }
        }
        
        public ComboboxListItemAsMSAccessDB ComboboxListItemAsMSAccessDB
        {
            get
            {
                if ((this.mComboboxListItemAsMSAccessDB == null))
                {
                    this.mComboboxListItemAsMSAccessDB = new ComboboxListItemAsMSAccessDB(this);
                }
                return this.mComboboxListItemAsMSAccessDB;
            }
        }
        
        public WpfCustom ComboboxListItemAsTestDB
        {
            get
            {
                if ((this.mComboboxListItemAsTestDB == null))
                {
                    this.mComboboxListItemAsTestDB = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsTestDB.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAsTestDB.SearchProperties[WpfControl.PropertyNames.Name] = "TestDB";
                    this.mComboboxListItemAsTestDB.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mComboboxListItemAsTestDB;
            }
        }
        
        public WpfCustom ComboboxListItemAsmaster
        {
            get
            {
                if ((this.mComboboxListItemAsmaster == null))
                {
                    this.mComboboxListItemAsmaster = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsmaster.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAsmaster.SearchProperties[WpfControl.PropertyNames.Name] = "master";
                    this.mComboboxListItemAsmaster.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mComboboxListItemAsmaster;
            }
        }
        
        public WpfCustom ComboboxListItemAstest
        {
            get
            {
                if ((this.mComboboxListItemAstest == null))
                {
                    this.mComboboxListItemAstest = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAstest.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAstest.SearchProperties[WpfControl.PropertyNames.Name] = "test";
                    this.mComboboxListItemAstest.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mComboboxListItemAstest;
            }
        }
        
        public WpfListItem MySQLDatabaseSourceToEditListItem
        {
            get
            {
                if ((this.mMySQLDatabaseSourceToEditListItem == null))
                {
                    this.mMySQLDatabaseSourceToEditListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mMySQLDatabaseSourceToEditListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "MySQLDatabaseSourceToEdit";
                    this.mMySQLDatabaseSourceToEditListItem.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mMySQLDatabaseSourceToEditListItem;
            }
        }
        
        public WpfListItem EmailSourceToEditListItem
        {
            get
            {
                if ((this.mEmailSourceToEditListItem == null))
                {
                    this.mEmailSourceToEditListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mEmailSourceToEditListItem.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Host"":""localhost"",""UserName"":""test"",""Password"":""test"",""Port"":2,""EnableSsl"":false,""Timeout"":10000,""TestFromAddress"":null,""TestToAddress"":null,""DataList"":"""",""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""Version"":null,""ResourceID"":""821a3020-6ea1-465d-8080-ed1091ade489"",""ResourceType"":""EmailSource"",""ResourceName"":""EmailSourceToEdit"",""IsValid"":false,""Errors"":[],""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":{""DateTimeStamp"":""2017-02-10T09:50:07.1598084+02:00"",""Reason"":""Save"",""User"":""Unknown"",""VersionNumber"":""1"",""ResourceId"":""821a3020-6ea1-465d-8080-ed1091ade489"",""VersionId"":""311c845c-db2b-4ad6-8178-ae07e0b793df""}}";
                    this.mEmailSourceToEditListItem.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mEmailSourceToEditListItem;
            }
        }
        
        public WpfListItem WebServiceSourceToEditListItem
        {
            get
            {
                if ((this.mWebServiceSourceToEditListItem == null))
                {
                    this.mWebServiceSourceToEditListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServiceSourceToEditListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServiceSourceToEditListItem.SearchProperties[WpfListItem.PropertyNames.Instance] = "5";
                    this.mWebServiceSourceToEditListItem.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mWebServiceSourceToEditListItem;
            }
        }
        #endregion
        
        #region Fields
        private TabContextMenu mTabContextMenu;
        
        private ExplorerEnvironmentContextMenu mExplorerEnvironmentContextMenu;
        
        private ExplorerContextMenu mExplorerContextMenu;
        
        private DesignSurfaceContextMenu mDesignSurfaceContextMenu;
        
        private ExitFullScreenF11Text mExitFullScreenF11Text;
        
        private WpfButton mLockStudioButton;
        
        private WpfButton mMinimizeStudioButton;
        
        private WpfButton mMaximizeRestoreStudioButton;
        
        private WpfButton mMaximizeStudioButton;
        
        private WpfButton mCloseStudioButton;
        
        private SideMenuBar mSideMenuBar;
        
        private DockManager mDockManager;
        
        private DebugInputDialog mDebugInputDialog;
        
        private ComboboxListItemAsNewRemoteServer mComboboxListItemAsNewRemoteServer;
        
        private WpfText mComboboxListItemAsTSTCIREMOTE;
        
        private WpfText mComboboxListItemAsTSTCIREMOTEConnected;
        
        private ComboboxListItemAsLocalhost mComboboxListItemAsLocalhost;
        
        private ComboboxListItemAsLocalhostConnected mComboboxListItemAsLocalhostConnected;
        
        private ComboboxListItemAsRemoteConnectionIntegrationConnected mComboboxListItemAsRemoteConnectionIntegrationConnected;
        
        private WpfCustom mComboboxListItemAsHttp;
        
        private ComboboxListItemAsMicrosoftSQLServer mComboboxListItemAsMicrosoftSQLServer;
        
        private WpfCustom mComboboxListItemAsDev2TestingDB;
        
        private WpfListItem mWebServerSourceComboboxListItem1;
        
        private WpfListItem mWebServerSourceComboboxListItem10;
        
        private WpfListItem mWebServerSourceComboboxListItem11;
        
        private WpfListItem mWebServerSourceComboboxListItem2;
        
        private WpfListItem mWebServerSourceComboboxListItem3;
        
        private WpfListItem mWebServerSourceComboboxListItem4;
        
        private WpfListItem mWebServerSourceComboboxListItem5;
        
        private WpfListItem mWebServerSourceComboboxListItem6;
        
        private WpfListItem mWebServerSourceComboboxListItem7;
        
        private WpfListItem mWebServerSourceComboboxListItem8;
        
        private WpfListItem mWebServerSourceComboboxListItem9;
        
        private WpfCustom mComboboxListItemAsWarewolfStore;
        
        private ComboboxListItemPostgreSqlDatabase mComboboxListItemPostgreSqlDatabase;
        
        private WpfCustom mComboboxListItemOracleDatabase;
        
        private ComboboxListItemODBCDatabase mComboboxListItemODBCDatabase;
        
        private ComboboxListItemMySqlDatabase mComboboxListItemMySqlDatabase;
        
        private WpfToggleButton mExpandAllToggleButton;
        
        private WpfListItem mComboBoxListItemAsForEachInCSV;
        
        private WpfListItem mComboBoxListItemAsForEachInRange;
        
        private WpfListItem mComboBoxListItemAsForEachInRecordset;
        
        private WpfListItem mComboBoxListItemAsForEachNoofExecutes;
        
        private UnpinnedTab mUnpinnedTab;
        
        private UnpinnedTabContextMenu mUnpinnedTabContextMenu;
        
        private ComboboxListItemAsRemoteConnectionIntegration mComboboxListItemAsRemoteConnectionIntegration;
        
        private ComboboxListItemAspostgresDB mComboboxListItemAspostgresDB;
        
        private ComboboxListItemAsmysqlDB mComboboxListItemAsmysqlDB;
        
        private ComboboxListItemAsHRDB mComboboxListItemAsHRDB;
        
        private ComboboxListItemAsExcelFilesDB mComboboxListItemAsExcelFilesDB;
        
        private ComboboxListItemAsDropboxServerType mComboboxListItemAsDropboxServerType;
        
        private Dev2TestingDBCustom mDev2TestingDBCustom;
        
        private WpfListItem mgetName;
        
        private WpfListItem mPhoneNumbers;
        
        private ComboboxListItemAsMSAccessDB mComboboxListItemAsMSAccessDB;
        
        private WpfCustom mComboboxListItemAsTestDB;
        
        private WpfCustom mComboboxListItemAsmaster;
        
        private WpfCustom mComboboxListItemAstest;
        
        private WpfListItem mMySQLDatabaseSourceToEditListItem;
        
        private WpfListItem mEmailSourceToEditListItem;
        
        private WpfListItem mWebServiceSourceToEditListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabContextMenu : WpfMenu
    {
        
        public TabContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem Close
        {
            get
            {
                if ((this.mClose == null))
                {
                    this.mClose = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mClose.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Close";
                    this.mClose.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mClose;
            }
        }
        
        public WpfMenuItem UICloseAllButThisMenuItem
        {
            get
            {
                if ((this.mUICloseAllButThisMenuItem == null))
                {
                    this.mUICloseAllButThisMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUICloseAllButThisMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Close All But This";
                    this.mUICloseAllButThisMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUICloseAllButThisMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mClose;
        
        private WpfMenuItem mUICloseAllButThisMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerEnvironmentContextMenu : WpfMenu
    {
        
        public ExplorerEnvironmentContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.AutomationId] = "ExplorerEnvironmentMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem Open
        {
            get
            {
                if ((this.mOpen == null))
                {
                    this.mOpen = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mOpen.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Open";
                    this.mOpen.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpen;
            }
        }
        
        public WpfMenuItem NewWorkflow
        {
            get
            {
                if ((this.mNewWorkflow == null))
                {
                    this.mNewWorkflow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewWorkflow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewService";
                    this.mNewWorkflow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWorkflow;
            }
        }
        
        public WpfMenuItem NewServerSource
        {
            get
            {
                if ((this.mNewServerSource == null))
                {
                    this.mNewServerSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewServerSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewServerSource";
                    this.mNewServerSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerSource;
            }
        }
        
        public WpfMenuItem NewDatabaseSource
        {
            get
            {
                if ((this.mNewDatabaseSource == null))
                {
                    this.mNewDatabaseSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewDatabaseSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewDataBaseSource";
                    this.mNewDatabaseSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewDatabaseSource;
            }
        }
        
        public WpfMenuItem NewWebServiceSource
        {
            get
            {
                if ((this.mNewWebServiceSource == null))
                {
                    this.mNewWebServiceSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewWebServiceSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewWebSource";
                    this.mNewWebServiceSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWebServiceSource;
            }
        }
        
        public WpfMenuItem NewPluginSource
        {
            get
            {
                if ((this.mNewPluginSource == null))
                {
                    this.mNewPluginSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewPluginSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewPluginSource";
                    this.mNewPluginSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewPluginSource;
            }
        }
        
        public WpfMenuItem NewEmailSource
        {
            get
            {
                if ((this.mNewEmailSource == null))
                {
                    this.mNewEmailSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewEmailSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewEmailSource";
                    this.mNewEmailSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewEmailSource;
            }
        }
        
        public WpfMenuItem NewDropboxSource
        {
            get
            {
                if ((this.mNewDropboxSource == null))
                {
                    this.mNewDropboxSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewDropboxSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewDropboxSource";
                    this.mNewDropboxSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewDropboxSource;
            }
        }
        
        public WpfMenuItem NewSharepointSource
        {
            get
            {
                if ((this.mNewSharepointSource == null))
                {
                    this.mNewSharepointSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewSharepointSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewSharepointSource";
                    this.mNewSharepointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharepointSource;
            }
        }
        
        public WpfMenuItem NewFolder
        {
            get
            {
                if ((this.mNewFolder == null))
                {
                    this.mNewFolder = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewFolder.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewFolderFromItem";
                    this.mNewFolder.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewFolder;
            }
        }
        
        public WpfMenuItem Rename
        {
            get
            {
                if ((this.mRename == null))
                {
                    this.mRename = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mRename.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Rename";
                    this.mRename.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRename;
            }
        }
        
        public WpfMenuItem Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDelete.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Delete";
                    this.mDelete.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDelete;
            }
        }
        
        public WpfMenuItem Deploy
        {
            get
            {
                if ((this.mDeploy == null))
                {
                    this.mDeploy = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeploy.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Deploy";
                    this.mDeploy.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeploy;
            }
        }
        
        public WpfMenuItem ShowServerVersion
        {
            get
            {
                if ((this.mShowServerVersion == null))
                {
                    this.mShowServerVersion = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowServerVersion.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ServerVersion";
                    this.mShowServerVersion.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowServerVersion;
            }
        }
        
        public WpfMenuItem ShowDependencies
        {
            get
            {
                if ((this.mShowDependencies == null))
                {
                    this.mShowDependencies = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowDependencies.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Dependencies";
                    this.mShowDependencies.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowDependencies;
            }
        }
        
        public WpfMenuItem Duplicate
        {
            get
            {
                if ((this.mDuplicate == null))
                {
                    this.mDuplicate = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDuplicate.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Duplicate";
                    this.mDuplicate.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDuplicate;
            }
        }
        
        public WpfMenuItem ViewSwagger
        {
            get
            {
                if ((this.mViewSwagger == null))
                {
                    this.mViewSwagger = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mViewSwagger.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ViewSwagger";
                    this.mViewSwagger.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewSwagger;
            }
        }
        
        public WpfMenuItem ShowVersionHistory
        {
            get
            {
                if ((this.mShowVersionHistory == null))
                {
                    this.mShowVersionHistory = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowVersionHistory.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ShowHideVersions";
                    this.mShowVersionHistory.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowVersionHistory;
            }
        }
        
        public WpfMenuItem Tests
        {
            get
            {
                if ((this.mTests == null))
                {
                    this.mTests = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mTests.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Test";
                    this.mTests.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTests;
            }
        }
        
        public WpfMenuItem ViewApisJson
        {
            get
            {
                if ((this.mViewApisJson == null))
                {
                    this.mViewApisJson = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mViewApisJson.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ViewApisJson";
                    this.mViewApisJson.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewApisJson;
            }
        }
        
        public WpfMenuItem ViewApisJsonMenuItem
        {
            get
            {
                if ((this.mViewApisJsonMenuItem == null))
                {
                    this.mViewApisJsonMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mViewApisJsonMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ViewApisJson";
                    this.mViewApisJsonMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewApisJsonMenuItem;
            }
        }
        
        public WpfMenuItem NewExchangeSource
        {
            get
            {
                if ((this.mNewExchangeSource == null))
                {
                    this.mNewExchangeSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewExchangeSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewExchangeSource";
                    this.mNewExchangeSource.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
                    #endregion
                }
                return this.mNewExchangeSource;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mOpen;
        
        private WpfMenuItem mNewWorkflow;
        
        private WpfMenuItem mNewServerSource;
        
        private WpfMenuItem mNewDatabaseSource;
        
        private WpfMenuItem mNewWebServiceSource;
        
        private WpfMenuItem mNewPluginSource;
        
        private WpfMenuItem mNewEmailSource;
        
        private WpfMenuItem mNewDropboxSource;
        
        private WpfMenuItem mNewSharepointSource;
        
        private WpfMenuItem mNewFolder;
        
        private WpfMenuItem mRename;
        
        private WpfMenuItem mDelete;
        
        private WpfMenuItem mDeploy;
        
        private WpfMenuItem mShowServerVersion;
        
        private WpfMenuItem mShowDependencies;
        
        private WpfMenuItem mDuplicate;
        
        private WpfMenuItem mViewSwagger;
        
        private WpfMenuItem mShowVersionHistory;
        
        private WpfMenuItem mTests;
        
        private WpfMenuItem mViewApisJson;
        
        private WpfMenuItem mViewApisJsonMenuItem;
        
        private WpfMenuItem mNewExchangeSource;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerContextMenu : WpfMenu
    {
        
        public ExplorerContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem Open
        {
            get
            {
                if ((this.mOpen == null))
                {
                    this.mOpen = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mOpen.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Open";
                    this.mOpen.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpen;
            }
        }
        
        public WpfMenuItem NewWorkflow
        {
            get
            {
                if ((this.mNewWorkflow == null))
                {
                    this.mNewWorkflow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewWorkflow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewService";
                    this.mNewWorkflow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWorkflow;
            }
        }
        
        public WpfMenuItem NewWorkflowItem
        {
            get
            {
                if ((this.mNewWorkflowItem == null))
                {
                    this.mNewWorkflowItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewWorkflowItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewServiceItem";
                    this.mNewWorkflowItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWorkflowItem;
            }
        }
        
        public WpfMenuItem NewFolder
        {
            get
            {
                if ((this.mNewFolder == null))
                {
                    this.mNewFolder = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewFolder.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewFolder";
                    this.mNewFolder.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewFolder;
            }
        }
        
        public WpfMenuItem Rename
        {
            get
            {
                if ((this.mRename == null))
                {
                    this.mRename = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mRename.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Rename";
                    this.mRename.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRename;
            }
        }
        
        public WpfMenuItem Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDelete.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Delete";
                    this.mDelete.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDelete;
            }
        }
        
        public WpfMenuItem Deploy
        {
            get
            {
                if ((this.mDeploy == null))
                {
                    this.mDeploy = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeploy.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Deploy";
                    this.mDeploy.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeploy;
            }
        }
        
        public WpfMenuItem DeployItem
        {
            get
            {
                if ((this.mDeployItem == null))
                {
                    this.mDeployItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeployItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "DeployItem";
                    this.mDeployItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployItem;
            }
        }
        
        public WpfMenuItem ShowServerVersion
        {
            get
            {
                if ((this.mShowServerVersion == null))
                {
                    this.mShowServerVersion = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowServerVersion.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ServerVersion";
                    this.mShowServerVersion.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowServerVersion;
            }
        }
        
        public WpfMenuItem ShowDependencies
        {
            get
            {
                if ((this.mShowDependencies == null))
                {
                    this.mShowDependencies = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowDependencies.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Dependencies";
                    this.mShowDependencies.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowDependencies;
            }
        }
        
        public WpfMenuItem Duplicate
        {
            get
            {
                if ((this.mDuplicate == null))
                {
                    this.mDuplicate = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDuplicate.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Duplicate";
                    this.mDuplicate.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDuplicate;
            }
        }
        
        public WpfMenuItem ViewSwagger
        {
            get
            {
                if ((this.mViewSwagger == null))
                {
                    this.mViewSwagger = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mViewSwagger.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ViewSwagger";
                    this.mViewSwagger.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewSwagger;
            }
        }
        
        public WpfMenuItem ShowVersionHistory
        {
            get
            {
                if ((this.mShowVersionHistory == null))
                {
                    this.mShowVersionHistory = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowVersionHistory.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ShowHideVersions";
                    this.mShowVersionHistory.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowVersionHistory;
            }
        }
        
        public WpfMenuItem Tests
        {
            get
            {
                if ((this.mTests == null))
                {
                    this.mTests = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mTests.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Test";
                    this.mTests.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTests;
            }
        }
        
        public WpfMenuItem ViewSwaggerMenuItem
        {
            get
            {
                if ((this.mViewSwaggerMenuItem == null))
                {
                    this.mViewSwaggerMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mViewSwaggerMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ViewSwagger";
                    this.mViewSwaggerMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewSwaggerMenuItem;
            }
        }
        
        public WpfMenuItem DebugBrowserMenuItem
        {
            get
            {
                if ((this.mDebugBrowserMenuItem == null))
                {
                    this.mDebugBrowserMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDebugBrowserMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "DebugBrowser";
                    this.mDebugBrowserMenuItem.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mDebugBrowserMenuItem;
            }
        }
        
        public WpfMenuItem DebugInputsMenuItem
        {
            get
            {
                if ((this.mDebugInputsMenuItem == null))
                {
                    this.mDebugInputsMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDebugInputsMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "DebugInputs";
                    this.mDebugInputsMenuItem.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mDebugInputsMenuItem;
            }
        }
        
        public WpfMenuItem DebugStudioMenuItem
        {
            get
            {
                if ((this.mDebugStudioMenuItem == null))
                {
                    this.mDebugStudioMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDebugStudioMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "DebugStudio";
                    this.mDebugStudioMenuItem.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mDebugStudioMenuItem;
            }
        }
        
        public WpfMenuItem RunAllTestsMenuItem
        {
            get
            {
                if ((this.mRunAllTestsMenuItem == null))
                {
                    this.mRunAllTestsMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mRunAllTestsMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "RunAllTests";
                    this.mRunAllTestsMenuItem.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRunAllTestsMenuItem;
            }
        }
        
        public WpfMenuItem NewFolderMenuItem
        {
            get
            {
                if ((this.mNewFolderMenuItem == null))
                {
                    this.mNewFolderMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewFolderMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewFolderFromItem";
                    this.mNewFolderMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewFolderMenuItem;
            }
        }
        
        public WpfMenuItem MakeCurrentVersionMenuItem
        {
            get
            {
                if ((this.mMakeCurrentVersionMenuItem == null))
                {
                    this.mMakeCurrentVersionMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mMakeCurrentVersionMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Rollback";
                    this.mMakeCurrentVersionMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMakeCurrentVersionMenuItem;
            }
        }
        
        public WpfMenuItem OpenVersionMenuItem
        {
            get
            {
                if ((this.mOpenVersionMenuItem == null))
                {
                    this.mOpenVersionMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mOpenVersionMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "OpenVersion";
                    this.mOpenVersionMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenVersionMenuItem;
            }
        }
        
        public WpfMenuItem ScheduleMenuItem
        {
            get
            {
                if ((this.mScheduleMenuItem == null))
                {
                    this.mScheduleMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mScheduleMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Schedule";
                    this.mScheduleMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mScheduleMenuItem;
            }
        }
        
        public WpfMenuItem ViewApisJsonMenuItem
        {
            get
            {
                if ((this.mViewApisJsonMenuItem == null))
                {
                    this.mViewApisJsonMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mViewApisJsonMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ViewApisJsonItem";
                    this.mViewApisJsonMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewApisJsonMenuItem;
            }
        }
        
        public WpfMenuItem ViewApis
        {
            get
            {
                if ((this.mViewApis == null))
                {
                    this.mViewApis = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mViewApis.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ViewApisJson";
                    this.mViewApis.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewApis;
            }
        }
        
        public SourcesMenuItem SourcesMenuItem
        {
            get
            {
                if ((this.mSourcesMenuItem == null))
                {
                    this.mSourcesMenuItem = new SourcesMenuItem(this);
                }
                return this.mSourcesMenuItem;
            }
        }
        
        public WpfMenuItem HideVersionHistoryMenuItem
        {
            get
            {
                if ((this.mHideVersionHistoryMenuItem == null))
                {
                    this.mHideVersionHistoryMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mHideVersionHistoryMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ShowHideVersions";
                    this.mHideVersionHistoryMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHideVersionHistoryMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mOpen;
        
        private WpfMenuItem mNewWorkflow;
        
        private WpfMenuItem mNewWorkflowItem;
        
        private WpfMenuItem mNewFolder;
        
        private WpfMenuItem mRename;
        
        private WpfMenuItem mDelete;
        
        private WpfMenuItem mDeploy;
        
        private WpfMenuItem mDeployItem;
        
        private WpfMenuItem mShowServerVersion;
        
        private WpfMenuItem mShowDependencies;
        
        private WpfMenuItem mDuplicate;
        
        private WpfMenuItem mViewSwagger;
        
        private WpfMenuItem mShowVersionHistory;
        
        private WpfMenuItem mTests;
        
        private WpfMenuItem mViewSwaggerMenuItem;
        
        private WpfMenuItem mDebugBrowserMenuItem;
        
        private WpfMenuItem mDebugInputsMenuItem;
        
        private WpfMenuItem mDebugStudioMenuItem;
        
        private WpfMenuItem mRunAllTestsMenuItem;
        
        private WpfMenuItem mNewFolderMenuItem;
        
        private WpfMenuItem mMakeCurrentVersionMenuItem;
        
        private WpfMenuItem mOpenVersionMenuItem;
        
        private WpfMenuItem mScheduleMenuItem;
        
        private WpfMenuItem mViewApisJsonMenuItem;
        
        private WpfMenuItem mViewApis;
        
        private SourcesMenuItem mSourcesMenuItem;
        
        private WpfMenuItem mHideVersionHistoryMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourcesMenuItem : WpfMenuItem
    {
        
        public SourcesMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Sources";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem NewServerSource
        {
            get
            {
                if ((this.mNewServerSource == null))
                {
                    this.mNewServerSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewServerSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewServerSource";
                    this.mNewServerSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNewServerSource.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mNewServerSource;
            }
        }
        
        public WpfMenuItem NewCOMPluginSource
        {
            get
            {
                if ((this.mNewCOMPluginSource == null))
                {
                    this.mNewCOMPluginSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewCOMPluginSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewComPluginSource";
                    this.mNewCOMPluginSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNewCOMPluginSource.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mNewCOMPluginSource;
            }
        }
        
        public WpfMenuItem NewDotNetPluginSource
        {
            get
            {
                if ((this.mNewDotNetPluginSource == null))
                {
                    this.mNewDotNetPluginSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewDotNetPluginSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewPluginSource";
                    this.mNewDotNetPluginSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNewDotNetPluginSource.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mNewDotNetPluginSource;
            }
        }
        
        public WpfMenuItem NewDropboxSource
        {
            get
            {
                if ((this.mNewDropboxSource == null))
                {
                    this.mNewDropboxSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewDropboxSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewDropboxSource";
                    this.mNewDropboxSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNewDropboxSource.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mNewDropboxSource;
            }
        }
        
        public WpfMenuItem NewEmailSource
        {
            get
            {
                if ((this.mNewEmailSource == null))
                {
                    this.mNewEmailSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewEmailSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewEmailSource";
                    this.mNewEmailSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNewEmailSource.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mNewEmailSource;
            }
        }
        
        public WpfMenuItem NewExchangeSource
        {
            get
            {
                if ((this.mNewExchangeSource == null))
                {
                    this.mNewExchangeSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewExchangeSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewExchangeSource";
                    this.mNewExchangeSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNewExchangeSource.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mNewExchangeSource;
            }
        }
        
        public WpfMenuItem NewMySQLSource
        {
            get
            {
                if ((this.mNewMySQLSource == null))
                {
                    this.mNewMySQLSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewMySQLSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewMySqlSource";
                    this.mNewMySQLSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNewMySQLSource.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mNewMySQLSource;
            }
        }
        
        public WpfMenuItem NewODBCSource
        {
            get
            {
                if ((this.mNewODBCSource == null))
                {
                    this.mNewODBCSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewODBCSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewOdbcSource";
                    this.mNewODBCSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNewODBCSource.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mNewODBCSource;
            }
        }
        
        public WpfMenuItem NewOracleSource
        {
            get
            {
                if ((this.mNewOracleSource == null))
                {
                    this.mNewOracleSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewOracleSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewOracleSource";
                    this.mNewOracleSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNewOracleSource.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mNewOracleSource;
            }
        }
        
        public WpfMenuItem NewPostgreSQLSource
        {
            get
            {
                if ((this.mNewPostgreSQLSource == null))
                {
                    this.mNewPostgreSQLSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewPostgreSQLSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewPostgreSqlSource";
                    this.mNewPostgreSQLSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNewPostgreSQLSource.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mNewPostgreSQLSource;
            }
        }
        
        public WpfMenuItem NewRabbitMQSource
        {
            get
            {
                if ((this.mNewRabbitMQSource == null))
                {
                    this.mNewRabbitMQSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewRabbitMQSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewRabbitMqSource";
                    this.mNewRabbitMQSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNewRabbitMQSource.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mNewRabbitMQSource;
            }
        }
        
        public WpfMenuItem NewSharepointSource
        {
            get
            {
                if ((this.mNewSharepointSource == null))
                {
                    this.mNewSharepointSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewSharepointSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewSharepointSource";
                    this.mNewSharepointSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNewSharepointSource.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mNewSharepointSource;
            }
        }
        
        public WpfMenuItem NewSQLServerSource
        {
            get
            {
                if ((this.mNewSQLServerSource == null))
                {
                    this.mNewSQLServerSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewSQLServerSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewSqlServerSource";
                    this.mNewSQLServerSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNewSQLServerSource.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mNewSQLServerSource;
            }
        }
        
        public WpfMenuItem NewWcfSource
        {
            get
            {
                if ((this.mNewWcfSource == null))
                {
                    this.mNewWcfSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewWcfSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewWcfSource";
                    this.mNewWcfSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNewWcfSource.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mNewWcfSource;
            }
        }
        
        public WpfMenuItem NewWebServiceSource
        {
            get
            {
                if ((this.mNewWebServiceSource == null))
                {
                    this.mNewWebServiceSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewWebServiceSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewWebSource";
                    this.mNewWebServiceSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNewWebServiceSource.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mNewWebServiceSource;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mNewServerSource;
        
        private WpfMenuItem mNewCOMPluginSource;
        
        private WpfMenuItem mNewDotNetPluginSource;
        
        private WpfMenuItem mNewDropboxSource;
        
        private WpfMenuItem mNewEmailSource;
        
        private WpfMenuItem mNewExchangeSource;
        
        private WpfMenuItem mNewMySQLSource;
        
        private WpfMenuItem mNewODBCSource;
        
        private WpfMenuItem mNewOracleSource;
        
        private WpfMenuItem mNewPostgreSQLSource;
        
        private WpfMenuItem mNewRabbitMQSource;
        
        private WpfMenuItem mNewSharepointSource;
        
        private WpfMenuItem mNewSQLServerSource;
        
        private WpfMenuItem mNewWcfSource;
        
        private WpfMenuItem mNewWebServiceSource;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DesignSurfaceContextMenu : WpfMenu
    {
        
        public DesignSurfaceContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem Cut
        {
            get
            {
                if ((this.mCut == null))
                {
                    this.mCut = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mCut.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "CutMenuItem";
                    this.mCut.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCut;
            }
        }
        
        public WpfMenuItem Paste
        {
            get
            {
                if ((this.mPaste == null))
                {
                    this.mPaste = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mPaste.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "PasteMenuItem";
                    this.mPaste.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPaste;
            }
        }
        
        public WpfMenuItem Copy
        {
            get
            {
                if ((this.mCopy == null))
                {
                    this.mCopy = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mCopy.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "CopyMenuItem";
                    this.mCopy.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCopy;
            }
        }
        
        public WpfMenuItem Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDelete.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "DeleteMenuItem";
                    this.mDelete.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDelete;
            }
        }
        
        public WpfMenuItem CopyasImage
        {
            get
            {
                if ((this.mCopyasImage == null))
                {
                    this.mCopyasImage = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mCopyasImage.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "CopyAsImageMenuItem";
                    this.mCopyasImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCopyasImage;
            }
        }
        
        public WpfMenuItem SaveasImage
        {
            get
            {
                if ((this.mSaveasImage == null))
                {
                    this.mSaveasImage = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mSaveasImage.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "SaveAsImageMenuItem";
                    this.mSaveasImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSaveasImage;
            }
        }
        
        public WpfMenuItem SetasStartNode
        {
            get
            {
                if ((this.mSetasStartNode == null))
                {
                    this.mSetasStartNode = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mSetasStartNode.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "SetAsStartNodeMenuItem";
                    this.mSetasStartNode.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSetasStartNode;
            }
        }
        
        public WpfMenuItem ShowLargeView
        {
            get
            {
                if ((this.mShowLargeView == null))
                {
                    this.mShowLargeView = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowLargeView.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_ShowLargeViewMenuItem_AutoID";
                    this.mShowLargeView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowLargeView;
            }
        }
        
        public WpfMenuItem InsertRow
        {
            get
            {
                if ((this.mInsertRow == null))
                {
                    this.mInsertRow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mInsertRow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_InsertRowMenuItem_AutoID";
                    this.mInsertRow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInsertRow;
            }
        }
        
        public WpfMenuItem DeleteRow
        {
            get
            {
                if ((this.mDeleteRow == null))
                {
                    this.mDeleteRow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeleteRow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_DeleteRowMenuItem_AutoID";
                    this.mDeleteRow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteRow;
            }
        }
        
        public WpfMenuItem InsertRowMenuItem
        {
            get
            {
                if ((this.mInsertRowMenuItem == null))
                {
                    this.mInsertRowMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mInsertRowMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_InsertRowMenuItem_AutoID";
                    this.mInsertRowMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInsertRowMenuItem;
            }
        }
        
        public WpfMenuItem DeleteRowMenuItem
        {
            get
            {
                if ((this.mDeleteRowMenuItem == null))
                {
                    this.mDeleteRowMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeleteRowMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_DeleteRowMenuItem_AutoID";
                    this.mDeleteRowMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteRowMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mCut;
        
        private WpfMenuItem mPaste;
        
        private WpfMenuItem mCopy;
        
        private WpfMenuItem mDelete;
        
        private WpfMenuItem mCopyasImage;
        
        private WpfMenuItem mSaveasImage;
        
        private WpfMenuItem mSetasStartNode;
        
        private WpfMenuItem mShowLargeView;
        
        private WpfMenuItem mInsertRow;
        
        private WpfMenuItem mDeleteRow;
        
        private WpfMenuItem mInsertRowMenuItem;
        
        private WpfMenuItem mDeleteRowMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExitFullScreenF11Text : WpfText
    {
        
        public ExitFullScreenF11Text(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Exit Full Screen (F11)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink ExitFullScreenF11Hyperlink
        {
            get
            {
                if ((this.mExitFullScreenF11Hyperlink == null))
                {
                    this.mExitFullScreenF11Hyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mExitFullScreenF11Hyperlink.SearchProperties[WpfHyperlink.PropertyNames.Name] = "Exit Full Screen (F11)";
                    this.mExitFullScreenF11Hyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExitFullScreenF11Hyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mExitFullScreenF11Hyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SideMenuBar : WpfCustom
    {
        
        public SideMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MenuView";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton NewVersionButton
        {
            get
            {
                if ((this.mNewVersionButton == null))
                {
                    this.mNewVersionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewVersionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "VersionButton";
                    this.mNewVersionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewVersionButton;
            }
        }
        
        public WpfButton ConfigureSettingsButton
        {
            get
            {
                if ((this.mConfigureSettingsButton == null))
                {
                    this.mConfigureSettingsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConfigureSettingsButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Configure settings", PropertyExpressionOperator.Contains));
                    this.mConfigureSettingsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConfigureSettingsButton;
            }
        }
        
        public WpfButton RunAndDebugButton
        {
            get
            {
                if ((this.mRunAndDebugButton == null))
                {
                    this.mRunAndDebugButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunAndDebugButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Run and debug your workflow service", PropertyExpressionOperator.Contains));
                    this.mRunAndDebugButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunAndDebugButton;
            }
        }
        
        public WpfButton SchedulerButton
        {
            get
            {
                if ((this.mSchedulerButton == null))
                {
                    this.mSchedulerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSchedulerButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Schedule a service to run", PropertyExpressionOperator.Contains));
                    this.mSchedulerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSchedulerButton;
            }
        }
        
        public WpfButton DeployButton
        {
            get
            {
                if ((this.mDeployButton == null))
                {
                    this.mDeployButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeployButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Move resources between Warewolf servers", PropertyExpressionOperator.Contains));
                    this.mDeployButton.WindowTitles.Add("Warewolf");
                    this.mDeployButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployButton;
            }
        }
        
        public WpfButton SaveButton
        {
            get
            {
                if ((this.mSaveButton == null))
                {
                    this.mSaveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSaveButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Save this tab", PropertyExpressionOperator.Contains));
                    this.mSaveButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSaveButton;
            }
        }
        
        public NewWorkflowButton NewWorkflowButton
        {
            get
            {
                if ((this.mNewWorkflowButton == null))
                {
                    this.mNewWorkflowButton = new NewWorkflowButton(this);
                }
                return this.mNewWorkflowButton;
            }
        }
        
        public WpfButton KnowledgeBaseButton
        {
            get
            {
                if ((this.mKnowledgeBaseButton == null))
                {
                    this.mKnowledgeBaseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mKnowledgeBaseButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Knowledge Base", PropertyExpressionOperator.Contains));
                    this.mKnowledgeBaseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mKnowledgeBaseButton;
            }
        }
        
        public WpfButton LockMenuButton
        {
            get
            {
                if ((this.mLockMenuButton == null))
                {
                    this.mLockMenuButton = new WpfButton(this);
                    #region Search Criteria
                    this.mLockMenuButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Lock / unlock the menu", PropertyExpressionOperator.Contains));
                    this.mLockMenuButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLockMenuButton;
            }
        }
        
        public LockunlockthemenuButton LockunlockthemenuButton
        {
            get
            {
                if ((this.mLockunlockthemenuButton == null))
                {
                    this.mLockunlockthemenuButton = new LockunlockthemenuButton(this);
                }
                return this.mLockunlockthemenuButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mNewVersionButton;
        
        private WpfButton mConfigureSettingsButton;
        
        private WpfButton mRunAndDebugButton;
        
        private WpfButton mSchedulerButton;
        
        private WpfButton mDeployButton;
        
        private WpfButton mSaveButton;
        
        private NewWorkflowButton mNewWorkflowButton;
        
        private WpfButton mKnowledgeBaseButton;
        
        private WpfButton mLockMenuButton;
        
        private LockunlockthemenuButton mLockunlockthemenuButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewWorkflowButton : WpfButton
    {
        
        public NewWorkflowButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new service", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = " ";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LockunlockthemenuButton : WpfButton
    {
        
        public LockunlockthemenuButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.HelpText] = "Lock / unlock the menu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText LockIconText
        {
            get
            {
                if ((this.mLockIconText == null))
                {
                    this.mLockIconText = new WpfText(this);
                    #region Search Criteria
                    this.mLockIconText.SearchProperties[WpfText.PropertyNames.Name] = " ";
                    this.mLockIconText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLockIconText;
            }
        }
        
        public WpfText UnlockMenuText
        {
            get
            {
                if ((this.mUnlockMenuText == null))
                {
                    this.mUnlockMenuText = new WpfText(this);
                    #region Search Criteria
                    this.mUnlockMenuText.SearchProperties[WpfText.PropertyNames.Name] = "Unlock Menu";
                    this.mUnlockMenuText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnlockMenuText;
            }
        }
        
        public WpfText LockMenuText
        {
            get
            {
                if ((this.mLockMenuText == null))
                {
                    this.mLockMenuText = new WpfText(this);
                    #region Search Criteria
                    this.mLockMenuText.SearchProperties[WpfText.PropertyNames.Name] = "Lock Menu";
                    this.mLockMenuText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLockMenuText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLockIconText;
        
        private WpfText mUnlockMenuText;
        
        private WpfText mLockMenuText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DockManager : WpfCustom
    {
        
        public DockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitPaneLeft SplitPaneLeft
        {
            get
            {
                if ((this.mSplitPaneLeft == null))
                {
                    this.mSplitPaneLeft = new SplitPaneLeft(this);
                }
                return this.mSplitPaneLeft;
            }
        }
        
        public SplitPaneMiddle SplitPaneMiddle
        {
            get
            {
                if ((this.mSplitPaneMiddle == null))
                {
                    this.mSplitPaneMiddle = new SplitPaneMiddle(this);
                }
                return this.mSplitPaneMiddle;
            }
        }
        
        public WpfButton NewWebServiceButton
        {
            get
            {
                if ((this.mNewWebServiceButton == null))
                {
                    this.mNewWebServiceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewWebServiceButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new web service", PropertyExpressionOperator.Contains));
                    this.mNewWebServiceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWebServiceButton;
            }
        }
        
        public WpfButton KnowledgeBaseButton
        {
            get
            {
                if ((this.mKnowledgeBaseButton == null))
                {
                    this.mKnowledgeBaseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mKnowledgeBaseButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Knowledge Base", PropertyExpressionOperator.Contains));
                    this.mKnowledgeBaseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mKnowledgeBaseButton;
            }
        }
        
        public WpfButton LockMenuButton
        {
            get
            {
                if ((this.mLockMenuButton == null))
                {
                    this.mLockMenuButton = new WpfButton(this);
                    #region Search Criteria
                    this.mLockMenuButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Lock / unlock the menu", PropertyExpressionOperator.Contains));
                    this.mLockMenuButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLockMenuButton;
            }
        }
        
        public WpfTabList UnpinnedTabAreaTop
        {
            get
            {
                if ((this.mUnpinnedTabAreaTop == null))
                {
                    this.mUnpinnedTabAreaTop = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaTop.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaTop";
                    this.mUnpinnedTabAreaTop.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaTop;
            }
        }
        
        public WpfTabList UnpinnedTabAreaBottom
        {
            get
            {
                if ((this.mUnpinnedTabAreaBottom == null))
                {
                    this.mUnpinnedTabAreaBottom = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaBottom.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaBottom";
                    this.mUnpinnedTabAreaBottom.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaBottom;
            }
        }
        
        public WpfTabList UnpinnedTabAreaLeft
        {
            get
            {
                if ((this.mUnpinnedTabAreaLeft == null))
                {
                    this.mUnpinnedTabAreaLeft = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaLeft.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaLeft";
                    this.mUnpinnedTabAreaLeft.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaLeft;
            }
        }
        
        public WpfTabList UnpinnedTabAreaRight
        {
            get
            {
                if ((this.mUnpinnedTabAreaRight == null))
                {
                    this.mUnpinnedTabAreaRight = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaRight.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaRight";
                    this.mUnpinnedTabAreaRight.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaRight;
            }
        }
        #endregion
        
        #region Fields
        private SplitPaneLeft mSplitPaneLeft;
        
        private SplitPaneMiddle mSplitPaneMiddle;
        
        private WpfButton mNewWebServiceButton;
        
        private WpfButton mKnowledgeBaseButton;
        
        private WpfButton mLockMenuButton;
        
        private WpfTabList mUnpinnedTabAreaTop;
        
        private WpfTabList mUnpinnedTabAreaBottom;
        
        private WpfTabList mUnpinnedTabAreaLeft;
        
        private WpfTabList mUnpinnedTabAreaRight;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneLeft : WpfCustom
    {
        
        public SplitPaneLeft(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfControl ExplorerToolboxSplitter
        {
            get
            {
                if ((this.mExplorerToolboxSplitter == null))
                {
                    this.mExplorerToolboxSplitter = new WpfControl(this);
                    #region Search Criteria
                    this.mExplorerToolboxSplitter.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mExplorerToolboxSplitter.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mExplorerToolboxSplitter.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExplorerToolboxSplitter;
            }
        }
        
        public ToolBox ToolBox
        {
            get
            {
                if ((this.mToolBox == null))
                {
                    this.mToolBox = new ToolBox(this);
                }
                return this.mToolBox;
            }
        }
        
        public WpfControl ToolboxHelpSplitter
        {
            get
            {
                if ((this.mToolboxHelpSplitter == null))
                {
                    this.mToolboxHelpSplitter = new WpfControl(this);
                    #region Search Criteria
                    this.mToolboxHelpSplitter.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mToolboxHelpSplitter.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
                    this.mToolboxHelpSplitter.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mToolboxHelpSplitter.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToolboxHelpSplitter;
            }
        }
        
        public Help Help
        {
            get
            {
                if ((this.mHelp == null))
                {
                    this.mHelp = new Help(this);
                }
                return this.mHelp;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mExplorerToolboxSplitter;
        
        private ToolBox mToolBox;
        
        private WpfControl mToolboxHelpSplitter;
        
        private Help mHelp;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ToolBox : WpfCustom
    {
        
        public ToolBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ToolboxView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ToolboxControl_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ToolUnpinBtn
        {
            get
            {
                if ((this.mToolUnpinBtn == null))
                {
                    this.mToolUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mToolUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mToolUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToolUnpinBtn;
            }
        }
        
        public SearchTextBox SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new SearchTextBox(this);
                }
                return this.mSearchTextBox;
            }
        }
        
        public ToolListBox ToolListBox
        {
            get
            {
                if ((this.mToolListBox == null))
                {
                    this.mToolListBox = new ToolListBox(this);
                }
                return this.mToolListBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mToolUnpinBtn;
        
        private SearchTextBox mSearchTextBox;
        
        private ToolListBox mToolListBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SearchTextBox : WpfEdit
    {
        
        public SearchTextBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ClearFilterButton
        {
            get
            {
                if ((this.mClearFilterButton == null))
                {
                    this.mClearFilterButton = new WpfButton(this);
                    #region Search Criteria
                    this.mClearFilterButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ClearSearchButton";
                    this.mClearFilterButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mClearFilterButton;
            }
        }
        
        public WpfText FloatingText
        {
            get
            {
                if ((this.mFloatingText == null))
                {
                    this.mFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mFloatingText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mClearFilterButton;
        
        private WpfText mFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ToolListBox : WpfList
    {
        
        public ToolListBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "ToolListBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FlowTools FlowTools
        {
            get
            {
                if ((this.mFlowTools == null))
                {
                    this.mFlowTools = new FlowTools(this);
                }
                return this.mFlowTools;
            }
        }
        
        public DataTools DataTools
        {
            get
            {
                if ((this.mDataTools == null))
                {
                    this.mDataTools = new DataTools(this);
                }
                return this.mDataTools;
            }
        }
        
        public Database Database
        {
            get
            {
                if ((this.mDatabase == null))
                {
                    this.mDatabase = new Database(this);
                }
                return this.mDatabase;
            }
        }
        
        public Email Email
        {
            get
            {
                if ((this.mEmail == null))
                {
                    this.mEmail = new Email(this);
                }
                return this.mEmail;
            }
        }
        
        public FileAndFTP FileAndFTP
        {
            get
            {
                if ((this.mFileAndFTP == null))
                {
                    this.mFileAndFTP = new FileAndFTP(this);
                }
                return this.mFileAndFTP;
            }
        }
        
        public HTTPWebMethods HTTPWebMethods
        {
            get
            {
                if ((this.mHTTPWebMethods == null))
                {
                    this.mHTTPWebMethods = new HTTPWebMethods(this);
                }
                return this.mHTTPWebMethods;
            }
        }
        
        public LoopTools LoopTools
        {
            get
            {
                if ((this.mLoopTools == null))
                {
                    this.mLoopTools = new LoopTools(this);
                }
                return this.mLoopTools;
            }
        }
        
        public RecordsetTools RecordsetTools
        {
            get
            {
                if ((this.mRecordsetTools == null))
                {
                    this.mRecordsetTools = new RecordsetTools(this);
                }
                return this.mRecordsetTools;
            }
        }
        
        public ResourceTools ResourceTools
        {
            get
            {
                if ((this.mResourceTools == null))
                {
                    this.mResourceTools = new ResourceTools(this);
                }
                return this.mResourceTools;
            }
        }
        
        public ScriptingTools ScriptingTools
        {
            get
            {
                if ((this.mScriptingTools == null))
                {
                    this.mScriptingTools = new ScriptingTools(this);
                }
                return this.mScriptingTools;
            }
        }
        
        public SharepointTools SharepointTools
        {
            get
            {
                if ((this.mSharepointTools == null))
                {
                    this.mSharepointTools = new SharepointTools(this);
                }
                return this.mSharepointTools;
            }
        }
        
        public StorageDropbox StorageDropbox
        {
            get
            {
                if ((this.mStorageDropbox == null))
                {
                    this.mStorageDropbox = new StorageDropbox(this);
                }
                return this.mStorageDropbox;
            }
        }
        
        public UtilityTools UtilityTools
        {
            get
            {
                if ((this.mUtilityTools == null))
                {
                    this.mUtilityTools = new UtilityTools(this);
                }
                return this.mUtilityTools;
            }
        }
        #endregion
        
        #region Fields
        private FlowTools mFlowTools;
        
        private DataTools mDataTools;
        
        private Database mDatabase;
        
        private Email mEmail;
        
        private FileAndFTP mFileAndFTP;
        
        private HTTPWebMethods mHTTPWebMethods;
        
        private LoopTools mLoopTools;
        
        private RecordsetTools mRecordsetTools;
        
        private ResourceTools mResourceTools;
        
        private ScriptingTools mScriptingTools;
        
        private SharepointTools mSharepointTools;
        
        private StorageDropbox mStorageDropbox;
        
        private UtilityTools mUtilityTools;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FlowTools : WpfGroup
    {
        
        public FlowTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Control Flow";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Decision Decision
        {
            get
            {
                if ((this.mDecision == null))
                {
                    this.mDecision = new Decision(this);
                }
                return this.mDecision;
            }
        }
        
        public Switch Switch
        {
            get
            {
                if ((this.mSwitch == null))
                {
                    this.mSwitch = new Switch(this);
                }
                return this.mSwitch;
            }
        }
        
        public Sequence Sequence
        {
            get
            {
                if ((this.mSequence == null))
                {
                    this.mSequence = new Sequence(this);
                }
                return this.mSequence;
            }
        }
        #endregion
        
        #region Fields
        private Decision mDecision;
        
        private Switch mSwitch;
        
        private Sequence mSequence;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Decision : WpfListItem
    {
        
        public Decision(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Decision";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DecisionImage
        {
            get
            {
                if ((this.mDecisionImage == null))
                {
                    this.mDecisionImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDecisionImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Decision";
                    this.mDecisionImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDecisionImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDecisionImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Switch : WpfListItem
    {
        
        public Switch(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Switch";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SwitchImage
        {
            get
            {
                if ((this.mSwitchImage == null))
                {
                    this.mSwitchImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSwitchImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Switch";
                    this.mSwitchImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSwitchImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSwitchImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Sequence : WpfListItem
    {
        
        public Sequence(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Sequence";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SequenceImage
        {
            get
            {
                if ((this.mSequenceImage == null))
                {
                    this.mSequenceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSequenceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Sequence";
                    this.mSequenceImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSequenceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSequenceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataTools : WpfGroup
    {
        
        public DataTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Data";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AssignObject AssignObject
        {
            get
            {
                if ((this.mAssignObject == null))
                {
                    this.mAssignObject = new AssignObject(this);
                }
                return this.mAssignObject;
            }
        }
        
        public MultiAssign MultiAssign
        {
            get
            {
                if ((this.mMultiAssign == null))
                {
                    this.mMultiAssign = new MultiAssign(this);
                }
                return this.mMultiAssign;
            }
        }
        
        public DataMerge DataMerge
        {
            get
            {
                if ((this.mDataMerge == null))
                {
                    this.mDataMerge = new DataMerge(this);
                }
                return this.mDataMerge;
            }
        }
        
        public BaseConvert BaseConvert
        {
            get
            {
                if ((this.mBaseConvert == null))
                {
                    this.mBaseConvert = new BaseConvert(this);
                }
                return this.mBaseConvert;
            }
        }
        
        public CaseConvert CaseConvert
        {
            get
            {
                if ((this.mCaseConvert == null))
                {
                    this.mCaseConvert = new CaseConvert(this);
                }
                return this.mCaseConvert;
            }
        }
        
        public DataSplit DataSplit
        {
            get
            {
                if ((this.mDataSplit == null))
                {
                    this.mDataSplit = new DataSplit(this);
                }
                return this.mDataSplit;
            }
        }
        
        public FindIndex FindIndex
        {
            get
            {
                if ((this.mFindIndex == null))
                {
                    this.mFindIndex = new FindIndex(this);
                }
                return this.mFindIndex;
            }
        }
        
        public Replace Replace
        {
            get
            {
                if ((this.mReplace == null))
                {
                    this.mReplace = new Replace(this);
                }
                return this.mReplace;
            }
        }
        #endregion
        
        #region Fields
        private AssignObject mAssignObject;
        
        private MultiAssign mMultiAssign;
        
        private DataMerge mDataMerge;
        
        private BaseConvert mBaseConvert;
        
        private CaseConvert mCaseConvert;
        
        private DataSplit mDataSplit;
        
        private FindIndex mFindIndex;
        
        private Replace mReplace;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssignObject : WpfListItem
    {
        
        public AssignObject(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Assign Object";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage AssignImage
        {
            get
            {
                if ((this.mAssignImage == null))
                {
                    this.mAssignImage = new WpfImage(this);
                    #region Search Criteria
                    this.mAssignImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Assign";
                    this.mAssignImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssignImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mAssignImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MultiAssign : WpfListItem
    {
        
        public MultiAssign(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Assign";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage AssignImage
        {
            get
            {
                if ((this.mAssignImage == null))
                {
                    this.mAssignImage = new WpfImage(this);
                    #region Search Criteria
                    this.mAssignImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Assign";
                    this.mAssignImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssignImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mAssignImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataMerge : WpfListItem
    {
        
        public DataMerge(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Data Merge";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DataMergeImage
        {
            get
            {
                if ((this.mDataMergeImage == null))
                {
                    this.mDataMergeImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDataMergeImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Data Merge";
                    this.mDataMergeImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDataMergeImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDataMergeImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BaseConvert : WpfListItem
    {
        
        public BaseConvert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Base Convert";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage BaseConvertImage
        {
            get
            {
                if ((this.mBaseConvertImage == null))
                {
                    this.mBaseConvertImage = new WpfImage(this);
                    #region Search Criteria
                    this.mBaseConvertImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Base Convert";
                    this.mBaseConvertImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mBaseConvertImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mBaseConvertImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CaseConvert : WpfListItem
    {
        
        public CaseConvert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Case Convert";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CaseConvertImage
        {
            get
            {
                if ((this.mCaseConvertImage == null))
                {
                    this.mCaseConvertImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCaseConvertImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Case Convert";
                    this.mCaseConvertImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCaseConvertImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCaseConvertImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataSplit : WpfListItem
    {
        
        public DataSplit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Data Split";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DataSplitImage
        {
            get
            {
                if ((this.mDataSplitImage == null))
                {
                    this.mDataSplitImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDataSplitImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Data Split";
                    this.mDataSplitImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDataSplitImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDataSplitImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FindIndex : WpfListItem
    {
        
        public FindIndex(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Find Index";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage FindIndexImage
        {
            get
            {
                if ((this.mFindIndexImage == null))
                {
                    this.mFindIndexImage = new WpfImage(this);
                    #region Search Criteria
                    this.mFindIndexImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Find Index";
                    this.mFindIndexImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFindIndexImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mFindIndexImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Replace : WpfListItem
    {
        
        public Replace(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Replace";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ReplaceImage
        {
            get
            {
                if ((this.mReplaceImage == null))
                {
                    this.mReplaceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReplaceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Replace";
                    this.mReplaceImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReplaceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReplaceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Database : WpfGroup
    {
        
        public Database(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Database";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem Postgre
        {
            get
            {
                if ((this.mPostgre == null))
                {
                    this.mPostgre = new WpfListItem(this);
                    #region Search Criteria
                    this.mPostgre.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mPostgre.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "PostgreSQL";
                    this.mPostgre.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPostgre;
            }
        }
        
        public WpfListItem Oracle
        {
            get
            {
                if ((this.mOracle == null))
                {
                    this.mOracle = new WpfListItem(this);
                    #region Search Criteria
                    this.mOracle.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mOracle.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Oracle";
                    this.mOracle.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOracle;
            }
        }
        
        public WpfListItem ODBC
        {
            get
            {
                if ((this.mODBC == null))
                {
                    this.mODBC = new WpfListItem(this);
                    #region Search Criteria
                    this.mODBC.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mODBC.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "ODBC";
                    this.mODBC.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mODBC;
            }
        }
        
        public MySQL MySQL
        {
            get
            {
                if ((this.mMySQL == null))
                {
                    this.mMySQL = new MySQL(this);
                }
                return this.mMySQL;
            }
        }
        
        public SQLBulkInsert SQLBulkInsert
        {
            get
            {
                if ((this.mSQLBulkInsert == null))
                {
                    this.mSQLBulkInsert = new SQLBulkInsert(this);
                }
                return this.mSQLBulkInsert;
            }
        }
        
        public SQLServer SQLServer
        {
            get
            {
                if ((this.mSQLServer == null))
                {
                    this.mSQLServer = new SQLServer(this);
                }
                return this.mSQLServer;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mPostgre;
        
        private WpfListItem mOracle;
        
        private WpfListItem mODBC;
        
        private MySQL mMySQL;
        
        private SQLBulkInsert mSQLBulkInsert;
        
        private SQLServer mSQLServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MySQL : WpfListItem
    {
        
        public MySQL(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "MySQL";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage MySQLImage
        {
            get
            {
                if ((this.mMySQLImage == null))
                {
                    this.mMySQLImage = new WpfImage(this);
                    #region Search Criteria
                    this.mMySQLImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "MySQL";
                    this.mMySQLImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMySQLImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mMySQLImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SQLBulkInsert : WpfListItem
    {
        
        public SQLBulkInsert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "SQL Bulk Insert";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SQLBulkInsertImage
        {
            get
            {
                if ((this.mSQLBulkInsertImage == null))
                {
                    this.mSQLBulkInsertImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSQLBulkInsertImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "SQL Bulk Insert";
                    this.mSQLBulkInsertImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSQLBulkInsertImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSQLBulkInsertImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SQLServer : WpfListItem
    {
        
        public SQLServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "SQL Server";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SQLServerImage
        {
            get
            {
                if ((this.mSQLServerImage == null))
                {
                    this.mSQLServerImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSQLServerImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "SQL Server";
                    this.mSQLServerImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSQLServerImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSQLServerImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Email : WpfGroup
    {
        
        public Email(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Email";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SMTPSend SMTPSend
        {
            get
            {
                if ((this.mSMTPSend == null))
                {
                    this.mSMTPSend = new SMTPSend(this);
                }
                return this.mSMTPSend;
            }
        }
        
        public ExchangeSend ExchangeSend
        {
            get
            {
                if ((this.mExchangeSend == null))
                {
                    this.mExchangeSend = new ExchangeSend(this);
                }
                return this.mExchangeSend;
            }
        }
        #endregion
        
        #region Fields
        private SMTPSend mSMTPSend;
        
        private ExchangeSend mExchangeSend;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SMTPSend : WpfListItem
    {
        
        public SMTPSend(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "SMTP Send";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SMTPSendImage
        {
            get
            {
                if ((this.mSMTPSendImage == null))
                {
                    this.mSMTPSendImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSMTPSendImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "SMTP Send";
                    this.mSMTPSendImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSMTPSendImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSMTPSendImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExchangeSend : WpfListItem
    {
        
        public ExchangeSend(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Exchange Send";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ExchangeSendImage
        {
            get
            {
                if ((this.mExchangeSendImage == null))
                {
                    this.mExchangeSendImage = new WpfImage(this);
                    #region Search Criteria
                    this.mExchangeSendImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Exchange Send";
                    this.mExchangeSendImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExchangeSendImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mExchangeSendImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileAndFTP : WpfGroup
    {
        
        public FileAndFTP(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "File, FTP, FTPS & SFTP";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Create Create
        {
            get
            {
                if ((this.mCreate == null))
                {
                    this.mCreate = new Create(this);
                }
                return this.mCreate;
            }
        }
        
        public Copy Copy
        {
            get
            {
                if ((this.mCopy == null))
                {
                    this.mCopy = new Copy(this);
                }
                return this.mCopy;
            }
        }
        
        public Delete Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new Delete(this);
                }
                return this.mDelete;
            }
        }
        
        public Move Move
        {
            get
            {
                if ((this.mMove == null))
                {
                    this.mMove = new Move(this);
                }
                return this.mMove;
            }
        }
        
        public ReadFolder ReadFolder
        {
            get
            {
                if ((this.mReadFolder == null))
                {
                    this.mReadFolder = new ReadFolder(this);
                }
                return this.mReadFolder;
            }
        }
        
        public ReadFile ReadFile
        {
            get
            {
                if ((this.mReadFile == null))
                {
                    this.mReadFile = new ReadFile(this);
                }
                return this.mReadFile;
            }
        }
        
        public WriteFile WriteFile
        {
            get
            {
                if ((this.mWriteFile == null))
                {
                    this.mWriteFile = new WriteFile(this);
                }
                return this.mWriteFile;
            }
        }
        
        public Rename Rename
        {
            get
            {
                if ((this.mRename == null))
                {
                    this.mRename = new Rename(this);
                }
                return this.mRename;
            }
        }
        
        public UnZip UnZip
        {
            get
            {
                if ((this.mUnZip == null))
                {
                    this.mUnZip = new UnZip(this);
                }
                return this.mUnZip;
            }
        }
        
        public Zip Zip
        {
            get
            {
                if ((this.mZip == null))
                {
                    this.mZip = new Zip(this);
                }
                return this.mZip;
            }
        }
        #endregion
        
        #region Fields
        private Create mCreate;
        
        private Copy mCopy;
        
        private Delete mDelete;
        
        private Move mMove;
        
        private ReadFolder mReadFolder;
        
        private ReadFile mReadFile;
        
        private WriteFile mWriteFile;
        
        private Rename mRename;
        
        private UnZip mUnZip;
        
        private Zip mZip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Create : WpfListItem
    {
        
        public Create(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Create";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CreateImage
        {
            get
            {
                if ((this.mCreateImage == null))
                {
                    this.mCreateImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCreateImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Create";
                    this.mCreateImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCreateImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCreateImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Copy : WpfListItem
    {
        
        public Copy(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Copy";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CopyImage
        {
            get
            {
                if ((this.mCopyImage == null))
                {
                    this.mCopyImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCopyImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Copy";
                    this.mCopyImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCopyImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCopyImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Delete : WpfListItem
    {
        
        public Delete(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteImage
        {
            get
            {
                if ((this.mDeleteImage == null))
                {
                    this.mDeleteImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete";
                    this.mDeleteImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Move : WpfListItem
    {
        
        public Move(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Move";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage MoveImage
        {
            get
            {
                if ((this.mMoveImage == null))
                {
                    this.mMoveImage = new WpfImage(this);
                    #region Search Criteria
                    this.mMoveImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Move";
                    this.mMoveImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMoveImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mMoveImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReadFolder : WpfListItem
    {
        
        public ReadFolder(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Read Folder";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ReadFolderImage
        {
            get
            {
                if ((this.mReadFolderImage == null))
                {
                    this.mReadFolderImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReadFolderImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Read Folder";
                    this.mReadFolderImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReadFolderImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReadFolderImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReadFile : WpfListItem
    {
        
        public ReadFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Read File";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ReadFileImage
        {
            get
            {
                if ((this.mReadFileImage == null))
                {
                    this.mReadFileImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReadFileImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Read File";
                    this.mReadFileImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReadFileImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReadFileImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WriteFile : WpfListItem
    {
        
        public WriteFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Write File";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage WriteFileImage
        {
            get
            {
                if ((this.mWriteFileImage == null))
                {
                    this.mWriteFileImage = new WpfImage(this);
                    #region Search Criteria
                    this.mWriteFileImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Write File";
                    this.mWriteFileImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWriteFileImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mWriteFileImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Rename : WpfListItem
    {
        
        public Rename(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Rename";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage RenameImage
        {
            get
            {
                if ((this.mRenameImage == null))
                {
                    this.mRenameImage = new WpfImage(this);
                    #region Search Criteria
                    this.mRenameImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Rename";
                    this.mRenameImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRenameImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mRenameImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UnZip : WpfListItem
    {
        
        public UnZip(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "UnZip";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UnZipImage
        {
            get
            {
                if ((this.mUnZipImage == null))
                {
                    this.mUnZipImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUnZipImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "UnZip";
                    this.mUnZipImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnZipImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUnZipImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Zip : WpfListItem
    {
        
        public Zip(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Zip";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ZipImage
        {
            get
            {
                if ((this.mZipImage == null))
                {
                    this.mZipImage = new WpfImage(this);
                    #region Search Criteria
                    this.mZipImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Zip";
                    this.mZipImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mZipImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mZipImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HTTPWebMethods : WpfGroup
    {
        
        public HTTPWebMethods(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "HTTP Web Methods";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DELETE1 DELETE
        {
            get
            {
                if ((this.mDELETE == null))
                {
                    this.mDELETE = new DELETE1(this);
                }
                return this.mDELETE;
            }
        }
        
        public GET GET
        {
            get
            {
                if ((this.mGET == null))
                {
                    this.mGET = new GET(this);
                }
                return this.mGET;
            }
        }
        
        public POST POST
        {
            get
            {
                if ((this.mPOST == null))
                {
                    this.mPOST = new POST(this);
                }
                return this.mPOST;
            }
        }
        
        public PUT PUT
        {
            get
            {
                if ((this.mPUT == null))
                {
                    this.mPUT = new PUT(this);
                }
                return this.mPUT;
            }
        }
        #endregion
        
        #region Fields
        private DELETE1 mDELETE;
        
        private GET mGET;
        
        private POST mPOST;
        
        private PUT mPUT;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DELETE1 : WpfListItem
    {
        
        public DELETE1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "DELETE";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DELETEImage
        {
            get
            {
                if ((this.mDELETEImage == null))
                {
                    this.mDELETEImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDELETEImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DELETE";
                    this.mDELETEImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDELETEImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDELETEImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class GET : WpfListItem
    {
        
        public GET(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "GET";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage GETImage
        {
            get
            {
                if ((this.mGETImage == null))
                {
                    this.mGETImage = new WpfImage(this);
                    #region Search Criteria
                    this.mGETImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "GET";
                    this.mGETImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGETImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mGETImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class POST : WpfListItem
    {
        
        public POST(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "POST";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage POSTImage
        {
            get
            {
                if ((this.mPOSTImage == null))
                {
                    this.mPOSTImage = new WpfImage(this);
                    #region Search Criteria
                    this.mPOSTImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "POST";
                    this.mPOSTImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPOSTImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mPOSTImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PUT : WpfListItem
    {
        
        public PUT(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "PUT";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage PUTImage
        {
            get
            {
                if ((this.mPUTImage == null))
                {
                    this.mPUTImage = new WpfImage(this);
                    #region Search Criteria
                    this.mPUTImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "PUT";
                    this.mPUTImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPUTImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mPUTImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LoopTools : WpfGroup
    {
        
        public LoopTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Loop Constructs";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ForEach ForEach
        {
            get
            {
                if ((this.mForEach == null))
                {
                    this.mForEach = new ForEach(this);
                }
                return this.mForEach;
            }
        }
        
        public Selectandapply Selectandapply
        {
            get
            {
                if ((this.mSelectandapply == null))
                {
                    this.mSelectandapply = new Selectandapply(this);
                }
                return this.mSelectandapply;
            }
        }
        #endregion
        
        #region Fields
        private ForEach mForEach;
        
        private Selectandapply mSelectandapply;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ForEach : WpfListItem
    {
        
        public ForEach(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "ForEach";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ForEachImage
        {
            get
            {
                if ((this.mForEachImage == null))
                {
                    this.mForEachImage = new WpfImage(this);
                    #region Search Criteria
                    this.mForEachImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "ForEach";
                    this.mForEachImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mForEachImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mForEachImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Selectandapply : WpfListItem
    {
        
        public Selectandapply(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Select and apply";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ButtonImageText ButtonImageText
        {
            get
            {
                if ((this.mButtonImageText == null))
                {
                    this.mButtonImageText = new ButtonImageText(this);
                }
                return this.mButtonImageText;
            }
        }
        #endregion
        
        #region Fields
        private ButtonImageText mButtonImageText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ButtonImageText : WpfText
    {
        
        public ButtonImageText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ToolButtonImage";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage Image
        {
            get
            {
                if ((this.mImage == null))
                {
                    this.mImage = new WpfImage(this);
                    #region Search Criteria
                    this.mImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Select and apply";
                    this.mImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetTools : WpfGroup
    {
        
        public RecordsetTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Recordset";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Length Length
        {
            get
            {
                if ((this.mLength == null))
                {
                    this.mLength = new Length(this);
                }
                return this.mLength;
            }
        }
        
        public FindRecords FindRecords
        {
            get
            {
                if ((this.mFindRecords == null))
                {
                    this.mFindRecords = new FindRecords(this);
                }
                return this.mFindRecords;
            }
        }
        
        public Delete2 Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new Delete2(this);
                }
                return this.mDelete;
            }
        }
        
        public Sort Sort
        {
            get
            {
                if ((this.mSort == null))
                {
                    this.mSort = new Sort(this);
                }
                return this.mSort;
            }
        }
        
        public Count Count
        {
            get
            {
                if ((this.mCount == null))
                {
                    this.mCount = new Count(this);
                }
                return this.mCount;
            }
        }
        
        public UniqueRecords UniqueRecords
        {
            get
            {
                if ((this.mUniqueRecords == null))
                {
                    this.mUniqueRecords = new UniqueRecords(this);
                }
                return this.mUniqueRecords;
            }
        }
        #endregion
        
        #region Fields
        private Length mLength;
        
        private FindRecords mFindRecords;
        
        private Delete2 mDelete;
        
        private Sort mSort;
        
        private Count mCount;
        
        private UniqueRecords mUniqueRecords;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Length : WpfListItem
    {
        
        public Length(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Length";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage LengthImage
        {
            get
            {
                if ((this.mLengthImage == null))
                {
                    this.mLengthImage = new WpfImage(this);
                    #region Search Criteria
                    this.mLengthImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Length";
                    this.mLengthImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLengthImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mLengthImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FindRecords : WpfListItem
    {
        
        public FindRecords(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Find Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage FindRecordsImage
        {
            get
            {
                if ((this.mFindRecordsImage == null))
                {
                    this.mFindRecordsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mFindRecordsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Find Records";
                    this.mFindRecordsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFindRecordsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mFindRecordsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Delete2 : WpfListItem
    {
        
        public Delete2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteImage
        {
            get
            {
                if ((this.mDeleteImage == null))
                {
                    this.mDeleteImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete";
                    this.mDeleteImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Sort : WpfListItem
    {
        
        public Sort(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Sort";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SortImage
        {
            get
            {
                if ((this.mSortImage == null))
                {
                    this.mSortImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSortImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Sort";
                    this.mSortImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSortImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSortImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Count : WpfListItem
    {
        
        public Count(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Count";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CountImage
        {
            get
            {
                if ((this.mCountImage == null))
                {
                    this.mCountImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCountImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Count";
                    this.mCountImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCountImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCountImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UniqueRecords : WpfListItem
    {
        
        public UniqueRecords(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Unique Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UniqueRecordsImage
        {
            get
            {
                if ((this.mUniqueRecordsImage == null))
                {
                    this.mUniqueRecordsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUniqueRecordsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Unique Records";
                    this.mUniqueRecordsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUniqueRecordsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUniqueRecordsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceTools : WpfGroup
    {
        
        public ResourceTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Resources";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Service Service
        {
            get
            {
                if ((this.mService == null))
                {
                    this.mService = new Service(this);
                }
                return this.mService;
            }
        }
        
        public ComDLL ComDLL
        {
            get
            {
                if ((this.mComDLL == null))
                {
                    this.mComDLL = new ComDLL(this);
                }
                return this.mComDLL;
            }
        }
        
        public DotNetDLL DotNetDLL
        {
            get
            {
                if ((this.mDotNetDLL == null))
                {
                    this.mDotNetDLL = new DotNetDLL(this);
                }
                return this.mDotNetDLL;
            }
        }
        
        public WCF WCF
        {
            get
            {
                if ((this.mWCF == null))
                {
                    this.mWCF = new WCF(this);
                }
                return this.mWCF;
            }
        }
        #endregion
        
        #region Fields
        private Service mService;
        
        private ComDLL mComDLL;
        
        private DotNetDLL mDotNetDLL;
        
        private WCF mWCF;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Service : WpfListItem
    {
        
        public Service(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Service";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ServiceImage
        {
            get
            {
                if ((this.mServiceImage == null))
                {
                    this.mServiceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mServiceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Service";
                    this.mServiceImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServiceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mServiceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComDLL : WpfListItem
    {
        
        public ComDLL(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Com DLL";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ComDLLImage
        {
            get
            {
                if ((this.mComDLLImage == null))
                {
                    this.mComDLLImage = new WpfImage(this);
                    #region Search Criteria
                    this.mComDLLImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Com DLL";
                    this.mComDLLImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComDLLImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mComDLLImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DotNetDLL : WpfListItem
    {
        
        public DotNetDLL(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "DotNet DLL";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DotNetDLLImage
        {
            get
            {
                if ((this.mDotNetDLLImage == null))
                {
                    this.mDotNetDLLImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDotNetDLLImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DotNet DLL";
                    this.mDotNetDLLImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDotNetDLLImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDotNetDLLImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WCF : WpfListItem
    {
        
        public WCF(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "WCF";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage WCFImage
        {
            get
            {
                if ((this.mWCFImage == null))
                {
                    this.mWCFImage = new WpfImage(this);
                    #region Search Criteria
                    this.mWCFImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "WCF";
                    this.mWCFImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWCFImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mWCFImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScriptingTools : WpfGroup
    {
        
        public ScriptingTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Scripting";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CMDScript CMDScript
        {
            get
            {
                if ((this.mCMDScript == null))
                {
                    this.mCMDScript = new CMDScript(this);
                }
                return this.mCMDScript;
            }
        }
        
        public Script Script
        {
            get
            {
                if ((this.mScript == null))
                {
                    this.mScript = new Script(this);
                }
                return this.mScript;
            }
        }
        
        public JavaScript JavaScript
        {
            get
            {
                if ((this.mJavaScript == null))
                {
                    this.mJavaScript = new JavaScript(this);
                }
                return this.mJavaScript;
            }
        }
        
        public Python Python
        {
            get
            {
                if ((this.mPython == null))
                {
                    this.mPython = new Python(this);
                }
                return this.mPython;
            }
        }
        
        public Ruby Ruby
        {
            get
            {
                if ((this.mRuby == null))
                {
                    this.mRuby = new Ruby(this);
                }
                return this.mRuby;
            }
        }
        #endregion
        
        #region Fields
        private CMDScript mCMDScript;
        
        private Script mScript;
        
        private JavaScript mJavaScript;
        
        private Python mPython;
        
        private Ruby mRuby;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CMDScript : WpfListItem
    {
        
        public CMDScript(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "CMD Script";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CMDScriptImage
        {
            get
            {
                if ((this.mCMDScriptImage == null))
                {
                    this.mCMDScriptImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCMDScriptImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "CMD Script";
                    this.mCMDScriptImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCMDScriptImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCMDScriptImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Script : WpfListItem
    {
        
        public Script(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Script";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ScriptImage
        {
            get
            {
                if ((this.mScriptImage == null))
                {
                    this.mScriptImage = new WpfImage(this);
                    #region Search Criteria
                    this.mScriptImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Script";
                    this.mScriptImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mScriptImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mScriptImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class JavaScript : WpfListItem
    {
        
        public JavaScript(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "JavaScript";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIToolButtonImageText UIToolButtonImageText
        {
            get
            {
                if ((this.mUIToolButtonImageText == null))
                {
                    this.mUIToolButtonImageText = new UIToolButtonImageText(this);
                }
                return this.mUIToolButtonImageText;
            }
        }
        #endregion
        
        #region Fields
        private UIToolButtonImageText mUIToolButtonImageText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIToolButtonImageText : WpfText
    {
        
        public UIToolButtonImageText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ToolButtonImage";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UIJavaScriptImage
        {
            get
            {
                if ((this.mUIJavaScriptImage == null))
                {
                    this.mUIJavaScriptImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIJavaScriptImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "JavaScript";
                    this.mUIJavaScriptImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIJavaScriptImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIJavaScriptImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Python : WpfListItem
    {
        
        public Python(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Python";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIToolButtonImageText1 UIToolButtonImageText
        {
            get
            {
                if ((this.mUIToolButtonImageText == null))
                {
                    this.mUIToolButtonImageText = new UIToolButtonImageText1(this);
                }
                return this.mUIToolButtonImageText;
            }
        }
        #endregion
        
        #region Fields
        private UIToolButtonImageText1 mUIToolButtonImageText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIToolButtonImageText1 : WpfText
    {
        
        public UIToolButtonImageText1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ToolButtonImage";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UIPythonImage
        {
            get
            {
                if ((this.mUIPythonImage == null))
                {
                    this.mUIPythonImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIPythonImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Python";
                    this.mUIPythonImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIPythonImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIPythonImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Ruby : WpfListItem
    {
        
        public Ruby(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Ruby";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIToolButtonImageText2 UIToolButtonImageText
        {
            get
            {
                if ((this.mUIToolButtonImageText == null))
                {
                    this.mUIToolButtonImageText = new UIToolButtonImageText2(this);
                }
                return this.mUIToolButtonImageText;
            }
        }
        #endregion
        
        #region Fields
        private UIToolButtonImageText2 mUIToolButtonImageText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIToolButtonImageText2 : WpfText
    {
        
        public UIToolButtonImageText2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ToolButtonImage";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UIRubyImage
        {
            get
            {
                if ((this.mUIRubyImage == null))
                {
                    this.mUIRubyImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIRubyImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Ruby";
                    this.mUIRubyImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIRubyImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIRubyImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SharepointTools : WpfGroup
    {
        
        public SharepointTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Sharepoint";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem MoveFile
        {
            get
            {
                if ((this.mMoveFile == null))
                {
                    this.mMoveFile = new WpfListItem(this);
                    #region Search Criteria
                    this.mMoveFile.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Move File";
                    this.mMoveFile.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMoveFile;
            }
        }
        
        public WpfListItem CopyFile
        {
            get
            {
                if ((this.mCopyFile == null))
                {
                    this.mCopyFile = new WpfListItem(this);
                    #region Search Criteria
                    this.mCopyFile.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Copy File";
                    this.mCopyFile.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCopyFile;
            }
        }
        
        public WpfListItem UploadFile
        {
            get
            {
                if ((this.mUploadFile == null))
                {
                    this.mUploadFile = new WpfListItem(this);
                    #region Search Criteria
                    this.mUploadFile.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Upload File";
                    this.mUploadFile.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUploadFile;
            }
        }
        
        public CreateListItems CreateListItems
        {
            get
            {
                if ((this.mCreateListItems == null))
                {
                    this.mCreateListItems = new CreateListItems(this);
                }
                return this.mCreateListItems;
            }
        }
        
        public DeleteListItems DeleteListItems
        {
            get
            {
                if ((this.mDeleteListItems == null))
                {
                    this.mDeleteListItems = new DeleteListItems(this);
                }
                return this.mDeleteListItems;
            }
        }
        
        public ReadListItems ReadListItems
        {
            get
            {
                if ((this.mReadListItems == null))
                {
                    this.mReadListItems = new ReadListItems(this);
                }
                return this.mReadListItems;
            }
        }
        
        public UpdateListItems UpdateListItems
        {
            get
            {
                if ((this.mUpdateListItems == null))
                {
                    this.mUpdateListItems = new UpdateListItems(this);
                }
                return this.mUpdateListItems;
            }
        }
        
        public DownloadFile DownloadFile
        {
            get
            {
                if ((this.mDownloadFile == null))
                {
                    this.mDownloadFile = new DownloadFile(this);
                }
                return this.mDownloadFile;
            }
        }
        
        public DeleteFile DeleteFile
        {
            get
            {
                if ((this.mDeleteFile == null))
                {
                    this.mDeleteFile = new DeleteFile(this);
                }
                return this.mDeleteFile;
            }
        }
        
        public ReadFolder1 ReadFolder
        {
            get
            {
                if ((this.mReadFolder == null))
                {
                    this.mReadFolder = new ReadFolder1(this);
                }
                return this.mReadFolder;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mMoveFile;
        
        private WpfListItem mCopyFile;
        
        private WpfListItem mUploadFile;
        
        private CreateListItems mCreateListItems;
        
        private DeleteListItems mDeleteListItems;
        
        private ReadListItems mReadListItems;
        
        private UpdateListItems mUpdateListItems;
        
        private DownloadFile mDownloadFile;
        
        private DeleteFile mDeleteFile;
        
        private ReadFolder1 mReadFolder;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateListItems : WpfListItem
    {
        
        public CreateListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Create List Item(s)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CreateListItemsImage
        {
            get
            {
                if ((this.mCreateListItemsImage == null))
                {
                    this.mCreateListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCreateListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Create List Item(s)";
                    this.mCreateListItemsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCreateListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCreateListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteListItems : WpfListItem
    {
        
        public DeleteListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete List Item(s)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteListItemsImage
        {
            get
            {
                if ((this.mDeleteListItemsImage == null))
                {
                    this.mDeleteListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete List Item(s)";
                    this.mDeleteListItemsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReadListItems : WpfListItem
    {
        
        public ReadListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Read List Item(s)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ReadListItemsImage
        {
            get
            {
                if ((this.mReadListItemsImage == null))
                {
                    this.mReadListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReadListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Read List Item(s)";
                    this.mReadListItemsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReadListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReadListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UpdateListItems : WpfListItem
    {
        
        public UpdateListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Update List Item(s)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UpdateListItemsImage
        {
            get
            {
                if ((this.mUpdateListItemsImage == null))
                {
                    this.mUpdateListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUpdateListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Update List Item(s)";
                    this.mUpdateListItemsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUpdateListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUpdateListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DownloadFile : WpfListItem
    {
        
        public DownloadFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Download File";
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ImageText ImageText
        {
            get
            {
                if ((this.mImageText == null))
                {
                    this.mImageText = new ImageText(this);
                }
                return this.mImageText;
            }
        }
        #endregion
        
        #region Fields
        private ImageText mImageText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ImageText : WpfText
    {
        
        public ImageText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ToolButtonImage";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage Image
        {
            get
            {
                if ((this.mImage == null))
                {
                    this.mImage = new WpfImage(this);
                    #region Search Criteria
                    this.mImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Download File";
                    this.mImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteFile : WpfListItem
    {
        
        public DeleteFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete File";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ImageText1 ImageText
        {
            get
            {
                if ((this.mImageText == null))
                {
                    this.mImageText = new ImageText1(this);
                }
                return this.mImageText;
            }
        }
        #endregion
        
        #region Fields
        private ImageText1 mImageText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ImageText1 : WpfText
    {
        
        public ImageText1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ToolButtonImage";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage Image
        {
            get
            {
                if ((this.mImage == null))
                {
                    this.mImage = new WpfImage(this);
                    #region Search Criteria
                    this.mImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete File";
                    this.mImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReadFolder1 : WpfListItem
    {
        
        public ReadFolder1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Read Folder";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ImageText2 ImageText
        {
            get
            {
                if ((this.mImageText == null))
                {
                    this.mImageText = new ImageText2(this);
                }
                return this.mImageText;
            }
        }
        #endregion
        
        #region Fields
        private ImageText2 mImageText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ImageText2 : WpfText
    {
        
        public ImageText2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ToolButtonImage";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage Image
        {
            get
            {
                if ((this.mImage == null))
                {
                    this.mImage = new WpfImage(this);
                    #region Search Criteria
                    this.mImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Read Folder";
                    this.mImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StorageDropbox : WpfGroup
    {
        
        public StorageDropbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Storage: Dropbox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Download Download
        {
            get
            {
                if ((this.mDownload == null))
                {
                    this.mDownload = new Download(this);
                }
                return this.mDownload;
            }
        }
        
        public Upload Upload
        {
            get
            {
                if ((this.mUpload == null))
                {
                    this.mUpload = new Upload(this);
                }
                return this.mUpload;
            }
        }
        
        public ListContents ListContents
        {
            get
            {
                if ((this.mListContents == null))
                {
                    this.mListContents = new ListContents(this);
                }
                return this.mListContents;
            }
        }
        
        public Delete3 Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new Delete3(this);
                }
                return this.mDelete;
            }
        }
        #endregion
        
        #region Fields
        private Download mDownload;
        
        private Upload mUpload;
        
        private ListContents mListContents;
        
        private Delete3 mDelete;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Download : WpfListItem
    {
        
        public Download(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Download";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DownloadImage
        {
            get
            {
                if ((this.mDownloadImage == null))
                {
                    this.mDownloadImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDownloadImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Download";
                    this.mDownloadImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDownloadImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDownloadImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Upload : WpfListItem
    {
        
        public Upload(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Upload";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UploadImage
        {
            get
            {
                if ((this.mUploadImage == null))
                {
                    this.mUploadImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUploadImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Upload";
                    this.mUploadImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUploadImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUploadImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListContents : WpfListItem
    {
        
        public ListContents(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "List Contents";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ListContentsImage
        {
            get
            {
                if ((this.mListContentsImage == null))
                {
                    this.mListContentsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mListContentsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "List Contents";
                    this.mListContentsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mListContentsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mListContentsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Delete3 : WpfListItem
    {
        
        public Delete3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteImage
        {
            get
            {
                if ((this.mDeleteImage == null))
                {
                    this.mDeleteImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete";
                    this.mDeleteImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UtilityTools : WpfGroup
    {
        
        public UtilityTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Utility";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AggregateCalculate AggregateCalculate
        {
            get
            {
                if ((this.mAggregateCalculate == null))
                {
                    this.mAggregateCalculate = new AggregateCalculate(this);
                }
                return this.mAggregateCalculate;
            }
        }
        
        public WpfListItem RabbitMQConsume
        {
            get
            {
                if ((this.mRabbitMQConsume == null))
                {
                    this.mRabbitMQConsume = new WpfListItem(this);
                    #region Search Criteria
                    this.mRabbitMQConsume.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "RabbitMQ Consume";
                    this.mRabbitMQConsume.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRabbitMQConsume;
            }
        }
        
        public WpfListItem RabbitMQPublish
        {
            get
            {
                if ((this.mRabbitMQPublish == null))
                {
                    this.mRabbitMQPublish = new WpfListItem(this);
                    #region Search Criteria
                    this.mRabbitMQPublish.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "RabbitMQ Publish";
                    this.mRabbitMQPublish.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRabbitMQPublish;
            }
        }
        
        public Comment Comment
        {
            get
            {
                if ((this.mComment == null))
                {
                    this.mComment = new Comment(this);
                }
                return this.mComment;
            }
        }
        
        public CreateJSON CreateJSON
        {
            get
            {
                if ((this.mCreateJSON == null))
                {
                    this.mCreateJSON = new CreateJSON(this);
                }
                return this.mCreateJSON;
            }
        }
        
        public Calculate Calculate
        {
            get
            {
                if ((this.mCalculate == null))
                {
                    this.mCalculate = new Calculate(this);
                }
                return this.mCalculate;
            }
        }
        
        public DateTime DateTime
        {
            get
            {
                if ((this.mDateTime == null))
                {
                    this.mDateTime = new DateTime(this);
                }
                return this.mDateTime;
            }
        }
        
        public DateTimeDifference DateTimeDifference
        {
            get
            {
                if ((this.mDateTimeDifference == null))
                {
                    this.mDateTimeDifference = new DateTimeDifference(this);
                }
                return this.mDateTimeDifference;
            }
        }
        
        public SysInfo SysInfo
        {
            get
            {
                if ((this.mSysInfo == null))
                {
                    this.mSysInfo = new SysInfo(this);
                }
                return this.mSysInfo;
            }
        }
        
        public FormatNumber FormatNumber
        {
            get
            {
                if ((this.mFormatNumber == null))
                {
                    this.mFormatNumber = new FormatNumber(this);
                }
                return this.mFormatNumber;
            }
        }
        
        public Random Random
        {
            get
            {
                if ((this.mRandom == null))
                {
                    this.mRandom = new Random(this);
                }
                return this.mRandom;
            }
        }
        
        public Email1 Email
        {
            get
            {
                if ((this.mEmail == null))
                {
                    this.mEmail = new Email1(this);
                }
                return this.mEmail;
            }
        }
        
        public WebRequest WebRequest
        {
            get
            {
                if ((this.mWebRequest == null))
                {
                    this.mWebRequest = new WebRequest(this);
                }
                return this.mWebRequest;
            }
        }
        
        public XPath XPath
        {
            get
            {
                if ((this.mXPath == null))
                {
                    this.mXPath = new XPath(this);
                }
                return this.mXPath;
            }
        }
        #endregion
        
        #region Fields
        private AggregateCalculate mAggregateCalculate;
        
        private WpfListItem mRabbitMQConsume;
        
        private WpfListItem mRabbitMQPublish;
        
        private Comment mComment;
        
        private CreateJSON mCreateJSON;
        
        private Calculate mCalculate;
        
        private DateTime mDateTime;
        
        private DateTimeDifference mDateTimeDifference;
        
        private SysInfo mSysInfo;
        
        private FormatNumber mFormatNumber;
        
        private Random mRandom;
        
        private Email1 mEmail;
        
        private WebRequest mWebRequest;
        
        private XPath mXPath;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AggregateCalculate : WpfListItem
    {
        
        public AggregateCalculate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Aggregate Calculate";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage AggregateCalculateImage
        {
            get
            {
                if ((this.mAggregateCalculateImage == null))
                {
                    this.mAggregateCalculateImage = new WpfImage(this);
                    #region Search Criteria
                    this.mAggregateCalculateImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Aggregate Calculate";
                    this.mAggregateCalculateImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAggregateCalculateImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mAggregateCalculateImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Comment : WpfListItem
    {
        
        public Comment(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Comment";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CommentImage
        {
            get
            {
                if ((this.mCommentImage == null))
                {
                    this.mCommentImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCommentImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Comment";
                    this.mCommentImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCommentImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCommentImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateJSON : WpfListItem
    {
        
        public CreateJSON(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Create JSON";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CreateJSONImage
        {
            get
            {
                if ((this.mCreateJSONImage == null))
                {
                    this.mCreateJSONImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCreateJSONImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Create JSON";
                    this.mCreateJSONImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCreateJSONImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCreateJSONImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Calculate : WpfListItem
    {
        
        public Calculate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Calculate";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CalculateImage
        {
            get
            {
                if ((this.mCalculateImage == null))
                {
                    this.mCalculateImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCalculateImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Calculate";
                    this.mCalculateImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCalculateImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCalculateImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DateTime : WpfListItem
    {
        
        public DateTime(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Date Time";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DateTimeImage
        {
            get
            {
                if ((this.mDateTimeImage == null))
                {
                    this.mDateTimeImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDateTimeImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Date Time";
                    this.mDateTimeImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDateTimeImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDateTimeImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DateTimeDifference : WpfListItem
    {
        
        public DateTimeDifference(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Date Time Diff";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DateTimeDifferenceImage
        {
            get
            {
                if ((this.mDateTimeDifferenceImage == null))
                {
                    this.mDateTimeDifferenceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDateTimeDifferenceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Date Time Diff";
                    this.mDateTimeDifferenceImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDateTimeDifferenceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDateTimeDifferenceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SysInfo : WpfListItem
    {
        
        public SysInfo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Sys Info";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SysInfoImage
        {
            get
            {
                if ((this.mSysInfoImage == null))
                {
                    this.mSysInfoImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSysInfoImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Sys Info";
                    this.mSysInfoImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSysInfoImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSysInfoImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FormatNumber : WpfListItem
    {
        
        public FormatNumber(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Format Number";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage FormatNumberImage
        {
            get
            {
                if ((this.mFormatNumberImage == null))
                {
                    this.mFormatNumberImage = new WpfImage(this);
                    #region Search Criteria
                    this.mFormatNumberImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Format Number";
                    this.mFormatNumberImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFormatNumberImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mFormatNumberImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Random : WpfListItem
    {
        
        public Random(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Random";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage RandomImage
        {
            get
            {
                if ((this.mRandomImage == null))
                {
                    this.mRandomImage = new WpfImage(this);
                    #region Search Criteria
                    this.mRandomImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Random";
                    this.mRandomImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRandomImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mRandomImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Email1 : WpfListItem
    {
        
        public Email1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Email";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage EmailImage
        {
            get
            {
                if ((this.mEmailImage == null))
                {
                    this.mEmailImage = new WpfImage(this);
                    #region Search Criteria
                    this.mEmailImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Email";
                    this.mEmailImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEmailImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mEmailImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebRequest : WpfListItem
    {
        
        public WebRequest(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Web Request";
            #endregion
        }
        
        #region Properties
        public WpfImage WebRequestImage
        {
            get
            {
                if ((this.mWebRequestImage == null))
                {
                    this.mWebRequestImage = new WpfImage(this);
                    #region Search Criteria
                    this.mWebRequestImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Web Request";
                    this.mWebRequestImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebRequestImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mWebRequestImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XPath : WpfListItem
    {
        
        public XPath(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "XPath";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage XPathImage
        {
            get
            {
                if ((this.mXPathImage == null))
                {
                    this.mXPathImage = new WpfImage(this);
                    #region Search Criteria
                    this.mXPathImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "XPath";
                    this.mXPathImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mXPathImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mXPathImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Help : WpfCustom
    {
        
        public Help(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Help";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DocumentorUnpinBtn
        {
            get
            {
                if ((this.mDocumentorUnpinBtn == null))
                {
                    this.mDocumentorUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mDocumentorUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mDocumentorUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDocumentorUnpinBtn;
            }
        }
        
        public WpfControl HelpWindow
        {
            get
            {
                if ((this.mHelpWindow == null))
                {
                    this.mHelpWindow = new WpfControl(this);
                    #region Search Criteria
                    this.mHelpWindow.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mHelpWindow.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mHelpWindow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHelpWindow;
            }
        }
        
        public WpfCustom HelpTextEditor
        {
            get
            {
                if ((this.mHelpTextEditor == null))
                {
                    this.mHelpTextEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mHelpTextEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamRichTextEditor";
                    this.mHelpTextEditor.SearchProperties[WpfControl.PropertyNames.AutomationId] = "XamRichTextEditor";
                    this.mHelpTextEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHelpTextEditor;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDocumentorUnpinBtn;
        
        private WpfControl mHelpWindow;
        
        private WpfCustom mHelpTextEditor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneMiddle : WpfCustom
    {
        
        public SplitPaneMiddle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabManSplitPane TabManSplitPane
        {
            get
            {
                if ((this.mTabManSplitPane == null))
                {
                    this.mTabManSplitPane = new TabManSplitPane(this);
                }
                return this.mTabManSplitPane;
            }
        }
        
        public WpfControl ToolboxHelpSplitter
        {
            get
            {
                if ((this.mToolboxHelpSplitter == null))
                {
                    this.mToolboxHelpSplitter = new WpfControl(this);
                    #region Search Criteria
                    this.mToolboxHelpSplitter.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mToolboxHelpSplitter.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
                    this.mToolboxHelpSplitter.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mToolboxHelpSplitter.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToolboxHelpSplitter;
            }
        }
        
        public Help1 Help
        {
            get
            {
                if ((this.mHelp == null))
                {
                    this.mHelp = new Help1(this);
                }
                return this.mHelp;
            }
        }
        #endregion
        
        #region Fields
        private TabManSplitPane mTabManSplitPane;
        
        private WpfControl mToolboxHelpSplitter;
        
        private Help1 mHelp;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabManSplitPane : WpfCustom
    {
        
        public TabManSplitPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SplitPane_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabMan TabMan
        {
            get
            {
                if ((this.mTabMan == null))
                {
                    this.mTabMan = new TabMan(this);
                }
                return this.mTabMan;
            }
        }
        #endregion
        
        #region Fields
        private TabMan mTabMan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabMan : WpfTabList
    {
        
        public TabMan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public StartPage StartPage
        {
            get
            {
                if ((this.mStartPage == null))
                {
                    this.mStartPage = new StartPage(this);
                }
                return this.mStartPage;
            }
        }
        
        public FilesMenu FilesMenu
        {
            get
            {
                if ((this.mFilesMenu == null))
                {
                    this.mFilesMenu = new FilesMenu(this);
                }
                return this.mFilesMenu;
            }
        }
        
        public WpfButton NavigatorButton
        {
            get
            {
                if ((this.mNavigatorButton == null))
                {
                    this.mNavigatorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNavigatorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "showNavigatorButton";
                    this.mNavigatorButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNavigatorButton;
            }
        }
        
        public WpfTabPage HelpTab
        {
            get
            {
                if ((this.mHelpTab == null))
                {
                    this.mHelpTab = new WpfTabPage(this);
                    #region Search Criteria
                    this.mHelpTab.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.Help.HelpViewModel";
                    this.mHelpTab.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHelpTab;
            }
        }
        #endregion
        
        #region Fields
        private StartPage mStartPage;
        
        private FilesMenu mFilesMenu;
        
        private WpfButton mNavigatorButton;
        
        private WpfTabPage mHelpTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StartPage : WpfTabPage
    {
        
        public StartPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Settings.SettingsViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorksurfaceContext WorksurfaceContext
        {
            get
            {
                if ((this.mWorksurfaceContext == null))
                {
                    this.mWorksurfaceContext = new WorksurfaceContext(this);
                }
                return this.mWorksurfaceContext;
            }
        }
        
        public WpfButton StartPageTabCloseButton
        {
            get
            {
                if ((this.mStartPageTabCloseButton == null))
                {
                    this.mStartPageTabCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mStartPageTabCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mStartPageTabCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStartPageTabCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WorksurfaceContext mWorksurfaceContext;
        
        private WpfButton mStartPageTabCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorksurfaceContext : WpfCustom
    {
        
        public WorksurfaceContext(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SettingsView SettingsView
        {
            get
            {
                if ((this.mSettingsView == null))
                {
                    this.mSettingsView = new SettingsView(this);
                }
                return this.mSettingsView;
            }
        }
        #endregion
        
        #region Fields
        private SettingsView mSettingsView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SettingsView : WpfCustom
    {
        
        public SettingsView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SettingsView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SettingsView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabList TabList
        {
            get
            {
                if ((this.mTabList == null))
                {
                    this.mTabList = new TabList(this);
                }
                return this.mTabList;
            }
        }
        #endregion
        
        #region Fields
        private TabList mTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabList : WpfTabList
    {
        
        public TabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SecurityTab SecurityTab
        {
            get
            {
                if ((this.mSecurityTab == null))
                {
                    this.mSecurityTab = new SecurityTab(this);
                }
                return this.mSecurityTab;
            }
        }
        
        public LoggingTab LoggingTab
        {
            get
            {
                if ((this.mLoggingTab == null))
                {
                    this.mLoggingTab = new LoggingTab(this);
                }
                return this.mLoggingTab;
            }
        }
        
        public PerfomanceCounterTab PerfomanceCounterTab
        {
            get
            {
                if ((this.mPerfomanceCounterTab == null))
                {
                    this.mPerfomanceCounterTab = new PerfomanceCounterTab(this);
                }
                return this.mPerfomanceCounterTab;
            }
        }
        #endregion
        
        #region Fields
        private SecurityTab mSecurityTab;
        
        private LoggingTab mLoggingTab;
        
        private PerfomanceCounterTab mPerfomanceCounterTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SecurityTab : WpfTabPage
    {
        
        public SecurityTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "System.Windows.Controls.TabItem Header: Content:";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SecurityWindow SecurityWindow
        {
            get
            {
                if ((this.mSecurityWindow == null))
                {
                    this.mSecurityWindow = new SecurityWindow(this);
                }
                return this.mSecurityWindow;
            }
        }
        
        public WpfText SECURITY
        {
            get
            {
                if ((this.mSECURITY == null))
                {
                    this.mSECURITY = new WpfText(this);
                    #region Search Criteria
                    this.mSECURITY.SearchProperties[WpfText.PropertyNames.Name] = "SECURITY";
                    this.mSECURITY.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSECURITY;
            }
        }
        #endregion
        
        #region Fields
        private SecurityWindow mSecurityWindow;
        
        private WpfText mSECURITY;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SecurityWindow : WpfCustom
    {
        
        public SecurityWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SecurityView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SecurityViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ServerPermissions ServerPermissions
        {
            get
            {
                if ((this.mServerPermissions == null))
                {
                    this.mServerPermissions = new ServerPermissions(this);
                }
                return this.mServerPermissions;
            }
        }
        
        public ResourcePermissions ResourcePermissions
        {
            get
            {
                if ((this.mResourcePermissions == null))
                {
                    this.mResourcePermissions = new ResourcePermissions(this);
                }
                return this.mResourcePermissions;
            }
        }
        #endregion
        
        #region Fields
        private ServerPermissions mServerPermissions;
        
        private ResourcePermissions mResourcePermissions;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerPermissions : WpfTable
    {
        
        public ServerPermissions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ServerPermissionsDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WarewolfAdminROW WarewolfAdminROW
        {
            get
            {
                if ((this.mWarewolfAdminROW == null))
                {
                    this.mWarewolfAdminROW = new WarewolfAdminROW(this);
                }
                return this.mWarewolfAdminROW;
            }
        }
        
        public PublicROW PublicROW
        {
            get
            {
                if ((this.mPublicROW == null))
                {
                    this.mPublicROW = new PublicROW(this);
                }
                return this.mPublicROW;
            }
        }
        #endregion
        
        #region Fields
        private WarewolfAdminROW mWarewolfAdminROW;
        
        private PublicROW mPublicROW;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WarewolfAdminROW : WpfPane
    {
        
        public WarewolfAdminROW(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "0";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DeleteCell DeleteCell
        {
            get
            {
                if ((this.mDeleteCell == null))
                {
                    this.mDeleteCell = new DeleteCell(this);
                }
                return this.mDeleteCell;
            }
        }
        
        public DeployToCell DeployToCell
        {
            get
            {
                if ((this.mDeployToCell == null))
                {
                    this.mDeployToCell = new DeployToCell(this);
                }
                return this.mDeployToCell;
            }
        }
        
        public DeployFromCell DeployFromCell
        {
            get
            {
                if ((this.mDeployFromCell == null))
                {
                    this.mDeployFromCell = new DeployFromCell(this);
                }
                return this.mDeployFromCell;
            }
        }
        
        public AdministratorCell AdministratorCell
        {
            get
            {
                if ((this.mAdministratorCell == null))
                {
                    this.mAdministratorCell = new AdministratorCell(this);
                }
                return this.mAdministratorCell;
            }
        }
        
        public ViewCell ViewCell
        {
            get
            {
                if ((this.mViewCell == null))
                {
                    this.mViewCell = new ViewCell(this);
                }
                return this.mViewCell;
            }
        }
        
        public ExecuteCell ExecuteCell
        {
            get
            {
                if ((this.mExecuteCell == null))
                {
                    this.mExecuteCell = new ExecuteCell(this);
                }
                return this.mExecuteCell;
            }
        }
        
        public ContributeCell ContributeCell
        {
            get
            {
                if ((this.mContributeCell == null))
                {
                    this.mContributeCell = new ContributeCell(this);
                }
                return this.mContributeCell;
            }
        }
        #endregion
        
        #region Fields
        private DeleteCell mDeleteCell;
        
        private DeployToCell mDeployToCell;
        
        private DeployFromCell mDeployFromCell;
        
        private AdministratorCell mAdministratorCell;
        
        private ViewCell mViewCell;
        
        private ExecuteCell mExecuteCell;
        
        private ContributeCell mContributeCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteCell : WpfCell
    {
        
        public DeleteCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "Dev2.Runtime.Configuration.ViewModels.Base.RelayCommand";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_AddRemovebtn_AutoID";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeployToCell : WpfCell
    {
        
        public DeployToCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox DeployToCheckBox
        {
            get
            {
                if ((this.mDeployToCheckBox == null))
                {
                    this.mDeployToCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mDeployToCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_DeployToPermissionCheckBox_AutoID";
                    this.mDeployToCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Instance] = "1";
                    this.mDeployToCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployToCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mDeployToCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeployFromCell : WpfCell
    {
        
        public DeployFromCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox DeployFromCheckBox
        {
            get
            {
                if ((this.mDeployFromCheckBox == null))
                {
                    this.mDeployFromCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mDeployFromCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_DeployFromPermissionCheckBox_AutoID";
                    this.mDeployFromCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployFromCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mDeployFromCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AdministratorCell : WpfCell
    {
        
        public AdministratorCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox AdministratorCheckBox
        {
            get
            {
                if ((this.mAdministratorCheckBox == null))
                {
                    this.mAdministratorCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mAdministratorCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_AdministratorPermissionCheckBox_AutoID";
                    this.mAdministratorCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAdministratorCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mAdministratorCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ViewCell : WpfCell
    {
        
        public ViewCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ViewCheckBox
        {
            get
            {
                if ((this.mViewCheckBox == null))
                {
                    this.mViewCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mViewCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_ViewPermissionCheckBox_AutoID";
                    this.mViewCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mViewCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExecuteCell : WpfCell
    {
        
        public ExecuteCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ExecuteCheckBox
        {
            get
            {
                if ((this.mExecuteCheckBox == null))
                {
                    this.mExecuteCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mExecuteCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_ExecutePermissionCheckBox_AutoID";
                    this.mExecuteCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExecuteCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mExecuteCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ContributeCell : WpfCell
    {
        
        public ContributeCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ContributeCheckBox
        {
            get
            {
                if ((this.mContributeCheckBox == null))
                {
                    this.mContributeCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mContributeCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_ContributePermissionCheckBox_AutoID";
                    this.mContributeCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mContributeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mContributeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PublicROW : WpfPane
    {
        
        public PublicROW(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Public_DeployToCell Public_DeployToCell
        {
            get
            {
                if ((this.mPublic_DeployToCell == null))
                {
                    this.mPublic_DeployToCell = new Public_DeployToCell(this);
                }
                return this.mPublic_DeployToCell;
            }
        }
        
        public Public_DeployFromCell Public_DeployFromCell
        {
            get
            {
                if ((this.mPublic_DeployFromCell == null))
                {
                    this.mPublic_DeployFromCell = new Public_DeployFromCell(this);
                }
                return this.mPublic_DeployFromCell;
            }
        }
        
        public Public_AdministratorCell Public_AdministratorCell
        {
            get
            {
                if ((this.mPublic_AdministratorCell == null))
                {
                    this.mPublic_AdministratorCell = new Public_AdministratorCell(this);
                }
                return this.mPublic_AdministratorCell;
            }
        }
        
        public Public_ViewCell Public_ViewCell
        {
            get
            {
                if ((this.mPublic_ViewCell == null))
                {
                    this.mPublic_ViewCell = new Public_ViewCell(this);
                }
                return this.mPublic_ViewCell;
            }
        }
        
        public Public_ExecuteCell Public_ExecuteCell
        {
            get
            {
                if ((this.mPublic_ExecuteCell == null))
                {
                    this.mPublic_ExecuteCell = new Public_ExecuteCell(this);
                }
                return this.mPublic_ExecuteCell;
            }
        }
        
        public Public_ContributeCell Public_ContributeCell
        {
            get
            {
                if ((this.mPublic_ContributeCell == null))
                {
                    this.mPublic_ContributeCell = new Public_ContributeCell(this);
                }
                return this.mPublic_ContributeCell;
            }
        }
        
        public WindowsGroup WindowsGroup
        {
            get
            {
                if ((this.mWindowsGroup == null))
                {
                    this.mWindowsGroup = new WindowsGroup(this);
                }
                return this.mWindowsGroup;
            }
        }
        #endregion
        
        #region Fields
        private Public_DeployToCell mPublic_DeployToCell;
        
        private Public_DeployFromCell mPublic_DeployFromCell;
        
        private Public_AdministratorCell mPublic_AdministratorCell;
        
        private Public_ViewCell mPublic_ViewCell;
        
        private Public_ExecuteCell mPublic_ExecuteCell;
        
        private Public_ContributeCell mPublic_ContributeCell;
        
        private WindowsGroup mWindowsGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_DeployToCell : WpfCell
    {
        
        public Public_DeployToCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_DeployToCheckBox
        {
            get
            {
                if ((this.mPublic_DeployToCheckBox == null))
                {
                    this.mPublic_DeployToCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_DeployToCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_DeployToPermissionCheckBox_AutoID";
                    this.mPublic_DeployToCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_DeployToCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_DeployToCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_DeployFromCell : WpfCell
    {
        
        public Public_DeployFromCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_DeployFromCheckBox
        {
            get
            {
                if ((this.mPublic_DeployFromCheckBox == null))
                {
                    this.mPublic_DeployFromCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_DeployFromCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_DeployFromPermissionCheckBox_AutoID";
                    this.mPublic_DeployFromCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_DeployFromCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_DeployFromCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_AdministratorCell : WpfCell
    {
        
        public Public_AdministratorCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_AdministratorCheckBox
        {
            get
            {
                if ((this.mPublic_AdministratorCheckBox == null))
                {
                    this.mPublic_AdministratorCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_AdministratorCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_AdministratorPermissionCheckBox_AutoID";
                    this.mPublic_AdministratorCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_AdministratorCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_AdministratorCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_ViewCell : WpfCell
    {
        
        public Public_ViewCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_ViewCheckBox
        {
            get
            {
                if ((this.mPublic_ViewCheckBox == null))
                {
                    this.mPublic_ViewCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_ViewCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_ViewPermissionCheckBox_AutoID";
                    this.mPublic_ViewCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_ViewCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_ViewCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_ExecuteCell : WpfCell
    {
        
        public Public_ExecuteCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_ExecuteCheckBox
        {
            get
            {
                if ((this.mPublic_ExecuteCheckBox == null))
                {
                    this.mPublic_ExecuteCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_ExecuteCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_ExecutePermissionCheckBox_AutoID";
                    this.mPublic_ExecuteCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_ExecuteCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_ExecuteCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_ContributeCell : WpfCell
    {
        
        public Public_ContributeCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "7";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_ContributeCheckBox
        {
            get
            {
                if ((this.mPublic_ContributeCheckBox == null))
                {
                    this.mPublic_ContributeCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_ContributeCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_ContributePermissionCheckBox_AutoID";
                    this.mPublic_ContributeCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_ContributeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_ContributeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WindowsGroup : WpfCell
    {
        
        public WindowsGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "Public";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton Select_GroupButton
        {
            get
            {
                if ((this.mSelect_GroupButton == null))
                {
                    this.mSelect_GroupButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSelect_GroupButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Public_AddWindowsGroupButton_AutoID";
                    this.mSelect_GroupButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelect_GroupButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mSelect_GroupButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourcePermissions : WpfTable
    {
        
        public ResourcePermissions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ResourcePermissionsDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row1 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row1(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row1 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row1 : WpfPane
    {
        
        public Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResourceCell ResourceCell
        {
            get
            {
                if ((this.mResourceCell == null))
                {
                    this.mResourceCell = new ResourceCell(this);
                }
                return this.mResourceCell;
            }
        }
        
        public WindowsGroupCell WindowsGroupCell
        {
            get
            {
                if ((this.mWindowsGroupCell == null))
                {
                    this.mWindowsGroupCell = new WindowsGroupCell(this);
                }
                return this.mWindowsGroupCell;
            }
        }
        
        public ViewCell1 ViewCell
        {
            get
            {
                if ((this.mViewCell == null))
                {
                    this.mViewCell = new ViewCell1(this);
                }
                return this.mViewCell;
            }
        }
        
        public ExecuteCell1 ExecuteCell
        {
            get
            {
                if ((this.mExecuteCell == null))
                {
                    this.mExecuteCell = new ExecuteCell1(this);
                }
                return this.mExecuteCell;
            }
        }
        
        public ContributeCell1 ContributeCell
        {
            get
            {
                if ((this.mContributeCell == null))
                {
                    this.mContributeCell = new ContributeCell1(this);
                }
                return this.mContributeCell;
            }
        }
        
        public DeleteCell1 DeleteCell
        {
            get
            {
                if ((this.mDeleteCell == null))
                {
                    this.mDeleteCell = new DeleteCell1(this);
                }
                return this.mDeleteCell;
            }
        }
        #endregion
        
        #region Fields
        private ResourceCell mResourceCell;
        
        private WindowsGroupCell mWindowsGroupCell;
        
        private ViewCell1 mViewCell;
        
        private ExecuteCell1 mExecuteCell;
        
        private ContributeCell1 mContributeCell;
        
        private DeleteCell1 mDeleteCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceCell : WpfCell
    {
        
        public ResourceCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText AddResourceText
        {
            get
            {
                if ((this.mAddResourceText == null))
                {
                    this.mAddResourceText = new WpfText(this);
                    #region Search Criteria
                    this.mAddResourceText.SearchProperties[WpfText.PropertyNames.Instance] = "1";
                    this.mAddResourceText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddResourceText;
            }
        }
        
        public WpfButton ItemButton
        {
            get
            {
                if ((this.mItemButton == null))
                {
                    this.mItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mItemButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__AddResourceButton_AutoID";
                    this.mItemButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mAddResourceText;
        
        private WpfButton mItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WindowsGroupCell : WpfCell
    {
        
        public WindowsGroupCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton AddWindowsGroupsButton
        {
            get
            {
                if ((this.mAddWindowsGroupsButton == null))
                {
                    this.mAddWindowsGroupsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mAddWindowsGroupsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__AddWindowsGroupsButton_AutoID";
                    this.mAddWindowsGroupsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddWindowsGroupsButton;
            }
        }
        
        public WpfEdit AddWindowsGroupsEdit
        {
            get
            {
                if ((this.mAddWindowsGroupsEdit == null))
                {
                    this.mAddWindowsGroupsEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mAddWindowsGroupsEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__AddWindowsGroupsTextBox_AutoID";
                    this.mAddWindowsGroupsEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddWindowsGroupsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mAddWindowsGroupsButton;
        
        private WpfEdit mAddWindowsGroupsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ViewCell1 : WpfCell
    {
        
        public ViewCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ViewCheckBox
        {
            get
            {
                if ((this.mViewCheckBox == null))
                {
                    this.mViewCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mViewCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Instance] = "1";
                    this.mViewCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mViewCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExecuteCell1 : WpfCell
    {
        
        public ExecuteCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ExecuteCheckBox
        {
            get
            {
                if ((this.mExecuteCheckBox == null))
                {
                    this.mExecuteCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mExecuteCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Instance] = "1";
                    this.mExecuteCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExecuteCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mExecuteCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ContributeCell1 : WpfCell
    {
        
        public ContributeCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ContributeCheckBox
        {
            get
            {
                if ((this.mContributeCheckBox == null))
                {
                    this.mContributeCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mContributeCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Instance] = "1";
                    this.mContributeCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mContributeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mContributeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteCell1 : WpfCell
    {
        
        public DeleteCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.Instance] = "1";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LoggingTab : WpfTabPage
    {
        
        public LoggingTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "System.Windows.Controls.TabItem Header: Content:";
            this.SearchProperties[WpfTabPage.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LogSettingsViewConte LogSettingsViewConte
        {
            get
            {
                if ((this.mLogSettingsViewConte == null))
                {
                    this.mLogSettingsViewConte = new LogSettingsViewConte(this);
                }
                return this.mLogSettingsViewConte;
            }
        }
        #endregion
        
        #region Fields
        private LogSettingsViewConte mLogSettingsViewConte;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LogSettingsViewConte : WpfCustom
    {
        
        public LogSettingsViewConte(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.LoggingView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LogSettingsViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public StudioLogs StudioLogs
        {
            get
            {
                if ((this.mStudioLogs == null))
                {
                    this.mStudioLogs = new StudioLogs(this);
                }
                return this.mStudioLogs;
            }
        }
        
        public ServerLogs ServerLogs
        {
            get
            {
                if ((this.mServerLogs == null))
                {
                    this.mServerLogs = new ServerLogs(this);
                }
                return this.mServerLogs;
            }
        }
        #endregion
        
        #region Fields
        private StudioLogs mStudioLogs;
        
        private ServerLogs mServerLogs;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StudioLogs : WpfPane
    {
        
        public StudioLogs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public StudioLogFile StudioLogFile
        {
            get
            {
                if ((this.mStudioLogFile == null))
                {
                    this.mStudioLogFile = new StudioLogFile(this);
                }
                return this.mStudioLogFile;
            }
        }
        #endregion
        
        #region Fields
        private StudioLogFile mStudioLogFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StudioLogFile : WpfText
    {
        
        public StudioLogFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "   ";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink ItemHyperlink
        {
            get
            {
                if ((this.mItemHyperlink == null))
                {
                    this.mItemHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mItemHyperlink.SearchProperties[WpfHyperlink.PropertyNames.Instance] = "1";
                    this.mItemHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mItemHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerLogs : WpfPane
    {
        
        public ServerLogs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ServerLogFile ServerLogFile
        {
            get
            {
                if ((this.mServerLogFile == null))
                {
                    this.mServerLogFile = new ServerLogFile(this);
                }
                return this.mServerLogFile;
            }
        }
        #endregion
        
        #region Fields
        private ServerLogFile mServerLogFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerLogFile : WpfText
    {
        
        public ServerLogFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "   ";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink ItemHyperlink
        {
            get
            {
                if ((this.mItemHyperlink == null))
                {
                    this.mItemHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mItemHyperlink.SearchProperties[WpfHyperlink.PropertyNames.Instance] = "1";
                    this.mItemHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mItemHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PerfomanceCounterTab : WpfTabPage
    {
        
        public PerfomanceCounterTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "System.Windows.Controls.TabItem Header: Content:";
            this.SearchProperties[WpfTabPage.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public PerfmonViewContent PerfmonViewContent
        {
            get
            {
                if ((this.mPerfmonViewContent == null))
                {
                    this.mPerfmonViewContent = new PerfmonViewContent(this);
                }
                return this.mPerfmonViewContent;
            }
        }
        #endregion
        
        #region Fields
        private PerfmonViewContent mPerfmonViewContent;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PerfmonViewContent : WpfCustom
    {
        
        public PerfmonViewContent(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.PerfCounterView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PerfmonViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResourceTable ResourceTable
        {
            get
            {
                if ((this.mResourceTable == null))
                {
                    this.mResourceTable = new ResourceTable(this);
                }
                return this.mResourceTable;
            }
        }
        
        public ServerTable ServerTable
        {
            get
            {
                if ((this.mServerTable == null))
                {
                    this.mServerTable = new ServerTable(this);
                }
                return this.mServerTable;
            }
        }
        
        public ResetCounter ResetCounter
        {
            get
            {
                if ((this.mResetCounter == null))
                {
                    this.mResetCounter = new ResetCounter(this);
                }
                return this.mResetCounter;
            }
        }
        #endregion
        
        #region Fields
        private ResourceTable mResourceTable;
        
        private ServerTable mServerTable;
        
        private ResetCounter mResetCounter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceTable : WpfTable
    {
        
        public ResourceTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ResourcePermissionsDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row11 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row11(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row11 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row11 : WpfPane
    {
        
        public Row11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "0";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TotalErrors TotalErrors
        {
            get
            {
                if ((this.mTotalErrors == null))
                {
                    this.mTotalErrors = new TotalErrors(this);
                }
                return this.mTotalErrors;
            }
        }
        
        public ResourceCell1 ResourceCell
        {
            get
            {
                if ((this.mResourceCell == null))
                {
                    this.mResourceCell = new ResourceCell1(this);
                }
                return this.mResourceCell;
            }
        }
        
        public RequestPerSecond RequestPerSecond
        {
            get
            {
                if ((this.mRequestPerSecond == null))
                {
                    this.mRequestPerSecond = new RequestPerSecond(this);
                }
                return this.mRequestPerSecond;
            }
        }
        
        public DeleteCell2 DeleteCell
        {
            get
            {
                if ((this.mDeleteCell == null))
                {
                    this.mDeleteCell = new DeleteCell2(this);
                }
                return this.mDeleteCell;
            }
        }
        
        public ConcurrentRequest ConcurrentRequest
        {
            get
            {
                if ((this.mConcurrentRequest == null))
                {
                    this.mConcurrentRequest = new ConcurrentRequest(this);
                }
                return this.mConcurrentRequest;
            }
        }
        
        public AverageExecTime AverageExecTime
        {
            get
            {
                if ((this.mAverageExecTime == null))
                {
                    this.mAverageExecTime = new AverageExecTime(this);
                }
                return this.mAverageExecTime;
            }
        }
        #endregion
        
        #region Fields
        private TotalErrors mTotalErrors;
        
        private ResourceCell1 mResourceCell;
        
        private RequestPerSecond mRequestPerSecond;
        
        private DeleteCell2 mDeleteCell;
        
        private ConcurrentRequest mConcurrentRequest;
        
        private AverageExecTime mAverageExecTime;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TotalErrors : WpfCell
    {
        
        public TotalErrors(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TotalErrorsCheckbox
        {
            get
            {
                if ((this.mTotalErrorsCheckbox == null))
                {
                    this.mTotalErrorsCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTotalErrorsCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTotalErrorsCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTotalErrorsCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceCell1 : WpfCell
    {
        
        public ResourceCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText ResourceTextBox
        {
            get
            {
                if ((this.mResourceTextBox == null))
                {
                    this.mResourceTextBox = new WpfText(this);
                    #region Search Criteria
                    this.mResourceTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResourceTextBox;
            }
        }
        
        public WpfButton ResourceButton
        {
            get
            {
                if ((this.mResourceButton == null))
                {
                    this.mResourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mResourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResourceButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mResourceTextBox;
        
        private WpfButton mResourceButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RequestPerSecond : WpfCell
    {
        
        public RequestPerSecond(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox RequestPerSecondCheckbox
        {
            get
            {
                if ((this.mRequestPerSecondCheckbox == null))
                {
                    this.mRequestPerSecondCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRequestPerSecondCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRequestPerSecondCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mRequestPerSecondCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteCell2 : WpfCell
    {
        
        public DeleteCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConcurrentRequest : WpfCell
    {
        
        public ConcurrentRequest(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ConcurrentRequestCheckbox
        {
            get
            {
                if ((this.mConcurrentRequestCheckbox == null))
                {
                    this.mConcurrentRequestCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mConcurrentRequestCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConcurrentRequestCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mConcurrentRequestCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AverageExecTime : WpfCell
    {
        
        public AverageExecTime(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox AverageExecTimeCheckbox
        {
            get
            {
                if ((this.mAverageExecTimeCheckbox == null))
                {
                    this.mAverageExecTimeCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mAverageExecTimeCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAverageExecTimeCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mAverageExecTimeCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerTable : WpfTable
    {
        
        public ServerTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ServerPermissionsDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AverageExecCounter AverageExecCounter
        {
            get
            {
                if ((this.mAverageExecCounter == null))
                {
                    this.mAverageExecCounter = new AverageExecCounter(this);
                }
                return this.mAverageExecCounter;
            }
        }
        
        public ConcurrRequest ConcurrRequest
        {
            get
            {
                if ((this.mConcurrRequest == null))
                {
                    this.mConcurrRequest = new ConcurrRequest(this);
                }
                return this.mConcurrRequest;
            }
        }
        
        public RequestPerSeccond RequestPerSeccond
        {
            get
            {
                if ((this.mRequestPerSeccond == null))
                {
                    this.mRequestPerSeccond = new RequestPerSeccond(this);
                }
                return this.mRequestPerSeccond;
            }
        }
        
        public TotalErrors1 TotalErrors
        {
            get
            {
                if ((this.mTotalErrors == null))
                {
                    this.mTotalErrors = new TotalErrors1(this);
                }
                return this.mTotalErrors;
            }
        }
        
        public WorkflowsNotFound WorkflowsNotFound
        {
            get
            {
                if ((this.mWorkflowsNotFound == null))
                {
                    this.mWorkflowsNotFound = new WorkflowsNotFound(this);
                }
                return this.mWorkflowsNotFound;
            }
        }
        
        public NotAuthorisedErrors NotAuthorisedErrors
        {
            get
            {
                if ((this.mNotAuthorisedErrors == null))
                {
                    this.mNotAuthorisedErrors = new NotAuthorisedErrors(this);
                }
                return this.mNotAuthorisedErrors;
            }
        }
        #endregion
        
        #region Fields
        private AverageExecCounter mAverageExecCounter;
        
        private ConcurrRequest mConcurrRequest;
        
        private RequestPerSeccond mRequestPerSeccond;
        
        private TotalErrors1 mTotalErrors;
        
        private WorkflowsNotFound mWorkflowsNotFound;
        
        private NotAuthorisedErrors mNotAuthorisedErrors;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AverageExecCounter : WpfCell
    {
        
        public AverageExecCounter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox AverageExecCounterCheckBox
        {
            get
            {
                if ((this.mAverageExecCounterCheckBox == null))
                {
                    this.mAverageExecCounterCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mAverageExecCounterCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_New_DeployToPermissionCheckBox_AutoID";
                    this.mAverageExecCounterCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAverageExecCounterCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mAverageExecCounterCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConcurrRequest : WpfCell
    {
        
        public ConcurrRequest(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ConcurrRequestCheckBox
        {
            get
            {
                if ((this.mConcurrRequestCheckBox == null))
                {
                    this.mConcurrRequestCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mConcurrRequestCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConcurrRequestCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mConcurrRequestCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RequestPerSeccond : WpfCell
    {
        
        public RequestPerSeccond(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox RequestPerSeccondCheckBox
        {
            get
            {
                if ((this.mRequestPerSeccondCheckBox == null))
                {
                    this.mRequestPerSeccondCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRequestPerSeccondCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRequestPerSeccondCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mRequestPerSeccondCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TotalErrors1 : WpfCell
    {
        
        public TotalErrors1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TotalErrorsCheckBox
        {
            get
            {
                if ((this.mTotalErrorsCheckBox == null))
                {
                    this.mTotalErrorsCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTotalErrorsCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTotalErrorsCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTotalErrorsCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowsNotFound : WpfCell
    {
        
        public WorkflowsNotFound(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox WorkflowsNotFoundCheckBox
        {
            get
            {
                if ((this.mWorkflowsNotFoundCheckBox == null))
                {
                    this.mWorkflowsNotFoundCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mWorkflowsNotFoundCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWorkflowsNotFoundCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mWorkflowsNotFoundCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NotAuthorisedErrors : WpfCell
    {
        
        public NotAuthorisedErrors(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox NotAuthorisedErrorsCheckBox
        {
            get
            {
                if ((this.mNotAuthorisedErrorsCheckBox == null))
                {
                    this.mNotAuthorisedErrorsCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mNotAuthorisedErrorsCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNotAuthorisedErrorsCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mNotAuthorisedErrorsCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResetCounter : WpfText
    {
        
        public ResetCounter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "   ";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink ItemHyperlink
        {
            get
            {
                if ((this.mItemHyperlink == null))
                {
                    this.mItemHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mItemHyperlink.SearchProperties[WpfHyperlink.PropertyNames.Instance] = "1";
                    this.mItemHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mItemHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FilesMenu : WpfMenu
    {
        
        public FilesMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.AutomationId] = "filesMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem PositionButton
        {
            get
            {
                if ((this.mPositionButton == null))
                {
                    this.mPositionButton = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mPositionButton.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "PART_FilesMenuItem";
                    this.mPositionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPositionButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mPositionButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Help1 : WpfCustom
    {
        
        public Help1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Help";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DocumentorUnpinBtn
        {
            get
            {
                if ((this.mDocumentorUnpinBtn == null))
                {
                    this.mDocumentorUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mDocumentorUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mDocumentorUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDocumentorUnpinBtn;
            }
        }
        
        public WpfControl HelpWindow
        {
            get
            {
                if ((this.mHelpWindow == null))
                {
                    this.mHelpWindow = new WpfControl(this);
                    #region Search Criteria
                    this.mHelpWindow.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mHelpWindow.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mHelpWindow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHelpWindow;
            }
        }
        
        public WpfCustom HelpTextEditor
        {
            get
            {
                if ((this.mHelpTextEditor == null))
                {
                    this.mHelpTextEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mHelpTextEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamRichTextEditor";
                    this.mHelpTextEditor.SearchProperties[WpfControl.PropertyNames.AutomationId] = "XamRichTextEditor";
                    this.mHelpTextEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHelpTextEditor;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDocumentorUnpinBtn;
        
        private WpfControl mHelpWindow;
        
        private WpfCustom mHelpTextEditor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DebugInputDialog : WpfWindow
    {
        
        public DebugInputDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Debug input data";
            this.SearchProperties[WpfWindow.PropertyNames.ClassName] = "Uia.Window";
            this.SearchProperties[WpfWindow.PropertyNames.AutomationId] = "UI_DebugInputWindow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabItemsTabList TabItemsTabList
        {
            get
            {
                if ((this.mTabItemsTabList == null))
                {
                    this.mTabItemsTabList = new TabItemsTabList(this);
                }
                return this.mTabItemsTabList;
            }
        }
        
        public WpfCheckBox RememberDebugInputCheckBox
        {
            get
            {
                if ((this.mRememberDebugInputCheckBox == null))
                {
                    this.mRememberDebugInputCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRememberDebugInputCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_RememberInputsCb_AutoID";
                    this.mRememberDebugInputCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRememberDebugInputCheckBox;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Cancelbtn_AutoID";
                    this.mCancelButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton DebugF6Button
        {
            get
            {
                if ((this.mDebugF6Button == null))
                {
                    this.mDebugF6Button = new WpfButton(this);
                    #region Search Criteria
                    this.mDebugF6Button.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Executebtn_AutoID";
                    this.mDebugF6Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDebugF6Button;
            }
        }
        
        public WpfButton ViewInBrowserF7Button
        {
            get
            {
                if ((this.mViewInBrowserF7Button == null))
                {
                    this.mViewInBrowserF7Button = new WpfButton(this);
                    #region Search Criteria
                    this.mViewInBrowserF7Button.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Browserbtn_AutoID";
                    this.mViewInBrowserF7Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewInBrowserF7Button;
            }
        }
        #endregion
        
        #region Fields
        private TabItemsTabList mTabItemsTabList;
        
        private WpfCheckBox mRememberDebugInputCheckBox;
        
        private WpfButton mCancelButton;
        
        private WpfButton mDebugF6Button;
        
        private WpfButton mViewInBrowserF7Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabItemsTabList : WpfTabList
    {
        
        public TabItemsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "TabItems";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputDataTab InputDataTab
        {
            get
            {
                if ((this.mInputDataTab == null))
                {
                    this.mInputDataTab = new InputDataTab(this);
                }
                return this.mInputDataTab;
            }
        }
        
        public XMLTab XMLTab
        {
            get
            {
                if ((this.mXMLTab == null))
                {
                    this.mXMLTab = new XMLTab(this);
                }
                return this.mXMLTab;
            }
        }
        
        public JSONTab JSONTab
        {
            get
            {
                if ((this.mJSONTab == null))
                {
                    this.mJSONTab = new JSONTab(this);
                }
                return this.mJSONTab;
            }
        }
        #endregion
        
        #region Fields
        private InputDataTab mInputDataTab;
        
        private XMLTab mXMLTab;
        
        private JSONTab mJSONTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputDataTab : WpfTabPage
    {
        
        public InputDataTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "UI_InputDataTab_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputsTable InputsTable
        {
            get
            {
                if ((this.mInputsTable == null))
                {
                    this.mInputsTable = new InputsTable(this);
                }
                return this.mInputsTable;
            }
        }
        #endregion
        
        #region Fields
        private InputsTable mInputsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputsTable : WpfTable
    {
        
        public InputsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "DataListInputs";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row12 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row12(this);
                }
                return this.mRow1;
            }
        }
        
        public Row2 Row2
        {
            get
            {
                if ((this.mRow2 == null))
                {
                    this.mRow2 = new Row2(this);
                }
                return this.mRow2;
            }
        }
        #endregion
        
        #region Fields
        private Row12 mRow1;
        
        private Row2 mRow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row12 : WpfPane
    {
        
        public Row12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "0";
            this.SearchProperties[WpfPane.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputValueCell InputValueCell
        {
            get
            {
                if ((this.mInputValueCell == null))
                {
                    this.mInputValueCell = new InputValueCell(this);
                }
                return this.mInputValueCell;
            }
        }
        #endregion
        
        #region Fields
        private InputValueCell mInputValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputValueCell : WpfCell
    {
        
        public InputValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputValueComboboxl InputValueComboboxl
        {
            get
            {
                if ((this.mInputValueComboboxl == null))
                {
                    this.mInputValueComboboxl = new InputValueComboboxl(this);
                }
                return this.mInputValueComboboxl;
            }
        }
        #endregion
        
        #region Fields
        private InputValueComboboxl mInputValueComboboxl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputValueComboboxl : WpfComboBox
    {
        
        public InputValueComboboxl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit InputValueText
        {
            get
            {
                if ((this.mInputValueText == null))
                {
                    this.mInputValueText = new WpfEdit(this);
                    #region Search Criteria
                    this.mInputValueText.SearchProperties[WpfEdit.PropertyNames.Instance] = "1";
                    this.mInputValueText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputValueText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mInputValueText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row2 : WpfPane
    {
        
        public Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "0";
            this.SearchProperties[WpfPane.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputValueCell1 InputValueCell
        {
            get
            {
                if ((this.mInputValueCell == null))
                {
                    this.mInputValueCell = new InputValueCell1(this);
                }
                return this.mInputValueCell;
            }
        }
        #endregion
        
        #region Fields
        private InputValueCell1 mInputValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputValueCell1 : WpfCell
    {
        
        public InputValueCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputValueComboboxl1 InputValueComboboxl
        {
            get
            {
                if ((this.mInputValueComboboxl == null))
                {
                    this.mInputValueComboboxl = new InputValueComboboxl1(this);
                }
                return this.mInputValueComboboxl;
            }
        }
        #endregion
        
        #region Fields
        private InputValueComboboxl1 mInputValueComboboxl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputValueComboboxl1 : WpfComboBox
    {
        
        public InputValueComboboxl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit InputValueText
        {
            get
            {
                if ((this.mInputValueText == null))
                {
                    this.mInputValueText = new WpfEdit(this);
                    #region Search Criteria
                    this.mInputValueText.SearchProperties[WpfEdit.PropertyNames.Instance] = "1";
                    this.mInputValueText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputValueText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mInputValueText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XMLTab : WpfTabPage
    {
        
        public XMLTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "UI_XMLTab_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom XMLWindow
        {
            get
            {
                if ((this.mXMLWindow == null))
                {
                    this.mXMLWindow = new WpfCustom(this);
                    #region Search Criteria
                    this.mXMLWindow.SearchProperties[WpfControl.PropertyNames.ClassName] = null;
                    this.mXMLWindow.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_XMLEditor_AutoID";
                    this.mXMLWindow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mXMLWindow;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mXMLWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class JSONTab : WpfTabPage
    {
        
        public JSONTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "UI_XMLTab_AutoID";
            this.SearchProperties[WpfTabPage.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom JSONWindow
        {
            get
            {
                if ((this.mJSONWindow == null))
                {
                    this.mJSONWindow = new WpfCustom(this);
                    #region Search Criteria
                    this.mJSONWindow.SearchProperties[WpfControl.PropertyNames.ClassName] = null;
                    this.mJSONWindow.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_JsonEditor_AutoID";
                    this.mJSONWindow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mJSONWindow;
            }
        }
        
        public CommentTreeItem CommentTreeItem
        {
            get
            {
                if ((this.mCommentTreeItem == null))
                {
                    this.mCommentTreeItem = new CommentTreeItem(this);
                }
                return this.mCommentTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mJSONWindow;
        
        private CommentTreeItem mCommentTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CommentTreeItem : WpfTreeItem
    {
        
        public CommentTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Step";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton CommentButton
        {
            get
            {
                if ((this.mCommentButton == null))
                {
                    this.mCommentButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCommentButton.SearchProperties[WpfButton.PropertyNames.Name] = "Comment";
                    this.mCommentButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCommentButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCommentButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCommentButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAsNewRemoteServer : WpfCustom
    {
        
        public ComboboxListItemAsNewRemoteServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "New Remote Server...";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText NewRemoteServerItemText
        {
            get
            {
                if ((this.mNewRemoteServerItemText == null))
                {
                    this.mNewRemoteServerItemText = new WpfText(this);
                    #region Search Criteria
                    this.mNewRemoteServerItemText.SearchProperties[WpfText.PropertyNames.Name] = "New Remote Server...";
                    this.mNewRemoteServerItemText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewRemoteServerItemText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mNewRemoteServerItemText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAsLocalhost : WpfText
    {
        
        public ComboboxListItemAsLocalhost(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "localhost";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "localhost";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAsLocalhostConnected : WpfCustom
    {
        
        public ComboboxListItemAsLocalhostConnected(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "localhost (Connected)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "localhost (Connected)";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAsRemoteConnectionIntegrationConnected : WpfCustom
    {
        
        public ComboboxListItemAsRemoteConnectionIntegrationConnected(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Remote Connection Integration (Connected)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "Remote Connection Integration (Connected)";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAsMicrosoftSQLServer : WpfCustom
    {
        
        public ComboboxListItemAsMicrosoftSQLServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Microsoft SQL Server";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText MicrosoftSQLServerText
        {
            get
            {
                if ((this.mMicrosoftSQLServerText == null))
                {
                    this.mMicrosoftSQLServerText = new WpfText(this);
                    #region Search Criteria
                    this.mMicrosoftSQLServerText.SearchProperties[WpfText.PropertyNames.Name] = "Microsoft SQL Server";
                    this.mMicrosoftSQLServerText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMicrosoftSQLServerText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mMicrosoftSQLServerText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemPostgreSqlDatabase : WpfCustom
    {
        
        public ComboboxListItemPostgreSqlDatabase(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "PostgreSQL Database";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText PostgreSQLDatabase
        {
            get
            {
                if ((this.mPostgreSQLDatabase == null))
                {
                    this.mPostgreSQLDatabase = new WpfText(this);
                    #region Search Criteria
                    this.mPostgreSQLDatabase.SearchProperties[WpfText.PropertyNames.Name] = "PostgreSQL Database";
                    this.mPostgreSQLDatabase.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPostgreSQLDatabase;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mPostgreSQLDatabase;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemODBCDatabase : WpfCustom
    {
        
        public ComboboxListItemODBCDatabase(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "ODBC Database";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText ODBCDatabaseText
        {
            get
            {
                if ((this.mODBCDatabaseText == null))
                {
                    this.mODBCDatabaseText = new WpfText(this);
                    #region Search Criteria
                    this.mODBCDatabaseText.SearchProperties[WpfText.PropertyNames.Name] = "ODBC Database";
                    this.mODBCDatabaseText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mODBCDatabaseText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mODBCDatabaseText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemMySqlDatabase : WpfCustom
    {
        
        public ComboboxListItemMySqlDatabase(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "MySql Database";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText MySqlDatabaseText
        {
            get
            {
                if ((this.mMySqlDatabaseText == null))
                {
                    this.mMySqlDatabaseText = new WpfText(this);
                    #region Search Criteria
                    this.mMySqlDatabaseText.SearchProperties[WpfText.PropertyNames.Name] = "MySql Database";
                    this.mMySqlDatabaseText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMySqlDatabaseText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mMySqlDatabaseText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UnpinnedTab : WpfCustom
    {
        
        public UnpinnedTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ToolWindow";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitPane SplitPane
        {
            get
            {
                if ((this.mSplitPane == null))
                {
                    this.mSplitPane = new SplitPane(this);
                }
                return this.mSplitPane;
            }
        }
        #endregion
        
        #region Fields
        private SplitPane mSplitPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPane : WpfCustom
    {
        
        public SplitPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext1 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext1(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext1 mWorkSurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext1 : WpfCustom
    {
        
        public WorkSurfaceContext1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowDesignerView WorkflowDesignerView
        {
            get
            {
                if ((this.mWorkflowDesignerView == null))
                {
                    this.mWorkflowDesignerView = new WorkflowDesignerView(this);
                }
                return this.mWorkflowDesignerView;
            }
        }
        
        public TopScrollViewerPane TopScrollViewerPane
        {
            get
            {
                if ((this.mTopScrollViewerPane == null))
                {
                    this.mTopScrollViewerPane = new TopScrollViewerPane(this);
                }
                return this.mTopScrollViewerPane;
            }
        }
        
        public SplitPaneRight SplitPaneRight
        {
            get
            {
                if ((this.mSplitPaneRight == null))
                {
                    this.mSplitPaneRight = new SplitPaneRight(this);
                }
                return this.mSplitPaneRight;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowDesignerView mWorkflowDesignerView;
        
        private TopScrollViewerPane mTopScrollViewerPane;
        
        private SplitPaneRight mSplitPaneRight;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowDesignerView : WpfCustom
    {
        
        public WorkflowDesignerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DesignerView DesignerView
        {
            get
            {
                if ((this.mDesignerView == null))
                {
                    this.mDesignerView = new DesignerView(this);
                }
                return this.mDesignerView;
            }
        }
        #endregion
        
        #region Fields
        private DesignerView mDesignerView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DesignerView : WpfCustom
    {
        
        public DesignerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfToggleButton ExpandAllToggleButton
        {
            get
            {
                if ((this.mExpandAllToggleButton == null))
                {
                    this.mExpandAllToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mExpandAllToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "expandAllButton";
                    this.mExpandAllToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpandAllToggleButton;
            }
        }
        
        public WpfToggleButton CollapseAllToggleButton
        {
            get
            {
                if ((this.mCollapseAllToggleButton == null))
                {
                    this.mCollapseAllToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mCollapseAllToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "collapseAllButton";
                    this.mCollapseAllToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCollapseAllToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane mScrollViewerPane;
        
        private WpfToggleButton mExpandAllToggleButton;
        
        private WpfToggleButton mCollapseAllToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane : WpfPane
    {
        
        public ScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "scrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ActivityTypeDesigner ActivityTypeDesigner
        {
            get
            {
                if ((this.mActivityTypeDesigner == null))
                {
                    this.mActivityTypeDesigner = new ActivityTypeDesigner(this);
                }
                return this.mActivityTypeDesigner;
            }
        }
        #endregion
        
        #region Fields
        private ActivityTypeDesigner mActivityTypeDesigner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ActivityTypeDesigner : WpfCustom
    {
        
        public ActivityTypeDesigner(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ActivityTypeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActivityTypeDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowItemPresenter WorkflowItemPresenter
        {
            get
            {
                if ((this.mWorkflowItemPresenter == null))
                {
                    this.mWorkflowItemPresenter = new WorkflowItemPresenter(this);
                }
                return this.mWorkflowItemPresenter;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowItemPresenter mWorkflowItemPresenter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowItemPresenter : WpfCustom
    {
        
        public WorkflowItemPresenter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Flowchart Flowchart
        {
            get
            {
                if ((this.mFlowchart == null))
                {
                    this.mFlowchart = new Flowchart(this);
                }
                return this.mFlowchart;
            }
        }
        #endregion
        
        #region Fields
        private Flowchart mFlowchart;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Flowchart : WpfCustom
    {
        
        public Flowchart(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public MultiAssign1 MultiAssign
        {
            get
            {
                if ((this.mMultiAssign == null))
                {
                    this.mMultiAssign = new MultiAssign1(this);
                }
                return this.mMultiAssign;
            }
        }
        
        public WpfCustom StartNode
        {
            get
            {
                if ((this.mStartNode == null))
                {
                    this.mStartNode = new WpfCustom(this);
                    #region Search Criteria
                    this.mStartNode.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.StartSymbol";
                    this.mStartNode.SearchProperties[WpfControl.PropertyNames.AutomationId] = "StartSymbol";
                    this.mStartNode.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStartNode;
            }
        }
        
        public WpfCustom Connector1
        {
            get
            {
                if ((this.mConnector1 == null))
                {
                    this.mConnector1 = new WpfCustom(this);
                    #region Search Criteria
                    this.mConnector1.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectorWithoutStartDot";
                    this.mConnector1.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
                    this.mConnector1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnector1;
            }
        }
        
        public Error1 Error1
        {
            get
            {
                if ((this.mError1 == null))
                {
                    this.mError1 = new Error1(this);
                }
                return this.mError1;
            }
        }
        #endregion
        
        #region Fields
        private MultiAssign1 mMultiAssign;
        
        private WpfCustom mStartNode;
        
        private WpfCustom mConnector1;
        
        private Error1 mError1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MultiAssign1 : WpfCustom
    {
        
        public MultiAssign1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "MultiAssignDesigner", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallView SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView(this);
                }
                return this.mSmallView;
            }
        }
        
        public LargeView LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView(this);
                }
                return this.mLargeView;
            }
        }
        
        public DoneButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new DoneButton(this);
                }
                return this.mDoneButton;
            }
        }
        
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        
        public QuickVariableInputContent QuickVariableInputContent
        {
            get
            {
                if ((this.mQuickVariableInputContent == null))
                {
                    this.mQuickVariableInputContent = new QuickVariableInputContent(this);
                }
                return this.mQuickVariableInputContent;
            }
        }
        
        public WpfButton AddButton
        {
            get
            {
                if ((this.mAddButton == null))
                {
                    this.mAddButton = new WpfButton(this);
                    #region Search Criteria
                    this.mAddButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AddModeButton";
                    this.mAddButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddButton;
            }
        }
        #endregion
        
        #region Fields
        private SmallView mSmallView;
        
        private LargeView mLargeView;
        
        private DoneButton mDoneButton;
        
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        
        private QuickVariableInputContent mQuickVariableInputContent;
        
        private WpfButton mAddButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView : WpfCustom
    {
        
        public SmallView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid(this);
                }
                return this.mDataGrid;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid mDataGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid : WpfTable
    {
        
        public DataGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row13 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row13(this);
                }
                return this.mRow1;
            }
        }
        
        public Row21 Row2
        {
            get
            {
                if ((this.mRow2 == null))
                {
                    this.mRow2 = new Row21(this);
                }
                return this.mRow2;
            }
        }
        
        public Row3 Row3
        {
            get
            {
                if ((this.mRow3 == null))
                {
                    this.mRow3 = new Row3(this);
                }
                return this.mRow3;
            }
        }
        #endregion
        
        #region Fields
        private Row13 mRow1;
        
        private Row21 mRow2;
        
        private Row3 mRow3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row13 : WpfRow
    {
        
        public Row13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_0_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell(this);
                }
                return this.mValueCell;
            }
        }
        
        public RowNumberCell RowNumberCell
        {
            get
            {
                if ((this.mRowNumberCell == null))
                {
                    this.mRowNumberCell = new RowNumberCell(this);
                }
                return this.mRowNumberCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell mVariableCell;
        
        private ValueCell mValueCell;
        
        private RowNumberCell mRowNumberCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell : WpfCell
    {
        
        public VariableCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseCombobox IntellisenseCombobox
        {
            get
            {
                if ((this.mIntellisenseCombobox == null))
                {
                    this.mIntellisenseCombobox = new IntellisenseCombobox(this);
                }
                return this.mIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseCombobox mIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseCombobox : WpfComboBox
    {
        
        public IntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Textbox Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new Textbox(this);
                }
                return this.mTextbox;
            }
        }
        
        public WpfListItem ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "[[SomeVariable]]";
                    this.mListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private Textbox mTextbox;
        
        private WpfListItem mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Textbox : WpfEdit
    {
        
        public Textbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "[[Variable1]]";
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell : WpfCell
    {
        
        public ValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn3";
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseCombobox1 IntellisenseCombobox
        {
            get
            {
                if ((this.mIntellisenseCombobox == null))
                {
                    this.mIntellisenseCombobox = new IntellisenseCombobox1(this);
                }
                return this.mIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseCombobox1 mIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseCombobox1 : WpfComboBox
    {
        
        public IntellisenseCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RowNumberCell : WpfCell
    {
        
        public RowNumberCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "0";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn0";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "1";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row21 : WpfRow
    {
        
        public Row21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_1_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell1 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell1(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell1 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell1(this);
                }
                return this.mValueCell;
            }
        }
        
        public RowNumberCell1 RowNumberCell
        {
            get
            {
                if ((this.mRowNumberCell == null))
                {
                    this.mRowNumberCell = new RowNumberCell1(this);
                }
                return this.mRowNumberCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell1 mVariableCell;
        
        private ValueCell1 mValueCell;
        
        private RowNumberCell1 mRowNumberCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell1 : WpfCell
    {
        
        public VariableCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseCombobox2 IntellisenseCombobox
        {
            get
            {
                if ((this.mIntellisenseCombobox == null))
                {
                    this.mIntellisenseCombobox = new IntellisenseCombobox2(this);
                }
                return this.mIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseCombobox2 mIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseCombobox2 : WpfComboBox
    {
        
        public IntellisenseCombobox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Textbox1 Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new Textbox1(this);
                }
                return this.mTextbox;
            }
        }
        
        public WpfListItem ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "[[SomeVariable]]";
                    this.mListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private Textbox1 mTextbox;
        
        private WpfListItem mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Textbox1 : WpfEdit
    {
        
        public Textbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell1 : WpfCell
    {
        
        public ValueCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn3";
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseCombobox3 IntellisenseCombobox
        {
            get
            {
                if ((this.mIntellisenseCombobox == null))
                {
                    this.mIntellisenseCombobox = new IntellisenseCombobox3(this);
                }
                return this.mIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseCombobox3 mIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseCombobox3 : WpfComboBox
    {
        
        public IntellisenseCombobox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RowNumberCell1 : WpfCell
    {
        
        public RowNumberCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "0";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn0";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "2";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row3 : WpfRow
    {
        
        public Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_2_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell2 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell2(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell2 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell2(this);
                }
                return this.mValueCell;
            }
        }
        
        public RowNumberCell2 RowNumberCell
        {
            get
            {
                if ((this.mRowNumberCell == null))
                {
                    this.mRowNumberCell = new RowNumberCell2(this);
                }
                return this.mRowNumberCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell2 mVariableCell;
        
        private ValueCell2 mValueCell;
        
        private RowNumberCell2 mRowNumberCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell2 : WpfCell
    {
        
        public VariableCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseCombobox4 IntellisenseCombobox
        {
            get
            {
                if ((this.mIntellisenseCombobox == null))
                {
                    this.mIntellisenseCombobox = new IntellisenseCombobox4(this);
                }
                return this.mIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseCombobox4 mIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseCombobox4 : WpfComboBox
    {
        
        public IntellisenseCombobox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Textbox2 Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new Textbox2(this);
                }
                return this.mTextbox;
            }
        }
        
        public WpfListItem ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "[[SomeVariable]]";
                    this.mListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private Textbox2 mTextbox;
        
        private WpfListItem mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Textbox2 : WpfEdit
    {
        
        public Textbox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell2 : WpfCell
    {
        
        public ValueCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn3";
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseCombobox5 IntellisenseCombobox
        {
            get
            {
                if ((this.mIntellisenseCombobox == null))
                {
                    this.mIntellisenseCombobox = new IntellisenseCombobox5(this);
                }
                return this.mIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseCombobox5 mIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseCombobox5 : WpfComboBox
    {
        
        public IntellisenseCombobox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RowNumberCell2 : WpfCell
    {
        
        public RowNumberCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "0";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn0";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "3";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView : WpfCustom
    {
        
        public LargeView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid1 DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid1(this);
                }
                return this.mDataGrid;
            }
        }
        
        public OnErrorPane OnErrorPane
        {
            get
            {
                if ((this.mOnErrorPane == null))
                {
                    this.mOnErrorPane = new OnErrorPane(this);
                }
                return this.mOnErrorPane;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid1 mDataGrid;
        
        private OnErrorPane mOnErrorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid1 : WpfTable
    {
        
        public DataGrid1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row14 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row14(this);
                }
                return this.mRow1;
            }
        }
        
        public Row22 Row2
        {
            get
            {
                if ((this.mRow2 == null))
                {
                    this.mRow2 = new Row22(this);
                }
                return this.mRow2;
            }
        }
        
        public Row31 Row3
        {
            get
            {
                if ((this.mRow3 == null))
                {
                    this.mRow3 = new Row31(this);
                }
                return this.mRow3;
            }
        }
        
        public Row4 Row4
        {
            get
            {
                if ((this.mRow4 == null))
                {
                    this.mRow4 = new Row4(this);
                }
                return this.mRow4;
            }
        }
        #endregion
        
        #region Fields
        private Row14 mRow1;
        
        private Row22 mRow2;
        
        private Row31 mRow3;
        
        private Row4 mRow4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row14 : WpfRow
    {
        
        public Row14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfRow.PropertyNames.AutomationId, "UI_ActivityGridRow_0_AutoID", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell3 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell3(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell3 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell3(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell3 mVariableCell;
        
        private ValueCell3 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell3 : WpfCell
    {
        
        public VariableCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseCombobox6 IntellisenseCombobox
        {
            get
            {
                if ((this.mIntellisenseCombobox == null))
                {
                    this.mIntellisenseCombobox = new IntellisenseCombobox6(this);
                }
                return this.mIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseCombobox6 mIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseCombobox6 : WpfComboBox
    {
        
        public IntellisenseCombobox6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FieldName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell3 : WpfCell
    {
        
        public ValueCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseCombobox7 IntellisenseCombobox
        {
            get
            {
                if ((this.mIntellisenseCombobox == null))
                {
                    this.mIntellisenseCombobox = new IntellisenseCombobox7(this);
                }
                return this.mIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseCombobox7 mIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseCombobox7 : WpfComboBox
    {
        
        public IntellisenseCombobox7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row22 : WpfRow
    {
        
        public Row22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_1_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell4 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell4(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell4 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell4(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell4 mVariableCell;
        
        private ValueCell4 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell4 : WpfCell
    {
        
        public VariableCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseCombobox8 IntellisenseCombobox
        {
            get
            {
                if ((this.mIntellisenseCombobox == null))
                {
                    this.mIntellisenseCombobox = new IntellisenseCombobox8(this);
                }
                return this.mIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseCombobox8 mIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseCombobox8 : WpfComboBox
    {
        
        public IntellisenseCombobox8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_FieldName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell4 : WpfCell
    {
        
        public ValueCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseCombobox9 IntellisenseCombobox
        {
            get
            {
                if ((this.mIntellisenseCombobox == null))
                {
                    this.mIntellisenseCombobox = new IntellisenseCombobox9(this);
                }
                return this.mIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseCombobox9 mIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseCombobox9 : WpfComboBox
    {
        
        public IntellisenseCombobox9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row31 : WpfRow
    {
        
        public Row31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_2_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell5 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell5(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell5 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell5(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell5 mVariableCell;
        
        private ValueCell5 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell5 : WpfCell
    {
        
        public VariableCell5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseCombobox10 IntellisenseCombobox
        {
            get
            {
                if ((this.mIntellisenseCombobox == null))
                {
                    this.mIntellisenseCombobox = new IntellisenseCombobox10(this);
                }
                return this.mIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseCombobox10 mIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseCombobox10 : WpfComboBox
    {
        
        public IntellisenseCombobox10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row4_FieldName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell5 : WpfCell
    {
        
        public ValueCell5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseCombobox11 IntellisenseCombobox
        {
            get
            {
                if ((this.mIntellisenseCombobox == null))
                {
                    this.mIntellisenseCombobox = new IntellisenseCombobox11(this);
                }
                return this.mIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseCombobox11 mIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseCombobox11 : WpfComboBox
    {
        
        public IntellisenseCombobox11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row4_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row4 : WpfRow
    {
        
        public Row4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_3_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell6 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell6(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell6 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell6(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell6 mVariableCell;
        
        private ValueCell6 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell6 : WpfCell
    {
        
        public VariableCell6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseCombobox12 IntellisenseCombobox
        {
            get
            {
                if ((this.mIntellisenseCombobox == null))
                {
                    this.mIntellisenseCombobox = new IntellisenseCombobox12(this);
                }
                return this.mIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseCombobox12 mIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseCombobox12 : WpfComboBox
    {
        
        public IntellisenseCombobox12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row5_FieldName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell6 : WpfCell
    {
        
        public ValueCell6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseCombobox13 IntellisenseCombobox
        {
            get
            {
                if ((this.mIntellisenseCombobox == null))
                {
                    this.mIntellisenseCombobox = new IntellisenseCombobox13(this);
                }
                return this.mIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseCombobox13 mIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseCombobox13 : WpfComboBox
    {
        
        public IntellisenseCombobox13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row5_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorPane : WpfCustom
    {
        
        public OnErrorPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup : WpfGroup
    {
        
        public OnErrorGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorVariableIntellisenseCombobox OnErrorVariableIntellisenseCombobox
        {
            get
            {
                if ((this.mOnErrorVariableIntellisenseCombobox == null))
                {
                    this.mOnErrorVariableIntellisenseCombobox = new OnErrorVariableIntellisenseCombobox(this);
                }
                return this.mOnErrorVariableIntellisenseCombobox;
            }
        }
        
        public OnErrorServiceIntellisenseCombobox OnErrorServiceIntellisenseCombobox
        {
            get
            {
                if ((this.mOnErrorServiceIntellisenseCombobox == null))
                {
                    this.mOnErrorServiceIntellisenseCombobox = new OnErrorServiceIntellisenseCombobox(this);
                }
                return this.mOnErrorServiceIntellisenseCombobox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckbox
        {
            get
            {
                if ((this.mEndthisworkflowCheckbox == null))
                {
                    this.mEndthisworkflowCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorVariableIntellisenseCombobox mOnErrorVariableIntellisenseCombobox;
        
        private OnErrorServiceIntellisenseCombobox mOnErrorServiceIntellisenseCombobox;
        
        private WpfCheckBox mEndthisworkflowCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorVariableIntellisenseCombobox : WpfComboBox
    {
        
        public OnErrorVariableIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorServiceIntellisenseCombobox : WpfComboBox
    {
        
        public OnErrorServiceIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DoneButton : WpfButton
    {
        
        public DoneButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfControl ItemIndicator
        {
            get
            {
                if ((this.mItemIndicator == null))
                {
                    this.mItemIndicator = new WpfControl(this);
                    #region Search Criteria
                    this.mItemIndicator.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mItemIndicator.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemIndicator.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemIndicator;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mItemIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QuickVariableInputContent : WpfCustom
    {
        
        public QuickVariableInputContent(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.QuickVariableInputView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "QuickVariableInputContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit QviSplitOnCharacterEdit
        {
            get
            {
                if ((this.mQviSplitOnCharacterEdit == null))
                {
                    this.mQviSplitOnCharacterEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mQviSplitOnCharacterEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "QviSplitOnCharacter";
                    this.mQviSplitOnCharacterEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQviSplitOnCharacterEdit;
            }
        }
        
        public WpfComboBox QviSplitOnCombobox
        {
            get
            {
                if ((this.mQviSplitOnCombobox == null))
                {
                    this.mQviSplitOnCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mQviSplitOnCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "QviSplitOnCombobox";
                    this.mQviSplitOnCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQviSplitOnCombobox;
            }
        }
        
        public WpfEdit QviVariableListBoxEdit
        {
            get
            {
                if ((this.mQviVariableListBoxEdit == null))
                {
                    this.mQviVariableListBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mQviVariableListBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "QviVariableListBox";
                    this.mQviVariableListBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQviVariableListBoxEdit;
            }
        }
        
        public WpfRadioButton ReplaceRadioButton
        {
            get
            {
                if ((this.mReplaceRadioButton == null))
                {
                    this.mReplaceRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mReplaceRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "ReplaceOption";
                    this.mReplaceRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReplaceRadioButton;
            }
        }
        
        public WpfRadioButton AppendRadioButton
        {
            get
            {
                if ((this.mAppendRadioButton == null))
                {
                    this.mAppendRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mAppendRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "AppendOption";
                    this.mAppendRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAppendRadioButton;
            }
        }
        
        public WpfEdit PrefixEdit
        {
            get
            {
                if ((this.mPrefixEdit == null))
                {
                    this.mPrefixEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPrefixEdit.SearchProperties[WpfEdit.PropertyNames.HelpText] = "Adds this to the front of the variables";
                    this.mPrefixEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPrefixEdit;
            }
        }
        
        public WpfEdit SuffixEdit
        {
            get
            {
                if ((this.mSuffixEdit == null))
                {
                    this.mSuffixEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mSuffixEdit.SearchProperties[WpfEdit.PropertyNames.HelpText] = "Adds this to end of the variables";
                    this.mSuffixEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSuffixEdit;
            }
        }
        
        public PreviewCustom PreviewCustom
        {
            get
            {
                if ((this.mPreviewCustom == null))
                {
                    this.mPreviewCustom = new PreviewCustom(this);
                }
                return this.mPreviewCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mQviSplitOnCharacterEdit;
        
        private WpfComboBox mQviSplitOnCombobox;
        
        private WpfEdit mQviVariableListBoxEdit;
        
        private WpfRadioButton mReplaceRadioButton;
        
        private WpfRadioButton mAppendRadioButton;
        
        private WpfEdit mPrefixEdit;
        
        private WpfEdit mSuffixEdit;
        
        private PreviewCustom mPreviewCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PreviewCustom : WpfCustom
    {
        
        public PreviewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.PreviewView";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Preview";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public PreviewGroup PreviewGroup
        {
            get
            {
                if ((this.mPreviewGroup == null))
                {
                    this.mPreviewGroup = new PreviewGroup(this);
                }
                return this.mPreviewGroup;
            }
        }
        #endregion
        
        #region Fields
        private PreviewGroup mPreviewGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PreviewGroup : WpfGroup
    {
        
        public PreviewGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "PreviewGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton PreviewButton
        {
            get
            {
                if ((this.mPreviewButton == null))
                {
                    this.mPreviewButton = new WpfButton(this);
                    #region Search Criteria
                    this.mPreviewButton.SearchProperties[WpfButton.PropertyNames.Name] = "Preview";
                    this.mPreviewButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPreviewButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mPreviewButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Error1 : WpfText
    {
        
        public Error1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_Error0_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink Hyperlink
        {
            get
            {
                if ((this.mHyperlink == null))
                {
                    this.mHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TopScrollViewerPane : WpfPane
    {
        
        public TopScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "ScrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UnsavedWorkflowLinkText UnsavedWorkflowLinkText
        {
            get
            {
                if ((this.mUnsavedWorkflowLinkText == null))
                {
                    this.mUnsavedWorkflowLinkText = new UnsavedWorkflowLinkText(this);
                }
                return this.mUnsavedWorkflowLinkText;
            }
        }
        #endregion
        
        #region Fields
        private UnsavedWorkflowLinkText mUnsavedWorkflowLinkText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UnsavedWorkflowLinkText : WpfText
    {
        
        public UnsavedWorkflowLinkText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfText.PropertyNames.Name, "Unassigned/Unsaved", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink Hyperlink
        {
            get
            {
                if ((this.mHyperlink == null))
                {
                    this.mHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneRight : WpfCustom
    {
        
        public SplitPaneRight(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Variables Variables
        {
            get
            {
                if ((this.mVariables == null))
                {
                    this.mVariables = new Variables(this);
                }
                return this.mVariables;
            }
        }
        
        public DebugOutput DebugOutput
        {
            get
            {
                if ((this.mDebugOutput == null))
                {
                    this.mDebugOutput = new DebugOutput(this);
                }
                return this.mDebugOutput;
            }
        }
        #endregion
        
        #region Fields
        private Variables mVariables;
        
        private DebugOutput mDebugOutput;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Variables : WpfCustom
    {
        
        public Variables(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Variables";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton VariableUnpinBtn
        {
            get
            {
                if ((this.mVariableUnpinBtn == null))
                {
                    this.mVariableUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mVariableUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mVariableUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableUnpinBtn;
            }
        }
        
        public DatalistView DatalistView
        {
            get
            {
                if ((this.mDatalistView == null))
                {
                    this.mDatalistView = new DatalistView(this);
                }
                return this.mDatalistView;
            }
        }
        
        public WpfButton ExecuteIcon
        {
            get
            {
                if ((this.mExecuteIcon == null))
                {
                    this.mExecuteIcon = new WpfButton(this);
                    #region Search Criteria
                    this.mExecuteIcon.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExecuteButton";
                    this.mExecuteIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExecuteIcon;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mVariableUnpinBtn;
        
        private DatalistView mDatalistView;
        
        private WpfButton mExecuteIcon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DatalistView : WpfCustom
    {
        
        public DatalistView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataListView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_DataListView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableTree VariableTree
        {
            get
            {
                if ((this.mVariableTree == null))
                {
                    this.mVariableTree = new VariableTree(this);
                }
                return this.mVariableTree;
            }
        }
        
        public SearchTextbox1 SearchTextbox
        {
            get
            {
                if ((this.mSearchTextbox == null))
                {
                    this.mSearchTextbox = new SearchTextbox1(this);
                }
                return this.mSearchTextbox;
            }
        }
        
        public WpfButton RemoveUnused
        {
            get
            {
                if ((this.mRemoveUnused == null))
                {
                    this.mRemoveUnused = new WpfButton(this);
                    #region Search Criteria
                    this.mRemoveUnused.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_AddRemovebtn_AutoID";
                    this.mRemoveUnused.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRemoveUnused;
            }
        }
        
        public WpfButton Sort
        {
            get
            {
                if ((this.mSort == null))
                {
                    this.mSort = new WpfButton(this);
                    #region Search Criteria
                    this.mSort.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Sortbtn_AutoID";
                    this.mSort.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSort;
            }
        }
        #endregion
        
        #region Fields
        private VariableTree mVariableTree;
        
        private SearchTextbox1 mSearchTextbox;
        
        private WpfButton mRemoveUnused;
        
        private WpfButton mSort;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableTree : WpfTree
    {
        
        public VariableTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "UI_VariableTreeView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableTreeItem VariableTreeItem
        {
            get
            {
                if ((this.mVariableTreeItem == null))
                {
                    this.mVariableTreeItem = new VariableTreeItem(this);
                }
                return this.mVariableTreeItem;
            }
        }
        
        public RecordsetTreeItem RecordsetTreeItem
        {
            get
            {
                if ((this.mRecordsetTreeItem == null))
                {
                    this.mRecordsetTreeItem = new RecordsetTreeItem(this);
                }
                return this.mRecordsetTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private VariableTreeItem mVariableTreeItem;
        
        private RecordsetTreeItem mRecordsetTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableTreeItem : WpfTreeItem
    {
        
        public VariableTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Variable";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TreeItem1 TreeItem1
        {
            get
            {
                if ((this.mTreeItem1 == null))
                {
                    this.mTreeItem1 = new TreeItem1(this);
                }
                return this.mTreeItem1;
            }
        }
        
        public TreeItem2 TreeItem2
        {
            get
            {
                if ((this.mTreeItem2 == null))
                {
                    this.mTreeItem2 = new TreeItem2(this);
                }
                return this.mTreeItem2;
            }
        }
        
        public TreeItem3 TreeItem3
        {
            get
            {
                if ((this.mTreeItem3 == null))
                {
                    this.mTreeItem3 = new TreeItem3(this);
                }
                return this.mTreeItem3;
            }
        }
        
        public TreeItem4 TreeItem4
        {
            get
            {
                if ((this.mTreeItem4 == null))
                {
                    this.mTreeItem4 = new TreeItem4(this);
                }
                return this.mTreeItem4;
            }
        }
        
        public TreeItem5 TreeItem5
        {
            get
            {
                if ((this.mTreeItem5 == null))
                {
                    this.mTreeItem5 = new TreeItem5(this);
                }
                return this.mTreeItem5;
            }
        }
        
        public WpfButton ExpanderButton
        {
            get
            {
                if ((this.mExpanderButton == null))
                {
                    this.mExpanderButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpanderButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Expander";
                    this.mExpanderButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpanderButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderButton;
            }
        }
        #endregion
        
        #region Fields
        private TreeItem1 mTreeItem1;
        
        private TreeItem2 mTreeItem2;
        
        private TreeItem3 mTreeItem3;
        
        private TreeItem4 mTreeItem4;
        
        private TreeItem5 mTreeItem5;
        
        private WpfButton mExpanderButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem1 : WpfTreeItem
    {
        
        public TreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane1 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane1(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane1 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane1 : WpfPane
    {
        
        public ScrollViewerPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox : WpfEdit
    {
        
        public NameTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public DeleteButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new DeleteButton(this);
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private DeleteButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteButton : WpfButton
    {
        
        public DeleteButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage Image
        {
            get
            {
                if ((this.mImage == null))
                {
                    this.mImage = new WpfImage(this);
                    #region Search Criteria
                    this.mImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteVar";
                    this.mImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem2 : WpfTreeItem
    {
        
        public TreeItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane2 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane2(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane2 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane2 : WpfPane
    {
        
        public ScrollViewerPane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox1 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox1(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox1 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox1 : WpfEdit
    {
        
        public NameTextbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem3 : WpfTreeItem
    {
        
        public TreeItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane3 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane3(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane3 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane3 : WpfPane
    {
        
        public ScrollViewerPane3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox2 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox2(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox2 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox2 : WpfEdit
    {
        
        public NameTextbox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem4 : WpfTreeItem
    {
        
        public TreeItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane4 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane4(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane4 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane4 : WpfPane
    {
        
        public ScrollViewerPane4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox3 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox3(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox3 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox3 : WpfEdit
    {
        
        public NameTextbox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem5 : WpfTreeItem
    {
        
        public TreeItem5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "5";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane5 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane5(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane5 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane5 : WpfPane
    {
        
        public ScrollViewerPane5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox4 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox4(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox4 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox4 : WpfEdit
    {
        
        public NameTextbox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetTreeItem : WpfTreeItem
    {
        
        public RecordsetTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Recordset";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TreeItem11 TreeItem1
        {
            get
            {
                if ((this.mTreeItem1 == null))
                {
                    this.mTreeItem1 = new TreeItem11(this);
                }
                return this.mTreeItem1;
            }
        }
        
        public TreeItem21 TreeItem2
        {
            get
            {
                if ((this.mTreeItem2 == null))
                {
                    this.mTreeItem2 = new TreeItem21(this);
                }
                return this.mTreeItem2;
            }
        }
        
        public TreeItem31 TreeItem3
        {
            get
            {
                if ((this.mTreeItem3 == null))
                {
                    this.mTreeItem3 = new TreeItem31(this);
                }
                return this.mTreeItem3;
            }
        }
        
        public TreeItem41 TreeItem4
        {
            get
            {
                if ((this.mTreeItem4 == null))
                {
                    this.mTreeItem4 = new TreeItem41(this);
                }
                return this.mTreeItem4;
            }
        }
        
        public TreeItem51 TreeItem5
        {
            get
            {
                if ((this.mTreeItem5 == null))
                {
                    this.mTreeItem5 = new TreeItem51(this);
                }
                return this.mTreeItem5;
            }
        }
        
        public WpfButton ExpanderButton
        {
            get
            {
                if ((this.mExpanderButton == null))
                {
                    this.mExpanderButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpanderButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Expander";
                    this.mExpanderButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpanderButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderButton;
            }
        }
        #endregion
        
        #region Fields
        private TreeItem11 mTreeItem1;
        
        private TreeItem21 mTreeItem2;
        
        private TreeItem31 mTreeItem3;
        
        private TreeItem41 mTreeItem4;
        
        private TreeItem51 mTreeItem5;
        
        private WpfButton mExpanderButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem11 : WpfTreeItem
    {
        
        public TreeItem11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane6 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane6(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        
        public Field1 Field1
        {
            get
            {
                if ((this.mField1 == null))
                {
                    this.mField1 = new Field1(this);
                }
                return this.mField1;
            }
        }
        
        public Field2 Field2
        {
            get
            {
                if ((this.mField2 == null))
                {
                    this.mField2 = new Field2(this);
                }
                return this.mField2;
            }
        }
        
        public Field3 Field3
        {
            get
            {
                if ((this.mField3 == null))
                {
                    this.mField3 = new Field3(this);
                }
                return this.mField3;
            }
        }
        
        public Field4 Field4
        {
            get
            {
                if ((this.mField4 == null))
                {
                    this.mField4 = new Field4(this);
                }
                return this.mField4;
            }
        }
        
        public WpfButton ExpanderButton
        {
            get
            {
                if ((this.mExpanderButton == null))
                {
                    this.mExpanderButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpanderButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Expander";
                    this.mExpanderButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpanderButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderButton;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane6 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        
        private Field1 mField1;
        
        private Field2 mField2;
        
        private Field3 mField3;
        
        private Field4 mField4;
        
        private WpfButton mExpanderButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane6 : WpfPane
    {
        
        public ScrollViewerPane6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox5 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox5(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox5 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox5 : WpfEdit
    {
        
        public NameTextbox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButtonButton
        {
            get
            {
                if ((this.mDeleteButtonButton == null))
                {
                    this.mDeleteButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButtonButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButtonButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field1 : WpfTreeItem
    {
        
        public Field1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane7 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane7(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane7 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane7 : WpfPane
    {
        
        public ScrollViewerPane7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox6 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox6(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox6 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox6 : WpfEdit
    {
        
        public NameTextbox6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field2 : WpfTreeItem
    {
        
        public Field2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane8 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane8(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane8 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane8 : WpfPane
    {
        
        public ScrollViewerPane8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox7 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox7(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox7 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox7 : WpfEdit
    {
        
        public NameTextbox7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field3 : WpfTreeItem
    {
        
        public Field3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane9 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane9(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane9 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane9 : WpfPane
    {
        
        public ScrollViewerPane9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox8 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox8(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox8 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox8 : WpfEdit
    {
        
        public NameTextbox8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field4 : WpfTreeItem
    {
        
        public Field4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane10 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane10(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane10 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane10 : WpfPane
    {
        
        public ScrollViewerPane10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox9 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox9(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox9 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox9 : WpfEdit
    {
        
        public NameTextbox9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem21 : WpfTreeItem
    {
        
        public TreeItem21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane11 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane11(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        
        public Field11 Field1
        {
            get
            {
                if ((this.mField1 == null))
                {
                    this.mField1 = new Field11(this);
                }
                return this.mField1;
            }
        }
        
        public Field21 Field2
        {
            get
            {
                if ((this.mField2 == null))
                {
                    this.mField2 = new Field21(this);
                }
                return this.mField2;
            }
        }
        
        public Field31 Field3
        {
            get
            {
                if ((this.mField3 == null))
                {
                    this.mField3 = new Field31(this);
                }
                return this.mField3;
            }
        }
        
        public Field41 Field4
        {
            get
            {
                if ((this.mField4 == null))
                {
                    this.mField4 = new Field41(this);
                }
                return this.mField4;
            }
        }
        
        public WpfButton ExpanderButton
        {
            get
            {
                if ((this.mExpanderButton == null))
                {
                    this.mExpanderButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpanderButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Expander";
                    this.mExpanderButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpanderButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderButton;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane11 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        
        private Field11 mField1;
        
        private Field21 mField2;
        
        private Field31 mField3;
        
        private Field41 mField4;
        
        private WpfButton mExpanderButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane11 : WpfPane
    {
        
        public ScrollViewerPane11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox10 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox10(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox10 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox10 : WpfEdit
    {
        
        public NameTextbox10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButtonButton
        {
            get
            {
                if ((this.mDeleteButtonButton == null))
                {
                    this.mDeleteButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButtonButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButtonButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field11 : WpfTreeItem
    {
        
        public Field11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane12 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane12(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane12 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane12 : WpfPane
    {
        
        public ScrollViewerPane12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox11 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox11(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox11 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox11 : WpfEdit
    {
        
        public NameTextbox11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field21 : WpfTreeItem
    {
        
        public Field21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane13 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane13(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane13 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane13 : WpfPane
    {
        
        public ScrollViewerPane13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox12 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox12(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox12 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox12 : WpfEdit
    {
        
        public NameTextbox12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field31 : WpfTreeItem
    {
        
        public Field31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane14 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane14(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane14 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane14 : WpfPane
    {
        
        public ScrollViewerPane14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox13 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox13(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox13 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox13 : WpfEdit
    {
        
        public NameTextbox13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field41 : WpfTreeItem
    {
        
        public Field41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane15 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane15(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane15 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane15 : WpfPane
    {
        
        public ScrollViewerPane15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox14 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox14(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox14 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox14 : WpfEdit
    {
        
        public NameTextbox14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem31 : WpfTreeItem
    {
        
        public TreeItem31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane16 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane16(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        
        public Field Field
        {
            get
            {
                if ((this.mField == null))
                {
                    this.mField = new Field(this);
                }
                return this.mField;
            }
        }
        
        public WpfButton ExpanderButton
        {
            get
            {
                if ((this.mExpanderButton == null))
                {
                    this.mExpanderButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpanderButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Expander";
                    this.mExpanderButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpanderButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderButton;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane16 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        
        private Field mField;
        
        private WpfButton mExpanderButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane16 : WpfPane
    {
        
        public ScrollViewerPane16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox15 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox15(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox15 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox15 : WpfEdit
    {
        
        public NameTextbox15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButtonButton
        {
            get
            {
                if ((this.mDeleteButtonButton == null))
                {
                    this.mDeleteButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButtonButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButtonButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field : WpfTreeItem
    {
        
        public Field(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane17 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane17(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane17 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane17 : WpfPane
    {
        
        public ScrollViewerPane17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox16 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox16(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox16 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox16 : WpfEdit
    {
        
        public NameTextbox16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem41 : WpfTreeItem
    {
        
        public TreeItem41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane18 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane18(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        
        public Field5 Field
        {
            get
            {
                if ((this.mField == null))
                {
                    this.mField = new Field5(this);
                }
                return this.mField;
            }
        }
        
        public WpfButton ExpanderButton
        {
            get
            {
                if ((this.mExpanderButton == null))
                {
                    this.mExpanderButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpanderButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Expander";
                    this.mExpanderButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpanderButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderButton;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane18 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        
        private Field5 mField;
        
        private WpfButton mExpanderButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane18 : WpfPane
    {
        
        public ScrollViewerPane18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox17 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox17(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox17 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox17 : WpfEdit
    {
        
        public NameTextbox17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButtonButton
        {
            get
            {
                if ((this.mDeleteButtonButton == null))
                {
                    this.mDeleteButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButtonButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButtonButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field5 : WpfTreeItem
    {
        
        public Field5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane19 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane19(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane19 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane19 : WpfPane
    {
        
        public ScrollViewerPane19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox18 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox18(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox18 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox18 : WpfEdit
    {
        
        public NameTextbox18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem51 : WpfTreeItem
    {
        
        public TreeItem51(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "5";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane20 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane20(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        
        public Field6 Field
        {
            get
            {
                if ((this.mField == null))
                {
                    this.mField = new Field6(this);
                }
                return this.mField;
            }
        }
        
        public WpfButton ExpanderButton
        {
            get
            {
                if ((this.mExpanderButton == null))
                {
                    this.mExpanderButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpanderButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Expander";
                    this.mExpanderButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpanderButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderButton;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane20 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        
        private Field6 mField;
        
        private WpfButton mExpanderButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane20 : WpfPane
    {
        
        public ScrollViewerPane20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox19 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox19(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox19 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox19 : WpfEdit
    {
        
        public NameTextbox19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButtonButton
        {
            get
            {
                if ((this.mDeleteButtonButton == null))
                {
                    this.mDeleteButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButtonButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButtonButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field6 : WpfTreeItem
    {
        
        public Field6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane21 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane21(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane21 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane21 : WpfPane
    {
        
        public ScrollViewerPane21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox20 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox20(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox20 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox20 : WpfEdit
    {
        
        public NameTextbox20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SearchTextbox1 : WpfEdit
    {
        
        public SearchTextbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText FilterText
        {
            get
            {
                if ((this.mFilterText == null))
                {
                    this.mFilterText = new WpfText(this);
                    #region Search Criteria
                    this.mFilterText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mFilterText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFilterText;
            }
        }
        
        public WpfImage ClearSearchDisabled
        {
            get
            {
                if ((this.mClearSearchDisabled == null))
                {
                    this.mClearSearchDisabled = new WpfImage(this);
                    #region Search Criteria
                    this.mClearSearchDisabled.SearchProperties[WpfImage.PropertyNames.AutomationId] = "ClearSearchDisabled";
                    this.mClearSearchDisabled.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mClearSearchDisabled;
            }
        }
        
        public WpfButton ClearSearchButton
        {
            get
            {
                if ((this.mClearSearchButton == null))
                {
                    this.mClearSearchButton = new WpfButton(this);
                    #region Search Criteria
                    this.mClearSearchButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ClearSearchButton";
                    this.mClearSearchButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mClearSearchButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mFilterText;
        
        private WpfImage mClearSearchDisabled;
        
        private WpfButton mClearSearchButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DebugOutput : WpfCustom
    {
        
        public DebugOutput(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DebugOutputView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DebugOutput";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DebugOutputUnpinBtn
        {
            get
            {
                if ((this.mDebugOutputUnpinBtn == null))
                {
                    this.mDebugOutputUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mDebugOutputUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mDebugOutputUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDebugOutputUnpinBtn;
            }
        }
        
        public WpfEdit SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSearchTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mSearchTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSearchTextBox;
            }
        }
        
        public WpfButton SettingsButton
        {
            get
            {
                if ((this.mSettingsButton == null))
                {
                    this.mSettingsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSettingsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DebugOutputOptionsButton_AutoID";
                    this.mSettingsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSettingsButton;
            }
        }
        
        public WpfButton ExpandCollapseButton
        {
            get
            {
                if ((this.mExpandCollapseButton == null))
                {
                    this.mExpandCollapseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpandCollapseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DebugOutputExpandAllMode_AutoID";
                    this.mExpandCollapseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpandCollapseButton;
            }
        }
        
        public DebugOutputTree DebugOutputTree
        {
            get
            {
                if ((this.mDebugOutputTree == null))
                {
                    this.mDebugOutputTree = new DebugOutputTree(this);
                }
                return this.mDebugOutputTree;
            }
        }
        
        public StatusBar StatusBar
        {
            get
            {
                if ((this.mStatusBar == null))
                {
                    this.mStatusBar = new StatusBar(this);
                }
                return this.mStatusBar;
            }
        }
        
        public CommentTreeItem1 CommentTreeItem
        {
            get
            {
                if ((this.mCommentTreeItem == null))
                {
                    this.mCommentTreeItem = new CommentTreeItem1(this);
                }
                return this.mCommentTreeItem;
            }
        }
        
        public WpfButton CreateTestFromDebugButton
        {
            get
            {
                if ((this.mCreateTestFromDebugButton == null))
                {
                    this.mCreateTestFromDebugButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCreateTestFromDebugButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DebugOutputAddNewTestMode_AutoID";
                    this.mCreateTestFromDebugButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCreateTestFromDebugButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDebugOutputUnpinBtn;
        
        private WpfEdit mSearchTextBox;
        
        private WpfButton mSettingsButton;
        
        private WpfButton mExpandCollapseButton;
        
        private DebugOutputTree mDebugOutputTree;
        
        private StatusBar mStatusBar;
        
        private CommentTreeItem1 mCommentTreeItem;
        
        private WpfButton mCreateTestFromDebugButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DebugOutputTree : WpfTree
    {
        
        public DebugOutputTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "DebugOutputTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Step1 Step1
        {
            get
            {
                if ((this.mStep1 == null))
                {
                    this.mStep1 = new Step1(this);
                }
                return this.mStep1;
            }
        }
        
        public SubWorkflow SubWorkflow
        {
            get
            {
                if ((this.mSubWorkflow == null))
                {
                    this.mSubWorkflow = new SubWorkflow(this);
                }
                return this.mSubWorkflow;
            }
        }
        
        public ServiceTreeItem ServiceTreeItem
        {
            get
            {
                if ((this.mServiceTreeItem == null))
                {
                    this.mServiceTreeItem = new ServiceTreeItem(this);
                }
                return this.mServiceTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private Step1 mStep1;
        
        private SubWorkflow mSubWorkflow;
        
        private ServiceTreeItem mServiceTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Step1 : WpfTreeItem
    {
        
        public Step1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Step";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText VariableTextbox2
        {
            get
            {
                if ((this.mVariableTextbox2 == null))
                {
                    this.mVariableTextbox2 = new WpfText(this);
                    #region Search Criteria
                    this.mVariableTextbox2.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_DebugOutputVariableTextBlock_AutoID";
                    this.mVariableTextbox2.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mVariableTextbox2.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableTextbox2.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextbox2;
            }
        }
        
        public WpfButton Assign1Button
        {
            get
            {
                if ((this.mAssign1Button == null))
                {
                    this.mAssign1Button = new WpfButton(this);
                    #region Search Criteria
                    this.mAssign1Button.SearchProperties[WpfButton.PropertyNames.Name] = "Assign (1)";
                    this.mAssign1Button.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssign1Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssign1Button;
            }
        }
        
        public WpfButton BaseConversion1Button
        {
            get
            {
                if ((this.mBaseConversion1Button == null))
                {
                    this.mBaseConversion1Button = new WpfButton(this);
                    #region Search Criteria
                    this.mBaseConversion1Button.SearchProperties[WpfButton.PropertyNames.Name] = "Base Conversion (1)";
                    this.mBaseConversion1Button.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mBaseConversion1Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mBaseConversion1Button;
            }
        }
        
        public WpfButton CalculateButton
        {
            get
            {
                if ((this.mCalculateButton == null))
                {
                    this.mCalculateButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCalculateButton.SearchProperties[WpfButton.PropertyNames.Name] = "Calculate";
                    this.mCalculateButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCalculateButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCalculateButton;
            }
        }
        
        public RecordsetGroup RecordsetGroup
        {
            get
            {
                if ((this.mRecordsetGroup == null))
                {
                    this.mRecordsetGroup = new RecordsetGroup(this);
                }
                return this.mRecordsetGroup;
            }
        }
        
        public WpfText ValueTextbox5
        {
            get
            {
                if ((this.mValueTextbox5 == null))
                {
                    this.mValueTextbox5 = new WpfText(this);
                    #region Search Criteria
                    this.mValueTextbox5.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_DebugOutputValueTextBlock_AutoID";
                    this.mValueTextbox5.SearchProperties[WpfText.PropertyNames.Instance] = "5";
                    this.mValueTextbox5.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mValueTextbox5.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueTextbox5;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mVariableTextbox2;
        
        private WpfButton mAssign1Button;
        
        private WpfButton mBaseConversion1Button;
        
        private WpfButton mCalculateButton;
        
        private RecordsetGroup mRecordsetGroup;
        
        private WpfText mValueTextbox5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetGroup : WpfExpander
    {
        
        public RecordsetGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "UI_DefaultRecordSetIOTemplate_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText RecordsetName
        {
            get
            {
                if ((this.mRecordsetName == null))
                {
                    this.mRecordsetName = new WpfText(this);
                    #region Search Criteria
                    this.mRecordsetName.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_DebugOutputVariableTextBlock_AutoID";
                    this.mRecordsetName.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetName.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordsetName;
            }
        }
        
        public WpfText RecordsetValue
        {
            get
            {
                if ((this.mRecordsetValue == null))
                {
                    this.mRecordsetValue = new WpfText(this);
                    #region Search Criteria
                    this.mRecordsetValue.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_DebugOutputValueTextBlock_AutoID";
                    this.mRecordsetValue.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetValue.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordsetValue;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mRecordsetName;
        
        private WpfText mRecordsetValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SubWorkflow : WpfTreeItem
    {
        
        public SubWorkflow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Service";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIHelloWorldTreeItem1 UIHelloWorldTreeItem1
        {
            get
            {
                if ((this.mUIHelloWorldTreeItem1 == null))
                {
                    this.mUIHelloWorldTreeItem1 = new UIHelloWorldTreeItem1(this);
                }
                return this.mUIHelloWorldTreeItem1;
            }
        }
        #endregion
        
        #region Fields
        private UIHelloWorldTreeItem1 mUIHelloWorldTreeItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelloWorldTreeItem1 : WpfTreeItem
    {
        
        public UIHelloWorldTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Start";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton UIHelloWorldButton
        {
            get
            {
                if ((this.mUIHelloWorldButton == null))
                {
                    this.mUIHelloWorldButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIHelloWorldButton.SearchProperties[WpfButton.PropertyNames.Name] = "Hello World";
                    this.mUIHelloWorldButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHelloWorldButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIHelloWorldButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIHelloWorldButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServiceTreeItem : WpfTreeItem
    {
        
        public ServiceTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Service";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton Workflow1Button
        {
            get
            {
                if ((this.mWorkflow1Button == null))
                {
                    this.mWorkflow1Button = new WpfButton(this);
                    #region Search Criteria
                    this.mWorkflow1Button.SearchProperties[WpfButton.PropertyNames.Name] = "GenericResource";
                    this.mWorkflow1Button.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mWorkflow1Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWorkflow1Button;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mWorkflow1Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StatusBar : WpfEdit
    {
        
        public StatusBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Dev2StatusBarAutomationID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CommentTreeItem1 : WpfTreeItem
    {
        
        public CommentTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Step";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton CommentButton
        {
            get
            {
                if ((this.mCommentButton == null))
                {
                    this.mCommentButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCommentButton.SearchProperties[WpfButton.PropertyNames.Name] = "Comment";
                    this.mCommentButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCommentButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCommentButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCommentButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UnpinnedTabContextMenu : WpfMenu
    {
        
        public UnpinnedTabContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem Floating
        {
            get
            {
                if ((this.mFloating == null))
                {
                    this.mFloating = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mFloating.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Floating";
                    this.mFloating.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFloating;
            }
        }
        
        public WpfMenuItem Dockable
        {
            get
            {
                if ((this.mDockable == null))
                {
                    this.mDockable = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDockable.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Dockable";
                    this.mDockable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDockable;
            }
        }
        
        public WpfMenuItem TabbedDocument
        {
            get
            {
                if ((this.mTabbedDocument == null))
                {
                    this.mTabbedDocument = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mTabbedDocument.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Tabbed Document";
                    this.mTabbedDocument.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTabbedDocument;
            }
        }
        
        public WpfMenuItem AutoHide
        {
            get
            {
                if ((this.mAutoHide == null))
                {
                    this.mAutoHide = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mAutoHide.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Auto Hide";
                    this.mAutoHide.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAutoHide;
            }
        }
        
        public WpfMenuItem Hide
        {
            get
            {
                if ((this.mHide == null))
                {
                    this.mHide = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mHide.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Hide";
                    this.mHide.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHide;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mFloating;
        
        private WpfMenuItem mDockable;
        
        private WpfMenuItem mTabbedDocument;
        
        private WpfMenuItem mAutoHide;
        
        private WpfMenuItem mHide;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAsRemoteConnectionIntegration : WpfCustom
    {
        
        public ComboboxListItemAsRemoteConnectionIntegration(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Remote Connection Integration";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "Remote Connection Integration";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAspostgresDB : WpfCustom
    {
        
        public ComboboxListItemAspostgresDB(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "postgres";
            this.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "postgres";
                    this.mText.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAsmysqlDB : WpfCustom
    {
        
        public ComboboxListItemAsmysqlDB(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "mysql";
            this.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "mysql";
                    this.mText.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAsHRDB : WpfCustom
    {
        
        public ComboboxListItemAsHRDB(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "HR";
            this.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "HR";
                    this.mText.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAsExcelFilesDB : WpfCustom
    {
        
        public ComboboxListItemAsExcelFilesDB(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Excel Files";
            this.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "Excel Files";
                    this.mText.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAsDropboxServerType : WpfCustom
    {
        
        public ComboboxListItemAsDropboxServerType(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Dropbox";
            this.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
            #endregion
        }
        
        #region Properties
        public WpfText UIDropboxText
        {
            get
            {
                if ((this.mUIDropboxText == null))
                {
                    this.mUIDropboxText = new WpfText(this);
                    #region Search Criteria
                    this.mUIDropboxText.SearchProperties[WpfText.PropertyNames.Name] = "Dropbox";
                    this.mUIDropboxText.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mUIDropboxText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIDropboxText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Dev2TestingDBCustom : WpfCustom
    {
        
        public Dev2TestingDBCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Dev2TestingDB";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText UIDev2TestingDBText
        {
            get
            {
                if ((this.mUIDev2TestingDBText == null))
                {
                    this.mUIDev2TestingDBText = new WpfText(this);
                    #region Search Criteria
                    this.mUIDev2TestingDBText.SearchProperties[WpfText.PropertyNames.Name] = "Dev2TestingDB";
                    this.mUIDev2TestingDBText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIDev2TestingDBText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIDev2TestingDBText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAsMSAccessDB : WpfCustom
    {
        
        public ComboboxListItemAsMSAccessDB(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "MS Access Database";
            this.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
            #endregion
        }
        
        #region Properties
        public WpfText MSAccessDatabaseText
        {
            get
            {
                if ((this.mMSAccessDatabaseText == null))
                {
                    this.mMSAccessDatabaseText = new WpfText(this);
                    #region Search Criteria
                    this.mMSAccessDatabaseText.SearchProperties[WpfText.PropertyNames.Name] = "MS Access Database";
                    this.mMSAccessDatabaseText.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mMSAccessDatabaseText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mMSAccessDatabaseText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWarewolfASHASHWindow : WpfWindow
    {
        
        public UIWarewolfASHASHWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Warewolf (ASH\\ASH)";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf (ASH\\ASH)");
            #endregion
        }
        
        #region Properties
        public UIWorkflowItemPresenteCustom UIWorkflowItemPresenteCustom
        {
            get
            {
                if ((this.mUIWorkflowItemPresenteCustom == null))
                {
                    this.mUIWorkflowItemPresenteCustom = new UIWorkflowItemPresenteCustom(this);
                }
                return this.mUIWorkflowItemPresenteCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIWorkflowItemPresenteCustom mUIWorkflowItemPresenteCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWorkflowItemPresenteCustom : WpfCustom
    {
        
        public UIWorkflowItemPresenteCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Warewolf (ASH\\ASH)");
            #endregion
        }
        
        #region Properties
        public UIFlowchartCustom UIFlowchartCustom
        {
            get
            {
                if ((this.mUIFlowchartCustom == null))
                {
                    this.mUIFlowchartCustom = new UIFlowchartCustom(this);
                }
                return this.mUIFlowchartCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFlowchartCustom mUIFlowchartCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFlowchartCustom : WpfCustom
    {
        
        public UIFlowchartCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Hello World(FlowchartDesigner)";
            this.WindowTitles.Add("Warewolf (ASH\\ASH)");
            #endregion
        }
        
        #region Properties
        public WpfCustom UID7dccbadb86c4ae4afd4Custom
        {
            get
            {
                if ((this.mUID7dccbadb86c4ae4afd4Custom == null))
                {
                    this.mUID7dccbadb86c4ae4afd4Custom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUID7dccbadb86c4ae4afd4Custom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectorWithoutStartDot";
                    this.mUID7dccbadb86c4ae4afd4Custom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "d7dccbad-b86c-4ae4-afd4-05901b046de9,310;332 310;438 295;438";
                    this.mUID7dccbadb86c4ae4afd4Custom.WindowTitles.Add("Warewolf (ASH\\ASH)");
                    #endregion
                }
                return this.mUID7dccbadb86c4ae4afd4Custom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUID7dccbadb86c4ae4afd4Custom;
        #endregion
    }
}
