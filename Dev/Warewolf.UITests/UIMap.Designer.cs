// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Warewolf.UITests
{
    using TechTalk.SpecFlow;
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    [Binding]
    public partial class UIMap
    {
        
        /// <summary>
        /// Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_1 - Use 'Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_1Params' to pass parameters into this method.
        /// </summary>
        [When(@"I Assign Value To Variable With Assign Tool Small View Row 1")]
        public void Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_1()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row1.VariableCell.Listbox.Textbox;
            WpfEdit textEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row1.ValueCell.Listbox.TextEdit;
            #endregion

            // Type '[[SomeVariable]]' in 'UI_TextBox_AutoID' text box
            textbox.Text = this.Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_1Params.TextboxText;

            // Type '50' in 'Text' text box
            textEdit.Text = this.Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_1Params.TextEditText;
        }
        
        /// <summary>
        /// Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_2 - Use 'Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_2Params' to pass parameters into this method.
        /// </summary>
        [When(@"I Assign Value To Variable With Assign Tool Small View Row 2")]
        public void Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_2()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row2.VariableCell.Listbox.Textbox;
            WpfEdit textEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row2.ValueCell.Listbox.TextEdit;
            #endregion

            // Type '[[SomeOtherVariable]]' in 'UI_TextBox_AutoID' text box
            textbox.Text = this.Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_2Params.TextboxText;

            // Type '100' in 'Text' text box
            textEdit.Text = this.Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_2Params.TextEditText;
        }
        
        /// <summary>
        /// Check_Public_Administrator - Use 'Check_Public_AdministratorParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Check Public Administrator")]
        public void Check_Public_Administrator()
        {
            #region Variable Declarations
            WpfCheckBox public_AdministratorCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ServerPermissions.PublicROW.Public_AdministratorCell.Public_AdministratorCheckBox;
            WpfCheckBox public_DeployToCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ServerPermissions.PublicROW.Public_DeployToCell.Public_DeployToCheckBox;
            WpfCheckBox public_DeployFromCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ServerPermissions.PublicROW.Public_DeployFromCell.Public_DeployFromCheckBox;
            #endregion

            // Select 'UI_Public_AdministratorPermissionCheckBox_AutoID' check box
            public_AdministratorCheckBox.Checked = this.Check_Public_AdministratorParams.Public_AdministratorCheckBoxChecked;

            // Verify that the 'Checked' property of 'UI_Public_DeployToPermissionCheckBox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Check_Public_AdministratorParams.Public_DeployToCheckBoxChecked, public_DeployToCheckBox.Checked, "Public DeployTo checkbox is NOT checked after Checking Administrator.");

            // Verify that the 'Checked' property of 'UI_Public_DeployFromPermissionCheckBox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Check_Public_AdministratorParams.Public_DeployFromCheckBoxChecked, public_DeployFromCheckBox.Checked, "Public DeployFrom checkbox is NOT checked after Checking Administrator.");
        }
        
        /// <summary>
        /// Click_AddNew_Web_Source_From_PostWeb_tool - Use 'Click_AddNew_Web_Source_From_PostWeb_toolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click AddNew Web Source From PostWeb tool")]
        public void Click_AddNew_Web_Source_From_PostWeb_tool()
        {
            #region Variable Declarations
            WpfButton newSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPost.LargeView.NewSourceButton;
            #endregion

            // Verify that the 'Exists' property of 'New' button equals 'True'
            Assert.AreEqual(this.Click_AddNew_Web_Source_From_PostWeb_toolParams.NewSourceButtonExists, newSourceButton.Exists, "NewButton does not exist");

            // Click 'New' button
            Mouse.Click(newSourceButton, new Point(30, 4));
        }
        
        /// <summary>
        /// Click_AddNew_Web_Source_From_tool - Use 'Click_AddNew_Web_Source_From_toolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click AddNew Web Source From tool")]
        public void Click_AddNew_Web_Source_From_tool()
        {
            #region Variable Declarations
            WpfButton newSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.LargeView.NewSourceButton;
            #endregion

            // Verify that the 'Exists' property of 'New' button equals 'True'
            Assert.AreEqual(this.Click_AddNew_Web_Source_From_toolParams.NewSourceButtonExists, newSourceButton.Exists, "NewButton does not exist");

            // Click 'New' button
            Mouse.Click(newSourceButton, new Point(30, 4));
        }
        
        /// <summary>
        /// Click_Assign_Tool_CollapseAll - Use 'Click_Assign_Tool_CollapseAllParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Assign Tool CollapseAll")]
        public void Click_Assign_Tool_CollapseAll()
        {
            #region Variable Declarations
            WpfToggleButton collapseAllToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.CollapseAllToggleButton;
            #endregion

            // Verify that the 'Exists' property of 'CollapseAll' toggle button equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_CollapseAllParams.CollapseAllToggleButtonExists, collapseAllToggleButton.Exists, "Expand all button does not exist");

            // Set to 'Pressed' state 'CollapseAll' toggle button
            collapseAllToggleButton.Pressed = this.Click_Assign_Tool_CollapseAllParams.CollapseAllToggleButtonPressed;
        }
        
        /// <summary>
        /// Click_Assign_Tool_ExpandAll - Use 'Click_Assign_Tool_ExpandAllParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Assign Tool ExpandAll")]
        public void Click_Assign_Tool_ExpandAll()
        {
            #region Variable Declarations
            WpfToggleButton expandAllToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ExpandAllToggleButton;
            WpfCustom multiAssign = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign;
            #endregion

            // Verify that the 'Exists' property of 'ExpandAll' toggle button equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_ExpandAllParams.ExpandAllToggleButtonExists, expandAllToggleButton.Exists, "Expand all button does not exist");

            // Set to 'Pressed' state 'ExpandAll' toggle button
            expandAllToggleButton.Pressed = this.Click_Assign_Tool_ExpandAllParams.ExpandAllToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_ExpandAllParams.MultiAssignExists, multiAssign.Exists, "Assign tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Click_Assign_Tool_Large_View_Done_Button - Use 'Click_Assign_Tool_Large_View_Done_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Assign Tool Large View Done Button")]
        public void Click_Assign_Tool_Large_View_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.DoneButton;
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row1.VariableCell.Listbox.Textbox;
            WpfEdit nameTextbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.DatalistView.VariableTree.VariableTreeItem.TreeItem1.ScrollViewerPane.NameTextbox;
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.OpenQuickVariableInpToggleButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));

            // Verify that the 'Text' property of 'UI_TextBox_AutoID' text box equals '[[SomeVariable]]'
            Assert.AreEqual(this.Click_Assign_Tool_Large_View_Done_ButtonParams.TextboxText, textbox.Text, "Assign small view row1 variable textbox does not contain text somevariable");

            // Verify that the 'Text' property of 'UI_NameTextBox_AutoID' text box equals 'SomeVariable'
            Assert.AreEqual(this.Click_Assign_Tool_Large_View_Done_ButtonParams.NameTextboxText, nameTextbox.Text, "Variable list scalar row 1 textbox text does not equal somevariable");

            // Verify that the 'Exists' property of 'Open Quick Variable Input' toggle button equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_Large_View_Done_ButtonParams.OpenQuickVariableInpToggleButtonExists, openQuickVariableInpToggleButton.Exists, "QVI toggle button does not exist in assign tool small view after clicking done bu" +
                    "tton on large view.");
        }
        
        /// <summary>
        /// Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableName - Use 'Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Assign Tool Large View Done Button With Row1 Variable Textbox As SomeInvalidVariableName")]
        public void Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableName()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.DoneButton;
            WpfHyperlink hyperlink = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Error1.Hyperlink;
            WpfEdit nameTextbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.DatalistView.VariableTree.VariableTreeItem.TreeItem1.ScrollViewerPane.NameTextbox;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));

            // Verify that the 'Exists' property of 'Hyperlink' link equals 'True'
            Assert.AreEqual(this.Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams.HyperlinkExists, hyperlink.Exists, "Error popup does not exist on flowchart designer.");

            // Verify that the 'Text' property of 'UI_NameTextBox_AutoID' text box equals ''
            Assert.AreEqual(this.Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams.NameTextboxText, nameTextbox.Text, "Variable list scalar row 1 textbox text is not blank with invalid variable.");
        }
        
        /// <summary>
        /// click_AssignObject_Done
        /// </summary>
        [When(@"I click AssignObject Done")]
        public void click_AssignObject_Done()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(18, 10));
        }
        
        /// <summary>
        /// Click_Base_Convert_Large_View_Done_Button - Use 'Click_Base_Convert_Large_View_Done_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Base Convert Large View Done Button")]
        public void Click_Base_Convert_Large_View_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert.DoneButton;
            WpfEdit valueTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert.SmallView.DataGrid.Row1.Cell.Listbox.ValueTextbox;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(36, 11));

            // Verify that the 'Text' property of 'UI__Row1_FromExpressiontxt_AutoID' text box equals 'SomeData'
            Assert.AreEqual(this.Click_Base_Convert_Large_View_Done_ButtonParams.ValueTextboxText, valueTextbox.Text, "Base convert small view row1 variable textbox does not contain text SomeData.");
        }
        
        /// <summary>
        /// Click_Calculate_Large_View_Done_Button - Use 'Click_Calculate_Large_View_Done_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Calculate Large View Done Button")]
        public void Click_Calculate_Large_View_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate.DoneButton;
            WpfEdit functionTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate.SmallView.Listbox.FunctionTextbox;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(45, 8));

            // Verify that the 'Text' property of 'FunctionTextbox' text box equals '[[SomeVariable]]'
            Assert.AreEqual(this.Click_Calculate_Large_View_Done_ButtonParams.FunctionTextboxText, functionTextbox.Text, "Calculate small view function textbox text does not equal SomeVariable.");
        }
        
        /// <summary>
        /// Click_Cancel_DebugInput_Window - Use 'Click_Cancel_DebugInput_WindowParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Cancel DebugInput Window")]
        public void Click_Cancel_DebugInput_Window()
        {
            #region Variable Declarations
            WpfButton cancelButton = this.MainStudioWindow.DebugInputDialog.CancelButton;
            #endregion

            // Verify that the 'Enabled' property of 'Cancel' button equals 'True'
            Assert.AreEqual(this.Click_Cancel_DebugInput_WindowParams.CancelButtonEnabled, cancelButton.Enabled, "CancelButton is not enabled after clicking RunDebug from Menu.");

            // Click 'Cancel' button
            Mouse.Click(cancelButton, new Point(26, 13));
        }
        
        /// <summary>
        /// Click_Clear_Toolbox_Filter_Clear_Button
        /// </summary>
        [When(@"I Click Clear Toolbox Filter Clear Button")]
        public void Click_Clear_Toolbox_Filter_Clear_Button()
        {
            #region Variable Declarations
            WpfButton clearFilterButton = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox.ClearFilterButton;
            #endregion

            // Click 'ClearSearchButton' button
            Mouse.Click(clearFilterButton, new Point(8, 7));
        }
        
        /// <summary>
        /// Click_Close_DB_Source_Wizard_Tab_Button
        /// </summary>
        [When(@"I Click Close DB Source Wizard Tab Button")]
        public void Click_Close_DB_Source_Wizard_Tab_Button()
        {
            #region Variable Declarations
            WpfButton closeButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DBSourceWizardTab.CloseButton;
            #endregion

            // Click '?' button
            Mouse.Click(closeButton, new Point(13, 4));
        }
        
        /// <summary>
        /// Click_Close_Dependecy_Tab
        /// </summary>
        [When(@"I Click Close Dependecy Tab")]
        public void Click_Close_Dependecy_Tab()
        {
            #region Variable Declarations
            WpfButton closeButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DependencyGraphTab.CloseButton;
            #endregion

            // Click '?' button
            Mouse.Click(closeButton, new Point(13, 10));
        }
        
        /// <summary>
        /// Click_Close_Deploy_Tab_Button - Use 'Click_Close_Deploy_Tab_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Close Deploy Tab Button")]
        public void Click_Close_Deploy_Tab_Button()
        {
            #region Variable Declarations
            WpfButton tabCloseButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab.TabCloseButton;
            #endregion

            // Verify that the 'Exists' property of '?' button equals 'True'
            Assert.AreEqual(this.Click_Close_Deploy_Tab_ButtonParams.TabCloseButtonExists, tabCloseButton.Exists, "Settings close tab button does not exist.");

            // Click '?' button
            Mouse.Click(tabCloseButton, new Point(16, 6));
        }
        
        /// <summary>
        /// Click_Close_DotNetDll_Tab
        /// </summary>
        [When(@"I Click Close DotNetDll Tab")]
        public void Click_Close_DotNetDll_Tab()
        {
            #region Variable Declarations
            WpfButton closePlugInSourceTabButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DotNetDllPlugInSource.ClosePlugInSourceTabButton;
            #endregion

            // Click '?' button
            Mouse.Click(closePlugInSourceTabButton, new Point(13, 4));
        }
        
        /// <summary>
        /// Click_Close_EmailSource_Tab
        /// </summary>
        [When(@"I Click Close EmailSource Tab")]
        public void Click_Close_EmailSource_Tab()
        {
            #region Variable Declarations
            WpfButton emailSourceTabCloseButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.EmailSourceTabPage.EmailSourceTabCloseButton;
            #endregion

            // Click '?' button
            Mouse.Click(emailSourceTabCloseButton, new Point(13, 10));
        }
        
        /// <summary>
        /// Click_Close_FullScreen
        /// </summary>
        [When(@"I Click Close FullScreen")]
        public void Click_Close_FullScreen()
        {
            #region Variable Declarations
            WpfHyperlink exitFullScreenF11Hyperlink = this.MainStudioWindow.ExitFullScreenF11Text.ExitFullScreenF11Hyperlink;
            #endregion

            // Click 'Exit Full Screen (F11)' link
            Mouse.Click(exitFullScreenF11Hyperlink, new Point(64, 5));
        }
        
        /// <summary>
        /// Click_Close_Plugin_Source_Wizard_Tab_Button
        /// </summary>
        [When(@"I Click Close Plugin Source Wizard Tab Button")]
        public void Click_Close_Plugin_Source_Wizard_Tab_Button()
        {
            #region Variable Declarations
            WpfButton closeButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.PluginSourceWizardTab.CloseButton;
            #endregion

            // Click '?' button
            Mouse.Click(closeButton, new Point(13, 4));
        }
        
        /// <summary>
        /// Click_Close_Server_Source_Wizard_Tab_Button
        /// </summary>
        [When(@"I Click Close Server Source Wizard Tab Button")]
        public void Click_Close_Server_Source_Wizard_Tab_Button()
        {
            #region Variable Declarations
            WpfButton tabCloseButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.ServerSourceWizardTab.TabCloseButton;
            #endregion

            // Click '?' button
            Mouse.Click(tabCloseButton, new Point(5, 5));
        }
        
        /// <summary>
        /// Click_Close_Settings_Tab_Button - Use 'Click_Close_Settings_Tab_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Close Settings Tab Button")]
        public void Click_Close_Settings_Tab_Button()
        {
            #region Variable Declarations
            WpfButton closeButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.CloseButton;
            #endregion

            // Verify that the 'Exists' property of '?' button equals 'True'
            Assert.AreEqual(this.Click_Close_Settings_Tab_ButtonParams.CloseButtonExists, closeButton.Exists, "Settings close tab button does not exist.");

            // Click '?' button
            Mouse.Click(closeButton, new Point(16, 6));
        }
        
        /// <summary>
        /// Click_Close_SharepointSource_Tab_Button
        /// </summary>
        [When(@"I Click Close SharepointSource Tab Button")]
        public void Click_Close_SharepointSource_Tab_Button()
        {
            #region Variable Declarations
            WpfButton sharepointSourceTabCloseButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SharepointServerSourceTab.SharepointSourceTabCloseButton;
            #endregion

            // Click '?' button
            Mouse.Click(sharepointSourceTabCloseButton, new Point(13, 7));
        }
        
        /// <summary>
        /// Click_Close_Studio_TopRibbon_Button
        /// </summary>
        [When(@"I Click Close Studio TopRibbon Button")]
        public void Click_Close_Studio_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton closeStudioButton = this.MainStudioWindow.CloseStudioButton;
            #endregion

            // Click '?' button
            Mouse.Click(closeStudioButton, new Point(23, 1));
        }
        
        /// <summary>
        /// Click_Close_Tab_Context_Menu_Button
        /// </summary>
        [When(@"I Click Close Tab Context Menu Button")]
        public void Click_Close_Tab_Context_Menu_Button()
        {
            #region Variable Declarations
            WpfMenuItem close = this.MainStudioWindow.TabContextMenu.Close;
            #endregion

            // Click 'Close' menu item
            Mouse.Click(close, new Point(27, 13));
        }
        
        /// <summary>
        /// Click_Close_Tests_Tab
        /// </summary>
        [When(@"I Click Close Tests Tab")]
        public void Click_Close_Tests_Tab()
        {
            #region Variable Declarations
            WpfButton closeTestTabButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.TestsTabPage.CloseTestTabButton;
            #endregion

            // Click '?' button
            Mouse.Click(closeTestTabButton, new Point(11, 5));
        }
        
        /// <summary>
        /// Click_Close_Web_Source_Wizard_Tab_Button
        /// </summary>
        [When(@"I Click Close Web Source Wizard Tab Button")]
        public void Click_Close_Web_Source_Wizard_Tab_Button()
        {
            #region Variable Declarations
            WpfButton closeButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WebSourceWizardTab.CloseButton;
            #endregion

            // Click '?' button
            Mouse.Click(closeButton, new Point(9, 6));
        }
        
        /// <summary>
        /// Click_Close_Workflow_Tab_Button - Use 'Click_Close_Workflow_Tab_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Close Workflow Tab Button")]
        public void Click_Close_Workflow_Tab_Button()
        {
            #region Variable Declarations
            WpfButton closeButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.CloseButton;
            #endregion

            // Verify that the 'Exists' property of 'closeBtn' custom control equals 'True'
            Assert.AreEqual(this.Click_Close_Workflow_Tab_ButtonParams.CloseButtonExists, closeButton.Exists, "Close tab button does not exist");

            // Click 'closeBtn' custom control
            Mouse.Click(closeButton, new Point(5, 5));
        }
        
        /// <summary>
        /// Click_CloseAllButThis_Tab_Context_Menu_Button
        /// </summary>
        [When(@"I Click CloseAllButThis Tab Context Menu Button")]
        public void Click_CloseAllButThis_Tab_Context_Menu_Button()
        {
            #region Variable Declarations
            WpfMenuItem uICloseAllButThisMenuItem = this.MainStudioWindow.TabContextMenu.UICloseAllButThisMenuItem;
            #endregion

            // Click 'Close All But This' menu item
            Mouse.Click(uICloseAllButThisMenuItem, new Point(44, 12));
        }
        
        /// <summary>
        /// Click_ConfigureSetting_From_Menu - Use 'Click_ConfigureSetting_From_MenuParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click ConfigureSetting From Menu")]
        public void Click_ConfigureSetting_From_Menu()
        {
            #region Variable Declarations
            WpfButton configureSettingsButton = this.MainStudioWindow.SideMenuBar.ConfigureSettingsButton;
            WpfTabPage loggingTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.LoggingTab;
            WpfText sECURITY = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SECURITY;
            WpfTable serverPermissions = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ServerPermissions;
            WpfPane warewolfAdminROW = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ServerPermissions.WarewolfAdminROW;
            WpfButton deleteButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ServerPermissions.WarewolfAdminROW.DeleteCell.DeleteButton;
            WpfCheckBox deployToCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ServerPermissions.WarewolfAdminROW.DeployToCell.DeployToCheckBox;
            WpfCheckBox deployFromCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ServerPermissions.WarewolfAdminROW.DeployFromCell.DeployFromCheckBox;
            WpfCheckBox administratorCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ServerPermissions.WarewolfAdminROW.AdministratorCell.AdministratorCheckBox;
            WpfCheckBox executeCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ServerPermissions.WarewolfAdminROW.ExecuteCell.ExecuteCheckBox;
            WpfCheckBox viewCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ServerPermissions.WarewolfAdminROW.ViewCell.ViewCheckBox;
            WpfCheckBox contributeCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ServerPermissions.WarewolfAdminROW.ContributeCell.ContributeCheckBox;
            WpfPane publicROW = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ServerPermissions.PublicROW;
            #endregion

            // Click 'Configure settings' button
            Mouse.Click(configureSettingsButton, new Point(7, 13));

            // Verify that the 'Exists' property of 'System.Windows.Controls.TabItem Header: Content:' tab equals 'True'
            Assert.AreEqual(this.Click_ConfigureSetting_From_MenuParams.LoggingTabExists, loggingTab.Exists, "Logging tab does not exist after the Configure/Setting Menu button is clicked");

            // Verify that the 'Enabled' property of 'System.Windows.Controls.TabItem Header: Content:' tab equals 'True'
            Assert.AreEqual(this.Click_ConfigureSetting_From_MenuParams.LoggingTabEnabled, loggingTab.Enabled, "Logging tab is disabled after the Configure/Setting Menu button is clicked");

            // Verify that the 'Name' property of 'SECURITY' label equals 'SECURITY'
            Assert.AreEqual(this.Click_ConfigureSetting_From_MenuParams.SECURITYName, sECURITY.Name, "Current selected tab page is not Security after Configure/Setting Menu button is " +
                    "clicked");

            // Verify that the 'Exists' property of 'ServerPermissionsDataGrid' table equals 'True'
            Assert.AreEqual(this.Click_ConfigureSetting_From_MenuParams.ServerPermissionsExists, serverPermissions.Exists, "Current selected tab page is not Security after Configure/Setting Menu button is " +
                    "clicked");

            // Verify that the 'Exists' property of '0' pane equals 'True'
            Assert.AreEqual(this.Click_ConfigureSetting_From_MenuParams.WarewolfAdminROWExists, warewolfAdminROW.Exists, "Warewolf Administrators row does not exist");

            // Verify that the 'Exists' property of 'UI_AddRemovebtn_AutoID' button equals 'True'
            Assert.AreEqual(this.Click_ConfigureSetting_From_MenuParams.DeleteButtonExists, deleteButton.Exists, "DeleteButton does not exist");

            // Verify that the 'Checked' property of 'UI_Warewolf Administrators_DeployToPermissionCheckBox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Click_ConfigureSetting_From_MenuParams.DeployToCheckBoxChecked, deployToCheckBox.Checked, "DeployTo checkbox is Unchecked");

            // Verify that the 'Checked' property of 'UI_Warewolf Administrators_DeployFromPermissionCheckBox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Click_ConfigureSetting_From_MenuParams.DeployFromCheckBoxChecked, deployFromCheckBox.Checked, "DeployFrom checkbox is Unchecked");

            // Verify that the 'Checked' property of 'UI_Warewolf Administrators_AdministratorPermissionCheck...' check box equals 'True'
            Assert.AreEqual(this.Click_ConfigureSetting_From_MenuParams.AdministratorCheckBoxChecked, administratorCheckBox.Checked, "Administrator checkbox is Unchecked");

            // Verify that the 'Checked' property of 'UI_Warewolf Administrators_ExecutePermissionCheck...' check box equals 'True'
            Assert.AreEqual(this.Click_ConfigureSetting_From_MenuParams.ExecuteCheckBoxChecked, executeCheckBox.Checked, "Execute checkbox is Unchecked");

            // Verify that the 'Checked' property of 'UI_Warewolf Administrators_ViewPermissionCheck...' check box equals 'True'
            Assert.AreEqual(this.Click_ConfigureSetting_From_MenuParams.ViewCheckBoxChecked, viewCheckBox.Checked, "View checkbox is Unchecked");

            // Verify that the 'Checked' property of 'UI_Warewolf Administrators_ContributePermissionCheck...' check box equals 'True'
            Assert.AreEqual(this.Click_ConfigureSetting_From_MenuParams.ContributeCheckBoxChecked, contributeCheckBox.Checked, "Contribute checkbox is Unchecked");

            // Verify that the 'Exists' property of '1' pane equals 'True'
            Assert.AreEqual(this.Click_ConfigureSetting_From_MenuParams.PublicROWExists, publicROW.Exists, "Public row does not exist");
        }
        
        /// <summary>
        /// Click_Connect_Control_InExplorer
        /// </summary>
        [When(@"I Click Connect Control InExplorer")]
        public void Click_Connect_Control_InExplorer()
        {
            #region Variable Declarations
            WpfButton serverListComboBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ConnectControl.ServerComboBox.ServerListComboBox;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(serverListComboBox, new Point(217, 8));
        }
        
        /// <summary>
        /// Click_Copy_Done_Button
        /// </summary>
        [When(@"I Click Copy Done Button")]
        public void Click_Copy_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_Create_Done_Button
        /// </summary>
        [When(@"I Click Create Done Button")]
        public void Click_Create_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_Debug_Output_Assign_Cell - Use 'Click_Debug_Output_Assign_CellParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Debug Output Assign Cell")]
        public void Click_Debug_Output_Assign_Cell()
        {
            #region Variable Declarations
            WpfText variableTextbox = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.Step1.VariableTextbox;
            WpfButton assign1Button = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.Step1.Assign1Button;
            WpfCustom multiAssign = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign;
            #endregion

            // Verify that the 'DisplayText' property of '[[SomeVariable]]' label equals '[[SomeVariable]]'
            Assert.AreEqual(this.Click_Debug_Output_Assign_CellParams.VariableTextboxDisplayText, variableTextbox.DisplayText, "Wrong variable name in debug output");

            // Click 'Assign (1)' button
            Mouse.Click(assign1Button, new Point(21, 9));

            // Verify that the 'ItemStatus' property of 'DsfMultiAssignActivity' custom control equals 'IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid '
            Assert.AreEqual(this.Click_Debug_Output_Assign_CellParams.MultiAssignItemStatus, multiAssign.ItemStatus, "Multiassign small view is not selected.");
        }
        
        /// <summary>
        /// Click_Debug_Output_BaseConvert_Cell - Use 'Click_Debug_Output_BaseConvert_CellParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Debug Output BaseConvert Cell")]
        public void Click_Debug_Output_BaseConvert_Cell()
        {
            #region Variable Declarations
            WpfButton baseConversion1Button = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.Step1.BaseConversion1Button;
            WpfCustom baseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert;
            #endregion

            // Click 'Base Conversion (1)' button
            Mouse.Click(baseConversion1Button, new Point(33, 7));

            // Verify that the 'ItemStatus' property of 'DsfBaseConvertActivity' custom control equals 'IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid '
            Assert.AreEqual(this.Click_Debug_Output_BaseConvert_CellParams.BaseConvertItemStatus, baseConvert.ItemStatus, "Base conversion small view is not selected.");
        }
        
        /// <summary>
        /// Click_Debug_Output_Calculate_Cell - Use 'Click_Debug_Output_Calculate_CellParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Debug Output Calculate Cell")]
        public void Click_Debug_Output_Calculate_Cell()
        {
            #region Variable Declarations
            WpfButton calculateButton = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.Step1.CalculateButton;
            WpfCustom calculate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate;
            #endregion

            // Click 'Calculate' button
            Mouse.Click(calculateButton, new Point(24, 10));

            // Verify that the 'ItemStatus' property of 'DsfCalculateActivity' custom control equals 'IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid '
            Assert.AreEqual(this.Click_Debug_Output_Calculate_CellParams.CalculateItemStatus, calculate.ItemStatus, "Calculate tool small view is not selected.");
        }
        
        /// <summary>
        /// Click_Debug_Output_Workflow1_Name - Use 'Click_Debug_Output_Workflow1_NameParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Debug Output Workflow1 Name")]
        public void Click_Debug_Output_Workflow1_Name()
        {
            #region Variable Declarations
            WpfButton workflow1Button = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.ServiceTreeItem.Workflow1Button;
            WpfText workflow1ciremoteText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.Workflow1ciremoteText;
            #endregion

            // Click 'workflow1' button
            Mouse.Click(workflow1Button, new Point(24, 8));

            // Verify that the 'DisplayText' property of 'workflow1 - ci-remote' label equals 'workflow1 - ci-remote'
            Assert.AreEqual(this.Click_Debug_Output_Workflow1_NameParams.Workflow1ciremoteTextDisplayText, workflow1ciremoteText.DisplayText, "Workflow1 remote workflow tab is not open.");
        }
        
        /// <summary>
        /// Click_DebugInput_Cancel_Button
        /// </summary>
        [When(@"I Click DebugInput Cancel Button")]
        public void Click_DebugInput_Cancel_Button()
        {
            #region Variable Declarations
            WpfButton cancelButton = this.MainStudioWindow.DebugInputDialog.CancelButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(cancelButton, new Point(34, 10));
        }
        
        /// <summary>
        /// Click_DebugInput_Debug_Button - Use 'Click_DebugInput_Debug_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click DebugInput Debug Button")]
        public void Click_DebugInput_Debug_Button()
        {
            #region Variable Declarations
            WpfButton debugF6Button = this.MainStudioWindow.DebugInputDialog.DebugF6Button;
            WpfCustom debugOutput = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput;
            WpfButton settingsButton = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.SettingsButton;
            WpfButton expandCollapseButton = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.ExpandCollapseButton;
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.SearchTextBox;
            WpfTree debugOutputTree = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree;
            #endregion

            // Verify that the 'Enabled' property of 'Debug (F6)' button equals 'True'
            Assert.AreEqual(this.Click_DebugInput_Debug_ButtonParams.DebugF6ButtonEnabled, debugF6Button.Enabled, "DebugF6Button is not enabled after clicking RunDebug from Menu.");

            // Click 'Debug (F6)' button
            Mouse.Click(debugF6Button, new Point(34, 10));

            // Verify that the 'Exists' property of 'OUTPUT' custom control equals 'True'
            Assert.AreEqual(this.Click_DebugInput_Debug_ButtonParams.DebugOutputExists, debugOutput.Exists, "Debug output does not exist");

            // Verify that the 'Exists' property of '?' button equals 'True'
            Assert.AreEqual(this.Click_DebugInput_Debug_ButtonParams.SettingsButtonExists, settingsButton.Exists, "Debug output settings button does not exist");

            // Verify that the 'Exists' property of '+' button equals 'True'
            Assert.AreEqual(this.Click_DebugInput_Debug_ButtonParams.ExpandCollapseButtonExists, expandCollapseButton.Exists, "Debug output expand collapse button does not exist");

            // Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
            Assert.AreEqual(this.Click_DebugInput_Debug_ButtonParams.SearchTextBoxExists, searchTextBox.Exists, "Debug output filter textbox does not exist");

            // Verify that the 'Exists' property of 'DebugOutputTree' tree equals 'True'
            Assert.AreEqual(this.Click_DebugInput_Debug_ButtonParams.DebugOutputTreeExists, debugOutputTree.Exists, "Debug output results tree does not exist");

            // Verify that the 'Exists' property of '?' button equals 'True'
            Assert.AreEqual(this.Click_DebugInput_Debug_ButtonParams.SettingsButtonExists1, settingsButton.Exists, "Debug output settings button does not exist");
        }
        
        /// <summary>
        /// Click_DebugInput_ViewInBrowser_Button - Use 'Click_DebugInput_ViewInBrowser_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click DebugInput ViewInBrowser Button")]
        public void Click_DebugInput_ViewInBrowser_Button()
        {
            #region Variable Declarations
            WpfButton viewInBrowserF7Button = this.MainStudioWindow.DebugInputDialog.ViewInBrowserF7Button;
            #endregion

            // Verify that the 'Enabled' property of 'View In Browser (F7)' button equals 'True'
            Assert.AreEqual(this.Click_DebugInput_ViewInBrowser_ButtonParams.ViewInBrowserF7ButtonEnabled, viewInBrowserF7Button.Enabled, "ViewInBrowserF7Button is not enabled after clicking RunDebug from Menu.");

            // Click 'View In Browser (F7)' button
            Mouse.Click(viewInBrowserF7Button, new Point(82, 14));
        }
        
        /// <summary>
        /// Click_Decision_Dialog_Cancel_Button
        /// </summary>
        [When(@"I Click Decision Dialog Cancel Button")]
        public void Click_Decision_Dialog_Cancel_Button()
        {
            #region Variable Declarations
            WpfButton cancelButton = this.DecisionOrSwitchDialog.CancelButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(cancelButton, new Point(10, 14));
        }
        
        /// <summary>
        /// Click_Decision_Dialog_Done_Button - Use 'Click_Decision_Dialog_Done_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Decision Dialog Done Button")]
        public void Click_Decision_Dialog_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.DecisionOrSwitchDialog.DoneButton;
            WpfCustom decision = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Decision;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(10, 14));

            // Verify that the 'Exists' property of 'FlowDecision' custom control equals 'True'
            Assert.AreEqual(this.Click_Decision_Dialog_Done_ButtonParams.DecisionExists, decision.Exists, "Decision on the design surface does not exist");

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Click_Decision_Dialog_Done_ButtonParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Click_Delete_Done_Button
        /// </summary>
        [When(@"I Click Delete Done Button")]
        public void Click_Delete_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathDelete.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_DeleteWeb_Generate_Outputs - Use 'Click_DeleteWeb_Generate_OutputsParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click DeleteWeb Generate Outputs")]
        public void Click_DeleteWeb_Generate_Outputs()
        {
            #region Variable Declarations
            WpfButton generateOutputsButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebDelete.LargeView.GenerateOutputsButton;
            WpfButton pasteButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebDelete.LargeView.PasteButton;
            WpfButton testButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebDelete.LargeView.TestButton;
            #endregion

            // Click 'Generate Outputs' button
            Mouse.Click(generateOutputsButton, new Point(85, 10));

            // Verify that the 'Exists' property of '?' button equals 'True'
            Assert.AreEqual(this.Click_DeleteWeb_Generate_OutputsParams.PasteButtonExists, pasteButton.Exists, "Paste button does not exist after clicking generate outputs.");

            // Verify that the 'Exists' property of 'Test' button equals 'True'
            Assert.AreEqual(this.Click_DeleteWeb_Generate_OutputsParams.TestButtonExists, testButton.Exists, "Test button does not exist after clicking generate outputs.");
        }
        
        /// <summary>
        /// Click_Deploy_Tab_Destination_Server_Combobox - Use 'Click_Deploy_Tab_Destination_Server_ComboboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Deploy Tab Destination Server Combobox")]
        public void Click_Deploy_Tab_Destination_Server_Combobox()
        {
            #region Variable Declarations
            WpfButton toggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab.WorkSurfaceContext.DestinationServerConectControl.Combobox.ToggleButton;
            WpfCustom comboboxListItemAsNewRemoteServer = this.MainStudioWindow.ComboboxListItemAsNewRemoteServer;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleButton, new Point(230, 9));

            // Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
            Assert.AreEqual(this.Click_Deploy_Tab_Destination_Server_ComboboxParams.ComboboxListItemAsNewRemoteServerExists, comboboxListItemAsNewRemoteServer.Exists, "New Remote Server... option does not exist in Destination server combobox.");
        }
        
        /// <summary>
        /// Click_Deploy_Tab_Destination_Server_Connect_Button
        /// </summary>
        [When(@"I Click Deploy Tab Destination Server Connect Button")]
        public void Click_Deploy_Tab_Destination_Server_Connect_Button()
        {
            #region Variable Declarations
            WpfButton connectDestinationButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab.WorkSurfaceContext.DestinationServerConectControl.ConnectDestinationButton;
            #endregion

            // Click 'UI_DestinationServerConnectbtn_AutoID' button
            Mouse.Click(connectDestinationButton, new Point(13, 12));
        }
        
        /// <summary>
        /// Click_Deploy_Tab_Destination_Server_New_Remote_Server_Item
        /// </summary>
        [When(@"I Click Deploy Tab Destination Server New Remote Server Item")]
        public void Click_Deploy_Tab_Destination_Server_New_Remote_Server_Item()
        {
            #region Variable Declarations
            WpfCustom comboboxListItemAsNewRemoteServer = this.MainStudioWindow.ComboboxListItemAsNewRemoteServer;
            #endregion

            // Click 'New Remote Server...' custom control
            Mouse.Click(comboboxListItemAsNewRemoteServer, new Point(223, 10));
        }
        
        /// <summary>
        /// Click_Deploy_Tab_Source_Server_Combobox - Use 'Click_Deploy_Tab_Source_Server_ComboboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Deploy Tab Source Server Combobox")]
        public void Click_Deploy_Tab_Source_Server_Combobox()
        {
            #region Variable Declarations
            WpfButton toggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab.WorkSurfaceContext.SourceServerConectControl.Combobox.ToggleButton;
            WpfCustom comboboxListItemAsNewRemoteServer = this.MainStudioWindow.ComboboxListItemAsNewRemoteServer;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleButton, new Point(230, 9));

            // Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
            Assert.AreEqual(this.Click_Deploy_Tab_Source_Server_ComboboxParams.ComboboxListItemAsNewRemoteServerExists, comboboxListItemAsNewRemoteServer.Exists, "New Remote Server... option does not exist in Source server combobox.");
        }
        
        /// <summary>
        /// Click_Deploy_Tab_Source_Server_Connect_Button
        /// </summary>
        [When(@"I Click Deploy Tab Source Server Connect Button")]
        public void Click_Deploy_Tab_Source_Server_Connect_Button()
        {
            #region Variable Declarations
            WpfButton connectSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab.WorkSurfaceContext.SourceConnectControl.ConnectSourceButton;
            #endregion

            // Click 'UI_SourceConnectServerbtn_AutoID' button
            Mouse.Click(connectSourceButton, new Point(13, 8));
        }
        
        /// <summary>
        /// Click_Deploy_Tab_WarewolfStore_Item
        /// </summary>
        [When(@"I Click Deploy Tab WarewolfStore Item")]
        public void Click_Deploy_Tab_WarewolfStore_Item()
        {
            #region Variable Declarations
            WpfCustom comboboxListItemAsWarewolfStore = this.MainStudioWindow.ComboboxListItemAsWarewolfStore;
            #endregion

            // Click 'WarewolfStore' custom control
            Mouse.Click(comboboxListItemAsWarewolfStore, new Point(214, 9));
        }
        
        /// <summary>
        /// Click_DotNet_DLL_Large_View_Done_Button - Use 'Click_DotNet_DLL_Large_View_Done_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click DotNet DLL Large View Done Button")]
        public void Click_DotNet_DLL_Large_View_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.DoneButton;
            WpfCustom smallView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.SmallView;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(33, 11));

            // Verify that the 'Exists' property of 'SmallViewContent' custom control equals 'True'
            Assert.AreEqual(this.Click_DotNet_DLL_Large_View_Done_ButtonParams.SmallViewExists, smallView.Exists, "DotNet DLL small view does not exist after clicking done on large view.");
        }
        
        /// <summary>
        /// Click_DotNet_DLL_Large_View_Test_Inputs_Button
        /// </summary>
        [When(@"I Click DotNet DLL Large View Test Inputs Button")]
        public void Click_DotNet_DLL_Large_View_Test_Inputs_Button()
        {
            #region Variable Declarations
            WpfButton testButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.TestButton;
            #endregion

            // Click 'Test' button
            Mouse.Click(testButton, new Point(21, 11));
        }
        
        /// <summary>
        /// Click_Duplicate_From_Duplicate_Dialog - Use 'Click_Duplicate_From_Duplicate_DialogParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Duplicate From Duplicate Dialog")]
        public void Click_Duplicate_From_Duplicate_Dialog()
        {
            #region Variable Declarations
            WpfButton duplicateButton = this.SaveDialogWindow.DuplicateButton;
            WpfWindow saveDialogWindow = this.SaveDialogWindow;
            #endregion

            // Verify that the 'Exists' property of 'Duplicate' button equals 'True'
            Assert.AreEqual(this.Click_Duplicate_From_Duplicate_DialogParams.DuplicateButtonExists, duplicateButton.Exists, "Duplicate button does not exist");

            // Click 'Duplicate' button
            Mouse.Click(duplicateButton, new Point(26, 10));

            // Verify that the 'Exists' property of 'SaveDialogView' window equals 'True'
            Assert.AreEqual(this.Click_Duplicate_From_Duplicate_DialogParams.SaveDialogWindowExists, saveDialogWindow.Exists, "Save Dialog does not exist after clicking Duplicate button");
        }
        
        /// <summary>
        /// Click_EditSharepointSource_Button
        /// </summary>
        [When(@"I Click EditSharepointSource Button")]
        public void Click_EditSharepointSource_Button()
        {
            #region Variable Declarations
            WpfButton editSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreateListItem.SmallView.EditSourceButton;
            #endregion

            // Click '...' button
            Mouse.Click(editSourceButton, new Point(98, 12));
        }
        
        /// <summary>
        /// Click_EditSharepointSource_Button_From_SharePointUpdate
        /// </summary>
        [When(@"I Click EditSharepointSource Button From SharePointUpdate")]
        public void Click_EditSharepointSource_Button_From_SharePointUpdate()
        {
            #region Variable Declarations
            WpfButton editSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUpdate.SmallView.EditSourceButton;
            #endregion

            // Click '...' button
            Mouse.Click(editSourceButton, new Point(98, 12));
        }
        
        /// <summary>
        /// Click_EditSharepointSource_Button_FromSharePointDelete
        /// </summary>
        [When(@"I Click EditSharepointSource Button FromSharePointDelete")]
        public void Click_EditSharepointSource_Button_FromSharePointDelete()
        {
            #region Variable Declarations
            WpfButton editSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointDeleteFile.SmallView.EditSourceButton;
            #endregion

            // Click '...' button
            Mouse.Click(editSourceButton, new Point(98, 12));
        }
        
        /// <summary>
        /// Click_EditSharepointSource_Button_FromSharePointRead
        /// </summary>
        [When(@"I Click EditSharepointSource Button FromSharePointRead")]
        public void Click_EditSharepointSource_Button_FromSharePointRead()
        {
            #region Variable Declarations
            WpfButton editSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead.SmallView.EditSourceButton;
            #endregion

            // Click '...' button
            Mouse.Click(editSourceButton, new Point(98, 12));
        }
        
        /// <summary>
        /// Click_EmailSource_TestConnection_Button - Use 'Click_EmailSource_TestConnection_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click EmailSource TestConnection Button")]
        public void Click_EmailSource_TestConnection_Button()
        {
            #region Variable Declarations
            WpfButton testConnectionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.EmailSourceTabPage.SendTestModelsCustom.TestConnectionButton;
            WpfText passedText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.EmailSourceTabPage.SendTestModelsCustom.PassedText;
            #endregion

            // Click 'Test Connection' button
            Mouse.Click(testConnectionButton, new Point(58, 16));

            // Verify that the 'Exists' property of 'Passed' label equals 'True'
            Assert.AreEqual(this.Click_EmailSource_TestConnection_ButtonParams.PassedTextExists, passedText.Exists, "Connection test Failed");
        }
        
        /// <summary>
        /// Click_ExpandAndStepIn_NestedWorkflow - Use 'Click_ExpandAndStepIn_NestedWorkflowParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click ExpandAndStepIn NestedWorkflow")]
        public void Click_ExpandAndStepIn_NestedWorkflow()
        {
            #region Variable Declarations
            WpfTreeItem subWorkflow = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.SubWorkflow;
            #endregion

            // Expand 'Hello World' tree item
            subWorkflow.Expanded = this.Click_ExpandAndStepIn_NestedWorkflowParams.SubWorkflowExpanded;
        }
        
        /// <summary>
        /// Click_Explorer_Filter_Clear_Button - Use 'Click_Explorer_Filter_Clear_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Explorer Filter Clear Button")]
        public void Click_Explorer_Filter_Clear_Button()
        {
            #region Variable Declarations
            WpfButton clearFilterButton = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.SearchTextBox.ClearFilterButton;
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.SearchTextBox;
            #endregion

            // Click 'ClearSearchButton' button
            Mouse.Click(clearFilterButton, new Point(6, 8));

            // Verify that the 'Text' property of 'SearchTextBox' text box equals ''
            Assert.AreEqual(this.Click_Explorer_Filter_Clear_ButtonParams.SearchTextBoxText, searchTextBox.Text, "Explorer Filter Textbox text is not blank after clicking the clear button.");
        }
        
        /// <summary>
        /// Click_Explorer_Localhost_First_Item
        /// </summary>
        [When(@"I Click Explorer Localhost First Item")]
        public void Click_Explorer_Localhost_First_Item()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            #endregion

            // Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, new Point(63, 11));
        }
        
        /// <summary>
        /// Click_Explorer_Remote_Server_Dropdown_List
        /// </summary>
        [When(@"I Click Explorer Remote Server Dropdown List")]
        public void Click_Explorer_Remote_Server_Dropdown_List()
        {
            #region Variable Declarations
            WpfButton serverListComboBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ConnectControl.ServerComboBox.ServerListComboBox;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(serverListComboBox, new Point(167, 10));
        }
        
        /// <summary>
        /// Click_Explorer_RemoteServer_Connect_Button - Use 'Click_Explorer_RemoteServer_Connect_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Explorer RemoteServer Connect Button")]
        public void Click_Explorer_RemoteServer_Connect_Button()
        {
            #region Variable Declarations
            WpfButton connectServerButton = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ConnectControl.ConnectServerButton;
            WpfTreeItem firstRemoteServer = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.FirstRemoteServer;
            #endregion

            // Click 'UI_ConnectServerBtn_AutoID' button
            Mouse.Click(connectServerButton, new Point(11, 10));

            // Wait for 2 seconds for user delay between actions; Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
            Playback.Wait(2000);
            Assert.AreEqual(this.Click_Explorer_RemoteServer_Connect_ButtonParams.FirstRemoteServerExists, firstRemoteServer.Exists, "No remote servers in explorer.");
        }
        
        /// <summary>
        /// Click_First_Recordset_Input_Checkbox - Use 'Click_First_Recordset_Input_CheckboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click First Recordset Input Checkbox")]
        public void Click_First_Recordset_Input_Checkbox()
        {
            #region Variable Declarations
            WpfCheckBox inputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.DatalistView.VariableTree.RecordsetTreeItem.TreeItem1.InputCheckbox;
            #endregion

            // Select 'UI_IsInputCheckbox_AutoID' check box
            inputCheckbox.Checked = this.Click_First_Recordset_Input_CheckboxParams.InputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_FormatNumber_Done_Button
        /// </summary>
        [When(@"I Click FormatNumber Done Button")]
        public void Click_FormatNumber_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(36, 11));
        }
        
        /// <summary>
        /// Click_FullScreen_TopRibbon_Button
        /// </summary>
        [When(@"I Click FullScreen TopRibbon Button")]
        public void Click_FullScreen_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton maximizeRestoreStudioButton = this.MainStudioWindow.MaximizeRestoreStudioButton;
            #endregion

            // Click '?' button
            Mouse.Click(maximizeRestoreStudioButton, new Point(12, 9));
        }
        
        /// <summary>
        /// Click_GET_Web_Large_View_Done_Button - Use 'Click_GET_Web_Large_View_Done_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click GET Web Large View Done Button")]
        public void Click_GET_Web_Large_View_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.DoneButton;
            WpfCustom smallView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.SmallView;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(33, 11));

            // Verify that the 'Exists' property of 'SmallViewContent' custom control equals 'True'
            Assert.AreEqual(this.Click_GET_Web_Large_View_Done_ButtonParams.SmallViewExists, smallView.Exists, "Web GET small view does not exist after clicking large view done button.");
        }
        
        /// <summary>
        /// Click_GET_Web_Large_View_Done_Button_With_Invalid_Large_View - Use 'Click_GET_Web_Large_View_Done_Button_With_Invalid_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click GET Web Large View Done Button With Invalid Large View")]
        public void Click_GET_Web_Large_View_Done_Button_With_Invalid_Large_View()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.DoneButton;
            WpfText error1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Error1;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(33, 11));

            // Verify that the 'Exists' property of 'Error1' label equals 'True'
            Assert.AreEqual(this.Click_GET_Web_Large_View_Done_Button_With_Invalid_Large_ViewParams.Error1Exists, error1.Exists, "Error not exist after clicking large view done button on invalid large view.");
        }
        
        /// <summary>
        /// Click_GET_Web_Large_View_Generate_Outputs - Use 'Click_GET_Web_Large_View_Generate_OutputsExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Click GET Web Large View Generate Outputs")]
        public void Click_GET_Web_Large_View_Generate_Outputs()
        {
            #region Variable Declarations
            WpfButton generateOutputsButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.LargeView.GenerateOutputsButton;
            WpfButton testButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.LargeView.TestButton;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.LargeView.DoneButton;
            #endregion

            // Click 'Generate Outputs' button
            Mouse.Click(generateOutputsButton, new Point(7, 7));

            // Wait for 1 seconds for user delay between actions; Verify that the 'Exists' property of 'Test' button equals 'True'
            Playback.Wait(500);
            Assert.AreEqual(this.Click_GET_Web_Large_View_Generate_OutputsExpectedValues.TestButtonExists, testButton.Exists, "Web GET large view generate outputs test button does not exist.");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Click_GET_Web_Large_View_Generate_OutputsExpectedValues.DoneButtonExists, doneButton.Exists, "Web GET tool large view generate inputs done button does not exist.");
        }
        
        /// <summary>
        /// Click_GET_Web_Large_View_Test_Inputs_Button
        /// </summary>
        [When(@"I Click GET Web Large View Test Inputs Button")]
        public void Click_GET_Web_Large_View_Test_Inputs_Button()
        {
            #region Variable Declarations
            WpfButton testButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.LargeView.TestButton;
            #endregion

            // Click 'Test' button
            Mouse.Click(testButton, new Point(21, 11));
        }
        
        /// <summary>
        /// Click_GET_Web_Large_View_Test_Inputs_Done_Button
        /// </summary>
        [When(@"I Click GET Web Large View Test Inputs Done Button")]
        public void Click_GET_Web_Large_View_Test_Inputs_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.LargeView.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_HTTP_Delete_Web_Tool_New_Button - Use 'Click_HTTP_Delete_Web_Tool_New_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click HTTP Delete Web Tool New Button")]
        public void Click_HTTP_Delete_Web_Tool_New_Button()
        {
            #region Variable Declarations
            WpfButton newSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebDelete.LargeView.NewSourceButton;
            WpfTabPage webSourceWizardTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WebSourceWizardTab;
            #endregion

            // Click 'New' button
            Mouse.Click(newSourceButton, new Point(13, 9));

            // Verify that the 'Exists' property of 'Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Inte...' tab equals 'True'
            Assert.AreEqual(this.Click_HTTP_Delete_Web_Tool_New_ButtonParams.WebSourceWizardTabExists, webSourceWizardTab.Exists, "New web source wizard tab is not open after clicking create new web source from d" +
                    "elete tool.");
        }
        
        /// <summary>
        /// Click_HTTP_Post_Web_Tool_New_Button - Use 'Click_HTTP_Post_Web_Tool_New_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click HTTP Post Web Tool New Button")]
        public void Click_HTTP_Post_Web_Tool_New_Button()
        {
            #region Variable Declarations
            WpfButton newSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPost.LargeView.NewSourceButton;
            WpfTabPage webSourceWizardTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WebSourceWizardTab;
            #endregion

            // Click 'New' button
            Mouse.Click(newSourceButton, new Point(17, 11));

            // Verify that the 'Exists' property of 'Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Inte...' tab equals 'True'
            Assert.AreEqual(this.Click_HTTP_Post_Web_Tool_New_ButtonParams.WebSourceWizardTabExists, webSourceWizardTab.Exists, "New web source wizard tab is not open after clicking create new web source from p" +
                    "ost tool on the design surface.");
        }
        
        /// <summary>
        /// Click_Knowledge_Ribbon_Button
        /// </summary>
        [When(@"I Click Knowledge Ribbon Button")]
        public void Click_Knowledge_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton knowledgeBaseButton = this.MainStudioWindow.SideMenuBar.KnowledgeBaseButton;
            #endregion

            // Click 'Knowledge Base' button
            Mouse.Click(knowledgeBaseButton, new Point(4, 8));
        }
        
        /// <summary>
        /// Click_Lock_Ribbon_Button
        /// </summary>
        [When(@"I Click Lock Ribbon Button")]
        public void Click_Lock_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton lockStudioButton = this.MainStudioWindow.LockStudioButton;
            #endregion

            // Click '?' button
            Mouse.Click(lockStudioButton, new Point(14, 5));
        }
        
        /// <summary>
        /// Click_Maximize_Restore_TopRibbon_Button
        /// </summary>
        [When(@"I Click Maximize Restore TopRibbon Button")]
        public void Click_Maximize_Restore_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton maximizeStudioButton = this.MainStudioWindow.MaximizeStudioButton;
            #endregion

            // Click '?' button
            Mouse.Click(maximizeStudioButton, new Point(9, 11));
        }
        
        /// <summary>
        /// Click_Maximize_TopRibbon_Button
        /// </summary>
        [When(@"I Click Maximize TopRibbon Button")]
        public void Click_Maximize_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton maximizeStudioButton = this.MainStudioWindow.MaximizeStudioButton;
            #endregion

            // Click '?' button
            Mouse.Click(maximizeStudioButton, new Point(14, 14));
        }
        
        /// <summary>
        /// Click_MessageBox_No
        /// </summary>
        [When(@"I Click MessageBox No")]
        public void Click_MessageBox_No()
        {
            #region Variable Declarations
            WpfButton noButton = this.MessageBoxWindow.NoButton;
            #endregion

            // Click 'No' button
            Mouse.Click(noButton, new Point(32, 5));
        }
        
        /// <summary>
        /// Click_MessageBox_OK
        /// </summary>
        [When(@"I Click MessageBox OK")]
        public void Click_MessageBox_OK()
        {
            #region Variable Declarations
            WpfButton oKButton = this.MessageBoxWindow.OKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(oKButton, new Point(35, 11));
        }
        
        /// <summary>
        /// Click_MessageBox_Yes - Use 'Click_MessageBox_YesParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click MessageBox Yes")]
        public void Click_MessageBox_Yes()
        {
            #region Variable Declarations
            WpfButton yesButton = this.MessageBoxWindow.YesButton;
            WpfWindow messageBoxWindow = this.MessageBoxWindow;
            #endregion

            // Click 'Yes' button
            Mouse.Click(yesButton, new Point(32, 5));

            // Verify that the 'Exists' property of 'WarewolfMessageBox' window equals 'False'
            Assert.AreEqual(this.Click_MessageBox_YesParams.MessageBoxWindowExists, messageBoxWindow.Exists, "Message box does exist");
        }
        
        /// <summary>
        /// Click_Minimize_TopRibbon_Button
        /// </summary>
        [When(@"I Click Minimize TopRibbon Button")]
        public void Click_Minimize_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton minimizeStudioButton = this.MainStudioWindow.MinimizeStudioButton;
            #endregion

            // Click '?' button
            Mouse.Click(minimizeStudioButton, new Point(6, 14));
        }
        
        /// <summary>
        /// Click_Move_Done_Button
        /// </summary>
        [When(@"I Click Move Done Button")]
        public void Click_Move_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_Nested_Workflow_Name
        /// </summary>
        [When(@"I Click Nested Workflow Name")]
        public void Click_Nested_Workflow_Name()
        {
            #region Variable Declarations
            WpfButton uIHelloWorldButton = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.SubWorkflow.UIHelloWorldTreeItem1.UIHelloWorldButton;
            #endregion

            // Click 'Hello World' button
            Mouse.Click(uIHelloWorldButton, new Point(37, 10));
        }
        
        /// <summary>
        /// Click_New_Database_Source_Ribbon_Button
        /// </summary>
        [When(@"I Click New Database Source Ribbon Button")]
        public void Click_New_Database_Source_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton databaseSourceButton = this.MainStudioWindow.SideMenuBar.DatabaseSourceButton;
            #endregion

            // Click 'Create a new database source' button
            Mouse.Click(databaseSourceButton, new Point(16, 15));
        }
        
        /// <summary>
        /// Click_New_Workflow_Tab
        /// </summary>
        [When(@"I Click New Workflow Tab")]
        public void Click_New_Workflow_Tab()
        {
            #region Variable Declarations
            WpfTabPage workflowTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab;
            #endregion

            // Click 'Dev2.Studio.ViewModels.Workflow.WorkflowDesignerVi...' tab
            Mouse.Click(workflowTab, new Point(63, 18));
        }
        
        /// <summary>
        /// Click_NewPluginSource_Ribbon_Button - Use 'Click_NewPluginSource_Ribbon_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click NewPluginSource Ribbon Button")]
        public void Click_NewPluginSource_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton pluginSourceButton = this.MainStudioWindow.SideMenuBar.PluginSourceButton;
            WpfTree tree = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.PluginSourceWizardTab.WorkSurfaceContext.NewPluginSourceWizard.ScrollViewer.Tree;
            WpfEdit assemblyNameTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.PluginSourceWizardTab.WorkSurfaceContext.AssemblyNameTextbox;
            #endregion

            // Click 'Create a new plugin source' button
            Mouse.Click(pluginSourceButton, new Point(22, 13));

            // Wait for 1 seconds for user delay between actions; Verify that the 'Exists' property of 'ExplorerTree' tree equals 'True'
            Playback.Wait(1000);
            Assert.AreEqual(this.Click_NewPluginSource_Ribbon_ButtonParams.TreeExists, tree.Exists, "Select assembly tree does not exist in new plugin source wizard tab.");

            // Verify that the 'Exists' property of 'AssemblyNameTextBox' text box equals 'True'
            Assert.AreEqual(this.Click_NewPluginSource_Ribbon_ButtonParams.AssemblyNameTextboxExists, assemblyNameTextbox.Exists, "Assembly textbox does not exist in new plugin source wizard tab.");
        }
        
        /// <summary>
        /// Click_NewSource_Button_FromODBC_Tool - Use 'Click_NewSource_Button_FromODBC_ToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click NewSource Button FromODBC Tool")]
        public void Click_NewSource_Button_FromODBC_Tool()
        {
            #region Variable Declarations
            WpfButton newSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ODBCDatabaseActivCustom.LargeViewContentCustom.NewSourceButton;
            WpfTabPage dBSourceWizardTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DBSourceWizardTab;
            #endregion

            // Click 'New' button
            Mouse.Click(newSourceButton, new Point(30, 4));

            // Verify that the 'Exists' property of 'Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Inte...' tab equals 'True'
            Assert.AreEqual(this.Click_NewSource_Button_FromODBC_ToolParams.DBSourceWizardTabExists, dBSourceWizardTab.Exists, "DBSourceWizardTab did not open");
        }
        
        /// <summary>
        /// Click_NewSource_Button_FromOracle_Tool - Use 'Click_NewSource_Button_FromOracle_ToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click NewSource Button FromOracle Tool")]
        public void Click_NewSource_Button_FromOracle_Tool()
        {
            #region Variable Declarations
            WpfButton newSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.OracleDatabaseActCustom.LargeViewContentCustom.NewSourceButton;
            WpfTabPage dBSourceWizardTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DBSourceWizardTab;
            #endregion

            // Click 'New' button
            Mouse.Click(newSourceButton, new Point(30, 4));

            // Verify that the 'Exists' property of 'Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Inte...' tab equals 'True'
            Assert.AreEqual(this.Click_NewSource_Button_FromOracle_ToolParams.DBSourceWizardTabExists, dBSourceWizardTab.Exists, "DBSourceWizardTab did not open");
        }
        
        /// <summary>
        /// Click_NewVersion_button - Use 'Click_NewVersion_buttonExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Click NewVersion button")]
        public void Click_NewVersion_button()
        {
            #region Variable Declarations
            WpfButton newVersionButton = this.MainStudioWindow.SideMenuBar.NewVersionButton;
            #endregion

            // Verify that the 'Exists' property of 'VersionButton' button equals 'True'
            Assert.AreEqual(this.Click_NewVersion_buttonExpectedValues.NewVersionButtonExists, newVersionButton.Exists, "New version available button does not exist");

            // Verify that the 'Enabled' property of 'VersionButton' button equals 'True'
            Assert.AreEqual(this.Click_NewVersion_buttonExpectedValues.NewVersionButtonEnabled, newVersionButton.Enabled, "New version available button is disabled");

            // Click 'VersionButton' button
            Mouse.Click(newVersionButton, new Point(17, 9));
        }
        
        /// <summary>
        /// Click_Output_OnRecordset_InVariableList - Use 'Click_Output_OnRecordset_InVariableListParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Output OnRecordset InVariableList")]
        public void Click_Output_OnRecordset_InVariableList()
        {
            #region Variable Declarations
            WpfCheckBox outputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.DatalistView.VariableTree.RecordsetTreeItem.TreeItem1.OutputCheckbox;
            #endregion

            // Select 'UI_IsOutputCheckbox_AutoID' check box
            outputCheckbox.Checked = this.Click_Output_OnRecordset_InVariableListParams.OutputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_Output_OnVariable_InVariableList - Use 'Click_Output_OnVariable_InVariableListParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Output OnVariable InVariableList")]
        public void Click_Output_OnVariable_InVariableList()
        {
            #region Variable Declarations
            WpfCheckBox outputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.DatalistView.VariableTree.VariableTreeItem.TreeItem1.OutputCheckbox;
            #endregion

            // Select 'UI_IsOutputCheckbox_AutoID' check box
            outputCheckbox.Checked = this.Click_Output_OnVariable_InVariableListParams.OutputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_Pin_Toggle_DebugOutput
        /// </summary>
        [When(@"I Click Pin Toggle DebugOutput")]
        public void Click_Pin_Toggle_DebugOutput()
        {
            #region Variable Declarations
            WpfButton debugOutputUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(debugOutputUnpinBtn, new Point(11, 10));
        }
        
        /// <summary>
        /// Click_Pin_Toggle_Documentor
        /// </summary>
        [When(@"I Click Pin Toggle Documentor")]
        public void Click_Pin_Toggle_Documentor()
        {
            #region Variable Declarations
            WpfButton documentorUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.Help.DocumentorUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(documentorUnpinBtn, new Point(2, 11));
        }
        
        /// <summary>
        /// Click_Pin_Toggle_Explorer
        /// </summary>
        [When(@"I Click Pin Toggle Explorer")]
        public void Click_Pin_Toggle_Explorer()
        {
            #region Variable Declarations
            WpfButton explorerUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(explorerUnpinBtn, new Point(12, 9));
        }
        
        /// <summary>
        /// Click_Pin_Toggle_Toolbox
        /// </summary>
        [When(@"I Click Pin Toggle Toolbox")]
        public void Click_Pin_Toggle_Toolbox()
        {
            #region Variable Declarations
            WpfButton toolUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(toolUnpinBtn, new Point(10, 8));
        }
        
        /// <summary>
        /// Click_Pin_Toggle_VariableList
        /// </summary>
        [When(@"I Click Pin Toggle VariableList")]
        public void Click_Pin_Toggle_VariableList()
        {
            #region Variable Declarations
            WpfButton variableUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariableUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(variableUnpinBtn, new Point(10, 14));
        }
        
        /// <summary>
        /// Click_Position_Button
        /// </summary>
        [When(@"I Click Position Button")]
        public void Click_Position_Button()
        {
            #region Variable Declarations
            WpfMenuItem positionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.FilesMenu.PositionButton;
            #endregion

            // Click 'PART_FilesMenuItem' menu item
            Mouse.Click(positionButton, new Point(8, 7));
        }
        
        /// <summary>
        /// Click_Postgre_Done_Button
        /// </summary>
        [When(@"I Click Postgre Done Button")]
        public void Click_Postgre_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PostgreSqlActivitCustom.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(36, 11));
        }
        
        /// <summary>
        /// Click_Read_Done_Button
        /// </summary>
        [When(@"I Click Read Done Button")]
        public void Click_Read_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_ReadFolder_Done_Button
        /// </summary>
        [When(@"I Click ReadFolder Done Button")]
        public void Click_ReadFolder_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_Rename_Done_Button
        /// </summary>
        [When(@"I Click Rename Done Button")]
        public void Click_Rename_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_Reset_Perfomance_Counter - Use 'Click_Reset_Perfomance_CounterParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Reset Perfomance Counter")]
        public void Click_Reset_Perfomance_Counter()
        {
            #region Variable Declarations
            WpfHyperlink itemHyperlink = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.PerfomanceCounterTab.PerfmonViewContent.ResetCounter.ItemHyperlink;
            WpfWindow messageBoxWindow = this.MessageBoxWindow;
            WpfButton oKButton = this.MessageBoxWindow.OKButton;
            #endregion

            // Click link
            Mouse.Click(itemHyperlink, new Point(49, 9));

            // Verify that the 'Exists' property of 'WarewolfMessageBox' window equals 'True'
            Assert.AreEqual(this.Click_Reset_Perfomance_CounterParams.MessageBoxWindowExists, messageBoxWindow.Exists, "MessageBoxWindow did not show after clicking reset counters");

            // Click 'OK' button
            Mouse.Click(oKButton, new Point(50, 12));
        }
        
        /// <summary>
        /// Click_RunDebug_button - Use 'Click_RunDebug_buttonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click RunDebug button")]
        public void Click_RunDebug_button()
        {
            #region Variable Declarations
            WpfButton runAndDebugButton = this.MainStudioWindow.SideMenuBar.RunAndDebugButton;
            WpfWindow debugInputDialog = this.MainStudioWindow.DebugInputDialog;
            WpfButton cancelButton = this.MainStudioWindow.DebugInputDialog.CancelButton;
            WpfCheckBox rememberDebugInputCheckBox = this.MainStudioWindow.DebugInputDialog.RememberDebugInputCheckBox;
            WpfTabPage inputDataTab = this.MainStudioWindow.DebugInputDialog.TabItemsTabList.InputDataTab;
            WpfTabPage xMLTab = this.MainStudioWindow.DebugInputDialog.TabItemsTabList.XMLTab;
            WpfTabPage jSONTab = this.MainStudioWindow.DebugInputDialog.TabItemsTabList.JSONTab;
            #endregion

            // Click 'Run and debug your workflow service' button
            Mouse.Click(runAndDebugButton, new Point(6, 10));

            // Verify that the 'Exists' property of 'Wpf' window equals 'True'
            Assert.AreEqual(this.Click_RunDebug_buttonParams.DebugInputDialogExists, debugInputDialog.Exists, "RunDebug window does not exist");

            // Verify that the 'Enabled' property of 'Cancel' button equals 'True'
            Assert.AreEqual(this.Click_RunDebug_buttonParams.CancelButtonEnabled, cancelButton.Enabled, "CancelButton is not enabled after clicking RunDebug from Menu.");

            // Verify that the 'Enabled' property of 'Remember Debug Inputs' check box equals 'True'
            Assert.AreEqual(this.Click_RunDebug_buttonParams.RememberDebugInputCheckBoxEnabled, rememberDebugInputCheckBox.Enabled, "RememberDebugInputCheckBox is not enabled after clicking RunDebug from Menu.");

            // Verify that the 'Enabled' property of 'Input Data' tab equals 'True'
            Assert.AreEqual(this.Click_RunDebug_buttonParams.InputDataTabEnabled, inputDataTab.Enabled, "InputDataTab is not enabled after clicking RunDebug from Menu.");

            // Verify that the 'Checked' property of 'Remember Debug Inputs' check box equals 'True'
            Assert.AreEqual(this.Click_RunDebug_buttonParams.RememberDebugInputCheckBoxChecked, rememberDebugInputCheckBox.Checked, "RememberDebugInputCheckBox is not Checked after clicking RunDebug from Menu.");

            // Verify that the 'Exists' property of 'XML' tab equals 'True'
            Assert.AreEqual(this.Click_RunDebug_buttonParams.XMLTabExists, xMLTab.Exists, "XMLTab does not exist after clicking RunDebug from Menu.");

            // Verify that the 'Exists' property of 'JSON' tab equals 'True'
            Assert.AreEqual(this.Click_RunDebug_buttonParams.JSONTabExists, jSONTab.Exists, "JSONTab does not exist after clicking RunDebug from Menu.");
        }
        
        /// <summary>
        /// Click_Save_Ribbon_Button_to_Open_Save_Dialog - Use 'Click_Save_Ribbon_Button_to_Open_Save_DialogParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Save Ribbon Button to Open Save Dialog")]
        public void Click_Save_Ribbon_Button_to_Open_Save_Dialog()
        {
            #region Variable Declarations
            WpfButton saveButton = this.MainStudioWindow.SideMenuBar.SaveButton;
            WpfButton cancelButton = this.SaveDialogWindow.CancelButton;
            WpfText errorLabel = this.SaveDialogWindow.ErrorLabel;
            WpfTree explorerTree = this.SaveDialogWindow.ExplorerView.ExplorerTree;
            WpfCustom explorerView = this.SaveDialogWindow.ExplorerView;
            WpfEdit searchTextBox = this.SaveDialogWindow.ExplorerView.SearchTextBox;
            WpfText nameLabel = this.SaveDialogWindow.NameLabel;
            WpfButton refreshButton = this.SaveDialogWindow.ExplorerView.RefreshButton;
            WpfButton saveButton1 = this.SaveDialogWindow.SaveButton;
            WpfWindow saveDialogWindow = this.SaveDialogWindow;
            WpfEdit serviceNameTextBox = this.SaveDialogWindow.ServiceNameTextBox;
            #endregion

            // Verify that the 'Exists' property of 'Save this tab' button equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.SaveButtonExists, saveButton.Exists, "Save ribbon button does not exist");

            // Click 'Save this tab' button
            Mouse.Click(saveButton, new Point(10, 5));

            // Wait for 2 seconds for user delay between actions; Verify that the 'Exists' property of 'Cancel' button equals 'True'
            Playback.Wait(2000);
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.CancelButtonExists, cancelButton.Exists, "Save dialog cancel button does not exist");

            // Verify that the 'Exists' property of ''Name' cannot be empty.' label equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.ErrorLabelExists, errorLabel.Exists, "Save dialog error label does not exist");

            // Verify that the 'Exists' property of 'ExplorerTree' tree equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.ExplorerTreeExists, explorerTree.Exists, "Save dialog explorer tree does not exist");

            // Verify that the 'Exists' property of 'ExplorerView' custom control equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.ExplorerViewExists, explorerView.Exists, "Save dialog explorer view does not exist");

            // Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.SearchTextBoxExists, searchTextBox.Exists, "Save dialog filter textbox does not exist");

            // Verify that the 'Exists' property of 'Name:' label equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.NameLabelExists, nameLabel.Exists, "Save dialog name label does not exist");

            // Verify that the 'Exists' property of '?' button equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.RefreshButtonExists, refreshButton.Exists, "Save dialog refresh button does not exist");

            // Verify that the 'Exists' property of 'Save' button equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.SaveButtonExists1, saveButton1.Exists, "Save dialog save button does not exist");

            // Verify that the 'Exists' property of 'SaveDialogView' window equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.SaveDialogWindowExists, saveDialogWindow.Exists, "Save dialog window does not exist");

            // Verify that the 'Exists' property of 'ServiceNameTextBox' text box equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.ServiceNameTextBoxExists, serviceNameTextBox.Exists, "Save dialog service name textbox does not exist");

            // Verify that the 'Exists' property of 'SaveDialogView' window equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.SaveDialogWindowExists1, saveDialogWindow.Exists, "Save dialog window does not exist");

            // Verify that the 'Exists' property of 'ServiceNameTextBox' text box equals 'True'
            Assert.AreEqual(this.Click_Save_Ribbon_Button_to_Open_Save_DialogParams.ServiceNameTextBoxExists1, serviceNameTextBox.Exists, "Save dialog service name textbox does not exist");
        }
        
        /// <summary>
        /// Click_SaveDialog_CancelButton
        /// </summary>
        [When(@"I Click SaveDialog CancelButton")]
        public void Click_SaveDialog_CancelButton()
        {
            #region Variable Declarations
            WpfButton cancelButton = this.SaveDialogWindow.CancelButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(cancelButton, new Point(6, 7));
        }
        
        /// <summary>
        /// Click_Scheduler_Create_New_Task_Ribbon_Button - Use 'Click_Scheduler_Create_New_Task_Ribbon_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Scheduler Create New Task Ribbon Button")]
        public void Click_Scheduler_Create_New_Task_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton newTaskButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SchedulerTab.WorkSurfaceContext.SchedulerView.SchedulesList.SchedulerListItem.CreateTaskButton.NewTaskButton;
            WpfText triggerText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SchedulerTab.WorkSurfaceContext.SchedulerView.TriggerText;
            WpfRadioButton enabledRadioButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SchedulerTab.WorkSurfaceContext.SchedulerView.EnabledRadioButton;
            WpfButton resourcePickerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SchedulerTab.WorkSurfaceContext.SchedulerView.ResourcePickerButton;
            WpfButton editTriggerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SchedulerTab.WorkSurfaceContext.SchedulerView.EditTriggerButton;
            #endregion

            // Click first button next to '?' button
            Mouse.Click(newTaskButton, new Point(151, 13));

            // Verify that the 'Exists' property of 'Triggered at' label equals 'True'
            Assert.AreEqual(this.Click_Scheduler_Create_New_Task_Ribbon_ButtonParams.TriggerTextExists, triggerText.Exists, "Scheduler TriggerText does not exist after clicking New Scheduler");

            // Verify that the 'Enabled' property of 'Enabled' radio button equals 'True'
            Assert.AreEqual(this.Click_Scheduler_Create_New_Task_Ribbon_ButtonParams.EnabledRadioButtonEnabled, enabledRadioButton.Enabled, "Scheduler is disabled by default");

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Click_Scheduler_Create_New_Task_Ribbon_ButtonParams.ResourcePickerButtonExists, resourcePickerButton.Exists, "Select WorkFlow button Exists after clicking Scheduler");

            // Verify that the 'Exists' property of '?' button equals 'True'
            Assert.AreEqual(this.Click_Scheduler_Create_New_Task_Ribbon_ButtonParams.EditTriggerButtonExists, editTriggerButton.Exists, "Edit Schedule time buttom exist after clicking scheduler");
        }
        
        /// <summary>
        /// Click_Scheduler_Delete_Task
        /// </summary>
        [When(@"I Click Scheduler Delete Task")]
        public void Click_Scheduler_Delete_Task()
        {
            #region Variable Declarations
            WpfButton deleteTaskButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SchedulerTab.WorkSurfaceContext.SchedulerView.SchedulesList.DeleteTaskButton;
            #endregion

            // Click '...' button
            Mouse.Click(deleteTaskButton, new Point(3, 17));
        }
        
        /// <summary>
        /// Click_Scheduler_Disable_Task_Radio_Button - Use 'Click_Scheduler_Disable_Task_Radio_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Scheduler Disable Task Radio Button")]
        public void Click_Scheduler_Disable_Task_Radio_Button()
        {
            #region Variable Declarations
            WpfRadioButton disabledRadioButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SchedulerTab.WorkSurfaceContext.SchedulerView.DisabledRadioButton;
            #endregion

            // Select 'Disabled' radio button
            disabledRadioButton.Selected = this.Click_Scheduler_Disable_Task_Radio_ButtonParams.DisabledRadioButtonSelected;
        }
        
        /// <summary>
        /// Click_Scheduler_EditTrigger_Button
        /// </summary>
        [When(@"I Click Scheduler EditTrigger Button")]
        public void Click_Scheduler_EditTrigger_Button()
        {
            #region Variable Declarations
            WpfButton editTriggerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SchedulerTab.WorkSurfaceContext.SchedulerView.EditTriggerButton;
            #endregion

            // Click '?' button
            Mouse.Click(editTriggerButton, new Point(10, 9));
        }
        
        /// <summary>
        /// Click_Scheduler_Enable_Task_Radio_Button - Use 'Click_Scheduler_Enable_Task_Radio_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Scheduler Enable Task Radio Button")]
        public void Click_Scheduler_Enable_Task_Radio_Button()
        {
            #region Variable Declarations
            WpfCheckBox statusCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SchedulerTab.WorkSurfaceContext.SchedulerView.SchedulesList.UINameworkflow1ResourcListItem.StatusCheckBox;
            #endregion

            // Select check box
            statusCheckBox.Checked = this.Click_Scheduler_Enable_Task_Radio_ButtonParams.StatusCheckBoxChecked;
        }
        
        /// <summary>
        /// Click_Scheduler_ResourcePicker_Button
        /// </summary>
        [When(@"I Click Scheduler ResourcePicker Button")]
        public void Click_Scheduler_ResourcePicker_Button()
        {
            #region Variable Declarations
            WpfButton resourcePickerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SchedulerTab.WorkSurfaceContext.SchedulerView.ResourcePickerButton;
            #endregion

            // Click '...' button
            Mouse.Click(resourcePickerButton, new Point(14, 13));
        }
        
        /// <summary>
        /// Click_Scheduler_RunTask - Use 'Click_Scheduler_RunTaskParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Scheduler RunTask")]
        public void Click_Scheduler_RunTask()
        {
            #region Variable Declarations
            WpfCheckBox runTaskCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SchedulerTab.WorkSurfaceContext.SchedulerView.RunTaskCheckBox;
            #endregion

            // Select 'Run task as soon as possible after a scheduled sta...' check box
            runTaskCheckBox.Checked = this.Click_Scheduler_RunTaskParams.RunTaskCheckBoxChecked;
        }
        
        /// <summary>
        /// Click_Select_Resource_Button
        /// </summary>
        [When(@"I Click Select Resource Button")]
        public void Click_Select_Resource_Button()
        {
            #region Variable Declarations
            WpfButton resourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.PerfomanceCounterTab.PerfmonViewContent.ResourceTable.Row1.ResourceCell.ResourceButton;
            #endregion

            // Click '...' button
            Mouse.Click(resourceButton, new Point(9, 8));
        }
        
        /// <summary>
        /// Click_Select_Resource_Button_From_Resource_Permissions - Use 'Click_Select_Resource_Button_From_Resource_PermissionsParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Select Resource Button From Resource Permissions")]
        public void Click_Select_Resource_Button_From_Resource_Permissions()
        {
            #region Variable Declarations
            WpfButton itemButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ResourcePermissions.Row1.ResourceCell.ItemButton;
            WpfWindow servicePickerDialog = this.ServicePickerDialog;
            #endregion

            // Click '...' button
            Mouse.Click(itemButton, new Point(13, 16));

            // Verify that the 'Exists' property of 'ServicePickerDialog' window equals 'True'
            Assert.AreEqual(this.Click_Select_Resource_Button_From_Resource_PermissionsParams.ServicePickerDialogExists, servicePickerDialog.Exists, "Service window does not exist after clicking SelectResource button");
        }
        
        /// <summary>
        /// Click_Select_Windows_Group_Cancel_Button - Use 'Click_Select_Windows_Group_Cancel_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Select Windows Group Cancel Button")]
        public void Click_Select_Windows_Group_Cancel_Button()
        {
            #region Variable Declarations
            WinButton cancel = this.SelectWindowsGroupDialog.CancelPanel.Cancel;
            #endregion

            // Verify that the 'Exists' property of 'Cancel' button equals 'True'
            Assert.AreEqual(this.Click_Select_Windows_Group_Cancel_ButtonParams.CancelExists, cancel.Exists, "Select Windows group dialog cancel buttton does not exist.");

            // Click 'Cancel' button
            Mouse.Click(cancel, new Point(28, 9));
        }
        
        /// <summary>
        /// Click_Select_Windows_Group_OK_Button
        /// </summary>
        [When(@"I Click Select Windows Group OK Button")]
        public void Click_Select_Windows_Group_OK_Button()
        {
            #region Variable Declarations
            WinButton ok = this.SelectWindowsGroupDialog.OKPanel.OK;
            #endregion

            // Click 'OK' button
            Mouse.Click(ok, new Point(37, 9));
        }
        
        /// <summary>
        /// Click_Server_Log_File_Button
        /// </summary>
        [When(@"I Click Server Log File Button")]
        public void Click_Server_Log_File_Button()
        {
            #region Variable Declarations
            WpfHyperlink itemHyperlink = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.LoggingTab.LogSettingsViewConte.ServerLogs.ServerLogFile.ItemHyperlink;
            #endregion

            // Click link
            Mouse.Click(itemHyperlink, new Point(83, 6));
        }
        
        /// <summary>
        /// Click_Server_Source_Wizard_Address_Protocol_Dropdown - Use 'Click_Server_Source_Wizard_Address_Protocol_DropdownParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Server Source Wizard Address Protocol Dropdown")]
        public void Click_Server_Source_Wizard_Address_Protocol_Dropdown()
        {
            #region Variable Declarations
            WpfButton toggleDropdown = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.ProtocolCombobox.ToggleDropdown;
            WpfCustom comboboxListItemAsHttp = this.MainStudioWindow.ComboboxListItemAsHttp;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleDropdown, new Point(54, 8));

            // Verify that the 'Exists' property of 'http' custom control equals 'True'
            Assert.AreEqual(this.Click_Server_Source_Wizard_Address_Protocol_DropdownParams.ComboboxListItemAsHttpExists, comboboxListItemAsHttp.Exists, "Http does not exist in server source wizard address protocol dropdown list.");
        }
        
        /// <summary>
        /// Click_Server_Source_Wizard_Test_Connection_Button - Use 'Click_Server_Source_Wizard_Test_Connection_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Server Source Wizard Test Connection Button")]
        public void Click_Server_Source_Wizard_Test_Connection_Button()
        {
            #region Variable Declarations
            WpfButton testConnectionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.TestConnectionButton;
            WpfButton saveButton = this.MainStudioWindow.SideMenuBar.SaveButton;
            #endregion

            // Click 'Test Connection' button
            Mouse.Click(testConnectionButton, new Point(51, 8));

            // Wait for 3 seconds for user delay between actions; Verify that the 'Enabled' property of 'Save this tab' button equals 'True'
            Playback.Wait(3000);
            Assert.AreEqual(this.Click_Server_Source_Wizard_Test_Connection_ButtonParams.SaveButtonEnabled, saveButton.Enabled, "Save ribbon button is not enabled");
        }
        
        /// <summary>
        /// Click_Service_Picker_Dialog_First_Service_In_Explorer
        /// </summary>
        [When(@"I Click Service Picker Dialog First Service In Explorer")]
        public void Click_Service_Picker_Dialog_First_Service_In_Explorer()
        {
            #region Variable Declarations
            WpfTreeItem treeItem1 = this.ServicePickerDialog.Explorer.ExplorerTree.Localhost.TreeItem1;
            #endregion

            // Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(treeItem1, new Point(91, 9));
        }
        
        /// <summary>
        /// Click_Settings_Security_Resource_Permissions_Add_Resource_Button
        /// </summary>
        [When(@"I Click Settings Security Resource Permissions Add Resource Button")]
        public void Click_Settings_Security_Resource_Permissions_Add_Resource_Button()
        {
            #region Variable Declarations
            WpfButton itemButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ResourcePermissions.Row1.ResourceCell.ItemButton;
            #endregion

            // Click '...' button
            Mouse.Click(itemButton, new Point(6, 15));
        }
        
        /// <summary>
        /// Click_Sharepoint_Server_Source_TestConnection
        /// </summary>
        [When(@"I Click Sharepoint Server Source TestConnection")]
        public void Click_Sharepoint_Server_Source_TestConnection()
        {
            #region Variable Declarations
            WpfButton testConnectionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SharepointServerSourceTab.SharepointServerSourceView.SharepointView.TestConnectionButton;
            #endregion

            // Click 'Test Connection' button
            Mouse.Click(testConnectionButton, new Point(58, 16));
        }
        
        /// <summary>
        /// Click_Show_Dependencies_In_Explorer_Context_Menu - Use 'Click_Show_Dependencies_In_Explorer_Context_MenuParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Show Dependencies In Explorer Context Menu")]
        public void Click_Show_Dependencies_In_Explorer_Context_Menu()
        {
            #region Variable Declarations
            WpfMenuItem showDependencies = this.MainStudioWindow.ExplorerContextMenu.ShowDependencies;
            WpfRadioButton showwhatdependsonthisRadioButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DependencyGraphTab.WorksurfaceContext.DependencyView.ScrollViewer.ShowwhatdependsonthisRadioButton;
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DependencyGraphTab.WorksurfaceContext.DependencyView.ScrollViewer.NestingLevelsText.Textbox;
            WpfButton refreshButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DependencyGraphTab.WorksurfaceContext.DependencyView.ScrollViewer.RefreshButton;
            WpfText text = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DependencyGraphTab.WorksurfaceContext.DependencyView.ScrollViewer.Node1.Text;
            #endregion

            // Click 'Show Dependencies' menu item
            Mouse.Click(showDependencies, new Point(50, 15));

            // Verify that the 'Selected' property of 'Show what depends on this' radio button equals 'True'
            Assert.AreEqual(this.Click_Show_Dependencies_In_Explorer_Context_MenuParams.ShowwhatdependsonthisRadioButtonSelected, showwhatdependsonthisRadioButton.Selected, "Dependency graph show dependencies radio button is not selected.");

            // Verify that the 'Exists' property of first text box next to 'Nesting Levels' label equals 'True'
            Assert.AreEqual(this.Click_Show_Dependencies_In_Explorer_Context_MenuParams.TextboxExists, textbox.Exists, "Dependency graph nesting levels textbox does not exist.");

            // Verify that the 'Exists' property of 'Refresh' button equals 'True'
            Assert.AreEqual(this.Click_Show_Dependencies_In_Explorer_Context_MenuParams.RefreshButtonExists, refreshButton.Exists, "Refresh button does not exist on dependency graph");

            // Verify that the 'DisplayText' property of 'RemoteServerUITestWorkflow' label equals 'RemoteServerUITestWorkflow'
            Assert.AreEqual(this.Click_Show_Dependencies_In_Explorer_Context_MenuParams.TextDisplayText, text.DisplayText, "Dependant workflow not shown in dependency diagram");
        }
        
        /// <summary>
        /// Click_Show_Server_Version_Explorer_Context_menu
        /// </summary>
        [When(@"I Click Show Server Version Explorer Context menu")]
        public void Click_Show_Server_Version_Explorer_Context_menu()
        {
            #region Variable Declarations
            WpfMenuItem showServerVersion = this.MainStudioWindow.ExplorerContextMenu.ShowServerVersion;
            #endregion

            // Click 'Server Version' menu item
            Mouse.Click(showServerVersion, new Point(45, 13));
        }
        
        /// <summary>
        /// Click_SQL_Server_Large_View_Done_Button - Use 'Click_SQL_Server_Large_View_Done_ButtonExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Click SQL Server Large View Done Button")]
        public void Click_SQL_Server_Large_View_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.DoneButton;
            #endregion

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Click_SQL_Server_Large_View_Done_ButtonExpectedValues.DoneButtonExists, doneButton.Exists, "SQL Server large view done button does not exist.");

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_SQL_Server_Large_View_Generate_Outputs - Use 'Click_SQL_Server_Large_View_Generate_OutputsExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Click SQL Server Large View Generate Outputs")]
        public void Click_SQL_Server_Large_View_Generate_Outputs()
        {
            #region Variable Declarations
            WpfButton generateOutputsButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.GenerateOutputsButton;
            WpfEdit testDataTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.TestInputsTable.Row1.TestDataCell.TestDataComboBox.TestDataTextbox;
            #endregion

            // Verify that the 'Exists' property of 'Generate Outputs' button equals 'True'
            Assert.AreEqual(this.Click_SQL_Server_Large_View_Generate_OutputsExpectedValues.GenerateOutputsButtonExists, generateOutputsButton.Exists, "SQL Server large view does not contain a generate outputs button.");

            // Click 'Generate Outputs' button
            Mouse.Click(generateOutputsButton, new Point(7, 7));

            // Verify that the 'Exists' property of 'Text' text box equals 'True'
            Assert.AreEqual(this.Click_SQL_Server_Large_View_Generate_OutputsExpectedValues.TestDataTextboxExists, testDataTextbox.Exists, "SQL Server large view test inputs row 1 test data textbox does not exist.");
        }
        
        /// <summary>
        /// Click_SQL_Server_Large_View_Test_Inputs_Button
        /// </summary>
        [When(@"I Click SQL Server Large View Test Inputs Button")]
        public void Click_SQL_Server_Large_View_Test_Inputs_Button()
        {
            #region Variable Declarations
            WpfButton testInputsButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.TestInputsButton;
            #endregion

            // Click 'Test' button
            Mouse.Click(testInputsButton, new Point(21, 11));
        }
        
        /// <summary>
        /// Click_SQL_Server_Large_View_Test_Inputs_Done_Button - Use 'Click_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Click SQL Server Large View Test Inputs Done Button")]
        public void Click_SQL_Server_Large_View_Test_Inputs_Done_Button()
        {
            #region Variable Declarations
            WpfButton testInputsDoneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.TestInputsDoneButton;
            #endregion

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Click_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues.TestInputsDoneButtonExists, testInputsDoneButton.Exists, "SQL Server large view test inputs done button does not exist.");

            // Click 'Done' button
            Mouse.Click(testInputsDoneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_Start_Node
        /// </summary>
        [When(@"I Click Start Node")]
        public void Click_Start_Node()
        {
            #region Variable Declarations
            WpfCustom startNode = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.StartNode;
            #endregion

            // Click 'StartNode' custom control
            Mouse.Click(startNode, new Point(29, 76));
        }
        
        /// <summary>
        /// Click_Studio_Log_File
        /// </summary>
        [When(@"I Click Studio Log File")]
        public void Click_Studio_Log_File()
        {
            #region Variable Declarations
            WpfHyperlink itemHyperlink = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.LoggingTab.LogSettingsViewConte.StudioLogs.StudioLogFile.ItemHyperlink;
            #endregion

            // Click link
            Mouse.Click(itemHyperlink, new Point(79, 10));
        }
        
        /// <summary>
        /// Click_Switch_Dialog_Done_Button - Use 'Click_Switch_Dialog_Done_ButtonParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Switch Dialog Done Button")]
        public void Click_Switch_Dialog_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.DecisionOrSwitchDialog.DoneButton;
            WpfCustom switch1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Switch;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(24, 7));

            // Verify that the 'Exists' property of custom control equals 'True'
            Assert.AreEqual(this.Click_Switch_Dialog_Done_ButtonParams.SwitchExists, switch1.Exists, "Switch on the design surface does not exist");

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Click_Switch_Dialog_Done_ButtonParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Click_System_Information_Tool_Done_Button
        /// </summary>
        [When(@"I Click System Information Tool Done Button")]
        public void Click_System_Information_Tool_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_UnDock_Explorer
        /// </summary>
        [When(@"I Click UnDock Explorer")]
        public void Click_UnDock_Explorer()
        {
            #region Variable Declarations
            WpfButton explorerUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(explorerUnpinBtn, new Point(177, -13));
        }
        
        /// <summary>
        /// Click_Unlock_Ribbon_Button
        /// </summary>
        [When(@"I Click Unlock Ribbon Button")]
        public void Click_Unlock_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton lockMenuButton = this.MainStudioWindow.SideMenuBar.LockMenuButton;
            #endregion

            // Click 'Lock / unlock the menu' button
            Mouse.Click(lockMenuButton, new Point(8, 6));
        }
        
        /// <summary>
        /// Click_Unlock_TopRibbon_Button
        /// </summary>
        [When(@"I Click Unlock TopRibbon Button")]
        public void Click_Unlock_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton lockStudioButton = this.MainStudioWindow.LockStudioButton;
            #endregion

            // Click '?' button
            Mouse.Click(lockStudioButton, new Point(10, 12));
        }
        
        /// <summary>
        /// Click_UnZip_Done_Button
        /// </summary>
        [When(@"I Click UnZip Done Button")]
        public void Click_UnZip_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_UpdateDuplicateRelationships - Use 'Click_UpdateDuplicateRelationshipsParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click UpdateDuplicateRelationships")]
        public void Click_UpdateDuplicateRelationships()
        {
            #region Variable Declarations
            WpfCheckBox updateDuplicatedRelat = this.SaveDialogWindow.UpdateDuplicatedRelat;
            #endregion

            // Select 'Update duplicated relationships?' check box
            updateDuplicatedRelat.Checked = this.Click_UpdateDuplicateRelationshipsParams.UpdateDuplicatedRelatChecked;
        }
        
        /// <summary>
        /// Click_UserButton_OnSharepointSource - Use 'Click_UserButton_OnSharepointSourceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click UserButton OnSharepointSource")]
        public void Click_UserButton_OnSharepointSource()
        {
            #region Variable Declarations
            WpfRadioButton userRadioButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SharepointServerSourceTab.SharepointServerSourceView.SharepointView.UserRadioButton;
            #endregion

            // Select 'User' radio button
            userRadioButton.Selected = this.Click_UserButton_OnSharepointSourceParams.UserRadioButtonSelected;
        }
        
        /// <summary>
        /// Click_Variable_IsInput - Use 'Click_Variable_IsInputParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Variable IsInput")]
        public void Click_Variable_IsInput()
        {
            #region Variable Declarations
            WpfCheckBox inputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.DatalistView.VariableTree.VariableTreeItem.TreeItem1.InputCheckbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_IsInputCheckbox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Click_Variable_IsInputParams.InputCheckboxExists, inputCheckbox.Exists, "Input Checkbox does not exist.");

            // Verify that the 'Enabled' property of 'UI_IsInputCheckbox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Click_Variable_IsInputParams.InputCheckboxEnabled, inputCheckbox.Enabled, "Input Checkbox is disabled.");

            // Select 'UI_IsInputCheckbox_AutoID' check box
            inputCheckbox.Checked = this.Click_Variable_IsInputParams.InputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_VariableList_Recordset_Row1_IsInputCheckbox - Use 'Click_VariableList_Recordset_Row1_IsInputCheckboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click VariableList Recordset Row1 IsInputCheckbox")]
        public void Click_VariableList_Recordset_Row1_IsInputCheckbox()
        {
            #region Variable Declarations
            WpfCheckBox inputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.DatalistView.VariableTree.RecordsetTreeItem.TreeItem1.Field1.InputCheckbox;
            #endregion

            // Select 'UI_IsInputCheckbox_AutoID' check box
            inputCheckbox.Checked = this.Click_VariableList_Recordset_Row1_IsInputCheckboxParams.InputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_VariableList_Scalar_Row1_Delete_Button
        /// </summary>
        [When(@"I Click VariableList Scalar Row1 Delete Button")]
        public void Click_VariableList_Scalar_Row1_Delete_Button()
        {
            #region Variable Declarations
            WpfImage image = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.DatalistView.VariableTree.VariableTreeItem.TreeItem1.ScrollViewerPane.NameTextbox.DeleteButton.Image;
            #endregion

            // Click 'DeleteVar' image
            Mouse.Click(image, new Point(5, 8));
        }
        
        /// <summary>
        /// Click_VariableList_Scalar_Row1_IsInputCheckbox - Use 'Click_VariableList_Scalar_Row1_IsInputCheckboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click VariableList Scalar Row1 IsInputCheckbox")]
        public void Click_VariableList_Scalar_Row1_IsInputCheckbox()
        {
            #region Variable Declarations
            WpfCheckBox inputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.DatalistView.VariableTree.VariableTreeItem.TreeItem1.InputCheckbox;
            #endregion

            // Select 'UI_IsInputCheckbox_AutoID' check box
            inputCheckbox.Checked = this.Click_VariableList_Scalar_Row1_IsInputCheckboxParams.InputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_View_Api_From_Context_Menu
        /// </summary>
        [When(@"I Click View Api From Context Menu")]
        public void Click_View_Api_From_Context_Menu()
        {
            #region Variable Declarations
            WpfTreeItem localhost = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost;
            WpfMenuItem viewApisJsonMenuItem = this.MainStudioWindow.ExplorerEnvironmentContextMenu.ViewApisJsonMenuItem;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(localhost, MouseButtons.Right, ModifierKeys.None, new Point(85, 11));

            // Click 'View Apis.Json' menu item
            Mouse.Click(viewApisJsonMenuItem, new Point(71, 13));
        }
        
        /// <summary>
        /// Click_ViewSwagger_From_ExplorerContextMenu
        /// </summary>
        [When(@"I Click ViewSwagger From ExplorerContextMenu")]
        public void Click_ViewSwagger_From_ExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem viewSwagger = this.MainStudioWindow.ExplorerContextMenu.ViewSwagger;
            #endregion

            // Click 'View Swagger' menu item
            Mouse.Click(viewSwagger, new Point(82, 16));
        }
        
        /// <summary>
        /// Click_WebRequest_Tool_Large_View_Done_Button
        /// </summary>
        [When(@"I Click WebRequest Tool Large View Done Button")]
        public void Click_WebRequest_Tool_Large_View_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebRequest.DoneButton;
            #endregion

            // Double-Click 'Done' button
            Mouse.DoubleClick(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_Workflow_CollapseAll - Use 'Click_Workflow_CollapseAllParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Workflow CollapseAll")]
        public void Click_Workflow_CollapseAll()
        {
            #region Variable Declarations
            WpfToggleButton collapseAllToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.CollapseAllToggleButton;
            #endregion

            // Verify that the 'Exists' property of 'CollapseAll' toggle button equals 'True'
            Assert.AreEqual(this.Click_Workflow_CollapseAllParams.CollapseAllToggleButtonExists, collapseAllToggleButton.Exists, "Expand all button does not exist");

            // Set to 'Pressed' state 'CollapseAll' toggle button
            collapseAllToggleButton.Pressed = this.Click_Workflow_CollapseAllParams.CollapseAllToggleButtonPressed;
        }
        
        /// <summary>
        /// Click_Workflow_ExpandAll - Use 'Click_Workflow_ExpandAllParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Click Workflow ExpandAll")]
        public void Click_Workflow_ExpandAll()
        {
            #region Variable Declarations
            WpfToggleButton expandAllToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ExpandAllToggleButton;
            #endregion

            // Verify that the 'Exists' property of 'ExpandAll' toggle button equals 'True'
            Assert.AreEqual(this.Click_Workflow_ExpandAllParams.ExpandAllToggleButtonExists, expandAllToggleButton.Exists, "Expand all button does not exist");

            // Set to 'Pressed' state 'ExpandAll' toggle button
            expandAllToggleButton.Pressed = this.Click_Workflow_ExpandAllParams.ExpandAllToggleButtonPressed;
        }
        
        /// <summary>
        /// Click_Write_Done_Button
        /// </summary>
        [When(@"I Click Write Done Button")]
        public void Click_Write_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_Yes_On_The_Confirm_Delete
        /// </summary>
        [When(@"I Click Yes On The Confirm Delete")]
        public void Click_Yes_On_The_Confirm_Delete()
        {
            #region Variable Declarations
            WpfButton yesButton = this.MessageBoxWindow.YesButton;
            #endregion

            // Click 'Yes' button
            Mouse.Click(yesButton, new Point(39, 17));
        }
        
        /// <summary>
        /// Click_Zip_Done_Button
        /// </summary>
        [When(@"I Click Zip Done Button")]
        public void Click_Zip_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Create_SubFolder_In_Folder1 - Use 'Create_SubFolder_In_Folder1Params' to pass parameters into this method.
        /// </summary>
        [When(@"I Create SubFolder In Folder1")]
        public void Create_SubFolder_In_Folder1()
        {
            #region Variable Declarations
            WpfTreeItem secondItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.SecondItem;
            WpfMenuItem newFolderMenuItem = this.MainStudioWindow.ExplorerContextMenu.NewFolderMenuItem;
            WpfEdit itemEdit = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.SecondItem.FirstSubItem.ItemEdit;
            WpfTreeItem firstSubItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.SecondItem.FirstSubItem;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(secondItem, MouseButtons.Right, ModifierKeys.None, new Point(126, 12));

            // Click 'New Folder' menu item
            Mouse.Click(newFolderMenuItem, new Point(78, 15));

            // Type 'Acceptance Testing Resources' in first text box next to 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            itemEdit.Text = this.Create_SubFolder_In_Folder1Params.ItemEditText;

            // Type '{Enter}' in 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Keyboard.SendKeys(firstSubItem, this.Create_SubFolder_In_Folder1Params.FirstSubItemSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Debug_Using_Play_Icon
        /// </summary>
        [When(@"I Debug Using Play Icon")]
        public void Debug_Using_Play_Icon()
        {
            #region Variable Declarations
            WpfButton executeIcon = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem.ExecuteIcon;
            #endregion

            // Click 'ExecuteButton' button
            Mouse.Click(executeIcon, new Point(11, 13));
        }
        
        /// <summary>
        /// Delete_Nested_Hello_World
        /// </summary>
        [When(@"I Delete Nested Hello World")]
        public void Delete_Nested_Hello_World()
        {
            #region Variable Declarations
            WpfTreeItem firstSubItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem.FirstSubItem;
            WpfMenuItem delete = this.MainStudioWindow.ExplorerContextMenu.Delete;
            WpfButton yesButton = this.MessageBoxWindow.YesButton;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstSubItem, MouseButtons.Right, ModifierKeys.None, new Point(93, 14));

            // Click 'Delete' menu item
            Mouse.Click(delete, new Point(61, 15));

            // Click 'Yes' button
            Mouse.Click(yesButton, new Point(7, 12));
        }
        
        /// <summary>
        /// DoubleClick_Explorer_First_Remote_Server_First_Item
        /// </summary>
        [When(@"I DoubleClick Explorer First Remote Server First Item")]
        public void DoubleClick_Explorer_First_Remote_Server_First_Item()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.FirstRemoteServer.FirstItem;
            #endregion

            // Double-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.DoubleClick(firstItem, new Point(63, 11));
        }
        
        /// <summary>
        /// DoubleClick_Explorer_Localhost_First_Item
        /// </summary>
        [When(@"I DoubleClick Explorer Localhost First Item")]
        public void DoubleClick_Explorer_Localhost_First_Item()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            #endregion

            // Double-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.DoubleClick(firstItem, new Point(63, 11));
        }
        
        /// <summary>
        /// Drag_DeleteWeb_Toolbox_Onto_Workflow_Surface - Use 'Drag_DeleteWeb_Toolbox_Onto_Workflow_SurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag DeleteWeb Toolbox Onto Workflow Surface")]
        public void Drag_DeleteWeb_Toolbox_Onto_Workflow_Surface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem dELETE = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.HTTPWebMethods.DELETE;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom webDelete = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebDelete;
            #endregion

            // Type 'DELETE' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_DeleteWeb_Toolbox_Onto_Workflow_SurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 126));
            Mouse.StartDragging(dELETE, new Point(16, 25));
            Mouse.StopDragging(flowchart, new Point(306, 126));

            // Verify that the 'Exists' property of 'DsfWebDeleteActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_DeleteWeb_Toolbox_Onto_Workflow_SurfaceParams.WebDeleteExists, webDelete.Exists, "Delete Web connectoer does not exist on the design surface after drag and drop fr" +
                    "om toolbox.");
        }
        
        /// <summary>
        /// Drag_Dice_Onto_Dice_On_The_DesignSurface - Use 'Drag_Dice_Onto_Dice_On_The_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Dice Onto Dice On The DesignSurface")]
        public void Drag_Dice_Onto_Dice_On_The_DesignSurface()
        {
            #region Variable Declarations
            WpfTreeItem firstSubItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.SecondItem.FirstSubItem;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector2 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector2;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExternalWorkFlow.DoneButton;
            #endregion

            // Move 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(301, 228));
            Mouse.StartDragging(firstSubItem, new Point(49, 10));
            Mouse.StopDragging(flowchart, new Point(301, 228));

            // Verify that the 'Exists' property of 'Connector2' custom control equals 'True'
            Assert.AreEqual(this.Drag_Dice_Onto_Dice_On_The_DesignSurfaceParams.Connector2Exists, connector2.Exists, "Second connector does not exist on design surface.");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Drag_Dice_Onto_Dice_On_The_DesignSurfaceParams.DoneButtonExists, doneButton.Exists, "Done button does not exist afer dragging dice service onto design surface");
        }
        
        /// <summary>
        /// Drag_DotNet_DLL_Connector_Onto_DesignSurface - Use 'Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag DotNet DLL Connector Onto DesignSurface")]
        public void Drag_DotNet_DLL_Connector_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem dotNetDLL = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.ResourceTools.DotNetDLL;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom dotNetDll1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll;
            #endregion

            // Type 'DotNet DLL' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 127));
            Mouse.StartDragging(dotNetDLL, new Point(16, 25));
            Mouse.StopDragging(flowchart, new Point(308, 127));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfDotNetDllActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams.DotNetDllExists, dotNetDll1.Exists, "DotNet DLL tool does not exist on the design surface");
        }
        
        /// <summary>
        /// Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_Surface - Use 'Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Explorer Localhost First Item Onto Workflow Design Surface")]
        public void Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_Surface()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
            Assert.AreEqual(this.Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams.FirstItemExists, firstItem.Exists, "No items to drag found in the explorer tree.");

            // Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, new Point(64, 5));

            // Move 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 128));
            Mouse.StartDragging(firstItem, new Point(64, 5));
            Mouse.StopDragging(flowchart, new Point(307, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Explorer_Localhost_First_Items_First_Sub_Item_Onto_Workflow_Design_Surface - Use 'Drag_Explorer_Localhost_First_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Explorer Localhost First Items First Sub Item Onto Workflow Design Surface")]
        public void Drag_Explorer_Localhost_First_Items_First_Sub_Item_Onto_Workflow_Design_Surface()
        {
            #region Variable Declarations
            WpfTreeItem firstSubItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem.FirstSubItem;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
            Assert.AreEqual(this.Drag_Explorer_Localhost_First_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams.FirstSubItemExists, firstSubItem.Exists, "No items to drag found in the explorer tree.");

            // Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstSubItem, new Point(90, 10));

            // Move 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 128));
            Mouse.StartDragging(firstSubItem, new Point(90, 10));
            Mouse.StopDragging(flowchart, new Point(307, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Explorer_Localhost_First_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Explorer_Localhost_Second_Items_First_Sub_Item_Onto_Workflow_Design_Surface - Use 'Drag_Explorer_Localhost_Second_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Explorer Localhost Second Items First Sub Item Onto Workflow Design Surface")]
        public void Drag_Explorer_Localhost_Second_Items_First_Sub_Item_Onto_Workflow_Design_Surface()
        {
            #region Variable Declarations
            WpfTreeItem firstSubItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.SecondItem.FirstSubItem;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
            Assert.AreEqual(this.Drag_Explorer_Localhost_Second_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams.FirstSubItemExists, firstSubItem.Exists, "No items to drag found in the explorer tree.");

            // Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstSubItem, new Point(90, 10));

            // Move 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 128));
            Mouse.StartDragging(firstSubItem, new Point(90, 10));
            Mouse.StopDragging(flowchart, new Point(307, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Explorer_Localhost_Second_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_Surface - Use 'Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Explorer Remote workflow1 Onto Workflow Design Surface")]
        public void Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_Surface()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.FirstRemoteServer.FirstItem;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom subWorkflow = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SubWorkflow;
            #endregion

            // Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
            Assert.AreEqual(this.Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams.FirstItemExists, firstItem.Exists, "Explorer first remote server does not contain any items.");

            // Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, new Point(64, 5));

            // Move 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 128));
            Mouse.StartDragging(firstItem, new Point(64, 5));
            Mouse.StopDragging(flowchart, new Point(307, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams.SubWorkflowExists, subWorkflow.Exists, "Workflow on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_GET_Web_Connector_Onto_DesignSurface - Use 'Drag_GET_Web_Connector_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag GET Web Connector Onto DesignSurface")]
        public void Drag_GET_Web_Connector_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem gET = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.HTTPWebMethods.GET;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom webGet = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet;
            #endregion

            // Type 'GET' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_GET_Web_Connector_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 126));
            Mouse.StartDragging(gET, new Point(16, 25));
            Mouse.StopDragging(flowchart, new Point(306, 126));

            // Verify that the 'Exists' property of 'DsfWebGetActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_GET_Web_Connector_Onto_DesignSurfaceParams.WebGetExists, webGet.Exists, "GET Web connectoer does not exist on the design surface after drag and drop from " +
                    "toolbox.");
        }
        
        /// <summary>
        /// Drag_GetWeb_RequestTool_Onto_DesignSurface - Use 'Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag GetWeb RequestTool Onto DesignSurface")]
        public void Drag_GetWeb_RequestTool_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem webRequest = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.WebRequest;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom webRequest1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebRequest;
            #endregion

            // Type 'Web Request' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 124));
            Mouse.StartDragging(webRequest, new Point(12, 3));
            Mouse.StopDragging(flowchart, new Point(305, 124));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfWebRequestActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams.WebRequestExists, webRequest1.Exists, "Web Get Request small view does not exist on the design surface");
        }
        
        /// <summary>
        /// Drag_PostWeb_RequestTool_Onto_DesignSurface - Use 'Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag PostWeb RequestTool Onto DesignSurface")]
        public void Drag_PostWeb_RequestTool_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem pOST = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.HTTPWebMethods.POST;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom webPost = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPost;
            #endregion

            // Type 'POST' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 128));
            Mouse.StartDragging(pOST, new Point(20, 35));
            Mouse.StopDragging(flowchart, new Point(306, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfWebPostActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams.WebPostExists, webPost.Exists, "Web Post Request small view does not exist on the design surface");
        }
        
        /// <summary>
        /// Drag_PutWeb_Tool_Onto_DesignSurface - Use 'Drag_PutWeb_Tool_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag PutWeb Tool Onto DesignSurface")]
        public void Drag_PutWeb_Tool_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem pUT = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.HTTPWebMethods.PUT;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom webPut = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPut;
            #endregion

            // Type 'PUT' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_PutWeb_Tool_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 126));
            Mouse.StartDragging(pUT, new Point(16, 25));
            Mouse.StopDragging(flowchart, new Point(306, 126));

            // Verify that the 'Exists' property of 'DsfWebPutActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_PutWeb_Tool_Onto_DesignSurfaceParams.WebPutExists, webPut.Exists, "Put Web connectoer does not exist on the design surface after drag and drop from " +
                    "toolbox.");
        }
        
        /// <summary>
        /// Drag_Toolbox_AggregateCalculate_Onto_DesignSurface - Use 'Drag_Toolbox_AggregateCalculate_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox AggregateCalculate Onto DesignSurface")]
        public void Drag_Toolbox_AggregateCalculate_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem aggregateCalculate = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.AggregateCalculate;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfComboBox fxComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AggregateCalculat.SmallViewContentCustom.fxComboBox;
            #endregion

            // Type 'Aggregate Calculate' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_AggregateCalculate_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(307, 128));
            Mouse.StartDragging(aggregateCalculate, new Point(13, 17));
            Mouse.StopDragging(flowchart, new Point(307, 128));

            // Verify that the 'Exists' property of 'UI__fxtxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_AggregateCalculate_Onto_DesignSurfaceParams.fxComboBoxExists, fxComboBox.Exists, "fx combobox does not exist after dragging Aggregate Calculate tool onto design su" +
                    "rface");
        }
        
        /// <summary>
        /// Drag_Toolbox_AssignObject_Onto_DesignSurface - Use 'Drag_Toolbox_AssignObject_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox AssignObject Onto DesignSurface")]
        public void Drag_Toolbox_AssignObject_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem assignObject = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.AssignObject;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Assign Object' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_AssignObject_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Verify that the 'Exists' property of 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item equals 'True'
            Playback.Wait(2000);
            Assert.AreEqual(this.Drag_Toolbox_AssignObject_Onto_DesignSurfaceParams.AssignObjectExists, assignObject.Exists, "Toolbox AssignObject does not exist");

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 128));
            Mouse.StartDragging(assignObject, new Point(13, 17));
            Mouse.StopDragging(flowchart, new Point(307, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_AssignObject_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Base_Conversion_Onto_DesignSurface - Use 'Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Base Conversion Onto DesignSurface")]
        public void Drag_Toolbox_Base_Conversion_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem baseConvert = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.BaseConvert;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom baseConvert1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert;
            #endregion

            // Type 'Base Convert' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(303, 128));
            Mouse.StartDragging(baseConvert, new Point(12, 12));
            Mouse.StopDragging(flowchart, new Point(303, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfBaseConvertActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams.BaseConvertExists, baseConvert1.Exists, "Base Conversion on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Calculate_Onto_DesignSurface - Use 'Drag_Toolbox_Calculate_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Calculate Onto DesignSurface")]
        public void Drag_Toolbox_Calculate_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem calculate = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.Calculate;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom calculate1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate;
            #endregion

            // Type 'Calculate' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Calculate_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(305, 131));
            Mouse.StartDragging(calculate, new Point(59, -17));
            Mouse.StopDragging(flowchart, new Point(305, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Calculate_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfCalculateActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Calculate_Onto_DesignSurfaceParams.CalculateExists, calculate1.Exists, "Calculate tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Case_Conversion_Onto_DesignSurface - Use 'Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Case Conversion Onto DesignSurface")]
        public void Drag_Toolbox_Case_Conversion_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem caseConvert = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.CaseConvert;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom caseConvert1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert;
            #endregion

            // Type 'Case Convert' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(303, 130));
            Mouse.StartDragging(caseConvert, new Point(19, 13));
            Mouse.StopDragging(flowchart, new Point(303, 130));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfCaseConvertActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams.CaseConvertExists, caseConvert1.Exists, "Case Conversion on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_CMD_Line_Onto_DesignSurface - Use 'Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox CMD Line Onto DesignSurface")]
        public void Drag_Toolbox_CMD_Line_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem cMDScript = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.ScriptingTools.CMDScript;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom executeCommandLine = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            WpfComboBox scriptIntellisenseTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine.SmallViewContent.ScriptIntellisenseTextbox;
            WpfComboBox resultIntellisenseTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine.SmallViewContent.ResultIntellisenseTextbox;
            #endregion

            // Type 'CMD Script' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 122));
            Mouse.StartDragging(cMDScript, new Point(19, 19));
            Mouse.StopDragging(flowchart, new Point(305, 122));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfExecuteCommandLineActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams.ExecuteCommandLineExists, executeCommandLine.Exists, "CMD Line tool on the design surface tool does not exist");

            // Verify that the 'Exists' property of 'UI__Cmdtxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams.ScriptIntellisenseTextboxExists, scriptIntellisenseTextbox.Exists, "CMD script textbox does not exist after dragging onto design surface.");

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams.ResultIntellisenseTextboxExists, resultIntellisenseTextbox.Exists, "CMD script result textbox does not exist after dragging onto design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Comment_Onto_DesignSurface - Use 'Drag_Toolbox_Comment_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Comment Onto DesignSurface")]
        public void Drag_Toolbox_Comment_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem comment = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.Comment;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom comment1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Comment;
            #endregion

            // Type 'Comment' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Comment_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 129));
            Mouse.StartDragging(comment, new Point(40, 15));
            Mouse.StopDragging(flowchart, new Point(308, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Comment_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfCommentActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Comment_Onto_DesignSurfaceParams.CommentExists, comment1.Exists, "Comment tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Copy_Onto_DesignSurface - Use 'Drag_Toolbox_Copy_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Copy Onto DesignSurface")]
        public void Drag_Toolbox_Copy_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem copy = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Copy;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom pathCopy = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy;
            #endregion

            // Type 'Copy' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Copy_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(310, 129));
            Mouse.StartDragging(copy, new Point(19, -3));
            Mouse.StopDragging(flowchart, new Point(310, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Copy_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfPathCopy' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Copy_Onto_DesignSurfaceParams.PathCopyExists, pathCopy.Exists, "Copy on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Count_Records_Onto_DesignSurface - Use 'Drag_Toolbox_Count_Records_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Count Records Onto DesignSurface")]
        public void Drag_Toolbox_Count_Records_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem count = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.Count;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Count' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Count_Records_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(307, 125));
            Mouse.StartDragging(count, new Point(13, 18));
            Mouse.StopDragging(flowchart, new Point(307, 125));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Count_Records_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Create_Onto_DesignSurface - Use 'Drag_Toolbox_Create_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Create Onto DesignSurface")]
        public void Drag_Toolbox_Create_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem create = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Create;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom pathCreate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate;
            #endregion

            // Type 'Create' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Create_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 131));
            Mouse.StartDragging(create, new Point(9, 16));
            Mouse.StopDragging(flowchart, new Point(308, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Create_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfPathCreate' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Create_Onto_DesignSurfaceParams.PathCreateExists, pathCreate.Exists, "Create tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Data_Merge_Onto_DesignSurface - Use 'Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Data Merge Onto DesignSurface")]
        public void Drag_Toolbox_Data_Merge_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem dataMerge = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.DataMerge;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom dataMerge1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Type 'Data Merge' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(305, 133));
            Mouse.StartDragging(dataMerge, new Point(54, 23));
            Mouse.StopDragging(flowchart, new Point(305, 133));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams.DataMergeExists, dataMerge1.Exists, "Data Merge on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Data_Split_Onto_DesignSurface - Use 'Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Data Split Onto DesignSurface")]
        public void Drag_Toolbox_Data_Split_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem dataSplit = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.DataSplit;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom dataSplit1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Type 'Data Split' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(308, 129));
            Mouse.StartDragging(dataSplit, new Point(3, 8));
            Mouse.StopDragging(flowchart, new Point(308, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams.DataSplitExists, dataSplit1.Exists, "Data Split on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Date_And_Time_Onto_DesignSurface - Use 'Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Date And Time Onto DesignSurface")]
        public void Drag_Toolbox_Date_And_Time_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem dateTime = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.DateTime;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom dateTime1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTime;
            #endregion

            // Type 'Date Time' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(304, 127));
            Mouse.StartDragging(dateTime, new Point(20, -1));
            Mouse.StopDragging(flowchart, new Point(304, 127));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfDateTimeActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams.DateTimeExists, dateTime1.Exists, "Date and Time tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_DateTime_Difference_Onto_DesignSurface - Use 'Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox DateTime Difference Onto DesignSurface")]
        public void Drag_Toolbox_DateTime_Difference_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem dateTimeDifference = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.DateTimeDifference;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom dateTimeDifference1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTimeDifference;
            #endregion

            // Type 'Date Time Diff' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(306, 131));
            Mouse.StartDragging(dateTimeDifference, new Point(48, 7));
            Mouse.StopDragging(flowchart, new Point(306, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfDateTimeDifferenceActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams.DateTimeDifferenceExists, dateTimeDifference1.Exists, "Date And Time Difference tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Decision_Onto_DesignSurface - Use 'Drag_Toolbox_Decision_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Decision Onto DesignSurface")]
        public void Drag_Toolbox_Decision_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem decision = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FlowTools.Decision;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfButton doneButton = this.DecisionOrSwitchDialog.DoneButton;
            #endregion

            // Type 'Decision' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Decision_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(309, 128));
            Mouse.StartDragging(decision, new Point(16, 11));
            Mouse.StopDragging(flowchart, new Point(309, 128));

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Decision_Onto_DesignSurfaceParams.DoneButtonExists, doneButton.Exists, "Decision dialog done button does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Delete_Onto_DesignSurface - Use 'Drag_Toolbox_Delete_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Delete Onto DesignSurface")]
        public void Drag_Toolbox_Delete_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem delete = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Delete;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom pathDelete = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathDelete;
            #endregion

            // Type 'Delete' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Delete_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(306, 125));
            Mouse.StartDragging(delete, new Point(13, 9));
            Mouse.StopDragging(flowchart, new Point(306, 125));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Delete_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfPathDelete' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Delete_Onto_DesignSurfaceParams.PathDeleteExists, pathDelete.Exists, "Delete tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Delete_Record_Onto_DesignSurface - Use 'Drag_Toolbox_Delete_Record_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Delete Record Onto DesignSurface")]
        public void Drag_Toolbox_Delete_Record_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem delete = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.Delete;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Delete' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Delete_Record_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(309, 128));
            Mouse.StartDragging(delete, new Point(1, 15));
            Mouse.StopDragging(flowchart, new Point(309, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Delete_Record_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Dropbox_Download_Onto_DesignSurface - Use 'Drag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Dropbox Download Onto DesignSurface")]
        public void Drag_Toolbox_Dropbox_Download_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem download = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.StorageDropbox.Download;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Download' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 131));
            Mouse.StartDragging(download, new Point(30, 8));
            Mouse.StopDragging(flowchart, new Point(307, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Dropbox_Upload_Onto_DesignSurface - Use 'Drag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Dropbox Upload Onto DesignSurface")]
        public void Drag_Toolbox_Dropbox_Upload_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem upload = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.StorageDropbox.Upload;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Upload' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 131));
            Mouse.StartDragging(upload, new Point(30, 8));
            Mouse.StopDragging(flowchart, new Point(307, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Exchange_Email_Onto_DesignSurface - Use 'Drag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Exchange Email Onto DesignSurface")]
        public void Drag_Toolbox_Exchange_Email_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem exchangeSend = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.Email.ExchangeSend;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Exchange Email' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 129));
            Mouse.StartDragging(exchangeSend, new Point(16, -39));
            Mouse.StopDragging(flowchart, new Point(308, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Find_Index_Onto_DesignSurface - Use 'Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Find Index Onto DesignSurface")]
        public void Drag_Toolbox_Find_Index_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem findIndex = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.FindIndex;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom findIndex1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindIndex;
            #endregion

            // Type 'Find Index' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 131));
            Mouse.StartDragging(findIndex, new Point(9, 5));
            Mouse.StopDragging(flowchart, new Point(305, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfIndexActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams.FindIndexExists, findIndex1.Exists, "Find Index on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Find_Record_Index_Onto_DesignSurface - Use 'Drag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Find Record Index Onto DesignSurface")]
        public void Drag_Toolbox_Find_Record_Index_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem findRecords = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.FindRecords;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Find Records' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(307, 130));
            Mouse.StartDragging(findRecords, new Point(8, 8));
            Mouse.StopDragging(flowchart, new Point(307, 130));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_For_Each_Onto_DesignSurface - Use 'Drag_Toolbox_For_Each_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox For Each Onto DesignSurface")]
        public void Drag_Toolbox_For_Each_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem forEach = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.LoopTools.ForEach;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom forEach1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach;
            WpfComboBox forEachTypeComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach.SmallView.ForEachTypeComboBox;
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach.SmallView.FromIntellisenseTextbox.Textbox;
            WpfCustom dropActivityHere = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach.SmallView.DropActivityHere;
            WpfEdit textbox1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach.SmallView.ToIntellisenseTextbox.Textbox;
            #endregion

            // Type 'ForEach' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_For_Each_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 129));
            Mouse.StartDragging(forEach, new Point(40, 19));
            Mouse.StopDragging(flowchart, new Point(307, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_For_Each_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfForEachActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_For_Each_Onto_DesignSurfaceParams.ForEachExists, forEach1.Exists, "For Each tool on the design surface does not exist");

            // Verify that the 'Exists' property of 'UI__ForEachType_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_For_Each_Onto_DesignSurfaceParams.ForEachTypeComboBoxExists, forEachTypeComboBox.Exists, "Type dropdown does not exist on for each on the design surface.");

            // Verify that the 'Exists' property of 'Text' text box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_For_Each_Onto_DesignSurfaceParams.TextboxExists, textbox.Exists, "Start textbox in in range foreach on the design surface does not exist.");

            // Verify that the 'Exists' property of 'Drop Activity Here' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_For_Each_Onto_DesignSurfaceParams.DropActivityHereExists, dropActivityHere.Exists, "Activity drop box does not exist on for each.");

            // Verify that the 'Exists' property of 'Text' text box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_For_Each_Onto_DesignSurfaceParams.TextboxExists1, textbox1.Exists, "End textbox in in range foreach on the design surface does not exist.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Format_Number_Onto_DesignSurface - Use 'Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Format Number Onto DesignSurface")]
        public void Drag_Toolbox_Format_Number_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem formatNumber = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.FormatNumber;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom formatNumber1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber;
            #endregion

            // Type 'Format Number' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(305, 131));
            Mouse.StartDragging(formatNumber, new Point(18, 11));
            Mouse.StopDragging(flowchart, new Point(305, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfNumberFormatActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams.FormatNumberExists, formatNumber1.Exists, "Format Number tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Javascript_Onto_DesignSurface - Use 'Drag_Toolbox_Javascript_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Javascript Onto DesignSurface")]
        public void Drag_Toolbox_Javascript_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem javaScript = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.ScriptingTools.JavaScript;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom javascript1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Javascript;
            WpfComboBox scriptIntellisenseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Javascript.SmallView.ScriptIntellisenseCombobox;
            WpfComboBox resultsIntellisenseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Javascript.SmallView.ResultsIntellisenseCombobox;
            #endregion

            // Type 'Javascript' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Javascript_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 130));
            Mouse.StartDragging(javaScript, new Point(49, 17));
            Mouse.StopDragging(flowchart, new Point(307, 130));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Javascript_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfJavascriptActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Javascript_Onto_DesignSurfaceParams.JavascriptExists, javascript1.Exists, "Javascript tool on the design surface does not exist");

            // Verify that the 'Exists' property of 'UI__txtScript_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Javascript_Onto_DesignSurfaceParams.ScriptIntellisenseComboboxExists, scriptIntellisenseCombobox.Exists, "JavaScript script textbox does not exist after dragging on tool from the toolbox." +
                    "");

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Javascript_Onto_DesignSurfaceParams.ResultsIntellisenseComboboxExists, resultsIntellisenseCombobox.Exists, "JavaScript result textbox does not exist after dragging on tool from the toolbox." +
                    "");
        }
        
        /// <summary>
        /// Drag_Toolbox_JSON_Onto_DesignSurface - Use 'Drag_Toolbox_JSON_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox JSON Onto DesignSurface")]
        public void Drag_Toolbox_JSON_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem createJSON = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.CreateJSON;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom createJson1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Type 'Create JSON' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_JSON_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(305, 127));
            Mouse.StartDragging(createJSON, new Point(0, 10));
            Mouse.StopDragging(flowchart, new Point(305, 127));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_JSON_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_JSON_Onto_DesignSurfaceParams.CreateJsonExists, createJson1.Exists, "Create JSON tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Length_Onto_DesignSurface - Use 'Drag_Toolbox_Length_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Length Onto DesignSurface")]
        public void Drag_Toolbox_Length_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem length = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.Length;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom length1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Length;
            #endregion

            // Type 'Length' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Length_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(308, 125));
            Mouse.StartDragging(length, new Point(16, 6));
            Mouse.StopDragging(flowchart, new Point(308, 125));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Length_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfRecordsetLengthActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Length_Onto_DesignSurfaceParams.LengthExists, length1.Exists, "Length tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Move_Onto_DesignSurface - Use 'Drag_Toolbox_Move_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Move Onto DesignSurface")]
        public void Drag_Toolbox_Move_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem move = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Move;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom pathMove = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove;
            #endregion

            // Type 'Move' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Move_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(306, 129));
            Mouse.StartDragging(move, new Point(32, 4));
            Mouse.StopDragging(flowchart, new Point(306, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Move_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfPathMove' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Move_Onto_DesignSurfaceParams.PathMoveExists, pathMove.Exists, "Move tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_MultiAssign_Onto_DesignSurface - Use 'Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox MultiAssign Onto DesignSurface")]
        public void Drag_Toolbox_MultiAssign_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem multiAssign = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.MultiAssign;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row1.VariableCell.Listbox.Textbox;
            #endregion

            // Type 'Assign' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Verify that the 'Exists' property of 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams.MultiAssignExists, multiAssign.Exists, "Toolbox Multiassign does not exist");

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 128));
            Mouse.StartDragging(multiAssign, new Point(13, 17));
            Mouse.StopDragging(flowchart, new Point(307, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'UI_TextBox_AutoID' text box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams.TextboxExists, textbox.Exists, "Assign small view row 1 variable textbox does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_MySql_Database_Onto_DesignSurface - Use 'Drag_Toolbox_MySql_Database_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox MySql Database Onto DesignSurface")]
        public void Drag_Toolbox_MySql_Database_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem mySQL = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.Database.MySQL;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'MySQL' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_MySql_Database_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 130));
            Mouse.StartDragging(mySQL, new Point(4, 2));
            Mouse.StopDragging(flowchart, new Point(306, 130));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_MySql_Database_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_ODBC_Dtatbase_Onto_DesignSurface - Use 'Drag_Toolbox_ODBC_Dtatbase_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox ODBC Dtatbase Onto DesignSurface")]
        public void Drag_Toolbox_ODBC_Dtatbase_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem oDBC = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.Database.ODBC;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Type 'ODBC' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_ODBC_Dtatbase_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 1 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(1000);
            flowchart.EnsureClickable(new Point(306, 130));
            Mouse.StartDragging(oDBC, new Point(4, 2));
            Mouse.StopDragging(flowchart, new Point(306, 130));
        }
        
        /// <summary>
        /// Drag_Toolbox_Oracle_Database_Onto_DesignSurface - Use 'Drag_Toolbox_Oracle_Database_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Oracle Database Onto DesignSurface")]
        public void Drag_Toolbox_Oracle_Database_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem oracle = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.Database.Oracle;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Type 'Oracle' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Oracle_Database_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 1 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(1000);
            flowchart.EnsureClickable(new Point(306, 130));
            Mouse.StartDragging(oracle, new Point(4, 2));
            Mouse.StopDragging(flowchart, new Point(306, 130));
        }
        
        /// <summary>
        /// Drag_Toolbox_PostgreSql_Onto_DesignSurface - Use 'Drag_Toolbox_PostgreSql_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox PostgreSql Onto DesignSurface")]
        public void Drag_Toolbox_PostgreSql_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem postgre = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.Database.Postgre;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Type 'Postgre' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_PostgreSql_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 1 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(1000);
            flowchart.EnsureClickable(new Point(306, 130));
            Mouse.StartDragging(postgre, new Point(4, 2));
            Mouse.StopDragging(flowchart, new Point(306, 130));
        }
        
        /// <summary>
        /// Drag_Toolbox_Python_Onto_DesignSurface - Use 'Drag_Toolbox_Python_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Python Onto DesignSurface")]
        public void Drag_Toolbox_Python_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem python = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.ScriptingTools.Python;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom python1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Python;
            WpfComboBox scriptIntellisenseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Python.SmallView.ScriptIntellisenseCombobox;
            WpfComboBox resultIntellisenseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Python.SmallView.ResultIntellisenseCombobox;
            #endregion

            // Type 'Python' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Python_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 130));
            Mouse.StartDragging(python, new Point(49, 17));
            Mouse.StopDragging(flowchart, new Point(307, 130));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Python_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfPythonActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Python_Onto_DesignSurfaceParams.PythonExists, python1.Exists, "Python tool on the design surface does not exist");

            // Verify that the 'Exists' property of 'UI__txtScript_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Python_Onto_DesignSurfaceParams.ScriptIntellisenseComboboxExists, scriptIntellisenseCombobox.Exists, "Python script textbox does not exist after dragging on tool from the toolbox.");

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Python_Onto_DesignSurfaceParams.ResultIntellisenseComboboxExists, resultIntellisenseCombobox.Exists, "Python result textbox does not exist after dragging on tool from the toolbox.");
        }
        
        /// <summary>
        /// Drag_Toolbox_RabbitMqConsume_Onto_DesignSurface - Use 'Drag_Toolbox_RabbitMqConsume_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox RabbitMqConsume Onto DesignSurface")]
        public void Drag_Toolbox_RabbitMqConsume_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem rabbitMQConsume = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.RabbitMQConsume;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom smallViewContentCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.RabbitMQConsume.SmallViewContentCustom;
            #endregion

            // Type 'RabbitMq Consume' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_RabbitMqConsume_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(309, 128));
            Mouse.StartDragging(rabbitMQConsume, new Point(16, 11));
            Mouse.StopDragging(flowchart, new Point(309, 128));

            // Verify that the 'Exists' property of 'SmallViewContent' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_RabbitMqConsume_Onto_DesignSurfaceParams.SmallViewContentCustomExists, smallViewContentCustom.Exists, "Done button does not exist after dragging RabbitMq tool onto the design surface");
        }
        
        /// <summary>
        /// Drag_Toolbox_RabbitMqPublish_Onto_DesignSurface - Use 'Drag_Toolbox_RabbitMqPublish_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox RabbitMqPublish Onto DesignSurface")]
        public void Drag_Toolbox_RabbitMqPublish_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem rabbitMQPublish = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.RabbitMQPublish;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom smallViewContentCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.RabbitMQPublish.SmallViewContentCustom;
            #endregion

            // Type 'RabbitMq Publish' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_RabbitMqPublish_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(309, 128));
            Mouse.StartDragging(rabbitMQPublish, new Point(16, 11));
            Mouse.StopDragging(flowchart, new Point(309, 128));

            // Verify that the 'Exists' property of 'SmallViewContent' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_RabbitMqPublish_Onto_DesignSurfaceParams.SmallViewContentCustomExists, smallViewContentCustom.Exists, "Done button does not exist after dragging RabbitMq tool onto the design surface");
        }
        
        /// <summary>
        /// Drag_Toolbox_Random_Onto_DesignSurface - Use 'Drag_Toolbox_Random_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Random Onto DesignSurface")]
        public void Drag_Toolbox_Random_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem random = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.Random;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom random1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random;
            #endregion

            // Type 'Random' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Random_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 127));
            Mouse.StartDragging(random, new Point(9, -21));
            Mouse.StopDragging(flowchart, new Point(308, 127));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Random_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfRandomActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Random_Onto_DesignSurfaceParams.RandomExists, random1.Exists, "Random tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Read_File_Onto_DesignSurface - Use 'Drag_Toolbox_Read_File_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Read File Onto DesignSurface")]
        public void Drag_Toolbox_Read_File_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem readFile = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.ReadFile;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom fileRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead;
            #endregion

            // Type 'Read File' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Read_File_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(304, 125));
            Mouse.StartDragging(readFile, new Point(12, 15));
            Mouse.StopDragging(flowchart, new Point(304, 125));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Read_File_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfFileRead' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Read_File_Onto_DesignSurfaceParams.FileReadExists, fileRead.Exists, "Read File tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Read_Folder_Onto_DesignSurface - Use 'Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Read Folder Onto DesignSurface")]
        public void Drag_Toolbox_Read_Folder_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem readFolder = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.ReadFolder;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom folderRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead;
            #endregion

            // Type 'Read Folder' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(305, 129));
            Mouse.StartDragging(readFolder, new Point(14, 3));
            Mouse.StopDragging(flowchart, new Point(305, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfFolderRead' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams.FolderReadExists, folderRead.Exists, "Read folder tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Rename_Onto_DesignSurface - Use 'Drag_Toolbox_Rename_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Rename Onto DesignSurface")]
        public void Drag_Toolbox_Rename_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem rename = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Rename;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom pathRename = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename;
            #endregion

            // Type 'Rename' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Rename_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(305, 128));
            Mouse.StartDragging(rename, new Point(6, 11));
            Mouse.StopDragging(flowchart, new Point(305, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Rename_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfPathRename' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Rename_Onto_DesignSurfaceParams.PathRenameExists, pathRename.Exists, "Rename tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Replace_Onto_DesignSurface - Use 'Drag_Toolbox_Replace_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Replace Onto DesignSurface")]
        public void Drag_Toolbox_Replace_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem replace = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.Replace;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom replace1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Replace;
            #endregion

            // Type 'Replace' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Replace_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(306, 121));
            Mouse.StartDragging(replace, new Point(16, 10));
            Mouse.StopDragging(flowchart, new Point(306, 121));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Replace_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfReplaceActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Replace_Onto_DesignSurfaceParams.ReplaceExists, replace1.Exists, "Replace on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Ruby_Onto_DesignSurface - Use 'Drag_Toolbox_Ruby_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Ruby Onto DesignSurface")]
        public void Drag_Toolbox_Ruby_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem ruby = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.ScriptingTools.Ruby;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom ruby1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Ruby;
            WpfComboBox scriptIntellisenseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Ruby.SmallView.ScriptIntellisenseCombobox;
            WpfComboBox resultIntellisenseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Ruby.SmallView.ResultIntellisenseCombobox;
            #endregion

            // Type 'Ruby' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Ruby_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 130));
            Mouse.StartDragging(ruby, new Point(49, 17));
            Mouse.StopDragging(flowchart, new Point(307, 130));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Ruby_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfRubyActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Ruby_Onto_DesignSurfaceParams.RubyExists, ruby1.Exists, "Ruby tool on the design surface does not exist");

            // Verify that the 'Exists' property of 'UI__txtScript_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Ruby_Onto_DesignSurfaceParams.ScriptIntellisenseComboboxExists, scriptIntellisenseCombobox.Exists, "Ruby script textbox does not exist after dragging on tool from the toolbox.");

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Ruby_Onto_DesignSurfaceParams.ResultIntellisenseComboboxExists, resultIntellisenseCombobox.Exists, "Ruby result textbox does not exist after dragging on tool from the toolbox.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Selectandapply_Onto_DesignSurface - Use 'Drag_Toolbox_Selectandapply_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Selectandapply Onto DesignSurface")]
        public void Drag_Toolbox_Selectandapply_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem selectandapply = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.LoopTools.Selectandapply;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom selectAndApply1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SelectAndApply;
            WpfComboBox selectFromIntellisenseTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SelectAndApply.SmallView.SelectFromIntellisenseTextbox;
            WpfComboBox aliasIntellisenseTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SelectAndApply.SmallView.AliasIntellisenseTextbox;
            WpfCustom dropActivityHere = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SelectAndApply.SmallView.DropActivityHere;
            #endregion

            // Type 'Select and apply' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Selectandapply_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 129));
            Mouse.StartDragging(selectandapply, new Point(40, 19));
            Mouse.StopDragging(flowchart, new Point(307, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Selectandapply_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface after dragging select and apply tool onto s" +
                    "tart node autoconnector.");

            // Verify that the 'Exists' property of 'DsfSelectAndApplyActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Selectandapply_Onto_DesignSurfaceParams.SelectAndApplyExists, selectAndApply1.Exists, "Select and apply does not exist on design surface after dragging from toolbox.");

            // Verify that the 'Exists' property of 'UI__FileNametxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Selectandapply_Onto_DesignSurfaceParams.SelectFromIntellisenseTextboxExists, selectFromIntellisenseTextbox.Exists, "Select and apply select from textbox does not exist after dropping tool from tool" +
                    "box.");

            // Verify that the 'Exists' property of 'UI__FileNametxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Selectandapply_Onto_DesignSurfaceParams.AliasIntellisenseTextboxExists, aliasIntellisenseTextbox.Exists, "Select and apply alias textbox does not exist after dropping tool from toolbox.");

            // Verify that the 'Exists' property of 'Drop Activity Here' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Selectandapply_Onto_DesignSurfaceParams.DropActivityHereExists, dropActivityHere.Exists, "Select and apply activity drop box does not exist after dropping tool from toolbo" +
                    "x.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Sequence_Onto_DesignSurface - Use 'Drag_Toolbox_Sequence_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Sequence Onto DesignSurface")]
        public void Drag_Toolbox_Sequence_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem sequence = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FlowTools.Sequence;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom sequence1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Sequence;
            #endregion

            // Type 'Sequence' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Sequence_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 131));
            Mouse.StartDragging(sequence, new Point(18, -12));
            Mouse.StopDragging(flowchart, new Point(305, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sequence_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfSequenceActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sequence_Onto_DesignSurfaceParams.SequenceExists, sequence1.Exists, "Sequence on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Service_Picker_Onto_DesignSurface - Use 'Drag_Toolbox_Service_Picker_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Service Picker Onto DesignSurface")]
        public void Drag_Toolbox_Service_Picker_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem service = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.ResourceTools.Service;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfButton cancel = this.ServicePickerDialog.Cancel;
            #endregion

            // Type 'Service' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Service_Picker_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(304, 126));
            Mouse.StartDragging(service, new Point(50, 5));
            Mouse.StopDragging(flowchart, new Point(304, 126));

            // Verify that the 'Exists' property of 'Cancel' button equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Service_Picker_Onto_DesignSurfaceParams.CancelExists, cancel.Exists, "Service picker dialog cancel button does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_CopyFile_Onto_DesignSurface - Use 'Drag_Toolbox_Sharepoint_CopyFile_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Sharepoint CopyFile Onto DesignSurface")]
        public void Drag_Toolbox_Sharepoint_CopyFile_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem copyFile = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.SharepointTools.CopyFile;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfComboBox server = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCopyFile.SmallView.Server;
            #endregion

            // Type 'Copy File' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Sharepoint_CopyFile_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(311, 128));
            Mouse.StartDragging(copyFile, new Point(10, 16));
            Mouse.StopDragging(flowchart, new Point(311, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_CopyFile_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'UI__Database_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_CopyFile_Onto_DesignSurfaceParams.ServerExists, server.Exists, "server lookup does not exist on the sharepoin smal view");
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Create_Onto_DesignSurface - Use 'Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Sharepoint Create Onto DesignSurface")]
        public void Drag_Toolbox_Sharepoint_Create_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem createListItems = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.SharepointTools.CreateListItems;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfComboBox server = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreateListItem.SmallView.Server;
            WpfComboBox list = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreateListItem.SmallView.List;
            #endregion

            // Type 'Create List Item' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(311, 128));
            Mouse.StartDragging(createListItems, new Point(10, 16));
            Mouse.StopDragging(flowchart, new Point(311, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'UI__Database_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams.ServerExists, server.Exists, "server lookup does not exist on the sharepoin smal view");

            // Verify that the 'Exists' property of 'UI__TableName_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams.ListExists, list.Exists, "sharepint list does not exist on the sharepoint small view");
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurface - Use 'Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Sharepoint Delete Onto DesignSurface")]
        public void Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem deleteListItems = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.SharepointTools.DeleteListItems;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Delete List Item' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 131));
            Mouse.StartDragging(deleteListItems, new Point(16, 5));
            Mouse.StopDragging(flowchart, new Point(306, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Download_File_Onto_DesignSurface - Use 'Drag_Toolbox_Sharepoint_Download_File_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Sharepoint Download File Onto DesignSurface")]
        public void Drag_Toolbox_Sharepoint_Download_File_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfListItem downloadFile = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.SharepointTools.DownloadFile;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom smallView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointDownloadFile.SmallView;
            #endregion

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 129));
            Mouse.StartDragging(downloadFile, new Point(124, 593));
            Mouse.StopDragging(flowchart, new Point(307, 129));

            // Verify that the 'Exists' property of 'SmallViewContent' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_Download_File_Onto_DesignSurfaceParams.SmallViewExists, smallView.Exists, "Sharepoint delete tool small view does does not exist after dragging tool from to" +
                    "olbox.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_MoveFile_Onto_DesignSurface - Use 'Drag_Toolbox_Sharepoint_MoveFile_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Sharepoint MoveFile Onto DesignSurface")]
        public void Drag_Toolbox_Sharepoint_MoveFile_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem moveFile = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.SharepointTools.MoveFile;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfComboBox server = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointMoveFile.SmallView.Server;
            #endregion

            // Type 'Move' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Sharepoint_MoveFile_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(311, 128));
            Mouse.StartDragging(moveFile, new Point(10, 16));
            Mouse.StopDragging(flowchart, new Point(311, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_MoveFile_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'UI__Database_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_MoveFile_Onto_DesignSurfaceParams.ServerExists, server.Exists, "server lookup does not exist on the sharepoin smal view");
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Read_Onto_DesignSurface - Use 'Drag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Sharepoint Read Onto DesignSurface")]
        public void Drag_Toolbox_Sharepoint_Read_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem readListItems = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.SharepointTools.ReadListItems;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Read List Item' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(303, 128));
            Mouse.StartDragging(readListItems, new Point(13, 15));
            Mouse.StopDragging(flowchart, new Point(303, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Update_Onto_DesignSurface - Use 'Drag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Sharepoint Update Onto DesignSurface")]
        public void Drag_Toolbox_Sharepoint_Update_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem updateListItems = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.SharepointTools.UpdateListItems;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Update List Item' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(300, 127));
            Mouse.StartDragging(updateListItems, new Point(17, 9));
            Mouse.StopDragging(flowchart, new Point(300, 127));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_UploadFile_Onto_DesignSurface - Use 'Drag_Toolbox_Sharepoint_UploadFile_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Sharepoint UploadFile Onto DesignSurface")]
        public void Drag_Toolbox_Sharepoint_UploadFile_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem uploadFile = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.SharepointTools.UploadFile;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom smallView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUploadFile.SmallView;
            #endregion

            // Type 'Upload' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Sharepoint_UploadFile_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(311, 128));
            Mouse.StartDragging(uploadFile, new Point(10, 16));
            Mouse.StopDragging(flowchart, new Point(311, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_UploadFile_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'SmallViewContent' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sharepoint_UploadFile_Onto_DesignSurfaceParams.SmallViewExists, smallView.Exists, "Small view does not exist on sharepoint upload file after dragging in from the to" +
                    "olbox.");
        }
        
        /// <summary>
        /// Drag_Toolbox_SMTP_Email_Onto_DesignSurface - Use 'Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox SMTP Email Onto DesignSurface")]
        public void Drag_Toolbox_SMTP_Email_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem sMTPSend = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.Email.SMTPSend;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom sMTPEmail = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SMTPEmail;
            #endregion

            // Type 'SMTP Send' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 129));
            Mouse.StartDragging(sMTPSend, new Point(16, -39));
            Mouse.StopDragging(flowchart, new Point(308, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfSendEmailActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams.SMTPEmailExists, sMTPEmail.Exists, "Email tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Sort_Record_Onto_DesignSurface - Use 'Drag_Toolbox_Sort_Record_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Sort Record Onto DesignSurface")]
        public void Drag_Toolbox_Sort_Record_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem sort = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.Sort;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Sort' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Sort_Record_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(300, 122));
            Mouse.StartDragging(sort, new Point(7, 8));
            Mouse.StopDragging(flowchart, new Point(300, 122));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Sort_Record_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurface - Use 'Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox SQL Bulk Insert Onto DesignSurface")]
        public void Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem sQLBulkInsert = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.Database.SQLBulkInsert;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom sqlBulkInsert1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Type 'SQL Bulk Insert' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 129));
            Mouse.StartDragging(sQLBulkInsert, new Point(11, 16));
            Mouse.StopDragging(flowchart, new Point(304, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams.SqlBulkInsertExists, sqlBulkInsert1.Exists, "Sql Bulk Insert tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurface - Use 'Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox SQL Server Tool Onto DesignSurface")]
        public void Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem sQLServer = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.Database.SQLServer;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'SQL Server' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 127));
            Mouse.StartDragging(sQLServer, new Point(10, -7));
            Mouse.StopDragging(flowchart, new Point(304, 127));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Switch_Onto_DesignSurface - Use 'Drag_Toolbox_Switch_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Switch Onto DesignSurface")]
        public void Drag_Toolbox_Switch_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem switch1 = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FlowTools.Switch;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfButton doneButton = this.DecisionOrSwitchDialog.DoneButton;
            #endregion

            // Type 'Switch' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Switch_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(303, 126));
            Mouse.StartDragging(switch1, new Point(22, 30));
            Mouse.StopDragging(flowchart, new Point(303, 126));

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Switch_Onto_DesignSurfaceParams.DoneButtonExists, doneButton.Exists, "Decision dialog done button does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_System_Information_Onto_DesignSurface - Use 'Drag_Toolbox_System_Information_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox System Information Onto DesignSurface")]
        public void Drag_Toolbox_System_Information_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem sysInfo = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.SysInfo;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom gatherSystemInfo = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo;
            #endregion

            // Type 'Sys Info' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_System_Information_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 129));
            Mouse.StartDragging(sysInfo, new Point(8, 12));
            Mouse.StopDragging(flowchart, new Point(304, 129));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_System_Information_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfGatherSystemInformationActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_System_Information_Onto_DesignSurfaceParams.GatherSystemInfoExists, gatherSystemInfo.Exists, "System Info tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Unique_Records_Onto_DesignSurface - Use 'Drag_Toolbox_Unique_Records_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Unique Records Onto DesignSurface")]
        public void Drag_Toolbox_Unique_Records_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem uniqueRecords = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.UniqueRecords;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            #endregion

            // Type 'Unique' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Unique_Records_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(2000);
            flowchart.EnsureClickable(new Point(304, 133));
            Mouse.StartDragging(uniqueRecords, new Point(43, 6));
            Mouse.StopDragging(flowchart, new Point(304, 133));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Unique_Records_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");
        }
        
        /// <summary>
        /// Drag_Toolbox_Unzip_Onto_DesignSurface - Use 'Drag_Toolbox_Unzip_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Unzip Onto DesignSurface")]
        public void Drag_Toolbox_Unzip_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem unZip = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.UnZip;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom unZip1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip;
            #endregion

            // Type 'Unzip' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Unzip_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 1 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(1000);
            flowchart.EnsureClickable(new Point(306, 128));
            Mouse.StartDragging(unZip, new Point(15, 15));
            Mouse.StopDragging(flowchart, new Point(306, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Unzip_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfUnZip' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Unzip_Onto_DesignSurfaceParams.UnZipExists, unZip1.Exists, "Unzip on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Web_Request_Onto_DesignSurface - Use 'Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Web Request Onto DesignSurface")]
        public void Drag_Toolbox_Web_Request_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem webRequest = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.WebRequest;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom webRequest1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebRequest;
            #endregion

            // Type 'Web Request' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 128));
            Mouse.StartDragging(webRequest, new Point(14, 3));
            Mouse.StopDragging(flowchart, new Point(308, 128));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfWebRequestActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams.WebRequestExists, webRequest1.Exists, "Web Request on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Write_File_Onto_DesignSurface - Use 'Drag_Toolbox_Write_File_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Write File Onto DesignSurface")]
        public void Drag_Toolbox_Write_File_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem writeFile = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.WriteFile;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom fileWrite = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite;
            #endregion

            // Type 'Write File' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Write_File_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 1 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(1000);
            flowchart.EnsureClickable(new Point(306, 132));
            Mouse.StartDragging(writeFile, new Point(10, 18));
            Mouse.StopDragging(flowchart, new Point(306, 132));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Write_File_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfFileWrite' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Write_File_Onto_DesignSurfaceParams.FileWriteExists, fileWrite.Exists, "Write File tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_XPath_Onto_DesignSurface - Use 'Drag_Toolbox_XPath_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox XPath Onto DesignSurface")]
        public void Drag_Toolbox_XPath_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem xPath = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.XPath;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom xPath1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Type 'XPath' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_XPath_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 2 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(1500);
            flowchart.EnsureClickable(new Point(307, 123));
            Mouse.StartDragging(xPath, new Point(12, -13));
            Mouse.StopDragging(flowchart, new Point(307, 123));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_XPath_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_XPath_Onto_DesignSurfaceParams.XPathExists, xPath1.Exists, "XPath tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Drag_Toolbox_Zip_Onto_DesignSurface - Use 'Drag_Toolbox_Zip_Onto_DesignSurfaceParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Drag Toolbox Zip Onto DesignSurface")]
        public void Drag_Toolbox_Zip_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            WpfListItem zip = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Zip;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom connector1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Connector1;
            WpfCustom zip1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip;
            #endregion

            // Type 'Zip' in 'SearchTextBox' text box
            searchTextBox.Text = this.Drag_Toolbox_Zip_Onto_DesignSurfaceParams.SearchTextBoxText;

            // Wait for 1 seconds for user delay between actions; Move 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item to 'Flowchart' custom control
            Playback.Wait(1000);
            flowchart.EnsureClickable(new Point(306, 131));
            Mouse.StartDragging(zip, new Point(16, 4));
            Mouse.StopDragging(flowchart, new Point(306, 131));

            // Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Zip_Onto_DesignSurfaceParams.Connector1Exists, connector1.Exists, "No connectors exist on design surface.");

            // Verify that the 'Exists' property of 'DsfZip' custom control equals 'True'
            Assert.AreEqual(this.Drag_Toolbox_Zip_Onto_DesignSurfaceParams.ZipExists, zip1.Exists, "Zip tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Duplicate_Explorer_Localhost_First_Item_With_Context_Menu - Use 'Duplicate_Explorer_Localhost_First_Item_With_Context_MenuParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Duplicate Explorer Localhost First Item With Context Menu")]
        public void Duplicate_Explorer_Localhost_First_Item_With_Context_Menu()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            WpfMenuItem duplicate = this.MainStudioWindow.ExplorerContextMenu.Duplicate;
            WpfWindow saveDialogWindow = this.SaveDialogWindow;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, MouseButtons.Right, ModifierKeys.None, new Point(107, 9));

            // Verify that the 'Exists' property of 'Duplicate' menu item equals 'True'
            Assert.AreEqual(this.Duplicate_Explorer_Localhost_First_Item_With_Context_MenuParams.DuplicateExists, duplicate.Exists, "Duplicate does not exist in explorer context menu.");

            // Click 'Duplicate' menu item
            Mouse.Click(duplicate, new Point(62, 10));

            // Verify that the 'Exists' property of 'SaveDialogView' window equals 'True'
            Assert.AreEqual(this.Duplicate_Explorer_Localhost_First_Item_With_Context_MenuParams.SaveDialogWindowExists, saveDialogWindow.Exists, "Duplicate dialog does not exist after clicking duplicate in the explorer context " +
                    "menu.");
        }
        
        /// <summary>
        /// Enter_DeployViewOnly_Into_Deploy_Source_Filter - Use 'Enter_DeployViewOnly_Into_Deploy_Source_FilterParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter DeployViewOnly Into Deploy Source Filter")]
        public void Enter_DeployViewOnly_Into_Deploy_Source_Filter()
        {
            #region Variable Declarations
            WpfEdit searchTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab.WorkSurfaceContext.SourceServerExplorer.SearchTextbox;
            WpfTreeItem firstExplorerTreeItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab.WorkSurfaceContext.SourceServerExplorer.ExplorerTree.SourceServerName.FirstExplorerTreeItem;
            WpfCheckBox checkBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab.WorkSurfaceContext.SourceServerExplorer.ExplorerTree.SourceServerName.FirstExplorerTreeItem.CheckBox;
            #endregion

            // Type 'DeployViewOnly' in 'SearchTextBox' text box
            searchTextbox.Text = this.Enter_DeployViewOnly_Into_Deploy_Source_FilterParams.SearchTextboxText;

            // Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
            Assert.AreEqual(this.Enter_DeployViewOnly_Into_Deploy_Source_FilterParams.FirstExplorerTreeItemExists, firstExplorerTreeItem.Exists, "First deploy tab source explorer item does not exist after filter is applied.");

            // Verify that the 'Exists' property of 'ResourceNameCheckBox' check box equals 'True'
            Assert.AreEqual(this.Enter_DeployViewOnly_Into_Deploy_Source_FilterParams.CheckBoxExists, checkBox.Exists, "Deploy source server explorer tree first item checkbox does not exist.");
        }
        
        /// <summary>
        /// Enter_Dice_Roll_Values - Use 'Enter_Dice_Roll_ValuesParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Dice Roll Values")]
        public void Enter_Dice_Roll_Values()
        {
            #region Variable Declarations
            WpfEdit fromTextEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random.SmallView.From.FromTextEdit;
            WpfEdit toTextEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random.SmallView.To.ToTextEdit;
            #endregion

            // Verify that the 'Exists' property of 'Text' text box equals 'True'
            Assert.AreEqual(this.Enter_Dice_Roll_ValuesParams.FromTextEditExists, fromTextEdit.Exists, "From textbox does not exist");

            // Type '1' in 'Text' text box
            fromTextEdit.Text = this.Enter_Dice_Roll_ValuesParams.FromTextEditText;

            // Verify that the 'Exists' property of 'Text' text box equals 'True'
            Assert.AreEqual(this.Enter_Dice_Roll_ValuesParams.ToTextEditExists, toTextEdit.Exists, "To textbox does not exist");

            // Type '6' in 'Text' text box
            toTextEdit.Text = this.Enter_Dice_Roll_ValuesParams.ToTextEditText;
        }
        
        /// <summary>
        /// Enter_Duplicate_workflow_name - Use 'Enter_Duplicate_workflow_nameParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Duplicate workflow name")]
        public void Enter_Duplicate_workflow_name()
        {
            #region Variable Declarations
            WpfEdit serviceNameTextBox = this.SaveDialogWindow.ServiceNameTextBox;
            #endregion

            // Type 'DuplicatedWorkFlow' in 'ServiceNameTextBox' text box
            serviceNameTextBox.Text = this.Enter_Duplicate_workflow_nameParams.ServiceNameTextBoxText;
        }
        
        /// <summary>
        /// Enter_InputDebug_value - Use 'Enter_InputDebug_valueParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter InputDebug value")]
        public void Enter_InputDebug_value()
        {
            #region Variable Declarations
            WpfPane row1 = this.MainStudioWindow.DebugInputDialog.TabItemsTabList.InputDataTab.InputsTable.Row1;
            WpfEdit inputValueText = this.MainStudioWindow.DebugInputDialog.TabItemsTabList.InputDataTab.InputsTable.Row1.InputValueCell.InputValueComboboxl.InputValueText;
            #endregion

            // Verify that the 'Exists' property of 'Row1' pane equals 'True'
            Assert.AreEqual(this.Enter_InputDebug_valueParams.Row1Exists, row1.Exists, "InputData row does not exist.");

            // Verify that the 'Exists' property of 'Text' text box equals 'True'
            Assert.AreEqual(this.Enter_InputDebug_valueParams.InputValueTextExists, inputValueText.Exists, "InputData row does not exist.");

            // Type '100' in 'Text' text box
            inputValueText.Text = this.Enter_InputDebug_valueParams.InputValueTextText;
        }
        
        /// <summary>
        /// Enter_LocalSchedulerAdmin_Credentials_Into_Scheduler_Tab - Use 'Enter_LocalSchedulerAdmin_Credentials_Into_Scheduler_TabParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter LocalSchedulerAdmin Credentials Into Scheduler Tab")]
        public void Enter_LocalSchedulerAdmin_Credentials_Into_Scheduler_Tab()
        {
            #region Variable Declarations
            WpfEdit userNameTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SchedulerTab.WorkSurfaceContext.SchedulerView.UserNameTextBoxEdit;
            WpfEdit passwordTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SchedulerTab.WorkSurfaceContext.SchedulerView.PasswordTextbox;
            #endregion

            // Type 'LocalSchedulerAdmin' in 'UI_UserNameTextBox' text box
            userNameTextBoxEdit.Text = this.Enter_LocalSchedulerAdmin_Credentials_Into_Scheduler_TabParams.UserNameTextBoxEditText;

            // Type '987Sched#@!' in 'UI_PasswordBox' text box
            passwordTextbox.Text = this.Enter_LocalSchedulerAdmin_Credentials_Into_Scheduler_TabParams.PasswordTextboxText;
        }
        
        /// <summary>
        /// Enter_Public_As_Windows_Group - Use 'Enter_Public_As_Windows_GroupParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Public As Windows Group")]
        public void Enter_Public_As_Windows_Group()
        {
            #region Variable Declarations
            WpfEdit addWindowsGroupsEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab.SecurityWindow.ResourcePermissions.Row1.WindowsGroupCell.AddWindowsGroupsEdit;
            #endregion

            // Type 'Public' in 'UI__AddWindowsGroupsTextBox_AutoID' text box
            addWindowsGroupsEdit.Text = this.Enter_Public_As_Windows_GroupParams.AddWindowsGroupsEditText;
        }
        
        /// <summary>
        /// Enter_RunAsUser_Username_And_Password - Use 'Enter_RunAsUser_Username_And_PasswordParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter RunAsUser Username And Password")]
        public void Enter_RunAsUser_Username_And_Password()
        {
            #region Variable Declarations
            WpfEdit usernameTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.TestsTabPage.WorkSurfaceContext.ServiceTestView.UsernameTextBoxEdit;
            WpfEdit passwordTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.TestsTabPage.WorkSurfaceContext.ServiceTestView.PasswordTextBoxEdit;
            #endregion

            // Type 'testuser' in 'UsernameTextBox' text box
            usernameTextBoxEdit.Text = this.Enter_RunAsUser_Username_And_PasswordParams.UsernameTextBoxEditText;

            // Type '{Tab}' in 'UsernameTextBox' text box
            Keyboard.SendKeys(usernameTextBoxEdit, this.Enter_RunAsUser_Username_And_PasswordParams.UsernameTextBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'PasswordTextBox' text box
            Keyboard.SendKeys(passwordTextBoxEdit, this.Enter_RunAsUser_Username_And_PasswordParams.PasswordTextBoxEditSendKeys, true);
        }
        
        /// <summary>
        /// Enter_Sharepoint_Server_Path_From_OnCopyFile_Tool - Use 'Enter_Sharepoint_Server_Path_From_OnCopyFile_ToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Sharepoint Server Path From OnCopyFile Tool")]
        public void Enter_Sharepoint_Server_Path_From_OnCopyFile_Tool()
        {
            #region Variable Declarations
            WpfEdit textEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCopyFile.SmallView.FromDirectoryComboBox.TextEdit;
            #endregion

            // Type 'clocks.dat' in 'Text' text box
            textEdit.Text = this.Enter_Sharepoint_Server_Path_From_OnCopyFile_ToolParams.TextEditText;
        }
        
        /// <summary>
        /// Enter_Sharepoint_Server_Path_From_OnMoveFile_Tool - Use 'Enter_Sharepoint_Server_Path_From_OnMoveFile_ToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Sharepoint Server Path From OnMoveFile Tool")]
        public void Enter_Sharepoint_Server_Path_From_OnMoveFile_Tool()
        {
            #region Variable Declarations
            WpfEdit textEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointMoveFile.SmallView.FromDirectoryComboBox.TextEdit;
            #endregion

            // Type 'clocks.dat' in 'Text' text box
            textEdit.Text = this.Enter_Sharepoint_Server_Path_From_OnMoveFile_ToolParams.TextEditText;
        }
        
        /// <summary>
        /// Enter_Sharepoint_Server_Path_From_OnUpload_Tool - Use 'Enter_Sharepoint_Server_Path_From_OnUpload_ToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Sharepoint Server Path From OnUpload Tool")]
        public void Enter_Sharepoint_Server_Path_From_OnUpload_Tool()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUploadFile.SmallView.LocalPathFromIntellisenseCombobox.Textbox;
            #endregion

            // Type 'clocks.dat' in 'Text' text box
            textbox.Text = this.Enter_Sharepoint_Server_Path_From_OnUpload_ToolParams.TextboxText;
        }
        
        /// <summary>
        /// Enter_Sharepoint_Server_Path_To_OnCopyFile_Tool - Use 'Enter_Sharepoint_Server_Path_To_OnCopyFile_ToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Sharepoint Server Path To OnCopyFile Tool")]
        public void Enter_Sharepoint_Server_Path_To_OnCopyFile_Tool()
        {
            #region Variable Declarations
            WpfEdit textEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCopyFile.SmallView.PathDirectoryComboBox.TextEdit;
            #endregion

            // Type 'TestFolder/clocks.dat' in 'Text' text box
            textEdit.Text = this.Enter_Sharepoint_Server_Path_To_OnCopyFile_ToolParams.TextEditText;
        }
        
        /// <summary>
        /// Enter_Sharepoint_Server_Path_To_OnMoveFile_Tool - Use 'Enter_Sharepoint_Server_Path_To_OnMoveFile_ToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Sharepoint Server Path To OnMoveFile Tool")]
        public void Enter_Sharepoint_Server_Path_To_OnMoveFile_Tool()
        {
            #region Variable Declarations
            WpfEdit textEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointMoveFile.SmallView.PathDirectoryComboBox.TextEdit;
            #endregion

            // Type 'TestFolder/clocks.dat' in 'Text' text box
            textEdit.Text = this.Enter_Sharepoint_Server_Path_To_OnMoveFile_ToolParams.TextEditText;
        }
        
        /// <summary>
        /// Enter_Sharepoint_Server_Path_To_OnUpload_Tool - Use 'Enter_Sharepoint_Server_Path_To_OnUpload_ToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Sharepoint Server Path To OnUpload Tool")]
        public void Enter_Sharepoint_Server_Path_To_OnUpload_Tool()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUploadFile.SmallView.ServerPathToIntellisenseCombobox.Textbox;
            #endregion

            // Type 'TestFolder/clocks.dat' in 'Text' text box
            textbox.Text = this.Enter_Sharepoint_Server_Path_To_OnUpload_ToolParams.TextboxText;
        }
        
        /// <summary>
        /// Enter_Sharepoint_ServerSource_ServerName - Use 'Enter_Sharepoint_ServerSource_ServerNameParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Sharepoint ServerSource ServerName")]
        public void Enter_Sharepoint_ServerSource_ServerName()
        {
            #region Variable Declarations
            WpfEdit serverNameEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SharepointServerSourceTab.SharepointServerSourceView.SharepointView.ServerNameEdit;
            #endregion

            // Type 'http://rsaklfsvrsharep/' in 'ServerName' text box
            serverNameEdit.Text = this.Enter_Sharepoint_ServerSource_ServerNameParams.ServerNameEditText;
        }
        
        /// <summary>
        /// Enter_Sharepoint_ServerSource_User_Credentials - Use 'Enter_Sharepoint_ServerSource_User_CredentialsParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Sharepoint ServerSource User Credentials")]
        public void Enter_Sharepoint_ServerSource_User_Credentials()
        {
            #region Variable Declarations
            WpfEdit userNameTextBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SharepointServerSourceTab.SharepointServerSourceView.SharepointView.UserNameTextBox;
            WpfEdit passwordTextBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SharepointServerSourceTab.SharepointServerSourceView.SharepointView.PasswordTextBox;
            #endregion

            // Type 'Bernartdt@dvtdev.onmicrosoft.com' in 'UserNameTextBox' text box
            userNameTextBox.Text = this.Enter_Sharepoint_ServerSource_User_CredentialsParams.UserNameTextBoxText;

            // Click 'PasswordTextBox' text box
            Mouse.Click(passwordTextBox, new Point(89, 1));

            // Type '********' in 'PasswordTextBox' text box
            Keyboard.SendKeys(passwordTextBox, this.Enter_Sharepoint_ServerSource_User_CredentialsParams.PasswordTextBoxSendKeys, true);
        }
        
        /// <summary>
        /// Enter_SomeData_Into_Base_Convert_Large_View_Row1_Value_Textbox - Use 'Enter_SomeData_Into_Base_Convert_Large_View_Row1_Value_TextboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter SomeData Into Base Convert Large View Row1 Value Textbox")]
        public void Enter_SomeData_Into_Base_Convert_Large_View_Row1_Value_Textbox()
        {
            #region Variable Declarations
            WpfEdit valueTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert.LargeView.DataGrid.Row1.Cell.Listbox.ValueTextbox;
            #endregion

            // Type 'SomeData' in 'UI__Row1_FromExpressiontxt_AutoID' text box
            valueTextbox.Text = this.Enter_SomeData_Into_Base_Convert_Large_View_Row1_Value_TextboxParams.ValueTextboxText;
        }
        
        /// <summary>
        /// Enter_SomeVariable_Into_Calculate_Large_View_Function_Textbox - Use 'Enter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter SomeVariable Into Calculate Large View Function Textbox")]
        public void Enter_SomeVariable_Into_Calculate_Large_View_Function_Textbox()
        {
            #region Variable Declarations
            WpfEdit functionTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate.LargeView.Listbox.FunctionTextbox;
            #endregion

            // Type '[[SomeVariable]]' in 'FunctionTextbox' text box
            functionTextbox.Text = this.Enter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams.FunctionTextboxText;

            // Verify that the 'Text' property of 'FunctionTextbox' text box equals '[[SomeVariable]]'
            Assert.AreEqual(this.Enter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams.FunctionTextboxText1, functionTextbox.Text, "Calculate large view function textbox text does not equal \"[[SomeVariable]]\"");
        }
        
        /// <summary>
        /// Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableName - Use 'Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Text Into Assign Large View Row1 Variable Textbox As SomeInvalidVariableName")]
        public void Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableName()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.LargeView.DataGrid.Row1.VariableCell.Listbox.Textbox;
            #endregion

            // Type '[[Some$Invalid%Variable]]' in 'UI__Row1_FieldName_AutoID' text box
            textbox.Text = this.Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams.TextboxText;

            // Verify that the 'Text' property of 'UI__Row1_FieldName_AutoID' text box equals '[[Some$Invalid%Variable]]'
            Assert.AreEqual(this.Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams.TextboxText1, textbox.Text, "Multiassign small view row 1 variable textbox text does not equal \"[[Some$Invalid" +
                    "%Variable]]\".");
        }
        
        /// <summary>
        /// Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariable - Use 'Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Text Into Assign Large View Row1 Variable Textbox As SomeVariable")]
        public void Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariable()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.LargeView.DataGrid.Row1.VariableCell.Listbox.Textbox;
            #endregion

            // Type '[[Some{Down}{Enter}Variable]]' in 'UI__Row1_FieldName_AutoID' text box
            Keyboard.SendKeys(textbox, this.Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams.TextboxSendKeys, ModifierKeys.None);

            // Verify that the 'Text' property of 'UI__Row1_FieldName_AutoID' text box equals '[[SomeVariable]]'
            Assert.AreEqual(this.Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams.TextboxText, textbox.Text, "Assign large view row1 variable textbox text does not equal \"[[SomeVariable]]\"");
        }
        
        /// <summary>
        /// Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_Suggestion - Use 'Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Text Into Assign Small View Row1 Value Textbox As SomeVariable Using Click Intellisense Suggestion")]
        public void Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_Suggestion()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row1.VariableCell.Listbox.Textbox;
            WpfListItem listItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row1.VariableCell.Listbox.ListItem;
            #endregion

            // Type '[[' in 'UI_TextBox_AutoID' text box
            textbox.Text = this.Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams.TextboxText;

            // Click 'SomeVariableListItem' list item
            Mouse.Click(listItem, new Point(39, 10));

            // Verify that the 'Text' property of 'UI_TextBox_AutoID' text box equals '[[SomeVariable]]'
            Assert.AreEqual(this.Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams.TextboxText1, textbox.Text, "Multiassign small view row 1 variable textbox text does not equal \"[[SomeVariable" +
                    "]]\".");
        }
        
        /// <summary>
        /// Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisense - Use 'Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Text Into Assign Small View Row1 Value Textbox As SomeVariable UsingIntellisense")]
        public void Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisense()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row1.VariableCell.Listbox.Textbox;
            #endregion

            // Type '[[{Down}{Enter}' in 'UI_TextBox_AutoID' text box
            Keyboard.SendKeys(textbox, this.Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams.TextboxSendKeys, ModifierKeys.None);

            // Verify that the 'Text' property of 'UI_TextBox_AutoID' text box equals '[[SomeVariable]]'
            Assert.AreEqual(this.Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams.TextboxText, textbox.Text, "Multiassign small view row 1 variable textbox text does not equal \"[[SomeVariable" +
                    "]]\".");
        }
        
        /// <summary>
        /// Enter_Text_Into_Workflow_Tests_OutPutTable_Row1_Value_Textbox_As_CodedUITest - Use 'Enter_Text_Into_Workflow_Tests_OutPutTable_Row1_Value_Textbox_As_CodedUITestParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Text Into Workflow Tests OutPutTable Row1 Value Textbox As CodedUITest")]
        public void Enter_Text_Into_Workflow_Tests_OutPutTable_Row1_Value_Textbox_As_CodedUITest()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.TestsTabPage.WorkSurfaceContext.ServiceTestView.TestOutputsTable.Row1.Cell.IntellisenseComboBox.Textbox;
            #endregion

            // Type 'Helo User' in 'Text' text box
            Keyboard.SendKeys(textbox, this.Enter_Text_Into_Workflow_Tests_OutPutTable_Row1_Value_Textbox_As_CodedUITestParams.TextboxSendKeys, ModifierKeys.None);

            // Verify that the 'Text' property of 'Text' text box equals 'Hello User'
            Assert.AreEqual(this.Enter_Text_Into_Workflow_Tests_OutPutTable_Row1_Value_Textbox_As_CodedUITestParams.TextboxText, textbox.Text, "Workflow tests output tabe row 1 value textbox text does not equal Helo User afte" +
                    "r typing that in.");
        }
        
        /// <summary>
        /// Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITest - Use 'Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Enter Text Into Workflow Tests Row1 Value Textbox As CodedUITest")]
        public void Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITest()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.TestsTabPage.WorkSurfaceContext.ServiceTestView.TestInputsTable.Row1.Cell.IntellisenseComboBox.Textbox;
            #endregion

            // Type 'User' in 'Text' text box
            Keyboard.SendKeys(textbox, this.Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams.TextboxSendKeys, ModifierKeys.None);

            // Verify that the 'Text' property of 'Text' text box equals 'User'
            Assert.AreEqual(this.Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams.TextboxText, textbox.Text, "Workflow tests row 1 value textbox text does not equal User after typing that in." +
                    "");
        }
        
        /// <summary>
        /// Filter_variables - Use 'Filter_variablesParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Filter variables")]
        public void Filter_variables()
        {
            #region Variable Declarations
            WpfText filterText = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.DatalistView.SearchTextbox.FilterText;
            WpfEdit searchTextbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.DatalistView.SearchTextbox;
            #endregion

            // Verify that the 'Exists' property of 'Filter' label equals 'True'
            Assert.AreEqual(this.Filter_variablesParams.FilterTextExists, filterText.Exists, "Variable filter textbox does not exist");

            // Click 'SearchTextBox' text box
            Mouse.Click(searchTextbox, new Point(89, 7));

            // Type 'Other' in 'SearchTextBox' text box
            searchTextbox.Text = this.Filter_variablesParams.SearchTextboxText;
        }
        
        /// <summary>
        /// Move_AcceptanceTestd_To_AcceptanceTestingResopurces
        /// </summary>
        [When(@"I Move AcceptanceTestd To AcceptanceTestingResopurces")]
        public void Move_AcceptanceTestd_To_AcceptanceTestingResopurces()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            WpfTreeItem secondItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.SecondItem;
            #endregion

            // Move 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item to 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            //System parameter 'Show window contents while dragging' is not set.This could lead to incorrect recording of drag actions.
            secondItem.EnsureClickable(new Point(10, 10));
            Mouse.StartDragging(firstItem, new Point(94, 11));
            Mouse.StopDragging(secondItem, new Point(10, 10));
        }
        
        /// <summary>
        /// Move_Dice_Roll_To_Localhost
        /// </summary>
        [When(@"I Move Dice Roll To Localhost")]
        public void Move_Dice_Roll_To_Localhost()
        {
            #region Variable Declarations
            WpfTreeItem secondItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.SecondItem;
            WpfTreeItem localhost = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost;
            #endregion

            // Move 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item to 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            localhost.EnsureClickable(new Point(10, 10));
            Mouse.StartDragging(secondItem, new Point(92, 4));
            Mouse.StopDragging(localhost, new Point(10, 10));
        }
        
        /// <summary>
        /// Open_AggregateCalculate_Tool_large_view - Use 'Open_AggregateCalculate_Tool_large_viewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open AggregateCalculate Tool large view")]
        public void Open_AggregateCalculate_Tool_large_view()
        {
            #region Variable Declarations
            WpfCustom aggregateCalculat = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AggregateCalculat;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AggregateCalculat.DoneButton;
            WpfGroup onErrorGroup = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AggregateCalculat.LargeViewContentCustom.OnErrorCustom.OnErrorGroup;
            WpfComboBox resultComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AggregateCalculat.LargeViewContentCustom.ResultComboBox;
            WpfComboBox fxComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AggregateCalculat.LargeViewContentCustom.fxComboBox;
            #endregion

            // Double-Click 'DsfAggregateCalculateActivity' custom control
            Mouse.DoubleClick(aggregateCalculat, new Point(136, 13));

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_AggregateCalculate_Tool_large_viewParams.DoneButtonExists, doneButton.Exists, "Done button does not exist after opening Aggregate Calculate tool large view");

            // Verify that the 'Exists' property of 'On Error' group equals 'True'
            Assert.AreEqual(this.Open_AggregateCalculate_Tool_large_viewParams.OnErrorGroupExists, onErrorGroup.Exists, "On Error group does not exist after opening Aggregate Calculate tool large view");

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_AggregateCalculate_Tool_large_viewParams.ResultComboBoxExists, resultComboBox.Exists, "Results combobox does not exist after opening Aggregate Calculate tool large view" +
                    "");

            // Verify that the 'Exists' property of 'UI__fxtxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_AggregateCalculate_Tool_large_viewParams.fxComboBoxExists, fxComboBox.Exists, "fx combobox does not exist after opening Aggregate Calculate tool large view");
        }
        
        /// <summary>
        /// Open_Assign_Tool_Large_View - Use 'Open_Assign_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Assign Tool Large View")]
        public void Open_Assign_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom multiAssign = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign;
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.LargeView.DataGrid.Row1.VariableCell.Listbox.Textbox;
            #endregion

            // Double-Click 'DsfMultiAssignActivity' custom control
            Mouse.DoubleClick(multiAssign, new Point(145, 5));

            // Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Assign_Tool_Large_ViewParams.MultiAssignExists, multiAssign.Exists, "Assign tool large view on the design surface does not exist");

            // Verify that the 'Exists' property of 'UI__Row1_FieldName_AutoID' text box equals 'True'
            Assert.AreEqual(this.Open_Assign_Tool_Large_ViewParams.TextboxExists, textbox.Exists, "Assign large view row 1 variable textbox does not exist");
        }
        
        /// <summary>
        /// Open_Assign_Tool_Qvi_Large_View - Use 'Open_Assign_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Assign Tool Qvi Large View")]
        public void Open_Assign_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.OpenQuickVariableInpToggleButton;
            WpfCustom quickVariableInputContent = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.QuickVariableInputContent;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Assign_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
            Assert.AreEqual(this.Open_Assign_Tool_Qvi_Large_ViewParams.QuickVariableInputContentExists, quickVariableInputContent.Exists, "QVI on assign is not open");
        }
        
        /// <summary>
        /// Open_AssignObject_Large_Tool - Use 'Open_AssignObject_Large_ToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open AssignObject Large Tool")]
        public void Open_AssignObject_Large_Tool()
        {
            #region Variable Declarations
            WpfCustom assignObject = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.DoneButton;
            WpfToggleButton openQuickVariableInput = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.OpenQuickVariableInput;
            WpfRow row1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.LargeView.DataGrid.Row1;
            WpfGroup onErrorGroup = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.LargeView.OnError.OnErrorGroup;
            #endregion

            // Double-Click 'DsfMultiAssignObjectActivity' custom control
            Mouse.DoubleClick(assignObject, new Point(159, 11));

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_AssignObject_Large_ToolParams.DoneButtonExists, doneButton.Exists, "Done button does not exist after dragging Assign Object tool on to the workflow s" +
                    "urface");

            // Verify that the 'Exists' property of 'Open Quick Variable Input' toggle button equals 'True'
            Assert.AreEqual(this.Open_AssignObject_Large_ToolParams.OpenQuickVariableInputExists, openQuickVariableInput.Exists, "OpenQuickVariableInput button does not exist after dragging Assign Object tool on" +
                    " to the workflow surface");

            // Verify that the 'Exists' property of 'UI_ActivityGridRow_0_AutoID' row equals 'True'
            Assert.AreEqual(this.Open_AssignObject_Large_ToolParams.Row1Exists, row1.Exists, "Row1 does not exist after dragging Assign Object tool on to the workflow surface");

            // Verify that the 'Exists' property of 'On Error' group equals 'True'
            Assert.AreEqual(this.Open_AssignObject_Large_ToolParams.OnErrorGroupExists, onErrorGroup.Exists, "OnErrorGroup does not exist after dragging Assign Object tool on to the workflow " +
                    "surface");
        }
        
        /// <summary>
        /// Open_AssignObject_QVI_LargeView - Use 'Open_AssignObject_QVI_LargeViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open AssignObject QVI LargeView")]
        public void Open_AssignObject_QVI_LargeView()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInput = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.OpenQuickVariableInput;
            WpfCustom quickVariableInputContent = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.QuickVariableInputContent;
            WpfComboBox qviSplitOnCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.QuickVariableInputContent.QviSplitOnCombobox;
            WpfCustom previewCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.QuickVariableInputContent.PreviewCustom;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInput.Pressed = this.Open_AssignObject_QVI_LargeViewParams.OpenQuickVariableInputPressed;

            // Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
            Assert.AreEqual(this.Open_AssignObject_QVI_LargeViewParams.QuickVariableInputContentExists, quickVariableInputContent.Exists, "QVI on assign object is not open");

            // Verify that the 'Exists' property of 'QviSplitOnCombobox' combo box equals 'True'
            Assert.AreEqual(this.Open_AssignObject_QVI_LargeViewParams.QviSplitOnComboboxExists, qviSplitOnCombobox.Exists, "QviSplitOnCombobox on assign object does not exist");

            // Verify that the 'Exists' property of 'Preview' custom control equals 'True'
            Assert.AreEqual(this.Open_AssignObject_QVI_LargeViewParams.PreviewCustomExists, previewCustom.Exists, "Qvi PreviewCustom on assign object does not exist");
        }
        
        /// <summary>
        /// Open_Base_Conversion_Tool_Large_View - Use 'Open_Base_Conversion_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Base Conversion Tool Large View")]
        public void Open_Base_Conversion_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom baseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert;
            WpfEdit valueTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert.LargeView.DataGrid.Row1.Cell.Listbox.ValueTextbox;
            #endregion

            // Double-Click 'DsfBaseConvertActivity' custom control
            Mouse.DoubleClick(baseConvert, new Point(160, 15));

            // Verify that the 'Enabled' property of 'UI__Row1_FromExpressiontxt_AutoID' text box equals 'True'
            Assert.AreEqual(this.Open_Base_Conversion_Tool_Large_ViewParams.ValueTextboxEnabled, valueTextbox.Enabled, "Base convert large view row 1 data testbox does not exist.");
        }
        
        /// <summary>
        /// Open_Base_Conversion_Tool_Qvi_Large_View - Use 'Open_Base_Conversion_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Base Conversion Tool Qvi Large View")]
        public void Open_Base_Conversion_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert.OpenQuickVariableInpToggleButton;
            WpfCustom baseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert;
            WpfCustom quickVariableInputContent = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert.QuickVariableInputContent;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Base_Conversion_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfBaseConvertActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Base_Conversion_Tool_Qvi_Large_ViewParams.BaseConvertExists, baseConvert.Exists, "Base Conversion QVI Window does not exist on the design surface");

            // Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
            Assert.AreEqual(this.Open_Base_Conversion_Tool_Qvi_Large_ViewParams.QuickVariableInputContentExists, quickVariableInputContent.Exists, "QVI on BaseConvert is not open");

            // Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
            Assert.AreEqual(this.Open_Base_Conversion_Tool_Qvi_Large_ViewParams.QuickVariableInputContentExists1, quickVariableInputContent.Exists, "QVI on BaseConvert is not open");
        }
        
        /// <summary>
        /// Open_Calculate_Tool_Large_View - Use 'Open_Calculate_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Calculate Tool Large View")]
        public void Open_Calculate_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom calculate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate;
            WpfCustom largeView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate.LargeView;
            WpfControl listbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate.LargeView.Listbox;
            WpfEdit functionTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate.LargeView.Listbox.FunctionTextbox;
            #endregion

            // Double-Click 'DsfCalculateActivity' custom control
            Mouse.DoubleClick(calculate, new Point(105, 7));

            // Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
            Assert.AreEqual(this.Open_Calculate_Tool_Large_ViewParams.LargeViewExists, largeView.Exists, "Calculate tool large view does not exist on design surface.");

            // Verify that the 'Exists' property of 'Listbox' combo box equals 'True'
            Assert.AreEqual(this.Open_Calculate_Tool_Large_ViewParams.ListboxExists, listbox.Exists, "Autocomplete listbox does not exisst on Calculate tool large view.");

            // Verify that the 'Exists' property of 'FunctionTextbox' text box equals 'True'
            Assert.AreEqual(this.Open_Calculate_Tool_Large_ViewParams.FunctionTextboxExists, functionTextbox.Exists, "Function textbox does not exist on calculate tool large view.");
        }
        
        /// <summary>
        /// Open_Case_Conversion_Tool_Large_View - Use 'Open_Case_Conversion_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Case Conversion Tool Large View")]
        public void Open_Case_Conversion_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom caseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert.DoneButton;
            WpfTable smallDataGridTable = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert.LargeViewContentCustom.SmallDataGridTable;
            WpfCustom onErrorCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert.LargeViewContentCustom.OnErrorCustom;
            #endregion

            // Double-Click 'DsfCaseConvertActivity' custom control
            Mouse.DoubleClick(caseConvert, new Point(136, 13));

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Case_Conversion_Tool_Large_ViewParams.DoneButtonExists, doneButton.Exists, "Done Button does not exist after opening Case Convert large view");

            // Verify that the 'Exists' property of 'SmallDataGrid' table equals 'True'
            Assert.AreEqual(this.Open_Case_Conversion_Tool_Large_ViewParams.SmallDataGridTableExists, smallDataGridTable.Exists, "Inputs grid does not exist after opening Case Convert large view");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_Case_Conversion_Tool_Large_ViewParams.OnErrorCustomExists, onErrorCustom.Exists, "OnErrorCustom group does not exist after opening Case Convert large view");
        }
        
        /// <summary>
        /// Open_Case_Conversion_Tool_Qvi_Large_View - Use 'Open_Case_Conversion_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Case Conversion Tool Qvi Large View")]
        public void Open_Case_Conversion_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert.OpenQuickVariableInpToggleButton;
            WpfCustom caseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert;
            WpfCustom quickVariableInputContent = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert.QuickVariableInputContent;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Case_Conversion_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfCaseConvertActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Case_Conversion_Tool_Qvi_Large_ViewParams.CaseConvertExists, caseConvert.Exists, "Case Conversion QVI Window does not exist on the design surface");

            // Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
            Assert.AreEqual(this.Open_Case_Conversion_Tool_Qvi_Large_ViewParams.QuickVariableInputContentExists, quickVariableInputContent.Exists, "QVI on CaseConvert is not open");
        }
        
        /// <summary>
        /// Open_CMD_Line_Tool_Large_View - Use 'Open_CMD_Line_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open CMD Line Tool Large View")]
        public void Open_CMD_Line_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom executeCommandLine = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            WpfComboBox scriptIntellisenseTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine.LargeViewContent.ScriptIntellisenseTextbox;
            WpfComboBox priorityComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine.LargeViewContent.PriorityComboBox;
            WpfComboBox resultIntellisenseTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine.LargeViewContent.ResultIntellisenseTextbox;
            WpfCustom onError = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine.LargeViewContent.OnError;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine.DoneButton;
            #endregion

            // Double-Click 'DsfExecuteCommandLineActivity' custom control
            Mouse.DoubleClick(executeCommandLine, new Point(174, 10));

            // Verify that the 'Exists' property of 'DsfExecuteCommandLineActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_CMD_Line_Tool_Large_ViewParams.ExecuteCommandLineExists, executeCommandLine.Exists, "CMD Line large view on the design surface does not exist");

            // Verify that the 'Exists' property of 'UI__Cmdtxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_CMD_Line_Tool_Large_ViewParams.ScriptIntellisenseTextboxExists, scriptIntellisenseTextbox.Exists, "CMD script textbox does not exist after openning tool large view with double clic" +
                    "k.");

            // Verify that the 'Exists' property of 'UI__CmdPriority_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_CMD_Line_Tool_Large_ViewParams.PriorityComboBoxExists, priorityComboBox.Exists, "CMD script priority combobox does not exist after openning tool large view with d" +
                    "ouble click.");

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_CMD_Line_Tool_Large_ViewParams.ResultIntellisenseTextboxExists, resultIntellisenseTextbox.Exists, "CMD script result textbox does not exist after openning tool large view with doub" +
                    "le click.");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_CMD_Line_Tool_Large_ViewParams.OnErrorExists, onError.Exists, "CMD script on error pane does not exist after openning tool large view with doubl" +
                    "e click.");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_CMD_Line_Tool_Large_ViewParams.DoneButtonExists, doneButton.Exists, "CMD script done button does not exist after openning tool large view with double " +
                    "click.");
        }
        
        /// <summary>
        /// Open_Context_Menu_OnDesignSurface
        /// </summary>
        [When(@"I Open Context Menu OnDesignSurface")]
        public void Open_Context_Menu_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Right-Click 'Flowchart' custom control
            Mouse.Click(flowchart, MouseButtons.Right, ModifierKeys.None, new Point(304, 286));
        }
        
        /// <summary>
        /// Open_Copy_Tool_Large_View - Use 'Open_Copy_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Copy Tool Large View")]
        public void Open_Copy_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathCopy = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy.DoneButton;
            WpfComboBox fileOrFolderComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy.LargeViewContentCustom.FileOrFolderComboBox;
            WpfComboBox destinationComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy.LargeViewContentCustom.DestinationComboBox;
            WpfCustom onErrorCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy.LargeViewContentCustom.OnErrorCustom;
            WpfCheckBox overwriteCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy.LargeViewContentCustom.OverwriteCheckBox;
            #endregion

            // Double-Click 'DsfPathCopy' custom control
            Mouse.DoubleClick(pathCopy, new Point(144, 11));

            // Verify that the 'Exists' property of 'DsfPathCopy' custom control equals 'True'
            Assert.AreEqual(this.Open_Copy_Tool_Large_ViewParams.PathCopyExists, pathCopy.Exists, "Copy Tool large view on the design surface does not exist");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Copy_Tool_Large_ViewParams.DoneButtonExists, doneButton.Exists, "DoneButton on the design surface does not exist");

            // Verify that the 'Exists' property of 'UI__FileOrFoldertxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Copy_Tool_Large_ViewParams.FileOrFolderComboBoxExists, fileOrFolderComboBox.Exists, "FileOrFolderComboBox on the design surface does not exist");

            // Verify that the 'Exists' property of 'UI__Destinationtxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Copy_Tool_Large_ViewParams.DestinationComboBoxExists, destinationComboBox.Exists, "DestinationComboBox on the design surface does not exist");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_Copy_Tool_Large_ViewParams.OnErrorCustomExists, onErrorCustom.Exists, "OnErrorCustom group on the design surface does not exist");

            // Verify that the 'Exists' property of 'Overwrite' check box equals 'True'
            Assert.AreEqual(this.Open_Copy_Tool_Large_ViewParams.OverwriteCheckBoxExists, overwriteCheckBox.Exists, "OverwriteCheckBox on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_CountRecords_Large_View
        /// </summary>
        [When(@"I Open CountRecords Large View")]
        public void Open_CountRecords_Large_View()
        {
            #region Variable Declarations
            WpfCustom countRecordset = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CountRecordset;
            #endregion

            // Double-Click 'DsfCountRecordsetActivity' custom control
            Mouse.DoubleClick(countRecordset, new Point(130, 11));
        }
        
        /// <summary>
        /// Open_Create_JSON_Large_View
        /// </summary>
        [When(@"I Open Create JSON Large View")]
        public void Open_Create_JSON_Large_View()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Double-Click 'DsfCreateJsonActivity' custom control
            Mouse.DoubleClick(createJson, new Point(124, 9));
        }
        
        /// <summary>
        /// Open_Create_Tool_Large_View - Use 'Open_Create_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Create Tool Large View")]
        public void Open_Create_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathCreate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate;
            WpfComboBox fileNameoComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate.LargeViewContentCustom.FileNameoComboBox;
            WpfCheckBox overwriteCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate.LargeViewContentCustom.OverwriteCheckBox;
            WpfCustom onErrorCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate.LargeViewContentCustom.OnErrorCustom;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate.DoneButton;
            #endregion

            // Double-Click 'DsfPathCreate' custom control
            Mouse.DoubleClick(pathCreate, new Point(118, 13));

            // Verify that the 'Exists' property of 'DsfPathCreate' custom control equals 'True'
            Assert.AreEqual(this.Open_Create_Tool_Large_ViewParams.PathCreateExists, pathCreate.Exists, "Create Path large view on the design surface does not exist");

            // Verify that the 'Exists' property of 'UI__FileNametxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Create_Tool_Large_ViewParams.FileNameoComboBoxExists, fileNameoComboBox.Exists, "FileNameoComboBox on the design surface does not exist");

            // Verify that the 'Exists' property of 'Overwrite' check box equals 'True'
            Assert.AreEqual(this.Open_Create_Tool_Large_ViewParams.OverwriteCheckBoxExists, overwriteCheckBox.Exists, "OverwriteCheckBox on the design surface does not exist");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_Create_Tool_Large_ViewParams.OnErrorCustomExists, onErrorCustom.Exists, "OnErrorCustom group on the design surface does not exist");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Create_Tool_Large_ViewParams.DoneButtonExists, doneButton.Exists, "DoneButton on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_Data_Merge_Large_View - Use 'Open_Data_Merge_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Data Merge Large View")]
        public void Open_Data_Merge_Large_View()
        {
            #region Variable Declarations
            WpfCustom dataMerge = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Double-Click 'DsfDataMergeActivity' custom control
            Mouse.DoubleClick(dataMerge, new Point(185, 9));

            // Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Data_Merge_Large_ViewParams.DataMergeExists, dataMerge.Exists, "Data merge large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_Data_Merge_Tool_Qvi_Large_View - Use 'Open_Data_Merge_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Data Merge Tool Qvi Large View")]
        public void Open_Data_Merge_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.OpenQuickVariableInpToggleButton;
            WpfCustom dataMerge = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            WpfCustom quickVariableInputContent = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.QuickVariableInputContent;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Data_Merge_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Data_Merge_Tool_Qvi_Large_ViewParams.DataMergeExists, dataMerge.Exists, "Data Merge QVi on the design surface does not exist");

            // Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
            Assert.AreEqual(this.Open_Data_Merge_Tool_Qvi_Large_ViewParams.QuickVariableInputContentExists, quickVariableInputContent.Exists, "QVI on DataMerge is not open");
        }
        
        /// <summary>
        /// Open_Data_Split_Large_View - Use 'Open_Data_Split_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Data Split Large View")]
        public void Open_Data_Split_Large_View()
        {
            #region Variable Declarations
            WpfCustom dataSplit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Double-Click 'DsfDataSplitActivity' custom control
            Mouse.DoubleClick(dataSplit, new Point(203, 10));

            // Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Data_Split_Large_ViewParams.DataSplitExists, dataSplit.Exists, "Data Split large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_Data_Split_Tool_Qvi_Large_View - Use 'Open_Data_Split_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Data Split Tool Qvi Large View")]
        public void Open_Data_Split_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit.OpenQuickVariableInpToggleButton;
            WpfCustom dataSplit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            WpfCustom quickVariableInputContent = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit.QuickVariableInputContent;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Data_Split_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Data_Split_Tool_Qvi_Large_ViewParams.DataSplitExists, dataSplit.Exists, "Data Split Qvi does not exist on the design surface");

            // Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
            Assert.AreEqual(this.Open_Data_Split_Tool_Qvi_Large_ViewParams.QuickVariableInputContentExists, quickVariableInputContent.Exists, "QVI on DataSplit is not open");
        }
        
        /// <summary>
        /// Open_DateTime_LargeView - Use 'Open_DateTime_LargeViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open DateTime LargeView")]
        public void Open_DateTime_LargeView()
        {
            #region Variable Declarations
            WpfCustom dateTime = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTime;
            WpfComboBox addTimeAmountComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTime.LargeViewContentCustom.AddTimeAmountComboBox;
            WpfCustom onErrorCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTime.LargeViewContentCustom.OnErrorCustom;
            WpfComboBox inputComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTime.LargeViewContentCustom.InputComboBox;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTime.DoneButton;
            #endregion

            // Double-Click 'DsfDateTimeActivity' custom control
            Mouse.DoubleClick(dateTime, new Point(145, 7));

            // Verify that the 'Exists' property of 'UI__AddTimeAmounttxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_DateTime_LargeViewParams.AddTimeAmountComboBoxExists, addTimeAmountComboBox.Exists, "ToComboBox does not exist on the large view");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_DateTime_LargeViewParams.OnErrorCustomExists, onErrorCustom.Exists, "ToComboBox does not exist on the large view");

            // Verify that the 'Exists' property of 'UI__Inputtxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_DateTime_LargeViewParams.InputComboBoxExists, inputComboBox.Exists, "ToComboBox does not exist on the large view");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_DateTime_LargeViewParams.DoneButtonExists, doneButton.Exists, "ToComboBox does not exist on the large view");
        }
        
        /// <summary>
        /// Open_DateTimeDiff_LargeView - Use 'Open_DateTimeDiff_LargeViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open DateTimeDiff LargeView")]
        public void Open_DateTimeDiff_LargeView()
        {
            #region Variable Declarations
            WpfCustom dateTimeDifference = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTimeDifference;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTimeDifference.DoneButton;
            WpfComboBox inputFormatComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTimeDifference.LargeViewContentCustom.InputFormatComboBox;
            WpfComboBox input1ComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTimeDifference.LargeViewContentCustom.Input1ComboBox;
            #endregion

            // Double-Click 'DsfDateTimeDifferenceActivity' custom control
            Mouse.DoubleClick(dateTimeDifference, new Point(145, 7));

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_DateTimeDiff_LargeViewParams.DoneButtonExists, doneButton.Exists, "ToComboBox does not exist on the large view");

            // Verify that the 'Exists' property of 'UI__InputFormattxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_DateTimeDiff_LargeViewParams.InputFormatComboBoxExists, inputFormatComboBox.Exists, "ToComboBox does not exist on the large view");

            // Verify that the 'Exists' property of 'UI__Input1txt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_DateTimeDiff_LargeViewParams.Input1ComboBoxExists, input1ComboBox.Exists, "ToComboBox does not exist on the large view");
        }
        
        /// <summary>
        /// Open_Decision_Large_View - Use 'Open_Decision_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Decision Large View")]
        public void Open_Decision_Large_View()
        {
            #region Variable Declarations
            WpfCustom decision = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Decision;
            WpfWindow decisionOrSwitchDialog = this.DecisionOrSwitchDialog;
            #endregion

            // Double-Click 'FlowDecision' custom control
            Mouse.DoubleClick(decision, new Point(55, 39));

            // Verify that the 'Exists' property of 'Wpf' window equals 'True'
            Assert.AreEqual(this.Open_Decision_Large_ViewParams.DecisionOrSwitchDialogExists, decisionOrSwitchDialog.Exists, "Decision Dialog does not exist after opening large Decision view");
        }
        
        /// <summary>
        /// Open_Delete_Tool_Large_View - Use 'Open_Delete_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Delete Tool Large View")]
        public void Open_Delete_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathDelete = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathDelete;
            WpfComboBox fileNameComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathDelete.LargeViewContentCustom.FileNameComboBox;
            WpfCustom onErrorCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathDelete.LargeViewContentCustom.OnErrorCustom;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathDelete.DoneButton;
            #endregion

            // Double-Click 'DsfPathDelete' custom control
            Mouse.DoubleClick(pathDelete, new Point(118, 13));

            // Verify that the 'Exists' property of 'DsfPathDelete' custom control equals 'True'
            Assert.AreEqual(this.Open_Delete_Tool_Large_ViewParams.PathDeleteExists, pathDelete.Exists, "Delete Path large view on the design surface does not exist");

            // Verify that the 'Exists' property of 'UI__FileNametxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Delete_Tool_Large_ViewParams.FileNameComboBoxExists, fileNameComboBox.Exists, "FileNameComboBox on the design surface does not exist");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_Delete_Tool_Large_ViewParams.OnErrorCustomExists, onErrorCustom.Exists, "OnErrorCustom on the design surface does not exist");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Delete_Tool_Large_ViewParams.DoneButtonExists, doneButton.Exists, "DoneButton on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_DeleteRecords_Large_View - Use 'Open_DeleteRecords_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open DeleteRecords Large View")]
        public void Open_DeleteRecords_Large_View()
        {
            #region Variable Declarations
            WpfCustom deleteRecord = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DeleteRecord;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DeleteRecord.DoneButton;
            WpfGroup onErrorGroup = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DeleteRecord.LargeViewContentCustom.OnErrorCustom.OnErrorGroup;
            WpfComboBox resultComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DeleteRecord.LargeViewContentCustom.ResultComboBox;
            WpfComboBox recordsetComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DeleteRecord.LargeViewContentCustom.RecordsetComboBox;
            WpfCheckBox nullAsZeroCheckBoxCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DeleteRecord.LargeViewContentCustom.NullAsZeroCheckBoxCheckBox;
            #endregion

            // Double-Click 'DsfDeleteRecordActivity' custom control
            Mouse.DoubleClick(deleteRecord, new Point(133, 9));

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_DeleteRecords_Large_ViewParams.DoneButtonExists, doneButton.Exists, "Done button does not exist after opening Delete Record large view");

            // Verify that the 'Exists' property of 'On Error' group equals 'True'
            Assert.AreEqual(this.Open_DeleteRecords_Large_ViewParams.OnErrorGroupExists, onErrorGroup.Exists, "Error group does not exist after opening Delete Record large view");

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_DeleteRecords_Large_ViewParams.ResultComboBoxExists, resultComboBox.Exists, "Result combobox does not exist after opening Delete Record large view");

            // Verify that the 'Exists' property of 'UI__Recorstxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_DeleteRecords_Large_ViewParams.RecordsetComboBoxExists, recordsetComboBox.Exists, "Recordset combobox does not exist after opening Delete Record large view");

            // Verify that the 'Exists' property of 'UI__NullAsCheckBox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Open_DeleteRecords_Large_ViewParams.NullAsZeroCheckBoxCheckBoxExists, nullAsZeroCheckBoxCheckBox.Exists, "NullAszero checkbox does not exist after opening Delete Record large view");
        }
        
        /// <summary>
        /// Open_DeleteWeb_Tool_Large_View - Use 'Open_DeleteWeb_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open DeleteWeb Tool Large View")]
        public void Open_DeleteWeb_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom webDelete = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebDelete;
            WpfCustom largeView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebDelete.LargeView;
            #endregion

            // Double-Click 'DsfWebDeleteActivity' custom control
            Mouse.DoubleClick(webDelete, new Point(145, 5));

            // Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
            Assert.AreEqual(this.Open_DeleteWeb_Tool_Large_ViewParams.LargeViewExists, largeView.Exists, "Web delete large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_DotNet_DLL_Connector_Tool_Large_View - Use 'Open_DotNet_DLL_Connector_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open DotNet DLL Connector Tool Large View")]
        public void Open_DotNet_DLL_Connector_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom dotNetDll = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll;
            WpfCustom largeView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView;
            WpfComboBox classNameComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ClassNameComboBox;
            WpfComboBox actionsComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ActionsComboBox;
            WpfButton generateOutputsButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.GenerateOutputsButton;
            WpfTable inputsTable = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.InputsTable;
            #endregion

            // Double-Click 'DsfDotNetDllActivity' custom control
            Mouse.DoubleClick(dotNetDll, new Point(238, 16));

            // Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
            Assert.AreEqual(this.Open_DotNet_DLL_Connector_Tool_Large_ViewParams.LargeViewExists, largeView.Exists, "DotNet DLL tool large view does not exist on the design surface");

            // Verify that the 'Exists' property of 'NamespaceComboBox' combo box equals 'True'
            Assert.AreEqual(this.Open_DotNet_DLL_Connector_Tool_Large_ViewParams.ClassNameComboBoxExists, classNameComboBox.Exists, "DotNet DLL tool large view namespace combobox does not exist.");

            // Verify that the 'Exists' property of 'ActionsComboBox' combo box equals 'True'
            Assert.AreEqual(this.Open_DotNet_DLL_Connector_Tool_Large_ViewParams.ActionsComboBoxExists, actionsComboBox.Exists, "DotNet DLL tool large view action combobox does not exist.");

            // Verify that the 'Exists' property of 'Generate Outputs' button equals 'True'
            Assert.AreEqual(this.Open_DotNet_DLL_Connector_Tool_Large_ViewParams.GenerateOutputsButtonExists, generateOutputsButton.Exists, "DotNet DLL large view generate outputs button does not exist.");

            // Verify that the 'Exists' property of 'LargeDataGrid' table equals 'True'
            Assert.AreEqual(this.Open_DotNet_DLL_Connector_Tool_Large_ViewParams.InputsTableExists, inputsTable.Exists, "DotNet DLL tool large view inputs table does not exist.");
        }
        
        /// <summary>
        /// Open_DropboxFileOperation_Large_View
        /// </summary>
        [When(@"I Open DropboxFileOperation Large View")]
        public void Open_DropboxFileOperation_Large_View()
        {
            #region Variable Declarations
            WpfCustom dropBox_DOWNLOAD = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DropBox_DOWNLOAD;
            #endregion

            // Double-Click 'DsfDropBoxFileActivity' custom control
            Mouse.DoubleClick(dropBox_DOWNLOAD, new Point(174, 14));
        }
        
        /// <summary>
        /// Open_Exchange_Email_Tool_Large_View
        /// </summary>
        [When(@"I Open Exchange Email Tool Large View")]
        public void Open_Exchange_Email_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom exchangeEmail = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExchangeEmail;
            #endregion

            // Double-Click 'DsfSendEmailActivity' custom control
            Mouse.DoubleClick(exchangeEmail, new Point(168, 11));
        }
        
        /// <summary>
        /// Open_ExecuteCommandline_LargeView
        /// </summary>
        [When(@"I Open ExecuteCommandline LargeView")]
        public void Open_ExecuteCommandline_LargeView()
        {
            #region Variable Declarations
            WpfCustom executeCommandLine = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            #endregion

            // Double-Click 'DsfExecuteCommandLineActivity' custom control
            Mouse.DoubleClick(executeCommandLine, new Point(178, 10));
        }
        
        /// <summary>
        /// Open_Explorer_First_Item_Dependancies_With_Context_Menu - Use 'Open_Explorer_First_Item_Dependancies_With_Context_MenuParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Explorer First Item Dependancies With Context Menu")]
        public void Open_Explorer_First_Item_Dependancies_With_Context_Menu()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            WpfMenuItem showVersionHistory = this.MainStudioWindow.ExplorerContextMenu.ShowVersionHistory;
            WpfMenuItem viewSwagger = this.MainStudioWindow.ExplorerContextMenu.ViewSwagger;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, MouseButtons.Right, ModifierKeys.None, new Point(69, 10));

            // Verify that the 'Exists' property of 'Show Version History' menu item equals 'True'
            Assert.AreEqual(this.Open_Explorer_First_Item_Dependancies_With_Context_MenuParams.ShowVersionHistoryExists, showVersionHistory.Exists, "Show version history does not exist after right clicking a resource");

            // Verify that the 'Exists' property of 'View Swagger' menu item equals 'True'
            Assert.AreEqual(this.Open_Explorer_First_Item_Dependancies_With_Context_MenuParams.ViewSwaggerExists, viewSwagger.Exists, "View Swagger button does not exist");

            // Verify that the 'Enabled' property of 'View Swagger' menu item equals 'True'
            Assert.AreEqual(this.Open_Explorer_First_Item_Dependancies_With_Context_MenuParams.ViewSwaggerEnabled, viewSwagger.Enabled, "View swagger is disabled");
        }
        
        /// <summary>
        /// Open_Explorer_First_Item_Version_History_With_Context_Menu
        /// </summary>
        [When(@"I Open Explorer First Item Version History With Context Menu")]
        public void Open_Explorer_First_Item_Version_History_With_Context_Menu()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            WpfMenuItem showVersionHistory = this.MainStudioWindow.ExplorerContextMenu.ShowVersionHistory;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, MouseButtons.Right, ModifierKeys.None, new Point(69, 10));

            // Click 'Show Version History' menu item
            Mouse.Click(showVersionHistory, new Point(66, 15));
        }
        
        /// <summary>
        /// Open_Explorer_First_Item_With_Context_Menu - Use 'Open_Explorer_First_Item_With_Context_MenuParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Explorer First Item With Context Menu")]
        public void Open_Explorer_First_Item_With_Context_Menu()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            WpfMenuItem open = this.MainStudioWindow.ExplorerContextMenu.Open;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, MouseButtons.Right, ModifierKeys.None, new Point(107, 9));

            // Verify that the 'Exists' property of 'Open' menu item equals 'True'
            Assert.AreEqual(this.Open_Explorer_First_Item_With_Context_MenuParams.OpenExists, open.Exists, "Open does not exist in explorer context menu.");

            // Click 'Open' menu item
            Mouse.Click(open, new Point(30, 11));
        }
        
        /// <summary>
        /// Open_Find_Index_Tool_Large_View - Use 'Open_Find_Index_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Find Index Tool Large View")]
        public void Open_Find_Index_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom findIndex = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindIndex;
            WpfComboBox resultComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindIndex.LargeViewContentCustom.ResultComboBox;
            WpfComboBox inFieldComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindIndex.LargeViewContentCustom.InFieldComboBox;
            WpfComboBox indexComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindIndex.LargeViewContentCustom.IndexComboBox;
            WpfComboBox charactersComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindIndex.LargeViewContentCustom.CharactersComboBox;
            WpfComboBox directionComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindIndex.LargeViewContentCustom.DirectionComboBox;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindIndex.DoneButton;
            #endregion

            // Double-Click 'DsfIndexActivity' custom control
            Mouse.DoubleClick(findIndex, new Point(147, 11));

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Find_Index_Tool_Large_ViewParams.ResultComboBoxExists, resultComboBox.Exists, "ResultComboBox does not exist after opening large Find Index view");

            // Verify that the 'Exists' property of 'UI__InFieldtxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Find_Index_Tool_Large_ViewParams.InFieldComboBoxExists, inFieldComboBox.Exists, "InFieldComboBox does not exist after opening large Find Index view");

            // Verify that the 'Exists' property of 'UI__Indextcbx_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Find_Index_Tool_Large_ViewParams.IndexComboBoxExists, indexComboBox.Exists, "IndexComboBox does not exist after opening large Find Index view");

            // Verify that the 'Exists' property of 'UI__Characterstxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Find_Index_Tool_Large_ViewParams.CharactersComboBoxExists, charactersComboBox.Exists, "CharactersComboBox does not exist after opening large Find Index view");

            // Verify that the 'Exists' property of 'UI__Directioncbx_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Find_Index_Tool_Large_ViewParams.DirectionComboBoxExists, directionComboBox.Exists, "DirectionComboBox does not exist after opening large Find Index view");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Find_Index_Tool_Large_ViewParams.DoneButtonExists, doneButton.Exists, "DoneButton does not exist after opening large Find Index view");
        }
        
        /// <summary>
        /// Open_Find_Record_Index_Tool_Large_View
        /// </summary>
        [When(@"I Open Find Record Index Tool Large View")]
        public void Open_Find_Record_Index_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom findRecordsIndex = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindRecordsIndex;
            #endregion

            // Double-Click 'DsfFindRecordsMultipleCriteriaActivity' custom control
            Mouse.DoubleClick(findRecordsIndex, new Point(172, 5));
        }
        
        /// <summary>
        /// Open_ForEach_Large_View - Use 'Open_ForEach_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open ForEach Large View")]
        public void Open_ForEach_Large_View()
        {
            #region Variable Declarations
            WpfCustom forEach = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach;
            WpfComboBox typeCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach.LargeView.TypeCombobox;
            WpfComboBox forEachFromIntellisenseTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach.LargeView.ForEachFromIntellisenseTextbox;
            WpfComboBox toIntellisenseTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach.LargeView.ToIntellisenseTextbox;
            WpfCustom dropActivityHere = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach.LargeView.DropActivityHere;
            WpfCustom onErrorPane = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach.LargeView.OnErrorPane;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach.DoneButton;
            #endregion

            // Double-Click 'DsfForEachActivity' custom control
            Mouse.DoubleClick(forEach, new Point(131, 14));

            // Verify that the 'Exists' property of 'UI__ForEachType_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_ForEach_Large_ViewParams.TypeComboboxExists, typeCombobox.Exists, "ForEach large view type combobox does not exist after double clicking tool to ope" +
                    "n large view.");

            // Verify that the 'Exists' property of 'UI__ForEachFromTextbox_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_ForEach_Large_ViewParams.ForEachFromIntellisenseTextboxExists, forEachFromIntellisenseTextbox.Exists, "Foreach from textbox does not exist after openning large view with a double click" +
                    ".");

            // Verify that the 'Exists' property of 'UI__ForEachToTextbox_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_ForEach_Large_ViewParams.ToIntellisenseTextboxExists, toIntellisenseTextbox.Exists, "For each to textbox does not exist after double click openning large view.");

            // Verify that the 'Exists' property of 'Drop Activity Here' custom control equals 'True'
            Assert.AreEqual(this.Open_ForEach_Large_ViewParams.DropActivityHereExists, dropActivityHere.Exists, "For each activity drop box does not exist after openning large view with a double" +
                    " click.");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_ForEach_Large_ViewParams.OnErrorPaneExists, onErrorPane.Exists, "For each OnError pane does not exist after double click openning large view.");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_ForEach_Large_ViewParams.DoneButtonExists, doneButton.Exists, "For each done button does not exist after double click openning large view.");
        }
        
        /// <summary>
        /// Open_GET_Web_Connector_Tool_Large_View - Use 'Open_GET_Web_Connector_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open GET Web Connector Tool Large View")]
        public void Open_GET_Web_Connector_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom webGet = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet;
            WpfComboBox sourcesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.LargeView.SourcesComboBox;
            WpfButton generateOutputsButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.LargeView.GenerateOutputsButton;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet.DoneButton;
            #endregion

            // Double-Click 'DsfWebGetActivity' custom control
            Mouse.DoubleClick(webGet, new Point(238, 16));

            // Verify that the 'Exists' property of 'SourcesComboBox' combo box equals 'True'
            Assert.AreEqual(this.Open_GET_Web_Connector_Tool_Large_ViewParams.SourcesComboBoxExists, sourcesComboBox.Exists, "Web GET large view sources combobox does not exist.");

            // Verify that the 'Exists' property of 'Generate Outputs' button equals 'True'
            Assert.AreEqual(this.Open_GET_Web_Connector_Tool_Large_ViewParams.GenerateOutputsButtonExists, generateOutputsButton.Exists, "Web GET large view generate inputs button does not exist.");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_GET_Web_Connector_Tool_Large_ViewParams.DoneButtonExists, doneButton.Exists, "Web GET large view done does not exist.");
        }
        
        /// <summary>
        /// Open_GetWeb_RequestTool_small_View
        /// </summary>
        [When(@"I Open GetWeb RequestTool small View")]
        public void Open_GetWeb_RequestTool_small_View()
        {
            #region Variable Declarations
            WpfCustom webRequest = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebRequest;
            #endregion

            // Double-Click 'DsfWebRequestActivity' custom control
            Mouse.DoubleClick(webRequest, new Point(237, 7));
        }
        
        /// <summary>
        /// Open_Javascript_Large_View - Use 'Open_Javascript_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Javascript Large View")]
        public void Open_Javascript_Large_View()
        {
            #region Variable Declarations
            WpfCustom javascript = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Javascript;
            WpfComboBox scriptIntellisenseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Javascript.LargeView.ScriptIntellisenseCombobox;
            WpfComboBox attachmentsIntellisenseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Javascript.LargeView.AttachmentsIntellisenseCombobox;
            WpfButton attachFileButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Javascript.LargeView.AttachFileButton;
            WpfCheckBox escapesequencesCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Javascript.LargeView.EscapesequencesCheckBox;
            WpfComboBox resultIntellisenseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Javascript.LargeView.ResultIntellisenseCombobox;
            WpfCustom onErrorPane = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Javascript.LargeView.OnErrorPane;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Javascript.DoneButton;
            #endregion

            // Double-Click 'DsfJavascriptActivity' custom control
            Mouse.DoubleClick(javascript, new Point(115, 14));

            // Verify that the 'Exists' property of 'UI__txtScript_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Javascript_Large_ViewParams.ScriptIntellisenseComboboxExists, scriptIntellisenseCombobox.Exists, "Javascript script textbox does not exist after openning large view with a double " +
                    "click.");

            // Verify that the 'Exists' property of 'UI__AttachmentsTxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Javascript_Large_ViewParams.AttachmentsIntellisenseComboboxExists, attachmentsIntellisenseCombobox.Exists, "Javascript Attachments textbox does not exist after openning large view with a do" +
                    "uble click.");

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Open_Javascript_Large_ViewParams.AttachFileButtonExists, attachFileButton.Exists, "Javascript Attach File Button does not exist after openning large view with a dou" +
                    "ble click.");

            // Verify that the 'Exists' property of 'Escape sequences in variables' check box equals 'True'
            Assert.AreEqual(this.Open_Javascript_Large_ViewParams.EscapesequencesCheckBoxExists, escapesequencesCheckBox.Exists, "Javascript escape sequences checkbox does not exist after openning large view wit" +
                    "h a double click.");

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Javascript_Large_ViewParams.ResultIntellisenseComboboxExists, resultIntellisenseCombobox.Exists, "Javascript result textbox does not exist after openning large view with a double " +
                    "click.");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_Javascript_Large_ViewParams.OnErrorPaneExists, onErrorPane.Exists, "Javascript OnError pane does not exist after openning large view with a double cl" +
                    "ick.");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Javascript_Large_ViewParams.DoneButtonExists, doneButton.Exists, "Javascript Done button does not exist after openning large view with a double cli" +
                    "ck.");
        }
        
        /// <summary>
        /// Open_Json_Tool_Large_View - Use 'Open_Json_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Json Tool Large View")]
        public void Open_Json_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Double-Click 'DsfCreateJsonActivity' custom control
            Mouse.DoubleClick(createJson, new Point(158, 13));

            // Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Json_Tool_Large_ViewParams.CreateJsonExists, createJson.Exists, "JSON tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_Json_Tool_Qvi_Large_View - Use 'Open_Json_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Json Tool Qvi Large View")]
        public void Open_Json_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson.OpenQuickVariableInpToggleButton;
            WpfCustom createJson = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Json_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Json_Tool_Qvi_Large_ViewParams.CreateJsonExists, createJson.Exists, "JSON QVI window does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_Length_Tool_Large_View - Use 'Open_Length_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Length Tool Large View")]
        public void Open_Length_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom length = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Length;
            WpfComboBox recordsetComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Length.LargeViewContentCustom.RecordsetComboBox;
            WpfComboBox resultComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Length.LargeViewContentCustom.ResultComboBox;
            WpfCustom onErrorCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Length.LargeViewContentCustom.OnErrorCustom;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Length.DoneButton;
            WpfCheckBox nullAsZeroCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Length.LargeViewContentCustom.NullAsZeroCheckBox;
            #endregion

            // Double-Click 'DsfRecordsetLengthActivity' custom control
            Mouse.DoubleClick(length, new Point(136, 13));

            // Verify that the 'Exists' property of 'UI__Recorsettxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Length_Tool_Large_ViewParams.RecordsetComboBoxExists, recordsetComboBox.Exists, "Recordset combobox does not exist after dragging Recordset Length on to Workflow " +
                    "surface");

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Length_Tool_Large_ViewParams.ResultComboBoxExists, resultComboBox.Exists, "Result combobox does not exist after dragging Recordset Length on to Workflow sur" +
                    "face");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_Length_Tool_Large_ViewParams.OnErrorCustomExists, onErrorCustom.Exists, "On Error pane does not exist after dragging Recordset Length on to Workflow surfa" +
                    "ce");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Length_Tool_Large_ViewParams.DoneButtonExists, doneButton.Exists, "DoneButton does not exist after dragging Recordset Length on to Workflow surface");

            // Verify that the 'Exists' property of 'UI__NullAsCheckBox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Open_Length_Tool_Large_ViewParams.NullAsZeroCheckBoxExists, nullAsZeroCheckBox.Exists, "NullAsZero checkbox is does not exist after dragging Recordset Length on to Workf" +
                    "low surface");
        }
        
        /// <summary>
        /// Open_Move_Tool_Large_View - Use 'Open_Move_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Move Tool Large View")]
        public void Open_Move_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathMove = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove;
            WpfCustom onErrorCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove.LargeViewContentCustom.OnErrorCustom;
            WpfComboBox destinationComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove.LargeViewContentCustom.DestinationComboBox;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove.DoneButton;
            WpfCheckBox overwriteCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove.LargeViewContentCustom.OverwriteCheckBox;
            #endregion

            // Double-Click 'DsfPathMove' custom control
            Mouse.DoubleClick(pathMove, new Point(125, 6));

            // Verify that the 'Exists' property of 'DsfPathMove' custom control equals 'True'
            Assert.AreEqual(this.Open_Move_Tool_Large_ViewParams.PathMoveExists, pathMove.Exists, "Move tool large view does not exist on the design surface");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_Move_Tool_Large_ViewParams.OnErrorCustomExists, onErrorCustom.Exists, "OnErrorCustom group does not exist on the design surface");

            // Verify that the 'Exists' property of 'UI__Destinationtxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Move_Tool_Large_ViewParams.DestinationComboBoxExists, destinationComboBox.Exists, "DestinationComboBox does not exist on the design surface");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Move_Tool_Large_ViewParams.DoneButtonExists, doneButton.Exists, "DoneButton does not exist on the design surface");

            // Verify that the 'Exists' property of 'Overwrite' check box equals 'True'
            Assert.AreEqual(this.Open_Move_Tool_Large_ViewParams.OverwriteCheckBoxExists, overwriteCheckBox.Exists, "OverwriteCheckBox does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_MySql_Database_Tool_Large_View
        /// </summary>
        [When(@"I Open MySql Database Tool Large View")]
        public void Open_MySql_Database_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom mySqlDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MySqlDatabase;
            #endregion

            // Double-Click 'DsfMySqlDatabaseActivity' custom control
            Mouse.DoubleClick(mySqlDatabase, new Point(238, 15));
        }
        
        /// <summary>
        /// Open_NumberFormat_Toolbox_Large_View - Use 'Open_NumberFormat_Toolbox_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open NumberFormat Toolbox Large View")]
        public void Open_NumberFormat_Toolbox_Large_View()
        {
            #region Variable Declarations
            WpfCustom formatNumber = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber.DoneButton;
            WpfGroup onErrorGroup = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber.LargeViewContentCustom.OnErrorCustom.OnErrorGroup;
            WpfComboBox resultInputComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber.LargeViewContentCustom.ResultInputComboBox;
            WpfComboBox decimalsToShowComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber.LargeViewContentCustom.DecimalsToShowComboBox;
            WpfComboBox roundingComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber.LargeViewContentCustom.RoundingComboBox;
            WpfComboBox numberInputComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber.LargeViewContentCustom.NumberInputComboBox;
            #endregion

            // Double-Click 'DsfNumberFormatActivity' custom control
            Mouse.DoubleClick(formatNumber, new Point(145, 5));

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_NumberFormat_Toolbox_Large_ViewParams.DoneButtonExists, doneButton.Exists, "Done button does not exist after opening  Format Number tool large view");

            // Verify that the 'Exists' property of 'On Error' group equals 'True'
            Assert.AreEqual(this.Open_NumberFormat_Toolbox_Large_ViewParams.OnErrorGroupExists, onErrorGroup.Exists, "On Error group does not exist after opening  Format Number tool large view");

            // Verify that the 'Exists' property of 'UI__Result_Inputtxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_NumberFormat_Toolbox_Large_ViewParams.ResultInputComboBoxExists, resultInputComboBox.Exists, "Reult combobox does not exist after opening  Format Number tool large view");

            // Verify that the 'Exists' property of 'UI__DecimalsToShow_Inputtxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_NumberFormat_Toolbox_Large_ViewParams.DecimalsToShowComboBoxExists, decimalsToShowComboBox.Exists, "DecimalToShow combobox does not exist after opening  Format Number tool large vie" +
                    "w");

            // Verify that the 'Exists' property of 'RoundingComboBox' combo box equals 'True'
            Assert.AreEqual(this.Open_NumberFormat_Toolbox_Large_ViewParams.RoundingComboBoxExists, roundingComboBox.Exists, "Rounding combobox does not exist after opening  Format Number tool large view");

            // Verify that the 'Exists' property of 'UI__Number_Inputtxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_NumberFormat_Toolbox_Large_ViewParams.NumberInputComboBoxExists, numberInputComboBox.Exists, "NumberInput combobox does not exist after opening  Format Number tool large view");
        }
        
        /// <summary>
        /// Open_ODBC_Tool_Large_View - Use 'Open_ODBC_Tool_Large_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Open ODBC Tool Large View")]
        public void Open_ODBC_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom oDBCDatabaseActivCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ODBCDatabaseActivCustom;
            WpfCustom largeViewContentCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ODBCDatabaseActivCustom.LargeViewContentCustom;
            #endregion

            // Double-Click 'DsfODBCDatabaseActivity' custom control
            Mouse.DoubleClick(oDBCDatabaseActivCustom, new Point(145, 5));

            // Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
            Assert.AreEqual(this.Open_ODBC_Tool_Large_ViewExpectedValues.LargeViewContentCustomExists, largeViewContentCustom.Exists, "ODBC tool large view does not exist on the design surface.");
        }
        
        /// <summary>
        /// Open_Oracle_Tool_Large_View - Use 'Open_Oracle_Tool_Large_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Oracle Tool Large View")]
        public void Open_Oracle_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom oracleDatabaseActCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.OracleDatabaseActCustom;
            WpfCustom largeViewContentCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.OracleDatabaseActCustom.LargeViewContentCustom;
            #endregion

            // Double-Click 'DsfOracleDatabaseActivity' custom control
            Mouse.DoubleClick(oracleDatabaseActCustom, new Point(145, 5));

            // Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
            Assert.AreEqual(this.Open_Oracle_Tool_Large_ViewExpectedValues.LargeViewContentCustomExists, largeViewContentCustom.Exists, "Oracle tool large view does not exist on the design surface.");
        }
        
        /// <summary>
        /// Open_Postgre_Tool_Large_View - Use 'Open_Postgre_Tool_Large_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Postgre Tool Large View")]
        public void Open_Postgre_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom postgreSqlActivitCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PostgreSqlActivitCustom;
            WpfCustom largeViewContentCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PostgreSqlActivitCustom.LargeViewContentCustom;
            #endregion

            // Double-Click 'DsfPostgreSqlActivity' custom control
            Mouse.DoubleClick(postgreSqlActivitCustom, new Point(145, 5));

            // Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
            Assert.AreEqual(this.Open_Postgre_Tool_Large_ViewExpectedValues.LargeViewContentCustomExists, largeViewContentCustom.Exists, "Postgre tool large view does not exist on the design surface.");
        }
        
        /// <summary>
        /// Open_PostWeb_RequestTool_Large_View - Use 'Open_PostWeb_RequestTool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open PostWeb RequestTool Large View")]
        public void Open_PostWeb_RequestTool_Large_View()
        {
            #region Variable Declarations
            WpfCustom webPost = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPost;
            WpfCustom largeView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPost.LargeView;
            #endregion

            // Double-Click 'DsfWebPostActivity' custom control
            Mouse.DoubleClick(webPost, new Point(128, 8));

            // Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
            Assert.AreEqual(this.Open_PostWeb_RequestTool_Large_ViewParams.LargeViewExists, largeView.Exists, "Post web request large view does not exist on design surface.");
        }
        
        /// <summary>
        /// Open_PutWeb_Tool_large_view
        /// </summary>
        [When(@"I Open PutWeb Tool large view")]
        public void Open_PutWeb_Tool_large_view()
        {
            #region Variable Declarations
            WpfCustom webPut = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPut;
            #endregion

            // Double-Click 'DsfWebPutActivity' custom control
            Mouse.DoubleClick(webPut, new Point(145, 5));
        }
        
        /// <summary>
        /// Open_Python_Large_View - Use 'Open_Python_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Python Large View")]
        public void Open_Python_Large_View()
        {
            #region Variable Declarations
            WpfCustom python = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Python;
            WpfComboBox scriptIntellisenseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Python.LargeView.ScriptIntellisenseCombobox;
            WpfComboBox attachmentsIntellisenseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Python.LargeView.AttachmentsIntellisenseCombobox;
            WpfButton attachFileButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Python.LargeView.AttachFileButton;
            WpfCheckBox escapesequencesCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Python.LargeView.EscapesequencesCheckBox;
            WpfComboBox resultIntellisenseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Python.LargeView.ResultIntellisenseCombobox;
            WpfCustom onErrorPane = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Python.LargeView.OnErrorPane;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Python.DoneButton;
            #endregion

            // Double-Click 'DsfPythonActivity' custom control
            Mouse.DoubleClick(python, new Point(117, 9));

            // Verify that the 'Exists' property of 'UI__txtScript_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Python_Large_ViewParams.ScriptIntellisenseComboboxExists, scriptIntellisenseCombobox.Exists, "Python script textbox does not exist after openning large view with a double clic" +
                    "k.");

            // Verify that the 'Exists' property of 'UI__AttachmentsTxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Python_Large_ViewParams.AttachmentsIntellisenseComboboxExists, attachmentsIntellisenseCombobox.Exists, "Python Attachments textbox does not exist after openning large view with a double" +
                    " click.");

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Open_Python_Large_ViewParams.AttachFileButtonExists, attachFileButton.Exists, "Python Attach File Button does not exist after openning large view with a double " +
                    "click.");

            // Verify that the 'Exists' property of 'Escape sequences in variables' check box equals 'True'
            Assert.AreEqual(this.Open_Python_Large_ViewParams.EscapesequencesCheckBoxExists, escapesequencesCheckBox.Exists, "Python escape sequences checkbox does not exist after openning large view with a " +
                    "double click.");

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Python_Large_ViewParams.ResultIntellisenseComboboxExists, resultIntellisenseCombobox.Exists, "Python result textbox does not exist after openning large view with a double clic" +
                    "k.");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_Python_Large_ViewParams.OnErrorPaneExists, onErrorPane.Exists, "Python OnError pane does not exist after openning large view with a double click." +
                    "");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Python_Large_ViewParams.DoneButtonExists, doneButton.Exists, "Python Done button does not exist after openning large view with a double click.");
        }
        
        /// <summary>
        /// Open_RabbitMqConsume_LargeView - Use 'Open_RabbitMqConsume_LargeViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open RabbitMqConsume LargeView")]
        public void Open_RabbitMqConsume_LargeView()
        {
            #region Variable Declarations
            WpfCustom rabbitMQConsume = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.RabbitMQConsume;
            WpfComboBox responseComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.RabbitMQConsume.LargeViewContentCustom.ResponseComboBox;
            WpfCheckBox acknowledgeCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.RabbitMQConsume.LargeViewContentCustom.AcknowledgeCheckBox;
            WpfComboBox sourceComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.RabbitMQConsume.LargeViewContentCustom.SourceComboBox;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.RabbitMQConsume.DoneButton;
            #endregion

            // Double-Click 'DsfConsumeRabbitMQActivity' custom control
            Mouse.DoubleClick(rabbitMQConsume, new Point(145, 7));

            // Verify that the 'Exists' property of 'UI__tostxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_RabbitMqConsume_LargeViewParams.ResponseComboBoxExists, responseComboBox.Exists, "ResponseComboBox does not exist on the large view");

            // Verify that the 'Exists' property of 'Acknowledge' check box equals 'True'
            Assert.AreEqual(this.Open_RabbitMqConsume_LargeViewParams.AcknowledgeCheckBoxExists, acknowledgeCheckBox.Exists, "AcknowledgeCheckBox does not exist on the large view");

            // Verify that the 'Exists' property of 'InitialFocusElement' combo box equals 'True'
            Assert.AreEqual(this.Open_RabbitMqConsume_LargeViewParams.SourceComboBoxExists, sourceComboBox.Exists, "SourceComboBox does not exist on the large view");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_RabbitMqConsume_LargeViewParams.DoneButtonExists, doneButton.Exists, "DoneButton does not exist on the large view");
        }
        
        /// <summary>
        /// Open_RabbitMqPublish_LargeView - Use 'Open_RabbitMqPublish_LargeViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open RabbitMqPublish LargeView")]
        public void Open_RabbitMqPublish_LargeView()
        {
            #region Variable Declarations
            WpfCustom rabbitMQPublish = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.RabbitMQPublish;
            WpfCheckBox durableCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.RabbitMQPublish.LargeViewContentCustom.DurableCheckBox;
            WpfButton newSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.RabbitMQPublish.LargeViewContentCustom.NewSourceButton;
            WpfCustom onErrorCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.RabbitMQPublish.LargeViewContentCustom.OnErrorCustom;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.RabbitMQPublish.DoneButton;
            #endregion

            // Double-Click 'DsfPublishRabbitMQActivity' custom control
            Mouse.DoubleClick(rabbitMQPublish, new Point(145, 7));

            // Verify that the 'Exists' property of 'Durable' check box equals 'True'
            Assert.AreEqual(this.Open_RabbitMqPublish_LargeViewParams.DurableCheckBoxExists, durableCheckBox.Exists, "DurableCheckBox does not exist on the large view");

            // Verify that the 'Exists' property of 'New' button equals 'True'
            Assert.AreEqual(this.Open_RabbitMqPublish_LargeViewParams.NewSourceButtonExists, newSourceButton.Exists, "NewSourceButton does not exist on the large view");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_RabbitMqPublish_LargeViewParams.OnErrorCustomExists, onErrorCustom.Exists, "OnErrorCustom does not exist on the large view");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_RabbitMqPublish_LargeViewParams.DoneButtonExists, doneButton.Exists, "DoneButton does not exist on the large view");

            // Verify that the 'Exists' property of 'DsfPublishRabbitMQActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_RabbitMqPublish_LargeViewParams.RabbitMQPublishExists, rabbitMQPublish.Exists, "RabbitMQPublish does not exist on the large view");
        }
        
        /// <summary>
        /// Open_Random_Large_Tool - Use 'Open_Random_Large_ToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Random Large Tool")]
        public void Open_Random_Large_Tool()
        {
            #region Variable Declarations
            WpfCustom random = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random.DoneButton;
            WpfCustom onErrorCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random.LargeViewContentCustom.OnErrorCustom;
            WpfComboBox fromComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random.LargeViewContentCustom.FromComboBox;
            WpfComboBox toComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random.LargeViewContentCustom.ToComboBox;
            #endregion

            // Double-Click 'DsfRandomActivity' custom control
            Mouse.DoubleClick(random, new Point(145, 7));

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Random_Large_ToolParams.DoneButtonExists, doneButton.Exists, "DoneButton does not exist on the large view");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_Random_Large_ToolParams.OnErrorCustomExists, onErrorCustom.Exists, "OnErrorCustom does not exist on the large view");

            // Verify that the 'Exists' property of 'UI__Lengthstxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Random_Large_ToolParams.FromComboBoxExists, fromComboBox.Exists, "FromComboBox does not exist on the large view");

            // Verify that the 'Exists' property of 'UI__Lengthstxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Random_Large_ToolParams.ToComboBoxExists, toComboBox.Exists, "ToComboBox does not exist on the large view");
        }
        
        /// <summary>
        /// Open_Read_File_Tool_Large_View - Use 'Open_Read_File_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Read File Tool Large View")]
        public void Open_Read_File_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom fileRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead;
            WpfComboBox resultComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead.LargeViewContentCustom.ResultComboBox;
            WpfCustom onErrorCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead.LargeViewContentCustom.OnErrorCustom;
            WpfComboBox fileNameComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead.LargeViewContentCustom.FileNameComboBox;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead.DoneButton;
            #endregion

            // Double-Click 'DsfFileRead' custom control
            Mouse.DoubleClick(fileRead, new Point(120, 5));

            // Verify that the 'Exists' property of 'DsfFileRead' custom control equals 'True'
            Assert.AreEqual(this.Open_Read_File_Tool_Large_ViewParams.FileReadExists, fileRead.Exists, "Read file large view does not exist on the design surface");

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Read_File_Tool_Large_ViewParams.ResultComboBoxExists, resultComboBox.Exists, "ResultComboBox does not exist on the design surface");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_Read_File_Tool_Large_ViewParams.OnErrorCustomExists, onErrorCustom.Exists, "OnErrorCustom does not exist on the design surface");

            // Verify that the 'Exists' property of 'UI__FileNametxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Read_File_Tool_Large_ViewParams.FileNameComboBoxExists, fileNameComboBox.Exists, "FileNameComboBox does not exist on the design surface");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Read_File_Tool_Large_ViewParams.DoneButtonExists, doneButton.Exists, "DoneButton does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_Read_Folder_Tool_Large_View - Use 'Open_Read_Folder_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Read Folder Tool Large View")]
        public void Open_Read_Folder_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom folderRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead;
            WpfRadioButton filesFoldersRadioButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead.LargeViewContentCustom.FilesFoldersRadioButton;
            WpfCustom onErrorCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead.LargeViewContentCustom.OnErrorCustom;
            WpfComboBox directoryComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead.LargeViewContentCustom.DirectoryComboBox;
            WpfComboBox resultComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead.LargeViewContentCustom.ResultComboBox;
            #endregion

            // Double-Click 'DsfFolderRead' custom control
            Mouse.DoubleClick(folderRead, new Point(138, 14));

            // Verify that the 'Exists' property of 'DsfFolderRead' custom control equals 'True'
            Assert.AreEqual(this.Open_Read_Folder_Tool_Large_ViewParams.FolderReadExists, folderRead.Exists, "Read Folder large view does not exist on the design surface");

            // Verify that the 'Exists' property of 'Files & Folders' radio button equals 'True'
            Assert.AreEqual(this.Open_Read_Folder_Tool_Large_ViewParams.FilesFoldersRadioButtonExists, filesFoldersRadioButton.Exists, "FilesFoldersRadioButton does not exist on the design surface");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_Read_Folder_Tool_Large_ViewParams.OnErrorCustomExists, onErrorCustom.Exists, "OnErrorCustom group does not exist on the design surface");

            // Verify that the 'Exists' property of 'UI__Directorytxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Read_Folder_Tool_Large_ViewParams.DirectoryComboBoxExists, directoryComboBox.Exists, "DirectoryComboBox does not exist on the design surface");

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Read_Folder_Tool_Large_ViewParams.ResultComboBoxExists, resultComboBox.Exists, "Read Folder large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_Rename_Tool_Large_View - Use 'Open_Rename_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Rename Tool Large View")]
        public void Open_Rename_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathRename = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename;
            WpfCustom onErrorCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename.LargeViewContentCustom.OnErrorCustom;
            WpfCheckBox overwriteCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename.LargeViewContentCustom.OverwriteCheckBox;
            WpfComboBox fileOrFolderComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename.LargeViewContentCustom.FileOrFolderComboBox;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename.DoneButton;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathRename' custom control equals 'True'
            Assert.AreEqual(this.Open_Rename_Tool_Large_ViewParams.PathRenameExists, pathRename.Exists, "Rename tool large view on the design surface does not exist");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_Rename_Tool_Large_ViewParams.OnErrorCustomExists, onErrorCustom.Exists, "OnErrorCustom does not exist on the design surface");

            // Verify that the 'Exists' property of 'Overwrite' check box equals 'True'
            Assert.AreEqual(this.Open_Rename_Tool_Large_ViewParams.OverwriteCheckBoxExists, overwriteCheckBox.Exists, "OverwriteCheckBox does not exist on the design surface");

            // Verify that the 'Exists' property of 'UI__FileOrFoldertxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Rename_Tool_Large_ViewParams.FileOrFolderComboBoxExists, fileOrFolderComboBox.Exists, "FileOrFolderComboBox does not exist on the design surface");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Rename_Tool_Large_ViewParams.DoneButtonExists, doneButton.Exists, "DoneButton does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_Replace_Tool_Large_View - Use 'Open_Replace_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Replace Tool Large View")]
        public void Open_Replace_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom replace = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Replace;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Replace.DoneButton;
            WpfComboBox resultComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Replace.LargeViewContentCustom.ResultComboBox;
            WpfComboBox replaceComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Replace.LargeViewContentCustom.ReplaceComboBox;
            WpfComboBox findComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Replace.LargeViewContentCustom.FindComboBox;
            WpfComboBox inFiledsComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Replace.LargeViewContentCustom.InFiledsComboBox;
            #endregion

            // Double-Click 'DsfReplaceActivity' custom control
            Mouse.DoubleClick(replace, new Point(159, 11));

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Replace_Tool_Large_ViewParams.DoneButtonExists, doneButton.Exists, "Done button does not exist after opening Replace tool large view");

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Replace_Tool_Large_ViewParams.ResultComboBoxExists, resultComboBox.Exists, "Result combobox does not exist after opening Replace tool large view");

            // Verify that the 'Exists' property of 'UI__Replacetxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Replace_Tool_Large_ViewParams.ReplaceComboBoxExists, replaceComboBox.Exists, "Replace combobox does not exist after opening Replace tool large view");

            // Verify that the 'Exists' property of 'UI__Findtxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Replace_Tool_Large_ViewParams.FindComboBoxExists, findComboBox.Exists, "Find combobox does not exist after opening Replace tool large view");

            // Verify that the 'Exists' property of 'UI__InFiledstxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Replace_Tool_Large_ViewParams.InFiledsComboBoxExists, inFiledsComboBox.Exists, "InFields combobox does not exist after opening Replace tool large view");
        }
        
        /// <summary>
        /// Open_Ruby_Large_View - Use 'Open_Ruby_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Ruby Large View")]
        public void Open_Ruby_Large_View()
        {
            #region Variable Declarations
            WpfCustom ruby = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Ruby;
            WpfComboBox scriptIntellisenseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Ruby.LargeView.ScriptIntellisenseCombobox;
            WpfComboBox attachmentsIntellisenseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Ruby.LargeView.AttachmentsIntellisenseCombobox;
            WpfButton attachFileButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Ruby.LargeView.AttachFileButton;
            WpfCheckBox escapesequencesCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Ruby.LargeView.EscapesequencesCheckBox;
            WpfComboBox resultIntellisenseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Ruby.LargeView.ResultIntellisenseCombobox;
            WpfCustom onErrorPane = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Ruby.LargeView.OnErrorPane;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Ruby.DoneButton;
            #endregion

            // Double-Click 'DsfRubyActivity' custom control
            Mouse.DoubleClick(ruby, new Point(116, 12));

            // Verify that the 'Exists' property of 'UI__txtScript_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Ruby_Large_ViewParams.ScriptIntellisenseComboboxExists, scriptIntellisenseCombobox.Exists, "Ruby script textbox does not exist after openning large view with a double click." +
                    "");

            // Verify that the 'Exists' property of 'UI__AttachmentsTxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Ruby_Large_ViewParams.AttachmentsIntellisenseComboboxExists, attachmentsIntellisenseCombobox.Exists, "Ruby Attachments textbox does not exist after openning large view with a double c" +
                    "lick.");

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Open_Ruby_Large_ViewParams.AttachFileButtonExists, attachFileButton.Exists, "Ruby Attach File Button does not exist after openning large view with a double cl" +
                    "ick.");

            // Verify that the 'Exists' property of 'Escape sequences in variables' check box equals 'True'
            Assert.AreEqual(this.Open_Ruby_Large_ViewParams.EscapesequencesCheckBoxExists, escapesequencesCheckBox.Exists, "Ruby escape sequences checkbox does not exist after openning large view with a do" +
                    "uble click.");

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Ruby_Large_ViewParams.ResultIntellisenseComboboxExists, resultIntellisenseCombobox.Exists, "Ruby result textbox does not exist after openning large view with a double click." +
                    "");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_Ruby_Large_ViewParams.OnErrorPaneExists, onErrorPane.Exists, "Ruby OnError pane does not exist after openning large view with a double click.");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Ruby_Large_ViewParams.DoneButtonExists, doneButton.Exists, "Ruby Done button does not exist after openning large view with a double click.");
        }
        
        /// <summary>
        /// Open_Selectandapply_Large_View - Use 'Open_Selectandapply_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Selectandapply Large View")]
        public void Open_Selectandapply_Large_View()
        {
            #region Variable Declarations
            WpfCustom selectAndApply = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SelectAndApply;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SelectAndApply.DoneButton;
            WpfComboBox selectFromIntellisenseTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SelectAndApply.LargeView.SelectFromIntellisenseTextbox;
            WpfComboBox aliasIntellisenseTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SelectAndApply.LargeView.AliasIntellisenseTextbox;
            WpfCustom dropActivityHere = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SelectAndApply.LargeView.DropActivityHere;
            WpfCustom onErrorPane = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SelectAndApply.LargeView.OnErrorPane;
            #endregion

            // Double-Click 'DsfSelectAndApplyActivity' custom control
            Mouse.DoubleClick(selectAndApply, new Point(129, 10));

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Selectandapply_Large_ViewParams.DoneButtonExists, doneButton.Exists, "Select and apply done button does not exist after openning tool large view with d" +
                    "ouble click.");

            // Verify that the 'Exists' property of 'UI__FileNametxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Selectandapply_Large_ViewParams.SelectFromIntellisenseTextboxExists, selectFromIntellisenseTextbox.Exists, "Select and apply select from textbox does not exist after openning tool large vie" +
                    "w with double click.");

            // Verify that the 'Exists' property of 'UI__FileNametxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Selectandapply_Large_ViewParams.AliasIntellisenseTextboxExists, aliasIntellisenseTextbox.Exists, "Select and apply alias textbox does not exist after openning tool large view with" +
                    " double click.");

            // Verify that the 'Exists' property of 'Drop Activity Here' custom control equals 'True'
            Assert.AreEqual(this.Open_Selectandapply_Large_ViewParams.DropActivityHereExists, dropActivityHere.Exists, "Select and apply activity drop box does not exist after openning tool large view " +
                    "with double click.");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_Selectandapply_Large_ViewParams.OnErrorPaneExists, onErrorPane.Exists, "Select and apply OnError pane does not exist after openning tool large view with " +
                    "double click.");
        }
        
        /// <summary>
        /// Open_Sequence_Large_tool_View - Use 'Open_Sequence_Large_tool_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Sequence Large tool View")]
        public void Open_Sequence_Large_tool_View()
        {
            #region Variable Declarations
            WpfCustom sequence = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Sequence;
            WpfCustom sequenceLargeView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Sequence.SequenceLargeView;
            #endregion

            // Double-Click 'DsfSequenceActivity' custom control
            Mouse.DoubleClick(sequence, new Point(139, 12));

            // Verify that the 'Exists' property of 'DsfSequenceActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Sequence_Large_tool_ViewParams.SequenceLargeViewExists, sequenceLargeView.Exists, "SequenceLargeView does not exist after opening Sequence tool large view");
        }
        
        /// <summary>
        /// Open_Sharepoint_Copy_Tool_Large_View
        /// </summary>
        [When(@"I Open Sharepoint Copy Tool Large View")]
        public void Open_Sharepoint_Copy_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointCopyFile = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCopyFile;
            #endregion

            // Double-Click 'SharepointCopyFileActivity' custom control
            Mouse.DoubleClick(sharepointCopyFile, new Point(230, 11));
        }
        
        /// <summary>
        /// Open_Sharepoint_Create_Tool_Large_View
        /// </summary>
        [When(@"I Open Sharepoint Create Tool Large View")]
        public void Open_Sharepoint_Create_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointCreateListItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreateListItem;
            #endregion

            // Double-Click 'SharepointCreateListItemActivity' custom control
            Mouse.DoubleClick(sharepointCreateListItem, new Point(195, 11));
        }
        
        /// <summary>
        /// Open_Sharepoint_Delete_Tool_Large_View
        /// </summary>
        [When(@"I Open Sharepoint Delete Tool Large View")]
        public void Open_Sharepoint_Delete_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointDeleteFile = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointDeleteFile;
            #endregion

            // Double-Click 'SharepointDeleteListItemActivity' custom control
            Mouse.DoubleClick(sharepointDeleteFile, new Point(218, 11));
        }
        
        /// <summary>
        /// Open_Sharepoint_Download_File_Tool_Large_View_With_Double_Click
        /// </summary>
        [When(@"I Open Sharepoint Download File Tool Large View With Double Click")]
        public void Open_Sharepoint_Download_File_Tool_Large_View_With_Double_Click()
        {
            #region Variable Declarations
            WpfCustom sharepointDownloadFile = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointDownloadFile;
            #endregion

            // Double-Click 'SharepointFileDownLoadActivity' custom control
            Mouse.DoubleClick(sharepointDownloadFile, new Point(185, 9));
        }
        
        /// <summary>
        /// Open_Sharepoint_MoveFile_Tool_Large_View
        /// </summary>
        [When(@"I Open Sharepoint MoveFile Tool Large View")]
        public void Open_Sharepoint_MoveFile_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointMoveFile = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointMoveFile;
            #endregion

            // Double-Click 'SharePointMoveFileActivity' custom control
            Mouse.DoubleClick(sharepointMoveFile, new Point(230, 11));
        }
        
        /// <summary>
        /// Open_Sharepoint_Read_Tool_Large_View
        /// </summary>
        [When(@"I Open Sharepoint Read Tool Large View")]
        public void Open_Sharepoint_Read_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead;
            #endregion

            // Double-Click 'SharepointReadListActivity' custom control
            Mouse.DoubleClick(sharepointRead, new Point(195, 7));
        }
        
        /// <summary>
        /// Open_Sharepoint_Update_Tool_Large_View
        /// </summary>
        [When(@"I Open Sharepoint Update Tool Large View")]
        public void Open_Sharepoint_Update_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointUpdate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUpdate;
            #endregion

            // Double-Click 'SharepointUpdateListItemActivity' custom control
            Mouse.DoubleClick(sharepointUpdate, new Point(230, 11));
        }
        
        /// <summary>
        /// Open_Sharepoint_Upload_Tool_Large_View
        /// </summary>
        [When(@"I Open Sharepoint Upload Tool Large View")]
        public void Open_Sharepoint_Upload_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointUploadFile = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUploadFile;
            #endregion

            // Double-Click 'SharePointUploadActivity' custom control
            Mouse.DoubleClick(sharepointUploadFile, new Point(230, 11));
        }
        
        /// <summary>
        /// Open_SMTP_Email_Tool_Large_View - Use 'Open_SMTP_Email_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open SMTP Email Tool Large View")]
        public void Open_SMTP_Email_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sMTPEmail = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SMTPEmail;
            WpfCustom largeView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SMTPEmail.LargeView;
            #endregion

            // Double-Click 'DsfSendEmailActivity' custom control
            Mouse.DoubleClick(sMTPEmail, new Point(168, 11));

            // Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
            Assert.AreEqual(this.Open_SMTP_Email_Tool_Large_ViewParams.LargeViewExists, largeView.Exists, "Email Tool large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_SortRecords_Large_View
        /// </summary>
        [When(@"I Open SortRecords Large View")]
        public void Open_SortRecords_Large_View()
        {
            #region Variable Declarations
            WpfCustom sortRecords = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SortRecords;
            #endregion

            // Double-Click 'DsfSortRecordsActivity' custom control
            Mouse.DoubleClick(sortRecords, new Point(114, 13));
        }
        
        /// <summary>
        /// Open_SQL_Bulk_Insert_Tool_Large_View - Use 'Open_SQL_Bulk_Insert_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open SQL Bulk Insert Tool Large View")]
        public void Open_SQL_Bulk_Insert_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sqlBulkInsert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Double-Click 'DsfSqlBulkInsertActivity' custom control
            Mouse.DoubleClick(sqlBulkInsert, new Point(157, 6));

            // Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_SQL_Bulk_Insert_Tool_Large_ViewParams.SqlBulkInsertExists, sqlBulkInsert.Exists, "Sql Bulk Insert large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_SQL_Bulk_Insert_Tool_Qvi_Large_View - Use 'Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open SQL Bulk Insert Tool Qvi Large View")]
        public void Open_SQL_Bulk_Insert_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert.OpenQuickVariableInpToggleButton;
            WpfCustom sqlBulkInsert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams.SqlBulkInsertExists, sqlBulkInsert.Exists, "Sql Bulk Insert Qvi window on the design surface does not exist");
        }
        
        /// <summary>
        /// Open_SQL_Large_View_FromContextMenu - Use 'Open_SQL_Large_View_FromContextMenuParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open SQL Large View FromContextMenu")]
        public void Open_SQL_Large_View_FromContextMenu()
        {
            #region Variable Declarations
            WpfCustom sqlServerDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase;
            WpfMenuItem showLargeView = this.MainStudioWindow.DesignSurfaceContextMenu.ShowLargeView;
            WpfButton newDbSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.NewDbSourceButton;
            #endregion

            // Right-Click 'DsfSqlServerDatabaseActivity' custom control
            Mouse.Click(sqlServerDatabase, MouseButtons.Right, ModifierKeys.None, new Point(143, 6));

            // Click 'Show Large View' menu item
            Mouse.Click(showLargeView, new Point(43, 15));

            // Verify that the 'Exists' property of 'New' button equals 'True'
            Assert.AreEqual(this.Open_SQL_Large_View_FromContextMenuParams.NewDbSourceButtonExists, newDbSourceButton.Exists, "\"New button does not exist\"");
        }
        
        /// <summary>
        /// Open_Sql_Server_Tool_Large_View - Use 'Open_Sql_Server_Tool_Large_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Sql Server Tool Large View")]
        public void Open_Sql_Server_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sqlServerDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase;
            WpfCustom largeView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView;
            #endregion

            // Double-Click 'DsfSqlServerDatabaseActivity' custom control
            Mouse.DoubleClick(sqlServerDatabase, new Point(145, 5));

            // Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
            Assert.AreEqual(this.Open_Sql_Server_Tool_Large_ViewExpectedValues.LargeViewExists, largeView.Exists, "SQL Server tool large view does not exist on the design surface.");
        }
        
        /// <summary>
        /// Open_Sql_Server_Tool_small_View
        /// </summary>
        [When(@"I Open Sql Server Tool small View")]
        public void Open_Sql_Server_Tool_small_View()
        {
            #region Variable Declarations
            WpfCustom sqlServerDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase;
            #endregion

            // Double-Click 'DsfSqlServerDatabaseActivity' custom control
            Mouse.DoubleClick(sqlServerDatabase, new Point(253, 18));
        }
        
        /// <summary>
        /// Open_Switch_Tool_Large_View - Use 'Open_Switch_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Switch Tool Large View")]
        public void Open_Switch_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom switch1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Switch;
            WpfWindow switchCaseDialog = this.SwitchCaseDialog;
            #endregion

            // Double-Click custom control
            Mouse.DoubleClick(switch1, new Point(39, 35));

            // Verify that the 'Enabled' property of 'ActivityDefaultWindow' window equals 'True'
            Assert.AreEqual(this.Open_Switch_Tool_Large_ViewParams.SwitchCaseDialogEnabled, switchCaseDialog.Enabled, "Switch dialog does not exist after opening switch large view");
        }
        
        /// <summary>
        /// Open_System_Information_Tool_Large_View - Use 'Open_System_Information_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open System Information Tool Large View")]
        public void Open_System_Information_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom gatherSystemInfo = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo;
            WpfTable smallDataGridTable = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo.LargeViewContentCustom.SmallDataGridTable;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo.DoneButton;
            WpfGroup onErrorGroup = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo.LargeViewContentCustom.OnErrorCustom.OnErrorGroup;
            #endregion

            // Double-Click 'DsfGatherSystemInformationActivity' custom control
            Mouse.DoubleClick(gatherSystemInfo, new Point(145, 5));

            // Verify that the 'Exists' property of 'SmallDataGrid' table equals 'True'
            Assert.AreEqual(this.Open_System_Information_Tool_Large_ViewParams.SmallDataGridTableExists, smallDataGridTable.Exists, "Variable Grid does not exist after opening Gather System information tool large v" +
                    "iew");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_System_Information_Tool_Large_ViewParams.DoneButtonExists, doneButton.Exists, "Done button  does not exist after opening Gather System information tool large vi" +
                    "ew");

            // Verify that the 'Exists' property of 'On Error' group equals 'True'
            Assert.AreEqual(this.Open_System_Information_Tool_Large_ViewParams.OnErrorGroupExists, onErrorGroup.Exists, "OnError group  does not exist after opening Gather System information tool large " +
                    "view");
        }
        
        /// <summary>
        /// Open_System_Information_Tool_Qvi_Large_View - Use 'Open_System_Information_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open System Information Tool Qvi Large View")]
        public void Open_System_Information_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo.OpenQuickVariableInpToggleButton;
            WpfCustom gatherSystemInfo = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_System_Information_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfGatherSystemInformationActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_System_Information_Tool_Qvi_Large_ViewParams.GatherSystemInfoExists, gatherSystemInfo.Exists, "System Info QVI window does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_UniqueRecords_Large_View
        /// </summary>
        [When(@"I Open UniqueRecords Large View")]
        public void Open_UniqueRecords_Large_View()
        {
            #region Variable Declarations
            WpfCustom unique = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Unique;
            #endregion

            // Double-Click 'DsfUniqueActivity' custom control
            Mouse.DoubleClick(unique, new Point(134, 10));
        }
        
        /// <summary>
        /// Open_Unzip_Tool_Large_View - Use 'Open_Unzip_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Unzip Tool Large View")]
        public void Open_Unzip_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom unZip = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip;
            WpfCheckBox overwriteCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip.LargeViewContentCustom.OverwriteCheckBox;
            WpfComboBox unZipNameComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip.LargeViewContentCustom.UnZipNameComboBox;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip.DoneButton;
            #endregion

            // Double-Click 'DsfUnZip' custom control
            Mouse.DoubleClick(unZip, new Point(102, 14));

            // Verify that the 'Exists' property of 'DsfUnZip' custom control equals 'True'
            Assert.AreEqual(this.Open_Unzip_Tool_Large_ViewParams.UnZipExists, unZip.Exists, "Unzip large view on the design surface does not exist");

            // Verify that the 'Exists' property of 'Overwrite' check box equals 'True'
            Assert.AreEqual(this.Open_Unzip_Tool_Large_ViewParams.OverwriteCheckBoxExists, overwriteCheckBox.Exists, "OverwriteCheckBox does not exist on the design surface");

            // Verify that the 'Exists' property of 'UI__ZipNametxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Unzip_Tool_Large_ViewParams.UnZipNameComboBoxExists, unZipNameComboBox.Exists, "UnZipNameComboBox does not exist on the design surface");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Unzip_Tool_Large_ViewParams.DoneButtonExists, doneButton.Exists, "DoneButton does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_WebRequest_LargeView - Use 'Open_WebRequest_LargeViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open WebRequest LargeView")]
        public void Open_WebRequest_LargeView()
        {
            #region Variable Declarations
            WpfCustom webRequest = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebRequest;
            WpfCustom largeView = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebRequest.LargeView;
            #endregion

            // Double-Click 'DsfWebRequestActivity' custom control
            Mouse.DoubleClick(webRequest, new Point(126, 13));

            // Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
            Assert.AreEqual(this.Open_WebRequest_LargeViewParams.LargeViewExists, largeView.Exists, "Web request large view does not exist on design surface.");
        }
        
        /// <summary>
        /// Open_Write_File_Tool_Large_View - Use 'Open_Write_File_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Write File Tool Large View")]
        public void Open_Write_File_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom fileWrite = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite;
            WpfCustom onErrorCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite.LargeViewContentCustom.OnErrorCustom;
            WpfComboBox contentsComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite.LargeViewContentCustom.ContentsComboBox;
            WpfRadioButton overwriteRadioButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite.LargeViewContentCustom.OverwriteRadioButton;
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite.DoneButton;
            #endregion

            // Double-Click 'DsfFileWrite' custom control
            Mouse.DoubleClick(fileWrite, new Point(149, 13));

            // Verify that the 'Exists' property of 'DsfFileWrite' custom control equals 'True'
            Assert.AreEqual(this.Open_Write_File_Tool_Large_ViewParams.FileWriteExists, fileWrite.Exists, "Write file large view on the design surface does not exist");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_Write_File_Tool_Large_ViewParams.OnErrorCustomExists, onErrorCustom.Exists, "OnErrorCustom does not exist on the design surface");

            // Verify that the 'Exists' property of 'UI__Contentstxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Write_File_Tool_Large_ViewParams.ContentsComboBoxExists, contentsComboBox.Exists, "ContentsComboBox does not exist on the design surface");

            // Verify that the 'Exists' property of 'Overwrite' radio button equals 'True'
            Assert.AreEqual(this.Open_Write_File_Tool_Large_ViewParams.OverwriteRadioButtonExists, overwriteRadioButton.Exists, "OverwriteRadioButton does not exist on the design surface");

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Open_Write_File_Tool_Large_ViewParams.DoneButtonExists, doneButton.Exists, "DoneButton does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_Xpath_Tool_Large_View - Use 'Open_Xpath_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Xpath Tool Large View")]
        public void Open_Xpath_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom xPath = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Double-Click 'DsfXPathActivity' custom control
            Mouse.DoubleClick(xPath, new Point(113, 12));

            // Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Xpath_Tool_Large_ViewParams.XPathExists, xPath.Exists, "Xpath large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Open_Xpath_Tool_Qvi_Large_View - Use 'Open_Xpath_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Xpath Tool Qvi Large View")]
        public void Open_Xpath_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath.OpenQuickVariableInpToggleButton;
            WpfCustom xPath = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            WpfCustom quickVariableInputContent = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath.QuickVariableInputContent;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Xpath_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;

            // Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
            Assert.AreEqual(this.Open_Xpath_Tool_Qvi_Large_ViewParams.XPathExists, xPath.Exists, "Xpath Qvi does not exist on the design surface");

            // Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
            Assert.AreEqual(this.Open_Xpath_Tool_Qvi_Large_ViewParams.QuickVariableInputContentExists, quickVariableInputContent.Exists, "QVI on XPath is not open");
        }
        
        /// <summary>
        /// Open_Zip_Tool_Large_View - Use 'Open_Zip_Tool_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Open Zip Tool Large View")]
        public void Open_Zip_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom zip = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip;
            WpfComboBox selectedCompressComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip.LargeViewContentCustom.SelectedCompressComboBox;
            WpfCustom onErrorCustom = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip.LargeViewContentCustom.OnErrorCustom;
            WpfCheckBox overwriteCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip.LargeViewContentCustom.OverwriteCheckBox;
            WpfComboBox fileOrFolderComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip.LargeViewContentCustom.FileOrFolderComboBox;
            #endregion

            // Double-Click 'DsfZip' custom control
            Mouse.DoubleClick(zip, new Point(124, 12));

            // Verify that the 'Exists' property of 'DsfZip' custom control equals 'True'
            Assert.AreEqual(this.Open_Zip_Tool_Large_ViewParams.ZipExists, zip.Exists, "Zip large view on the design surface does not exist");

            // Verify that the 'Exists' property of 'UI__SelectedCompressionType_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Zip_Tool_Large_ViewParams.SelectedCompressComboBoxExists, selectedCompressComboBox.Exists, "SelectedCompressComboBox does not exist on the design surface");

            // Verify that the 'Exists' property of 'On Error' custom control equals 'True'
            Assert.AreEqual(this.Open_Zip_Tool_Large_ViewParams.OnErrorCustomExists, onErrorCustom.Exists, "OnErrorCustom does not exist on the design surface");

            // Verify that the 'Exists' property of 'Overwrite' check box equals 'True'
            Assert.AreEqual(this.Open_Zip_Tool_Large_ViewParams.OverwriteCheckBoxExists, overwriteCheckBox.Exists, "OverwriteCheckBox does not exist on the design surface");

            // Verify that the 'Exists' property of 'UI__FileOrFoldertxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Open_Zip_Tool_Large_ViewParams.FileOrFolderComboBoxExists, fileOrFolderComboBox.Exists, "FileOrFolderComboBox does not exist on the design surface");
        }
        
        /// <summary>
        /// Press_F6 - Use 'Press_F6Params' to pass parameters into this method.
        /// </summary>
        [When(@"I Press F6")]
        public void Press_F6()
        {
            #region Variable Declarations
            WpfWindow mainStudioWindow = this.MainStudioWindow;
            #endregion

            // Type '{F6}' in 'Warewolf' window
            Keyboard.SendKeys(mainStudioWindow, this.Press_F6Params.MainStudioWindowSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// PressF11_EnterFullScreen - Use 'PressF11_EnterFullScreenParams' to pass parameters into this method.
        /// </summary>
        [When(@"I PressF11 EnterFullScreen")]
        public void PressF11_EnterFullScreen()
        {
            #region Variable Declarations
            WpfWindow mainStudioWindow = this.MainStudioWindow;
            #endregion

            // Type '{F11}' in 'Warewolf' window
            Keyboard.SendKeys(mainStudioWindow, this.PressF11_EnterFullScreenParams.MainStudioWindowSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// RabbitMqAsserts - Use 'RabbitMqAssertsExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I RabbitMqAsserts")]
        public void RabbitMqAsserts()
        {
            #region Variable Declarations
            WpfEdit virtualHostTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.RabbitMqSourceTabPage.RabbitMQSourceCustom.VirtualHostTextBoxEdit;
            WpfEdit passwordTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.RabbitMqSourceTabPage.RabbitMQSourceCustom.PasswordTextBoxEdit;
            WpfEdit userNameTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.RabbitMqSourceTabPage.RabbitMQSourceCustom.UserNameTextBoxEdit;
            WpfEdit hostTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.RabbitMqSourceTabPage.RabbitMQSourceCustom.HostTextBoxEdit;
            WpfEdit portTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.RabbitMqSourceTabPage.RabbitMQSourceCustom.PortTextBoxEdit;
            #endregion

            // Verify that the 'Exists' property of 'VirtualHostTextBox' text box equals 'True'
            Assert.AreEqual(this.RabbitMqAssertsExpectedValues.VirtualHostTextBoxEditExists, virtualHostTextBoxEdit.Exists, "VirtualHoast textbox does not exist after opening RabbitMq Source tab");

            // Verify that the 'Exists' property of 'PasswordTextBox' text box equals 'True'
            Assert.AreEqual(this.RabbitMqAssertsExpectedValues.PasswordTextBoxEditExists, passwordTextBoxEdit.Exists, "Password textbox does not exist after opening RabbitMq Source");

            // Verify that the 'Exists' property of 'UserNameTextBox' text box equals 'True'
            Assert.AreEqual(this.RabbitMqAssertsExpectedValues.UserNameTextBoxEditExists, userNameTextBoxEdit.Exists, "Username textbox does not exist after opening RabbitMq Source");

            // Verify that the 'Exists' property of 'HostTextBox' text box equals 'True'
            Assert.AreEqual(this.RabbitMqAssertsExpectedValues.HostTextBoxEditExists, hostTextBoxEdit.Exists, "Host textbox does not exist after opening RabbitMq Source");

            // Verify that the 'Exists' property of 'PortTextBox' text box equals 'True'
            Assert.AreEqual(this.RabbitMqAssertsExpectedValues.PortTextBoxEditExists, portTextBoxEdit.Exists, "Port textbox does not exist after opening RabbitMq Source");
        }
        
        /// <summary>
        /// Remove_WorkflowName_From_Save_Dialog - Use 'Remove_WorkflowName_From_Save_DialogParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Remove WorkflowName From Save Dialog")]
        public void Remove_WorkflowName_From_Save_Dialog()
        {
            #region Variable Declarations
            WpfEdit serviceNameTextBox = this.SaveDialogWindow.ServiceNameTextBox;
            WpfText errorLabel = this.SaveDialogWindow.ErrorLabel;
            WpfButton saveButton = this.SaveDialogWindow.SaveButton;
            #endregion

            // Type '' in 'ServiceNameTextBox' text box
            serviceNameTextBox.Text = this.Remove_WorkflowName_From_Save_DialogParams.ServiceNameTextBoxText;

            // Verify that the 'DisplayText' property of ''Name' cannot be empty.' label equals 'Cannot be null'
            Assert.AreEqual(this.Remove_WorkflowName_From_Save_DialogParams.ErrorLabelDisplayText, errorLabel.DisplayText, "Name cannot be null validation message does not appear");

            // Verify that the 'Enabled' property of 'Save' button equals 'False'
            Assert.AreEqual(this.Remove_WorkflowName_From_Save_DialogParams.SaveButtonEnabled, saveButton.Enabled, "Save button on the Save dialog is enabled");
        }
        
        /// <summary>
        /// Rename_LocalWorkflow_To_SecodWorkFlow - Use 'Rename_LocalWorkflow_To_SecodWorkFlowParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Rename LocalWorkflow To SecodWorkFlow")]
        public void Rename_LocalWorkflow_To_SecodWorkFlow()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            WpfMenuItem rename = this.MainStudioWindow.ExplorerContextMenu.Rename;
            WpfEdit itemEdit = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem.ItemEdit;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, MouseButtons.Right, ModifierKeys.None, new Point(69, 10));

            // Click 'Rename' menu item
            Mouse.Click(rename, new Point(73, 15));

            // Type 'SecondWorkflow' in first text box next to 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            itemEdit.Text = this.Rename_LocalWorkflow_To_SecodWorkFlowParams.ItemEditText;

            // Type '{Enter}' in first text box next to 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Keyboard.SendKeys(itemEdit, this.Rename_LocalWorkflow_To_SecodWorkFlowParams.ItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Right_Click_Help_Tab
        /// </summary>
        [When(@"I Right Click Help Tab")]
        public void Right_Click_Help_Tab()
        {
            #region Variable Declarations
            WpfTabPage helpTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.HelpTab;
            #endregion

            // Right-Click 'Dev2.Studio.ViewModels.Help.HelpViewModel' tab
            Mouse.Click(helpTab, MouseButtons.Right, ModifierKeys.None, new Point(64, 15));
        }
        
        /// <summary>
        /// RightClick_BaseConvert_OnDesignSurface
        /// </summary>
        [When(@"I RightClick BaseConvert OnDesignSurface")]
        public void RightClick_BaseConvert_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom baseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert;
            #endregion

            // Right-Click 'DsfBaseConvertActivity' custom control
            Mouse.Click(baseConvert, MouseButtons.Right, ModifierKeys.None, new Point(148, 12));
        }
        
        /// <summary>
        /// RightClick_Calculate_OnDesignSurface
        /// </summary>
        [When(@"I RightClick Calculate OnDesignSurface")]
        public void RightClick_Calculate_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom calculate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate;
            #endregion

            // Right-Click 'DsfCalculateActivity' custom control
            Mouse.Click(calculate, MouseButtons.Right, ModifierKeys.None, new Point(144, 10));
        }
        
        /// <summary>
        /// RightClick_CaseConvert_OnDesignSurface
        /// </summary>
        [When(@"I RightClick CaseConvert OnDesignSurface")]
        public void RightClick_CaseConvert_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom caseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert;
            #endregion

            // Right-Click 'DsfCaseConvertActivity' custom control
            Mouse.Click(caseConvert, MouseButtons.Right, ModifierKeys.None, new Point(156, 10));
        }
        
        /// <summary>
        /// RightClick_Comment_OnDesignSurface
        /// </summary>
        [When(@"I RightClick Comment OnDesignSurface")]
        public void RightClick_Comment_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom comment = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Comment;
            #endregion

            // Right-Click 'DsfCommentActivity' custom control
            Mouse.Click(comment, MouseButtons.Right, ModifierKeys.None, new Point(121, 10));
        }
        
        /// <summary>
        /// RightClick_Copy_OnDesignSurface
        /// </summary>
        [When(@"I RightClick Copy OnDesignSurface")]
        public void RightClick_Copy_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathCopy = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy;
            #endregion

            // Right-Click 'DsfPathCopy' custom control
            Mouse.Click(pathCopy, MouseButtons.Right, ModifierKeys.None, new Point(104, 10));
        }
        
        /// <summary>
        /// RightClick_CountRecords_OnDesignSurface
        /// </summary>
        [When(@"I RightClick CountRecords OnDesignSurface")]
        public void RightClick_CountRecords_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom countRecordset = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CountRecordset;
            #endregion

            // Right-Click 'DsfCountRecordsetActivity' custom control
            Mouse.Click(countRecordset, MouseButtons.Right, ModifierKeys.None, new Point(131, 10));
        }
        
        /// <summary>
        /// RightClick_CreateJSON_OnDesignSurface
        /// </summary>
        [When(@"I RightClick CreateJSON OnDesignSurface")]
        public void RightClick_CreateJSON_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Right-Click 'DsfCreateJsonActivity' custom control
            Mouse.Click(createJson, MouseButtons.Right, ModifierKeys.None, new Point(128, 9));
        }
        
        /// <summary>
        /// RightClick_CreateTool_OnDesignSurface
        /// </summary>
        [When(@"I RightClick CreateTool OnDesignSurface")]
        public void RightClick_CreateTool_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathCreate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate;
            #endregion

            // Right-Click 'DsfPathCreate' custom control
            Mouse.Click(pathCreate, MouseButtons.Right, ModifierKeys.None, new Point(108, 14));
        }
        
        /// <summary>
        /// RightClick_DataMerge_OnDesignSurface
        /// </summary>
        [When(@"I RightClick DataMerge OnDesignSurface")]
        public void RightClick_DataMerge_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataMerge = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Right-Click 'DsfDataMergeActivity' custom control
            Mouse.Click(dataMerge, MouseButtons.Right, ModifierKeys.None, new Point(140, 7));
        }
        
        /// <summary>
        /// RightClick_DataSplit_OnDesignSurface
        /// </summary>
        [When(@"I RightClick DataSplit OnDesignSurface")]
        public void RightClick_DataSplit_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataSplit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Right-Click 'DsfDataSplitActivity' custom control
            Mouse.Click(dataSplit, MouseButtons.Right, ModifierKeys.None, new Point(153, 6));
        }
        
        /// <summary>
        /// RightClick_DateTime_OnDesignSurface
        /// </summary>
        [When(@"I RightClick DateTime OnDesignSurface")]
        public void RightClick_DateTime_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dateTime = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTime;
            #endregion

            // Right-Click 'DsfDateTimeActivity' custom control
            Mouse.Click(dateTime, MouseButtons.Right, ModifierKeys.None, new Point(145, 13));
        }
        
        /// <summary>
        /// RightClick_DateTimeDifference_OnDesignSurface
        /// </summary>
        [When(@"I RightClick DateTimeDifference OnDesignSurface")]
        public void RightClick_DateTimeDifference_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dateTimeDifference = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTimeDifference;
            #endregion

            // Right-Click 'DsfDateTimeDifferenceActivity' custom control
            Mouse.Click(dateTimeDifference, MouseButtons.Right, ModifierKeys.None, new Point(174, 10));
        }
        
        /// <summary>
        /// RightClick_Decision_OnDesignSurface
        /// </summary>
        [When(@"I RightClick Decision OnDesignSurface")]
        public void RightClick_Decision_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom decision = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Decision;
            #endregion

            // Right-Click 'FlowDecision' custom control
            Mouse.Click(decision, MouseButtons.Right, ModifierKeys.None, new Point(28, 22));
        }
        
        /// <summary>
        /// RightClick_Delete_OnDesignSurface
        /// </summary>
        [When(@"I RightClick Delete OnDesignSurface")]
        public void RightClick_Delete_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathDelete = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathDelete;
            #endregion

            // Right-Click 'DsfPathDelete' custom control
            Mouse.Click(pathDelete, MouseButtons.Right, ModifierKeys.None, new Point(100, 10));
        }
        
        /// <summary>
        /// RightClick_DeleteRecord_OnDesignSurface
        /// </summary>
        [When(@"I RightClick DeleteRecord OnDesignSurface")]
        public void RightClick_DeleteRecord_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom deleteRecord = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DeleteRecord;
            #endregion

            // Right-Click 'DsfDeleteRecordActivity' custom control
            Mouse.Click(deleteRecord, MouseButtons.Right, ModifierKeys.None, new Point(116, 9));
        }
        
        /// <summary>
        /// RightClick_DotNetDllConnector_OnDesignSurface
        /// </summary>
        [When(@"I RightClick DotNetDllConnector OnDesignSurface")]
        public void RightClick_DotNetDllConnector_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dotNetDll = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll;
            #endregion

            // Right-Click 'DsfDotNetDllActivity' custom control
            Mouse.Click(dotNetDll, MouseButtons.Right, ModifierKeys.None, new Point(164, 10));
        }
        
        /// <summary>
        /// RightClick_DropboxFileOperation_OnDesignSurface
        /// </summary>
        [When(@"I RightClick DropboxFileOperation OnDesignSurface")]
        public void RightClick_DropboxFileOperation_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dropBox_DOWNLOAD = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DropBox_DOWNLOAD;
            #endregion

            // Right-Click 'DsfDropBoxFileActivity' custom control
            Mouse.Click(dropBox_DOWNLOAD, MouseButtons.Right, ModifierKeys.None, new Point(181, 11));
        }
        
        /// <summary>
        /// RightClick_Email_OnDesignSurface
        /// </summary>
        [When(@"I RightClick Email OnDesignSurface")]
        public void RightClick_Email_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sMTPEmail = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SMTPEmail;
            #endregion

            // Right-Click 'DsfSendEmailActivity' custom control
            Mouse.Click(sMTPEmail, MouseButtons.Right, ModifierKeys.None, new Point(129, 11));
        }
        
        /// <summary>
        /// RightClick_ExecuteCommandLine_OnDesignSurface
        /// </summary>
        [When(@"I RightClick ExecuteCommandLine OnDesignSurface")]
        public void RightClick_ExecuteCommandLine_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom executeCommandLine = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            #endregion

            // Right-Click 'DsfExecuteCommandLineActivity' custom control
            Mouse.Click(executeCommandLine, MouseButtons.Right, ModifierKeys.None, new Point(165, 13));
        }
        
        /// <summary>
        /// RightClick_Explorer_First_Remote_Server_First_Item
        /// </summary>
        [When(@"I RightClick Explorer First Remote Server First Item")]
        public void RightClick_Explorer_First_Remote_Server_First_Item()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.FirstRemoteServer.FirstItem;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, MouseButtons.Right, ModifierKeys.None, new Point(107, 9));
        }
        
        /// <summary>
        /// RightClick_Explorer_Localhost_First_Item - Use 'RightClick_Explorer_Localhost_First_ItemParams' to pass parameters into this method.
        /// </summary>
        [When(@"I RightClick Explorer Localhost First Item")]
        public void RightClick_Explorer_Localhost_First_Item()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            WpfMenuItem open = this.MainStudioWindow.ExplorerContextMenu.Open;
            WpfMenuItem showDependencies = this.MainStudioWindow.ExplorerContextMenu.ShowDependencies;
            WpfMenuItem delete = this.MainStudioWindow.ExplorerContextMenu.Delete;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, MouseButtons.Right, ModifierKeys.None, new Point(77, 9));

            // Verify that the 'Exists' property of 'Open' menu item equals 'True'
            Assert.AreEqual(this.RightClick_Explorer_Localhost_First_ItemParams.OpenExists, open.Exists, "Open does not exist in explorer context menu.");

            // Verify that the 'Exists' property of 'Show Dependencies' menu item equals 'True'
            Assert.AreEqual(this.RightClick_Explorer_Localhost_First_ItemParams.ShowDependenciesExists, showDependencies.Exists, "ShowDependencies does not exist in explorer context menu.");

            // Verify that the 'Exists' property of 'Delete' menu item equals 'True'
            Assert.AreEqual(this.RightClick_Explorer_Localhost_First_ItemParams.DeleteExists, delete.Exists, "Delete does not exist in ExplorerContextMenu");
        }
        
        /// <summary>
        /// RightClick_FindIndex_OnDesignSurface
        /// </summary>
        [When(@"I RightClick FindIndex OnDesignSurface")]
        public void RightClick_FindIndex_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom findIndex = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindIndex;
            #endregion

            // Right-Click 'DsfIndexActivity' custom control
            Mouse.Click(findIndex, MouseButtons.Right, ModifierKeys.None, new Point(113, 8));
        }
        
        /// <summary>
        /// RightClick_FindRecordIndex_OnDesignSurface
        /// </summary>
        [When(@"I RightClick FindRecordIndex OnDesignSurface")]
        public void RightClick_FindRecordIndex_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom findRecordsIndex = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindRecordsIndex;
            #endregion

            // Right-Click 'DsfFindRecordsMultipleCriteriaActivity' custom control
            Mouse.Click(findRecordsIndex, MouseButtons.Right, ModifierKeys.None, new Point(191, 11));
        }
        
        /// <summary>
        /// RightClick_ForEach_OnDesignSurface
        /// </summary>
        [When(@"I RightClick ForEach OnDesignSurface")]
        public void RightClick_ForEach_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom forEach = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach;
            #endregion

            // Right-Click 'DsfForEachActivity' custom control
            Mouse.Click(forEach, MouseButtons.Right, ModifierKeys.None, new Point(137, 9));
        }
        
        /// <summary>
        /// RightClick_FormatNumber_OnDesignSurface
        /// </summary>
        [When(@"I RightClick FormatNumber OnDesignSurface")]
        public void RightClick_FormatNumber_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom formatNumber = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber;
            #endregion

            // Right-Click 'DsfNumberFormatActivity' custom control
            Mouse.Click(formatNumber, MouseButtons.Right, ModifierKeys.None, new Point(143, 9));
        }
        
        /// <summary>
        /// RightClick_Length_OnDesignSurface
        /// </summary>
        [When(@"I RightClick Length OnDesignSurface")]
        public void RightClick_Length_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom length = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Length;
            #endregion

            // Right-Click 'DsfRecordsetLengthActivity' custom control
            Mouse.Click(length, MouseButtons.Right, ModifierKeys.None, new Point(97, 10));
        }
        
        /// <summary>
        /// RightClick_Move_OnDesignSurface
        /// </summary>
        [When(@"I RightClick Move OnDesignSurface")]
        public void RightClick_Move_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathMove = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove;
            #endregion

            // Right-Click 'DsfPathMove' custom control
            Mouse.Click(pathMove, MouseButtons.Right, ModifierKeys.None, new Point(98, 11));
        }
        
        /// <summary>
        /// RightClick_MySQLConnector_OnDesignSurface
        /// </summary>
        [When(@"I RightClick MySQLConnector OnDesignSurface")]
        public void RightClick_MySQLConnector_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom mySqlDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MySqlDatabase;
            #endregion

            // Right-Click 'DsfMySqlDatabaseActivity' custom control
            Mouse.Click(mySqlDatabase, MouseButtons.Right, ModifierKeys.None, new Point(202, 10));
        }
        
        /// <summary>
        /// RightClick_New_Workflow_Tab
        /// </summary>
        [When(@"I RightClick New Workflow Tab")]
        public void RightClick_New_Workflow_Tab()
        {
            #region Variable Declarations
            WpfTabPage workflowTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab;
            #endregion

            // Right-Click 'Dev2.Studio.ViewModels.Workflow.WorkflowDesignerVi...' tab
            Mouse.Click(workflowTab, MouseButtons.Right, ModifierKeys.None, new Point(63, 18));
        }
        
        /// <summary>
        /// RightClick_Random_OnDesignSurface
        /// </summary>
        [When(@"I RightClick Random OnDesignSurface")]
        public void RightClick_Random_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom random = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random;
            #endregion

            // Right-Click 'DsfRandomActivity' custom control
            Mouse.Click(random, MouseButtons.Right, ModifierKeys.None, new Point(107, 13));
        }
        
        /// <summary>
        /// RightClick_ReadFile_OnDesignSurface
        /// </summary>
        [When(@"I RightClick ReadFile OnDesignSurface")]
        public void RightClick_ReadFile_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom fileRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead;
            #endregion

            // Right-Click 'DsfFileRead' custom control
            Mouse.Click(fileRead, MouseButtons.Right, ModifierKeys.None, new Point(99, 14));
        }
        
        /// <summary>
        /// RightClick_ReadFolder_OnDesignSurface
        /// </summary>
        [When(@"I RightClick ReadFolder OnDesignSurface")]
        public void RightClick_ReadFolder_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom folderRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead;
            #endregion

            // Right-Click 'DsfFolderRead' custom control
            Mouse.Click(folderRead, MouseButtons.Right, ModifierKeys.None, new Point(115, 12));
        }
        
        /// <summary>
        /// RightClick_Rename_OnDesignSurface
        /// </summary>
        [When(@"I RightClick Rename OnDesignSurface")]
        public void RightClick_Rename_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathRename = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename;
            #endregion

            // Right-Click 'DsfPathRename' custom control
            Mouse.Click(pathRename, MouseButtons.Right, ModifierKeys.None, new Point(103, 7));
        }
        
        /// <summary>
        /// RightClick_Replace_OnDesignSurface
        /// </summary>
        [When(@"I RightClick Replace OnDesignSurface")]
        public void RightClick_Replace_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom replace = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Replace;
            #endregion

            // Right-Click 'DsfReplaceActivity' custom control
            Mouse.Click(replace, MouseButtons.Right, ModifierKeys.None, new Point(100, 7));
        }
        
        /// <summary>
        /// RightClick_Sequence_OnDesignSurface
        /// </summary>
        [When(@"I RightClick Sequence OnDesignSurface")]
        public void RightClick_Sequence_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sequence = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Sequence;
            #endregion

            // Right-Click 'DsfSequenceActivity' custom control
            Mouse.Click(sequence, MouseButtons.Right, ModifierKeys.None, new Point(119, 8));
        }
        
        /// <summary>
        /// RightClick_SharepointCreateListItem_OnDesignSurface
        /// </summary>
        [When(@"I RightClick SharepointCreateListItem OnDesignSurface")]
        public void RightClick_SharepointCreateListItem_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointCreateListItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreateListItem;
            #endregion

            // Right-Click 'SharepointCreateListItemActivity' custom control
            Mouse.Click(sharepointCreateListItem, MouseButtons.Right, ModifierKeys.None, new Point(199, 12));
        }
        
        /// <summary>
        /// RightClick_SharepointDelete_OnDesignSurface
        /// </summary>
        [When(@"I RightClick SharepointDelete OnDesignSurface")]
        public void RightClick_SharepointDelete_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointDeleteFile = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointDeleteFile;
            #endregion

            // Right-Click 'SharepointDeleteListItemActivity' custom control
            Mouse.Click(sharepointDeleteFile, MouseButtons.Right, ModifierKeys.None, new Point(217, 8));
        }
        
        /// <summary>
        /// RightClick_SharepointRead_OnDesignSurface
        /// </summary>
        [When(@"I RightClick SharepointRead OnDesignSurface")]
        public void RightClick_SharepointRead_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead;
            #endregion

            // Right-Click 'SharepointReadListActivity' custom control
            Mouse.Click(sharepointRead, MouseButtons.Right, ModifierKeys.None, new Point(203, 9));
        }
        
        /// <summary>
        /// RightClick_SharepointUpdate_OnDesignSurface
        /// </summary>
        [When(@"I RightClick SharepointUpdate OnDesignSurface")]
        public void RightClick_SharepointUpdate_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointUpdate = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUpdate;
            #endregion

            // Right-Click 'SharepointUpdateListItemActivity' custom control
            Mouse.Click(sharepointUpdate, MouseButtons.Right, ModifierKeys.None, new Point(210, 5));
        }
        
        /// <summary>
        /// RightClick_SortRecords_OnDesignSurface
        /// </summary>
        [When(@"I RightClick SortRecords OnDesignSurface")]
        public void RightClick_SortRecords_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sortRecords = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SortRecords;
            #endregion

            // Right-Click 'DsfSortRecordsActivity' custom control
            Mouse.Click(sortRecords, MouseButtons.Right, ModifierKeys.None, new Point(118, 8));
        }
        
        /// <summary>
        /// RightClick_SQLConnector_OnDesignSurface
        /// </summary>
        [When(@"I RightClick SQLConnector OnDesignSurface")]
        public void RightClick_SQLConnector_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sqlBulkInsert = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Right-Click 'DsfSqlBulkInsertActivity' custom control
            Mouse.Click(sqlBulkInsert, MouseButtons.Right, ModifierKeys.None, new Point(143, 6));
        }
        
        /// <summary>
        /// RightClick_SqlServerConnector_OnDesignSurface
        /// </summary>
        [When(@"I RightClick SqlServerConnector OnDesignSurface")]
        public void RightClick_SqlServerConnector_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sqlServerDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase;
            #endregion

            // Right-Click 'DsfSqlServerDatabaseActivity' custom control
            Mouse.Click(sqlServerDatabase, MouseButtons.Right, ModifierKeys.None, new Point(198, 8));
        }
        
        /// <summary>
        /// RightClick_Switch_OnDesignSurface
        /// </summary>
        [When(@"I RightClick Switch OnDesignSurface")]
        public void RightClick_Switch_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom switch1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Switch;
            #endregion

            // Right-Click custom control
            Mouse.Click(switch1, MouseButtons.Right, ModifierKeys.None, new Point(46, 15));
        }
        
        /// <summary>
        /// RightClick_SystemInformation_OnDesignSurface
        /// </summary>
        [When(@"I RightClick SystemInformation OnDesignSurface")]
        public void RightClick_SystemInformation_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom gatherSystemInfo = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo;
            #endregion

            // Right-Click 'DsfGatherSystemInformationActivity' custom control
            Mouse.Click(gatherSystemInfo, MouseButtons.Right, ModifierKeys.None, new Point(217, 10));
        }
        
        /// <summary>
        /// RightClick_UniqueRecords_OnDesignSurface
        /// </summary>
        [When(@"I RightClick UniqueRecords OnDesignSurface")]
        public void RightClick_UniqueRecords_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom unique = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Unique;
            #endregion

            // Right-Click 'DsfUniqueActivity' custom control
            Mouse.Click(unique, MouseButtons.Right, ModifierKeys.None, new Point(133, 11));
        }
        
        /// <summary>
        /// RightClick_Unzip_OnDesignSurface
        /// </summary>
        [When(@"I RightClick Unzip OnDesignSurface")]
        public void RightClick_Unzip_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom unZip = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip;
            #endregion

            // Right-Click 'DsfUnZip' custom control
            Mouse.Click(unZip, MouseButtons.Right, ModifierKeys.None, new Point(101, 10));
        }
        
        /// <summary>
        /// RightClick_WebRequest_OnDesignSurface
        /// </summary>
        [When(@"I RightClick WebRequest OnDesignSurface")]
        public void RightClick_WebRequest_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom webRequest = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebRequest;
            #endregion

            // Right-Click 'DsfWebRequestActivity' custom control
            Mouse.Click(webRequest, MouseButtons.Right, ModifierKeys.None, new Point(165, 8));
        }
        
        /// <summary>
        /// RightClick_WriteFile_OnDesignSurface
        /// </summary>
        [When(@"I RightClick WriteFile OnDesignSurface")]
        public void RightClick_WriteFile_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom fileWrite = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite;
            #endregion

            // Right-Click 'DsfFileWrite' custom control
            Mouse.Click(fileWrite, MouseButtons.Right, ModifierKeys.None, new Point(96, 12));
        }
        
        /// <summary>
        /// RightClick_XPath_OnDesignSurface
        /// </summary>
        [When(@"I RightClick XPath OnDesignSurface")]
        public void RightClick_XPath_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom xPath = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Right-Click 'DsfXPathActivity' custom control
            Mouse.Click(xPath, MouseButtons.Right, ModifierKeys.None, new Point(99, 8));
        }
        
        /// <summary>
        /// RightClick_Zip_OnDesignSurface
        /// </summary>
        [When(@"I RightClick Zip OnDesignSurface")]
        public void RightClick_Zip_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom zip = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip;
            #endregion

            // Right-Click 'DsfZip' custom control
            Mouse.Click(zip, MouseButtons.Right, ModifierKeys.None, new Point(95, 12));
        }
        
        /// <summary>
        /// Search_And_Select_DiceRoll - Use 'Search_And_Select_DiceRollParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Search And Select DiceRoll")]
        public void Search_And_Select_DiceRoll()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.SearchTextBox;
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            #endregion

            // Click 'SearchTextBox' text box
            Mouse.Click(searchTextBox, new Point(165, 9));

            // Type 'Dice Roll' in 'SearchTextBox' text box
            searchTextBox.Text = this.Search_And_Select_DiceRollParams.SearchTextBoxText;

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, MouseButtons.Right, ModifierKeys.None, new Point(101, 9));
        }
        
        /// <summary>
        /// Search_And_Select_HelloWolrd - Use 'Search_And_Select_HelloWolrdParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Search And Select HelloWolrd")]
        public void Search_And_Select_HelloWolrd()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.SearchTextBox;
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            #endregion

            // Click 'SearchTextBox' text box
            Mouse.Click(searchTextBox, new Point(165, 9));

            // Type 'Hello World' in 'SearchTextBox' text box
            searchTextBox.Text = this.Search_And_Select_HelloWolrdParams.SearchTextBoxText;

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, MouseButtons.Right, ModifierKeys.None, new Point(101, 9));
        }
        
        /// <summary>
        /// Select_AcceptanceTestin_create
        /// </summary>
        [When(@"I Select AcceptanceTestin create")]
        public void Select_AcceptanceTestin_create()
        {
            #region Variable Declarations
            WpfComboBox methodList = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreateListItem.SmallView.MethodList;
            WpfListItem uIAcceptanceTesting_CrListItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreateListItem.SmallView.MethodList.UIAcceptanceTesting_CrListItem;
            #endregion

            // Click 'UI__TableName_AutoID' combo box
            Mouse.Click(methodList, new Point(119, 7));

            // Click 'AcceptanceTesting_Create' list item
            Mouse.Click(uIAcceptanceTesting_CrListItem, new Point(114, 13));
        }
        
        /// <summary>
        /// Select_Action_From_PostgreTool - Use 'Select_Action_From_PostgreToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select Action From PostgreTool")]
        public void Select_Action_From_PostgreTool()
        {
            #region Variable Declarations
            WpfComboBox actionsComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PostgreSqlActivitCustom.LargeViewContentCustom.ActionsComboBox;
            WpfTable largeDataGridTable = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PostgreSqlActivitCustom.LargeViewContentCustom.LargeDataGridTable;
            #endregion

            // Click 'ActionsComboBox' combo box
            Mouse.Click(actionsComboBox, new Point(119, 7));

            // Click 'ActionsComboBox' combo box
            Mouse.Click(actionsComboBox, new Point(114, 13));

            // Verify that the 'Enabled' property of 'LargeDataGrid' table equals 'True'
            Assert.AreEqual(this.Select_Action_From_PostgreToolParams.LargeDataGridTableEnabled, largeDataGridTable.Enabled, "Inputs grid is not enabled after selecting an Action.");
        }
        
        /// <summary>
        /// Select_AppData_From_MethodList
        /// </summary>
        [When(@"I Select AppData From MethodList")]
        public void Select_AppData_From_MethodList()
        {
            #region Variable Declarations
            WpfComboBox methodList = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreateListItem.SmallView.MethodList;
            WpfListItem uIAppdataListItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreateListItem.SmallView.MethodList.UIAppdataListItem;
            #endregion

            // Click 'UI__TableName_AutoID' combo box
            Mouse.Click(methodList, new Point(174, 7));

            // Click 'appdata' list item
            Mouse.Click(uIAppdataListItem, new Point(43, 15));
        }
        
        /// <summary>
        /// Select_AppData_From_MethodList_From_ReadTool
        /// </summary>
        [When(@"I Select AppData From MethodList From ReadTool")]
        public void Select_AppData_From_MethodList_From_ReadTool()
        {
            #region Variable Declarations
            WpfComboBox methodList = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead.SmallView.MethodList;
            WpfListItem uIAppdataListItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead.SmallView.MethodList.UIAppdataListItem;
            #endregion

            // Click 'UI__TableName_AutoID' combo box
            Mouse.Click(methodList, new Point(174, 7));

            // Click 'appdata' list item
            Mouse.Click(uIAppdataListItem, new Point(43, 15));
        }
        
        /// <summary>
        /// Select_Copy_FromContextMenu
        /// </summary>
        [When(@"I Select Copy FromContextMenu")]
        public void Select_Copy_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem copy = this.MainStudioWindow.DesignSurfaceContextMenu.Copy;
            #endregion

            // Click 'Copy' menu item
            Mouse.Click(copy, new Point(27, 18));
        }
        
        /// <summary>
        /// Select_CopyAsImage_FromContextMenu
        /// </summary>
        [When(@"I Select CopyAsImage FromContextMenu")]
        public void Select_CopyAsImage_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem copyasImage = this.MainStudioWindow.DesignSurfaceContextMenu.CopyasImage;
            #endregion

            // Click 'Copy as Image' menu item
            Mouse.Click(copyasImage, new Point(62, 22));
        }
        
        /// <summary>
        /// Select_Cut_FromContextMenu
        /// </summary>
        [When(@"I Select Cut FromContextMenu")]
        public void Select_Cut_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem cut = this.MainStudioWindow.DesignSurfaceContextMenu.Cut;
            #endregion

            // Click 'Cut' menu item
            Mouse.Click(cut, new Point(53, 16));
        }
        
        /// <summary>
        /// Select_Delete_FromExplorerContextMenu - Use 'Select_Delete_FromExplorerContextMenuParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select Delete FromExplorerContextMenu")]
        public void Select_Delete_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem delete = this.MainStudioWindow.ExplorerContextMenu.Delete;
            WpfButton yesButton = this.MessageBoxWindow.YesButton;
            #endregion

            // Click 'Delete' menu item
            Mouse.Click(delete, new Point(87, 12));

            // Verify that the 'Exists' property of 'Yes' button equals 'True'
            Assert.AreEqual(this.Select_Delete_FromExplorerContextMenuParams.YesButtonExists, yesButton.Exists, "Message box Yes button does not exist");
        }
        
        /// <summary>
        /// Select_DeleteRow_FromContextMenu
        /// </summary>
        [When(@"I Select DeleteRow FromContextMenu")]
        public void Select_DeleteRow_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem deleteRow = this.MainStudioWindow.DesignSurfaceContextMenu.DeleteRow;
            #endregion

            // Click 'Delete Row' menu item
            Mouse.Click(deleteRow, new Point(74, 9));
        }
        
        /// <summary>
        /// Select_Deploy_FromExplorerContextMenu - Use 'Select_Deploy_FromExplorerContextMenuParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select Deploy FromExplorerContextMenu")]
        public void Select_Deploy_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem deploy = this.MainStudioWindow.ExplorerContextMenu.Deploy;
            WpfTabPage deployTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab;
            #endregion

            // Click 'Deploy' menu item
            Mouse.Click(deploy, new Point(57, 11));

            // Verify that the 'Exists' property of 'Dev2.ViewModels.DeployWorksurfaceViewModel' tab equals 'True'
            Assert.AreEqual(this.Select_Deploy_FromExplorerContextMenuParams.DeployTabExists, deployTab.Exists, "DeployTab does not exist after clicking Deploy");
        }
        
        /// <summary>
        /// Select_Dev2TestingDB_From_DB_Source_Wizard_Database_Combobox - Use 'Select_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select Dev2TestingDB From DB Source Wizard Database Combobox")]
        public void Select_Dev2TestingDB_From_DB_Source_Wizard_Database_Combobox()
        {
            #region Variable Declarations
            WpfCustom databaseCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.DatabaseCombobox;
            WpfCustom comboboxListItemAsDev2TestingDB = this.MainStudioWindow.ComboboxListItemAsDev2TestingDB;
            WpfText uIDev2TestingDBText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.UIDatabaseComboxBoxCustom.UIDev2TestingDBText;
            #endregion

            // Click 'DatabaseComboxBox' custom control
            Mouse.Click(databaseCombobox, new Point(221, 9));

            // Click 'Dev2TestingDB' custom control
            Mouse.Click(comboboxListItemAsDev2TestingDB, new Point(129, 19));

            // Verify that the 'DisplayText' property of 'Dev2TestingDB' label equals 'Dev2TestingDB'
            Assert.AreEqual(this.Select_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams.UIDev2TestingDBTextDisplayText, uIDev2TestingDBText.DisplayText);
        }
        
        /// <summary>
        /// Select_First_Item_From_DotNet_DLL_Large_View_Source_Combobox
        /// </summary>
        [When(@"I Select First Item From DotNet DLL Large View Source Combobox")]
        public void Select_First_Item_From_DotNet_DLL_Large_View_Source_Combobox()
        {
            #region Variable Declarations
            WpfComboBox sourcesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.SourcesComboBox;
            WpfListItem listItem1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.SourcesComboBox.ListItem1;
            #endregion

            // Click 'SourcesComboBox' combo box
            Mouse.Click(sourcesComboBox, new Point(175, 9));

            // Click 'Dev2.Common.Interfaces.Core.PluginSourceDefinition' list item
            Mouse.Click(listItem1, new Point(163, 17));
        }
        
        /// <summary>
        /// Select_FirstItem_From_DotNet_DLL_Large_View_Action_Combobox - Use 'Select_FirstItem_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Select FirstItem From DotNet DLL Large View Action Combobox")]
        public void Select_FirstItem_From_DotNet_DLL_Large_View_Action_Combobox()
        {
            #region Variable Declarations
            WpfComboBox actionsComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ActionsComboBox;
            WpfListItem item1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ActionsComboBox.Item1;
            #endregion

            // Click 'ActionsComboBox' combo box
            Mouse.Click(actionsComboBox, new Point(216, 7));

            // Click 'Item1' list item
            Mouse.Click(item1, new Point(137, 7));

            // Verify that the 'SelectedItem' property of 'ActionsComboBox' combo box equals 'Dev2.Common.Interfaces.PluginAction'
            Assert.AreEqual(this.Select_FirstItem_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues.ActionsComboBoxSelectedItem, actionsComboBox.SelectedItem, "System.Random is not selected in DotNet DLL tool large view namespace combobox.");
        }
        
        /// <summary>
        /// Select_GetCountries_From_SQL_Server_Large_View_Action_Combobox - Use 'Select_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Select GetCountries From SQL Server Large View Action Combobox")]
        public void Select_GetCountries_From_SQL_Server_Large_View_Action_Combobox()
        {
            #region Variable Declarations
            WpfComboBox actionsCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.ActionsCombobox;
            WpfListItem getCountriesListItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.ActionsCombobox.GetCountriesListItem;
            #endregion

            // Click 'ActionsComboBox' combo box
            Mouse.Click(actionsCombobox, new Point(216, 7));

            // Click 'GetCountries' list item
            Mouse.Click(getCountriesListItem, new Point(137, 7));

            // Verify that the 'SelectedItem' property of 'ActionsComboBox' combo box equals 'dbo.GetCountries'
            Assert.AreEqual(this.Select_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues.ActionsComboboxSelectedItem, actionsCombobox.SelectedItem, "GetCountries is not selected in SQL server large view action combobox.");
        }
        
        /// <summary>
        /// Select_GUID_From_Random_Type_Combobox
        /// </summary>
        [When(@"I Select GUID From Random Type Combobox")]
        public void Select_GUID_From_Random_Type_Combobox()
        {
            #region Variable Declarations
            WpfComboBox typeComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random.SmallViewContentCustom.TypeComboBox;
            WpfListItem gUID = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random.SmallViewContentCustom.TypeComboBox.GUID;
            #endregion

            // Click 'UI__Wherecbx_AutoID' combo box
            Mouse.Click(typeComboBox, new Point(133, 10));

            // Click 'GUID' list item
            Mouse.Click(gUID, new Point(31, 16));
        }
        
        /// <summary>
        /// Select_http_From_Server_Source_Wizard_Address_Protocol_Dropdown - Use 'Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select http From Server Source Wizard Address Protocol Dropdown")]
        public void Select_http_From_Server_Source_Wizard_Address_Protocol_Dropdown()
        {
            #region Variable Declarations
            WpfButton toggleDropdown = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.ProtocolCombobox.ToggleDropdown;
            WpfCustom comboboxListItemAsHttp = this.MainStudioWindow.ComboboxListItemAsHttp;
            WpfText httpSelectedItemText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.ProtocolCombobox.HttpSelectedItemText;
            WpfEdit addressEditBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.AddressComboBox.AddressEditBox;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleDropdown, new Point(54, 8));

            // Verify that the 'Exists' property of 'http' custom control equals 'True'
            Assert.AreEqual(this.Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams.ComboboxListItemAsHttpExists, comboboxListItemAsHttp.Exists, "Http does not exist in server source wizard address protocol dropdown list.");

            // Click 'http' custom control
            Mouse.Click(comboboxListItemAsHttp, new Point(31, 12));

            // Verify that the 'DisplayText' property of 'http' label equals 'http'
            Assert.AreEqual(this.Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams.HttpSelectedItemTextDisplayText, httpSelectedItemText.DisplayText, "Server source wizard address protocol is not equal to http.");

            // Verify that the 'Exists' property of 'Text' text box equals 'True'
            Assert.AreEqual(this.Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams.AddressEditBoxExists, addressEditBox.Exists, "Server source wizard address textbox does not exist");
        }
        
        /// <summary>
        /// Select_InsertRow_FromContextMenu
        /// </summary>
        [When(@"I Select InsertRow FromContextMenu")]
        public void Select_InsertRow_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem insertRow = this.MainStudioWindow.DesignSurfaceContextMenu.InsertRow;
            #endregion

            // Click 'Insert Row' menu item
            Mouse.Click(insertRow, new Point(66, 19));
        }
        
        /// <summary>
        /// Select_Letters_From_Random_Type_Combobox - Use 'Select_Letters_From_Random_Type_ComboboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select Letters From Random Type Combobox")]
        public void Select_Letters_From_Random_Type_Combobox()
        {
            #region Variable Declarations
            WpfComboBox typeComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random.SmallViewContentCustom.TypeComboBox;
            WpfListItem letters = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random.SmallViewContentCustom.TypeComboBox.Letters;
            WpfComboBox lengthComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random.SmallViewContentCustom.LengthComboBox;
            #endregion

            // Click 'UI__Wherecbx_AutoID' combo box
            Mouse.Click(typeComboBox, new Point(133, 10));

            // Click 'Letters' list item
            Mouse.Click(letters, new Point(31, 16));

            // Verify that the 'Exists' property of 'UI__Lengthstxt_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Select_Letters_From_Random_Type_ComboboxParams.LengthComboBoxExists, lengthComboBox.Exists, "Length combobox does not exist after selecting Letters as Random Type");
        }
        
        /// <summary>
        /// Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_Combobox - Use 'Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select LocalhostConnected From Deploy Tab Destination Server Combobox")]
        public void Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_Combobox()
        {
            #region Variable Declarations
            WpfButton toggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab.WorkSurfaceContext.DestinationServerConectControl.Combobox.ToggleButton;
            WpfCustom comboboxListItemAsNewRemoteServer = this.MainStudioWindow.ComboboxListItemAsNewRemoteServer;
            WpfCustom comboboxListItemAsLocalhostConnected = this.MainStudioWindow.ComboboxListItemAsLocalhostConnected;
            WpfText remoteConnectionIntegrationText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab.WorkSurfaceContext.SourceServerConectControl.Combobox.RemoteConnectionIntegrationText;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleButton, new Point(230, 9));

            // Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
            Assert.AreEqual(this.Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams.ComboboxListItemAsNewRemoteServerExists, comboboxListItemAsNewRemoteServer.Exists, "New Remote Server... option does not exist in Destination server combobox.");

            // Verify that the 'Exists' property of 'localhost (Connected)' custom control equals 'True'
            Assert.AreEqual(this.Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams.ComboboxListItemAsLocalhostConnectedExists, comboboxListItemAsLocalhostConnected.Exists, "Remote Connection Integration option does not exist in Destination server combobo" +
                    "x.");

            // Click 'localhost (Connected)' custom control
            Mouse.Click(comboboxListItemAsLocalhostConnected, new Point(226, 13));

            // Verify that the 'DisplayText' property of 'Remote Connection Integration' label equals 'Remote Connection Integration'
            Assert.AreEqual(this.Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams.RemoteConnectionIntegrationTextDisplayText, remoteConnectionIntegrationText.DisplayText, "Selected source server in deploy is not Remote Connection Integration.");
        }
        
        /// <summary>
        /// Select_LoggingTab
        /// </summary>
        [When(@"I Select LoggingTab")]
        public void Select_LoggingTab()
        {
            #region Variable Declarations
            WpfTabPage loggingTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.LoggingTab;
            #endregion

            // Click 'System.Windows.Controls.TabItem Header: Content:' tab
            Mouse.Click(loggingTab, new Point(57, 7));
        }
        
        /// <summary>
        /// Select_Months_From_AddTime_Type
        /// </summary>
        [When(@"I Select Months From AddTime Type")]
        public void Select_Months_From_AddTime_Type()
        {
            #region Variable Declarations
            WpfComboBox addTimeTypeComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTime.SmallViewContentCustom.AddTimeTypeComboBox;
            WpfListItem months = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTime.SmallViewContentCustom.AddTimeTypeComboBox.Months;
            #endregion

            // Click 'UI__AddTimeTypecbx_AutoID' combo box
            Mouse.Click(addTimeTypeComboBox, new Point(175, 9));

            // Click 'Months' list item
            Mouse.Click(months, new Point(163, 17));
        }
        
        /// <summary>
        /// Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_Dropdown - Use 'Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select MSSQLSERVER From DB Source Wizard Address Protocol Dropdown")]
        public void Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_Dropdown()
        {
            #region Variable Declarations
            WpfButton toggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.ServerTypeComboBox.ToggleButton;
            WpfText microsoftSQLServerText = this.MainStudioWindow.ComboboxListItemAsMicrosoftSQLServer.MicrosoftSQLServerText;
            WpfText microsoftSQLServer = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.ServerTypeComboBox.MicrosoftSQLServer;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleButton, new Point(625, 11));

            // Verify that the 'Exists' property of 'Microsoft SQL Server' label equals 'True'
            Assert.AreEqual(this.Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams.MicrosoftSQLServerTextExists, microsoftSQLServerText.Exists, "Microsoft SQL Server does not exist as an option in new DB source wizard type com" +
                    "bobox.");

            // Click 'Microsoft SQL Server' label
            Mouse.Click(microsoftSQLServerText, new Point(118, 6));

            // Verify that the 'DisplayText' property of 'Microsoft SQL Server' label equals 'Microsoft SQL Server'
            Assert.AreEqual(this.Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams.MicrosoftSQLServerDisplayText, microsoftSQLServer.DisplayText, "Microsoft SQL Server is not selected in DB source wizard.");
        }
        
        /// <summary>
        /// Select_NewDatabaseSource_FromExplorerContextMenu
        /// </summary>
        [When(@"I Select NewDatabaseSource FromExplorerContextMenu")]
        public void Select_NewDatabaseSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newDatabaseSource = this.MainStudioWindow.ExplorerContextMenu.NewDatabaseSource;
            #endregion

            // Click 'New Database Source' menu item
            Mouse.Click(newDatabaseSource, new Point(72, 14));
        }
        
        /// <summary>
        /// Select_NewDatabaseSource_FromSqlServerTool - Use 'Select_NewDatabaseSource_FromSqlServerToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select NewDatabaseSource FromSqlServerTool")]
        public void Select_NewDatabaseSource_FromSqlServerTool()
        {
            #region Variable Declarations
            WpfButton newDbSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.NewDbSourceButton;
            WpfText microsoftSQLServer = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.ServerTypeComboBox.MicrosoftSQLServer;
            WpfEdit userNameTextBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DBSourceWizardTab.WorkSurfaceContext.UserNameTextBox;
            WpfEdit passwordTextBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DBSourceWizardTab.WorkSurfaceContext.PasswordTextBox;
            #endregion

            // Click 'New' button
            Mouse.Click(newDbSourceButton, new Point(16, 13));

            // Verify that the 'DisplayText' property of 'Microsoft SQL Server' label equals 'Microsoft SQL Server'
            Assert.AreEqual(this.Select_NewDatabaseSource_FromSqlServerToolParams.MicrosoftSQLServerDisplayText, microsoftSQLServer.DisplayText, "Microsoft SQL Server is not selected in DB source wizard.");

            // Verify that the 'Exists' property of 'UserNameTextBox' text box equals 'True'
            Assert.AreEqual(this.Select_NewDatabaseSource_FromSqlServerToolParams.UserNameTextBoxExists, userNameTextBox.Exists, "User name testbox does not exist on db source wizard.");

            // Verify that the 'Exists' property of 'PasswordTextBox' text box equals 'True'
            Assert.AreEqual(this.Select_NewDatabaseSource_FromSqlServerToolParams.PasswordTextBoxExists, passwordTextBox.Exists, "Password textbox does not exist on database source wizard.");
        }
        
        /// <summary>
        /// Select_NewDropboxSource_FromExplorerContextMenu
        /// </summary>
        [When(@"I Select NewDropboxSource FromExplorerContextMenu")]
        public void Select_NewDropboxSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newDropboxSource = this.MainStudioWindow.ExplorerContextMenu.NewDropboxSource;
            #endregion

            // Click 'New Dropbox Source' menu item
            Mouse.Click(newDropboxSource, new Point(119, 15));
        }
        
        /// <summary>
        /// Select_NewEmailSource_FromExplorerContextMenu - Use 'Select_NewEmailSource_FromExplorerContextMenuParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select NewEmailSource FromExplorerContextMenu")]
        public void Select_NewEmailSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfTreeItem localhost = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost;
            WpfMenu explorerEnvironmentContextMenu = this.MainStudioWindow.ExplorerEnvironmentContextMenu;
            WpfMenuItem newEmailSource = this.MainStudioWindow.ExplorerEnvironmentContextMenu.NewEmailSource;
            WpfEdit hostTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.EmailSourceTabPage.SendTestModelsCustom.HostTextBoxEdit;
            WpfEdit userNameTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.EmailSourceTabPage.SendTestModelsCustom.UserNameTextBoxEdit;
            WpfEdit passwordTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.EmailSourceTabPage.SendTestModelsCustom.PasswordTextBoxEdit;
            WpfEdit portTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.EmailSourceTabPage.SendTestModelsCustom.PortTextBoxEdit;
            WpfEdit timeoutTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.EmailSourceTabPage.SendTestModelsCustom.TimeoutTextBoxEdit;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(localhost, MouseButtons.Right, ModifierKeys.None, new Point(77, 13));

            // Verify that the 'Exists' property of 'ExplorerMenu' popup menu equals 'True'
            Assert.AreEqual(this.Select_NewEmailSource_FromExplorerContextMenuParams.ExplorerEnvironmentContextMenuExists, explorerEnvironmentContextMenu.Exists, "Explorer Context Menu did not appear after Right click on localhost");

            // Click 'New Email Source' menu item
            Mouse.Click(newEmailSource, new Point(101, 13));

            // Verify that the 'Exists' property of 'HostTextBox' text box equals 'True'
            Assert.AreEqual(this.Select_NewEmailSource_FromExplorerContextMenuParams.HostTextBoxEditExists, hostTextBoxEdit.Exists, "Host textbox does not exist after opening Email source tab");

            // Verify that the 'Exists' property of 'UserNameTextBox' text box equals 'True'
            Assert.AreEqual(this.Select_NewEmailSource_FromExplorerContextMenuParams.UserNameTextBoxEditExists, userNameTextBoxEdit.Exists, "Username textbox does not exist after opening Email source tab");

            // Verify that the 'Exists' property of 'PasswordTextBox' text box equals 'True'
            Assert.AreEqual(this.Select_NewEmailSource_FromExplorerContextMenuParams.PasswordTextBoxEditExists, passwordTextBoxEdit.Exists, "Password textbox does not exist after opening Email source tab");

            // Verify that the 'Exists' property of 'PortTextBox' text box equals 'True'
            Assert.AreEqual(this.Select_NewEmailSource_FromExplorerContextMenuParams.PortTextBoxEditExists, portTextBoxEdit.Exists, "Port textbox does not exist after opening Email source tab");

            // Verify that the 'Exists' property of 'TimeoutTextBox' text box equals 'True'
            Assert.AreEqual(this.Select_NewEmailSource_FromExplorerContextMenuParams.TimeoutTextBoxEditExists, timeoutTextBoxEdit.Exists, "Timeout textbox does not exist after opening Email source tab");
        }
        
        /// <summary>
        /// Select_NewFolder_FromExplorerContextMenu
        /// </summary>
        [When(@"I Select NewFolder FromExplorerContextMenu")]
        public void Select_NewFolder_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newFolder = this.MainStudioWindow.ExplorerContextMenu.NewFolder;
            #endregion

            // Click 'New Folder' menu item
            Mouse.Click(newFolder, new Point(87, 14));
        }
        
        /// <summary>
        /// Select_NewPluginSource_FromExplorerContextMenu
        /// </summary>
        [When(@"I Select NewPluginSource FromExplorerContextMenu")]
        public void Select_NewPluginSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newPluginSource = this.MainStudioWindow.ExplorerContextMenu.NewPluginSource;
            #endregion

            // Click 'New Plugin Source' menu item
            Mouse.Click(newPluginSource, new Point(78, 11));
        }
        
        /// <summary>
        /// Select_NewServerSource_FromExplorerContextMenu
        /// </summary>
        [When(@"I Select NewServerSource FromExplorerContextMenu")]
        public void Select_NewServerSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newServerSource = this.MainStudioWindow.ExplorerContextMenu.NewServerSource;
            #endregion

            // Click 'New Server Source' menu item
            Mouse.Click(newServerSource, new Point(44, 13));
        }
        
        /// <summary>
        /// Select_NewSharepointSource_FromExplorerContextMenu
        /// </summary>
        [When(@"I Select NewSharepointSource FromExplorerContextMenu")]
        public void Select_NewSharepointSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newSharepointSource = this.MainStudioWindow.ExplorerContextMenu.NewSharepointSource;
            #endregion

            // Click 'New Sharepoint Source' menu item
            Mouse.Click(newSharepointSource, new Point(126, 17));
        }
        
        /// <summary>
        /// Select_NewSharepointSource_FromServer_Lookup - Use 'Select_NewSharepointSource_FromServer_LookupParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select NewSharepointSource FromServer Lookup")]
        public void Select_NewSharepointSource_FromServer_Lookup()
        {
            #region Variable Declarations
            WpfComboBox server = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreateListItem.SmallView.Server;
            #endregion

            // Click 'UI__Database_AutoID' combo box
            Mouse.Click(server, new Point(107, 13));

            // Type '{Down}{Enter}' in 'UI__Database_AutoID' combo box
            Keyboard.SendKeys(server, this.Select_NewSharepointSource_FromServer_LookupParams.ServerSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Select_NewSharepointSource_FromServer_Lookup_On_SharepointCopyFile_Tool - Use 'Select_NewSharepointSource_FromServer_Lookup_On_SharepointCopyFile_ToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select NewSharepointSource FromServer Lookup On SharepointCopyFile Tool")]
        public void Select_NewSharepointSource_FromServer_Lookup_On_SharepointCopyFile_Tool()
        {
            #region Variable Declarations
            WpfComboBox server = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCopyFile.SmallView.Server;
            #endregion

            // Click 'UI__Database_AutoID' combo box
            Mouse.Click(server, new Point(107, 13));

            // Type '{Down}{Enter}' in 'UI__Database_AutoID' combo box
            Keyboard.SendKeys(server, this.Select_NewSharepointSource_FromServer_Lookup_On_SharepointCopyFile_ToolParams.ServerSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Select_NewSharepointSource_FromServer_Lookup_On_SharepointMoveFile_Tool - Use 'Select_NewSharepointSource_FromServer_Lookup_On_SharepointMoveFile_ToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select NewSharepointSource FromServer Lookup On SharepointMoveFile Tool")]
        public void Select_NewSharepointSource_FromServer_Lookup_On_SharepointMoveFile_Tool()
        {
            #region Variable Declarations
            WpfComboBox server = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointMoveFile.SmallView.Server;
            #endregion

            // Click 'UI__Database_AutoID' combo box
            Mouse.Click(server, new Point(107, 13));

            // Type '{Down}{Enter}' in 'UI__Database_AutoID' combo box
            Keyboard.SendKeys(server, this.Select_NewSharepointSource_FromServer_Lookup_On_SharepointMoveFile_ToolParams.ServerSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Select_NewSharepointSource_FromServer_Lookup_On_SharepointUpload_Tool - Use 'Select_NewSharepointSource_FromServer_Lookup_On_SharepointUpload_ToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select NewSharepointSource FromServer Lookup On SharepointUpload Tool")]
        public void Select_NewSharepointSource_FromServer_Lookup_On_SharepointUpload_Tool()
        {
            #region Variable Declarations
            WpfComboBox sourceCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUploadFile.SmallView.SourceCombobox;
            #endregion

            // Click 'UI__Database_AutoID' combo box
            Mouse.Click(sourceCombobox, new Point(107, 13));

            // Type '{Down}{Enter}' in 'UI__Database_AutoID' combo box
            Keyboard.SendKeys(sourceCombobox, this.Select_NewSharepointSource_FromServer_Lookup_On_SharepointUpload_ToolParams.SourceComboboxSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Select_NewWebSource_FromExplorerContextMenu
        /// </summary>
        [When(@"I Select NewWebSource FromExplorerContextMenu")]
        public void Select_NewWebSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newWebServiceSource = this.MainStudioWindow.ExplorerContextMenu.NewWebServiceSource;
            #endregion

            // Click 'New Web Service Source' menu item
            Mouse.Click(newWebServiceSource, new Point(82, 20));
        }
        
        /// <summary>
        /// Select_NewWorkflow_FromExplorerContextMenu
        /// </summary>
        [When(@"I Select NewWorkflow FromExplorerContextMenu")]
        public void Select_NewWorkflow_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newWorkflow = this.MainStudioWindow.ExplorerContextMenu.NewWorkflow;
            #endregion

            // Click 'New Workflow Service' menu item
            Mouse.Click(newWorkflow, new Point(30, 11));
        }
        
        /// <summary>
        /// Select_NewWorkFlowService_From_ContextMenu - Use 'Select_NewWorkFlowService_From_ContextMenuParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select NewWorkFlowService From ContextMenu")]
        public void Select_NewWorkFlowService_From_ContextMenu()
        {
            #region Variable Declarations
            WpfTreeItem localhost = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost;
            WpfMenuItem newWorkflow = this.MainStudioWindow.ExplorerEnvironmentContextMenu.NewWorkflow;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(localhost, MouseButtons.Right, ModifierKeys.None, new Point(75, 10));

            // Verify that the 'Enabled' property of 'New Workflow Service' menu item equals 'True'
            Assert.AreEqual(this.Select_NewWorkFlowService_From_ContextMenuParams.NewWorkflowEnabled, newWorkflow.Enabled, "NewWorkFlowService button is disabled.");

            // Click 'New Workflow Service' menu item
            Mouse.Click(newWorkflow, new Point(79, 13));
        }
        
        /// <summary>
        /// Select_Next_From_DotNet_DLL_Large_View_Action_Combobox - Use 'Select_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Select Next From DotNet DLL Large View Action Combobox")]
        public void Select_Next_From_DotNet_DLL_Large_View_Action_Combobox()
        {
            #region Variable Declarations
            WpfComboBox actionsComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ActionsComboBox;
            WpfListItem nextListItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ActionsComboBox.NextListItem;
            #endregion

            // Click 'ActionsComboBox' combo box
            Mouse.Click(actionsComboBox, new Point(216, 7));

            // Click 'Next' list item
            Mouse.Click(nextListItem, new Point(137, 7));

            // Verify that the 'SelectedItem' property of 'ActionsComboBox' combo box equals 'Next'
            Assert.AreEqual(this.Select_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues.ActionsComboBoxSelectedItem, actionsComboBox.SelectedItem, "System.Random is not selected in DotNet DLL tool large view namespace combobox.");
        }
        
        /// <summary>
        /// Select_Open_FromExplorerContextMenu
        /// </summary>
        [When(@"I Select Open FromExplorerContextMenu")]
        public void Select_Open_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem open = this.MainStudioWindow.ExplorerContextMenu.Open;
            #endregion

            // Click 'Open' menu item
            Mouse.Click(open, new Point(30, 11));
        }
        
        /// <summary>
        /// Select_OutputIn_Days
        /// </summary>
        [When(@"I Select OutputIn Days")]
        public void Select_OutputIn_Days()
        {
            #region Variable Declarations
            WpfComboBox outputInComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTimeDifference.SmallViewContentCustom.OutputInComboBox;
            WpfListItem days = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTimeDifference.SmallViewContentCustom.OutputInComboBox.Days;
            #endregion

            // Click 'UI__OutputIncbx_AutoID' combo box
            Mouse.Click(outputInComboBox, new Point(119, 7));

            // Click 'Days' list item
            Mouse.Click(days, new Point(114, 13));
        }
        
        /// <summary>
        /// Select_Paste_FromContextMenu
        /// </summary>
        [When(@"I Select Paste FromContextMenu")]
        public void Select_Paste_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem paste = this.MainStudioWindow.DesignSurfaceContextMenu.Paste;
            #endregion

            // Click 'Paste' menu item
            Mouse.Click(paste, new Point(52, 16));
        }
        
        /// <summary>
        /// Select_PerfomanceCounterTab
        /// </summary>
        [When(@"I Select PerfomanceCounterTab")]
        public void Select_PerfomanceCounterTab()
        {
            #region Variable Declarations
            WpfTabPage perfomanceCounterTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.PerfomanceCounterTab;
            #endregion

            // Click 'System.Windows.Controls.TabItem Header: Content:' tab
            Mouse.Click(perfomanceCounterTab, new Point(124, 14));
        }
        
        /// <summary>
        /// Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_Combobox - Use 'Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select RemoteConnectionIntegration From Deploy Tab Destination Server Combobox")]
        public void Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_Combobox()
        {
            #region Variable Declarations
            WpfButton toggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab.WorkSurfaceContext.DestinationServerConectControl.Combobox.ToggleButton;
            WpfCustom comboboxListItemAsNewRemoteServer = this.MainStudioWindow.ComboboxListItemAsNewRemoteServer;
            WpfCustom comboboxListItemAsRemoteConnectionIntegration = this.MainStudioWindow.ComboboxListItemAsRemoteConnectionIntegration;
            WpfText remoteConnectionIntegrationText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab.WorkSurfaceContext.DestinationServerConectControl.Combobox.RemoteConnectionIntegrationText;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleButton, new Point(230, 9));

            // Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
            Assert.AreEqual(this.Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams.ComboboxListItemAsNewRemoteServerExists, comboboxListItemAsNewRemoteServer.Exists, "New Remote Server... option does not exist in Destination server combobox.");

            // Verify that the 'Exists' property of 'Remote Connection Integration' custom control equals 'True'
            Assert.AreEqual(this.Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams.ComboboxListItemAsRemoteConnectionIntegrationExists, comboboxListItemAsRemoteConnectionIntegration.Exists, "Remote Connection Integration option does not exist in Destination server combobo" +
                    "x.");

            // Click 'Remote Connection Integration' custom control
            Mouse.Click(comboboxListItemAsRemoteConnectionIntegration, new Point(226, 13));

            // Verify that the 'DisplayText' property of 'Remote Connection Integration' label equals 'Remote Connection Integration'
            Assert.AreEqual(this.Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams.RemoteConnectionIntegrationTextDisplayText, remoteConnectionIntegrationText.DisplayText, "Selected destination server in deploy is not Remote Connection Integration.");
        }
        
        /// <summary>
        /// Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_Combobox - Use 'Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select RemoteConnectionIntegration From Deploy Tab Source Server Combobox")]
        public void Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_Combobox()
        {
            #region Variable Declarations
            WpfButton toggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab.WorkSurfaceContext.SourceServerConectControl.Combobox.ToggleButton;
            WpfCustom comboboxListItemAsNewRemoteServer = this.MainStudioWindow.ComboboxListItemAsNewRemoteServer;
            WpfCustom comboboxListItemAsRemoteConnectionIntegration = this.MainStudioWindow.ComboboxListItemAsRemoteConnectionIntegration;
            WpfText remoteConnectionIntegrationText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab.WorkSurfaceContext.SourceServerConectControl.Combobox.RemoteConnectionIntegrationText;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleButton, new Point(230, 9));

            // Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
            Assert.AreEqual(this.Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams.ComboboxListItemAsNewRemoteServerExists, comboboxListItemAsNewRemoteServer.Exists, "New Remote Server... option does not exist in Destination server combobox.");

            // Verify that the 'Exists' property of 'Remote Connection Integration' custom control equals 'True'
            Assert.AreEqual(this.Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams.ComboboxListItemAsRemoteConnectionIntegrationExists, comboboxListItemAsRemoteConnectionIntegration.Exists, "Remote Connection Integration option does not exist in Destination server combobo" +
                    "x.");

            // Click 'Remote Connection Integration' custom control
            Mouse.Click(comboboxListItemAsRemoteConnectionIntegration, new Point(226, 13));

            // Verify that the 'DisplayText' property of 'Remote Connection Integration' label equals 'Remote Connection Integration'
            Assert.AreEqual(this.Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams.RemoteConnectionIntegrationTextDisplayText, remoteConnectionIntegrationText.DisplayText, "Selected source server in deploy is not Remote Connection Integration.");
        }
        
        /// <summary>
        /// Select_RemoteConnectionIntegration_From_Explorer
        /// </summary>
        [When(@"I Select RemoteConnectionIntegration From Explorer")]
        public void Select_RemoteConnectionIntegration_From_Explorer()
        {
            #region Variable Declarations
            WpfButton serverListComboBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ConnectControl.ServerComboBox.ServerListComboBox;
            WpfCustom comboboxListItemAsRemoteConnectionIntegration = this.MainStudioWindow.ComboboxListItemAsRemoteConnectionIntegration;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(serverListComboBox, new Point(174, 8));

            // Click 'Remote Connection Integration' custom control
            Mouse.Click(comboboxListItemAsRemoteConnectionIntegration, new Point(226, 13));
        }
        
        /// <summary>
        /// Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_Combobox - Use 'Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select RemoteConnectionIntegrationConnected From Deploy Tab Source Server Combobox")]
        public void Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_Combobox()
        {
            #region Variable Declarations
            WpfButton toggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab.WorkSurfaceContext.SourceServerConectControl.Combobox.ToggleButton;
            WpfCustom comboboxListItemAsNewRemoteServer = this.MainStudioWindow.ComboboxListItemAsNewRemoteServer;
            WpfCustom comboboxListItemAsRemoteConnectionIntegrationConnected = this.MainStudioWindow.ComboboxListItemAsRemoteConnectionIntegrationConnected;
            WpfText remoteConnectionIntegrationText = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DeployTab.WorkSurfaceContext.SourceServerConectControl.Combobox.RemoteConnectionIntegrationText;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleButton, new Point(230, 9));

            // Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
            Assert.AreEqual(this.Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams.ComboboxListItemAsNewRemoteServerExists, comboboxListItemAsNewRemoteServer.Exists, "New Remote Server... option does not exist in Destination server combobox.");

            // Verify that the 'Exists' property of 'Remote Connection Integration (Connected)' custom control equals 'True'
            Assert.AreEqual(this.Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams.ComboboxListItemAsRemoteConnectionIntegrationConnectedExists, comboboxListItemAsRemoteConnectionIntegrationConnected.Exists, "Remote Connection Integration option does not exist in Destination server combobo" +
                    "x.");

            // Click 'Remote Connection Integration (Connected)' custom control
            Mouse.Click(comboboxListItemAsRemoteConnectionIntegrationConnected, new Point(226, 13));

            // Verify that the 'DisplayText' property of 'Remote Connection Integration' label equals 'Remote Connection Integration'
            Assert.AreEqual(this.Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams.RemoteConnectionIntegrationTextDisplayText, remoteConnectionIntegrationText.DisplayText, "Selected source server in deploy is not Remote Connection Integration.");
        }
        
        /// <summary>
        /// Select_Round_Up
        /// </summary>
        [When(@"I Select Round Up")]
        public void Select_Round_Up()
        {
            #region Variable Declarations
            WpfComboBox roundingComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber.LargeViewContentCustom.RoundingComboBox;
            WpfListItem roungUP = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber.LargeViewContentCustom.RoundingComboBox.RoungUP;
            #endregion

            // Click 'RoundingComboBox' combo box
            Mouse.Click(roundingComboBox, new Point(119, 7));

            // Click 'Up' list item
            Mouse.Click(roungUP, new Point(114, 13));
        }
        
        /// <summary>
        /// Select_RoundingType_None
        /// </summary>
        [When(@"I Select RoundingType None")]
        public void Select_RoundingType_None()
        {
            #region Variable Declarations
            WpfComboBox roundingComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber.LargeViewContentCustom.RoundingComboBox;
            WpfListItem none = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber.LargeViewContentCustom.RoundingComboBox.None;
            #endregion

            // Click 'RoundingComboBox' combo box
            Mouse.Click(roundingComboBox, new Point(119, 7));

            // Click 'None' list item
            Mouse.Click(none, new Point(114, 13));
        }
        
        /// <summary>
        /// Select_RoundingType_Normal
        /// </summary>
        [When(@"I Select RoundingType Normal")]
        public void Select_RoundingType_Normal()
        {
            #region Variable Declarations
            WpfComboBox roundingComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber.LargeViewContentCustom.RoundingComboBox;
            WpfListItem normal = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber.LargeViewContentCustom.RoundingComboBox.Normal;
            #endregion

            // Click 'RoundingComboBox' combo box
            Mouse.Click(roundingComboBox, new Point(119, 7));

            // Click 'Normal' list item
            Mouse.Click(normal, new Point(114, 13));
        }
        
        /// <summary>
        /// Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_Dropdownlist - Use 'Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Select RSAKLFSVRGENDEV From Server Source Wizard Dropdownlist")]
        public void Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_Dropdownlist()
        {
            #region Variable Declarations
            WpfListItem rSAKLFSVRGENDEV = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.ServerComboBox.RSAKLFSVRGENDEV;
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.ServerComboBox.Textbox;
            #endregion

            // Click 'RSAKLFSVRGENDEV' list item
            Mouse.Click(rSAKLFSVRGENDEV, new Point(97, 17));

            // Verify that the 'Text' property of 'Text' text box equals 'RSAKLFSVRGENDEV'
            Assert.AreEqual(this.Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues.TextboxText, textbox.Text, "RSAKLFSVRGENDEV is not selected as the server in the DB source wizard.");
        }
        
        /// <summary>
        /// Select_SaveAsImage_FromContextMenu
        /// </summary>
        [When(@"I Select SaveAsImage FromContextMenu")]
        public void Select_SaveAsImage_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem saveasImage = this.MainStudioWindow.DesignSurfaceContextMenu.SaveasImage;
            #endregion

            // Click 'Save as Image' menu item
            Mouse.Click(saveasImage, new Point(38, 15));
        }
        
        /// <summary>
        /// Select_SecurityTab
        /// </summary>
        [When(@"I Select SecurityTab")]
        public void Select_SecurityTab()
        {
            #region Variable Declarations
            WpfTabPage securityTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SettingsTab.WorksurfaceContext.SettingsView.TabList.SecurityTab;
            #endregion

            // Click 'System.Windows.Controls.TabItem Header: Content:' tab
            Mouse.Click(securityTab, new Point(102, 10));
        }
        
        /// <summary>
        /// Select_SetAsStartNode_FromContextMenu
        /// </summary>
        [When(@"I Select SetAsStartNode FromContextMenu")]
        public void Select_SetAsStartNode_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem setasStartNode = this.MainStudioWindow.DesignSurfaceContextMenu.SetasStartNode;
            #endregion

            // Click 'Set as Start Node' menu item
            Mouse.Click(setasStartNode, new Point(67, 16));
        }
        
        /// <summary>
        /// Select_SharepointTestServer
        /// </summary>
        [When(@"I Select SharepointTestServer")]
        public void Select_SharepointTestServer()
        {
            #region Variable Declarations
            WpfComboBox server = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreateListItem.SmallView.Server;
            WpfListItem sharepointTestServer = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreateListItem.SmallView.Server.SharepointTestServer;
            #endregion

            // Click 'UI__Database_AutoID' combo box
            Mouse.Click(server, new Point(98, 12));

            // Click '{"Server":"http://rsaklfsvrsharep/","Authenticatio...' list item
            Mouse.Click(sharepointTestServer, new Point(67, 13));
        }
        
        /// <summary>
        /// Select_SharepointTestServer_From_SharepointRead_Tool - Use 'Select_SharepointTestServer_From_SharepointRead_ToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select SharepointTestServer From SharepointRead Tool")]
        public void Select_SharepointTestServer_From_SharepointRead_Tool()
        {
            #region Variable Declarations
            WpfComboBox server = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead.SmallView.Server;
            WpfListItem sharepointTestServer = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead.SmallView.Server.SharepointTestServer;
            WpfButton editSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead.SmallView.EditSourceButton;
            #endregion

            // Click 'UI__Database_AutoID' combo box
            Mouse.Click(server, new Point(98, 12));

            // Click '{"Server":"http://rsaklfsvrsharep/","Authenticatio...' list item
            Mouse.Click(sharepointTestServer, new Point(67, 13));

            // Verify that the 'Enabled' property of '...' button equals 'True'
            Assert.AreEqual(this.Select_SharepointTestServer_From_SharepointRead_ToolParams.EditSourceButtonEnabled, editSourceButton.Enabled, "edit sharepoint source is disabled after selecting a source");
        }
        
        /// <summary>
        /// Select_SharepointTestServer_From_SharepointUpdate_Tool - Use 'Select_SharepointTestServer_From_SharepointUpdate_ToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select SharepointTestServer From SharepointUpdate Tool")]
        public void Select_SharepointTestServer_From_SharepointUpdate_Tool()
        {
            #region Variable Declarations
            WpfComboBox server = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUpdate.SmallView.Server;
            WpfListItem sharepointTestServer = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUpdate.SmallView.Server.SharepointTestServer;
            WpfButton editSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUpdate.SmallView.EditSourceButton;
            #endregion

            // Click 'UI__Database_AutoID' combo box
            Mouse.Click(server, new Point(98, 12));

            // Click '{"Server":"http://rsaklfsvrsharep/","Authenticatio...' list item
            Mouse.Click(sharepointTestServer, new Point(67, 13));

            // Verify that the 'Enabled' property of '...' button equals 'True'
            Assert.AreEqual(this.Select_SharepointTestServer_From_SharepointUpdate_ToolParams.EditSourceButtonEnabled, editSourceButton.Enabled, "edit sharepoint source is disabled after selecting a source");
        }
        
        /// <summary>
        /// Select_ShowLargeView_FromContextMenu
        /// </summary>
        [When(@"I Select ShowLargeView FromContextMenu")]
        public void Select_ShowLargeView_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem showLargeView = this.MainStudioWindow.DesignSurfaceContextMenu.ShowLargeView;
            #endregion

            // Click 'Show Large View' menu item
            Mouse.Click(showLargeView, new Point(43, 15));
        }
        
        /// <summary>
        /// Select_Source_From_DotnetTool - Use 'Select_Source_From_DotnetToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select Source From DotnetTool")]
        public void Select_Source_From_DotnetTool()
        {
            #region Variable Declarations
            WpfComboBox sourcesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.SourcesComboBox;
            WpfListItem dotNetSource = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.SourcesComboBox.DotNetSource;
            WpfComboBox classNameComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ClassNameComboBox;
            WpfListItem assemblyLocationGACCListItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ClassNameComboBox.AssemblyLocationGACCListItem;
            WpfComboBox actionsComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ActionsComboBox;
            WpfListItem equalsAction = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ActionsComboBox.EqualsAction;
            WpfButton generateOutputsButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.GenerateOutputsButton;
            WpfRow row1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.LargeDataGridTable.Row1;
            WpfButton saveButton = this.MainStudioWindow.SideMenuBar.SaveButton;
            #endregion

            // Click 'SourcesComboBox' combo box
            Mouse.Click(sourcesComboBox, new Point(119, 7));

            // Click 'Dev2.Common.Interfaces.Core.PluginSourceDefinition' list item
            Mouse.Click(dotNetSource, new Point(114, 13));

            // Verify that the 'Enabled' property of 'NamespaceComboBox' combo box equals 'True'
            Assert.AreEqual(this.Select_Source_From_DotnetToolParams.ClassNameComboBoxEnabled, classNameComboBox.Enabled, "ClassNameComboBox is not Enabled after selecting a source");

            // Click 'NamespaceComboBox' combo box
            Mouse.Click(classNameComboBox, new Point(119, 7));

            // Click '{"AssemblyLocation":"GAC:CustomMarshalers, Version...' list item
            Mouse.Click(assemblyLocationGACCListItem, new Point(114, 13));

            // Verify that the 'Enabled' property of 'ActionsComboBox' combo box equals 'True'
            Assert.AreEqual(this.Select_Source_From_DotnetToolParams.ActionsComboBoxEnabled, actionsComboBox.Enabled, "ActionsComboBox is not Enabled after selecting ClassName");

            // Click 'ActionsComboBox' combo box
            Mouse.Click(actionsComboBox, new Point(119, 7));

            // Click 'Dev2.Common.Interfaces.PluginAction' list item
            Mouse.Click(equalsAction, new Point(114, 13));

            // Verify that the 'Enabled' property of 'Generate Outputs' button equals 'True'
            Assert.AreEqual(this.Select_Source_From_DotnetToolParams.GenerateOutputsButtonEnabled, generateOutputsButton.Enabled, "GenerateOutputsButton is not Enabled after selecting an Action");

            // Verify that the 'Enabled' property of row equals 'True'
            Assert.AreEqual(this.Select_Source_From_DotnetToolParams.Row1Enabled, row1.Enabled, "InputsDataGridTable is not Enabled after selecting an Action");

            // Click 'Save this tab' button
            Mouse.Click(saveButton, new Point(10, 5));
        }
        
        /// <summary>
        /// Select_Source_From_PostgreTool - Use 'Select_Source_From_PostgreToolParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select Source From PostgreTool")]
        public void Select_Source_From_PostgreTool()
        {
            #region Variable Declarations
            WpfComboBox sourcesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PostgreSqlActivitCustom.LargeViewContentCustom.SourcesComboBox;
            WpfComboBox actionsComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PostgreSqlActivitCustom.LargeViewContentCustom.ActionsComboBox;
            #endregion

            // Click 'SourcesComboBox' combo box
            Mouse.Click(sourcesComboBox, new Point(119, 7));

            // Click 'SourcesComboBox' combo box
            Mouse.Click(sourcesComboBox, new Point(114, 13));

            // Verify that the 'Enabled' property of 'ActionsComboBox' combo box equals 'True'
            Assert.AreEqual(this.Select_Source_From_PostgreToolParams.ActionsComboBoxEnabled, actionsComboBox.Enabled, "Action combobox is not enabled after selecting an Action.");
        }
        
        /// <summary>
        /// Select_SystemObject_From_DotNet_DLL_Large_View_Namespace_Combobox - Use 'Select_SystemObject_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Select SystemObject From DotNet DLL Large View Namespace Combobox")]
        public void Select_SystemObject_From_DotNet_DLL_Large_View_Namespace_Combobox()
        {
            #region Variable Declarations
            WpfComboBox classNameComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ClassNameComboBox;
            WpfListItem comboboxlistItemAsSystemObject = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ClassNameComboBox.ComboboxlistItemAsSystemObject;
            #endregion

            // Click 'NamespaceComboBox' combo box
            Mouse.Click(classNameComboBox, new Point(216, 7));

            // Verify that the 'Exists' property of 'ComboboxlistItemAsSystemObject' list item equals 'True'
            Assert.AreEqual(this.Select_SystemObject_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues.ComboboxlistItemAsSystemObjectExists, comboboxlistItemAsSystemObject.Exists, "System.Random item does not exist in the DotNet DLL tool ClassName dropdown");

            // Click 'ComboboxlistItemAsSystemObject' list item
            Mouse.Click(comboboxlistItemAsSystemObject, new Point(137, 7));

            // Verify that the 'SelectedItem' property of 'NamespaceComboBox' combo box equals '{"AssemblyLocation":"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorlib.dll","AssemblyName":"mscorlib.dll","FullName":"System.Object","MethodName":null}'
            Assert.AreEqual(this.Select_SystemObject_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues.ClassNameComboBoxSelectedItem, classNameComboBox.SelectedItem, "System.Object is not selected in DotNet DLL tool large view namespace combobox.");
        }
        
        /// <summary>
        /// Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_Combobox - Use 'Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Select SystemRandom From DotNet DLL Large View Namespace Combobox")]
        public void Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_Combobox()
        {
            #region Variable Declarations
            WpfComboBox classNameComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ClassNameComboBox;
            WpfListItem systemRandomListItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ClassNameComboBox.SystemRandomListItem;
            #endregion

            // Click 'NamespaceComboBox' combo box
            Mouse.Click(classNameComboBox, new Point(216, 7));

            // Click 'SystemRandom' list item
            Mouse.Click(systemRandomListItem, new Point(137, 7));

            // Verify that the 'SelectedItem' property of 'NamespaceComboBox' combo box equals '{"AssemblyLocation":"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorlib.dll","AssemblyName":"mscorlib.dll","FullName":"System.Random","MethodName":null}'
            Assert.AreEqual(this.Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues.ClassNameComboBoxSelectedItem, classNameComboBox.SelectedItem, "System.Random is not selected in DotNet DLL tool large view namespace combobox.");
        }
        
        /// <summary>
        /// Select_Tests_From_Context_Menu - Use 'Select_Tests_From_Context_MenuParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select Tests From Context Menu")]
        public void Select_Tests_From_Context_Menu()
        {
            #region Variable Declarations
            WpfMenuItem tests = this.MainStudioWindow.ExplorerContextMenu.Tests;
            WpfTabPage testsTabPage = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.TestsTabPage;
            #endregion

            // Click 'Tests' menu item
            Mouse.Click(tests, new Point(46, 16));

            // Verify that the 'Exists' property of 'Dev2.ViewModels.StudioTestViewModel' tab equals 'True'
            Assert.AreEqual(this.Select_Tests_From_Context_MenuParams.TestsTabPageExists, testsTabPage.Exists, "TestsTabPage does not exist after clicking view tests in the explorer context men" +
                    "u.");
        }
        
        /// <summary>
        /// Select_ToString_From_DotNet_DLL_Large_View_Action_Combobox - Use 'Select_ToString_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Select ToString From DotNet DLL Large View Action Combobox")]
        public void Select_ToString_From_DotNet_DLL_Large_View_Action_Combobox()
        {
            #region Variable Declarations
            WpfComboBox actionsComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ActionsComboBox;
            WpfListItem item1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll.LargeView.ActionsComboBox.Item1;
            #endregion

            // Click 'ActionsComboBox' combo box
            Mouse.Click(actionsComboBox, new Point(216, 7));

            // Click 'Item1' list item
            Mouse.Click(item1, new Point(137, 7));

            // Verify that the 'SelectedItem' property of 'ActionsComboBox' combo box equals 'ToString'
            Assert.AreEqual(this.Select_ToString_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues.ActionsComboBoxSelectedItem, actionsComboBox.SelectedItem, "System.Random is not selected in DotNet DLL tool large view namespace combobox.");
        }
        
        /// <summary>
        /// Select_TSTCIREMOTE_From_Server_Source_Wizard_Dropdownlist - Use 'Select_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select TSTCIREMOTE From Server Source Wizard Dropdownlist")]
        public void Select_TSTCIREMOTE_From_Server_Source_Wizard_Dropdownlist()
        {
            #region Variable Declarations
            WpfListItem tSTCIREMOTE = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.AddressComboBox.TSTCIREMOTE;
            WpfEdit addressEditBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.AddressComboBox.AddressEditBox;
            WpfButton testConnectionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.TestConnectionButton;
            #endregion

            // Click 'TST-CI-REMOTE' list item
            Mouse.Click(tSTCIREMOTE, new Point(70, 19));

            // Verify that the 'Text' property of 'Text' text box equals 'TST-CI-REMOTE'
            Assert.AreEqual(this.Select_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams.AddressEditBoxText, addressEditBox.Text, "Server source address textbox text does not equal TST-CI-REMOTE");

            // Verify that the 'Exists' property of 'Test Connection' button equals 'True'
            Assert.AreEqual(this.Select_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams.TestConnectionButtonExists, testConnectionButton.Exists, "Server source wizard does not contain a test connection button");
        }
        
        /// <summary>
        /// Select_UITestingDBSource_From_SQL_Server_Large_View_Source_Combobox - Use 'Select_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select UITestingDBSource From SQL Server Large View Source Combobox")]
        public void Select_UITestingDBSource_From_SQL_Server_Large_View_Source_Combobox()
        {
            #region Variable Declarations
            WpfComboBox sourcesCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.SourcesCombobox;
            WpfListItem uITestingDBSourceListItem = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.SourcesCombobox.UITestingDBSourceListItem;
            #endregion

            // Click 'SourcesComboBox' combo box
            Mouse.Click(sourcesCombobox, new Point(216, 7));

            // Click 'UITestingDBSource' list item
            Mouse.Click(uITestingDBSourceListItem, new Point(137, 7));

            // Verify that the 'SelectedItem' property of 'SourcesComboBox' combo box equals 'UITestingDBSource'
            Assert.AreEqual(this.Select_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams.SourcesComboboxSelectedItem, sourcesCombobox.SelectedItem, "SQL Server large view source combobox selected item is not equal to UITestingDBSo" +
                    "urce.");
        }
        
        /// <summary>
        /// Select_UITestingSource_From_Web_Server_Large_View_Source_Combobox - Use 'Select_UITestingSource_From_Web_Server_Large_View_Source_ComboboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select UITestingSource From Web Server Large View Source Combobox")]
        public void Select_UITestingSource_From_Web_Server_Large_View_Source_Combobox()
        {
            #region Variable Declarations
            WpfComboBox sourcesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebDelete.LargeView.SourcesComboBox;
            WpfListItem uITesting = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebDelete.LargeView.SourcesComboBox.UITesting;
            WpfButton editSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebDelete.LargeView.EditSourceButton;
            WpfButton generateOutputsButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebDelete.LargeView.GenerateOutputsButton;
            #endregion

            // Click 'SourcesComboBox' combo box
            Mouse.Click(sourcesComboBox, new Point(216, 7));

            // Click list item numbered 8 in 'SourcesComboBox' combo box
            Mouse.Click(uITesting, new Point(137, 7));

            // Verify that the 'Enabled' property of '...' button equals 'True'
            Assert.AreEqual(this.Select_UITestingSource_From_Web_Server_Large_View_Source_ComboboxParams.EditSourceButtonEnabled, editSourceButton.Enabled, "Delete Web large view source combobox EDIT button is disabled.");

            // Verify that the 'Enabled' property of 'Generate Outputs' button equals 'True'
            Assert.AreEqual(this.Select_UITestingSource_From_Web_Server_Large_View_Source_ComboboxParams.GenerateOutputsButtonEnabled, generateOutputsButton.Enabled, "Delete Web large view source combobox GenerateOutput button is disabled.");
        }
        
        /// <summary>
        /// Select_User_From_RunTestAs - Use 'Select_User_From_RunTestAsParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Select User From RunTestAs")]
        public void Select_User_From_RunTestAs()
        {
            #region Variable Declarations
            WpfRadioButton userRadioButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.TestsTabPage.WorkSurfaceContext.ServiceTestView.UserRadioButton;
            WpfEdit usernameTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.TestsTabPage.WorkSurfaceContext.ServiceTestView.UsernameTextBoxEdit;
            WpfEdit passwordTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.TestsTabPage.WorkSurfaceContext.ServiceTestView.PasswordTextBoxEdit;
            WpfButton saveButton = this.MainStudioWindow.SideMenuBar.SaveButton;
            #endregion

            // Select 'User' radio button
            userRadioButton.Selected = this.Select_User_From_RunTestAsParams.UserRadioButtonSelected;

            // Verify that the 'Exists' property of 'UsernameTextBox' text box equals 'True'
            Assert.AreEqual(this.Select_User_From_RunTestAsParams.UsernameTextBoxEditExists, usernameTextBoxEdit.Exists, "Username textbox does not exist after clicking RunAsUser radio button");

            // Verify that the 'Exists' property of 'PasswordTextBox' text box equals 'True'
            Assert.AreEqual(this.Select_User_From_RunTestAsParams.PasswordTextBoxEditExists, passwordTextBoxEdit.Exists, "Password textbox does not exist after clicking RunAsUser radio button");

            // Verify that the 'Enabled' property of 'Save this tab' button equals 'True'
            Assert.AreEqual(this.Select_User_From_RunTestAsParams.SaveButtonEnabled, saveButton.Enabled, "Save Ribbon Menu buton is disabled after changing test");
        }
        
        /// <summary>
        /// Select_Zip_Compression
        /// </summary>
        [When(@"I Select Zip Compression")]
        public void Select_Zip_Compression()
        {
            #region Variable Declarations
            WpfComboBox selectedCompressComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip.LargeViewContentCustom.SelectedCompressComboBox;
            WpfListItem normalDefault = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip.LargeViewContentCustom.SelectedCompressComboBox.NormalDefault;
            #endregion

            // Click 'UI__SelectedCompressionType_AutoID' combo box
            Mouse.Click(selectedCompressComboBox, new Point(119, 7));

            // Click 'Normal (Default)' list item
            Mouse.Click(normalDefault, new Point(114, 13));
        }
        
        /// <summary>
        /// Show_Explorer_First_Item_Tests_With_Context_Menu - Use 'Show_Explorer_First_Item_Tests_With_Context_MenuParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Show Explorer First Item Tests With Context Menu")]
        public void Show_Explorer_First_Item_Tests_With_Context_Menu()
        {
            #region Variable Declarations
            WpfTreeItem firstItem = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.localhost.FirstItem;
            WpfMenuItem tests = this.MainStudioWindow.ExplorerContextMenu.Tests;
            WpfButton createTestButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.TestsTabPage.WorkSurfaceContext.ServiceTestView.TestsListboxList.CreateTest.CreateTestButton;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(firstItem, MouseButtons.Right, ModifierKeys.None, new Point(107, 9));

            // Verify that the 'Exists' property of 'Tests' menu item equals 'True'
            Assert.AreEqual(this.Show_Explorer_First_Item_Tests_With_Context_MenuParams.TestsExists, tests.Exists, "View tests does not exist in explorer context menu.");

            // Click 'Tests' menu item
            Mouse.Click(tests, new Point(30, 11));

            // Verify that the 'Exists' property of 'Create a new test' button equals 'True'
            Assert.AreEqual(this.Show_Explorer_First_Item_Tests_With_Context_MenuParams.CreateTestButtonExists, createTestButton.Exists, "Create new test button does not exist on tests tab after openning it with the exp" +
                    "lorer context menu.");
        }
        
        /// <summary>
        /// Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_Textbox - Use 'Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Type 0 Into SQL Server Large View Inputs Row1 Data Textbox")]
        public void Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_Textbox()
        {
            #region Variable Declarations
            WpfEdit dataTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.InputsTable.Row1.DataCell.DataCombobox.DataTextbox;
            #endregion

            // Type '0' in 'Text' text box
            dataTextbox.Text = this.Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues.DataTextboxText;

            // Verify that the 'Text' property of 'Text' text box equals '0'
            Assert.AreEqual(this.Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues.DataTextboxText1, dataTextbox.Text, "SQL Server large view inputs row 1 data textbox text is not equal to S");
        }
        
        /// <summary>
        /// Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_Textbox - Use 'Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues' to pass parameters into this method.
        /// </summary>
        [When(@"I Type 0 Into SQL Server Large View Test Inputs Row1 Test Data Textbox")]
        public void Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_Textbox()
        {
            #region Variable Declarations
            WpfEdit testDataTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase.LargeView.TestInputsTable.Row1.TestDataCell.TestDataComboBox.TestDataTextbox;
            #endregion

            // Type '0' in 'Text' text box
            testDataTextbox.Text = this.Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues.TestDataTextboxText;

            // Verify that the 'Text' property of 'Text' text box equals '0'
            Assert.AreEqual(this.Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues.TestDataTextboxText1, testDataTextbox.Text, "SQL Server large view test inputs row 1 test data textbox text is not equal to S");
        }
        
        /// <summary>
        /// Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_Textbox - Use 'Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Type rsaklfsvrgen into DB Source Wizard Server Textbox")]
        public void Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_Textbox()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.ServerComboBox.Textbox;
            WpfListItem rSAKLFSVRGENDEV = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.DBSourceWizardTab.WorkSurfaceContext.ManageDatabaseSourceControl.ServerComboBox.RSAKLFSVRGENDEV;
            #endregion

            // Type 'rsaklfsvrgen' in 'Text' text box
            textbox.Text = this.Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams.TextboxText;

            // Verify that the 'Exists' property of 'RSAKLFSVRGENDEV' list item equals 'True'
            Assert.AreEqual(this.Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams.RSAKLFSVRGENDEVExists, rSAKLFSVRGENDEV.Exists, "RSAKLFSVRGENDEV does not exist as an option in DB source wizard server combobox.");
        }
        
        /// <summary>
        /// Type_TestSite_into_Web_Source_Wizard_Address_Textbox - Use 'Type_TestSite_into_Web_Source_Wizard_Address_TextboxParams' to pass parameters into this method.
        /// </summary>
        [When(@"I Type TestSite into Web Source Wizard Address Textbox")]
        public void Type_TestSite_into_Web_Source_Wizard_Address_Textbox()
        {
            #region Variable Declarations
            WpfEdit addressTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WebSourceWizardTab.WorkSurfaceContext.AddressTextbox;
            WpfButton testConnectionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WebSourceWizardTab.WorkSurfaceContext.TestConnectionButton;
            #endregion

            // Type 'http://rsaklfsvrtfsbld/IntegrationTestSite/Proxy.ashx' in 'ServerTextBox' text box
            addressTextbox.Text = this.Type_TestSite_into_Web_Source_Wizard_Address_TextboxParams.AddressTextboxText;

            // Verify that the 'Enabled' property of 'Test Connection' button equals 'True'
            Assert.AreEqual(this.Type_TestSite_into_Web_Source_Wizard_Address_TextboxParams.TestConnectionButtonEnabled, testConnectionButton.Enabled, "New web source wizard test connection button is not enabled after entering a vali" +
                    "d web address.");
        }
        
        #region Properties
        public virtual Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_1Params Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_1Params
        {
            get
            {
                if ((this.mAssign_Value_To_Variable_With_Assign_Tool_Small_View_Row_1Params == null))
                {
                    this.mAssign_Value_To_Variable_With_Assign_Tool_Small_View_Row_1Params = new Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_1Params();
                }
                return this.mAssign_Value_To_Variable_With_Assign_Tool_Small_View_Row_1Params;
            }
        }
        
        public virtual Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_2Params Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_2Params
        {
            get
            {
                if ((this.mAssign_Value_To_Variable_With_Assign_Tool_Small_View_Row_2Params == null))
                {
                    this.mAssign_Value_To_Variable_With_Assign_Tool_Small_View_Row_2Params = new Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_2Params();
                }
                return this.mAssign_Value_To_Variable_With_Assign_Tool_Small_View_Row_2Params;
            }
        }
        
        public virtual Check_Public_AdministratorParams Check_Public_AdministratorParams
        {
            get
            {
                if ((this.mCheck_Public_AdministratorParams == null))
                {
                    this.mCheck_Public_AdministratorParams = new Check_Public_AdministratorParams();
                }
                return this.mCheck_Public_AdministratorParams;
            }
        }
        
        public virtual Click_AddNew_Web_Source_From_PostWeb_toolParams Click_AddNew_Web_Source_From_PostWeb_toolParams
        {
            get
            {
                if ((this.mClick_AddNew_Web_Source_From_PostWeb_toolParams == null))
                {
                    this.mClick_AddNew_Web_Source_From_PostWeb_toolParams = new Click_AddNew_Web_Source_From_PostWeb_toolParams();
                }
                return this.mClick_AddNew_Web_Source_From_PostWeb_toolParams;
            }
        }
        
        public virtual Click_AddNew_Web_Source_From_toolParams Click_AddNew_Web_Source_From_toolParams
        {
            get
            {
                if ((this.mClick_AddNew_Web_Source_From_toolParams == null))
                {
                    this.mClick_AddNew_Web_Source_From_toolParams = new Click_AddNew_Web_Source_From_toolParams();
                }
                return this.mClick_AddNew_Web_Source_From_toolParams;
            }
        }
        
        public virtual Click_Assign_Tool_CollapseAllParams Click_Assign_Tool_CollapseAllParams
        {
            get
            {
                if ((this.mClick_Assign_Tool_CollapseAllParams == null))
                {
                    this.mClick_Assign_Tool_CollapseAllParams = new Click_Assign_Tool_CollapseAllParams();
                }
                return this.mClick_Assign_Tool_CollapseAllParams;
            }
        }
        
        public virtual Click_Assign_Tool_ExpandAllParams Click_Assign_Tool_ExpandAllParams
        {
            get
            {
                if ((this.mClick_Assign_Tool_ExpandAllParams == null))
                {
                    this.mClick_Assign_Tool_ExpandAllParams = new Click_Assign_Tool_ExpandAllParams();
                }
                return this.mClick_Assign_Tool_ExpandAllParams;
            }
        }
        
        public virtual Click_Assign_Tool_Large_View_Done_ButtonParams Click_Assign_Tool_Large_View_Done_ButtonParams
        {
            get
            {
                if ((this.mClick_Assign_Tool_Large_View_Done_ButtonParams == null))
                {
                    this.mClick_Assign_Tool_Large_View_Done_ButtonParams = new Click_Assign_Tool_Large_View_Done_ButtonParams();
                }
                return this.mClick_Assign_Tool_Large_View_Done_ButtonParams;
            }
        }
        
        public virtual Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams
        {
            get
            {
                if ((this.mClick_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams == null))
                {
                    this.mClick_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams = new Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams();
                }
                return this.mClick_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams;
            }
        }
        
        public virtual Click_Base_Convert_Large_View_Done_ButtonParams Click_Base_Convert_Large_View_Done_ButtonParams
        {
            get
            {
                if ((this.mClick_Base_Convert_Large_View_Done_ButtonParams == null))
                {
                    this.mClick_Base_Convert_Large_View_Done_ButtonParams = new Click_Base_Convert_Large_View_Done_ButtonParams();
                }
                return this.mClick_Base_Convert_Large_View_Done_ButtonParams;
            }
        }
        
        public virtual Click_Calculate_Large_View_Done_ButtonParams Click_Calculate_Large_View_Done_ButtonParams
        {
            get
            {
                if ((this.mClick_Calculate_Large_View_Done_ButtonParams == null))
                {
                    this.mClick_Calculate_Large_View_Done_ButtonParams = new Click_Calculate_Large_View_Done_ButtonParams();
                }
                return this.mClick_Calculate_Large_View_Done_ButtonParams;
            }
        }
        
        public virtual Click_Cancel_DebugInput_WindowParams Click_Cancel_DebugInput_WindowParams
        {
            get
            {
                if ((this.mClick_Cancel_DebugInput_WindowParams == null))
                {
                    this.mClick_Cancel_DebugInput_WindowParams = new Click_Cancel_DebugInput_WindowParams();
                }
                return this.mClick_Cancel_DebugInput_WindowParams;
            }
        }
        
        public virtual Click_Close_Deploy_Tab_ButtonParams Click_Close_Deploy_Tab_ButtonParams
        {
            get
            {
                if ((this.mClick_Close_Deploy_Tab_ButtonParams == null))
                {
                    this.mClick_Close_Deploy_Tab_ButtonParams = new Click_Close_Deploy_Tab_ButtonParams();
                }
                return this.mClick_Close_Deploy_Tab_ButtonParams;
            }
        }
        
        public virtual Click_Close_Settings_Tab_ButtonParams Click_Close_Settings_Tab_ButtonParams
        {
            get
            {
                if ((this.mClick_Close_Settings_Tab_ButtonParams == null))
                {
                    this.mClick_Close_Settings_Tab_ButtonParams = new Click_Close_Settings_Tab_ButtonParams();
                }
                return this.mClick_Close_Settings_Tab_ButtonParams;
            }
        }
        
        public virtual Click_Close_Workflow_Tab_ButtonParams Click_Close_Workflow_Tab_ButtonParams
        {
            get
            {
                if ((this.mClick_Close_Workflow_Tab_ButtonParams == null))
                {
                    this.mClick_Close_Workflow_Tab_ButtonParams = new Click_Close_Workflow_Tab_ButtonParams();
                }
                return this.mClick_Close_Workflow_Tab_ButtonParams;
            }
        }
        
        public virtual Click_ConfigureSetting_From_MenuParams Click_ConfigureSetting_From_MenuParams
        {
            get
            {
                if ((this.mClick_ConfigureSetting_From_MenuParams == null))
                {
                    this.mClick_ConfigureSetting_From_MenuParams = new Click_ConfigureSetting_From_MenuParams();
                }
                return this.mClick_ConfigureSetting_From_MenuParams;
            }
        }
        
        public virtual Click_Debug_Output_Assign_CellParams Click_Debug_Output_Assign_CellParams
        {
            get
            {
                if ((this.mClick_Debug_Output_Assign_CellParams == null))
                {
                    this.mClick_Debug_Output_Assign_CellParams = new Click_Debug_Output_Assign_CellParams();
                }
                return this.mClick_Debug_Output_Assign_CellParams;
            }
        }
        
        public virtual Click_Debug_Output_BaseConvert_CellParams Click_Debug_Output_BaseConvert_CellParams
        {
            get
            {
                if ((this.mClick_Debug_Output_BaseConvert_CellParams == null))
                {
                    this.mClick_Debug_Output_BaseConvert_CellParams = new Click_Debug_Output_BaseConvert_CellParams();
                }
                return this.mClick_Debug_Output_BaseConvert_CellParams;
            }
        }
        
        public virtual Click_Debug_Output_Calculate_CellParams Click_Debug_Output_Calculate_CellParams
        {
            get
            {
                if ((this.mClick_Debug_Output_Calculate_CellParams == null))
                {
                    this.mClick_Debug_Output_Calculate_CellParams = new Click_Debug_Output_Calculate_CellParams();
                }
                return this.mClick_Debug_Output_Calculate_CellParams;
            }
        }
        
        public virtual Click_Debug_Output_Workflow1_NameParams Click_Debug_Output_Workflow1_NameParams
        {
            get
            {
                if ((this.mClick_Debug_Output_Workflow1_NameParams == null))
                {
                    this.mClick_Debug_Output_Workflow1_NameParams = new Click_Debug_Output_Workflow1_NameParams();
                }
                return this.mClick_Debug_Output_Workflow1_NameParams;
            }
        }
        
        public virtual Click_DebugInput_Debug_ButtonParams Click_DebugInput_Debug_ButtonParams
        {
            get
            {
                if ((this.mClick_DebugInput_Debug_ButtonParams == null))
                {
                    this.mClick_DebugInput_Debug_ButtonParams = new Click_DebugInput_Debug_ButtonParams();
                }
                return this.mClick_DebugInput_Debug_ButtonParams;
            }
        }
        
        public virtual Click_DebugInput_ViewInBrowser_ButtonParams Click_DebugInput_ViewInBrowser_ButtonParams
        {
            get
            {
                if ((this.mClick_DebugInput_ViewInBrowser_ButtonParams == null))
                {
                    this.mClick_DebugInput_ViewInBrowser_ButtonParams = new Click_DebugInput_ViewInBrowser_ButtonParams();
                }
                return this.mClick_DebugInput_ViewInBrowser_ButtonParams;
            }
        }
        
        public virtual Click_Decision_Dialog_Done_ButtonParams Click_Decision_Dialog_Done_ButtonParams
        {
            get
            {
                if ((this.mClick_Decision_Dialog_Done_ButtonParams == null))
                {
                    this.mClick_Decision_Dialog_Done_ButtonParams = new Click_Decision_Dialog_Done_ButtonParams();
                }
                return this.mClick_Decision_Dialog_Done_ButtonParams;
            }
        }
        
        public virtual Click_DeleteWeb_Generate_OutputsParams Click_DeleteWeb_Generate_OutputsParams
        {
            get
            {
                if ((this.mClick_DeleteWeb_Generate_OutputsParams == null))
                {
                    this.mClick_DeleteWeb_Generate_OutputsParams = new Click_DeleteWeb_Generate_OutputsParams();
                }
                return this.mClick_DeleteWeb_Generate_OutputsParams;
            }
        }
        
        public virtual Click_Deploy_Tab_Destination_Server_ComboboxParams Click_Deploy_Tab_Destination_Server_ComboboxParams
        {
            get
            {
                if ((this.mClick_Deploy_Tab_Destination_Server_ComboboxParams == null))
                {
                    this.mClick_Deploy_Tab_Destination_Server_ComboboxParams = new Click_Deploy_Tab_Destination_Server_ComboboxParams();
                }
                return this.mClick_Deploy_Tab_Destination_Server_ComboboxParams;
            }
        }
        
        public virtual Click_Deploy_Tab_Source_Server_ComboboxParams Click_Deploy_Tab_Source_Server_ComboboxParams
        {
            get
            {
                if ((this.mClick_Deploy_Tab_Source_Server_ComboboxParams == null))
                {
                    this.mClick_Deploy_Tab_Source_Server_ComboboxParams = new Click_Deploy_Tab_Source_Server_ComboboxParams();
                }
                return this.mClick_Deploy_Tab_Source_Server_ComboboxParams;
            }
        }
        
        public virtual Click_DotNet_DLL_Large_View_Done_ButtonParams Click_DotNet_DLL_Large_View_Done_ButtonParams
        {
            get
            {
                if ((this.mClick_DotNet_DLL_Large_View_Done_ButtonParams == null))
                {
                    this.mClick_DotNet_DLL_Large_View_Done_ButtonParams = new Click_DotNet_DLL_Large_View_Done_ButtonParams();
                }
                return this.mClick_DotNet_DLL_Large_View_Done_ButtonParams;
            }
        }
        
        public virtual Click_Duplicate_From_Duplicate_DialogParams Click_Duplicate_From_Duplicate_DialogParams
        {
            get
            {
                if ((this.mClick_Duplicate_From_Duplicate_DialogParams == null))
                {
                    this.mClick_Duplicate_From_Duplicate_DialogParams = new Click_Duplicate_From_Duplicate_DialogParams();
                }
                return this.mClick_Duplicate_From_Duplicate_DialogParams;
            }
        }
        
        public virtual Click_EmailSource_TestConnection_ButtonParams Click_EmailSource_TestConnection_ButtonParams
        {
            get
            {
                if ((this.mClick_EmailSource_TestConnection_ButtonParams == null))
                {
                    this.mClick_EmailSource_TestConnection_ButtonParams = new Click_EmailSource_TestConnection_ButtonParams();
                }
                return this.mClick_EmailSource_TestConnection_ButtonParams;
            }
        }
        
        public virtual Click_ExpandAndStepIn_NestedWorkflowParams Click_ExpandAndStepIn_NestedWorkflowParams
        {
            get
            {
                if ((this.mClick_ExpandAndStepIn_NestedWorkflowParams == null))
                {
                    this.mClick_ExpandAndStepIn_NestedWorkflowParams = new Click_ExpandAndStepIn_NestedWorkflowParams();
                }
                return this.mClick_ExpandAndStepIn_NestedWorkflowParams;
            }
        }
        
        public virtual Click_Explorer_Filter_Clear_ButtonParams Click_Explorer_Filter_Clear_ButtonParams
        {
            get
            {
                if ((this.mClick_Explorer_Filter_Clear_ButtonParams == null))
                {
                    this.mClick_Explorer_Filter_Clear_ButtonParams = new Click_Explorer_Filter_Clear_ButtonParams();
                }
                return this.mClick_Explorer_Filter_Clear_ButtonParams;
            }
        }
        
        public virtual Click_Explorer_RemoteServer_Connect_ButtonParams Click_Explorer_RemoteServer_Connect_ButtonParams
        {
            get
            {
                if ((this.mClick_Explorer_RemoteServer_Connect_ButtonParams == null))
                {
                    this.mClick_Explorer_RemoteServer_Connect_ButtonParams = new Click_Explorer_RemoteServer_Connect_ButtonParams();
                }
                return this.mClick_Explorer_RemoteServer_Connect_ButtonParams;
            }
        }
        
        public virtual Click_First_Recordset_Input_CheckboxParams Click_First_Recordset_Input_CheckboxParams
        {
            get
            {
                if ((this.mClick_First_Recordset_Input_CheckboxParams == null))
                {
                    this.mClick_First_Recordset_Input_CheckboxParams = new Click_First_Recordset_Input_CheckboxParams();
                }
                return this.mClick_First_Recordset_Input_CheckboxParams;
            }
        }
        
        public virtual Click_GET_Web_Large_View_Done_ButtonParams Click_GET_Web_Large_View_Done_ButtonParams
        {
            get
            {
                if ((this.mClick_GET_Web_Large_View_Done_ButtonParams == null))
                {
                    this.mClick_GET_Web_Large_View_Done_ButtonParams = new Click_GET_Web_Large_View_Done_ButtonParams();
                }
                return this.mClick_GET_Web_Large_View_Done_ButtonParams;
            }
        }
        
        public virtual Click_GET_Web_Large_View_Done_Button_With_Invalid_Large_ViewParams Click_GET_Web_Large_View_Done_Button_With_Invalid_Large_ViewParams
        {
            get
            {
                if ((this.mClick_GET_Web_Large_View_Done_Button_With_Invalid_Large_ViewParams == null))
                {
                    this.mClick_GET_Web_Large_View_Done_Button_With_Invalid_Large_ViewParams = new Click_GET_Web_Large_View_Done_Button_With_Invalid_Large_ViewParams();
                }
                return this.mClick_GET_Web_Large_View_Done_Button_With_Invalid_Large_ViewParams;
            }
        }
        
        public virtual Click_GET_Web_Large_View_Generate_OutputsExpectedValues Click_GET_Web_Large_View_Generate_OutputsExpectedValues
        {
            get
            {
                if ((this.mClick_GET_Web_Large_View_Generate_OutputsExpectedValues == null))
                {
                    this.mClick_GET_Web_Large_View_Generate_OutputsExpectedValues = new Click_GET_Web_Large_View_Generate_OutputsExpectedValues();
                }
                return this.mClick_GET_Web_Large_View_Generate_OutputsExpectedValues;
            }
        }
        
        public virtual Click_HTTP_Delete_Web_Tool_New_ButtonParams Click_HTTP_Delete_Web_Tool_New_ButtonParams
        {
            get
            {
                if ((this.mClick_HTTP_Delete_Web_Tool_New_ButtonParams == null))
                {
                    this.mClick_HTTP_Delete_Web_Tool_New_ButtonParams = new Click_HTTP_Delete_Web_Tool_New_ButtonParams();
                }
                return this.mClick_HTTP_Delete_Web_Tool_New_ButtonParams;
            }
        }
        
        public virtual Click_HTTP_Post_Web_Tool_New_ButtonParams Click_HTTP_Post_Web_Tool_New_ButtonParams
        {
            get
            {
                if ((this.mClick_HTTP_Post_Web_Tool_New_ButtonParams == null))
                {
                    this.mClick_HTTP_Post_Web_Tool_New_ButtonParams = new Click_HTTP_Post_Web_Tool_New_ButtonParams();
                }
                return this.mClick_HTTP_Post_Web_Tool_New_ButtonParams;
            }
        }
        
        public virtual Click_MessageBox_YesParams Click_MessageBox_YesParams
        {
            get
            {
                if ((this.mClick_MessageBox_YesParams == null))
                {
                    this.mClick_MessageBox_YesParams = new Click_MessageBox_YesParams();
                }
                return this.mClick_MessageBox_YesParams;
            }
        }
        
        public virtual Click_NewPluginSource_Ribbon_ButtonParams Click_NewPluginSource_Ribbon_ButtonParams
        {
            get
            {
                if ((this.mClick_NewPluginSource_Ribbon_ButtonParams == null))
                {
                    this.mClick_NewPluginSource_Ribbon_ButtonParams = new Click_NewPluginSource_Ribbon_ButtonParams();
                }
                return this.mClick_NewPluginSource_Ribbon_ButtonParams;
            }
        }
        
        public virtual Click_NewSource_Button_FromODBC_ToolParams Click_NewSource_Button_FromODBC_ToolParams
        {
            get
            {
                if ((this.mClick_NewSource_Button_FromODBC_ToolParams == null))
                {
                    this.mClick_NewSource_Button_FromODBC_ToolParams = new Click_NewSource_Button_FromODBC_ToolParams();
                }
                return this.mClick_NewSource_Button_FromODBC_ToolParams;
            }
        }
        
        public virtual Click_NewSource_Button_FromOracle_ToolParams Click_NewSource_Button_FromOracle_ToolParams
        {
            get
            {
                if ((this.mClick_NewSource_Button_FromOracle_ToolParams == null))
                {
                    this.mClick_NewSource_Button_FromOracle_ToolParams = new Click_NewSource_Button_FromOracle_ToolParams();
                }
                return this.mClick_NewSource_Button_FromOracle_ToolParams;
            }
        }
        
        public virtual Click_NewVersion_buttonExpectedValues Click_NewVersion_buttonExpectedValues
        {
            get
            {
                if ((this.mClick_NewVersion_buttonExpectedValues == null))
                {
                    this.mClick_NewVersion_buttonExpectedValues = new Click_NewVersion_buttonExpectedValues();
                }
                return this.mClick_NewVersion_buttonExpectedValues;
            }
        }
        
        public virtual Click_Output_OnRecordset_InVariableListParams Click_Output_OnRecordset_InVariableListParams
        {
            get
            {
                if ((this.mClick_Output_OnRecordset_InVariableListParams == null))
                {
                    this.mClick_Output_OnRecordset_InVariableListParams = new Click_Output_OnRecordset_InVariableListParams();
                }
                return this.mClick_Output_OnRecordset_InVariableListParams;
            }
        }
        
        public virtual Click_Output_OnVariable_InVariableListParams Click_Output_OnVariable_InVariableListParams
        {
            get
            {
                if ((this.mClick_Output_OnVariable_InVariableListParams == null))
                {
                    this.mClick_Output_OnVariable_InVariableListParams = new Click_Output_OnVariable_InVariableListParams();
                }
                return this.mClick_Output_OnVariable_InVariableListParams;
            }
        }
        
        public virtual Click_Reset_Perfomance_CounterParams Click_Reset_Perfomance_CounterParams
        {
            get
            {
                if ((this.mClick_Reset_Perfomance_CounterParams == null))
                {
                    this.mClick_Reset_Perfomance_CounterParams = new Click_Reset_Perfomance_CounterParams();
                }
                return this.mClick_Reset_Perfomance_CounterParams;
            }
        }
        
        public virtual Click_RunDebug_buttonParams Click_RunDebug_buttonParams
        {
            get
            {
                if ((this.mClick_RunDebug_buttonParams == null))
                {
                    this.mClick_RunDebug_buttonParams = new Click_RunDebug_buttonParams();
                }
                return this.mClick_RunDebug_buttonParams;
            }
        }
        
        public virtual Click_Save_Ribbon_Button_to_Open_Save_DialogParams Click_Save_Ribbon_Button_to_Open_Save_DialogParams
        {
            get
            {
                if ((this.mClick_Save_Ribbon_Button_to_Open_Save_DialogParams == null))
                {
                    this.mClick_Save_Ribbon_Button_to_Open_Save_DialogParams = new Click_Save_Ribbon_Button_to_Open_Save_DialogParams();
                }
                return this.mClick_Save_Ribbon_Button_to_Open_Save_DialogParams;
            }
        }
        
        public virtual Click_Scheduler_Create_New_Task_Ribbon_ButtonParams Click_Scheduler_Create_New_Task_Ribbon_ButtonParams
        {
            get
            {
                if ((this.mClick_Scheduler_Create_New_Task_Ribbon_ButtonParams == null))
                {
                    this.mClick_Scheduler_Create_New_Task_Ribbon_ButtonParams = new Click_Scheduler_Create_New_Task_Ribbon_ButtonParams();
                }
                return this.mClick_Scheduler_Create_New_Task_Ribbon_ButtonParams;
            }
        }
        
        public virtual Click_Scheduler_Disable_Task_Radio_ButtonParams Click_Scheduler_Disable_Task_Radio_ButtonParams
        {
            get
            {
                if ((this.mClick_Scheduler_Disable_Task_Radio_ButtonParams == null))
                {
                    this.mClick_Scheduler_Disable_Task_Radio_ButtonParams = new Click_Scheduler_Disable_Task_Radio_ButtonParams();
                }
                return this.mClick_Scheduler_Disable_Task_Radio_ButtonParams;
            }
        }
        
        public virtual Click_Scheduler_Enable_Task_Radio_ButtonParams Click_Scheduler_Enable_Task_Radio_ButtonParams
        {
            get
            {
                if ((this.mClick_Scheduler_Enable_Task_Radio_ButtonParams == null))
                {
                    this.mClick_Scheduler_Enable_Task_Radio_ButtonParams = new Click_Scheduler_Enable_Task_Radio_ButtonParams();
                }
                return this.mClick_Scheduler_Enable_Task_Radio_ButtonParams;
            }
        }
        
        public virtual Click_Scheduler_RunTaskParams Click_Scheduler_RunTaskParams
        {
            get
            {
                if ((this.mClick_Scheduler_RunTaskParams == null))
                {
                    this.mClick_Scheduler_RunTaskParams = new Click_Scheduler_RunTaskParams();
                }
                return this.mClick_Scheduler_RunTaskParams;
            }
        }
        
        public virtual Click_Select_Resource_Button_From_Resource_PermissionsParams Click_Select_Resource_Button_From_Resource_PermissionsParams
        {
            get
            {
                if ((this.mClick_Select_Resource_Button_From_Resource_PermissionsParams == null))
                {
                    this.mClick_Select_Resource_Button_From_Resource_PermissionsParams = new Click_Select_Resource_Button_From_Resource_PermissionsParams();
                }
                return this.mClick_Select_Resource_Button_From_Resource_PermissionsParams;
            }
        }
        
        public virtual Click_Select_Windows_Group_Cancel_ButtonParams Click_Select_Windows_Group_Cancel_ButtonParams
        {
            get
            {
                if ((this.mClick_Select_Windows_Group_Cancel_ButtonParams == null))
                {
                    this.mClick_Select_Windows_Group_Cancel_ButtonParams = new Click_Select_Windows_Group_Cancel_ButtonParams();
                }
                return this.mClick_Select_Windows_Group_Cancel_ButtonParams;
            }
        }
        
        public virtual Click_Server_Source_Wizard_Address_Protocol_DropdownParams Click_Server_Source_Wizard_Address_Protocol_DropdownParams
        {
            get
            {
                if ((this.mClick_Server_Source_Wizard_Address_Protocol_DropdownParams == null))
                {
                    this.mClick_Server_Source_Wizard_Address_Protocol_DropdownParams = new Click_Server_Source_Wizard_Address_Protocol_DropdownParams();
                }
                return this.mClick_Server_Source_Wizard_Address_Protocol_DropdownParams;
            }
        }
        
        public virtual Click_Server_Source_Wizard_Test_Connection_ButtonParams Click_Server_Source_Wizard_Test_Connection_ButtonParams
        {
            get
            {
                if ((this.mClick_Server_Source_Wizard_Test_Connection_ButtonParams == null))
                {
                    this.mClick_Server_Source_Wizard_Test_Connection_ButtonParams = new Click_Server_Source_Wizard_Test_Connection_ButtonParams();
                }
                return this.mClick_Server_Source_Wizard_Test_Connection_ButtonParams;
            }
        }
        
        public virtual Click_Show_Dependencies_In_Explorer_Context_MenuParams Click_Show_Dependencies_In_Explorer_Context_MenuParams
        {
            get
            {
                if ((this.mClick_Show_Dependencies_In_Explorer_Context_MenuParams == null))
                {
                    this.mClick_Show_Dependencies_In_Explorer_Context_MenuParams = new Click_Show_Dependencies_In_Explorer_Context_MenuParams();
                }
                return this.mClick_Show_Dependencies_In_Explorer_Context_MenuParams;
            }
        }
        
        public virtual Click_SQL_Server_Large_View_Done_ButtonExpectedValues Click_SQL_Server_Large_View_Done_ButtonExpectedValues
        {
            get
            {
                if ((this.mClick_SQL_Server_Large_View_Done_ButtonExpectedValues == null))
                {
                    this.mClick_SQL_Server_Large_View_Done_ButtonExpectedValues = new Click_SQL_Server_Large_View_Done_ButtonExpectedValues();
                }
                return this.mClick_SQL_Server_Large_View_Done_ButtonExpectedValues;
            }
        }
        
        public virtual Click_SQL_Server_Large_View_Generate_OutputsExpectedValues Click_SQL_Server_Large_View_Generate_OutputsExpectedValues
        {
            get
            {
                if ((this.mClick_SQL_Server_Large_View_Generate_OutputsExpectedValues == null))
                {
                    this.mClick_SQL_Server_Large_View_Generate_OutputsExpectedValues = new Click_SQL_Server_Large_View_Generate_OutputsExpectedValues();
                }
                return this.mClick_SQL_Server_Large_View_Generate_OutputsExpectedValues;
            }
        }
        
        public virtual Click_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues Click_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues
        {
            get
            {
                if ((this.mClick_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues == null))
                {
                    this.mClick_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues = new Click_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues();
                }
                return this.mClick_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues;
            }
        }
        
        public virtual Click_Switch_Dialog_Done_ButtonParams Click_Switch_Dialog_Done_ButtonParams
        {
            get
            {
                if ((this.mClick_Switch_Dialog_Done_ButtonParams == null))
                {
                    this.mClick_Switch_Dialog_Done_ButtonParams = new Click_Switch_Dialog_Done_ButtonParams();
                }
                return this.mClick_Switch_Dialog_Done_ButtonParams;
            }
        }
        
        public virtual Click_UpdateDuplicateRelationshipsParams Click_UpdateDuplicateRelationshipsParams
        {
            get
            {
                if ((this.mClick_UpdateDuplicateRelationshipsParams == null))
                {
                    this.mClick_UpdateDuplicateRelationshipsParams = new Click_UpdateDuplicateRelationshipsParams();
                }
                return this.mClick_UpdateDuplicateRelationshipsParams;
            }
        }
        
        public virtual Click_UserButton_OnSharepointSourceParams Click_UserButton_OnSharepointSourceParams
        {
            get
            {
                if ((this.mClick_UserButton_OnSharepointSourceParams == null))
                {
                    this.mClick_UserButton_OnSharepointSourceParams = new Click_UserButton_OnSharepointSourceParams();
                }
                return this.mClick_UserButton_OnSharepointSourceParams;
            }
        }
        
        public virtual Click_Variable_IsInputParams Click_Variable_IsInputParams
        {
            get
            {
                if ((this.mClick_Variable_IsInputParams == null))
                {
                    this.mClick_Variable_IsInputParams = new Click_Variable_IsInputParams();
                }
                return this.mClick_Variable_IsInputParams;
            }
        }
        
        public virtual Click_VariableList_Recordset_Row1_IsInputCheckboxParams Click_VariableList_Recordset_Row1_IsInputCheckboxParams
        {
            get
            {
                if ((this.mClick_VariableList_Recordset_Row1_IsInputCheckboxParams == null))
                {
                    this.mClick_VariableList_Recordset_Row1_IsInputCheckboxParams = new Click_VariableList_Recordset_Row1_IsInputCheckboxParams();
                }
                return this.mClick_VariableList_Recordset_Row1_IsInputCheckboxParams;
            }
        }
        
        public virtual Click_VariableList_Scalar_Row1_IsInputCheckboxParams Click_VariableList_Scalar_Row1_IsInputCheckboxParams
        {
            get
            {
                if ((this.mClick_VariableList_Scalar_Row1_IsInputCheckboxParams == null))
                {
                    this.mClick_VariableList_Scalar_Row1_IsInputCheckboxParams = new Click_VariableList_Scalar_Row1_IsInputCheckboxParams();
                }
                return this.mClick_VariableList_Scalar_Row1_IsInputCheckboxParams;
            }
        }
        
        public virtual Click_Workflow_CollapseAllParams Click_Workflow_CollapseAllParams
        {
            get
            {
                if ((this.mClick_Workflow_CollapseAllParams == null))
                {
                    this.mClick_Workflow_CollapseAllParams = new Click_Workflow_CollapseAllParams();
                }
                return this.mClick_Workflow_CollapseAllParams;
            }
        }
        
        public virtual Click_Workflow_ExpandAllParams Click_Workflow_ExpandAllParams
        {
            get
            {
                if ((this.mClick_Workflow_ExpandAllParams == null))
                {
                    this.mClick_Workflow_ExpandAllParams = new Click_Workflow_ExpandAllParams();
                }
                return this.mClick_Workflow_ExpandAllParams;
            }
        }
        
        public virtual Create_SubFolder_In_Folder1Params Create_SubFolder_In_Folder1Params
        {
            get
            {
                if ((this.mCreate_SubFolder_In_Folder1Params == null))
                {
                    this.mCreate_SubFolder_In_Folder1Params = new Create_SubFolder_In_Folder1Params();
                }
                return this.mCreate_SubFolder_In_Folder1Params;
            }
        }
        
        public virtual Drag_DeleteWeb_Toolbox_Onto_Workflow_SurfaceParams Drag_DeleteWeb_Toolbox_Onto_Workflow_SurfaceParams
        {
            get
            {
                if ((this.mDrag_DeleteWeb_Toolbox_Onto_Workflow_SurfaceParams == null))
                {
                    this.mDrag_DeleteWeb_Toolbox_Onto_Workflow_SurfaceParams = new Drag_DeleteWeb_Toolbox_Onto_Workflow_SurfaceParams();
                }
                return this.mDrag_DeleteWeb_Toolbox_Onto_Workflow_SurfaceParams;
            }
        }
        
        public virtual Drag_Dice_Onto_Dice_On_The_DesignSurfaceParams Drag_Dice_Onto_Dice_On_The_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Dice_Onto_Dice_On_The_DesignSurfaceParams == null))
                {
                    this.mDrag_Dice_Onto_Dice_On_The_DesignSurfaceParams = new Drag_Dice_Onto_Dice_On_The_DesignSurfaceParams();
                }
                return this.mDrag_Dice_Onto_Dice_On_The_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_DotNet_DLL_Connector_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_DotNet_DLL_Connector_Onto_DesignSurfaceParams = new Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams();
                }
                return this.mDrag_DotNet_DLL_Connector_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams
        {
            get
            {
                if ((this.mDrag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams == null))
                {
                    this.mDrag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams = new Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams();
                }
                return this.mDrag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams;
            }
        }
        
        public virtual Drag_Explorer_Localhost_First_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams Drag_Explorer_Localhost_First_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams
        {
            get
            {
                if ((this.mDrag_Explorer_Localhost_First_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams == null))
                {
                    this.mDrag_Explorer_Localhost_First_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams = new Drag_Explorer_Localhost_First_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams();
                }
                return this.mDrag_Explorer_Localhost_First_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams;
            }
        }
        
        public virtual Drag_Explorer_Localhost_Second_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams Drag_Explorer_Localhost_Second_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams
        {
            get
            {
                if ((this.mDrag_Explorer_Localhost_Second_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams == null))
                {
                    this.mDrag_Explorer_Localhost_Second_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams = new Drag_Explorer_Localhost_Second_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams();
                }
                return this.mDrag_Explorer_Localhost_Second_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams;
            }
        }
        
        public virtual Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams
        {
            get
            {
                if ((this.mDrag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams == null))
                {
                    this.mDrag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams = new Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams();
                }
                return this.mDrag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams;
            }
        }
        
        public virtual Drag_GET_Web_Connector_Onto_DesignSurfaceParams Drag_GET_Web_Connector_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_GET_Web_Connector_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_GET_Web_Connector_Onto_DesignSurfaceParams = new Drag_GET_Web_Connector_Onto_DesignSurfaceParams();
                }
                return this.mDrag_GET_Web_Connector_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_GetWeb_RequestTool_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_GetWeb_RequestTool_Onto_DesignSurfaceParams = new Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams();
                }
                return this.mDrag_GetWeb_RequestTool_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_PostWeb_RequestTool_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_PostWeb_RequestTool_Onto_DesignSurfaceParams = new Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams();
                }
                return this.mDrag_PostWeb_RequestTool_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_PutWeb_Tool_Onto_DesignSurfaceParams Drag_PutWeb_Tool_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_PutWeb_Tool_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_PutWeb_Tool_Onto_DesignSurfaceParams = new Drag_PutWeb_Tool_Onto_DesignSurfaceParams();
                }
                return this.mDrag_PutWeb_Tool_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_AggregateCalculate_Onto_DesignSurfaceParams Drag_Toolbox_AggregateCalculate_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_AggregateCalculate_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_AggregateCalculate_Onto_DesignSurfaceParams = new Drag_Toolbox_AggregateCalculate_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_AggregateCalculate_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_AssignObject_Onto_DesignSurfaceParams Drag_Toolbox_AssignObject_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_AssignObject_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_AssignObject_Onto_DesignSurfaceParams = new Drag_Toolbox_AssignObject_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_AssignObject_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams = new Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Calculate_Onto_DesignSurfaceParams Drag_Toolbox_Calculate_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Calculate_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Calculate_Onto_DesignSurfaceParams = new Drag_Toolbox_Calculate_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Calculate_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams = new Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_CMD_Line_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_CMD_Line_Onto_DesignSurfaceParams = new Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_CMD_Line_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Comment_Onto_DesignSurfaceParams Drag_Toolbox_Comment_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Comment_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Comment_Onto_DesignSurfaceParams = new Drag_Toolbox_Comment_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Comment_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Copy_Onto_DesignSurfaceParams Drag_Toolbox_Copy_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Copy_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Copy_Onto_DesignSurfaceParams = new Drag_Toolbox_Copy_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Copy_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Count_Records_Onto_DesignSurfaceParams Drag_Toolbox_Count_Records_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Count_Records_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Count_Records_Onto_DesignSurfaceParams = new Drag_Toolbox_Count_Records_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Count_Records_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Create_Onto_DesignSurfaceParams Drag_Toolbox_Create_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Create_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Create_Onto_DesignSurfaceParams = new Drag_Toolbox_Create_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Create_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Data_Merge_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Data_Merge_Onto_DesignSurfaceParams = new Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Data_Merge_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Data_Split_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Data_Split_Onto_DesignSurfaceParams = new Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Data_Split_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams = new Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams = new Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Decision_Onto_DesignSurfaceParams Drag_Toolbox_Decision_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Decision_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Decision_Onto_DesignSurfaceParams = new Drag_Toolbox_Decision_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Decision_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Delete_Onto_DesignSurfaceParams Drag_Toolbox_Delete_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Delete_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Delete_Onto_DesignSurfaceParams = new Drag_Toolbox_Delete_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Delete_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Delete_Record_Onto_DesignSurfaceParams Drag_Toolbox_Delete_Record_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Delete_Record_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Delete_Record_Onto_DesignSurfaceParams = new Drag_Toolbox_Delete_Record_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Delete_Record_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams Drag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams = new Drag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams Drag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams = new Drag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams Drag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams = new Drag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Find_Index_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Find_Index_Onto_DesignSurfaceParams = new Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Find_Index_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams Drag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams = new Drag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_For_Each_Onto_DesignSurfaceParams Drag_Toolbox_For_Each_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_For_Each_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_For_Each_Onto_DesignSurfaceParams = new Drag_Toolbox_For_Each_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_For_Each_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Format_Number_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Format_Number_Onto_DesignSurfaceParams = new Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Format_Number_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Javascript_Onto_DesignSurfaceParams Drag_Toolbox_Javascript_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Javascript_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Javascript_Onto_DesignSurfaceParams = new Drag_Toolbox_Javascript_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Javascript_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_JSON_Onto_DesignSurfaceParams Drag_Toolbox_JSON_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_JSON_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_JSON_Onto_DesignSurfaceParams = new Drag_Toolbox_JSON_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_JSON_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Length_Onto_DesignSurfaceParams Drag_Toolbox_Length_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Length_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Length_Onto_DesignSurfaceParams = new Drag_Toolbox_Length_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Length_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Move_Onto_DesignSurfaceParams Drag_Toolbox_Move_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Move_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Move_Onto_DesignSurfaceParams = new Drag_Toolbox_Move_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Move_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_MultiAssign_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_MultiAssign_Onto_DesignSurfaceParams = new Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_MultiAssign_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_MySql_Database_Onto_DesignSurfaceParams Drag_Toolbox_MySql_Database_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_MySql_Database_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_MySql_Database_Onto_DesignSurfaceParams = new Drag_Toolbox_MySql_Database_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_MySql_Database_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_ODBC_Dtatbase_Onto_DesignSurfaceParams Drag_Toolbox_ODBC_Dtatbase_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_ODBC_Dtatbase_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_ODBC_Dtatbase_Onto_DesignSurfaceParams = new Drag_Toolbox_ODBC_Dtatbase_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_ODBC_Dtatbase_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Oracle_Database_Onto_DesignSurfaceParams Drag_Toolbox_Oracle_Database_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Oracle_Database_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Oracle_Database_Onto_DesignSurfaceParams = new Drag_Toolbox_Oracle_Database_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Oracle_Database_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_PostgreSql_Onto_DesignSurfaceParams Drag_Toolbox_PostgreSql_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_PostgreSql_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_PostgreSql_Onto_DesignSurfaceParams = new Drag_Toolbox_PostgreSql_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_PostgreSql_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Python_Onto_DesignSurfaceParams Drag_Toolbox_Python_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Python_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Python_Onto_DesignSurfaceParams = new Drag_Toolbox_Python_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Python_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_RabbitMqConsume_Onto_DesignSurfaceParams Drag_Toolbox_RabbitMqConsume_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_RabbitMqConsume_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_RabbitMqConsume_Onto_DesignSurfaceParams = new Drag_Toolbox_RabbitMqConsume_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_RabbitMqConsume_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_RabbitMqPublish_Onto_DesignSurfaceParams Drag_Toolbox_RabbitMqPublish_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_RabbitMqPublish_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_RabbitMqPublish_Onto_DesignSurfaceParams = new Drag_Toolbox_RabbitMqPublish_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_RabbitMqPublish_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Random_Onto_DesignSurfaceParams Drag_Toolbox_Random_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Random_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Random_Onto_DesignSurfaceParams = new Drag_Toolbox_Random_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Random_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Read_File_Onto_DesignSurfaceParams Drag_Toolbox_Read_File_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Read_File_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Read_File_Onto_DesignSurfaceParams = new Drag_Toolbox_Read_File_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Read_File_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Read_Folder_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Read_Folder_Onto_DesignSurfaceParams = new Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Read_Folder_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Rename_Onto_DesignSurfaceParams Drag_Toolbox_Rename_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Rename_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Rename_Onto_DesignSurfaceParams = new Drag_Toolbox_Rename_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Rename_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Replace_Onto_DesignSurfaceParams Drag_Toolbox_Replace_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Replace_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Replace_Onto_DesignSurfaceParams = new Drag_Toolbox_Replace_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Replace_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Ruby_Onto_DesignSurfaceParams Drag_Toolbox_Ruby_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Ruby_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Ruby_Onto_DesignSurfaceParams = new Drag_Toolbox_Ruby_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Ruby_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Selectandapply_Onto_DesignSurfaceParams Drag_Toolbox_Selectandapply_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Selectandapply_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Selectandapply_Onto_DesignSurfaceParams = new Drag_Toolbox_Selectandapply_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Selectandapply_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Sequence_Onto_DesignSurfaceParams Drag_Toolbox_Sequence_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Sequence_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Sequence_Onto_DesignSurfaceParams = new Drag_Toolbox_Sequence_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Sequence_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Service_Picker_Onto_DesignSurfaceParams Drag_Toolbox_Service_Picker_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Service_Picker_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Service_Picker_Onto_DesignSurfaceParams = new Drag_Toolbox_Service_Picker_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Service_Picker_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Sharepoint_CopyFile_Onto_DesignSurfaceParams Drag_Toolbox_Sharepoint_CopyFile_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Sharepoint_CopyFile_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Sharepoint_CopyFile_Onto_DesignSurfaceParams = new Drag_Toolbox_Sharepoint_CopyFile_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Sharepoint_CopyFile_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams = new Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams = new Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Sharepoint_Download_File_Onto_DesignSurfaceParams Drag_Toolbox_Sharepoint_Download_File_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Sharepoint_Download_File_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Sharepoint_Download_File_Onto_DesignSurfaceParams = new Drag_Toolbox_Sharepoint_Download_File_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Sharepoint_Download_File_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Sharepoint_MoveFile_Onto_DesignSurfaceParams Drag_Toolbox_Sharepoint_MoveFile_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Sharepoint_MoveFile_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Sharepoint_MoveFile_Onto_DesignSurfaceParams = new Drag_Toolbox_Sharepoint_MoveFile_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Sharepoint_MoveFile_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams Drag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams = new Drag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams Drag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams = new Drag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Sharepoint_UploadFile_Onto_DesignSurfaceParams Drag_Toolbox_Sharepoint_UploadFile_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Sharepoint_UploadFile_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Sharepoint_UploadFile_Onto_DesignSurfaceParams = new Drag_Toolbox_Sharepoint_UploadFile_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Sharepoint_UploadFile_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams = new Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Sort_Record_Onto_DesignSurfaceParams Drag_Toolbox_Sort_Record_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Sort_Record_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Sort_Record_Onto_DesignSurfaceParams = new Drag_Toolbox_Sort_Record_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Sort_Record_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams = new Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams = new Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Switch_Onto_DesignSurfaceParams Drag_Toolbox_Switch_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Switch_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Switch_Onto_DesignSurfaceParams = new Drag_Toolbox_Switch_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Switch_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_System_Information_Onto_DesignSurfaceParams Drag_Toolbox_System_Information_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_System_Information_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_System_Information_Onto_DesignSurfaceParams = new Drag_Toolbox_System_Information_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_System_Information_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Unique_Records_Onto_DesignSurfaceParams Drag_Toolbox_Unique_Records_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Unique_Records_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Unique_Records_Onto_DesignSurfaceParams = new Drag_Toolbox_Unique_Records_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Unique_Records_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Unzip_Onto_DesignSurfaceParams Drag_Toolbox_Unzip_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Unzip_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Unzip_Onto_DesignSurfaceParams = new Drag_Toolbox_Unzip_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Unzip_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Web_Request_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Web_Request_Onto_DesignSurfaceParams = new Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Web_Request_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Write_File_Onto_DesignSurfaceParams Drag_Toolbox_Write_File_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Write_File_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Write_File_Onto_DesignSurfaceParams = new Drag_Toolbox_Write_File_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Write_File_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_XPath_Onto_DesignSurfaceParams Drag_Toolbox_XPath_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_XPath_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_XPath_Onto_DesignSurfaceParams = new Drag_Toolbox_XPath_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_XPath_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Drag_Toolbox_Zip_Onto_DesignSurfaceParams Drag_Toolbox_Zip_Onto_DesignSurfaceParams
        {
            get
            {
                if ((this.mDrag_Toolbox_Zip_Onto_DesignSurfaceParams == null))
                {
                    this.mDrag_Toolbox_Zip_Onto_DesignSurfaceParams = new Drag_Toolbox_Zip_Onto_DesignSurfaceParams();
                }
                return this.mDrag_Toolbox_Zip_Onto_DesignSurfaceParams;
            }
        }
        
        public virtual Duplicate_Explorer_Localhost_First_Item_With_Context_MenuParams Duplicate_Explorer_Localhost_First_Item_With_Context_MenuParams
        {
            get
            {
                if ((this.mDuplicate_Explorer_Localhost_First_Item_With_Context_MenuParams == null))
                {
                    this.mDuplicate_Explorer_Localhost_First_Item_With_Context_MenuParams = new Duplicate_Explorer_Localhost_First_Item_With_Context_MenuParams();
                }
                return this.mDuplicate_Explorer_Localhost_First_Item_With_Context_MenuParams;
            }
        }
        
        public virtual Enter_DeployViewOnly_Into_Deploy_Source_FilterParams Enter_DeployViewOnly_Into_Deploy_Source_FilterParams
        {
            get
            {
                if ((this.mEnter_DeployViewOnly_Into_Deploy_Source_FilterParams == null))
                {
                    this.mEnter_DeployViewOnly_Into_Deploy_Source_FilterParams = new Enter_DeployViewOnly_Into_Deploy_Source_FilterParams();
                }
                return this.mEnter_DeployViewOnly_Into_Deploy_Source_FilterParams;
            }
        }
        
        public virtual Enter_Dice_Roll_ValuesParams Enter_Dice_Roll_ValuesParams
        {
            get
            {
                if ((this.mEnter_Dice_Roll_ValuesParams == null))
                {
                    this.mEnter_Dice_Roll_ValuesParams = new Enter_Dice_Roll_ValuesParams();
                }
                return this.mEnter_Dice_Roll_ValuesParams;
            }
        }
        
        public virtual Enter_Duplicate_workflow_nameParams Enter_Duplicate_workflow_nameParams
        {
            get
            {
                if ((this.mEnter_Duplicate_workflow_nameParams == null))
                {
                    this.mEnter_Duplicate_workflow_nameParams = new Enter_Duplicate_workflow_nameParams();
                }
                return this.mEnter_Duplicate_workflow_nameParams;
            }
        }
        
        public virtual Enter_InputDebug_valueParams Enter_InputDebug_valueParams
        {
            get
            {
                if ((this.mEnter_InputDebug_valueParams == null))
                {
                    this.mEnter_InputDebug_valueParams = new Enter_InputDebug_valueParams();
                }
                return this.mEnter_InputDebug_valueParams;
            }
        }
        
        public virtual Enter_LocalSchedulerAdmin_Credentials_Into_Scheduler_TabParams Enter_LocalSchedulerAdmin_Credentials_Into_Scheduler_TabParams
        {
            get
            {
                if ((this.mEnter_LocalSchedulerAdmin_Credentials_Into_Scheduler_TabParams == null))
                {
                    this.mEnter_LocalSchedulerAdmin_Credentials_Into_Scheduler_TabParams = new Enter_LocalSchedulerAdmin_Credentials_Into_Scheduler_TabParams();
                }
                return this.mEnter_LocalSchedulerAdmin_Credentials_Into_Scheduler_TabParams;
            }
        }
        
        public virtual Enter_Public_As_Windows_GroupParams Enter_Public_As_Windows_GroupParams
        {
            get
            {
                if ((this.mEnter_Public_As_Windows_GroupParams == null))
                {
                    this.mEnter_Public_As_Windows_GroupParams = new Enter_Public_As_Windows_GroupParams();
                }
                return this.mEnter_Public_As_Windows_GroupParams;
            }
        }
        
        public virtual Enter_RunAsUser_Username_And_PasswordParams Enter_RunAsUser_Username_And_PasswordParams
        {
            get
            {
                if ((this.mEnter_RunAsUser_Username_And_PasswordParams == null))
                {
                    this.mEnter_RunAsUser_Username_And_PasswordParams = new Enter_RunAsUser_Username_And_PasswordParams();
                }
                return this.mEnter_RunAsUser_Username_And_PasswordParams;
            }
        }
        
        public virtual Enter_Sharepoint_Server_Path_From_OnCopyFile_ToolParams Enter_Sharepoint_Server_Path_From_OnCopyFile_ToolParams
        {
            get
            {
                if ((this.mEnter_Sharepoint_Server_Path_From_OnCopyFile_ToolParams == null))
                {
                    this.mEnter_Sharepoint_Server_Path_From_OnCopyFile_ToolParams = new Enter_Sharepoint_Server_Path_From_OnCopyFile_ToolParams();
                }
                return this.mEnter_Sharepoint_Server_Path_From_OnCopyFile_ToolParams;
            }
        }
        
        public virtual Enter_Sharepoint_Server_Path_From_OnMoveFile_ToolParams Enter_Sharepoint_Server_Path_From_OnMoveFile_ToolParams
        {
            get
            {
                if ((this.mEnter_Sharepoint_Server_Path_From_OnMoveFile_ToolParams == null))
                {
                    this.mEnter_Sharepoint_Server_Path_From_OnMoveFile_ToolParams = new Enter_Sharepoint_Server_Path_From_OnMoveFile_ToolParams();
                }
                return this.mEnter_Sharepoint_Server_Path_From_OnMoveFile_ToolParams;
            }
        }
        
        public virtual Enter_Sharepoint_Server_Path_From_OnUpload_ToolParams Enter_Sharepoint_Server_Path_From_OnUpload_ToolParams
        {
            get
            {
                if ((this.mEnter_Sharepoint_Server_Path_From_OnUpload_ToolParams == null))
                {
                    this.mEnter_Sharepoint_Server_Path_From_OnUpload_ToolParams = new Enter_Sharepoint_Server_Path_From_OnUpload_ToolParams();
                }
                return this.mEnter_Sharepoint_Server_Path_From_OnUpload_ToolParams;
            }
        }
        
        public virtual Enter_Sharepoint_Server_Path_To_OnCopyFile_ToolParams Enter_Sharepoint_Server_Path_To_OnCopyFile_ToolParams
        {
            get
            {
                if ((this.mEnter_Sharepoint_Server_Path_To_OnCopyFile_ToolParams == null))
                {
                    this.mEnter_Sharepoint_Server_Path_To_OnCopyFile_ToolParams = new Enter_Sharepoint_Server_Path_To_OnCopyFile_ToolParams();
                }
                return this.mEnter_Sharepoint_Server_Path_To_OnCopyFile_ToolParams;
            }
        }
        
        public virtual Enter_Sharepoint_Server_Path_To_OnMoveFile_ToolParams Enter_Sharepoint_Server_Path_To_OnMoveFile_ToolParams
        {
            get
            {
                if ((this.mEnter_Sharepoint_Server_Path_To_OnMoveFile_ToolParams == null))
                {
                    this.mEnter_Sharepoint_Server_Path_To_OnMoveFile_ToolParams = new Enter_Sharepoint_Server_Path_To_OnMoveFile_ToolParams();
                }
                return this.mEnter_Sharepoint_Server_Path_To_OnMoveFile_ToolParams;
            }
        }
        
        public virtual Enter_Sharepoint_Server_Path_To_OnUpload_ToolParams Enter_Sharepoint_Server_Path_To_OnUpload_ToolParams
        {
            get
            {
                if ((this.mEnter_Sharepoint_Server_Path_To_OnUpload_ToolParams == null))
                {
                    this.mEnter_Sharepoint_Server_Path_To_OnUpload_ToolParams = new Enter_Sharepoint_Server_Path_To_OnUpload_ToolParams();
                }
                return this.mEnter_Sharepoint_Server_Path_To_OnUpload_ToolParams;
            }
        }
        
        public virtual Enter_Sharepoint_ServerSource_ServerNameParams Enter_Sharepoint_ServerSource_ServerNameParams
        {
            get
            {
                if ((this.mEnter_Sharepoint_ServerSource_ServerNameParams == null))
                {
                    this.mEnter_Sharepoint_ServerSource_ServerNameParams = new Enter_Sharepoint_ServerSource_ServerNameParams();
                }
                return this.mEnter_Sharepoint_ServerSource_ServerNameParams;
            }
        }
        
        public virtual Enter_Sharepoint_ServerSource_User_CredentialsParams Enter_Sharepoint_ServerSource_User_CredentialsParams
        {
            get
            {
                if ((this.mEnter_Sharepoint_ServerSource_User_CredentialsParams == null))
                {
                    this.mEnter_Sharepoint_ServerSource_User_CredentialsParams = new Enter_Sharepoint_ServerSource_User_CredentialsParams();
                }
                return this.mEnter_Sharepoint_ServerSource_User_CredentialsParams;
            }
        }
        
        public virtual Enter_SomeData_Into_Base_Convert_Large_View_Row1_Value_TextboxParams Enter_SomeData_Into_Base_Convert_Large_View_Row1_Value_TextboxParams
        {
            get
            {
                if ((this.mEnter_SomeData_Into_Base_Convert_Large_View_Row1_Value_TextboxParams == null))
                {
                    this.mEnter_SomeData_Into_Base_Convert_Large_View_Row1_Value_TextboxParams = new Enter_SomeData_Into_Base_Convert_Large_View_Row1_Value_TextboxParams();
                }
                return this.mEnter_SomeData_Into_Base_Convert_Large_View_Row1_Value_TextboxParams;
            }
        }
        
        public virtual Enter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams Enter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams
        {
            get
            {
                if ((this.mEnter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams == null))
                {
                    this.mEnter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams = new Enter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams();
                }
                return this.mEnter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams;
            }
        }
        
        public virtual Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams
        {
            get
            {
                if ((this.mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams == null))
                {
                    this.mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams = new Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams();
                }
                return this.mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams;
            }
        }
        
        public virtual Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams
        {
            get
            {
                if ((this.mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams == null))
                {
                    this.mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams = new Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams();
                }
                return this.mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams;
            }
        }
        
        public virtual Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams
        {
            get
            {
                if ((this.mEnter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams == null))
                {
                    this.mEnter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams = new Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams();
                }
                return this.mEnter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams;
            }
        }
        
        public virtual Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams
        {
            get
            {
                if ((this.mEnter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams == null))
                {
                    this.mEnter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams = new Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams();
                }
                return this.mEnter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams;
            }
        }
        
        public virtual Enter_Text_Into_Workflow_Tests_OutPutTable_Row1_Value_Textbox_As_CodedUITestParams Enter_Text_Into_Workflow_Tests_OutPutTable_Row1_Value_Textbox_As_CodedUITestParams
        {
            get
            {
                if ((this.mEnter_Text_Into_Workflow_Tests_OutPutTable_Row1_Value_Textbox_As_CodedUITestParams == null))
                {
                    this.mEnter_Text_Into_Workflow_Tests_OutPutTable_Row1_Value_Textbox_As_CodedUITestParams = new Enter_Text_Into_Workflow_Tests_OutPutTable_Row1_Value_Textbox_As_CodedUITestParams();
                }
                return this.mEnter_Text_Into_Workflow_Tests_OutPutTable_Row1_Value_Textbox_As_CodedUITestParams;
            }
        }
        
        public virtual Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams
        {
            get
            {
                if ((this.mEnter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams == null))
                {
                    this.mEnter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams = new Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams();
                }
                return this.mEnter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams;
            }
        }
        
        public virtual Filter_variablesParams Filter_variablesParams
        {
            get
            {
                if ((this.mFilter_variablesParams == null))
                {
                    this.mFilter_variablesParams = new Filter_variablesParams();
                }
                return this.mFilter_variablesParams;
            }
        }
        
        public virtual Open_AggregateCalculate_Tool_large_viewParams Open_AggregateCalculate_Tool_large_viewParams
        {
            get
            {
                if ((this.mOpen_AggregateCalculate_Tool_large_viewParams == null))
                {
                    this.mOpen_AggregateCalculate_Tool_large_viewParams = new Open_AggregateCalculate_Tool_large_viewParams();
                }
                return this.mOpen_AggregateCalculate_Tool_large_viewParams;
            }
        }
        
        public virtual Open_Assign_Tool_Large_ViewParams Open_Assign_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Assign_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Assign_Tool_Large_ViewParams = new Open_Assign_Tool_Large_ViewParams();
                }
                return this.mOpen_Assign_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Assign_Tool_Qvi_Large_ViewParams Open_Assign_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Assign_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Assign_Tool_Qvi_Large_ViewParams = new Open_Assign_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Assign_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_AssignObject_Large_ToolParams Open_AssignObject_Large_ToolParams
        {
            get
            {
                if ((this.mOpen_AssignObject_Large_ToolParams == null))
                {
                    this.mOpen_AssignObject_Large_ToolParams = new Open_AssignObject_Large_ToolParams();
                }
                return this.mOpen_AssignObject_Large_ToolParams;
            }
        }
        
        public virtual Open_AssignObject_QVI_LargeViewParams Open_AssignObject_QVI_LargeViewParams
        {
            get
            {
                if ((this.mOpen_AssignObject_QVI_LargeViewParams == null))
                {
                    this.mOpen_AssignObject_QVI_LargeViewParams = new Open_AssignObject_QVI_LargeViewParams();
                }
                return this.mOpen_AssignObject_QVI_LargeViewParams;
            }
        }
        
        public virtual Open_Base_Conversion_Tool_Large_ViewParams Open_Base_Conversion_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Base_Conversion_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Base_Conversion_Tool_Large_ViewParams = new Open_Base_Conversion_Tool_Large_ViewParams();
                }
                return this.mOpen_Base_Conversion_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Base_Conversion_Tool_Qvi_Large_ViewParams Open_Base_Conversion_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Base_Conversion_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Base_Conversion_Tool_Qvi_Large_ViewParams = new Open_Base_Conversion_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Base_Conversion_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Calculate_Tool_Large_ViewParams Open_Calculate_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Calculate_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Calculate_Tool_Large_ViewParams = new Open_Calculate_Tool_Large_ViewParams();
                }
                return this.mOpen_Calculate_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Case_Conversion_Tool_Large_ViewParams Open_Case_Conversion_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Case_Conversion_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Case_Conversion_Tool_Large_ViewParams = new Open_Case_Conversion_Tool_Large_ViewParams();
                }
                return this.mOpen_Case_Conversion_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Case_Conversion_Tool_Qvi_Large_ViewParams Open_Case_Conversion_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Case_Conversion_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Case_Conversion_Tool_Qvi_Large_ViewParams = new Open_Case_Conversion_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Case_Conversion_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_CMD_Line_Tool_Large_ViewParams Open_CMD_Line_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_CMD_Line_Tool_Large_ViewParams == null))
                {
                    this.mOpen_CMD_Line_Tool_Large_ViewParams = new Open_CMD_Line_Tool_Large_ViewParams();
                }
                return this.mOpen_CMD_Line_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Copy_Tool_Large_ViewParams Open_Copy_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Copy_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Copy_Tool_Large_ViewParams = new Open_Copy_Tool_Large_ViewParams();
                }
                return this.mOpen_Copy_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Create_Tool_Large_ViewParams Open_Create_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Create_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Create_Tool_Large_ViewParams = new Open_Create_Tool_Large_ViewParams();
                }
                return this.mOpen_Create_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Data_Merge_Large_ViewParams Open_Data_Merge_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Data_Merge_Large_ViewParams == null))
                {
                    this.mOpen_Data_Merge_Large_ViewParams = new Open_Data_Merge_Large_ViewParams();
                }
                return this.mOpen_Data_Merge_Large_ViewParams;
            }
        }
        
        public virtual Open_Data_Merge_Tool_Qvi_Large_ViewParams Open_Data_Merge_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Data_Merge_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Data_Merge_Tool_Qvi_Large_ViewParams = new Open_Data_Merge_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Data_Merge_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Data_Split_Large_ViewParams Open_Data_Split_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Data_Split_Large_ViewParams == null))
                {
                    this.mOpen_Data_Split_Large_ViewParams = new Open_Data_Split_Large_ViewParams();
                }
                return this.mOpen_Data_Split_Large_ViewParams;
            }
        }
        
        public virtual Open_Data_Split_Tool_Qvi_Large_ViewParams Open_Data_Split_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Data_Split_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Data_Split_Tool_Qvi_Large_ViewParams = new Open_Data_Split_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Data_Split_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_DateTime_LargeViewParams Open_DateTime_LargeViewParams
        {
            get
            {
                if ((this.mOpen_DateTime_LargeViewParams == null))
                {
                    this.mOpen_DateTime_LargeViewParams = new Open_DateTime_LargeViewParams();
                }
                return this.mOpen_DateTime_LargeViewParams;
            }
        }
        
        public virtual Open_DateTimeDiff_LargeViewParams Open_DateTimeDiff_LargeViewParams
        {
            get
            {
                if ((this.mOpen_DateTimeDiff_LargeViewParams == null))
                {
                    this.mOpen_DateTimeDiff_LargeViewParams = new Open_DateTimeDiff_LargeViewParams();
                }
                return this.mOpen_DateTimeDiff_LargeViewParams;
            }
        }
        
        public virtual Open_Decision_Large_ViewParams Open_Decision_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Decision_Large_ViewParams == null))
                {
                    this.mOpen_Decision_Large_ViewParams = new Open_Decision_Large_ViewParams();
                }
                return this.mOpen_Decision_Large_ViewParams;
            }
        }
        
        public virtual Open_Delete_Tool_Large_ViewParams Open_Delete_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Delete_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Delete_Tool_Large_ViewParams = new Open_Delete_Tool_Large_ViewParams();
                }
                return this.mOpen_Delete_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_DeleteRecords_Large_ViewParams Open_DeleteRecords_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_DeleteRecords_Large_ViewParams == null))
                {
                    this.mOpen_DeleteRecords_Large_ViewParams = new Open_DeleteRecords_Large_ViewParams();
                }
                return this.mOpen_DeleteRecords_Large_ViewParams;
            }
        }
        
        public virtual Open_DeleteWeb_Tool_Large_ViewParams Open_DeleteWeb_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_DeleteWeb_Tool_Large_ViewParams == null))
                {
                    this.mOpen_DeleteWeb_Tool_Large_ViewParams = new Open_DeleteWeb_Tool_Large_ViewParams();
                }
                return this.mOpen_DeleteWeb_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_DotNet_DLL_Connector_Tool_Large_ViewParams Open_DotNet_DLL_Connector_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_DotNet_DLL_Connector_Tool_Large_ViewParams == null))
                {
                    this.mOpen_DotNet_DLL_Connector_Tool_Large_ViewParams = new Open_DotNet_DLL_Connector_Tool_Large_ViewParams();
                }
                return this.mOpen_DotNet_DLL_Connector_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Explorer_First_Item_Dependancies_With_Context_MenuParams Open_Explorer_First_Item_Dependancies_With_Context_MenuParams
        {
            get
            {
                if ((this.mOpen_Explorer_First_Item_Dependancies_With_Context_MenuParams == null))
                {
                    this.mOpen_Explorer_First_Item_Dependancies_With_Context_MenuParams = new Open_Explorer_First_Item_Dependancies_With_Context_MenuParams();
                }
                return this.mOpen_Explorer_First_Item_Dependancies_With_Context_MenuParams;
            }
        }
        
        public virtual Open_Explorer_First_Item_With_Context_MenuParams Open_Explorer_First_Item_With_Context_MenuParams
        {
            get
            {
                if ((this.mOpen_Explorer_First_Item_With_Context_MenuParams == null))
                {
                    this.mOpen_Explorer_First_Item_With_Context_MenuParams = new Open_Explorer_First_Item_With_Context_MenuParams();
                }
                return this.mOpen_Explorer_First_Item_With_Context_MenuParams;
            }
        }
        
        public virtual Open_Find_Index_Tool_Large_ViewParams Open_Find_Index_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Find_Index_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Find_Index_Tool_Large_ViewParams = new Open_Find_Index_Tool_Large_ViewParams();
                }
                return this.mOpen_Find_Index_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_ForEach_Large_ViewParams Open_ForEach_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_ForEach_Large_ViewParams == null))
                {
                    this.mOpen_ForEach_Large_ViewParams = new Open_ForEach_Large_ViewParams();
                }
                return this.mOpen_ForEach_Large_ViewParams;
            }
        }
        
        public virtual Open_GET_Web_Connector_Tool_Large_ViewParams Open_GET_Web_Connector_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_GET_Web_Connector_Tool_Large_ViewParams == null))
                {
                    this.mOpen_GET_Web_Connector_Tool_Large_ViewParams = new Open_GET_Web_Connector_Tool_Large_ViewParams();
                }
                return this.mOpen_GET_Web_Connector_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Javascript_Large_ViewParams Open_Javascript_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Javascript_Large_ViewParams == null))
                {
                    this.mOpen_Javascript_Large_ViewParams = new Open_Javascript_Large_ViewParams();
                }
                return this.mOpen_Javascript_Large_ViewParams;
            }
        }
        
        public virtual Open_Json_Tool_Large_ViewParams Open_Json_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Json_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Json_Tool_Large_ViewParams = new Open_Json_Tool_Large_ViewParams();
                }
                return this.mOpen_Json_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Json_Tool_Qvi_Large_ViewParams Open_Json_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Json_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Json_Tool_Qvi_Large_ViewParams = new Open_Json_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Json_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Length_Tool_Large_ViewParams Open_Length_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Length_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Length_Tool_Large_ViewParams = new Open_Length_Tool_Large_ViewParams();
                }
                return this.mOpen_Length_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Move_Tool_Large_ViewParams Open_Move_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Move_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Move_Tool_Large_ViewParams = new Open_Move_Tool_Large_ViewParams();
                }
                return this.mOpen_Move_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_NumberFormat_Toolbox_Large_ViewParams Open_NumberFormat_Toolbox_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_NumberFormat_Toolbox_Large_ViewParams == null))
                {
                    this.mOpen_NumberFormat_Toolbox_Large_ViewParams = new Open_NumberFormat_Toolbox_Large_ViewParams();
                }
                return this.mOpen_NumberFormat_Toolbox_Large_ViewParams;
            }
        }
        
        public virtual Open_ODBC_Tool_Large_ViewExpectedValues Open_ODBC_Tool_Large_ViewExpectedValues
        {
            get
            {
                if ((this.mOpen_ODBC_Tool_Large_ViewExpectedValues == null))
                {
                    this.mOpen_ODBC_Tool_Large_ViewExpectedValues = new Open_ODBC_Tool_Large_ViewExpectedValues();
                }
                return this.mOpen_ODBC_Tool_Large_ViewExpectedValues;
            }
        }
        
        public virtual Open_Oracle_Tool_Large_ViewExpectedValues Open_Oracle_Tool_Large_ViewExpectedValues
        {
            get
            {
                if ((this.mOpen_Oracle_Tool_Large_ViewExpectedValues == null))
                {
                    this.mOpen_Oracle_Tool_Large_ViewExpectedValues = new Open_Oracle_Tool_Large_ViewExpectedValues();
                }
                return this.mOpen_Oracle_Tool_Large_ViewExpectedValues;
            }
        }
        
        public virtual Open_Postgre_Tool_Large_ViewExpectedValues Open_Postgre_Tool_Large_ViewExpectedValues
        {
            get
            {
                if ((this.mOpen_Postgre_Tool_Large_ViewExpectedValues == null))
                {
                    this.mOpen_Postgre_Tool_Large_ViewExpectedValues = new Open_Postgre_Tool_Large_ViewExpectedValues();
                }
                return this.mOpen_Postgre_Tool_Large_ViewExpectedValues;
            }
        }
        
        public virtual Open_PostWeb_RequestTool_Large_ViewParams Open_PostWeb_RequestTool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_PostWeb_RequestTool_Large_ViewParams == null))
                {
                    this.mOpen_PostWeb_RequestTool_Large_ViewParams = new Open_PostWeb_RequestTool_Large_ViewParams();
                }
                return this.mOpen_PostWeb_RequestTool_Large_ViewParams;
            }
        }
        
        public virtual Open_Python_Large_ViewParams Open_Python_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Python_Large_ViewParams == null))
                {
                    this.mOpen_Python_Large_ViewParams = new Open_Python_Large_ViewParams();
                }
                return this.mOpen_Python_Large_ViewParams;
            }
        }
        
        public virtual Open_RabbitMqConsume_LargeViewParams Open_RabbitMqConsume_LargeViewParams
        {
            get
            {
                if ((this.mOpen_RabbitMqConsume_LargeViewParams == null))
                {
                    this.mOpen_RabbitMqConsume_LargeViewParams = new Open_RabbitMqConsume_LargeViewParams();
                }
                return this.mOpen_RabbitMqConsume_LargeViewParams;
            }
        }
        
        public virtual Open_RabbitMqPublish_LargeViewParams Open_RabbitMqPublish_LargeViewParams
        {
            get
            {
                if ((this.mOpen_RabbitMqPublish_LargeViewParams == null))
                {
                    this.mOpen_RabbitMqPublish_LargeViewParams = new Open_RabbitMqPublish_LargeViewParams();
                }
                return this.mOpen_RabbitMqPublish_LargeViewParams;
            }
        }
        
        public virtual Open_Random_Large_ToolParams Open_Random_Large_ToolParams
        {
            get
            {
                if ((this.mOpen_Random_Large_ToolParams == null))
                {
                    this.mOpen_Random_Large_ToolParams = new Open_Random_Large_ToolParams();
                }
                return this.mOpen_Random_Large_ToolParams;
            }
        }
        
        public virtual Open_Read_File_Tool_Large_ViewParams Open_Read_File_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Read_File_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Read_File_Tool_Large_ViewParams = new Open_Read_File_Tool_Large_ViewParams();
                }
                return this.mOpen_Read_File_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Read_Folder_Tool_Large_ViewParams Open_Read_Folder_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Read_Folder_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Read_Folder_Tool_Large_ViewParams = new Open_Read_Folder_Tool_Large_ViewParams();
                }
                return this.mOpen_Read_Folder_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Rename_Tool_Large_ViewParams Open_Rename_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Rename_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Rename_Tool_Large_ViewParams = new Open_Rename_Tool_Large_ViewParams();
                }
                return this.mOpen_Rename_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Replace_Tool_Large_ViewParams Open_Replace_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Replace_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Replace_Tool_Large_ViewParams = new Open_Replace_Tool_Large_ViewParams();
                }
                return this.mOpen_Replace_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Ruby_Large_ViewParams Open_Ruby_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Ruby_Large_ViewParams == null))
                {
                    this.mOpen_Ruby_Large_ViewParams = new Open_Ruby_Large_ViewParams();
                }
                return this.mOpen_Ruby_Large_ViewParams;
            }
        }
        
        public virtual Open_Selectandapply_Large_ViewParams Open_Selectandapply_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Selectandapply_Large_ViewParams == null))
                {
                    this.mOpen_Selectandapply_Large_ViewParams = new Open_Selectandapply_Large_ViewParams();
                }
                return this.mOpen_Selectandapply_Large_ViewParams;
            }
        }
        
        public virtual Open_Sequence_Large_tool_ViewParams Open_Sequence_Large_tool_ViewParams
        {
            get
            {
                if ((this.mOpen_Sequence_Large_tool_ViewParams == null))
                {
                    this.mOpen_Sequence_Large_tool_ViewParams = new Open_Sequence_Large_tool_ViewParams();
                }
                return this.mOpen_Sequence_Large_tool_ViewParams;
            }
        }
        
        public virtual Open_SMTP_Email_Tool_Large_ViewParams Open_SMTP_Email_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_SMTP_Email_Tool_Large_ViewParams == null))
                {
                    this.mOpen_SMTP_Email_Tool_Large_ViewParams = new Open_SMTP_Email_Tool_Large_ViewParams();
                }
                return this.mOpen_SMTP_Email_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_SQL_Bulk_Insert_Tool_Large_ViewParams Open_SQL_Bulk_Insert_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_SQL_Bulk_Insert_Tool_Large_ViewParams == null))
                {
                    this.mOpen_SQL_Bulk_Insert_Tool_Large_ViewParams = new Open_SQL_Bulk_Insert_Tool_Large_ViewParams();
                }
                return this.mOpen_SQL_Bulk_Insert_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams = new Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_SQL_Large_View_FromContextMenuParams Open_SQL_Large_View_FromContextMenuParams
        {
            get
            {
                if ((this.mOpen_SQL_Large_View_FromContextMenuParams == null))
                {
                    this.mOpen_SQL_Large_View_FromContextMenuParams = new Open_SQL_Large_View_FromContextMenuParams();
                }
                return this.mOpen_SQL_Large_View_FromContextMenuParams;
            }
        }
        
        public virtual Open_Sql_Server_Tool_Large_ViewExpectedValues Open_Sql_Server_Tool_Large_ViewExpectedValues
        {
            get
            {
                if ((this.mOpen_Sql_Server_Tool_Large_ViewExpectedValues == null))
                {
                    this.mOpen_Sql_Server_Tool_Large_ViewExpectedValues = new Open_Sql_Server_Tool_Large_ViewExpectedValues();
                }
                return this.mOpen_Sql_Server_Tool_Large_ViewExpectedValues;
            }
        }
        
        public virtual Open_Switch_Tool_Large_ViewParams Open_Switch_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Switch_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Switch_Tool_Large_ViewParams = new Open_Switch_Tool_Large_ViewParams();
                }
                return this.mOpen_Switch_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_System_Information_Tool_Large_ViewParams Open_System_Information_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_System_Information_Tool_Large_ViewParams == null))
                {
                    this.mOpen_System_Information_Tool_Large_ViewParams = new Open_System_Information_Tool_Large_ViewParams();
                }
                return this.mOpen_System_Information_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_System_Information_Tool_Qvi_Large_ViewParams Open_System_Information_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_System_Information_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_System_Information_Tool_Qvi_Large_ViewParams = new Open_System_Information_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_System_Information_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Unzip_Tool_Large_ViewParams Open_Unzip_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Unzip_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Unzip_Tool_Large_ViewParams = new Open_Unzip_Tool_Large_ViewParams();
                }
                return this.mOpen_Unzip_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_WebRequest_LargeViewParams Open_WebRequest_LargeViewParams
        {
            get
            {
                if ((this.mOpen_WebRequest_LargeViewParams == null))
                {
                    this.mOpen_WebRequest_LargeViewParams = new Open_WebRequest_LargeViewParams();
                }
                return this.mOpen_WebRequest_LargeViewParams;
            }
        }
        
        public virtual Open_Write_File_Tool_Large_ViewParams Open_Write_File_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Write_File_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Write_File_Tool_Large_ViewParams = new Open_Write_File_Tool_Large_ViewParams();
                }
                return this.mOpen_Write_File_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Xpath_Tool_Large_ViewParams Open_Xpath_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Xpath_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Xpath_Tool_Large_ViewParams = new Open_Xpath_Tool_Large_ViewParams();
                }
                return this.mOpen_Xpath_Tool_Large_ViewParams;
            }
        }
        
        public virtual Open_Xpath_Tool_Qvi_Large_ViewParams Open_Xpath_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Xpath_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Xpath_Tool_Qvi_Large_ViewParams = new Open_Xpath_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Xpath_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Zip_Tool_Large_ViewParams Open_Zip_Tool_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Zip_Tool_Large_ViewParams == null))
                {
                    this.mOpen_Zip_Tool_Large_ViewParams = new Open_Zip_Tool_Large_ViewParams();
                }
                return this.mOpen_Zip_Tool_Large_ViewParams;
            }
        }
        
        public virtual Press_F6Params Press_F6Params
        {
            get
            {
                if ((this.mPress_F6Params == null))
                {
                    this.mPress_F6Params = new Press_F6Params();
                }
                return this.mPress_F6Params;
            }
        }
        
        public virtual PressF11_EnterFullScreenParams PressF11_EnterFullScreenParams
        {
            get
            {
                if ((this.mPressF11_EnterFullScreenParams == null))
                {
                    this.mPressF11_EnterFullScreenParams = new PressF11_EnterFullScreenParams();
                }
                return this.mPressF11_EnterFullScreenParams;
            }
        }
        
        public virtual RabbitMqAssertsExpectedValues RabbitMqAssertsExpectedValues
        {
            get
            {
                if ((this.mRabbitMqAssertsExpectedValues == null))
                {
                    this.mRabbitMqAssertsExpectedValues = new RabbitMqAssertsExpectedValues();
                }
                return this.mRabbitMqAssertsExpectedValues;
            }
        }
        
        public virtual Remove_WorkflowName_From_Save_DialogParams Remove_WorkflowName_From_Save_DialogParams
        {
            get
            {
                if ((this.mRemove_WorkflowName_From_Save_DialogParams == null))
                {
                    this.mRemove_WorkflowName_From_Save_DialogParams = new Remove_WorkflowName_From_Save_DialogParams();
                }
                return this.mRemove_WorkflowName_From_Save_DialogParams;
            }
        }
        
        public virtual Rename_LocalWorkflow_To_SecodWorkFlowParams Rename_LocalWorkflow_To_SecodWorkFlowParams
        {
            get
            {
                if ((this.mRename_LocalWorkflow_To_SecodWorkFlowParams == null))
                {
                    this.mRename_LocalWorkflow_To_SecodWorkFlowParams = new Rename_LocalWorkflow_To_SecodWorkFlowParams();
                }
                return this.mRename_LocalWorkflow_To_SecodWorkFlowParams;
            }
        }
        
        public virtual RightClick_Explorer_Localhost_First_ItemParams RightClick_Explorer_Localhost_First_ItemParams
        {
            get
            {
                if ((this.mRightClick_Explorer_Localhost_First_ItemParams == null))
                {
                    this.mRightClick_Explorer_Localhost_First_ItemParams = new RightClick_Explorer_Localhost_First_ItemParams();
                }
                return this.mRightClick_Explorer_Localhost_First_ItemParams;
            }
        }
        
        public virtual Search_And_Select_DiceRollParams Search_And_Select_DiceRollParams
        {
            get
            {
                if ((this.mSearch_And_Select_DiceRollParams == null))
                {
                    this.mSearch_And_Select_DiceRollParams = new Search_And_Select_DiceRollParams();
                }
                return this.mSearch_And_Select_DiceRollParams;
            }
        }
        
        public virtual Search_And_Select_HelloWolrdParams Search_And_Select_HelloWolrdParams
        {
            get
            {
                if ((this.mSearch_And_Select_HelloWolrdParams == null))
                {
                    this.mSearch_And_Select_HelloWolrdParams = new Search_And_Select_HelloWolrdParams();
                }
                return this.mSearch_And_Select_HelloWolrdParams;
            }
        }
        
        public virtual Select_Action_From_PostgreToolParams Select_Action_From_PostgreToolParams
        {
            get
            {
                if ((this.mSelect_Action_From_PostgreToolParams == null))
                {
                    this.mSelect_Action_From_PostgreToolParams = new Select_Action_From_PostgreToolParams();
                }
                return this.mSelect_Action_From_PostgreToolParams;
            }
        }
        
        public virtual Select_Delete_FromExplorerContextMenuParams Select_Delete_FromExplorerContextMenuParams
        {
            get
            {
                if ((this.mSelect_Delete_FromExplorerContextMenuParams == null))
                {
                    this.mSelect_Delete_FromExplorerContextMenuParams = new Select_Delete_FromExplorerContextMenuParams();
                }
                return this.mSelect_Delete_FromExplorerContextMenuParams;
            }
        }
        
        public virtual Select_Deploy_FromExplorerContextMenuParams Select_Deploy_FromExplorerContextMenuParams
        {
            get
            {
                if ((this.mSelect_Deploy_FromExplorerContextMenuParams == null))
                {
                    this.mSelect_Deploy_FromExplorerContextMenuParams = new Select_Deploy_FromExplorerContextMenuParams();
                }
                return this.mSelect_Deploy_FromExplorerContextMenuParams;
            }
        }
        
        public virtual Select_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams Select_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams
        {
            get
            {
                if ((this.mSelect_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams == null))
                {
                    this.mSelect_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams = new Select_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams();
                }
                return this.mSelect_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams;
            }
        }
        
        public virtual Select_FirstItem_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues Select_FirstItem_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues
        {
            get
            {
                if ((this.mSelect_FirstItem_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues == null))
                {
                    this.mSelect_FirstItem_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues = new Select_FirstItem_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues();
                }
                return this.mSelect_FirstItem_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues;
            }
        }
        
        public virtual Select_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues Select_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues
        {
            get
            {
                if ((this.mSelect_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues == null))
                {
                    this.mSelect_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues = new Select_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues();
                }
                return this.mSelect_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues;
            }
        }
        
        public virtual Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams
        {
            get
            {
                if ((this.mSelect_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams == null))
                {
                    this.mSelect_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams = new Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams();
                }
                return this.mSelect_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams;
            }
        }
        
        public virtual Select_Letters_From_Random_Type_ComboboxParams Select_Letters_From_Random_Type_ComboboxParams
        {
            get
            {
                if ((this.mSelect_Letters_From_Random_Type_ComboboxParams == null))
                {
                    this.mSelect_Letters_From_Random_Type_ComboboxParams = new Select_Letters_From_Random_Type_ComboboxParams();
                }
                return this.mSelect_Letters_From_Random_Type_ComboboxParams;
            }
        }
        
        public virtual Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams
        {
            get
            {
                if ((this.mSelect_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams == null))
                {
                    this.mSelect_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams = new Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams();
                }
                return this.mSelect_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams;
            }
        }
        
        public virtual Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams
        {
            get
            {
                if ((this.mSelect_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams == null))
                {
                    this.mSelect_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams = new Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams();
                }
                return this.mSelect_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams;
            }
        }
        
        public virtual Select_NewDatabaseSource_FromSqlServerToolParams Select_NewDatabaseSource_FromSqlServerToolParams
        {
            get
            {
                if ((this.mSelect_NewDatabaseSource_FromSqlServerToolParams == null))
                {
                    this.mSelect_NewDatabaseSource_FromSqlServerToolParams = new Select_NewDatabaseSource_FromSqlServerToolParams();
                }
                return this.mSelect_NewDatabaseSource_FromSqlServerToolParams;
            }
        }
        
        public virtual Select_NewEmailSource_FromExplorerContextMenuParams Select_NewEmailSource_FromExplorerContextMenuParams
        {
            get
            {
                if ((this.mSelect_NewEmailSource_FromExplorerContextMenuParams == null))
                {
                    this.mSelect_NewEmailSource_FromExplorerContextMenuParams = new Select_NewEmailSource_FromExplorerContextMenuParams();
                }
                return this.mSelect_NewEmailSource_FromExplorerContextMenuParams;
            }
        }
        
        public virtual Select_NewSharepointSource_FromServer_LookupParams Select_NewSharepointSource_FromServer_LookupParams
        {
            get
            {
                if ((this.mSelect_NewSharepointSource_FromServer_LookupParams == null))
                {
                    this.mSelect_NewSharepointSource_FromServer_LookupParams = new Select_NewSharepointSource_FromServer_LookupParams();
                }
                return this.mSelect_NewSharepointSource_FromServer_LookupParams;
            }
        }
        
        public virtual Select_NewSharepointSource_FromServer_Lookup_On_SharepointCopyFile_ToolParams Select_NewSharepointSource_FromServer_Lookup_On_SharepointCopyFile_ToolParams
        {
            get
            {
                if ((this.mSelect_NewSharepointSource_FromServer_Lookup_On_SharepointCopyFile_ToolParams == null))
                {
                    this.mSelect_NewSharepointSource_FromServer_Lookup_On_SharepointCopyFile_ToolParams = new Select_NewSharepointSource_FromServer_Lookup_On_SharepointCopyFile_ToolParams();
                }
                return this.mSelect_NewSharepointSource_FromServer_Lookup_On_SharepointCopyFile_ToolParams;
            }
        }
        
        public virtual Select_NewSharepointSource_FromServer_Lookup_On_SharepointMoveFile_ToolParams Select_NewSharepointSource_FromServer_Lookup_On_SharepointMoveFile_ToolParams
        {
            get
            {
                if ((this.mSelect_NewSharepointSource_FromServer_Lookup_On_SharepointMoveFile_ToolParams == null))
                {
                    this.mSelect_NewSharepointSource_FromServer_Lookup_On_SharepointMoveFile_ToolParams = new Select_NewSharepointSource_FromServer_Lookup_On_SharepointMoveFile_ToolParams();
                }
                return this.mSelect_NewSharepointSource_FromServer_Lookup_On_SharepointMoveFile_ToolParams;
            }
        }
        
        public virtual Select_NewSharepointSource_FromServer_Lookup_On_SharepointUpload_ToolParams Select_NewSharepointSource_FromServer_Lookup_On_SharepointUpload_ToolParams
        {
            get
            {
                if ((this.mSelect_NewSharepointSource_FromServer_Lookup_On_SharepointUpload_ToolParams == null))
                {
                    this.mSelect_NewSharepointSource_FromServer_Lookup_On_SharepointUpload_ToolParams = new Select_NewSharepointSource_FromServer_Lookup_On_SharepointUpload_ToolParams();
                }
                return this.mSelect_NewSharepointSource_FromServer_Lookup_On_SharepointUpload_ToolParams;
            }
        }
        
        public virtual Select_NewWorkFlowService_From_ContextMenuParams Select_NewWorkFlowService_From_ContextMenuParams
        {
            get
            {
                if ((this.mSelect_NewWorkFlowService_From_ContextMenuParams == null))
                {
                    this.mSelect_NewWorkFlowService_From_ContextMenuParams = new Select_NewWorkFlowService_From_ContextMenuParams();
                }
                return this.mSelect_NewWorkFlowService_From_ContextMenuParams;
            }
        }
        
        public virtual Select_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues Select_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues
        {
            get
            {
                if ((this.mSelect_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues == null))
                {
                    this.mSelect_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues = new Select_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues();
                }
                return this.mSelect_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues;
            }
        }
        
        public virtual Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams
        {
            get
            {
                if ((this.mSelect_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams == null))
                {
                    this.mSelect_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams = new Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams();
                }
                return this.mSelect_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams;
            }
        }
        
        public virtual Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams
        {
            get
            {
                if ((this.mSelect_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams == null))
                {
                    this.mSelect_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams = new Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams();
                }
                return this.mSelect_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams;
            }
        }
        
        public virtual Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams
        {
            get
            {
                if ((this.mSelect_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams == null))
                {
                    this.mSelect_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams = new Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams();
                }
                return this.mSelect_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams;
            }
        }
        
        public virtual Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues
        {
            get
            {
                if ((this.mSelect_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues == null))
                {
                    this.mSelect_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues = new Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues();
                }
                return this.mSelect_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues;
            }
        }
        
        public virtual Select_SharepointTestServer_From_SharepointRead_ToolParams Select_SharepointTestServer_From_SharepointRead_ToolParams
        {
            get
            {
                if ((this.mSelect_SharepointTestServer_From_SharepointRead_ToolParams == null))
                {
                    this.mSelect_SharepointTestServer_From_SharepointRead_ToolParams = new Select_SharepointTestServer_From_SharepointRead_ToolParams();
                }
                return this.mSelect_SharepointTestServer_From_SharepointRead_ToolParams;
            }
        }
        
        public virtual Select_SharepointTestServer_From_SharepointUpdate_ToolParams Select_SharepointTestServer_From_SharepointUpdate_ToolParams
        {
            get
            {
                if ((this.mSelect_SharepointTestServer_From_SharepointUpdate_ToolParams == null))
                {
                    this.mSelect_SharepointTestServer_From_SharepointUpdate_ToolParams = new Select_SharepointTestServer_From_SharepointUpdate_ToolParams();
                }
                return this.mSelect_SharepointTestServer_From_SharepointUpdate_ToolParams;
            }
        }
        
        public virtual Select_Source_From_DotnetToolParams Select_Source_From_DotnetToolParams
        {
            get
            {
                if ((this.mSelect_Source_From_DotnetToolParams == null))
                {
                    this.mSelect_Source_From_DotnetToolParams = new Select_Source_From_DotnetToolParams();
                }
                return this.mSelect_Source_From_DotnetToolParams;
            }
        }
        
        public virtual Select_Source_From_PostgreToolParams Select_Source_From_PostgreToolParams
        {
            get
            {
                if ((this.mSelect_Source_From_PostgreToolParams == null))
                {
                    this.mSelect_Source_From_PostgreToolParams = new Select_Source_From_PostgreToolParams();
                }
                return this.mSelect_Source_From_PostgreToolParams;
            }
        }
        
        public virtual Select_SystemObject_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues Select_SystemObject_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues
        {
            get
            {
                if ((this.mSelect_SystemObject_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues == null))
                {
                    this.mSelect_SystemObject_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues = new Select_SystemObject_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues();
                }
                return this.mSelect_SystemObject_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues;
            }
        }
        
        public virtual Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues
        {
            get
            {
                if ((this.mSelect_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues == null))
                {
                    this.mSelect_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues = new Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues();
                }
                return this.mSelect_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues;
            }
        }
        
        public virtual Select_Tests_From_Context_MenuParams Select_Tests_From_Context_MenuParams
        {
            get
            {
                if ((this.mSelect_Tests_From_Context_MenuParams == null))
                {
                    this.mSelect_Tests_From_Context_MenuParams = new Select_Tests_From_Context_MenuParams();
                }
                return this.mSelect_Tests_From_Context_MenuParams;
            }
        }
        
        public virtual Select_ToString_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues Select_ToString_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues
        {
            get
            {
                if ((this.mSelect_ToString_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues == null))
                {
                    this.mSelect_ToString_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues = new Select_ToString_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues();
                }
                return this.mSelect_ToString_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues;
            }
        }
        
        public virtual Select_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams Select_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams
        {
            get
            {
                if ((this.mSelect_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams == null))
                {
                    this.mSelect_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams = new Select_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams();
                }
                return this.mSelect_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams;
            }
        }
        
        public virtual Select_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams Select_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams
        {
            get
            {
                if ((this.mSelect_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams == null))
                {
                    this.mSelect_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams = new Select_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams();
                }
                return this.mSelect_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams;
            }
        }
        
        public virtual Select_UITestingSource_From_Web_Server_Large_View_Source_ComboboxParams Select_UITestingSource_From_Web_Server_Large_View_Source_ComboboxParams
        {
            get
            {
                if ((this.mSelect_UITestingSource_From_Web_Server_Large_View_Source_ComboboxParams == null))
                {
                    this.mSelect_UITestingSource_From_Web_Server_Large_View_Source_ComboboxParams = new Select_UITestingSource_From_Web_Server_Large_View_Source_ComboboxParams();
                }
                return this.mSelect_UITestingSource_From_Web_Server_Large_View_Source_ComboboxParams;
            }
        }
        
        public virtual Select_User_From_RunTestAsParams Select_User_From_RunTestAsParams
        {
            get
            {
                if ((this.mSelect_User_From_RunTestAsParams == null))
                {
                    this.mSelect_User_From_RunTestAsParams = new Select_User_From_RunTestAsParams();
                }
                return this.mSelect_User_From_RunTestAsParams;
            }
        }
        
        public virtual Show_Explorer_First_Item_Tests_With_Context_MenuParams Show_Explorer_First_Item_Tests_With_Context_MenuParams
        {
            get
            {
                if ((this.mShow_Explorer_First_Item_Tests_With_Context_MenuParams == null))
                {
                    this.mShow_Explorer_First_Item_Tests_With_Context_MenuParams = new Show_Explorer_First_Item_Tests_With_Context_MenuParams();
                }
                return this.mShow_Explorer_First_Item_Tests_With_Context_MenuParams;
            }
        }
        
        public virtual Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues
        {
            get
            {
                if ((this.mType_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues == null))
                {
                    this.mType_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues = new Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues();
                }
                return this.mType_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues;
            }
        }
        
        public virtual Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues
        {
            get
            {
                if ((this.mType_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues == null))
                {
                    this.mType_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues = new Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues();
                }
                return this.mType_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues;
            }
        }
        
        public virtual Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams
        {
            get
            {
                if ((this.mType_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams == null))
                {
                    this.mType_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams = new Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams();
                }
                return this.mType_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams;
            }
        }
        
        public virtual Type_TestSite_into_Web_Source_Wizard_Address_TextboxParams Type_TestSite_into_Web_Source_Wizard_Address_TextboxParams
        {
            get
            {
                if ((this.mType_TestSite_into_Web_Source_Wizard_Address_TextboxParams == null))
                {
                    this.mType_TestSite_into_Web_Source_Wizard_Address_TextboxParams = new Type_TestSite_into_Web_Source_Wizard_Address_TextboxParams();
                }
                return this.mType_TestSite_into_Web_Source_Wizard_Address_TextboxParams;
            }
        }
        
        public MainStudioWindow MainStudioWindow
        {
            get
            {
                if ((this.mMainStudioWindow == null))
                {
                    this.mMainStudioWindow = new MainStudioWindow();
                }
                return this.mMainStudioWindow;
            }
        }
        
        public MessageBoxWindow MessageBoxWindow
        {
            get
            {
                if ((this.mMessageBoxWindow == null))
                {
                    this.mMessageBoxWindow = new MessageBoxWindow();
                }
                return this.mMessageBoxWindow;
            }
        }
        
        public SaveDialogWindow SaveDialogWindow
        {
            get
            {
                if ((this.mSaveDialogWindow == null))
                {
                    this.mSaveDialogWindow = new SaveDialogWindow();
                }
                return this.mSaveDialogWindow;
            }
        }
        
        public SplashPageWindow SplashPageWindow
        {
            get
            {
                if ((this.mSplashPageWindow == null))
                {
                    this.mSplashPageWindow = new SplashPageWindow();
                }
                return this.mSplashPageWindow;
            }
        }
        
        public DecisionOrSwitchDialog DecisionOrSwitchDialog
        {
            get
            {
                if ((this.mDecisionOrSwitchDialog == null))
                {
                    this.mDecisionOrSwitchDialog = new DecisionOrSwitchDialog();
                }
                return this.mDecisionOrSwitchDialog;
            }
        }
        
        public SelectWindowsGroupDialog SelectWindowsGroupDialog
        {
            get
            {
                if ((this.mSelectWindowsGroupDialog == null))
                {
                    this.mSelectWindowsGroupDialog = new SelectWindowsGroupDialog();
                }
                return this.mSelectWindowsGroupDialog;
            }
        }
        
        public ServicePickerDialog ServicePickerDialog
        {
            get
            {
                if ((this.mServicePickerDialog == null))
                {
                    this.mServicePickerDialog = new ServicePickerDialog();
                }
                return this.mServicePickerDialog;
            }
        }
        
        public SwitchCaseDialog SwitchCaseDialog
        {
            get
            {
                if ((this.mSwitchCaseDialog == null))
                {
                    this.mSwitchCaseDialog = new SwitchCaseDialog();
                }
                return this.mSwitchCaseDialog;
            }
        }
        
        public UIWarewolfDEV2SANELEMTWindow UIWarewolfDEV2SANELEMTWindow
        {
            get
            {
                if ((this.mUIWarewolfDEV2SANELEMTWindow == null))
                {
                    this.mUIWarewolfDEV2SANELEMTWindow = new UIWarewolfDEV2SANELEMTWindow();
                }
                return this.mUIWarewolfDEV2SANELEMTWindow;
            }
        }
        #endregion
        
        #region Fields
        private Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_1Params mAssign_Value_To_Variable_With_Assign_Tool_Small_View_Row_1Params;
        
        private Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_2Params mAssign_Value_To_Variable_With_Assign_Tool_Small_View_Row_2Params;
        
        private Check_Public_AdministratorParams mCheck_Public_AdministratorParams;
        
        private Click_AddNew_Web_Source_From_PostWeb_toolParams mClick_AddNew_Web_Source_From_PostWeb_toolParams;
        
        private Click_AddNew_Web_Source_From_toolParams mClick_AddNew_Web_Source_From_toolParams;
        
        private Click_Assign_Tool_CollapseAllParams mClick_Assign_Tool_CollapseAllParams;
        
        private Click_Assign_Tool_ExpandAllParams mClick_Assign_Tool_ExpandAllParams;
        
        private Click_Assign_Tool_Large_View_Done_ButtonParams mClick_Assign_Tool_Large_View_Done_ButtonParams;
        
        private Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams mClick_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams;
        
        private Click_Base_Convert_Large_View_Done_ButtonParams mClick_Base_Convert_Large_View_Done_ButtonParams;
        
        private Click_Calculate_Large_View_Done_ButtonParams mClick_Calculate_Large_View_Done_ButtonParams;
        
        private Click_Cancel_DebugInput_WindowParams mClick_Cancel_DebugInput_WindowParams;
        
        private Click_Close_Deploy_Tab_ButtonParams mClick_Close_Deploy_Tab_ButtonParams;
        
        private Click_Close_Settings_Tab_ButtonParams mClick_Close_Settings_Tab_ButtonParams;
        
        private Click_Close_Workflow_Tab_ButtonParams mClick_Close_Workflow_Tab_ButtonParams;
        
        private Click_ConfigureSetting_From_MenuParams mClick_ConfigureSetting_From_MenuParams;
        
        private Click_Debug_Output_Assign_CellParams mClick_Debug_Output_Assign_CellParams;
        
        private Click_Debug_Output_BaseConvert_CellParams mClick_Debug_Output_BaseConvert_CellParams;
        
        private Click_Debug_Output_Calculate_CellParams mClick_Debug_Output_Calculate_CellParams;
        
        private Click_Debug_Output_Workflow1_NameParams mClick_Debug_Output_Workflow1_NameParams;
        
        private Click_DebugInput_Debug_ButtonParams mClick_DebugInput_Debug_ButtonParams;
        
        private Click_DebugInput_ViewInBrowser_ButtonParams mClick_DebugInput_ViewInBrowser_ButtonParams;
        
        private Click_Decision_Dialog_Done_ButtonParams mClick_Decision_Dialog_Done_ButtonParams;
        
        private Click_DeleteWeb_Generate_OutputsParams mClick_DeleteWeb_Generate_OutputsParams;
        
        private Click_Deploy_Tab_Destination_Server_ComboboxParams mClick_Deploy_Tab_Destination_Server_ComboboxParams;
        
        private Click_Deploy_Tab_Source_Server_ComboboxParams mClick_Deploy_Tab_Source_Server_ComboboxParams;
        
        private Click_DotNet_DLL_Large_View_Done_ButtonParams mClick_DotNet_DLL_Large_View_Done_ButtonParams;
        
        private Click_Duplicate_From_Duplicate_DialogParams mClick_Duplicate_From_Duplicate_DialogParams;
        
        private Click_EmailSource_TestConnection_ButtonParams mClick_EmailSource_TestConnection_ButtonParams;
        
        private Click_ExpandAndStepIn_NestedWorkflowParams mClick_ExpandAndStepIn_NestedWorkflowParams;
        
        private Click_Explorer_Filter_Clear_ButtonParams mClick_Explorer_Filter_Clear_ButtonParams;
        
        private Click_Explorer_RemoteServer_Connect_ButtonParams mClick_Explorer_RemoteServer_Connect_ButtonParams;
        
        private Click_First_Recordset_Input_CheckboxParams mClick_First_Recordset_Input_CheckboxParams;
        
        private Click_GET_Web_Large_View_Done_ButtonParams mClick_GET_Web_Large_View_Done_ButtonParams;
        
        private Click_GET_Web_Large_View_Done_Button_With_Invalid_Large_ViewParams mClick_GET_Web_Large_View_Done_Button_With_Invalid_Large_ViewParams;
        
        private Click_GET_Web_Large_View_Generate_OutputsExpectedValues mClick_GET_Web_Large_View_Generate_OutputsExpectedValues;
        
        private Click_HTTP_Delete_Web_Tool_New_ButtonParams mClick_HTTP_Delete_Web_Tool_New_ButtonParams;
        
        private Click_HTTP_Post_Web_Tool_New_ButtonParams mClick_HTTP_Post_Web_Tool_New_ButtonParams;
        
        private Click_MessageBox_YesParams mClick_MessageBox_YesParams;
        
        private Click_NewPluginSource_Ribbon_ButtonParams mClick_NewPluginSource_Ribbon_ButtonParams;
        
        private Click_NewSource_Button_FromODBC_ToolParams mClick_NewSource_Button_FromODBC_ToolParams;
        
        private Click_NewSource_Button_FromOracle_ToolParams mClick_NewSource_Button_FromOracle_ToolParams;
        
        private Click_NewVersion_buttonExpectedValues mClick_NewVersion_buttonExpectedValues;
        
        private Click_Output_OnRecordset_InVariableListParams mClick_Output_OnRecordset_InVariableListParams;
        
        private Click_Output_OnVariable_InVariableListParams mClick_Output_OnVariable_InVariableListParams;
        
        private Click_Reset_Perfomance_CounterParams mClick_Reset_Perfomance_CounterParams;
        
        private Click_RunDebug_buttonParams mClick_RunDebug_buttonParams;
        
        private Click_Save_Ribbon_Button_to_Open_Save_DialogParams mClick_Save_Ribbon_Button_to_Open_Save_DialogParams;
        
        private Click_Scheduler_Create_New_Task_Ribbon_ButtonParams mClick_Scheduler_Create_New_Task_Ribbon_ButtonParams;
        
        private Click_Scheduler_Disable_Task_Radio_ButtonParams mClick_Scheduler_Disable_Task_Radio_ButtonParams;
        
        private Click_Scheduler_Enable_Task_Radio_ButtonParams mClick_Scheduler_Enable_Task_Radio_ButtonParams;
        
        private Click_Scheduler_RunTaskParams mClick_Scheduler_RunTaskParams;
        
        private Click_Select_Resource_Button_From_Resource_PermissionsParams mClick_Select_Resource_Button_From_Resource_PermissionsParams;
        
        private Click_Select_Windows_Group_Cancel_ButtonParams mClick_Select_Windows_Group_Cancel_ButtonParams;
        
        private Click_Server_Source_Wizard_Address_Protocol_DropdownParams mClick_Server_Source_Wizard_Address_Protocol_DropdownParams;
        
        private Click_Server_Source_Wizard_Test_Connection_ButtonParams mClick_Server_Source_Wizard_Test_Connection_ButtonParams;
        
        private Click_Show_Dependencies_In_Explorer_Context_MenuParams mClick_Show_Dependencies_In_Explorer_Context_MenuParams;
        
        private Click_SQL_Server_Large_View_Done_ButtonExpectedValues mClick_SQL_Server_Large_View_Done_ButtonExpectedValues;
        
        private Click_SQL_Server_Large_View_Generate_OutputsExpectedValues mClick_SQL_Server_Large_View_Generate_OutputsExpectedValues;
        
        private Click_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues mClick_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues;
        
        private Click_Switch_Dialog_Done_ButtonParams mClick_Switch_Dialog_Done_ButtonParams;
        
        private Click_UpdateDuplicateRelationshipsParams mClick_UpdateDuplicateRelationshipsParams;
        
        private Click_UserButton_OnSharepointSourceParams mClick_UserButton_OnSharepointSourceParams;
        
        private Click_Variable_IsInputParams mClick_Variable_IsInputParams;
        
        private Click_VariableList_Recordset_Row1_IsInputCheckboxParams mClick_VariableList_Recordset_Row1_IsInputCheckboxParams;
        
        private Click_VariableList_Scalar_Row1_IsInputCheckboxParams mClick_VariableList_Scalar_Row1_IsInputCheckboxParams;
        
        private Click_Workflow_CollapseAllParams mClick_Workflow_CollapseAllParams;
        
        private Click_Workflow_ExpandAllParams mClick_Workflow_ExpandAllParams;
        
        private Create_SubFolder_In_Folder1Params mCreate_SubFolder_In_Folder1Params;
        
        private Drag_DeleteWeb_Toolbox_Onto_Workflow_SurfaceParams mDrag_DeleteWeb_Toolbox_Onto_Workflow_SurfaceParams;
        
        private Drag_Dice_Onto_Dice_On_The_DesignSurfaceParams mDrag_Dice_Onto_Dice_On_The_DesignSurfaceParams;
        
        private Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams mDrag_DotNet_DLL_Connector_Onto_DesignSurfaceParams;
        
        private Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams mDrag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams;
        
        private Drag_Explorer_Localhost_First_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams mDrag_Explorer_Localhost_First_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams;
        
        private Drag_Explorer_Localhost_Second_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams mDrag_Explorer_Localhost_Second_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams;
        
        private Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams mDrag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams;
        
        private Drag_GET_Web_Connector_Onto_DesignSurfaceParams mDrag_GET_Web_Connector_Onto_DesignSurfaceParams;
        
        private Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams mDrag_GetWeb_RequestTool_Onto_DesignSurfaceParams;
        
        private Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams mDrag_PostWeb_RequestTool_Onto_DesignSurfaceParams;
        
        private Drag_PutWeb_Tool_Onto_DesignSurfaceParams mDrag_PutWeb_Tool_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_AggregateCalculate_Onto_DesignSurfaceParams mDrag_Toolbox_AggregateCalculate_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_AssignObject_Onto_DesignSurfaceParams mDrag_Toolbox_AssignObject_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams mDrag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Calculate_Onto_DesignSurfaceParams mDrag_Toolbox_Calculate_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams mDrag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams mDrag_Toolbox_CMD_Line_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Comment_Onto_DesignSurfaceParams mDrag_Toolbox_Comment_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Copy_Onto_DesignSurfaceParams mDrag_Toolbox_Copy_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Count_Records_Onto_DesignSurfaceParams mDrag_Toolbox_Count_Records_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Create_Onto_DesignSurfaceParams mDrag_Toolbox_Create_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams mDrag_Toolbox_Data_Merge_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams mDrag_Toolbox_Data_Split_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams mDrag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams mDrag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Decision_Onto_DesignSurfaceParams mDrag_Toolbox_Decision_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Delete_Onto_DesignSurfaceParams mDrag_Toolbox_Delete_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Delete_Record_Onto_DesignSurfaceParams mDrag_Toolbox_Delete_Record_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams mDrag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams mDrag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams mDrag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams mDrag_Toolbox_Find_Index_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams mDrag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_For_Each_Onto_DesignSurfaceParams mDrag_Toolbox_For_Each_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams mDrag_Toolbox_Format_Number_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Javascript_Onto_DesignSurfaceParams mDrag_Toolbox_Javascript_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_JSON_Onto_DesignSurfaceParams mDrag_Toolbox_JSON_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Length_Onto_DesignSurfaceParams mDrag_Toolbox_Length_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Move_Onto_DesignSurfaceParams mDrag_Toolbox_Move_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams mDrag_Toolbox_MultiAssign_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_MySql_Database_Onto_DesignSurfaceParams mDrag_Toolbox_MySql_Database_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_ODBC_Dtatbase_Onto_DesignSurfaceParams mDrag_Toolbox_ODBC_Dtatbase_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Oracle_Database_Onto_DesignSurfaceParams mDrag_Toolbox_Oracle_Database_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_PostgreSql_Onto_DesignSurfaceParams mDrag_Toolbox_PostgreSql_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Python_Onto_DesignSurfaceParams mDrag_Toolbox_Python_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_RabbitMqConsume_Onto_DesignSurfaceParams mDrag_Toolbox_RabbitMqConsume_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_RabbitMqPublish_Onto_DesignSurfaceParams mDrag_Toolbox_RabbitMqPublish_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Random_Onto_DesignSurfaceParams mDrag_Toolbox_Random_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Read_File_Onto_DesignSurfaceParams mDrag_Toolbox_Read_File_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams mDrag_Toolbox_Read_Folder_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Rename_Onto_DesignSurfaceParams mDrag_Toolbox_Rename_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Replace_Onto_DesignSurfaceParams mDrag_Toolbox_Replace_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Ruby_Onto_DesignSurfaceParams mDrag_Toolbox_Ruby_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Selectandapply_Onto_DesignSurfaceParams mDrag_Toolbox_Selectandapply_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Sequence_Onto_DesignSurfaceParams mDrag_Toolbox_Sequence_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Service_Picker_Onto_DesignSurfaceParams mDrag_Toolbox_Service_Picker_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Sharepoint_CopyFile_Onto_DesignSurfaceParams mDrag_Toolbox_Sharepoint_CopyFile_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams mDrag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams mDrag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Sharepoint_Download_File_Onto_DesignSurfaceParams mDrag_Toolbox_Sharepoint_Download_File_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Sharepoint_MoveFile_Onto_DesignSurfaceParams mDrag_Toolbox_Sharepoint_MoveFile_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams mDrag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams mDrag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Sharepoint_UploadFile_Onto_DesignSurfaceParams mDrag_Toolbox_Sharepoint_UploadFile_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams mDrag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Sort_Record_Onto_DesignSurfaceParams mDrag_Toolbox_Sort_Record_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams mDrag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams mDrag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Switch_Onto_DesignSurfaceParams mDrag_Toolbox_Switch_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_System_Information_Onto_DesignSurfaceParams mDrag_Toolbox_System_Information_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Unique_Records_Onto_DesignSurfaceParams mDrag_Toolbox_Unique_Records_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Unzip_Onto_DesignSurfaceParams mDrag_Toolbox_Unzip_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams mDrag_Toolbox_Web_Request_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Write_File_Onto_DesignSurfaceParams mDrag_Toolbox_Write_File_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_XPath_Onto_DesignSurfaceParams mDrag_Toolbox_XPath_Onto_DesignSurfaceParams;
        
        private Drag_Toolbox_Zip_Onto_DesignSurfaceParams mDrag_Toolbox_Zip_Onto_DesignSurfaceParams;
        
        private Duplicate_Explorer_Localhost_First_Item_With_Context_MenuParams mDuplicate_Explorer_Localhost_First_Item_With_Context_MenuParams;
        
        private Enter_DeployViewOnly_Into_Deploy_Source_FilterParams mEnter_DeployViewOnly_Into_Deploy_Source_FilterParams;
        
        private Enter_Dice_Roll_ValuesParams mEnter_Dice_Roll_ValuesParams;
        
        private Enter_Duplicate_workflow_nameParams mEnter_Duplicate_workflow_nameParams;
        
        private Enter_InputDebug_valueParams mEnter_InputDebug_valueParams;
        
        private Enter_LocalSchedulerAdmin_Credentials_Into_Scheduler_TabParams mEnter_LocalSchedulerAdmin_Credentials_Into_Scheduler_TabParams;
        
        private Enter_Public_As_Windows_GroupParams mEnter_Public_As_Windows_GroupParams;
        
        private Enter_RunAsUser_Username_And_PasswordParams mEnter_RunAsUser_Username_And_PasswordParams;
        
        private Enter_Sharepoint_Server_Path_From_OnCopyFile_ToolParams mEnter_Sharepoint_Server_Path_From_OnCopyFile_ToolParams;
        
        private Enter_Sharepoint_Server_Path_From_OnMoveFile_ToolParams mEnter_Sharepoint_Server_Path_From_OnMoveFile_ToolParams;
        
        private Enter_Sharepoint_Server_Path_From_OnUpload_ToolParams mEnter_Sharepoint_Server_Path_From_OnUpload_ToolParams;
        
        private Enter_Sharepoint_Server_Path_To_OnCopyFile_ToolParams mEnter_Sharepoint_Server_Path_To_OnCopyFile_ToolParams;
        
        private Enter_Sharepoint_Server_Path_To_OnMoveFile_ToolParams mEnter_Sharepoint_Server_Path_To_OnMoveFile_ToolParams;
        
        private Enter_Sharepoint_Server_Path_To_OnUpload_ToolParams mEnter_Sharepoint_Server_Path_To_OnUpload_ToolParams;
        
        private Enter_Sharepoint_ServerSource_ServerNameParams mEnter_Sharepoint_ServerSource_ServerNameParams;
        
        private Enter_Sharepoint_ServerSource_User_CredentialsParams mEnter_Sharepoint_ServerSource_User_CredentialsParams;
        
        private Enter_SomeData_Into_Base_Convert_Large_View_Row1_Value_TextboxParams mEnter_SomeData_Into_Base_Convert_Large_View_Row1_Value_TextboxParams;
        
        private Enter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams mEnter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams;
        
        private Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams;
        
        private Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams;
        
        private Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams mEnter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams;
        
        private Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams mEnter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams;
        
        private Enter_Text_Into_Workflow_Tests_OutPutTable_Row1_Value_Textbox_As_CodedUITestParams mEnter_Text_Into_Workflow_Tests_OutPutTable_Row1_Value_Textbox_As_CodedUITestParams;
        
        private Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams mEnter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams;
        
        private Filter_variablesParams mFilter_variablesParams;
        
        private Open_AggregateCalculate_Tool_large_viewParams mOpen_AggregateCalculate_Tool_large_viewParams;
        
        private Open_Assign_Tool_Large_ViewParams mOpen_Assign_Tool_Large_ViewParams;
        
        private Open_Assign_Tool_Qvi_Large_ViewParams mOpen_Assign_Tool_Qvi_Large_ViewParams;
        
        private Open_AssignObject_Large_ToolParams mOpen_AssignObject_Large_ToolParams;
        
        private Open_AssignObject_QVI_LargeViewParams mOpen_AssignObject_QVI_LargeViewParams;
        
        private Open_Base_Conversion_Tool_Large_ViewParams mOpen_Base_Conversion_Tool_Large_ViewParams;
        
        private Open_Base_Conversion_Tool_Qvi_Large_ViewParams mOpen_Base_Conversion_Tool_Qvi_Large_ViewParams;
        
        private Open_Calculate_Tool_Large_ViewParams mOpen_Calculate_Tool_Large_ViewParams;
        
        private Open_Case_Conversion_Tool_Large_ViewParams mOpen_Case_Conversion_Tool_Large_ViewParams;
        
        private Open_Case_Conversion_Tool_Qvi_Large_ViewParams mOpen_Case_Conversion_Tool_Qvi_Large_ViewParams;
        
        private Open_CMD_Line_Tool_Large_ViewParams mOpen_CMD_Line_Tool_Large_ViewParams;
        
        private Open_Copy_Tool_Large_ViewParams mOpen_Copy_Tool_Large_ViewParams;
        
        private Open_Create_Tool_Large_ViewParams mOpen_Create_Tool_Large_ViewParams;
        
        private Open_Data_Merge_Large_ViewParams mOpen_Data_Merge_Large_ViewParams;
        
        private Open_Data_Merge_Tool_Qvi_Large_ViewParams mOpen_Data_Merge_Tool_Qvi_Large_ViewParams;
        
        private Open_Data_Split_Large_ViewParams mOpen_Data_Split_Large_ViewParams;
        
        private Open_Data_Split_Tool_Qvi_Large_ViewParams mOpen_Data_Split_Tool_Qvi_Large_ViewParams;
        
        private Open_DateTime_LargeViewParams mOpen_DateTime_LargeViewParams;
        
        private Open_DateTimeDiff_LargeViewParams mOpen_DateTimeDiff_LargeViewParams;
        
        private Open_Decision_Large_ViewParams mOpen_Decision_Large_ViewParams;
        
        private Open_Delete_Tool_Large_ViewParams mOpen_Delete_Tool_Large_ViewParams;
        
        private Open_DeleteRecords_Large_ViewParams mOpen_DeleteRecords_Large_ViewParams;
        
        private Open_DeleteWeb_Tool_Large_ViewParams mOpen_DeleteWeb_Tool_Large_ViewParams;
        
        private Open_DotNet_DLL_Connector_Tool_Large_ViewParams mOpen_DotNet_DLL_Connector_Tool_Large_ViewParams;
        
        private Open_Explorer_First_Item_Dependancies_With_Context_MenuParams mOpen_Explorer_First_Item_Dependancies_With_Context_MenuParams;
        
        private Open_Explorer_First_Item_With_Context_MenuParams mOpen_Explorer_First_Item_With_Context_MenuParams;
        
        private Open_Find_Index_Tool_Large_ViewParams mOpen_Find_Index_Tool_Large_ViewParams;
        
        private Open_ForEach_Large_ViewParams mOpen_ForEach_Large_ViewParams;
        
        private Open_GET_Web_Connector_Tool_Large_ViewParams mOpen_GET_Web_Connector_Tool_Large_ViewParams;
        
        private Open_Javascript_Large_ViewParams mOpen_Javascript_Large_ViewParams;
        
        private Open_Json_Tool_Large_ViewParams mOpen_Json_Tool_Large_ViewParams;
        
        private Open_Json_Tool_Qvi_Large_ViewParams mOpen_Json_Tool_Qvi_Large_ViewParams;
        
        private Open_Length_Tool_Large_ViewParams mOpen_Length_Tool_Large_ViewParams;
        
        private Open_Move_Tool_Large_ViewParams mOpen_Move_Tool_Large_ViewParams;
        
        private Open_NumberFormat_Toolbox_Large_ViewParams mOpen_NumberFormat_Toolbox_Large_ViewParams;
        
        private Open_ODBC_Tool_Large_ViewExpectedValues mOpen_ODBC_Tool_Large_ViewExpectedValues;
        
        private Open_Oracle_Tool_Large_ViewExpectedValues mOpen_Oracle_Tool_Large_ViewExpectedValues;
        
        private Open_Postgre_Tool_Large_ViewExpectedValues mOpen_Postgre_Tool_Large_ViewExpectedValues;
        
        private Open_PostWeb_RequestTool_Large_ViewParams mOpen_PostWeb_RequestTool_Large_ViewParams;
        
        private Open_Python_Large_ViewParams mOpen_Python_Large_ViewParams;
        
        private Open_RabbitMqConsume_LargeViewParams mOpen_RabbitMqConsume_LargeViewParams;
        
        private Open_RabbitMqPublish_LargeViewParams mOpen_RabbitMqPublish_LargeViewParams;
        
        private Open_Random_Large_ToolParams mOpen_Random_Large_ToolParams;
        
        private Open_Read_File_Tool_Large_ViewParams mOpen_Read_File_Tool_Large_ViewParams;
        
        private Open_Read_Folder_Tool_Large_ViewParams mOpen_Read_Folder_Tool_Large_ViewParams;
        
        private Open_Rename_Tool_Large_ViewParams mOpen_Rename_Tool_Large_ViewParams;
        
        private Open_Replace_Tool_Large_ViewParams mOpen_Replace_Tool_Large_ViewParams;
        
        private Open_Ruby_Large_ViewParams mOpen_Ruby_Large_ViewParams;
        
        private Open_Selectandapply_Large_ViewParams mOpen_Selectandapply_Large_ViewParams;
        
        private Open_Sequence_Large_tool_ViewParams mOpen_Sequence_Large_tool_ViewParams;
        
        private Open_SMTP_Email_Tool_Large_ViewParams mOpen_SMTP_Email_Tool_Large_ViewParams;
        
        private Open_SQL_Bulk_Insert_Tool_Large_ViewParams mOpen_SQL_Bulk_Insert_Tool_Large_ViewParams;
        
        private Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams mOpen_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams;
        
        private Open_SQL_Large_View_FromContextMenuParams mOpen_SQL_Large_View_FromContextMenuParams;
        
        private Open_Sql_Server_Tool_Large_ViewExpectedValues mOpen_Sql_Server_Tool_Large_ViewExpectedValues;
        
        private Open_Switch_Tool_Large_ViewParams mOpen_Switch_Tool_Large_ViewParams;
        
        private Open_System_Information_Tool_Large_ViewParams mOpen_System_Information_Tool_Large_ViewParams;
        
        private Open_System_Information_Tool_Qvi_Large_ViewParams mOpen_System_Information_Tool_Qvi_Large_ViewParams;
        
        private Open_Unzip_Tool_Large_ViewParams mOpen_Unzip_Tool_Large_ViewParams;
        
        private Open_WebRequest_LargeViewParams mOpen_WebRequest_LargeViewParams;
        
        private Open_Write_File_Tool_Large_ViewParams mOpen_Write_File_Tool_Large_ViewParams;
        
        private Open_Xpath_Tool_Large_ViewParams mOpen_Xpath_Tool_Large_ViewParams;
        
        private Open_Xpath_Tool_Qvi_Large_ViewParams mOpen_Xpath_Tool_Qvi_Large_ViewParams;
        
        private Open_Zip_Tool_Large_ViewParams mOpen_Zip_Tool_Large_ViewParams;
        
        private Press_F6Params mPress_F6Params;
        
        private PressF11_EnterFullScreenParams mPressF11_EnterFullScreenParams;
        
        private RabbitMqAssertsExpectedValues mRabbitMqAssertsExpectedValues;
        
        private Remove_WorkflowName_From_Save_DialogParams mRemove_WorkflowName_From_Save_DialogParams;
        
        private Rename_LocalWorkflow_To_SecodWorkFlowParams mRename_LocalWorkflow_To_SecodWorkFlowParams;
        
        private RightClick_Explorer_Localhost_First_ItemParams mRightClick_Explorer_Localhost_First_ItemParams;
        
        private Search_And_Select_DiceRollParams mSearch_And_Select_DiceRollParams;
        
        private Search_And_Select_HelloWolrdParams mSearch_And_Select_HelloWolrdParams;
        
        private Select_Action_From_PostgreToolParams mSelect_Action_From_PostgreToolParams;
        
        private Select_Delete_FromExplorerContextMenuParams mSelect_Delete_FromExplorerContextMenuParams;
        
        private Select_Deploy_FromExplorerContextMenuParams mSelect_Deploy_FromExplorerContextMenuParams;
        
        private Select_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams mSelect_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams;
        
        private Select_FirstItem_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues mSelect_FirstItem_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues;
        
        private Select_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues mSelect_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues;
        
        private Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams mSelect_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams;
        
        private Select_Letters_From_Random_Type_ComboboxParams mSelect_Letters_From_Random_Type_ComboboxParams;
        
        private Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams mSelect_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams;
        
        private Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams mSelect_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams;
        
        private Select_NewDatabaseSource_FromSqlServerToolParams mSelect_NewDatabaseSource_FromSqlServerToolParams;
        
        private Select_NewEmailSource_FromExplorerContextMenuParams mSelect_NewEmailSource_FromExplorerContextMenuParams;
        
        private Select_NewSharepointSource_FromServer_LookupParams mSelect_NewSharepointSource_FromServer_LookupParams;
        
        private Select_NewSharepointSource_FromServer_Lookup_On_SharepointCopyFile_ToolParams mSelect_NewSharepointSource_FromServer_Lookup_On_SharepointCopyFile_ToolParams;
        
        private Select_NewSharepointSource_FromServer_Lookup_On_SharepointMoveFile_ToolParams mSelect_NewSharepointSource_FromServer_Lookup_On_SharepointMoveFile_ToolParams;
        
        private Select_NewSharepointSource_FromServer_Lookup_On_SharepointUpload_ToolParams mSelect_NewSharepointSource_FromServer_Lookup_On_SharepointUpload_ToolParams;
        
        private Select_NewWorkFlowService_From_ContextMenuParams mSelect_NewWorkFlowService_From_ContextMenuParams;
        
        private Select_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues mSelect_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues;
        
        private Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams mSelect_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams;
        
        private Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams mSelect_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams;
        
        private Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams mSelect_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams;
        
        private Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues mSelect_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues;
        
        private Select_SharepointTestServer_From_SharepointRead_ToolParams mSelect_SharepointTestServer_From_SharepointRead_ToolParams;
        
        private Select_SharepointTestServer_From_SharepointUpdate_ToolParams mSelect_SharepointTestServer_From_SharepointUpdate_ToolParams;
        
        private Select_Source_From_DotnetToolParams mSelect_Source_From_DotnetToolParams;
        
        private Select_Source_From_PostgreToolParams mSelect_Source_From_PostgreToolParams;
        
        private Select_SystemObject_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues mSelect_SystemObject_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues;
        
        private Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues mSelect_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues;
        
        private Select_Tests_From_Context_MenuParams mSelect_Tests_From_Context_MenuParams;
        
        private Select_ToString_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues mSelect_ToString_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues;
        
        private Select_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams mSelect_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams;
        
        private Select_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams mSelect_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams;
        
        private Select_UITestingSource_From_Web_Server_Large_View_Source_ComboboxParams mSelect_UITestingSource_From_Web_Server_Large_View_Source_ComboboxParams;
        
        private Select_User_From_RunTestAsParams mSelect_User_From_RunTestAsParams;
        
        private Show_Explorer_First_Item_Tests_With_Context_MenuParams mShow_Explorer_First_Item_Tests_With_Context_MenuParams;
        
        private Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues mType_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues;
        
        private Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues mType_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues;
        
        private Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams mType_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams;
        
        private Type_TestSite_into_Web_Source_Wizard_Address_TextboxParams mType_TestSite_into_Web_Source_Wizard_Address_TextboxParams;
        
        private MainStudioWindow mMainStudioWindow;
        
        private MessageBoxWindow mMessageBoxWindow;
        
        private SaveDialogWindow mSaveDialogWindow;
        
        private SplashPageWindow mSplashPageWindow;
        
        private DecisionOrSwitchDialog mDecisionOrSwitchDialog;
        
        private SelectWindowsGroupDialog mSelectWindowsGroupDialog;
        
        private ServicePickerDialog mServicePickerDialog;
        
        private SwitchCaseDialog mSwitchCaseDialog;
        
        private UIWarewolfDEV2SANELEMTWindow mUIWarewolfDEV2SANELEMTWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '[[SomeVariable]]' in 'UI_TextBox_AutoID' text box
        /// </summary>
        public string TextboxText = "[[SomeVariable]]";
        
        /// <summary>
        /// Type '50' in 'Text' text box
        /// </summary>
        public string TextEditText = "50";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assign_Value_To_Variable_With_Assign_Tool_Small_View_Row_2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '[[SomeOtherVariable]]' in 'UI_TextBox_AutoID' text box
        /// </summary>
        public string TextboxText = "[[SomeOtherVariable]]";
        
        /// <summary>
        /// Type '100' in 'Text' text box
        /// </summary>
        public string TextEditText = "100";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Check_Public_Administrator'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Check_Public_AdministratorParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_Public_AdministratorPermissionCheckBox_AutoID' check box
        /// </summary>
        public bool Public_AdministratorCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'UI_Public_DeployToPermissionCheckBox_AutoID' check box equals 'True'
        /// </summary>
        public bool Public_DeployToCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'UI_Public_DeployFromPermissionCheckBox_AutoID' check box equals 'True'
        /// </summary>
        public bool Public_DeployFromCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_AddNew_Web_Source_From_PostWeb_tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_AddNew_Web_Source_From_PostWeb_toolParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New' button equals 'True'
        /// </summary>
        public bool NewSourceButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_AddNew_Web_Source_From_tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_AddNew_Web_Source_From_toolParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New' button equals 'True'
        /// </summary>
        public bool NewSourceButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Assign_Tool_CollapseAll'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Assign_Tool_CollapseAllParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'CollapseAll' toggle button equals 'True'
        /// </summary>
        public bool CollapseAllToggleButtonExists = true;
        
        /// <summary>
        /// Set to 'Pressed' state 'CollapseAll' toggle button
        /// </summary>
        public bool CollapseAllToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Assign_Tool_ExpandAll'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Assign_Tool_ExpandAllParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ExpandAll' toggle button equals 'True'
        /// </summary>
        public bool ExpandAllToggleButtonExists = true;
        
        /// <summary>
        /// Set to 'Pressed' state 'ExpandAll' toggle button
        /// </summary>
        public bool ExpandAllToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
        /// </summary>
        public bool MultiAssignExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Assign_Tool_Large_View_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Assign_Tool_Large_View_Done_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'UI_TextBox_AutoID' text box equals '[[SomeVariable]]'
        /// </summary>
        public string TextboxText = "[[SomeVariable]]";
        
        /// <summary>
        /// Verify that the 'Text' property of 'UI_NameTextBox_AutoID' text box equals 'SomeVariable'
        /// </summary>
        public string NameTextboxText = "SomeVariable";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Open Quick Variable Input' toggle button equals 'True'
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Assign_Tool_Large_View_Done_Button_With_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Hyperlink' link equals 'True'
        /// </summary>
        public bool HyperlinkExists = true;
        
        /// <summary>
        /// Verify that the 'Text' property of 'UI_NameTextBox_AutoID' text box equals ''
        /// </summary>
        public string NameTextboxText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Base_Convert_Large_View_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Base_Convert_Large_View_Done_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'UI__Row1_FromExpressiontxt_AutoID' text box equals 'SomeData'
        /// </summary>
        public string ValueTextboxText = "SomeData";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Calculate_Large_View_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Calculate_Large_View_Done_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'FunctionTextbox' text box equals '[[SomeVariable]]'
        /// </summary>
        public string FunctionTextboxText = "[[SomeVariable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Cancel_DebugInput_Window'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Cancel_DebugInput_WindowParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Cancel' button equals 'True'
        /// </summary>
        public bool CancelButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Close_Deploy_Tab_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Close_Deploy_Tab_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '?' button equals 'True'
        /// </summary>
        public bool TabCloseButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Close_Settings_Tab_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Close_Settings_Tab_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '?' button equals 'True'
        /// </summary>
        public bool CloseButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Close_Workflow_Tab_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Close_Workflow_Tab_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'closeBtn' custom control equals 'True'
        /// </summary>
        public bool CloseButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_ConfigureSetting_From_Menu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_ConfigureSetting_From_MenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'System.Windows.Controls.TabItem Header: Content:' tab equals 'True'
        /// </summary>
        public bool LoggingTabExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'System.Windows.Controls.TabItem Header: Content:' tab equals 'True'
        /// </summary>
        public bool LoggingTabEnabled = true;
        
        /// <summary>
        /// Verify that the 'Name' property of 'SECURITY' label equals 'SECURITY'
        /// </summary>
        public string SECURITYName = "SECURITY";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'ServerPermissionsDataGrid' table equals 'True'
        /// </summary>
        public bool ServerPermissionsExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of '0' pane equals 'True'
        /// </summary>
        public bool WarewolfAdminROWExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_AddRemovebtn_AutoID' button equals 'True'
        /// </summary>
        public bool DeleteButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'UI_Warewolf Administrators_DeployToPermissionCheckBox_AutoID' check box equals 'True'
        /// </summary>
        public bool DeployToCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'UI_Warewolf Administrators_DeployFromPermissionCheckBox_AutoID' check box equals 'True'
        /// </summary>
        public bool DeployFromCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'UI_Warewolf Administrators_AdministratorPermissionCheck...' check box equals 'True'
        /// </summary>
        public bool AdministratorCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'UI_Warewolf Administrators_ExecutePermissionCheck...' check box equals 'True'
        /// </summary>
        public bool ExecuteCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'UI_Warewolf Administrators_ViewPermissionCheck...' check box equals 'True'
        /// </summary>
        public bool ViewCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'UI_Warewolf Administrators_ContributePermissionCheck...' check box equals 'True'
        /// </summary>
        public bool ContributeCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of '1' pane equals 'True'
        /// </summary>
        public bool PublicROWExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Debug_Output_Assign_Cell'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Debug_Output_Assign_CellParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '[[SomeVariable]]' label equals '[[SomeVariable]]'
        /// </summary>
        public string VariableTextboxDisplayText = "[[SomeVariable]]";
        
        /// <summary>
        /// Verify that the 'ItemStatus' property of 'DsfMultiAssignActivity' custom control equals 'IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid '
        /// </summary>
        public string MultiAssignItemStatus = "IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=" +
            "null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Debug_Output_BaseConvert_Cell'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Debug_Output_BaseConvert_CellParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ItemStatus' property of 'DsfBaseConvertActivity' custom control equals 'IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid '
        /// </summary>
        public string BaseConvertItemStatus = "IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=" +
            "null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Debug_Output_Calculate_Cell'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Debug_Output_Calculate_CellParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ItemStatus' property of 'DsfCalculateActivity' custom control equals 'IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid '
        /// </summary>
        public string CalculateItemStatus = "IsPrimarySelection=True IsSelection=True IsCurrentLocation=null IsCurrentContext=" +
            "null IsBreakpointEnabled=null IsBreakpointBounded=null ValidationState=Valid ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Debug_Output_Workflow1_Name'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Debug_Output_Workflow1_NameParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'workflow1 - ci-remote' label equals 'workflow1 - ci-remote'
        /// </summary>
        public string Workflow1ciremoteTextDisplayText = "workflow1 - ci-remote";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_DebugInput_Debug_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_DebugInput_Debug_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Debug (F6)' button equals 'True'
        /// </summary>
        public bool DebugF6ButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'OUTPUT' custom control equals 'True'
        /// </summary>
        public bool DebugOutputExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of '?' button equals 'True'
        /// </summary>
        public bool SettingsButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of '+' button equals 'True'
        /// </summary>
        public bool ExpandCollapseButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
        /// </summary>
        public bool SearchTextBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DebugOutputTree' tree equals 'True'
        /// </summary>
        public bool DebugOutputTreeExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of '?' button equals 'True'
        /// </summary>
        public bool SettingsButtonExists1 = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_DebugInput_ViewInBrowser_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_DebugInput_ViewInBrowser_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'View In Browser (F7)' button equals 'True'
        /// </summary>
        public bool ViewInBrowserF7ButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Decision_Dialog_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Decision_Dialog_Done_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'FlowDecision' custom control equals 'True'
        /// </summary>
        public bool DecisionExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_DeleteWeb_Generate_Outputs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_DeleteWeb_Generate_OutputsParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '?' button equals 'True'
        /// </summary>
        public bool PasteButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Test' button equals 'True'
        /// </summary>
        public bool TestButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Deploy_Tab_Destination_Server_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Deploy_Tab_Destination_Server_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsNewRemoteServerExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Deploy_Tab_Source_Server_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Deploy_Tab_Source_Server_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsNewRemoteServerExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_DotNet_DLL_Large_View_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_DotNet_DLL_Large_View_Done_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SmallViewContent' custom control equals 'True'
        /// </summary>
        public bool SmallViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Duplicate_From_Duplicate_Dialog'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Duplicate_From_Duplicate_DialogParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Duplicate' button equals 'True'
        /// </summary>
        public bool DuplicateButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'SaveDialogView' window equals 'True'
        /// </summary>
        public bool SaveDialogWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_EmailSource_TestConnection_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_EmailSource_TestConnection_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Passed' label equals 'True'
        /// </summary>
        public bool PassedTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_ExpandAndStepIn_NestedWorkflow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_ExpandAndStepIn_NestedWorkflowParams
    {
        
        #region Fields
        /// <summary>
        /// Expand 'Hello World' tree item
        /// </summary>
        public bool SubWorkflowExpanded = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Explorer_Filter_Clear_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Explorer_Filter_Clear_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'SearchTextBox' text box equals ''
        /// </summary>
        public string SearchTextBoxText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Explorer_RemoteServer_Connect_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Explorer_RemoteServer_Connect_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Wait for 2 seconds for user delay between actions; Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
        /// </summary>
        public bool FirstRemoteServerExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_First_Recordset_Input_Checkbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_First_Recordset_Input_CheckboxParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsInputCheckbox_AutoID' check box
        /// </summary>
        public bool InputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_GET_Web_Large_View_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_GET_Web_Large_View_Done_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SmallViewContent' custom control equals 'True'
        /// </summary>
        public bool SmallViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_GET_Web_Large_View_Done_Button_With_Invalid_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_GET_Web_Large_View_Done_Button_With_Invalid_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Error1' label equals 'True'
        /// </summary>
        public bool Error1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_GET_Web_Large_View_Generate_Outputs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_GET_Web_Large_View_Generate_OutputsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Verify that the 'Exists' property of 'Test' button equals 'True'
        /// </summary>
        public bool TestButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_HTTP_Delete_Web_Tool_New_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_HTTP_Delete_Web_Tool_New_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Inte...' tab equals 'True'
        /// </summary>
        public bool WebSourceWizardTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_HTTP_Post_Web_Tool_New_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_HTTP_Post_Web_Tool_New_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Inte...' tab equals 'True'
        /// </summary>
        public bool WebSourceWizardTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_MessageBox_Yes'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_MessageBox_YesParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'WarewolfMessageBox' window equals 'False'
        /// </summary>
        public bool MessageBoxWindowExists = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_NewPluginSource_Ribbon_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_NewPluginSource_Ribbon_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Verify that the 'Exists' property of 'ExplorerTree' tree equals 'True'
        /// </summary>
        public bool TreeExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'AssemblyNameTextBox' text box equals 'True'
        /// </summary>
        public bool AssemblyNameTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_NewSource_Button_FromODBC_Tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_NewSource_Button_FromODBC_ToolParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Inte...' tab equals 'True'
        /// </summary>
        public bool DBSourceWizardTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_NewSource_Button_FromOracle_Tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_NewSource_Button_FromOracle_ToolParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Inte...' tab equals 'True'
        /// </summary>
        public bool DBSourceWizardTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_NewVersion_button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_NewVersion_buttonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'VersionButton' button equals 'True'
        /// </summary>
        public bool NewVersionButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'VersionButton' button equals 'True'
        /// </summary>
        public bool NewVersionButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Output_OnRecordset_InVariableList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Output_OnRecordset_InVariableListParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsOutputCheckbox_AutoID' check box
        /// </summary>
        public bool OutputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Output_OnVariable_InVariableList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Output_OnVariable_InVariableListParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsOutputCheckbox_AutoID' check box
        /// </summary>
        public bool OutputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Reset_Perfomance_Counter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Reset_Perfomance_CounterParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'WarewolfMessageBox' window equals 'True'
        /// </summary>
        public bool MessageBoxWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_RunDebug_button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_RunDebug_buttonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Wpf' window equals 'True'
        /// </summary>
        public bool DebugInputDialogExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Cancel' button equals 'True'
        /// </summary>
        public bool CancelButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Remember Debug Inputs' check box equals 'True'
        /// </summary>
        public bool RememberDebugInputCheckBoxEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Input Data' tab equals 'True'
        /// </summary>
        public bool InputDataTabEnabled = true;
        
        /// <summary>
        /// Verify that the 'Checked' property of 'Remember Debug Inputs' check box equals 'True'
        /// </summary>
        public bool RememberDebugInputCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'XML' tab equals 'True'
        /// </summary>
        public bool XMLTabExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'JSON' tab equals 'True'
        /// </summary>
        public bool JSONTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Save_Ribbon_Button_to_Open_Save_Dialog'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Save_Ribbon_Button_to_Open_Save_DialogParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Save this tab' button equals 'True'
        /// </summary>
        public bool SaveButtonExists = true;
        
        /// <summary>
        /// Wait for 2 seconds for user delay between actions; Verify that the 'Exists' property of 'Cancel' button equals 'True'
        /// </summary>
        public bool CancelButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of ''Name' cannot be empty.' label equals 'True'
        /// </summary>
        public bool ErrorLabelExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'ExplorerTree' tree equals 'True'
        /// </summary>
        public bool ExplorerTreeExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'ExplorerView' custom control equals 'True'
        /// </summary>
        public bool ExplorerViewExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
        /// </summary>
        public bool SearchTextBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Name:' label equals 'True'
        /// </summary>
        public bool NameLabelExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of '?' button equals 'True'
        /// </summary>
        public bool RefreshButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Save' button equals 'True'
        /// </summary>
        public bool SaveButtonExists1 = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'SaveDialogView' window equals 'True'
        /// </summary>
        public bool SaveDialogWindowExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'ServiceNameTextBox' text box equals 'True'
        /// </summary>
        public bool ServiceNameTextBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'SaveDialogView' window equals 'True'
        /// </summary>
        public bool SaveDialogWindowExists1 = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'ServiceNameTextBox' text box equals 'True'
        /// </summary>
        public bool ServiceNameTextBoxExists1 = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Scheduler_Create_New_Task_Ribbon_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Scheduler_Create_New_Task_Ribbon_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Triggered at' label equals 'True'
        /// </summary>
        public bool TriggerTextExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Enabled' radio button equals 'True'
        /// </summary>
        public bool EnabledRadioButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool ResourcePickerButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of '?' button equals 'True'
        /// </summary>
        public bool EditTriggerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Scheduler_Disable_Task_Radio_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Scheduler_Disable_Task_Radio_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Disabled' radio button
        /// </summary>
        public bool DisabledRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Scheduler_Enable_Task_Radio_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Scheduler_Enable_Task_Radio_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Select check box
        /// </summary>
        public bool StatusCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Scheduler_RunTask'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Scheduler_RunTaskParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Run task as soon as possible after a scheduled sta...' check box
        /// </summary>
        public bool RunTaskCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Select_Resource_Button_From_Resource_Permissions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Select_Resource_Button_From_Resource_PermissionsParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ServicePickerDialog' window equals 'True'
        /// </summary>
        public bool ServicePickerDialogExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Select_Windows_Group_Cancel_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Select_Windows_Group_Cancel_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Cancel' button equals 'True'
        /// </summary>
        public bool CancelExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Server_Source_Wizard_Address_Protocol_Dropdown'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Server_Source_Wizard_Address_Protocol_DropdownParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'http' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsHttpExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Server_Source_Wizard_Test_Connection_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Server_Source_Wizard_Test_Connection_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Wait for 3 seconds for user delay between actions; Verify that the 'Enabled' property of 'Save this tab' button equals 'True'
        /// </summary>
        public bool SaveButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Show_Dependencies_In_Explorer_Context_Menu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Show_Dependencies_In_Explorer_Context_MenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Selected' property of 'Show what depends on this' radio button equals 'True'
        /// </summary>
        public bool ShowwhatdependsonthisRadioButtonSelected = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of first text box next to 'Nesting Levels' label equals 'True'
        /// </summary>
        public bool TextboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Refresh' button equals 'True'
        /// </summary>
        public bool RefreshButtonExists = true;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'RemoteServerUITestWorkflow' label equals 'RemoteServerUITestWorkflow'
        /// </summary>
        public string TextDisplayText = "RemoteServerUITestWorkflow";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_SQL_Server_Large_View_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_SQL_Server_Large_View_Done_ButtonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_SQL_Server_Large_View_Generate_Outputs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_SQL_Server_Large_View_Generate_OutputsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Generate Outputs' button equals 'True'
        /// </summary>
        public bool GenerateOutputsButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Text' text box equals 'True'
        /// </summary>
        public bool TestDataTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_SQL_Server_Large_View_Test_Inputs_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_SQL_Server_Large_View_Test_Inputs_Done_ButtonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool TestInputsDoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Switch_Dialog_Done_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Switch_Dialog_Done_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of custom control equals 'True'
        /// </summary>
        public bool SwitchExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_UpdateDuplicateRelationships'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_UpdateDuplicateRelationshipsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Update duplicated relationships?' check box
        /// </summary>
        public bool UpdateDuplicatedRelatChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_UserButton_OnSharepointSource'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_UserButton_OnSharepointSourceParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'User' radio button
        /// </summary>
        public bool UserRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Variable_IsInput'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Variable_IsInputParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_IsInputCheckbox_AutoID' check box equals 'True'
        /// </summary>
        public bool InputCheckboxExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'UI_IsInputCheckbox_AutoID' check box equals 'True'
        /// </summary>
        public bool InputCheckboxEnabled = true;
        
        /// <summary>
        /// Select 'UI_IsInputCheckbox_AutoID' check box
        /// </summary>
        public bool InputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_VariableList_Recordset_Row1_IsInputCheckbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_VariableList_Recordset_Row1_IsInputCheckboxParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsInputCheckbox_AutoID' check box
        /// </summary>
        public bool InputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_VariableList_Scalar_Row1_IsInputCheckbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_VariableList_Scalar_Row1_IsInputCheckboxParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsInputCheckbox_AutoID' check box
        /// </summary>
        public bool InputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Workflow_CollapseAll'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Workflow_CollapseAllParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'CollapseAll' toggle button equals 'True'
        /// </summary>
        public bool CollapseAllToggleButtonExists = true;
        
        /// <summary>
        /// Set to 'Pressed' state 'CollapseAll' toggle button
        /// </summary>
        public bool CollapseAllToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Workflow_ExpandAll'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Workflow_ExpandAllParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ExpandAll' toggle button equals 'True'
        /// </summary>
        public bool ExpandAllToggleButtonExists = true;
        
        /// <summary>
        /// Set to 'Pressed' state 'ExpandAll' toggle button
        /// </summary>
        public bool ExpandAllToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Create_SubFolder_In_Folder1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Create_SubFolder_In_Folder1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Acceptance Testing Resources' in first text box next to 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
        /// </summary>
        public string ItemEditText = "Acceptance Testing Resources";
        
        /// <summary>
        /// Type '{Enter}' in 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
        /// </summary>
        public string FirstSubItemSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_DeleteWeb_Toolbox_Onto_Workflow_Surface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_DeleteWeb_Toolbox_Onto_Workflow_SurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'DELETE' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "DELETE";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebDeleteActivity' custom control equals 'True'
        /// </summary>
        public bool WebDeleteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Dice_Onto_Dice_On_The_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Dice_Onto_Dice_On_The_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector2' custom control equals 'True'
        /// </summary>
        public bool Connector2Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_DotNet_DLL_Connector_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_DotNet_DLL_Connector_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'DotNet DLL' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "DotNet DLL";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDotNetDllActivity' custom control equals 'True'
        /// </summary>
        public bool DotNetDllExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_Surface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Explorer_Localhost_First_Item_Onto_Workflow_Design_SurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
        /// </summary>
        public bool FirstItemExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Explorer_Localhost_First_Items_First_Sub_Item_Onto_Workflow_Design_Surface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Explorer_Localhost_First_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
        /// </summary>
        public bool FirstSubItemExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Explorer_Localhost_Second_Items_First_Sub_Item_Onto_Workflow_Design_Surface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Explorer_Localhost_Second_Items_First_Sub_Item_Onto_Workflow_Design_SurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
        /// </summary>
        public bool FirstSubItemExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_Surface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Explorer_Remote_workflow1_Onto_Workflow_Design_SurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
        /// </summary>
        public bool FirstItemExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfActivity' custom control equals 'True'
        /// </summary>
        public bool SubWorkflowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_GET_Web_Connector_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_GET_Web_Connector_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'GET' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "GET";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebGetActivity' custom control equals 'True'
        /// </summary>
        public bool WebGetExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_GetWeb_RequestTool_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_GetWeb_RequestTool_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Web Request' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Web Request";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebRequestActivity' custom control equals 'True'
        /// </summary>
        public bool WebRequestExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_PostWeb_RequestTool_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_PostWeb_RequestTool_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'POST' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "POST";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebPostActivity' custom control equals 'True'
        /// </summary>
        public bool WebPostExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_PutWeb_Tool_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_PutWeb_Tool_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'PUT' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "PUT";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebPutActivity' custom control equals 'True'
        /// </summary>
        public bool WebPutExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_AggregateCalculate_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_AggregateCalculate_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Aggregate Calculate' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Aggregate Calculate";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__fxtxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool fxComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_AssignObject_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_AssignObject_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Assign Object' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Assign Object";
        
        /// <summary>
        /// Wait for 2 seconds for user delay between actions; Verify that the 'Exists' property of 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item equals 'True'
        /// </summary>
        public bool AssignObjectExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Base_Conversion_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Base_Conversion_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Base Convert' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Base Convert";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfBaseConvertActivity' custom control equals 'True'
        /// </summary>
        public bool BaseConvertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Calculate_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Calculate_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Calculate' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Calculate";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCalculateActivity' custom control equals 'True'
        /// </summary>
        public bool CalculateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Case_Conversion_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Case_Conversion_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Case Convert' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Case Convert";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCaseConvertActivity' custom control equals 'True'
        /// </summary>
        public bool CaseConvertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_CMD_Line_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_CMD_Line_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'CMD Script' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "CMD Script";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfExecuteCommandLineActivity' custom control equals 'True'
        /// </summary>
        public bool ExecuteCommandLineExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Cmdtxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ScriptIntellisenseTextboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResultIntellisenseTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Comment_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Comment_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Comment' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Comment";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCommentActivity' custom control equals 'True'
        /// </summary>
        public bool CommentExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Copy_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Copy_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Copy' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Copy";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathCopy' custom control equals 'True'
        /// </summary>
        public bool PathCopyExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Count_Records_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Count_Records_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Count' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Count";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Create_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Create_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Create' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Create";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathCreate' custom control equals 'True'
        /// </summary>
        public bool PathCreateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Data_Merge_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Data_Merge_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Data Merge' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Data Merge";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
        /// </summary>
        public bool DataMergeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Data_Split_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Data_Split_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Data Split' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Data Split";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
        /// </summary>
        public bool DataSplitExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Date_And_Time_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Date_And_Time_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Date Time' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Date Time";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDateTimeActivity' custom control equals 'True'
        /// </summary>
        public bool DateTimeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_DateTime_Difference_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_DateTime_Difference_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Date Time Diff' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Date Time Diff";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDateTimeDifferenceActivity' custom control equals 'True'
        /// </summary>
        public bool DateTimeDifferenceExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Decision_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Decision_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Decision' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Decision";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Delete_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Delete_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Delete' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Delete";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathDelete' custom control equals 'True'
        /// </summary>
        public bool PathDeleteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Delete_Record_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Delete_Record_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Delete' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Delete";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Dropbox_Download_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Dropbox_Download_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Download' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Download";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Dropbox_Upload_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Dropbox_Upload_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Upload' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Upload";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Exchange_Email_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Exchange_Email_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Exchange Email' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Exchange Email";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Find_Index_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Find_Index_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Find Index' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Find Index";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfIndexActivity' custom control equals 'True'
        /// </summary>
        public bool FindIndexExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Find_Record_Index_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Find_Record_Index_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Find Records' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Find Records";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_For_Each_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_For_Each_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'ForEach' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "ForEach";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfForEachActivity' custom control equals 'True'
        /// </summary>
        public bool ForEachExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__ForEachType_AutoID' combo box equals 'True'
        /// </summary>
        public bool ForEachTypeComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Text' text box equals 'True'
        /// </summary>
        public bool TextboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Drop Activity Here' custom control equals 'True'
        /// </summary>
        public bool DropActivityHereExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Text' text box equals 'True'
        /// </summary>
        public bool TextboxExists1 = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Format_Number_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Format_Number_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Format Number' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Format Number";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfNumberFormatActivity' custom control equals 'True'
        /// </summary>
        public bool FormatNumberExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Javascript_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Javascript_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Javascript' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Javascript";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfJavascriptActivity' custom control equals 'True'
        /// </summary>
        public bool JavascriptExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__txtScript_AutoID' combo box equals 'True'
        /// </summary>
        public bool ScriptIntellisenseComboboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResultsIntellisenseComboboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_JSON_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_JSON_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Create JSON' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Create JSON";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
        /// </summary>
        public bool CreateJsonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Length_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Length_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Length' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Length";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfRecordsetLengthActivity' custom control equals 'True'
        /// </summary>
        public bool LengthExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Move_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Move_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Move' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Move";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathMove' custom control equals 'True'
        /// </summary>
        public bool PathMoveExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_MultiAssign_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_MultiAssign_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Assign' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Assign";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item equals 'True'
        /// </summary>
        public bool MultiAssignExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_TextBox_AutoID' text box equals 'True'
        /// </summary>
        public bool TextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_MySql_Database_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_MySql_Database_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'MySQL' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "MySQL";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_ODBC_Dtatbase_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_ODBC_Dtatbase_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'ODBC' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "ODBC";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Oracle_Database_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Oracle_Database_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Oracle' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Oracle";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_PostgreSql_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_PostgreSql_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Postgre' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Postgre";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Python_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Python_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Python' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Python";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPythonActivity' custom control equals 'True'
        /// </summary>
        public bool PythonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__txtScript_AutoID' combo box equals 'True'
        /// </summary>
        public bool ScriptIntellisenseComboboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResultIntellisenseComboboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_RabbitMqConsume_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_RabbitMqConsume_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'RabbitMq Consume' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "RabbitMq Consume";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'SmallViewContent' custom control equals 'True'
        /// </summary>
        public bool SmallViewContentCustomExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_RabbitMqPublish_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_RabbitMqPublish_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'RabbitMq Publish' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "RabbitMq Publish";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'SmallViewContent' custom control equals 'True'
        /// </summary>
        public bool SmallViewContentCustomExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Random_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Random_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Random' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Random";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfRandomActivity' custom control equals 'True'
        /// </summary>
        public bool RandomExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Read_File_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Read_File_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Read File' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Read File";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFileRead' custom control equals 'True'
        /// </summary>
        public bool FileReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Read_Folder_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Read_Folder_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Read Folder' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Read Folder";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFolderRead' custom control equals 'True'
        /// </summary>
        public bool FolderReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Rename_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Rename_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Rename' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Rename";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathRename' custom control equals 'True'
        /// </summary>
        public bool PathRenameExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Replace_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Replace_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Replace' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Replace";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfReplaceActivity' custom control equals 'True'
        /// </summary>
        public bool ReplaceExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Ruby_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Ruby_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Ruby' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Ruby";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfRubyActivity' custom control equals 'True'
        /// </summary>
        public bool RubyExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__txtScript_AutoID' combo box equals 'True'
        /// </summary>
        public bool ScriptIntellisenseComboboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResultIntellisenseComboboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Selectandapply_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Selectandapply_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Select and apply' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Select and apply";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSelectAndApplyActivity' custom control equals 'True'
        /// </summary>
        public bool SelectAndApplyExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__FileNametxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool SelectFromIntellisenseTextboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__FileNametxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool AliasIntellisenseTextboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Drop Activity Here' custom control equals 'True'
        /// </summary>
        public bool DropActivityHereExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Sequence_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Sequence_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Sequence' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Sequence";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSequenceActivity' custom control equals 'True'
        /// </summary>
        public bool SequenceExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Service_Picker_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Service_Picker_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Service' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Service";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Cancel' button equals 'True'
        /// </summary>
        public bool CancelExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Sharepoint_CopyFile_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Sharepoint_CopyFile_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Copy File' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Copy File";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Database_AutoID' combo box equals 'True'
        /// </summary>
        public bool ServerExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Sharepoint_Create_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Sharepoint_Create_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Create List Item' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Create List Item";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Database_AutoID' combo box equals 'True'
        /// </summary>
        public bool ServerExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__TableName_AutoID' combo box equals 'True'
        /// </summary>
        public bool ListExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Delete List Item' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Delete List Item";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Sharepoint_Download_File_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Sharepoint_Download_File_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SmallViewContent' custom control equals 'True'
        /// </summary>
        public bool SmallViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Sharepoint_MoveFile_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Sharepoint_MoveFile_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Move' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Move";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Database_AutoID' combo box equals 'True'
        /// </summary>
        public bool ServerExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Sharepoint_Read_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Sharepoint_Read_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Read List Item' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Read List Item";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Sharepoint_Update_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Sharepoint_Update_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Update List Item' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Update List Item";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Sharepoint_UploadFile_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Sharepoint_UploadFile_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Upload' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Upload";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'SmallViewContent' custom control equals 'True'
        /// </summary>
        public bool SmallViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_SMTP_Email_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_SMTP_Email_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'SMTP Send' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "SMTP Send";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSendEmailActivity' custom control equals 'True'
        /// </summary>
        public bool SMTPEmailExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Sort_Record_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Sort_Record_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Sort' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Sort";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'SQL Bulk Insert' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "SQL Bulk Insert";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
        /// </summary>
        public bool SqlBulkInsertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'SQL Server' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "SQL Server";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Switch_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Switch_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Switch' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Switch";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_System_Information_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_System_Information_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Sys Info' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Sys Info";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfGatherSystemInformationActivity' custom control equals 'True'
        /// </summary>
        public bool GatherSystemInfoExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Unique_Records_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Unique_Records_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Unique' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Unique";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Unzip_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Unzip_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Unzip' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Unzip";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfUnZip' custom control equals 'True'
        /// </summary>
        public bool UnZipExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Web_Request_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Web_Request_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Web Request' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Web Request";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebRequestActivity' custom control equals 'True'
        /// </summary>
        public bool WebRequestExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Write_File_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Write_File_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Write File' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Write File";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFileWrite' custom control equals 'True'
        /// </summary>
        public bool FileWriteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_XPath_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_XPath_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'XPath' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "XPath";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
        /// </summary>
        public bool XPathExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Drag_Toolbox_Zip_Onto_DesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Drag_Toolbox_Zip_Onto_DesignSurfaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Zip' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Zip";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Connector1' custom control equals 'True'
        /// </summary>
        public bool Connector1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfZip' custom control equals 'True'
        /// </summary>
        public bool ZipExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Duplicate_Explorer_Localhost_First_Item_With_Context_Menu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Duplicate_Explorer_Localhost_First_Item_With_Context_MenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Duplicate' menu item equals 'True'
        /// </summary>
        public bool DuplicateExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'SaveDialogView' window equals 'True'
        /// </summary>
        public bool SaveDialogWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_DeployViewOnly_Into_Deploy_Source_Filter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_DeployViewOnly_Into_Deploy_Source_FilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'DeployViewOnly' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextboxText = "DeployViewOnly";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
        /// </summary>
        public bool FirstExplorerTreeItemExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'ResourceNameCheckBox' check box equals 'True'
        /// </summary>
        public bool CheckBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Dice_Roll_Values'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Dice_Roll_ValuesParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Text' text box equals 'True'
        /// </summary>
        public bool FromTextEditExists = true;
        
        /// <summary>
        /// Type '1' in 'Text' text box
        /// </summary>
        public string FromTextEditText = "1";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Text' text box equals 'True'
        /// </summary>
        public bool ToTextEditExists = true;
        
        /// <summary>
        /// Type '6' in 'Text' text box
        /// </summary>
        public string ToTextEditText = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Duplicate_workflow_name'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Duplicate_workflow_nameParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'DuplicatedWorkFlow' in 'ServiceNameTextBox' text box
        /// </summary>
        public string ServiceNameTextBoxText = "DuplicatedWorkFlow";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_InputDebug_value'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_InputDebug_valueParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Row1' pane equals 'True'
        /// </summary>
        public bool Row1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Text' text box equals 'True'
        /// </summary>
        public bool InputValueTextExists = true;
        
        /// <summary>
        /// Type '100' in 'Text' text box
        /// </summary>
        public string InputValueTextText = "100";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_LocalSchedulerAdmin_Credentials_Into_Scheduler_Tab'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_LocalSchedulerAdmin_Credentials_Into_Scheduler_TabParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'LocalSchedulerAdmin' in 'UI_UserNameTextBox' text box
        /// </summary>
        public string UserNameTextBoxEditText = "LocalSchedulerAdmin";
        
        /// <summary>
        /// Type '987Sched#@!' in 'UI_PasswordBox' text box
        /// </summary>
        public string PasswordTextboxText = "987Sched#@!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Public_As_Windows_Group'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Public_As_Windows_GroupParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Public' in 'UI__AddWindowsGroupsTextBox_AutoID' text box
        /// </summary>
        public string AddWindowsGroupsEditText = "Public";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_RunAsUser_Username_And_Password'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_RunAsUser_Username_And_PasswordParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'testuser' in 'UsernameTextBox' text box
        /// </summary>
        public string UsernameTextBoxEditText = "testuser";
        
        /// <summary>
        /// Type '{Tab}' in 'UsernameTextBox' text box
        /// </summary>
        public string UsernameTextBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'PasswordTextBox' text box
        /// </summary>
        public string PasswordTextBoxEditSendKeys = "a1cbgHEVu098QBN0jqs55wYP/bLfpGNMxw2YxtLIgKOALxPfITSBDjNERdIi/KEq";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Sharepoint_Server_Path_From_OnCopyFile_Tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Sharepoint_Server_Path_From_OnCopyFile_ToolParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'clocks.dat' in 'Text' text box
        /// </summary>
        public string TextEditText = "clocks.dat";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Sharepoint_Server_Path_From_OnMoveFile_Tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Sharepoint_Server_Path_From_OnMoveFile_ToolParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'clocks.dat' in 'Text' text box
        /// </summary>
        public string TextEditText = "clocks.dat";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Sharepoint_Server_Path_From_OnUpload_Tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Sharepoint_Server_Path_From_OnUpload_ToolParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'clocks.dat' in 'Text' text box
        /// </summary>
        public string TextboxText = "clocks.dat";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Sharepoint_Server_Path_To_OnCopyFile_Tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Sharepoint_Server_Path_To_OnCopyFile_ToolParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'TestFolder/clocks.dat' in 'Text' text box
        /// </summary>
        public string TextEditText = "TestFolder/clocks.dat";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Sharepoint_Server_Path_To_OnMoveFile_Tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Sharepoint_Server_Path_To_OnMoveFile_ToolParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'TestFolder/clocks.dat' in 'Text' text box
        /// </summary>
        public string TextEditText = "TestFolder/clocks.dat";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Sharepoint_Server_Path_To_OnUpload_Tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Sharepoint_Server_Path_To_OnUpload_ToolParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'TestFolder/clocks.dat' in 'Text' text box
        /// </summary>
        public string TextboxText = "TestFolder/clocks.dat";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Sharepoint_ServerSource_ServerName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Sharepoint_ServerSource_ServerNameParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'http://rsaklfsvrsharep/' in 'ServerName' text box
        /// </summary>
        public string ServerNameEditText = "http://rsaklfsvrsharep/";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Sharepoint_ServerSource_User_Credentials'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Sharepoint_ServerSource_User_CredentialsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Bernartdt@dvtdev.onmicrosoft.com' in 'UserNameTextBox' text box
        /// </summary>
        public string UserNameTextBoxText = "Bernartdt@dvtdev.onmicrosoft.com";
        
        /// <summary>
        /// Type '********' in 'PasswordTextBox' text box
        /// </summary>
        public string PasswordTextBoxSendKeys = "YN/mQM5J9PSwtnVGttwUbqV2NkA27Xtb2Cs5ppSS77kjZgxPPM79nWlqEFRqmwY4KvuSBKnsLDU6spVwV" +
            "rcWKXwSuKb7vBXD";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_SomeData_Into_Base_Convert_Large_View_Row1_Value_Textbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_SomeData_Into_Base_Convert_Large_View_Row1_Value_TextboxParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'SomeData' in 'UI__Row1_FromExpressiontxt_AutoID' text box
        /// </summary>
        public string ValueTextboxText = "SomeData";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_SomeVariable_Into_Calculate_Large_View_Function_Textbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_SomeVariable_Into_Calculate_Large_View_Function_TextboxParams
    {
        
        #region Fields
        /// <summary>
        /// Type '[[SomeVariable]]' in 'FunctionTextbox' text box
        /// </summary>
        public string FunctionTextboxText = "[[SomeVariable]]";
        
        /// <summary>
        /// Verify that the 'Text' property of 'FunctionTextbox' text box equals '[[SomeVariable]]'
        /// </summary>
        public string FunctionTextboxText1 = "[[SomeVariable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeInvalidVariableNameParams
    {
        
        #region Fields
        /// <summary>
        /// Type '[[Some$Invalid%Variable]]' in 'UI__Row1_FieldName_AutoID' text box
        /// </summary>
        public string TextboxText = "[[Some$Invalid%Variable]]";
        
        /// <summary>
        /// Verify that the 'Text' property of 'UI__Row1_FieldName_AutoID' text box equals '[[Some$Invalid%Variable]]'
        /// </summary>
        public string TextboxText1 = "[[Some$Invalid%Variable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariable'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams
    {
        
        #region Fields
        /// <summary>
        /// Type '[[Some{Down}{Enter}Variable]]' in 'UI__Row1_FieldName_AutoID' text box
        /// </summary>
        public string TextboxSendKeys = "[[Some{Down}{Enter}Variable]]";
        
        /// <summary>
        /// Verify that the 'Text' property of 'UI__Row1_FieldName_AutoID' text box equals '[[SomeVariable]]'
        /// </summary>
        public string TextboxText = "[[SomeVariable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_Suggestion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_Using_Click_Intellisense_SuggestionParams
    {
        
        #region Fields
        /// <summary>
        /// Type '[[' in 'UI_TextBox_AutoID' text box
        /// </summary>
        public string TextboxText = "[[";
        
        /// <summary>
        /// Verify that the 'Text' property of 'UI_TextBox_AutoID' text box equals '[[SomeVariable]]'
        /// </summary>
        public string TextboxText1 = "[[SomeVariable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisense'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Text_Into_Assign_Small_View_Row1_Value_Textbox_As_SomeVariable_UsingIntellisenseParams
    {
        
        #region Fields
        /// <summary>
        /// Type '[[{Down}{Enter}' in 'UI_TextBox_AutoID' text box
        /// </summary>
        public string TextboxSendKeys = "[[{Down}{Enter}";
        
        /// <summary>
        /// Verify that the 'Text' property of 'UI_TextBox_AutoID' text box equals '[[SomeVariable]]'
        /// </summary>
        public string TextboxText = "[[SomeVariable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Text_Into_Workflow_Tests_OutPutTable_Row1_Value_Textbox_As_CodedUITest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Text_Into_Workflow_Tests_OutPutTable_Row1_Value_Textbox_As_CodedUITestParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Helo User' in 'Text' text box
        /// </summary>
        public string TextboxSendKeys = "Helo User";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Text' text box equals 'Hello User'
        /// </summary>
        public string TextboxText = "Hello User";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Text_Into_Workflow_Tests_Row1_Value_Textbox_As_CodedUITestParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'User' in 'Text' text box
        /// </summary>
        public string TextboxSendKeys = "User";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Text' text box equals 'User'
        /// </summary>
        public string TextboxText = "User";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Filter_variables'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Filter_variablesParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Filter' label equals 'True'
        /// </summary>
        public bool FilterTextExists = true;
        
        /// <summary>
        /// Type 'Other' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextboxText = "Other";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_AggregateCalculate_Tool_large_view'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_AggregateCalculate_Tool_large_viewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' group equals 'True'
        /// </summary>
        public bool OnErrorGroupExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResultComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__fxtxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool fxComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Assign_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Assign_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
        /// </summary>
        public bool MultiAssignExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Row1_FieldName_AutoID' text box equals 'True'
        /// </summary>
        public bool TextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Assign_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Assign_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
        /// </summary>
        public bool QuickVariableInputContentExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_AssignObject_Large_Tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_AssignObject_Large_ToolParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Open Quick Variable Input' toggle button equals 'True'
        /// </summary>
        public bool OpenQuickVariableInputExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_ActivityGridRow_0_AutoID' row equals 'True'
        /// </summary>
        public bool Row1Exists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' group equals 'True'
        /// </summary>
        public bool OnErrorGroupExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_AssignObject_QVI_LargeView'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_AssignObject_QVI_LargeViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInputPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
        /// </summary>
        public bool QuickVariableInputContentExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'QviSplitOnCombobox' combo box equals 'True'
        /// </summary>
        public bool QviSplitOnComboboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Preview' custom control equals 'True'
        /// </summary>
        public bool PreviewCustomExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Base_Conversion_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Base_Conversion_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'UI__Row1_FromExpressiontxt_AutoID' text box equals 'True'
        /// </summary>
        public bool ValueTextboxEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Base_Conversion_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Base_Conversion_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfBaseConvertActivity' custom control equals 'True'
        /// </summary>
        public bool BaseConvertExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
        /// </summary>
        public bool QuickVariableInputContentExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
        /// </summary>
        public bool QuickVariableInputContentExists1 = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Calculate_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Calculate_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
        /// </summary>
        public bool LargeViewExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Listbox' combo box equals 'True'
        /// </summary>
        public bool ListboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'FunctionTextbox' text box equals 'True'
        /// </summary>
        public bool FunctionTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Case_Conversion_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Case_Conversion_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'SmallDataGrid' table equals 'True'
        /// </summary>
        public bool SmallDataGridTableExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorCustomExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Case_Conversion_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Case_Conversion_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCaseConvertActivity' custom control equals 'True'
        /// </summary>
        public bool CaseConvertExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
        /// </summary>
        public bool QuickVariableInputContentExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_CMD_Line_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_CMD_Line_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfExecuteCommandLineActivity' custom control equals 'True'
        /// </summary>
        public bool ExecuteCommandLineExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Cmdtxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ScriptIntellisenseTextboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__CmdPriority_AutoID' combo box equals 'True'
        /// </summary>
        public bool PriorityComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResultIntellisenseTextboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Copy_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Copy_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathCopy' custom control equals 'True'
        /// </summary>
        public bool PathCopyExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__FileOrFoldertxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool FileOrFolderComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Destinationtxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool DestinationComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorCustomExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Overwrite' check box equals 'True'
        /// </summary>
        public bool OverwriteCheckBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Create_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Create_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathCreate' custom control equals 'True'
        /// </summary>
        public bool PathCreateExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__FileNametxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool FileNameoComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Overwrite' check box equals 'True'
        /// </summary>
        public bool OverwriteCheckBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorCustomExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Data_Merge_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Data_Merge_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
        /// </summary>
        public bool DataMergeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Data_Merge_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Data_Merge_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
        /// </summary>
        public bool DataMergeExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
        /// </summary>
        public bool QuickVariableInputContentExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Data_Split_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Data_Split_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
        /// </summary>
        public bool DataSplitExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Data_Split_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Data_Split_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
        /// </summary>
        public bool DataSplitExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
        /// </summary>
        public bool QuickVariableInputContentExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_DateTime_LargeView'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_DateTime_LargeViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__AddTimeAmounttxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool AddTimeAmountComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorCustomExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Inputtxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool InputComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_DateTimeDiff_LargeView'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_DateTimeDiff_LargeViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__InputFormattxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool InputFormatComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Input1txt_AutoID' combo box equals 'True'
        /// </summary>
        public bool Input1ComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Decision_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Decision_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Wpf' window equals 'True'
        /// </summary>
        public bool DecisionOrSwitchDialogExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Delete_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Delete_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathDelete' custom control equals 'True'
        /// </summary>
        public bool PathDeleteExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__FileNametxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool FileNameComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorCustomExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_DeleteRecords_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_DeleteRecords_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' group equals 'True'
        /// </summary>
        public bool OnErrorGroupExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResultComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Recorstxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool RecordsetComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__NullAsCheckBox_AutoID' check box equals 'True'
        /// </summary>
        public bool NullAsZeroCheckBoxCheckBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_DeleteWeb_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_DeleteWeb_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
        /// </summary>
        public bool LargeViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_DotNet_DLL_Connector_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_DotNet_DLL_Connector_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
        /// </summary>
        public bool LargeViewExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'NamespaceComboBox' combo box equals 'True'
        /// </summary>
        public bool ClassNameComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'ActionsComboBox' combo box equals 'True'
        /// </summary>
        public bool ActionsComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Generate Outputs' button equals 'True'
        /// </summary>
        public bool GenerateOutputsButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeDataGrid' table equals 'True'
        /// </summary>
        public bool InputsTableExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Explorer_First_Item_Dependancies_With_Context_Menu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Explorer_First_Item_Dependancies_With_Context_MenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Show Version History' menu item equals 'True'
        /// </summary>
        public bool ShowVersionHistoryExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'View Swagger' menu item equals 'True'
        /// </summary>
        public bool ViewSwaggerExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'View Swagger' menu item equals 'True'
        /// </summary>
        public bool ViewSwaggerEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Explorer_First_Item_With_Context_Menu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Explorer_First_Item_With_Context_MenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Open' menu item equals 'True'
        /// </summary>
        public bool OpenExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Find_Index_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Find_Index_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResultComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__InFieldtxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool InFieldComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Indextcbx_AutoID' combo box equals 'True'
        /// </summary>
        public bool IndexComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Characterstxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool CharactersComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Directioncbx_AutoID' combo box equals 'True'
        /// </summary>
        public bool DirectionComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_ForEach_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_ForEach_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__ForEachType_AutoID' combo box equals 'True'
        /// </summary>
        public bool TypeComboboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__ForEachFromTextbox_AutoID' combo box equals 'True'
        /// </summary>
        public bool ForEachFromIntellisenseTextboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__ForEachToTextbox_AutoID' combo box equals 'True'
        /// </summary>
        public bool ToIntellisenseTextboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Drop Activity Here' custom control equals 'True'
        /// </summary>
        public bool DropActivityHereExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorPaneExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_GET_Web_Connector_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_GET_Web_Connector_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SourcesComboBox' combo box equals 'True'
        /// </summary>
        public bool SourcesComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Generate Outputs' button equals 'True'
        /// </summary>
        public bool GenerateOutputsButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Javascript_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Javascript_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__txtScript_AutoID' combo box equals 'True'
        /// </summary>
        public bool ScriptIntellisenseComboboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__AttachmentsTxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool AttachmentsIntellisenseComboboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool AttachFileButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Escape sequences in variables' check box equals 'True'
        /// </summary>
        public bool EscapesequencesCheckBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResultIntellisenseComboboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorPaneExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Json_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Json_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
        /// </summary>
        public bool CreateJsonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Json_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Json_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
        /// </summary>
        public bool CreateJsonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Length_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Length_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Recorsettxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool RecordsetComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResultComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorCustomExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__NullAsCheckBox_AutoID' check box equals 'True'
        /// </summary>
        public bool NullAsZeroCheckBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Move_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Move_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathMove' custom control equals 'True'
        /// </summary>
        public bool PathMoveExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorCustomExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Destinationtxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool DestinationComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Overwrite' check box equals 'True'
        /// </summary>
        public bool OverwriteCheckBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_NumberFormat_Toolbox_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_NumberFormat_Toolbox_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' group equals 'True'
        /// </summary>
        public bool OnErrorGroupExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Result_Inputtxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResultInputComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__DecimalsToShow_Inputtxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool DecimalsToShowComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'RoundingComboBox' combo box equals 'True'
        /// </summary>
        public bool RoundingComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Number_Inputtxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool NumberInputComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_ODBC_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_ODBC_Tool_Large_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
        /// </summary>
        public bool LargeViewContentCustomExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Oracle_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Oracle_Tool_Large_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
        /// </summary>
        public bool LargeViewContentCustomExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Postgre_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Postgre_Tool_Large_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
        /// </summary>
        public bool LargeViewContentCustomExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_PostWeb_RequestTool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_PostWeb_RequestTool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
        /// </summary>
        public bool LargeViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Python_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Python_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__txtScript_AutoID' combo box equals 'True'
        /// </summary>
        public bool ScriptIntellisenseComboboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__AttachmentsTxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool AttachmentsIntellisenseComboboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool AttachFileButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Escape sequences in variables' check box equals 'True'
        /// </summary>
        public bool EscapesequencesCheckBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResultIntellisenseComboboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorPaneExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_RabbitMqConsume_LargeView'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_RabbitMqConsume_LargeViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__tostxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResponseComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Acknowledge' check box equals 'True'
        /// </summary>
        public bool AcknowledgeCheckBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'InitialFocusElement' combo box equals 'True'
        /// </summary>
        public bool SourceComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_RabbitMqPublish_LargeView'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_RabbitMqPublish_LargeViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Durable' check box equals 'True'
        /// </summary>
        public bool DurableCheckBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'New' button equals 'True'
        /// </summary>
        public bool NewSourceButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorCustomExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPublishRabbitMQActivity' custom control equals 'True'
        /// </summary>
        public bool RabbitMQPublishExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Random_Large_Tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Random_Large_ToolParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorCustomExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Lengthstxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool FromComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Lengthstxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ToComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Read_File_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Read_File_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFileRead' custom control equals 'True'
        /// </summary>
        public bool FileReadExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResultComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorCustomExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__FileNametxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool FileNameComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Read_Folder_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Read_Folder_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFolderRead' custom control equals 'True'
        /// </summary>
        public bool FolderReadExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Files & Folders' radio button equals 'True'
        /// </summary>
        public bool FilesFoldersRadioButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorCustomExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Directorytxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool DirectoryComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResultComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Rename_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Rename_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathRename' custom control equals 'True'
        /// </summary>
        public bool PathRenameExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorCustomExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Overwrite' check box equals 'True'
        /// </summary>
        public bool OverwriteCheckBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__FileOrFoldertxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool FileOrFolderComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Replace_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Replace_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResultComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Replacetxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ReplaceComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Findtxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool FindComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__InFiledstxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool InFiledsComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Ruby_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Ruby_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__txtScript_AutoID' combo box equals 'True'
        /// </summary>
        public bool ScriptIntellisenseComboboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__AttachmentsTxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool AttachmentsIntellisenseComboboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool AttachFileButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Escape sequences in variables' check box equals 'True'
        /// </summary>
        public bool EscapesequencesCheckBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ResultIntellisenseComboboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorPaneExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Selectandapply_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Selectandapply_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__FileNametxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool SelectFromIntellisenseTextboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__FileNametxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool AliasIntellisenseTextboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Drop Activity Here' custom control equals 'True'
        /// </summary>
        public bool DropActivityHereExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorPaneExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Sequence_Large_tool_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Sequence_Large_tool_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSequenceActivity' custom control equals 'True'
        /// </summary>
        public bool SequenceLargeViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_SMTP_Email_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_SMTP_Email_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
        /// </summary>
        public bool LargeViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_SQL_Bulk_Insert_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_SQL_Bulk_Insert_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
        /// </summary>
        public bool SqlBulkInsertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_SQL_Bulk_Insert_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
        /// </summary>
        public bool SqlBulkInsertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_SQL_Large_View_FromContextMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_SQL_Large_View_FromContextMenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New' button equals 'True'
        /// </summary>
        public bool NewDbSourceButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Sql_Server_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Sql_Server_Tool_Large_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
        /// </summary>
        public bool LargeViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Switch_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Switch_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'ActivityDefaultWindow' window equals 'True'
        /// </summary>
        public bool SwitchCaseDialogEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_System_Information_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_System_Information_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SmallDataGrid' table equals 'True'
        /// </summary>
        public bool SmallDataGridTableExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' group equals 'True'
        /// </summary>
        public bool OnErrorGroupExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_System_Information_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_System_Information_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfGatherSystemInformationActivity' custom control equals 'True'
        /// </summary>
        public bool GatherSystemInfoExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Unzip_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Unzip_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfUnZip' custom control equals 'True'
        /// </summary>
        public bool UnZipExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Overwrite' check box equals 'True'
        /// </summary>
        public bool OverwriteCheckBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__ZipNametxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool UnZipNameComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_WebRequest_LargeView'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_WebRequest_LargeViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'LargeViewContent' custom control equals 'True'
        /// </summary>
        public bool LargeViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Write_File_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Write_File_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFileWrite' custom control equals 'True'
        /// </summary>
        public bool FileWriteExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorCustomExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Contentstxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool ContentsComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Overwrite' radio button equals 'True'
        /// </summary>
        public bool OverwriteRadioButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Xpath_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Xpath_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
        /// </summary>
        public bool XPathExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Xpath_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Xpath_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
        /// </summary>
        public bool XPathExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
        /// </summary>
        public bool QuickVariableInputContentExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Zip_Tool_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Zip_Tool_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfZip' custom control equals 'True'
        /// </summary>
        public bool ZipExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__SelectedCompressionType_AutoID' combo box equals 'True'
        /// </summary>
        public bool SelectedCompressComboBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'On Error' custom control equals 'True'
        /// </summary>
        public bool OnErrorCustomExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Overwrite' check box equals 'True'
        /// </summary>
        public bool OverwriteCheckBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__FileOrFoldertxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool FileOrFolderComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Press_F6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Press_F6Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{F6}' in 'Warewolf' window
        /// </summary>
        public string MainStudioWindowSendKeys = "{F6}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PressF11_EnterFullScreen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PressF11_EnterFullScreenParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{F11}' in 'Warewolf' window
        /// </summary>
        public string MainStudioWindowSendKeys = "{F11}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RabbitMqAsserts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RabbitMqAssertsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'VirtualHostTextBox' text box equals 'True'
        /// </summary>
        public bool VirtualHostTextBoxEditExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'PasswordTextBox' text box equals 'True'
        /// </summary>
        public bool PasswordTextBoxEditExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UserNameTextBox' text box equals 'True'
        /// </summary>
        public bool UserNameTextBoxEditExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'HostTextBox' text box equals 'True'
        /// </summary>
        public bool HostTextBoxEditExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'PortTextBox' text box equals 'True'
        /// </summary>
        public bool PortTextBoxEditExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Remove_WorkflowName_From_Save_Dialog'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Remove_WorkflowName_From_Save_DialogParams
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'ServiceNameTextBox' text box
        /// </summary>
        public string ServiceNameTextBoxText = "";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of ''Name' cannot be empty.' label equals 'Cannot be null'
        /// </summary>
        public string ErrorLabelDisplayText = "Cannot be null";
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Save' button equals 'False'
        /// </summary>
        public bool SaveButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Rename_LocalWorkflow_To_SecodWorkFlow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Rename_LocalWorkflow_To_SecodWorkFlowParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'SecondWorkflow' in first text box next to 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
        /// </summary>
        public string ItemEditText = "SecondWorkflow";
        
        /// <summary>
        /// Type '{Enter}' in first text box next to 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
        /// </summary>
        public string ItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RightClick_Explorer_Localhost_First_Item'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RightClick_Explorer_Localhost_First_ItemParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Open' menu item equals 'True'
        /// </summary>
        public bool OpenExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Show Dependencies' menu item equals 'True'
        /// </summary>
        public bool ShowDependenciesExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Delete' menu item equals 'True'
        /// </summary>
        public bool DeleteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Search_And_Select_DiceRoll'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Search_And_Select_DiceRollParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Dice Roll' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Dice Roll";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Search_And_Select_HelloWolrd'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Search_And_Select_HelloWolrdParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello World' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "Hello World";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_Action_From_PostgreTool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_Action_From_PostgreToolParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'LargeDataGrid' table equals 'True'
        /// </summary>
        public bool LargeDataGridTableEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_Delete_FromExplorerContextMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_Delete_FromExplorerContextMenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Yes' button equals 'True'
        /// </summary>
        public bool YesButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_Deploy_FromExplorerContextMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_Deploy_FromExplorerContextMenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Dev2.ViewModels.DeployWorksurfaceViewModel' tab equals 'True'
        /// </summary>
        public bool DeployTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_Dev2TestingDB_From_DB_Source_Wizard_Database_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_Dev2TestingDB_From_DB_Source_Wizard_Database_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Dev2TestingDB' label equals 'Dev2TestingDB'
        /// </summary>
        public string UIDev2TestingDBTextDisplayText = "Dev2TestingDB";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_FirstItem_From_DotNet_DLL_Large_View_Action_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_FirstItem_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'ActionsComboBox' combo box equals 'Dev2.Common.Interfaces.PluginAction'
        /// </summary>
        public string ActionsComboBoxSelectedItem = "Dev2.Common.Interfaces.PluginAction";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_GetCountries_From_SQL_Server_Large_View_Action_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_GetCountries_From_SQL_Server_Large_View_Action_ComboboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'ActionsComboBox' combo box equals 'dbo.GetCountries'
        /// </summary>
        public string ActionsComboboxSelectedItem = "dbo.GetCountries";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_http_From_Server_Source_Wizard_Address_Protocol_Dropdown'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_http_From_Server_Source_Wizard_Address_Protocol_DropdownParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'http' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsHttpExists = true;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'http' label equals 'http'
        /// </summary>
        public string HttpSelectedItemTextDisplayText = "http";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Text' text box equals 'True'
        /// </summary>
        public bool AddressEditBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_Letters_From_Random_Type_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_Letters_From_Random_Type_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Lengthstxt_AutoID' combo box equals 'True'
        /// </summary>
        public bool LengthComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_LocalhostConnected_From_Deploy_Tab_Destination_Server_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsNewRemoteServerExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'localhost (Connected)' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsLocalhostConnectedExists = true;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Remote Connection Integration' label equals 'Remote Connection Integration'
        /// </summary>
        public string RemoteConnectionIntegrationTextDisplayText = "Remote Connection Integration";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_Dropdown'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_MSSQLSERVER_From_DB_Source_Wizard_Address_Protocol_DropdownParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Microsoft SQL Server' label equals 'True'
        /// </summary>
        public bool MicrosoftSQLServerTextExists = true;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Microsoft SQL Server' label equals 'Microsoft SQL Server'
        /// </summary>
        public string MicrosoftSQLServerDisplayText = "Microsoft SQL Server";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_NewDatabaseSource_FromSqlServerTool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_NewDatabaseSource_FromSqlServerToolParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Microsoft SQL Server' label equals 'Microsoft SQL Server'
        /// </summary>
        public string MicrosoftSQLServerDisplayText = "Microsoft SQL Server";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UserNameTextBox' text box equals 'True'
        /// </summary>
        public bool UserNameTextBoxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'PasswordTextBox' text box equals 'True'
        /// </summary>
        public bool PasswordTextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_NewEmailSource_FromExplorerContextMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_NewEmailSource_FromExplorerContextMenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ExplorerMenu' popup menu equals 'True'
        /// </summary>
        public bool ExplorerEnvironmentContextMenuExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'HostTextBox' text box equals 'True'
        /// </summary>
        public bool HostTextBoxEditExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UserNameTextBox' text box equals 'True'
        /// </summary>
        public bool UserNameTextBoxEditExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'PasswordTextBox' text box equals 'True'
        /// </summary>
        public bool PasswordTextBoxEditExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'PortTextBox' text box equals 'True'
        /// </summary>
        public bool PortTextBoxEditExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'TimeoutTextBox' text box equals 'True'
        /// </summary>
        public bool TimeoutTextBoxEditExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_NewSharepointSource_FromServer_Lookup'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_NewSharepointSource_FromServer_LookupParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Down}{Enter}' in 'UI__Database_AutoID' combo box
        /// </summary>
        public string ServerSendKeys = "{Down}{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_NewSharepointSource_FromServer_Lookup_On_SharepointCopyFile_Tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_NewSharepointSource_FromServer_Lookup_On_SharepointCopyFile_ToolParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Down}{Enter}' in 'UI__Database_AutoID' combo box
        /// </summary>
        public string ServerSendKeys = "{Down}{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_NewSharepointSource_FromServer_Lookup_On_SharepointMoveFile_Tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_NewSharepointSource_FromServer_Lookup_On_SharepointMoveFile_ToolParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Down}{Enter}' in 'UI__Database_AutoID' combo box
        /// </summary>
        public string ServerSendKeys = "{Down}{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_NewSharepointSource_FromServer_Lookup_On_SharepointUpload_Tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_NewSharepointSource_FromServer_Lookup_On_SharepointUpload_ToolParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Down}{Enter}' in 'UI__Database_AutoID' combo box
        /// </summary>
        public string SourceComboboxSendKeys = "{Down}{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_NewWorkFlowService_From_ContextMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_NewWorkFlowService_From_ContextMenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'New Workflow Service' menu item equals 'True'
        /// </summary>
        public bool NewWorkflowEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_Next_From_DotNet_DLL_Large_View_Action_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_Next_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'ActionsComboBox' combo box equals 'Next'
        /// </summary>
        public string ActionsComboBoxSelectedItem = "Next";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_RemoteConnectionIntegration_From_Deploy_Tab_Destination_Server_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsNewRemoteServerExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Remote Connection Integration' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsRemoteConnectionIntegrationExists = true;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Remote Connection Integration' label equals 'Remote Connection Integration'
        /// </summary>
        public string RemoteConnectionIntegrationTextDisplayText = "Remote Connection Integration";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_RemoteConnectionIntegration_From_Deploy_Tab_Source_Server_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsNewRemoteServerExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Remote Connection Integration' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsRemoteConnectionIntegrationExists = true;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Remote Connection Integration' label equals 'Remote Connection Integration'
        /// </summary>
        public string RemoteConnectionIntegrationTextDisplayText = "Remote Connection Integration";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_RemoteConnectionIntegrationConnected_From_Deploy_Tab_Source_Server_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsNewRemoteServerExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Remote Connection Integration (Connected)' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsRemoteConnectionIntegrationConnectedExists = true;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Remote Connection Integration' label equals 'Remote Connection Integration'
        /// </summary>
        public string RemoteConnectionIntegrationTextDisplayText = "Remote Connection Integration";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_Dropdownlist'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_RSAKLFSVRGENDEV_From_Server_Source_Wizard_DropdownlistExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Text' text box equals 'RSAKLFSVRGENDEV'
        /// </summary>
        public string TextboxText = "RSAKLFSVRGENDEV";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_SharepointTestServer_From_SharepointRead_Tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_SharepointTestServer_From_SharepointRead_ToolParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of '...' button equals 'True'
        /// </summary>
        public bool EditSourceButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_SharepointTestServer_From_SharepointUpdate_Tool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_SharepointTestServer_From_SharepointUpdate_ToolParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of '...' button equals 'True'
        /// </summary>
        public bool EditSourceButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_Source_From_DotnetTool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_Source_From_DotnetToolParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'NamespaceComboBox' combo box equals 'True'
        /// </summary>
        public bool ClassNameComboBoxEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'ActionsComboBox' combo box equals 'True'
        /// </summary>
        public bool ActionsComboBoxEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Generate Outputs' button equals 'True'
        /// </summary>
        public bool GenerateOutputsButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of row equals 'True'
        /// </summary>
        public bool Row1Enabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_Source_From_PostgreTool'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_Source_From_PostgreToolParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'ActionsComboBox' combo box equals 'True'
        /// </summary>
        public bool ActionsComboBoxEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_SystemObject_From_DotNet_DLL_Large_View_Namespace_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_SystemObject_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ComboboxlistItemAsSystemObject' list item equals 'True'
        /// </summary>
        public bool ComboboxlistItemAsSystemObjectExists = true;
        
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'NamespaceComboBox' combo box equals '{"AssemblyLocation":"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorlib.dll","AssemblyName":"mscorlib.dll","FullName":"System.Object","MethodName":null}'
        /// </summary>
        public string ClassNameComboBoxSelectedItem = "{\"AssemblyLocation\":\"C:\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\v4.0.30319\\\\mscorli" +
            "b.dll\",\"AssemblyName\":\"mscorlib.dll\",\"FullName\":\"System.Object\",\"MethodName\":nul" +
            "l}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_SystemRandom_From_DotNet_DLL_Large_View_Namespace_ComboboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'NamespaceComboBox' combo box equals '{"AssemblyLocation":"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorlib.dll","AssemblyName":"mscorlib.dll","FullName":"System.Random","MethodName":null}'
        /// </summary>
        public string ClassNameComboBoxSelectedItem = "{\"AssemblyLocation\":\"C:\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\v4.0.30319\\\\mscorli" +
            "b.dll\",\"AssemblyName\":\"mscorlib.dll\",\"FullName\":\"System.Random\",\"MethodName\":nul" +
            "l}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_Tests_From_Context_Menu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_Tests_From_Context_MenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Dev2.ViewModels.StudioTestViewModel' tab equals 'True'
        /// </summary>
        public bool TestsTabPageExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_ToString_From_DotNet_DLL_Large_View_Action_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_ToString_From_DotNet_DLL_Large_View_Action_ComboboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'ActionsComboBox' combo box equals 'ToString'
        /// </summary>
        public string ActionsComboBoxSelectedItem = "ToString";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_TSTCIREMOTE_From_Server_Source_Wizard_Dropdownlist'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_TSTCIREMOTE_From_Server_Source_Wizard_DropdownlistParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Text' text box equals 'TST-CI-REMOTE'
        /// </summary>
        public string AddressEditBoxText = "TST-CI-REMOTE";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Test Connection' button equals 'True'
        /// </summary>
        public bool TestConnectionButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_UITestingDBSource_From_SQL_Server_Large_View_Source_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_UITestingDBSource_From_SQL_Server_Large_View_Source_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'SourcesComboBox' combo box equals 'UITestingDBSource'
        /// </summary>
        public string SourcesComboboxSelectedItem = "UITestingDBSource";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_UITestingSource_From_Web_Server_Large_View_Source_Combobox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_UITestingSource_From_Web_Server_Large_View_Source_ComboboxParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of '...' button equals 'True'
        /// </summary>
        public bool EditSourceButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Generate Outputs' button equals 'True'
        /// </summary>
        public bool GenerateOutputsButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Select_User_From_RunTestAs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Select_User_From_RunTestAsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'User' radio button
        /// </summary>
        public bool UserRadioButtonSelected = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UsernameTextBox' text box equals 'True'
        /// </summary>
        public bool UsernameTextBoxEditExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'PasswordTextBox' text box equals 'True'
        /// </summary>
        public bool PasswordTextBoxEditExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Save this tab' button equals 'True'
        /// </summary>
        public bool SaveButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Show_Explorer_First_Item_Tests_With_Context_Menu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Show_Explorer_First_Item_Tests_With_Context_MenuParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Tests' menu item equals 'True'
        /// </summary>
        public bool TestsExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Create a new test' button equals 'True'
        /// </summary>
        public bool CreateTestButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_Textbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Type_0_Into_SQL_Server_Large_View_Inputs_Row1_Data_TextboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Type '0' in 'Text' text box
        /// </summary>
        public string DataTextboxText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Text' text box equals '0'
        /// </summary>
        public string DataTextboxText1 = "0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_Textbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Type_0_Into_SQL_Server_Large_View_Test_Inputs_Row1_Test_Data_TextboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Type '0' in 'Text' text box
        /// </summary>
        public string TestDataTextboxText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Text' text box equals '0'
        /// </summary>
        public string TestDataTextboxText1 = "0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_Textbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Type_rsaklfsvrgen_into_DB_Source_Wizard_Server_TextboxParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'rsaklfsvrgen' in 'Text' text box
        /// </summary>
        public string TextboxText = "rsaklfsvrgen";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'RSAKLFSVRGENDEV' list item equals 'True'
        /// </summary>
        public bool RSAKLFSVRGENDEVExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Type_TestSite_into_Web_Source_Wizard_Address_Textbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Type_TestSite_into_Web_Source_Wizard_Address_TextboxParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'http://rsaklfsvrtfsbld/IntegrationTestSite/Proxy.ashx' in 'ServerTextBox' text box
        /// </summary>
        public string AddressTextboxText = "http://rsaklfsvrtfsbld/IntegrationTestSite/Proxy.ashx";
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Test Connection' button equals 'True'
        /// </summary>
        public bool TestConnectionButtonEnabled = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MainStudioWindow : WpfWindow
    {
        
        public MainStudioWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.Name, "Warewolf", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabContextMenu TabContextMenu
        {
            get
            {
                if ((this.mTabContextMenu == null))
                {
                    this.mTabContextMenu = new TabContextMenu(this);
                }
                return this.mTabContextMenu;
            }
        }
        
        public ExplorerEnvironmentContextMenu ExplorerEnvironmentContextMenu
        {
            get
            {
                if ((this.mExplorerEnvironmentContextMenu == null))
                {
                    this.mExplorerEnvironmentContextMenu = new ExplorerEnvironmentContextMenu(this);
                }
                return this.mExplorerEnvironmentContextMenu;
            }
        }
        
        public ExplorerContextMenu ExplorerContextMenu
        {
            get
            {
                if ((this.mExplorerContextMenu == null))
                {
                    this.mExplorerContextMenu = new ExplorerContextMenu(this);
                }
                return this.mExplorerContextMenu;
            }
        }
        
        public DesignSurfaceContextMenu DesignSurfaceContextMenu
        {
            get
            {
                if ((this.mDesignSurfaceContextMenu == null))
                {
                    this.mDesignSurfaceContextMenu = new DesignSurfaceContextMenu(this);
                }
                return this.mDesignSurfaceContextMenu;
            }
        }
        
        public ExitFullScreenF11Text ExitFullScreenF11Text
        {
            get
            {
                if ((this.mExitFullScreenF11Text == null))
                {
                    this.mExitFullScreenF11Text = new ExitFullScreenF11Text(this);
                }
                return this.mExitFullScreenF11Text;
            }
        }
        
        public WpfButton LockStudioButton
        {
            get
            {
                if ((this.mLockStudioButton == null))
                {
                    this.mLockStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mLockStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_LOCK";
                    this.mLockStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLockStudioButton;
            }
        }
        
        public WpfButton MinimizeStudioButton
        {
            get
            {
                if ((this.mMinimizeStudioButton == null))
                {
                    this.mMinimizeStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mMinimizeStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_MINIMIZE";
                    this.mMinimizeStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMinimizeStudioButton;
            }
        }
        
        public WpfButton MaximizeRestoreStudioButton
        {
            get
            {
                if ((this.mMaximizeRestoreStudioButton == null))
                {
                    this.mMaximizeRestoreStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mMaximizeRestoreStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_SUPER_MAXIMIZE_RESTORE";
                    this.mMaximizeRestoreStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMaximizeRestoreStudioButton;
            }
        }
        
        public WpfButton MaximizeStudioButton
        {
            get
            {
                if ((this.mMaximizeStudioButton == null))
                {
                    this.mMaximizeStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mMaximizeStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_MAXIMIZE_RESTORE";
                    this.mMaximizeStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMaximizeStudioButton;
            }
        }
        
        public WpfButton CloseStudioButton
        {
            get
            {
                if ((this.mCloseStudioButton == null))
                {
                    this.mCloseStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_CLOSE";
                    this.mCloseStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseStudioButton;
            }
        }
        
        public SideMenuBar SideMenuBar
        {
            get
            {
                if ((this.mSideMenuBar == null))
                {
                    this.mSideMenuBar = new SideMenuBar(this);
                }
                return this.mSideMenuBar;
            }
        }
        
        public DockManager DockManager
        {
            get
            {
                if ((this.mDockManager == null))
                {
                    this.mDockManager = new DockManager(this);
                }
                return this.mDockManager;
            }
        }
        
        public DebugInputDialog DebugInputDialog
        {
            get
            {
                if ((this.mDebugInputDialog == null))
                {
                    this.mDebugInputDialog = new DebugInputDialog(this);
                }
                return this.mDebugInputDialog;
            }
        }
        
        public ComboboxListItemAsNewRemoteServer ComboboxListItemAsNewRemoteServer
        {
            get
            {
                if ((this.mComboboxListItemAsNewRemoteServer == null))
                {
                    this.mComboboxListItemAsNewRemoteServer = new ComboboxListItemAsNewRemoteServer(this);
                }
                return this.mComboboxListItemAsNewRemoteServer;
            }
        }
        
        public WpfText ComboboxListItemAsTSTCIREMOTE
        {
            get
            {
                if ((this.mComboboxListItemAsTSTCIREMOTE == null))
                {
                    this.mComboboxListItemAsTSTCIREMOTE = new WpfText(this);
                    #region Search Criteria
                    this.mComboboxListItemAsTSTCIREMOTE.SearchProperties[WpfText.PropertyNames.Name] = "TSTCIREMOTE";
                    this.mComboboxListItemAsTSTCIREMOTE.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsTSTCIREMOTE;
            }
        }
        
        public WpfText ComboboxListItemAsTSTCIREMOTEConnected
        {
            get
            {
                if ((this.mComboboxListItemAsTSTCIREMOTEConnected == null))
                {
                    this.mComboboxListItemAsTSTCIREMOTEConnected = new WpfText(this);
                    #region Search Criteria
                    this.mComboboxListItemAsTSTCIREMOTEConnected.SearchProperties[WpfText.PropertyNames.Name] = "TSTCIREMOTE (Connected)";
                    this.mComboboxListItemAsTSTCIREMOTEConnected.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsTSTCIREMOTEConnected;
            }
        }
        
        public WpfText ComboboxListItemAsLocalhost
        {
            get
            {
                if ((this.mComboboxListItemAsLocalhost == null))
                {
                    this.mComboboxListItemAsLocalhost = new WpfText(this);
                    #region Search Criteria
                    this.mComboboxListItemAsLocalhost.SearchProperties[WpfText.PropertyNames.Name] = "localhost";
                    this.mComboboxListItemAsLocalhost.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsLocalhost;
            }
        }
        
        public ComboboxListItemAsRemoteConnectionIntegration ComboboxListItemAsRemoteConnectionIntegration
        {
            get
            {
                if ((this.mComboboxListItemAsRemoteConnectionIntegration == null))
                {
                    this.mComboboxListItemAsRemoteConnectionIntegration = new ComboboxListItemAsRemoteConnectionIntegration(this);
                }
                return this.mComboboxListItemAsRemoteConnectionIntegration;
            }
        }
        
        public WpfCustom ComboboxListItemAsLocalhostConnected
        {
            get
            {
                if ((this.mComboboxListItemAsLocalhostConnected == null))
                {
                    this.mComboboxListItemAsLocalhostConnected = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsLocalhostConnected.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAsLocalhostConnected.SearchProperties[WpfControl.PropertyNames.Name] = "localhost (Connected)";
                    this.mComboboxListItemAsLocalhostConnected.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsLocalhostConnected;
            }
        }
        
        public WpfCustom ComboboxListItemAsRemoteConnectionIntegrationConnected
        {
            get
            {
                if ((this.mComboboxListItemAsRemoteConnectionIntegrationConnected == null))
                {
                    this.mComboboxListItemAsRemoteConnectionIntegrationConnected = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsRemoteConnectionIntegrationConnected.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAsRemoteConnectionIntegrationConnected.SearchProperties[WpfControl.PropertyNames.Name] = "Remote Connection Integration (Connected)";
                    this.mComboboxListItemAsRemoteConnectionIntegrationConnected.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsRemoteConnectionIntegrationConnected;
            }
        }
        
        public WpfCustom ComboboxListItemAsHttp
        {
            get
            {
                if ((this.mComboboxListItemAsHttp == null))
                {
                    this.mComboboxListItemAsHttp = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsHttp.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAsHttp.SearchProperties[WpfControl.PropertyNames.Name] = "http";
                    this.mComboboxListItemAsHttp.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsHttp;
            }
        }
        
        public ComboboxListItemAsMicrosoftSQLServer ComboboxListItemAsMicrosoftSQLServer
        {
            get
            {
                if ((this.mComboboxListItemAsMicrosoftSQLServer == null))
                {
                    this.mComboboxListItemAsMicrosoftSQLServer = new ComboboxListItemAsMicrosoftSQLServer(this);
                }
                return this.mComboboxListItemAsMicrosoftSQLServer;
            }
        }
        
        public WpfCustom ComboboxListItemAsDev2TestingDB
        {
            get
            {
                if ((this.mComboboxListItemAsDev2TestingDB == null))
                {
                    this.mComboboxListItemAsDev2TestingDB = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsDev2TestingDB.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAsDev2TestingDB.SearchProperties[WpfControl.PropertyNames.Name] = "Dev2TestingDB";
                    this.mComboboxListItemAsDev2TestingDB.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsDev2TestingDB;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem1
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem1 == null))
                {
                    this.mWebServerSourceComboboxListItem1 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem1.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem1.SearchProperties[WpfListItem.PropertyNames.Instance] = "1";
                    this.mWebServerSourceComboboxListItem1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem1;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem10
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem10 == null))
                {
                    this.mWebServerSourceComboboxListItem10 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem10.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem10.SearchProperties[WpfListItem.PropertyNames.Instance] = "10";
                    this.mWebServerSourceComboboxListItem10.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem10;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem2
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem2 == null))
                {
                    this.mWebServerSourceComboboxListItem2 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem2.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem2.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mWebServerSourceComboboxListItem2.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem2;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem3
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem3 == null))
                {
                    this.mWebServerSourceComboboxListItem3 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem3.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem3.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
                    this.mWebServerSourceComboboxListItem3.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem3;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem4
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem4 == null))
                {
                    this.mWebServerSourceComboboxListItem4 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem4.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem4.SearchProperties[WpfListItem.PropertyNames.Instance] = "4";
                    this.mWebServerSourceComboboxListItem4.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem4;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem5
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem5 == null))
                {
                    this.mWebServerSourceComboboxListItem5 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem5.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem5.SearchProperties[WpfListItem.PropertyNames.Instance] = "5";
                    this.mWebServerSourceComboboxListItem5.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem5;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem6
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem6 == null))
                {
                    this.mWebServerSourceComboboxListItem6 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem6.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem6.SearchProperties[WpfListItem.PropertyNames.Instance] = "6";
                    this.mWebServerSourceComboboxListItem6.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem6;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem7
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem7 == null))
                {
                    this.mWebServerSourceComboboxListItem7 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem7.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem7.SearchProperties[WpfListItem.PropertyNames.Instance] = "7";
                    this.mWebServerSourceComboboxListItem7.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem7;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem8
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem8 == null))
                {
                    this.mWebServerSourceComboboxListItem8 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem8.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem8.SearchProperties[WpfListItem.PropertyNames.Instance] = "8";
                    this.mWebServerSourceComboboxListItem8.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem8;
            }
        }
        
        public WpfListItem WebServerSourceComboboxListItem9
        {
            get
            {
                if ((this.mWebServerSourceComboboxListItem9 == null))
                {
                    this.mWebServerSourceComboboxListItem9 = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServerSourceComboboxListItem9.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mWebServerSourceComboboxListItem9.SearchProperties[WpfListItem.PropertyNames.Instance] = "9";
                    this.mWebServerSourceComboboxListItem9.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebServerSourceComboboxListItem9;
            }
        }
        
        public WpfCustom ComboboxListItemAsWarewolfStore
        {
            get
            {
                if ((this.mComboboxListItemAsWarewolfStore == null))
                {
                    this.mComboboxListItemAsWarewolfStore = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsWarewolfStore.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAsWarewolfStore.SearchProperties[WpfControl.PropertyNames.Name] = "WarewolfStore";
                    this.mComboboxListItemAsWarewolfStore.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsWarewolfStore;
            }
        }
        
        public ComboboxListItemPostgreSqlDatabase ComboboxListItemPostgreSqlDatabase
        {
            get
            {
                if ((this.mComboboxListItemPostgreSqlDatabase == null))
                {
                    this.mComboboxListItemPostgreSqlDatabase = new ComboboxListItemPostgreSqlDatabase(this);
                }
                return this.mComboboxListItemPostgreSqlDatabase;
            }
        }
        
        public WpfCustom ComboboxListItemOracleDatabase
        {
            get
            {
                if ((this.mComboboxListItemOracleDatabase == null))
                {
                    this.mComboboxListItemOracleDatabase = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemOracleDatabase.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemOracleDatabase.SearchProperties[WpfControl.PropertyNames.Name] = "Oracle Database";
                    this.mComboboxListItemOracleDatabase.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemOracleDatabase;
            }
        }
        
        public ComboboxListItemODBCDatabase ComboboxListItemODBCDatabase
        {
            get
            {
                if ((this.mComboboxListItemODBCDatabase == null))
                {
                    this.mComboboxListItemODBCDatabase = new ComboboxListItemODBCDatabase(this);
                }
                return this.mComboboxListItemODBCDatabase;
            }
        }
        
        public ComboboxListItemMySqlDatabase ComboboxListItemMySqlDatabase
        {
            get
            {
                if ((this.mComboboxListItemMySqlDatabase == null))
                {
                    this.mComboboxListItemMySqlDatabase = new ComboboxListItemMySqlDatabase(this);
                }
                return this.mComboboxListItemMySqlDatabase;
            }
        }
        
        public WpfToggleButton ExpandAllToggleButton
        {
            get
            {
                if ((this.mExpandAllToggleButton == null))
                {
                    this.mExpandAllToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mExpandAllToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "expandAllButton";
                    this.mExpandAllToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpandAllToggleButton;
            }
        }
        
        public WpfListItem ComboBoxListItemAsForEachInCSV
        {
            get
            {
                if ((this.mComboBoxListItemAsForEachInCSV == null))
                {
                    this.mComboBoxListItemAsForEachInCSV = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboBoxListItemAsForEachInCSV.SearchProperties[WpfListItem.PropertyNames.Name] = "* in CSV";
                    this.mComboBoxListItemAsForEachInCSV.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboBoxListItemAsForEachInCSV;
            }
        }
        
        public WpfListItem ComboBoxListItemAsForEachInRange
        {
            get
            {
                if ((this.mComboBoxListItemAsForEachInRange == null))
                {
                    this.mComboBoxListItemAsForEachInRange = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboBoxListItemAsForEachInRange.SearchProperties[WpfListItem.PropertyNames.Name] = "* in Range";
                    this.mComboBoxListItemAsForEachInRange.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboBoxListItemAsForEachInRange;
            }
        }
        
        public WpfListItem ComboBoxListItemAsForEachInRecordset
        {
            get
            {
                if ((this.mComboBoxListItemAsForEachInRecordset == null))
                {
                    this.mComboBoxListItemAsForEachInRecordset = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboBoxListItemAsForEachInRecordset.SearchProperties[WpfListItem.PropertyNames.Name] = "* in Recordset";
                    this.mComboBoxListItemAsForEachInRecordset.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboBoxListItemAsForEachInRecordset;
            }
        }
        
        public WpfListItem ComboBoxListItemAsForEachNoofExecutes
        {
            get
            {
                if ((this.mComboBoxListItemAsForEachNoofExecutes == null))
                {
                    this.mComboBoxListItemAsForEachNoofExecutes = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboBoxListItemAsForEachNoofExecutes.SearchProperties[WpfListItem.PropertyNames.Name] = "No. of Executes";
                    this.mComboBoxListItemAsForEachNoofExecutes.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboBoxListItemAsForEachNoofExecutes;
            }
        }
        #endregion
        
        #region Fields
        private TabContextMenu mTabContextMenu;
        
        private ExplorerEnvironmentContextMenu mExplorerEnvironmentContextMenu;
        
        private ExplorerContextMenu mExplorerContextMenu;
        
        private DesignSurfaceContextMenu mDesignSurfaceContextMenu;
        
        private ExitFullScreenF11Text mExitFullScreenF11Text;
        
        private WpfButton mLockStudioButton;
        
        private WpfButton mMinimizeStudioButton;
        
        private WpfButton mMaximizeRestoreStudioButton;
        
        private WpfButton mMaximizeStudioButton;
        
        private WpfButton mCloseStudioButton;
        
        private SideMenuBar mSideMenuBar;
        
        private DockManager mDockManager;
        
        private DebugInputDialog mDebugInputDialog;
        
        private ComboboxListItemAsNewRemoteServer mComboboxListItemAsNewRemoteServer;
        
        private WpfText mComboboxListItemAsTSTCIREMOTE;
        
        private WpfText mComboboxListItemAsTSTCIREMOTEConnected;
        
        private WpfText mComboboxListItemAsLocalhost;
        
        private ComboboxListItemAsRemoteConnectionIntegration mComboboxListItemAsRemoteConnectionIntegration;
        
        private WpfCustom mComboboxListItemAsLocalhostConnected;
        
        private WpfCustom mComboboxListItemAsRemoteConnectionIntegrationConnected;
        
        private WpfCustom mComboboxListItemAsHttp;
        
        private ComboboxListItemAsMicrosoftSQLServer mComboboxListItemAsMicrosoftSQLServer;
        
        private WpfCustom mComboboxListItemAsDev2TestingDB;
        
        private WpfListItem mWebServerSourceComboboxListItem1;
        
        private WpfListItem mWebServerSourceComboboxListItem10;
        
        private WpfListItem mWebServerSourceComboboxListItem2;
        
        private WpfListItem mWebServerSourceComboboxListItem3;
        
        private WpfListItem mWebServerSourceComboboxListItem4;
        
        private WpfListItem mWebServerSourceComboboxListItem5;
        
        private WpfListItem mWebServerSourceComboboxListItem6;
        
        private WpfListItem mWebServerSourceComboboxListItem7;
        
        private WpfListItem mWebServerSourceComboboxListItem8;
        
        private WpfListItem mWebServerSourceComboboxListItem9;
        
        private WpfCustom mComboboxListItemAsWarewolfStore;
        
        private ComboboxListItemPostgreSqlDatabase mComboboxListItemPostgreSqlDatabase;
        
        private WpfCustom mComboboxListItemOracleDatabase;
        
        private ComboboxListItemODBCDatabase mComboboxListItemODBCDatabase;
        
        private ComboboxListItemMySqlDatabase mComboboxListItemMySqlDatabase;
        
        private WpfToggleButton mExpandAllToggleButton;
        
        private WpfListItem mComboBoxListItemAsForEachInCSV;
        
        private WpfListItem mComboBoxListItemAsForEachInRange;
        
        private WpfListItem mComboBoxListItemAsForEachInRecordset;
        
        private WpfListItem mComboBoxListItemAsForEachNoofExecutes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabContextMenu : WpfMenu
    {
        
        public TabContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem Close
        {
            get
            {
                if ((this.mClose == null))
                {
                    this.mClose = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mClose.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Close";
                    this.mClose.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mClose;
            }
        }
        
        public WpfMenuItem UICloseAllButThisMenuItem
        {
            get
            {
                if ((this.mUICloseAllButThisMenuItem == null))
                {
                    this.mUICloseAllButThisMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUICloseAllButThisMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Close All But This";
                    this.mUICloseAllButThisMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUICloseAllButThisMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mClose;
        
        private WpfMenuItem mUICloseAllButThisMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerEnvironmentContextMenu : WpfMenu
    {
        
        public ExplorerEnvironmentContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.AutomationId] = "ExplorerEnvironmentMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem Open
        {
            get
            {
                if ((this.mOpen == null))
                {
                    this.mOpen = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mOpen.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Open";
                    this.mOpen.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpen;
            }
        }
        
        public WpfMenuItem NewWorkflow
        {
            get
            {
                if ((this.mNewWorkflow == null))
                {
                    this.mNewWorkflow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewWorkflow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewService";
                    this.mNewWorkflow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWorkflow;
            }
        }
        
        public WpfMenuItem NewServerSource
        {
            get
            {
                if ((this.mNewServerSource == null))
                {
                    this.mNewServerSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewServerSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewServerSource";
                    this.mNewServerSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerSource;
            }
        }
        
        public WpfMenuItem NewDatabaseSource
        {
            get
            {
                if ((this.mNewDatabaseSource == null))
                {
                    this.mNewDatabaseSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewDatabaseSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewDataBaseSource";
                    this.mNewDatabaseSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewDatabaseSource;
            }
        }
        
        public WpfMenuItem NewWebServiceSource
        {
            get
            {
                if ((this.mNewWebServiceSource == null))
                {
                    this.mNewWebServiceSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewWebServiceSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewWebSource";
                    this.mNewWebServiceSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWebServiceSource;
            }
        }
        
        public WpfMenuItem NewPluginSource
        {
            get
            {
                if ((this.mNewPluginSource == null))
                {
                    this.mNewPluginSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewPluginSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewPluginSource";
                    this.mNewPluginSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewPluginSource;
            }
        }
        
        public WpfMenuItem NewEmailSource
        {
            get
            {
                if ((this.mNewEmailSource == null))
                {
                    this.mNewEmailSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewEmailSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewEmailSource";
                    this.mNewEmailSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewEmailSource;
            }
        }
        
        public WpfMenuItem NewDropboxSource
        {
            get
            {
                if ((this.mNewDropboxSource == null))
                {
                    this.mNewDropboxSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewDropboxSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewDropboxSource";
                    this.mNewDropboxSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewDropboxSource;
            }
        }
        
        public WpfMenuItem NewSharepointSource
        {
            get
            {
                if ((this.mNewSharepointSource == null))
                {
                    this.mNewSharepointSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewSharepointSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewSharepointSource";
                    this.mNewSharepointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharepointSource;
            }
        }
        
        public WpfMenuItem NewFolder
        {
            get
            {
                if ((this.mNewFolder == null))
                {
                    this.mNewFolder = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewFolder.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewFolderFromItem";
                    this.mNewFolder.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewFolder;
            }
        }
        
        public WpfMenuItem Rename
        {
            get
            {
                if ((this.mRename == null))
                {
                    this.mRename = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mRename.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Rename";
                    this.mRename.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRename;
            }
        }
        
        public WpfMenuItem Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDelete.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Delete";
                    this.mDelete.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDelete;
            }
        }
        
        public WpfMenuItem Deploy
        {
            get
            {
                if ((this.mDeploy == null))
                {
                    this.mDeploy = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeploy.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Deploy";
                    this.mDeploy.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeploy;
            }
        }
        
        public WpfMenuItem ShowServerVersion
        {
            get
            {
                if ((this.mShowServerVersion == null))
                {
                    this.mShowServerVersion = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowServerVersion.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ServerVersion";
                    this.mShowServerVersion.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowServerVersion;
            }
        }
        
        public WpfMenuItem ShowDependencies
        {
            get
            {
                if ((this.mShowDependencies == null))
                {
                    this.mShowDependencies = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowDependencies.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Dependencies";
                    this.mShowDependencies.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowDependencies;
            }
        }
        
        public WpfMenuItem Duplicate
        {
            get
            {
                if ((this.mDuplicate == null))
                {
                    this.mDuplicate = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDuplicate.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Duplicate";
                    this.mDuplicate.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDuplicate;
            }
        }
        
        public WpfMenuItem ViewSwagger
        {
            get
            {
                if ((this.mViewSwagger == null))
                {
                    this.mViewSwagger = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mViewSwagger.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ViewSwagger";
                    this.mViewSwagger.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewSwagger;
            }
        }
        
        public WpfMenuItem ShowVersionHistory
        {
            get
            {
                if ((this.mShowVersionHistory == null))
                {
                    this.mShowVersionHistory = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowVersionHistory.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ShowHideVersions";
                    this.mShowVersionHistory.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowVersionHistory;
            }
        }
        
        public WpfMenuItem Tests
        {
            get
            {
                if ((this.mTests == null))
                {
                    this.mTests = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mTests.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Test";
                    this.mTests.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTests;
            }
        }
        
        public WpfMenuItem ViewApisJsonMenuItem
        {
            get
            {
                if ((this.mViewApisJsonMenuItem == null))
                {
                    this.mViewApisJsonMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mViewApisJsonMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ViewApisJson";
                    this.mViewApisJsonMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewApisJsonMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mOpen;
        
        private WpfMenuItem mNewWorkflow;
        
        private WpfMenuItem mNewServerSource;
        
        private WpfMenuItem mNewDatabaseSource;
        
        private WpfMenuItem mNewWebServiceSource;
        
        private WpfMenuItem mNewPluginSource;
        
        private WpfMenuItem mNewEmailSource;
        
        private WpfMenuItem mNewDropboxSource;
        
        private WpfMenuItem mNewSharepointSource;
        
        private WpfMenuItem mNewFolder;
        
        private WpfMenuItem mRename;
        
        private WpfMenuItem mDelete;
        
        private WpfMenuItem mDeploy;
        
        private WpfMenuItem mShowServerVersion;
        
        private WpfMenuItem mShowDependencies;
        
        private WpfMenuItem mDuplicate;
        
        private WpfMenuItem mViewSwagger;
        
        private WpfMenuItem mShowVersionHistory;
        
        private WpfMenuItem mTests;
        
        private WpfMenuItem mViewApisJsonMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerContextMenu : WpfMenu
    {
        
        public ExplorerContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.AutomationId] = "ExplorerMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem Open
        {
            get
            {
                if ((this.mOpen == null))
                {
                    this.mOpen = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mOpen.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Open";
                    this.mOpen.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpen;
            }
        }
        
        public WpfMenuItem NewWorkflow
        {
            get
            {
                if ((this.mNewWorkflow == null))
                {
                    this.mNewWorkflow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewWorkflow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewService";
                    this.mNewWorkflow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWorkflow;
            }
        }
        
        public WpfMenuItem NewServerSource
        {
            get
            {
                if ((this.mNewServerSource == null))
                {
                    this.mNewServerSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewServerSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewServerSource";
                    this.mNewServerSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerSource;
            }
        }
        
        public WpfMenuItem NewDatabaseSource
        {
            get
            {
                if ((this.mNewDatabaseSource == null))
                {
                    this.mNewDatabaseSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewDatabaseSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewDataBaseSource";
                    this.mNewDatabaseSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewDatabaseSource;
            }
        }
        
        public WpfMenuItem NewWebServiceSource
        {
            get
            {
                if ((this.mNewWebServiceSource == null))
                {
                    this.mNewWebServiceSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewWebServiceSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewWebSource";
                    this.mNewWebServiceSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWebServiceSource;
            }
        }
        
        public WpfMenuItem NewPluginSource
        {
            get
            {
                if ((this.mNewPluginSource == null))
                {
                    this.mNewPluginSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewPluginSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewPluginSource";
                    this.mNewPluginSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewPluginSource;
            }
        }
        
        public WpfMenuItem NewEmailSource
        {
            get
            {
                if ((this.mNewEmailSource == null))
                {
                    this.mNewEmailSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewEmailSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewEmailSource";
                    this.mNewEmailSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewEmailSource;
            }
        }
        
        public WpfMenuItem NewDropboxSource
        {
            get
            {
                if ((this.mNewDropboxSource == null))
                {
                    this.mNewDropboxSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewDropboxSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewDropboxSource";
                    this.mNewDropboxSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewDropboxSource;
            }
        }
        
        public WpfMenuItem NewSharepointSource
        {
            get
            {
                if ((this.mNewSharepointSource == null))
                {
                    this.mNewSharepointSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewSharepointSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewSharepointSource";
                    this.mNewSharepointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharepointSource;
            }
        }
        
        public WpfMenuItem NewFolder
        {
            get
            {
                if ((this.mNewFolder == null))
                {
                    this.mNewFolder = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewFolder.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewFolderFromItem";
                    this.mNewFolder.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewFolder;
            }
        }
        
        public WpfMenuItem Rename
        {
            get
            {
                if ((this.mRename == null))
                {
                    this.mRename = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mRename.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Rename";
                    this.mRename.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRename;
            }
        }
        
        public WpfMenuItem Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDelete.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Delete";
                    this.mDelete.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDelete;
            }
        }
        
        public WpfMenuItem Deploy
        {
            get
            {
                if ((this.mDeploy == null))
                {
                    this.mDeploy = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeploy.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Deploy";
                    this.mDeploy.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeploy;
            }
        }
        
        public WpfMenuItem ShowServerVersion
        {
            get
            {
                if ((this.mShowServerVersion == null))
                {
                    this.mShowServerVersion = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowServerVersion.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ServerVersion";
                    this.mShowServerVersion.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowServerVersion;
            }
        }
        
        public WpfMenuItem ShowDependencies
        {
            get
            {
                if ((this.mShowDependencies == null))
                {
                    this.mShowDependencies = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowDependencies.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Dependencies";
                    this.mShowDependencies.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowDependencies;
            }
        }
        
        public WpfMenuItem Duplicate
        {
            get
            {
                if ((this.mDuplicate == null))
                {
                    this.mDuplicate = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDuplicate.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Duplicate";
                    this.mDuplicate.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDuplicate;
            }
        }
        
        public WpfMenuItem ViewSwagger
        {
            get
            {
                if ((this.mViewSwagger == null))
                {
                    this.mViewSwagger = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mViewSwagger.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ViewSwagger";
                    this.mViewSwagger.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewSwagger;
            }
        }
        
        public WpfMenuItem ShowVersionHistory
        {
            get
            {
                if ((this.mShowVersionHistory == null))
                {
                    this.mShowVersionHistory = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowVersionHistory.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ShowHideVersions";
                    this.mShowVersionHistory.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowVersionHistory;
            }
        }
        
        public WpfMenuItem Tests
        {
            get
            {
                if ((this.mTests == null))
                {
                    this.mTests = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mTests.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Test";
                    this.mTests.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTests;
            }
        }
        
        public WpfMenuItem ViewSwaggerMenuItem
        {
            get
            {
                if ((this.mViewSwaggerMenuItem == null))
                {
                    this.mViewSwaggerMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mViewSwaggerMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ViewSwagger";
                    this.mViewSwaggerMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewSwaggerMenuItem;
            }
        }
        
        public WpfMenuItem NewFolderMenuItem
        {
            get
            {
                if ((this.mNewFolderMenuItem == null))
                {
                    this.mNewFolderMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewFolderMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewFolderFromItem";
                    this.mNewFolderMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewFolderMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mOpen;
        
        private WpfMenuItem mNewWorkflow;
        
        private WpfMenuItem mNewServerSource;
        
        private WpfMenuItem mNewDatabaseSource;
        
        private WpfMenuItem mNewWebServiceSource;
        
        private WpfMenuItem mNewPluginSource;
        
        private WpfMenuItem mNewEmailSource;
        
        private WpfMenuItem mNewDropboxSource;
        
        private WpfMenuItem mNewSharepointSource;
        
        private WpfMenuItem mNewFolder;
        
        private WpfMenuItem mRename;
        
        private WpfMenuItem mDelete;
        
        private WpfMenuItem mDeploy;
        
        private WpfMenuItem mShowServerVersion;
        
        private WpfMenuItem mShowDependencies;
        
        private WpfMenuItem mDuplicate;
        
        private WpfMenuItem mViewSwagger;
        
        private WpfMenuItem mShowVersionHistory;
        
        private WpfMenuItem mTests;
        
        private WpfMenuItem mViewSwaggerMenuItem;
        
        private WpfMenuItem mNewFolderMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DesignSurfaceContextMenu : WpfMenu
    {
        
        public DesignSurfaceContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem Cut
        {
            get
            {
                if ((this.mCut == null))
                {
                    this.mCut = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mCut.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "CutMenuItem";
                    this.mCut.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCut;
            }
        }
        
        public WpfMenuItem Paste
        {
            get
            {
                if ((this.mPaste == null))
                {
                    this.mPaste = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mPaste.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "PasteMenuItem";
                    this.mPaste.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPaste;
            }
        }
        
        public WpfMenuItem Copy
        {
            get
            {
                if ((this.mCopy == null))
                {
                    this.mCopy = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mCopy.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "CopyMenuItem";
                    this.mCopy.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCopy;
            }
        }
        
        public WpfMenuItem Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDelete.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "DeleteMenuItem";
                    this.mDelete.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDelete;
            }
        }
        
        public WpfMenuItem CopyasImage
        {
            get
            {
                if ((this.mCopyasImage == null))
                {
                    this.mCopyasImage = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mCopyasImage.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "CopyAsImageMenuItem";
                    this.mCopyasImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCopyasImage;
            }
        }
        
        public WpfMenuItem SaveasImage
        {
            get
            {
                if ((this.mSaveasImage == null))
                {
                    this.mSaveasImage = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mSaveasImage.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "SaveAsImageMenuItem";
                    this.mSaveasImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSaveasImage;
            }
        }
        
        public WpfMenuItem SetasStartNode
        {
            get
            {
                if ((this.mSetasStartNode == null))
                {
                    this.mSetasStartNode = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mSetasStartNode.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "SetAsStartNodeMenuItem";
                    this.mSetasStartNode.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSetasStartNode;
            }
        }
        
        public WpfMenuItem ShowLargeView
        {
            get
            {
                if ((this.mShowLargeView == null))
                {
                    this.mShowLargeView = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowLargeView.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_ShowLargeViewMenuItem_AutoID";
                    this.mShowLargeView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowLargeView;
            }
        }
        
        public WpfMenuItem InsertRow
        {
            get
            {
                if ((this.mInsertRow == null))
                {
                    this.mInsertRow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mInsertRow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_InsertRowMenuItem_AutoID";
                    this.mInsertRow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInsertRow;
            }
        }
        
        public WpfMenuItem DeleteRow
        {
            get
            {
                if ((this.mDeleteRow == null))
                {
                    this.mDeleteRow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeleteRow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_DeleteRowMenuItem_AutoID";
                    this.mDeleteRow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteRow;
            }
        }
        
        public WpfMenuItem InsertRowMenuItem
        {
            get
            {
                if ((this.mInsertRowMenuItem == null))
                {
                    this.mInsertRowMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mInsertRowMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_InsertRowMenuItem_AutoID";
                    this.mInsertRowMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInsertRowMenuItem;
            }
        }
        
        public WpfMenuItem DeleteRowMenuItem
        {
            get
            {
                if ((this.mDeleteRowMenuItem == null))
                {
                    this.mDeleteRowMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeleteRowMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_DeleteRowMenuItem_AutoID";
                    this.mDeleteRowMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteRowMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mCut;
        
        private WpfMenuItem mPaste;
        
        private WpfMenuItem mCopy;
        
        private WpfMenuItem mDelete;
        
        private WpfMenuItem mCopyasImage;
        
        private WpfMenuItem mSaveasImage;
        
        private WpfMenuItem mSetasStartNode;
        
        private WpfMenuItem mShowLargeView;
        
        private WpfMenuItem mInsertRow;
        
        private WpfMenuItem mDeleteRow;
        
        private WpfMenuItem mInsertRowMenuItem;
        
        private WpfMenuItem mDeleteRowMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExitFullScreenF11Text : WpfText
    {
        
        public ExitFullScreenF11Text(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Exit Full Screen (F11)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink ExitFullScreenF11Hyperlink
        {
            get
            {
                if ((this.mExitFullScreenF11Hyperlink == null))
                {
                    this.mExitFullScreenF11Hyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mExitFullScreenF11Hyperlink.SearchProperties[WpfHyperlink.PropertyNames.Name] = "Exit Full Screen (F11)";
                    this.mExitFullScreenF11Hyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExitFullScreenF11Hyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mExitFullScreenF11Hyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SideMenuBar : WpfCustom
    {
        
        public SideMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MenuView";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DatabaseSourceButton
        {
            get
            {
                if ((this.mDatabaseSourceButton == null))
                {
                    this.mDatabaseSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDatabaseSourceButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new database source", PropertyExpressionOperator.Contains));
                    this.mDatabaseSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDatabaseSourceButton;
            }
        }
        
        public WpfButton PluginSourceButton
        {
            get
            {
                if ((this.mPluginSourceButton == null))
                {
                    this.mPluginSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mPluginSourceButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new plugin source", PropertyExpressionOperator.Contains));
                    this.mPluginSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPluginSourceButton;
            }
        }
        
        public WpfButton WebSourceButton
        {
            get
            {
                if ((this.mWebSourceButton == null))
                {
                    this.mWebSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mWebSourceButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new web source", PropertyExpressionOperator.Contains));
                    this.mWebSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebSourceButton;
            }
        }
        
        public WpfButton NewVersionButton
        {
            get
            {
                if ((this.mNewVersionButton == null))
                {
                    this.mNewVersionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewVersionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "VersionButton";
                    this.mNewVersionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewVersionButton;
            }
        }
        
        public WpfButton ConfigureSettingsButton
        {
            get
            {
                if ((this.mConfigureSettingsButton == null))
                {
                    this.mConfigureSettingsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConfigureSettingsButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Configure settings", PropertyExpressionOperator.Contains));
                    this.mConfigureSettingsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConfigureSettingsButton;
            }
        }
        
        public WpfButton RunAndDebugButton
        {
            get
            {
                if ((this.mRunAndDebugButton == null))
                {
                    this.mRunAndDebugButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunAndDebugButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Run and debug your workflow service", PropertyExpressionOperator.Contains));
                    this.mRunAndDebugButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunAndDebugButton;
            }
        }
        
        public WpfButton SchedulerButton
        {
            get
            {
                if ((this.mSchedulerButton == null))
                {
                    this.mSchedulerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSchedulerButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Schedule a service to run", PropertyExpressionOperator.Contains));
                    this.mSchedulerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSchedulerButton;
            }
        }
        
        public WpfButton DeployButton
        {
            get
            {
                if ((this.mDeployButton == null))
                {
                    this.mDeployButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeployButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Move resources between Warewolf servers", PropertyExpressionOperator.Contains));
                    this.mDeployButton.WindowTitles.Add("Warewolf");
                    this.mDeployButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployButton;
            }
        }
        
        public WpfButton SaveButton
        {
            get
            {
                if ((this.mSaveButton == null))
                {
                    this.mSaveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSaveButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Save this tab", PropertyExpressionOperator.Contains));
                    this.mSaveButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSaveButton;
            }
        }
        
        public NewWorkflowButton NewWorkflowButton
        {
            get
            {
                if ((this.mNewWorkflowButton == null))
                {
                    this.mNewWorkflowButton = new NewWorkflowButton(this);
                }
                return this.mNewWorkflowButton;
            }
        }
        
        public WpfButton NewWebServiceButton
        {
            get
            {
                if ((this.mNewWebServiceButton == null))
                {
                    this.mNewWebServiceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewWebServiceButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new web service", PropertyExpressionOperator.Contains));
                    this.mNewWebServiceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWebServiceButton;
            }
        }
        
        public WpfButton KnowledgeBaseButton
        {
            get
            {
                if ((this.mKnowledgeBaseButton == null))
                {
                    this.mKnowledgeBaseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mKnowledgeBaseButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Knowledge Base", PropertyExpressionOperator.Contains));
                    this.mKnowledgeBaseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mKnowledgeBaseButton;
            }
        }
        
        public WpfButton LockMenuButton
        {
            get
            {
                if ((this.mLockMenuButton == null))
                {
                    this.mLockMenuButton = new WpfButton(this);
                    #region Search Criteria
                    this.mLockMenuButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Lock / unlock the menu", PropertyExpressionOperator.Contains));
                    this.mLockMenuButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLockMenuButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDatabaseSourceButton;
        
        private WpfButton mPluginSourceButton;
        
        private WpfButton mWebSourceButton;
        
        private WpfButton mNewVersionButton;
        
        private WpfButton mConfigureSettingsButton;
        
        private WpfButton mRunAndDebugButton;
        
        private WpfButton mSchedulerButton;
        
        private WpfButton mDeployButton;
        
        private WpfButton mSaveButton;
        
        private NewWorkflowButton mNewWorkflowButton;
        
        private WpfButton mNewWebServiceButton;
        
        private WpfButton mKnowledgeBaseButton;
        
        private WpfButton mLockMenuButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewWorkflowButton : WpfButton
    {
        
        public NewWorkflowButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new service", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = " ";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DockManager : WpfCustom
    {
        
        public DockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitPaneLeft SplitPaneLeft
        {
            get
            {
                if ((this.mSplitPaneLeft == null))
                {
                    this.mSplitPaneLeft = new SplitPaneLeft(this);
                }
                return this.mSplitPaneLeft;
            }
        }
        
        public SplitPaneMiddle SplitPaneMiddle
        {
            get
            {
                if ((this.mSplitPaneMiddle == null))
                {
                    this.mSplitPaneMiddle = new SplitPaneMiddle(this);
                }
                return this.mSplitPaneMiddle;
            }
        }
        
        public SplitPaneRight SplitPaneRight
        {
            get
            {
                if ((this.mSplitPaneRight == null))
                {
                    this.mSplitPaneRight = new SplitPaneRight(this);
                }
                return this.mSplitPaneRight;
            }
        }
        
        public WpfTabList UnpinnedTabAreaTop
        {
            get
            {
                if ((this.mUnpinnedTabAreaTop == null))
                {
                    this.mUnpinnedTabAreaTop = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaTop.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaTop";
                    this.mUnpinnedTabAreaTop.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaTop;
            }
        }
        
        public WpfTabList UnpinnedTabAreaBottom
        {
            get
            {
                if ((this.mUnpinnedTabAreaBottom == null))
                {
                    this.mUnpinnedTabAreaBottom = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaBottom.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaBottom";
                    this.mUnpinnedTabAreaBottom.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaBottom;
            }
        }
        
        public WpfTabList UnpinnedTabAreaLeft
        {
            get
            {
                if ((this.mUnpinnedTabAreaLeft == null))
                {
                    this.mUnpinnedTabAreaLeft = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaLeft.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaLeft";
                    this.mUnpinnedTabAreaLeft.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaLeft;
            }
        }
        
        public WpfTabList UnpinnedTabAreaRight
        {
            get
            {
                if ((this.mUnpinnedTabAreaRight == null))
                {
                    this.mUnpinnedTabAreaRight = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaRight.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaRight";
                    this.mUnpinnedTabAreaRight.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaRight;
            }
        }
        #endregion
        
        #region Fields
        private SplitPaneLeft mSplitPaneLeft;
        
        private SplitPaneMiddle mSplitPaneMiddle;
        
        private SplitPaneRight mSplitPaneRight;
        
        private WpfTabList mUnpinnedTabAreaTop;
        
        private WpfTabList mUnpinnedTabAreaBottom;
        
        private WpfTabList mUnpinnedTabAreaLeft;
        
        private WpfTabList mUnpinnedTabAreaRight;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneLeft : WpfCustom
    {
        
        public SplitPaneLeft(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Explorer Explorer
        {
            get
            {
                if ((this.mExplorer == null))
                {
                    this.mExplorer = new Explorer(this);
                }
                return this.mExplorer;
            }
        }
        
        public WpfControl ExplorerToolboxSplitter
        {
            get
            {
                if ((this.mExplorerToolboxSplitter == null))
                {
                    this.mExplorerToolboxSplitter = new WpfControl(this);
                    #region Search Criteria
                    this.mExplorerToolboxSplitter.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mExplorerToolboxSplitter.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mExplorerToolboxSplitter.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExplorerToolboxSplitter;
            }
        }
        
        public ToolBox ToolBox
        {
            get
            {
                if ((this.mToolBox == null))
                {
                    this.mToolBox = new ToolBox(this);
                }
                return this.mToolBox;
            }
        }
        
        public WpfControl ToolboxHelpSplitter
        {
            get
            {
                if ((this.mToolboxHelpSplitter == null))
                {
                    this.mToolboxHelpSplitter = new WpfControl(this);
                    #region Search Criteria
                    this.mToolboxHelpSplitter.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mToolboxHelpSplitter.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
                    this.mToolboxHelpSplitter.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mToolboxHelpSplitter.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToolboxHelpSplitter;
            }
        }
        
        public Help Help
        {
            get
            {
                if ((this.mHelp == null))
                {
                    this.mHelp = new Help(this);
                }
                return this.mHelp;
            }
        }
        #endregion
        
        #region Fields
        private Explorer mExplorer;
        
        private WpfControl mExplorerToolboxSplitter;
        
        private ToolBox mToolBox;
        
        private WpfControl mToolboxHelpSplitter;
        
        private Help mHelp;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Explorer : WpfCustom
    {
        
        public Explorer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ExplorerControl_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ExplorerUnpinBtn
        {
            get
            {
                if ((this.mExplorerUnpinBtn == null))
                {
                    this.mExplorerUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mExplorerUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mExplorerUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExplorerUnpinBtn;
            }
        }
        
        public ConnectControl ConnectControl
        {
            get
            {
                if ((this.mConnectControl == null))
                {
                    this.mConnectControl = new ConnectControl(this);
                }
                return this.mConnectControl;
            }
        }
        
        public SearchTextBox SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new SearchTextBox(this);
                }
                return this.mSearchTextBox;
            }
        }
        
        public WpfButton ExplorerRefreshButton
        {
            get
            {
                if ((this.mExplorerRefreshButton == null))
                {
                    this.mExplorerRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExplorerRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExplorerRefreshButton;
            }
        }
        
        public ExplorerTree ExplorerTree
        {
            get
            {
                if ((this.mExplorerTree == null))
                {
                    this.mExplorerTree = new ExplorerTree(this);
                }
                return this.mExplorerTree;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mExplorerUnpinBtn;
        
        private ConnectControl mConnectControl;
        
        private SearchTextBox mSearchTextBox;
        
        private WpfButton mExplorerRefreshButton;
        
        private ExplorerTree mExplorerTree;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConnectControl : WpfCustom
    {
        
        public ConnectControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ConnectControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ServerComboBox ServerComboBox
        {
            get
            {
                if ((this.mServerComboBox == null))
                {
                    this.mServerComboBox = new ServerComboBox(this);
                }
                return this.mServerComboBox;
            }
        }
        
        public WpfButton EditServerButton
        {
            get
            {
                if ((this.mEditServerButton == null))
                {
                    this.mEditServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_ServerEditBtn_AutoID";
                    this.mEditServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditServerButton;
            }
        }
        
        public WpfButton ConnectServerButton
        {
            get
            {
                if ((this.mConnectServerButton == null))
                {
                    this.mConnectServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_ConnectServerBtn_AutoID";
                    this.mConnectServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectServerButton;
            }
        }
        #endregion
        
        #region Fields
        private ServerComboBox mServerComboBox;
        
        private WpfButton mEditServerButton;
        
        private WpfButton mConnectServerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerComboBox : WpfCustom
    {
        
        public ServerComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TheServerComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ServerListComboBox
        {
            get
            {
                if ((this.mServerListComboBox == null))
                {
                    this.mServerListComboBox = new WpfButton(this);
                    #region Search Criteria
                    this.mServerListComboBox.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mServerListComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServerListComboBox;
            }
        }
        
        public WpfEdit TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TextBoxPresenter";
                    this.mTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextBox;
            }
        }
        
        public WpfText SelectedItemAsTSTCIREMOTE
        {
            get
            {
                if ((this.mSelectedItemAsTSTCIREMOTE == null))
                {
                    this.mSelectedItemAsTSTCIREMOTE = new WpfText(this);
                    #region Search Criteria
                    this.mSelectedItemAsTSTCIREMOTE.SearchProperties[WpfText.PropertyNames.Name] = "TSTCIREMOTE";
                    this.mSelectedItemAsTSTCIREMOTE.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelectedItemAsTSTCIREMOTE;
            }
        }
        
        public WpfText SelectedItemAsTSTCIREMOTEConnected
        {
            get
            {
                if ((this.mSelectedItemAsTSTCIREMOTEConnected == null))
                {
                    this.mSelectedItemAsTSTCIREMOTEConnected = new WpfText(this);
                    #region Search Criteria
                    this.mSelectedItemAsTSTCIREMOTEConnected.SearchProperties[WpfText.PropertyNames.Name] = "TSTCIREMOTE (Connected)";
                    this.mSelectedItemAsTSTCIREMOTEConnected.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelectedItemAsTSTCIREMOTEConnected;
            }
        }
        
        public WpfText SelectedItemAsLocalhost
        {
            get
            {
                if ((this.mSelectedItemAsLocalhost == null))
                {
                    this.mSelectedItemAsLocalhost = new WpfText(this);
                    #region Search Criteria
                    this.mSelectedItemAsLocalhost.SearchProperties[WpfText.PropertyNames.Name] = "localhost";
                    this.mSelectedItemAsLocalhost.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelectedItemAsLocalhost;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mServerListComboBox;
        
        private WpfEdit mTextBox;
        
        private WpfText mSelectedItemAsTSTCIREMOTE;
        
        private WpfText mSelectedItemAsTSTCIREMOTEConnected;
        
        private WpfText mSelectedItemAsLocalhost;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SearchTextBox : WpfEdit
    {
        
        public SearchTextBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText FilterText
        {
            get
            {
                if ((this.mFilterText == null))
                {
                    this.mFilterText = new WpfText(this);
                    #region Search Criteria
                    this.mFilterText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mFilterText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFilterText;
            }
        }
        
        public WpfButton ClearFilterButton
        {
            get
            {
                if ((this.mClearFilterButton == null))
                {
                    this.mClearFilterButton = new WpfButton(this);
                    #region Search Criteria
                    this.mClearFilterButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ClearSearchButton";
                    this.mClearFilterButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mClearFilterButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mFilterText;
        
        private WpfButton mClearFilterButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerTree : WpfTree
    {
        
        public ExplorerTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public localhost localhost
        {
            get
            {
                if ((this.mlocalhost == null))
                {
                    this.mlocalhost = new localhost(this);
                }
                return this.mlocalhost;
            }
        }
        
        public FirstRemoteServer FirstRemoteServer
        {
            get
            {
                if ((this.mFirstRemoteServer == null))
                {
                    this.mFirstRemoteServer = new FirstRemoteServer(this);
                }
                return this.mFirstRemoteServer;
            }
        }
        #endregion
        
        #region Fields
        private localhost mlocalhost;
        
        private FirstRemoteServer mFirstRemoteServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class localhost : WpfTreeItem
    {
        
        public localhost(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Checkbox Checkbox
        {
            get
            {
                if ((this.mCheckbox == null))
                {
                    this.mCheckbox = new Checkbox(this);
                }
                return this.mCheckbox;
            }
        }
        
        public FirstItem FirstItem
        {
            get
            {
                if ((this.mFirstItem == null))
                {
                    this.mFirstItem = new FirstItem(this);
                }
                return this.mFirstItem;
            }
        }
        
        public SecondItem SecondItem
        {
            get
            {
                if ((this.mSecondItem == null))
                {
                    this.mSecondItem = new SecondItem(this);
                }
                return this.mSecondItem;
            }
        }
        #endregion
        
        #region Fields
        private Checkbox mCheckbox;
        
        private FirstItem mFirstItem;
        
        private SecondItem mSecondItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Checkbox : WpfCheckBox
    {
        
        public Checkbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "Checkbox";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton IconButton
        {
            get
            {
                if ((this.mIconButton == null))
                {
                    this.mIconButton = new WpfButton(this);
                    #region Search Criteria
                    this.mIconButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mIconButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mIconButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIconButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mIconButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FirstItem : WpfTreeItem
    {
        
        public FirstItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResourceImageImage ResourceImageImage
        {
            get
            {
                if ((this.mResourceImageImage == null))
                {
                    this.mResourceImageImage = new ResourceImageImage(this);
                }
                return this.mResourceImageImage;
            }
        }
        
        public WpfButton ExecuteIcon
        {
            get
            {
                if ((this.mExecuteIcon == null))
                {
                    this.mExecuteIcon = new WpfButton(this);
                    #region Search Criteria
                    this.mExecuteIcon.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExecuteButton";
                    this.mExecuteIcon.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExecuteIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExecuteIcon;
            }
        }
        
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        
        public FirstSubItem FirstSubItem
        {
            get
            {
                if ((this.mFirstSubItem == null))
                {
                    this.mFirstSubItem = new FirstSubItem(this);
                }
                return this.mFirstSubItem;
            }
        }
        #endregion
        
        #region Fields
        private ResourceImageImage mResourceImageImage;
        
        private WpfButton mExecuteIcon;
        
        private WpfEdit mItemEdit;
        
        private FirstSubItem mFirstSubItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceImageImage : WpfImage
    {
        
        public ResourceImageImage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfImage.PropertyNames.AutomationId] = "ResourceImage";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ViewIcon
        {
            get
            {
                if ((this.mViewIcon == null))
                {
                    this.mViewIcon = new WpfButton(this);
                    #region Search Criteria
                    this.mViewIcon.SearchProperties[WpfButton.PropertyNames.AutomationId] = "EditButton";
                    this.mViewIcon.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mViewIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewIcon;
            }
        }
        
        public WpfButton ExecuteIcon
        {
            get
            {
                if ((this.mExecuteIcon == null))
                {
                    this.mExecuteIcon = new WpfButton(this);
                    #region Search Criteria
                    this.mExecuteIcon.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExecuteButton";
                    this.mExecuteIcon.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExecuteIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExecuteIcon;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mViewIcon;
        
        private WpfButton mExecuteIcon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FirstSubItem : WpfTreeItem
    {
        
        public FirstSubItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResourceImageImage1 ResourceImageImage
        {
            get
            {
                if ((this.mResourceImageImage == null))
                {
                    this.mResourceImageImage = new ResourceImageImage1(this);
                }
                return this.mResourceImageImage;
            }
        }
        
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private ResourceImageImage1 mResourceImageImage;
        
        private WpfEdit mItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceImageImage1 : WpfImage
    {
        
        public ResourceImageImage1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfImage.PropertyNames.AutomationId] = "ResourceImage";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ViewIcon
        {
            get
            {
                if ((this.mViewIcon == null))
                {
                    this.mViewIcon = new WpfButton(this);
                    #region Search Criteria
                    this.mViewIcon.SearchProperties[WpfButton.PropertyNames.AutomationId] = "EditButton";
                    this.mViewIcon.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mViewIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewIcon;
            }
        }
        
        public WpfButton ExecuteIcon
        {
            get
            {
                if ((this.mExecuteIcon == null))
                {
                    this.mExecuteIcon = new WpfButton(this);
                    #region Search Criteria
                    this.mExecuteIcon.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExecuteButton";
                    this.mExecuteIcon.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExecuteIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExecuteIcon;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mViewIcon;
        
        private WpfButton mExecuteIcon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SecondItem : WpfTreeItem
    {
        
        public SecondItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FirstSubItem1 FirstSubItem
        {
            get
            {
                if ((this.mFirstSubItem == null))
                {
                    this.mFirstSubItem = new FirstSubItem1(this);
                }
                return this.mFirstSubItem;
            }
        }
        #endregion
        
        #region Fields
        private FirstSubItem1 mFirstSubItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FirstSubItem1 : WpfTreeItem
    {
        
        public FirstSubItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResourceImageImage2 ResourceImageImage
        {
            get
            {
                if ((this.mResourceImageImage == null))
                {
                    this.mResourceImageImage = new ResourceImageImage2(this);
                }
                return this.mResourceImageImage;
            }
        }
        
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private ResourceImageImage2 mResourceImageImage;
        
        private WpfEdit mItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceImageImage2 : WpfImage
    {
        
        public ResourceImageImage2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfImage.PropertyNames.AutomationId] = "ResourceImage";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ViewIcon
        {
            get
            {
                if ((this.mViewIcon == null))
                {
                    this.mViewIcon = new WpfButton(this);
                    #region Search Criteria
                    this.mViewIcon.SearchProperties[WpfButton.PropertyNames.AutomationId] = "EditButton";
                    this.mViewIcon.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mViewIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewIcon;
            }
        }
        
        public WpfButton ExecuteIcon
        {
            get
            {
                if ((this.mExecuteIcon == null))
                {
                    this.mExecuteIcon = new WpfButton(this);
                    #region Search Criteria
                    this.mExecuteIcon.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExecuteButton";
                    this.mExecuteIcon.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExecuteIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExecuteIcon;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mViewIcon;
        
        private WpfButton mExecuteIcon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FirstRemoteServer : WpfTreeItem
    {
        
        public FirstRemoteServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Checkbox1 Checkbox
        {
            get
            {
                if ((this.mCheckbox == null))
                {
                    this.mCheckbox = new Checkbox1(this);
                }
                return this.mCheckbox;
            }
        }
        
        public FirstItem1 FirstItem
        {
            get
            {
                if ((this.mFirstItem == null))
                {
                    this.mFirstItem = new FirstItem1(this);
                }
                return this.mFirstItem;
            }
        }
        
        public WpfTreeItem SecondItem
        {
            get
            {
                if ((this.mSecondItem == null))
                {
                    this.mSecondItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mSecondItem.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
                    this.mSecondItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSecondItem.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mSecondItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSecondItem;
            }
        }
        #endregion
        
        #region Fields
        private Checkbox1 mCheckbox;
        
        private FirstItem1 mFirstItem;
        
        private WpfTreeItem mSecondItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Checkbox1 : WpfCheckBox
    {
        
        public Checkbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "Checkbox";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton IconButton
        {
            get
            {
                if ((this.mIconButton == null))
                {
                    this.mIconButton = new WpfButton(this);
                    #region Search Criteria
                    this.mIconButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mIconButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mIconButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIconButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mIconButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FirstItem1 : WpfTreeItem
    {
        
        public FirstItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ExecuteIcon
        {
            get
            {
                if ((this.mExecuteIcon == null))
                {
                    this.mExecuteIcon = new WpfButton(this);
                    #region Search Criteria
                    this.mExecuteIcon.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExecuteButton";
                    this.mExecuteIcon.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExecuteIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExecuteIcon;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mExecuteIcon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ToolBox : WpfCustom
    {
        
        public ToolBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ToolboxView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ToolboxControl_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ToolUnpinBtn
        {
            get
            {
                if ((this.mToolUnpinBtn == null))
                {
                    this.mToolUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mToolUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mToolUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToolUnpinBtn;
            }
        }
        
        public SearchTextBox1 SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new SearchTextBox1(this);
                }
                return this.mSearchTextBox;
            }
        }
        
        public ToolListBox ToolListBox
        {
            get
            {
                if ((this.mToolListBox == null))
                {
                    this.mToolListBox = new ToolListBox(this);
                }
                return this.mToolListBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mToolUnpinBtn;
        
        private SearchTextBox1 mSearchTextBox;
        
        private ToolListBox mToolListBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SearchTextBox1 : WpfEdit
    {
        
        public SearchTextBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ClearFilterButton
        {
            get
            {
                if ((this.mClearFilterButton == null))
                {
                    this.mClearFilterButton = new WpfButton(this);
                    #region Search Criteria
                    this.mClearFilterButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ClearSearchButton";
                    this.mClearFilterButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mClearFilterButton;
            }
        }
        
        public WpfText FloatingText
        {
            get
            {
                if ((this.mFloatingText == null))
                {
                    this.mFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mFloatingText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mClearFilterButton;
        
        private WpfText mFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ToolListBox : WpfList
    {
        
        public ToolListBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "ToolListBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FlowTools FlowTools
        {
            get
            {
                if ((this.mFlowTools == null))
                {
                    this.mFlowTools = new FlowTools(this);
                }
                return this.mFlowTools;
            }
        }
        
        public DataTools DataTools
        {
            get
            {
                if ((this.mDataTools == null))
                {
                    this.mDataTools = new DataTools(this);
                }
                return this.mDataTools;
            }
        }
        
        public Database Database
        {
            get
            {
                if ((this.mDatabase == null))
                {
                    this.mDatabase = new Database(this);
                }
                return this.mDatabase;
            }
        }
        
        public Email Email
        {
            get
            {
                if ((this.mEmail == null))
                {
                    this.mEmail = new Email(this);
                }
                return this.mEmail;
            }
        }
        
        public FileAndFTP FileAndFTP
        {
            get
            {
                if ((this.mFileAndFTP == null))
                {
                    this.mFileAndFTP = new FileAndFTP(this);
                }
                return this.mFileAndFTP;
            }
        }
        
        public HTTPWebMethods HTTPWebMethods
        {
            get
            {
                if ((this.mHTTPWebMethods == null))
                {
                    this.mHTTPWebMethods = new HTTPWebMethods(this);
                }
                return this.mHTTPWebMethods;
            }
        }
        
        public LoopTools LoopTools
        {
            get
            {
                if ((this.mLoopTools == null))
                {
                    this.mLoopTools = new LoopTools(this);
                }
                return this.mLoopTools;
            }
        }
        
        public RecordsetTools RecordsetTools
        {
            get
            {
                if ((this.mRecordsetTools == null))
                {
                    this.mRecordsetTools = new RecordsetTools(this);
                }
                return this.mRecordsetTools;
            }
        }
        
        public ResourceTools ResourceTools
        {
            get
            {
                if ((this.mResourceTools == null))
                {
                    this.mResourceTools = new ResourceTools(this);
                }
                return this.mResourceTools;
            }
        }
        
        public ScriptingTools ScriptingTools
        {
            get
            {
                if ((this.mScriptingTools == null))
                {
                    this.mScriptingTools = new ScriptingTools(this);
                }
                return this.mScriptingTools;
            }
        }
        
        public SharepointTools SharepointTools
        {
            get
            {
                if ((this.mSharepointTools == null))
                {
                    this.mSharepointTools = new SharepointTools(this);
                }
                return this.mSharepointTools;
            }
        }
        
        public StorageDropbox StorageDropbox
        {
            get
            {
                if ((this.mStorageDropbox == null))
                {
                    this.mStorageDropbox = new StorageDropbox(this);
                }
                return this.mStorageDropbox;
            }
        }
        
        public UtilityTools UtilityTools
        {
            get
            {
                if ((this.mUtilityTools == null))
                {
                    this.mUtilityTools = new UtilityTools(this);
                }
                return this.mUtilityTools;
            }
        }
        #endregion
        
        #region Fields
        private FlowTools mFlowTools;
        
        private DataTools mDataTools;
        
        private Database mDatabase;
        
        private Email mEmail;
        
        private FileAndFTP mFileAndFTP;
        
        private HTTPWebMethods mHTTPWebMethods;
        
        private LoopTools mLoopTools;
        
        private RecordsetTools mRecordsetTools;
        
        private ResourceTools mResourceTools;
        
        private ScriptingTools mScriptingTools;
        
        private SharepointTools mSharepointTools;
        
        private StorageDropbox mStorageDropbox;
        
        private UtilityTools mUtilityTools;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FlowTools : WpfGroup
    {
        
        public FlowTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Control Flow";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Decision Decision
        {
            get
            {
                if ((this.mDecision == null))
                {
                    this.mDecision = new Decision(this);
                }
                return this.mDecision;
            }
        }
        
        public Switch Switch
        {
            get
            {
                if ((this.mSwitch == null))
                {
                    this.mSwitch = new Switch(this);
                }
                return this.mSwitch;
            }
        }
        
        public Sequence Sequence
        {
            get
            {
                if ((this.mSequence == null))
                {
                    this.mSequence = new Sequence(this);
                }
                return this.mSequence;
            }
        }
        #endregion
        
        #region Fields
        private Decision mDecision;
        
        private Switch mSwitch;
        
        private Sequence mSequence;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Decision : WpfListItem
    {
        
        public Decision(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Decision";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DecisionImage
        {
            get
            {
                if ((this.mDecisionImage == null))
                {
                    this.mDecisionImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDecisionImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Decision";
                    this.mDecisionImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDecisionImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDecisionImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Switch : WpfListItem
    {
        
        public Switch(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Switch";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SwitchImage
        {
            get
            {
                if ((this.mSwitchImage == null))
                {
                    this.mSwitchImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSwitchImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Switch";
                    this.mSwitchImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSwitchImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSwitchImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Sequence : WpfListItem
    {
        
        public Sequence(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Sequence";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SequenceImage
        {
            get
            {
                if ((this.mSequenceImage == null))
                {
                    this.mSequenceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSequenceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Sequence";
                    this.mSequenceImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSequenceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSequenceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataTools : WpfGroup
    {
        
        public DataTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Data";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AssignObject AssignObject
        {
            get
            {
                if ((this.mAssignObject == null))
                {
                    this.mAssignObject = new AssignObject(this);
                }
                return this.mAssignObject;
            }
        }
        
        public MultiAssign MultiAssign
        {
            get
            {
                if ((this.mMultiAssign == null))
                {
                    this.mMultiAssign = new MultiAssign(this);
                }
                return this.mMultiAssign;
            }
        }
        
        public DataMerge DataMerge
        {
            get
            {
                if ((this.mDataMerge == null))
                {
                    this.mDataMerge = new DataMerge(this);
                }
                return this.mDataMerge;
            }
        }
        
        public BaseConvert BaseConvert
        {
            get
            {
                if ((this.mBaseConvert == null))
                {
                    this.mBaseConvert = new BaseConvert(this);
                }
                return this.mBaseConvert;
            }
        }
        
        public CaseConvert CaseConvert
        {
            get
            {
                if ((this.mCaseConvert == null))
                {
                    this.mCaseConvert = new CaseConvert(this);
                }
                return this.mCaseConvert;
            }
        }
        
        public DataSplit DataSplit
        {
            get
            {
                if ((this.mDataSplit == null))
                {
                    this.mDataSplit = new DataSplit(this);
                }
                return this.mDataSplit;
            }
        }
        
        public FindIndex FindIndex
        {
            get
            {
                if ((this.mFindIndex == null))
                {
                    this.mFindIndex = new FindIndex(this);
                }
                return this.mFindIndex;
            }
        }
        
        public Replace Replace
        {
            get
            {
                if ((this.mReplace == null))
                {
                    this.mReplace = new Replace(this);
                }
                return this.mReplace;
            }
        }
        #endregion
        
        #region Fields
        private AssignObject mAssignObject;
        
        private MultiAssign mMultiAssign;
        
        private DataMerge mDataMerge;
        
        private BaseConvert mBaseConvert;
        
        private CaseConvert mCaseConvert;
        
        private DataSplit mDataSplit;
        
        private FindIndex mFindIndex;
        
        private Replace mReplace;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssignObject : WpfListItem
    {
        
        public AssignObject(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Assign Object";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage AssignImage
        {
            get
            {
                if ((this.mAssignImage == null))
                {
                    this.mAssignImage = new WpfImage(this);
                    #region Search Criteria
                    this.mAssignImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Assign";
                    this.mAssignImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssignImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mAssignImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MultiAssign : WpfListItem
    {
        
        public MultiAssign(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Assign";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage AssignImage
        {
            get
            {
                if ((this.mAssignImage == null))
                {
                    this.mAssignImage = new WpfImage(this);
                    #region Search Criteria
                    this.mAssignImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Assign";
                    this.mAssignImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssignImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mAssignImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataMerge : WpfListItem
    {
        
        public DataMerge(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Data Merge";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DataMergeImage
        {
            get
            {
                if ((this.mDataMergeImage == null))
                {
                    this.mDataMergeImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDataMergeImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Data Merge";
                    this.mDataMergeImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDataMergeImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDataMergeImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BaseConvert : WpfListItem
    {
        
        public BaseConvert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Base Convert";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage BaseConvertImage
        {
            get
            {
                if ((this.mBaseConvertImage == null))
                {
                    this.mBaseConvertImage = new WpfImage(this);
                    #region Search Criteria
                    this.mBaseConvertImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Base Convert";
                    this.mBaseConvertImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mBaseConvertImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mBaseConvertImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CaseConvert : WpfListItem
    {
        
        public CaseConvert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Case Convert";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CaseConvertImage
        {
            get
            {
                if ((this.mCaseConvertImage == null))
                {
                    this.mCaseConvertImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCaseConvertImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Case Convert";
                    this.mCaseConvertImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCaseConvertImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCaseConvertImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataSplit : WpfListItem
    {
        
        public DataSplit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Data Split";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DataSplitImage
        {
            get
            {
                if ((this.mDataSplitImage == null))
                {
                    this.mDataSplitImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDataSplitImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Data Split";
                    this.mDataSplitImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDataSplitImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDataSplitImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FindIndex : WpfListItem
    {
        
        public FindIndex(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Find Index";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage FindIndexImage
        {
            get
            {
                if ((this.mFindIndexImage == null))
                {
                    this.mFindIndexImage = new WpfImage(this);
                    #region Search Criteria
                    this.mFindIndexImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Find Index";
                    this.mFindIndexImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFindIndexImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mFindIndexImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Replace : WpfListItem
    {
        
        public Replace(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Replace";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ReplaceImage
        {
            get
            {
                if ((this.mReplaceImage == null))
                {
                    this.mReplaceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReplaceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Replace";
                    this.mReplaceImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReplaceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReplaceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Database : WpfGroup
    {
        
        public Database(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Database";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem Postgre
        {
            get
            {
                if ((this.mPostgre == null))
                {
                    this.mPostgre = new WpfListItem(this);
                    #region Search Criteria
                    this.mPostgre.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mPostgre.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "PostgreSQL";
                    this.mPostgre.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPostgre;
            }
        }
        
        public WpfListItem Oracle
        {
            get
            {
                if ((this.mOracle == null))
                {
                    this.mOracle = new WpfListItem(this);
                    #region Search Criteria
                    this.mOracle.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mOracle.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Oracle";
                    this.mOracle.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOracle;
            }
        }
        
        public WpfListItem ODBC
        {
            get
            {
                if ((this.mODBC == null))
                {
                    this.mODBC = new WpfListItem(this);
                    #region Search Criteria
                    this.mODBC.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mODBC.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "ODBC";
                    this.mODBC.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mODBC;
            }
        }
        
        public MySQL MySQL
        {
            get
            {
                if ((this.mMySQL == null))
                {
                    this.mMySQL = new MySQL(this);
                }
                return this.mMySQL;
            }
        }
        
        public SQLBulkInsert SQLBulkInsert
        {
            get
            {
                if ((this.mSQLBulkInsert == null))
                {
                    this.mSQLBulkInsert = new SQLBulkInsert(this);
                }
                return this.mSQLBulkInsert;
            }
        }
        
        public SQLServer SQLServer
        {
            get
            {
                if ((this.mSQLServer == null))
                {
                    this.mSQLServer = new SQLServer(this);
                }
                return this.mSQLServer;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mPostgre;
        
        private WpfListItem mOracle;
        
        private WpfListItem mODBC;
        
        private MySQL mMySQL;
        
        private SQLBulkInsert mSQLBulkInsert;
        
        private SQLServer mSQLServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MySQL : WpfListItem
    {
        
        public MySQL(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "MySQL";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage MySQLImage
        {
            get
            {
                if ((this.mMySQLImage == null))
                {
                    this.mMySQLImage = new WpfImage(this);
                    #region Search Criteria
                    this.mMySQLImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "MySQL";
                    this.mMySQLImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMySQLImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mMySQLImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SQLBulkInsert : WpfListItem
    {
        
        public SQLBulkInsert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "SQL Bulk Insert";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SQLBulkInsertImage
        {
            get
            {
                if ((this.mSQLBulkInsertImage == null))
                {
                    this.mSQLBulkInsertImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSQLBulkInsertImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "SQL Bulk Insert";
                    this.mSQLBulkInsertImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSQLBulkInsertImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSQLBulkInsertImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SQLServer : WpfListItem
    {
        
        public SQLServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "SQL Server";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SQLServerImage
        {
            get
            {
                if ((this.mSQLServerImage == null))
                {
                    this.mSQLServerImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSQLServerImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "SQL Server";
                    this.mSQLServerImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSQLServerImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSQLServerImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Email : WpfGroup
    {
        
        public Email(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Email";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SMTPSend SMTPSend
        {
            get
            {
                if ((this.mSMTPSend == null))
                {
                    this.mSMTPSend = new SMTPSend(this);
                }
                return this.mSMTPSend;
            }
        }
        
        public ExchangeSend ExchangeSend
        {
            get
            {
                if ((this.mExchangeSend == null))
                {
                    this.mExchangeSend = new ExchangeSend(this);
                }
                return this.mExchangeSend;
            }
        }
        #endregion
        
        #region Fields
        private SMTPSend mSMTPSend;
        
        private ExchangeSend mExchangeSend;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SMTPSend : WpfListItem
    {
        
        public SMTPSend(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "SMTP Send";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SMTPSendImage
        {
            get
            {
                if ((this.mSMTPSendImage == null))
                {
                    this.mSMTPSendImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSMTPSendImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "SMTP Send";
                    this.mSMTPSendImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSMTPSendImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSMTPSendImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExchangeSend : WpfListItem
    {
        
        public ExchangeSend(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Exchange Send";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ExchangeSendImage
        {
            get
            {
                if ((this.mExchangeSendImage == null))
                {
                    this.mExchangeSendImage = new WpfImage(this);
                    #region Search Criteria
                    this.mExchangeSendImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Exchange Send";
                    this.mExchangeSendImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExchangeSendImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mExchangeSendImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileAndFTP : WpfGroup
    {
        
        public FileAndFTP(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "File, FTP, FTPS & SFTP";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Create Create
        {
            get
            {
                if ((this.mCreate == null))
                {
                    this.mCreate = new Create(this);
                }
                return this.mCreate;
            }
        }
        
        public Copy Copy
        {
            get
            {
                if ((this.mCopy == null))
                {
                    this.mCopy = new Copy(this);
                }
                return this.mCopy;
            }
        }
        
        public Delete Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new Delete(this);
                }
                return this.mDelete;
            }
        }
        
        public Move Move
        {
            get
            {
                if ((this.mMove == null))
                {
                    this.mMove = new Move(this);
                }
                return this.mMove;
            }
        }
        
        public ReadFolder ReadFolder
        {
            get
            {
                if ((this.mReadFolder == null))
                {
                    this.mReadFolder = new ReadFolder(this);
                }
                return this.mReadFolder;
            }
        }
        
        public ReadFile ReadFile
        {
            get
            {
                if ((this.mReadFile == null))
                {
                    this.mReadFile = new ReadFile(this);
                }
                return this.mReadFile;
            }
        }
        
        public WriteFile WriteFile
        {
            get
            {
                if ((this.mWriteFile == null))
                {
                    this.mWriteFile = new WriteFile(this);
                }
                return this.mWriteFile;
            }
        }
        
        public Rename Rename
        {
            get
            {
                if ((this.mRename == null))
                {
                    this.mRename = new Rename(this);
                }
                return this.mRename;
            }
        }
        
        public UnZip UnZip
        {
            get
            {
                if ((this.mUnZip == null))
                {
                    this.mUnZip = new UnZip(this);
                }
                return this.mUnZip;
            }
        }
        
        public Zip Zip
        {
            get
            {
                if ((this.mZip == null))
                {
                    this.mZip = new Zip(this);
                }
                return this.mZip;
            }
        }
        #endregion
        
        #region Fields
        private Create mCreate;
        
        private Copy mCopy;
        
        private Delete mDelete;
        
        private Move mMove;
        
        private ReadFolder mReadFolder;
        
        private ReadFile mReadFile;
        
        private WriteFile mWriteFile;
        
        private Rename mRename;
        
        private UnZip mUnZip;
        
        private Zip mZip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Create : WpfListItem
    {
        
        public Create(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Create";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CreateImage
        {
            get
            {
                if ((this.mCreateImage == null))
                {
                    this.mCreateImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCreateImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Create";
                    this.mCreateImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCreateImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCreateImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Copy : WpfListItem
    {
        
        public Copy(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Copy";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CopyImage
        {
            get
            {
                if ((this.mCopyImage == null))
                {
                    this.mCopyImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCopyImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Copy";
                    this.mCopyImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCopyImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCopyImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Delete : WpfListItem
    {
        
        public Delete(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteImage
        {
            get
            {
                if ((this.mDeleteImage == null))
                {
                    this.mDeleteImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete";
                    this.mDeleteImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Move : WpfListItem
    {
        
        public Move(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Move";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage MoveImage
        {
            get
            {
                if ((this.mMoveImage == null))
                {
                    this.mMoveImage = new WpfImage(this);
                    #region Search Criteria
                    this.mMoveImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Move";
                    this.mMoveImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMoveImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mMoveImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReadFolder : WpfListItem
    {
        
        public ReadFolder(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Read Folder";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ReadFolderImage
        {
            get
            {
                if ((this.mReadFolderImage == null))
                {
                    this.mReadFolderImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReadFolderImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Read Folder";
                    this.mReadFolderImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReadFolderImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReadFolderImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReadFile : WpfListItem
    {
        
        public ReadFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Read File";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ReadFileImage
        {
            get
            {
                if ((this.mReadFileImage == null))
                {
                    this.mReadFileImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReadFileImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Read File";
                    this.mReadFileImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReadFileImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReadFileImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WriteFile : WpfListItem
    {
        
        public WriteFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Write File";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage WriteFileImage
        {
            get
            {
                if ((this.mWriteFileImage == null))
                {
                    this.mWriteFileImage = new WpfImage(this);
                    #region Search Criteria
                    this.mWriteFileImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Write File";
                    this.mWriteFileImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWriteFileImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mWriteFileImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Rename : WpfListItem
    {
        
        public Rename(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Rename";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage RenameImage
        {
            get
            {
                if ((this.mRenameImage == null))
                {
                    this.mRenameImage = new WpfImage(this);
                    #region Search Criteria
                    this.mRenameImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Rename";
                    this.mRenameImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRenameImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mRenameImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UnZip : WpfListItem
    {
        
        public UnZip(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "UnZip";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UnZipImage
        {
            get
            {
                if ((this.mUnZipImage == null))
                {
                    this.mUnZipImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUnZipImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "UnZip";
                    this.mUnZipImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnZipImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUnZipImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Zip : WpfListItem
    {
        
        public Zip(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Zip";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ZipImage
        {
            get
            {
                if ((this.mZipImage == null))
                {
                    this.mZipImage = new WpfImage(this);
                    #region Search Criteria
                    this.mZipImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Zip";
                    this.mZipImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mZipImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mZipImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HTTPWebMethods : WpfGroup
    {
        
        public HTTPWebMethods(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "HTTP Web Methods";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DELETE1 DELETE
        {
            get
            {
                if ((this.mDELETE == null))
                {
                    this.mDELETE = new DELETE1(this);
                }
                return this.mDELETE;
            }
        }
        
        public GET GET
        {
            get
            {
                if ((this.mGET == null))
                {
                    this.mGET = new GET(this);
                }
                return this.mGET;
            }
        }
        
        public POST POST
        {
            get
            {
                if ((this.mPOST == null))
                {
                    this.mPOST = new POST(this);
                }
                return this.mPOST;
            }
        }
        
        public PUT PUT
        {
            get
            {
                if ((this.mPUT == null))
                {
                    this.mPUT = new PUT(this);
                }
                return this.mPUT;
            }
        }
        #endregion
        
        #region Fields
        private DELETE1 mDELETE;
        
        private GET mGET;
        
        private POST mPOST;
        
        private PUT mPUT;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DELETE1 : WpfListItem
    {
        
        public DELETE1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "DELETE";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DELETEImage
        {
            get
            {
                if ((this.mDELETEImage == null))
                {
                    this.mDELETEImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDELETEImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DELETE";
                    this.mDELETEImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDELETEImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDELETEImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class GET : WpfListItem
    {
        
        public GET(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "GET";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage GETImage
        {
            get
            {
                if ((this.mGETImage == null))
                {
                    this.mGETImage = new WpfImage(this);
                    #region Search Criteria
                    this.mGETImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "GET";
                    this.mGETImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGETImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mGETImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class POST : WpfListItem
    {
        
        public POST(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "POST";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage POSTImage
        {
            get
            {
                if ((this.mPOSTImage == null))
                {
                    this.mPOSTImage = new WpfImage(this);
                    #region Search Criteria
                    this.mPOSTImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "POST";
                    this.mPOSTImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPOSTImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mPOSTImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PUT : WpfListItem
    {
        
        public PUT(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "PUT";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage PUTImage
        {
            get
            {
                if ((this.mPUTImage == null))
                {
                    this.mPUTImage = new WpfImage(this);
                    #region Search Criteria
                    this.mPUTImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "PUT";
                    this.mPUTImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPUTImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mPUTImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LoopTools : WpfGroup
    {
        
        public LoopTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Loop Constructs";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ForEach ForEach
        {
            get
            {
                if ((this.mForEach == null))
                {
                    this.mForEach = new ForEach(this);
                }
                return this.mForEach;
            }
        }
        
        public Selectandapply Selectandapply
        {
            get
            {
                if ((this.mSelectandapply == null))
                {
                    this.mSelectandapply = new Selectandapply(this);
                }
                return this.mSelectandapply;
            }
        }
        #endregion
        
        #region Fields
        private ForEach mForEach;
        
        private Selectandapply mSelectandapply;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ForEach : WpfListItem
    {
        
        public ForEach(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "ForEach";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ForEachImage
        {
            get
            {
                if ((this.mForEachImage == null))
                {
                    this.mForEachImage = new WpfImage(this);
                    #region Search Criteria
                    this.mForEachImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "ForEach";
                    this.mForEachImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mForEachImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mForEachImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Selectandapply : WpfListItem
    {
        
        public Selectandapply(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Select and apply";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ButtonImageText ButtonImageText
        {
            get
            {
                if ((this.mButtonImageText == null))
                {
                    this.mButtonImageText = new ButtonImageText(this);
                }
                return this.mButtonImageText;
            }
        }
        #endregion
        
        #region Fields
        private ButtonImageText mButtonImageText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ButtonImageText : WpfText
    {
        
        public ButtonImageText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ToolButtonImage";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage Image
        {
            get
            {
                if ((this.mImage == null))
                {
                    this.mImage = new WpfImage(this);
                    #region Search Criteria
                    this.mImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Select and apply";
                    this.mImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetTools : WpfGroup
    {
        
        public RecordsetTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Recordset";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Length Length
        {
            get
            {
                if ((this.mLength == null))
                {
                    this.mLength = new Length(this);
                }
                return this.mLength;
            }
        }
        
        public FindRecords FindRecords
        {
            get
            {
                if ((this.mFindRecords == null))
                {
                    this.mFindRecords = new FindRecords(this);
                }
                return this.mFindRecords;
            }
        }
        
        public Delete2 Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new Delete2(this);
                }
                return this.mDelete;
            }
        }
        
        public Sort Sort
        {
            get
            {
                if ((this.mSort == null))
                {
                    this.mSort = new Sort(this);
                }
                return this.mSort;
            }
        }
        
        public Count Count
        {
            get
            {
                if ((this.mCount == null))
                {
                    this.mCount = new Count(this);
                }
                return this.mCount;
            }
        }
        
        public UniqueRecords UniqueRecords
        {
            get
            {
                if ((this.mUniqueRecords == null))
                {
                    this.mUniqueRecords = new UniqueRecords(this);
                }
                return this.mUniqueRecords;
            }
        }
        #endregion
        
        #region Fields
        private Length mLength;
        
        private FindRecords mFindRecords;
        
        private Delete2 mDelete;
        
        private Sort mSort;
        
        private Count mCount;
        
        private UniqueRecords mUniqueRecords;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Length : WpfListItem
    {
        
        public Length(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Length";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage LengthImage
        {
            get
            {
                if ((this.mLengthImage == null))
                {
                    this.mLengthImage = new WpfImage(this);
                    #region Search Criteria
                    this.mLengthImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Length";
                    this.mLengthImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLengthImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mLengthImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FindRecords : WpfListItem
    {
        
        public FindRecords(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Find Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage FindRecordsImage
        {
            get
            {
                if ((this.mFindRecordsImage == null))
                {
                    this.mFindRecordsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mFindRecordsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Find Records";
                    this.mFindRecordsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFindRecordsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mFindRecordsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Delete2 : WpfListItem
    {
        
        public Delete2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteImage
        {
            get
            {
                if ((this.mDeleteImage == null))
                {
                    this.mDeleteImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete";
                    this.mDeleteImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Sort : WpfListItem
    {
        
        public Sort(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Sort";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SortImage
        {
            get
            {
                if ((this.mSortImage == null))
                {
                    this.mSortImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSortImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Sort";
                    this.mSortImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSortImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSortImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Count : WpfListItem
    {
        
        public Count(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Count";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CountImage
        {
            get
            {
                if ((this.mCountImage == null))
                {
                    this.mCountImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCountImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Count";
                    this.mCountImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCountImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCountImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UniqueRecords : WpfListItem
    {
        
        public UniqueRecords(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Unique Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UniqueRecordsImage
        {
            get
            {
                if ((this.mUniqueRecordsImage == null))
                {
                    this.mUniqueRecordsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUniqueRecordsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Unique Records";
                    this.mUniqueRecordsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUniqueRecordsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUniqueRecordsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceTools : WpfGroup
    {
        
        public ResourceTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Resources";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DotNetDLL DotNetDLL
        {
            get
            {
                if ((this.mDotNetDLL == null))
                {
                    this.mDotNetDLL = new DotNetDLL(this);
                }
                return this.mDotNetDLL;
            }
        }
        
        public Service Service
        {
            get
            {
                if ((this.mService == null))
                {
                    this.mService = new Service(this);
                }
                return this.mService;
            }
        }
        #endregion
        
        #region Fields
        private DotNetDLL mDotNetDLL;
        
        private Service mService;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DotNetDLL : WpfListItem
    {
        
        public DotNetDLL(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "DotNet DLL";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DotNetDLLImage
        {
            get
            {
                if ((this.mDotNetDLLImage == null))
                {
                    this.mDotNetDLLImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDotNetDLLImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DotNet DLL";
                    this.mDotNetDLLImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDotNetDLLImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDotNetDLLImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Service : WpfListItem
    {
        
        public Service(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Service";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ServiceImage
        {
            get
            {
                if ((this.mServiceImage == null))
                {
                    this.mServiceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mServiceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Service";
                    this.mServiceImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServiceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mServiceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScriptingTools : WpfGroup
    {
        
        public ScriptingTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Scripting";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CMDScript CMDScript
        {
            get
            {
                if ((this.mCMDScript == null))
                {
                    this.mCMDScript = new CMDScript(this);
                }
                return this.mCMDScript;
            }
        }
        
        public Script Script
        {
            get
            {
                if ((this.mScript == null))
                {
                    this.mScript = new Script(this);
                }
                return this.mScript;
            }
        }
        
        public JavaScript JavaScript
        {
            get
            {
                if ((this.mJavaScript == null))
                {
                    this.mJavaScript = new JavaScript(this);
                }
                return this.mJavaScript;
            }
        }
        
        public Python Python
        {
            get
            {
                if ((this.mPython == null))
                {
                    this.mPython = new Python(this);
                }
                return this.mPython;
            }
        }
        
        public Ruby Ruby
        {
            get
            {
                if ((this.mRuby == null))
                {
                    this.mRuby = new Ruby(this);
                }
                return this.mRuby;
            }
        }
        #endregion
        
        #region Fields
        private CMDScript mCMDScript;
        
        private Script mScript;
        
        private JavaScript mJavaScript;
        
        private Python mPython;
        
        private Ruby mRuby;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CMDScript : WpfListItem
    {
        
        public CMDScript(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "CMD Script";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CMDScriptImage
        {
            get
            {
                if ((this.mCMDScriptImage == null))
                {
                    this.mCMDScriptImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCMDScriptImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "CMD Script";
                    this.mCMDScriptImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCMDScriptImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCMDScriptImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Script : WpfListItem
    {
        
        public Script(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Script";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ScriptImage
        {
            get
            {
                if ((this.mScriptImage == null))
                {
                    this.mScriptImage = new WpfImage(this);
                    #region Search Criteria
                    this.mScriptImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Script";
                    this.mScriptImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mScriptImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mScriptImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class JavaScript : WpfListItem
    {
        
        public JavaScript(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "JavaScript";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIToolButtonImageText UIToolButtonImageText
        {
            get
            {
                if ((this.mUIToolButtonImageText == null))
                {
                    this.mUIToolButtonImageText = new UIToolButtonImageText(this);
                }
                return this.mUIToolButtonImageText;
            }
        }
        #endregion
        
        #region Fields
        private UIToolButtonImageText mUIToolButtonImageText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIToolButtonImageText : WpfText
    {
        
        public UIToolButtonImageText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ToolButtonImage";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UIJavaScriptImage
        {
            get
            {
                if ((this.mUIJavaScriptImage == null))
                {
                    this.mUIJavaScriptImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIJavaScriptImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "JavaScript";
                    this.mUIJavaScriptImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIJavaScriptImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIJavaScriptImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Python : WpfListItem
    {
        
        public Python(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Python";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIToolButtonImageText1 UIToolButtonImageText
        {
            get
            {
                if ((this.mUIToolButtonImageText == null))
                {
                    this.mUIToolButtonImageText = new UIToolButtonImageText1(this);
                }
                return this.mUIToolButtonImageText;
            }
        }
        #endregion
        
        #region Fields
        private UIToolButtonImageText1 mUIToolButtonImageText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIToolButtonImageText1 : WpfText
    {
        
        public UIToolButtonImageText1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ToolButtonImage";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UIPythonImage
        {
            get
            {
                if ((this.mUIPythonImage == null))
                {
                    this.mUIPythonImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIPythonImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Python";
                    this.mUIPythonImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIPythonImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIPythonImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Ruby : WpfListItem
    {
        
        public Ruby(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Ruby";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIToolButtonImageText2 UIToolButtonImageText
        {
            get
            {
                if ((this.mUIToolButtonImageText == null))
                {
                    this.mUIToolButtonImageText = new UIToolButtonImageText2(this);
                }
                return this.mUIToolButtonImageText;
            }
        }
        #endregion
        
        #region Fields
        private UIToolButtonImageText2 mUIToolButtonImageText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIToolButtonImageText2 : WpfText
    {
        
        public UIToolButtonImageText2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ToolButtonImage";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UIRubyImage
        {
            get
            {
                if ((this.mUIRubyImage == null))
                {
                    this.mUIRubyImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIRubyImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Ruby";
                    this.mUIRubyImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIRubyImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIRubyImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SharepointTools : WpfGroup
    {
        
        public SharepointTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Sharepoint";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem MoveFile
        {
            get
            {
                if ((this.mMoveFile == null))
                {
                    this.mMoveFile = new WpfListItem(this);
                    #region Search Criteria
                    this.mMoveFile.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Move File";
                    this.mMoveFile.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMoveFile;
            }
        }
        
        public WpfListItem CopyFile
        {
            get
            {
                if ((this.mCopyFile == null))
                {
                    this.mCopyFile = new WpfListItem(this);
                    #region Search Criteria
                    this.mCopyFile.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Copy File";
                    this.mCopyFile.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCopyFile;
            }
        }
        
        public WpfListItem UploadFile
        {
            get
            {
                if ((this.mUploadFile == null))
                {
                    this.mUploadFile = new WpfListItem(this);
                    #region Search Criteria
                    this.mUploadFile.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Upload File";
                    this.mUploadFile.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUploadFile;
            }
        }
        
        public CreateListItems CreateListItems
        {
            get
            {
                if ((this.mCreateListItems == null))
                {
                    this.mCreateListItems = new CreateListItems(this);
                }
                return this.mCreateListItems;
            }
        }
        
        public DeleteListItems DeleteListItems
        {
            get
            {
                if ((this.mDeleteListItems == null))
                {
                    this.mDeleteListItems = new DeleteListItems(this);
                }
                return this.mDeleteListItems;
            }
        }
        
        public ReadListItems ReadListItems
        {
            get
            {
                if ((this.mReadListItems == null))
                {
                    this.mReadListItems = new ReadListItems(this);
                }
                return this.mReadListItems;
            }
        }
        
        public UpdateListItems UpdateListItems
        {
            get
            {
                if ((this.mUpdateListItems == null))
                {
                    this.mUpdateListItems = new UpdateListItems(this);
                }
                return this.mUpdateListItems;
            }
        }
        
        public WpfListItem DownloadFile
        {
            get
            {
                if ((this.mDownloadFile == null))
                {
                    this.mDownloadFile = new WpfListItem(this);
                    #region Search Criteria
                    this.mDownloadFile.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Download File";
                    this.mDownloadFile.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDownloadFile;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mMoveFile;
        
        private WpfListItem mCopyFile;
        
        private WpfListItem mUploadFile;
        
        private CreateListItems mCreateListItems;
        
        private DeleteListItems mDeleteListItems;
        
        private ReadListItems mReadListItems;
        
        private UpdateListItems mUpdateListItems;
        
        private WpfListItem mDownloadFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateListItems : WpfListItem
    {
        
        public CreateListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Create List Item(s)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CreateListItemsImage
        {
            get
            {
                if ((this.mCreateListItemsImage == null))
                {
                    this.mCreateListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCreateListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Create List Item(s)";
                    this.mCreateListItemsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCreateListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCreateListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteListItems : WpfListItem
    {
        
        public DeleteListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete List Item(s)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteListItemsImage
        {
            get
            {
                if ((this.mDeleteListItemsImage == null))
                {
                    this.mDeleteListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete List Item(s)";
                    this.mDeleteListItemsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReadListItems : WpfListItem
    {
        
        public ReadListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Read List Item(s)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ReadListItemsImage
        {
            get
            {
                if ((this.mReadListItemsImage == null))
                {
                    this.mReadListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReadListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Read List Item(s)";
                    this.mReadListItemsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReadListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReadListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UpdateListItems : WpfListItem
    {
        
        public UpdateListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Update List Item(s)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UpdateListItemsImage
        {
            get
            {
                if ((this.mUpdateListItemsImage == null))
                {
                    this.mUpdateListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUpdateListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Update List Item(s)";
                    this.mUpdateListItemsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUpdateListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUpdateListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StorageDropbox : WpfGroup
    {
        
        public StorageDropbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Storage: Dropbox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Download Download
        {
            get
            {
                if ((this.mDownload == null))
                {
                    this.mDownload = new Download(this);
                }
                return this.mDownload;
            }
        }
        
        public Upload Upload
        {
            get
            {
                if ((this.mUpload == null))
                {
                    this.mUpload = new Upload(this);
                }
                return this.mUpload;
            }
        }
        
        public ListContents ListContents
        {
            get
            {
                if ((this.mListContents == null))
                {
                    this.mListContents = new ListContents(this);
                }
                return this.mListContents;
            }
        }
        
        public Delete3 Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new Delete3(this);
                }
                return this.mDelete;
            }
        }
        #endregion
        
        #region Fields
        private Download mDownload;
        
        private Upload mUpload;
        
        private ListContents mListContents;
        
        private Delete3 mDelete;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Download : WpfListItem
    {
        
        public Download(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Download";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DownloadImage
        {
            get
            {
                if ((this.mDownloadImage == null))
                {
                    this.mDownloadImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDownloadImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Download";
                    this.mDownloadImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDownloadImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDownloadImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Upload : WpfListItem
    {
        
        public Upload(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Upload";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UploadImage
        {
            get
            {
                if ((this.mUploadImage == null))
                {
                    this.mUploadImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUploadImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Upload";
                    this.mUploadImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUploadImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUploadImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListContents : WpfListItem
    {
        
        public ListContents(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "List Contents";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ListContentsImage
        {
            get
            {
                if ((this.mListContentsImage == null))
                {
                    this.mListContentsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mListContentsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "List Contents";
                    this.mListContentsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mListContentsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mListContentsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Delete3 : WpfListItem
    {
        
        public Delete3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteImage
        {
            get
            {
                if ((this.mDeleteImage == null))
                {
                    this.mDeleteImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete";
                    this.mDeleteImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UtilityTools : WpfGroup
    {
        
        public UtilityTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Utility";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AggregateCalculate AggregateCalculate
        {
            get
            {
                if ((this.mAggregateCalculate == null))
                {
                    this.mAggregateCalculate = new AggregateCalculate(this);
                }
                return this.mAggregateCalculate;
            }
        }
        
        public WpfListItem RabbitMQConsume
        {
            get
            {
                if ((this.mRabbitMQConsume == null))
                {
                    this.mRabbitMQConsume = new WpfListItem(this);
                    #region Search Criteria
                    this.mRabbitMQConsume.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "RabbitMQ Consume";
                    this.mRabbitMQConsume.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRabbitMQConsume;
            }
        }
        
        public WpfListItem RabbitMQPublish
        {
            get
            {
                if ((this.mRabbitMQPublish == null))
                {
                    this.mRabbitMQPublish = new WpfListItem(this);
                    #region Search Criteria
                    this.mRabbitMQPublish.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "RabbitMQ Publish";
                    this.mRabbitMQPublish.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRabbitMQPublish;
            }
        }
        
        public Comment Comment
        {
            get
            {
                if ((this.mComment == null))
                {
                    this.mComment = new Comment(this);
                }
                return this.mComment;
            }
        }
        
        public CreateJSON CreateJSON
        {
            get
            {
                if ((this.mCreateJSON == null))
                {
                    this.mCreateJSON = new CreateJSON(this);
                }
                return this.mCreateJSON;
            }
        }
        
        public Calculate Calculate
        {
            get
            {
                if ((this.mCalculate == null))
                {
                    this.mCalculate = new Calculate(this);
                }
                return this.mCalculate;
            }
        }
        
        public DateTime DateTime
        {
            get
            {
                if ((this.mDateTime == null))
                {
                    this.mDateTime = new DateTime(this);
                }
                return this.mDateTime;
            }
        }
        
        public DateTimeDifference DateTimeDifference
        {
            get
            {
                if ((this.mDateTimeDifference == null))
                {
                    this.mDateTimeDifference = new DateTimeDifference(this);
                }
                return this.mDateTimeDifference;
            }
        }
        
        public SysInfo SysInfo
        {
            get
            {
                if ((this.mSysInfo == null))
                {
                    this.mSysInfo = new SysInfo(this);
                }
                return this.mSysInfo;
            }
        }
        
        public FormatNumber FormatNumber
        {
            get
            {
                if ((this.mFormatNumber == null))
                {
                    this.mFormatNumber = new FormatNumber(this);
                }
                return this.mFormatNumber;
            }
        }
        
        public Random Random
        {
            get
            {
                if ((this.mRandom == null))
                {
                    this.mRandom = new Random(this);
                }
                return this.mRandom;
            }
        }
        
        public Email1 Email
        {
            get
            {
                if ((this.mEmail == null))
                {
                    this.mEmail = new Email1(this);
                }
                return this.mEmail;
            }
        }
        
        public WebRequest WebRequest
        {
            get
            {
                if ((this.mWebRequest == null))
                {
                    this.mWebRequest = new WebRequest(this);
                }
                return this.mWebRequest;
            }
        }
        
        public XPath XPath
        {
            get
            {
                if ((this.mXPath == null))
                {
                    this.mXPath = new XPath(this);
                }
                return this.mXPath;
            }
        }
        #endregion
        
        #region Fields
        private AggregateCalculate mAggregateCalculate;
        
        private WpfListItem mRabbitMQConsume;
        
        private WpfListItem mRabbitMQPublish;
        
        private Comment mComment;
        
        private CreateJSON mCreateJSON;
        
        private Calculate mCalculate;
        
        private DateTime mDateTime;
        
        private DateTimeDifference mDateTimeDifference;
        
        private SysInfo mSysInfo;
        
        private FormatNumber mFormatNumber;
        
        private Random mRandom;
        
        private Email1 mEmail;
        
        private WebRequest mWebRequest;
        
        private XPath mXPath;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AggregateCalculate : WpfListItem
    {
        
        public AggregateCalculate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Aggregate Calculate";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage AggregateCalculateImage
        {
            get
            {
                if ((this.mAggregateCalculateImage == null))
                {
                    this.mAggregateCalculateImage = new WpfImage(this);
                    #region Search Criteria
                    this.mAggregateCalculateImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Aggregate Calculate";
                    this.mAggregateCalculateImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAggregateCalculateImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mAggregateCalculateImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Comment : WpfListItem
    {
        
        public Comment(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Comment";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CommentImage
        {
            get
            {
                if ((this.mCommentImage == null))
                {
                    this.mCommentImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCommentImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Comment";
                    this.mCommentImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCommentImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCommentImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateJSON : WpfListItem
    {
        
        public CreateJSON(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Create JSON";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CreateJSONImage
        {
            get
            {
                if ((this.mCreateJSONImage == null))
                {
                    this.mCreateJSONImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCreateJSONImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Create JSON";
                    this.mCreateJSONImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCreateJSONImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCreateJSONImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Calculate : WpfListItem
    {
        
        public Calculate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Calculate";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CalculateImage
        {
            get
            {
                if ((this.mCalculateImage == null))
                {
                    this.mCalculateImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCalculateImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Calculate";
                    this.mCalculateImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCalculateImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCalculateImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DateTime : WpfListItem
    {
        
        public DateTime(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Date Time";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DateTimeImage
        {
            get
            {
                if ((this.mDateTimeImage == null))
                {
                    this.mDateTimeImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDateTimeImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Date Time";
                    this.mDateTimeImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDateTimeImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDateTimeImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DateTimeDifference : WpfListItem
    {
        
        public DateTimeDifference(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Date Time Diff";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DateTimeDifferenceImage
        {
            get
            {
                if ((this.mDateTimeDifferenceImage == null))
                {
                    this.mDateTimeDifferenceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDateTimeDifferenceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Date Time Diff";
                    this.mDateTimeDifferenceImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDateTimeDifferenceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDateTimeDifferenceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SysInfo : WpfListItem
    {
        
        public SysInfo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Sys Info";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SysInfoImage
        {
            get
            {
                if ((this.mSysInfoImage == null))
                {
                    this.mSysInfoImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSysInfoImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Sys Info";
                    this.mSysInfoImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSysInfoImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSysInfoImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FormatNumber : WpfListItem
    {
        
        public FormatNumber(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Format Number";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage FormatNumberImage
        {
            get
            {
                if ((this.mFormatNumberImage == null))
                {
                    this.mFormatNumberImage = new WpfImage(this);
                    #region Search Criteria
                    this.mFormatNumberImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Format Number";
                    this.mFormatNumberImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFormatNumberImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mFormatNumberImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Random : WpfListItem
    {
        
        public Random(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Random";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage RandomImage
        {
            get
            {
                if ((this.mRandomImage == null))
                {
                    this.mRandomImage = new WpfImage(this);
                    #region Search Criteria
                    this.mRandomImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Random";
                    this.mRandomImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRandomImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mRandomImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Email1 : WpfListItem
    {
        
        public Email1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Email";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage EmailImage
        {
            get
            {
                if ((this.mEmailImage == null))
                {
                    this.mEmailImage = new WpfImage(this);
                    #region Search Criteria
                    this.mEmailImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Email";
                    this.mEmailImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEmailImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mEmailImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebRequest : WpfListItem
    {
        
        public WebRequest(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Web Request";
            #endregion
        }
        
        #region Properties
        public WpfImage WebRequestImage
        {
            get
            {
                if ((this.mWebRequestImage == null))
                {
                    this.mWebRequestImage = new WpfImage(this);
                    #region Search Criteria
                    this.mWebRequestImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Web Request";
                    this.mWebRequestImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebRequestImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mWebRequestImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XPath : WpfListItem
    {
        
        public XPath(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "XPath";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage XPathImage
        {
            get
            {
                if ((this.mXPathImage == null))
                {
                    this.mXPathImage = new WpfImage(this);
                    #region Search Criteria
                    this.mXPathImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "XPath";
                    this.mXPathImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mXPathImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mXPathImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Help : WpfCustom
    {
        
        public Help(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Help";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DocumentorUnpinBtn
        {
            get
            {
                if ((this.mDocumentorUnpinBtn == null))
                {
                    this.mDocumentorUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mDocumentorUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mDocumentorUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDocumentorUnpinBtn;
            }
        }
        
        public WpfControl HelpWindow
        {
            get
            {
                if ((this.mHelpWindow == null))
                {
                    this.mHelpWindow = new WpfControl(this);
                    #region Search Criteria
                    this.mHelpWindow.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mHelpWindow.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mHelpWindow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHelpWindow;
            }
        }
        
        public WpfCustom HelpTextEditor
        {
            get
            {
                if ((this.mHelpTextEditor == null))
                {
                    this.mHelpTextEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mHelpTextEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamRichTextEditor";
                    this.mHelpTextEditor.SearchProperties[WpfControl.PropertyNames.AutomationId] = "XamRichTextEditor";
                    this.mHelpTextEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHelpTextEditor;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDocumentorUnpinBtn;
        
        private WpfControl mHelpWindow;
        
        private WpfCustom mHelpTextEditor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneMiddle : WpfCustom
    {
        
        public SplitPaneMiddle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabManSplitPane TabManSplitPane
        {
            get
            {
                if ((this.mTabManSplitPane == null))
                {
                    this.mTabManSplitPane = new TabManSplitPane(this);
                }
                return this.mTabManSplitPane;
            }
        }
        #endregion
        
        #region Fields
        private TabManSplitPane mTabManSplitPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabManSplitPane : WpfCustom
    {
        
        public TabManSplitPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SplitPane_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabMan TabMan
        {
            get
            {
                if ((this.mTabMan == null))
                {
                    this.mTabMan = new TabMan(this);
                }
                return this.mTabMan;
            }
        }
        #endregion
        
        #region Fields
        private TabMan mTabMan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabMan : WpfTabList
    {
        
        public TabMan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public StartPage StartPage
        {
            get
            {
                if ((this.mStartPage == null))
                {
                    this.mStartPage = new StartPage(this);
                }
                return this.mStartPage;
            }
        }
        
        public WpfTabPage HelpTab
        {
            get
            {
                if ((this.mHelpTab == null))
                {
                    this.mHelpTab = new WpfTabPage(this);
                    #region Search Criteria
                    this.mHelpTab.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.Help.HelpViewModel";
                    this.mHelpTab.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHelpTab;
            }
        }
        
        public DeployTab DeployTab
        {
            get
            {
                if ((this.mDeployTab == null))
                {
                    this.mDeployTab = new DeployTab(this);
                }
                return this.mDeployTab;
            }
        }
        
        public ServerSourceWizardTab ServerSourceWizardTab
        {
            get
            {
                if ((this.mServerSourceWizardTab == null))
                {
                    this.mServerSourceWizardTab = new ServerSourceWizardTab(this);
                }
                return this.mServerSourceWizardTab;
            }
        }
        
        public SettingsTab SettingsTab
        {
            get
            {
                if ((this.mSettingsTab == null))
                {
                    this.mSettingsTab = new SettingsTab(this);
                }
                return this.mSettingsTab;
            }
        }
        
        public WorkflowTab WorkflowTab
        {
            get
            {
                if ((this.mWorkflowTab == null))
                {
                    this.mWorkflowTab = new WorkflowTab(this);
                }
                return this.mWorkflowTab;
            }
        }
        
        public DBSourceWizardTab DBSourceWizardTab
        {
            get
            {
                if ((this.mDBSourceWizardTab == null))
                {
                    this.mDBSourceWizardTab = new DBSourceWizardTab(this);
                }
                return this.mDBSourceWizardTab;
            }
        }
        
        public FilesMenu FilesMenu
        {
            get
            {
                if ((this.mFilesMenu == null))
                {
                    this.mFilesMenu = new FilesMenu(this);
                }
                return this.mFilesMenu;
            }
        }
        
        public WpfButton NavigatorButton
        {
            get
            {
                if ((this.mNavigatorButton == null))
                {
                    this.mNavigatorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNavigatorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "showNavigatorButton";
                    this.mNavigatorButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNavigatorButton;
            }
        }
        
        public DependencyGraphTab DependencyGraphTab
        {
            get
            {
                if ((this.mDependencyGraphTab == null))
                {
                    this.mDependencyGraphTab = new DependencyGraphTab(this);
                }
                return this.mDependencyGraphTab;
            }
        }
        
        public PluginSourceWizardTab PluginSourceWizardTab
        {
            get
            {
                if ((this.mPluginSourceWizardTab == null))
                {
                    this.mPluginSourceWizardTab = new PluginSourceWizardTab(this);
                }
                return this.mPluginSourceWizardTab;
            }
        }
        
        public WebSourceWizardTab WebSourceWizardTab
        {
            get
            {
                if ((this.mWebSourceWizardTab == null))
                {
                    this.mWebSourceWizardTab = new WebSourceWizardTab(this);
                }
                return this.mWebSourceWizardTab;
            }
        }
        
        public TestsTabPage TestsTabPage
        {
            get
            {
                if ((this.mTestsTabPage == null))
                {
                    this.mTestsTabPage = new TestsTabPage(this);
                }
                return this.mTestsTabPage;
            }
        }
        
        public SchedulerTab SchedulerTab
        {
            get
            {
                if ((this.mSchedulerTab == null))
                {
                    this.mSchedulerTab = new SchedulerTab(this);
                }
                return this.mSchedulerTab;
            }
        }
        
        public SharepointServerSourceTab SharepointServerSourceTab
        {
            get
            {
                if ((this.mSharepointServerSourceTab == null))
                {
                    this.mSharepointServerSourceTab = new SharepointServerSourceTab(this);
                }
                return this.mSharepointServerSourceTab;
            }
        }
        
        public DotNetDllPlugInSource DotNetDllPlugInSource
        {
            get
            {
                if ((this.mDotNetDllPlugInSource == null))
                {
                    this.mDotNetDllPlugInSource = new DotNetDllPlugInSource(this);
                }
                return this.mDotNetDllPlugInSource;
            }
        }
        
        public RabbitMqSourceTabPage RabbitMqSourceTabPage
        {
            get
            {
                if ((this.mRabbitMqSourceTabPage == null))
                {
                    this.mRabbitMqSourceTabPage = new RabbitMqSourceTabPage(this);
                }
                return this.mRabbitMqSourceTabPage;
            }
        }
        
        public EmailSourceTabPage EmailSourceTabPage
        {
            get
            {
                if ((this.mEmailSourceTabPage == null))
                {
                    this.mEmailSourceTabPage = new EmailSourceTabPage(this);
                }
                return this.mEmailSourceTabPage;
            }
        }
        #endregion
        
        #region Fields
        private StartPage mStartPage;
        
        private WpfTabPage mHelpTab;
        
        private DeployTab mDeployTab;
        
        private ServerSourceWizardTab mServerSourceWizardTab;
        
        private SettingsTab mSettingsTab;
        
        private WorkflowTab mWorkflowTab;
        
        private DBSourceWizardTab mDBSourceWizardTab;
        
        private FilesMenu mFilesMenu;
        
        private WpfButton mNavigatorButton;
        
        private DependencyGraphTab mDependencyGraphTab;
        
        private PluginSourceWizardTab mPluginSourceWizardTab;
        
        private WebSourceWizardTab mWebSourceWizardTab;
        
        private TestsTabPage mTestsTabPage;
        
        private SchedulerTab mSchedulerTab;
        
        private SharepointServerSourceTab mSharepointServerSourceTab;
        
        private DotNetDllPlugInSource mDotNetDllPlugInSource;
        
        private RabbitMqSourceTabPage mRabbitMqSourceTabPage;
        
        private EmailSourceTabPage mEmailSourceTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StartPage : WpfTabPage
    {
        
        public StartPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.Help.HelpViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorksurfaceContext WorksurfaceContext
        {
            get
            {
                if ((this.mWorksurfaceContext == null))
                {
                    this.mWorksurfaceContext = new WorksurfaceContext(this);
                }
                return this.mWorksurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WorksurfaceContext mWorksurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorksurfaceContext : WpfCustom
    {
        
        public WorksurfaceContext(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public BrowserHostPane BrowserHostPane
        {
            get
            {
                if ((this.mBrowserHostPane == null))
                {
                    this.mBrowserHostPane = new BrowserHostPane(this);
                }
                return this.mBrowserHostPane;
            }
        }
        #endregion
        
        #region Fields
        private BrowserHostPane mBrowserHostPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BrowserHostPane : WpfPane
    {
        
        public BrowserHostPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.HwndHost";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "WebBrowserHost";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemClient ItemClient
        {
            get
            {
                if ((this.mItemClient == null))
                {
                    this.mItemClient = new ItemClient(this);
                }
                return this.mItemClient;
            }
        }
        #endregion
        
        #region Fields
        private ItemClient mItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemClient : WinClient
    {
        
        public ItemClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.ClassName] = "Internet Explorer_Server";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CommunityPage CommunityPage
        {
            get
            {
                if ((this.mCommunityPage == null))
                {
                    this.mCommunityPage = new CommunityPage(this);
                }
                return this.mCommunityPage;
            }
        }
        #endregion
        
        #region Fields
        private CommunityPage mCommunityPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CommunityPage : HtmlDocument
    {
        
        public CommunityPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Community / Warewolf";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://community.warewolf.io/";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WrapPane WrapPane
        {
            get
            {
                if ((this.mWrapPane == null))
                {
                    this.mWrapPane = new WrapPane(this);
                }
                return this.mWrapPane;
            }
        }
        #endregion
        
        #region Fields
        private WrapPane mWrapPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WrapPane : HtmlDiv
    {
        
        public WrapPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "wrap";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "function showSigninPanel(locResult){ par";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"wrap\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public HtmlDiv KnowledgebasePane
        {
            get
            {
                if ((this.mKnowledgebasePane == null))
                {
                    this.mKnowledgebasePane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mKnowledgebasePane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mKnowledgebasePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mKnowledgebasePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = @"
                                                            Warewolf

                                                            Knowledge base

                                                            function
                                                          ";
                    this.mKnowledgebasePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mKnowledgebasePane.FilterProperties[HtmlDiv.PropertyNames.Class] = "container";
                    this.mKnowledgebasePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"container\"";
                    this.mKnowledgebasePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
                    this.mKnowledgebasePane.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mKnowledgebasePane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mKnowledgebasePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeployTab : WpfTabPage
    {
        
        public DeployTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.DeployWorksurfaceViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext1 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext1(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfButton TabCloseButton
        {
            get
            {
                if ((this.mTabCloseButton == null))
                {
                    this.mTabCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTabCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mTabCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTabCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext1 mWorkSurfaceContext;
        
        private WpfButton mTabCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext1 : WpfCustom
    {
        
        public WorkSurfaceContext1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton RefreshSourceServerButton
        {
            get
            {
                if ((this.mRefreshSourceServerButton == null))
                {
                    this.mRefreshSourceServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshSourceServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshSourceServerButton;
            }
        }
        
        public WpfHyperlink OverrideHyperlink
        {
            get
            {
                if ((this.mOverrideHyperlink == null))
                {
                    this.mOverrideHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mOverrideHyperlink.SearchProperties[WpfHyperlink.PropertyNames.AutomationId] = "OverridesCountView";
                    this.mOverrideHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOverrideHyperlink;
            }
        }
        
        public WpfHyperlink NewResourceHyperlink
        {
            get
            {
                if ((this.mNewResourceHyperlink == null))
                {
                    this.mNewResourceHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mNewResourceHyperlink.SearchProperties[WpfHyperlink.PropertyNames.AutomationId] = "NewResourcesView";
                    this.mNewResourceHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewResourceHyperlink;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SourceServerEditbtn_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfButton SourceConnectButton
        {
            get
            {
                if ((this.mSourceConnectButton == null))
                {
                    this.mSourceConnectButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSourceConnectButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SourceConnectServerbtn_AutoID";
                    this.mSourceConnectButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourceConnectButton;
            }
        }
        
        public WpfButton EditDestinationButton
        {
            get
            {
                if ((this.mEditDestinationButton == null))
                {
                    this.mEditDestinationButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditDestinationButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DestinationServerEditbtn_AutoID";
                    this.mEditDestinationButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditDestinationButton;
            }
        }
        
        public SourceConnectControl SourceConnectControl
        {
            get
            {
                if ((this.mSourceConnectControl == null))
                {
                    this.mSourceConnectControl = new SourceConnectControl(this);
                }
                return this.mSourceConnectControl;
            }
        }
        
        public WpfButton ShowDependenciesButton
        {
            get
            {
                if ((this.mShowDependenciesButton == null))
                {
                    this.mShowDependenciesButton = new WpfButton(this);
                    #region Search Criteria
                    this.mShowDependenciesButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SelectDepbtn_AutoID";
                    this.mShowDependenciesButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowDependenciesButton;
            }
        }
        
        public WpfText ServicesText
        {
            get
            {
                if ((this.mServicesText == null))
                {
                    this.mServicesText = new WpfText(this);
                    #region Search Criteria
                    this.mServicesText.SearchProperties[WpfText.PropertyNames.Name] = "Services";
                    this.mServicesText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServicesText;
            }
        }
        
        public WpfText ServiceCountText
        {
            get
            {
                if ((this.mServiceCountText == null))
                {
                    this.mServiceCountText = new WpfText(this);
                    #region Search Criteria
                    this.mServiceCountText.SearchProperties[WpfText.PropertyNames.AutomationId] = "WorkflowsCount";
                    this.mServiceCountText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServiceCountText;
            }
        }
        
        public WpfText SourcesText
        {
            get
            {
                if ((this.mSourcesText == null))
                {
                    this.mSourcesText = new WpfText(this);
                    #region Search Criteria
                    this.mSourcesText.SearchProperties[WpfText.PropertyNames.Name] = "Sources";
                    this.mSourcesText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesText;
            }
        }
        
        public WpfText SourceCountText
        {
            get
            {
                if ((this.mSourceCountText == null))
                {
                    this.mSourceCountText = new WpfText(this);
                    #region Search Criteria
                    this.mSourceCountText.SearchProperties[WpfText.PropertyNames.AutomationId] = "SourcesCount";
                    this.mSourceCountText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourceCountText;
            }
        }
        
        public WpfText NewResourcesText
        {
            get
            {
                if ((this.mNewResourcesText == null))
                {
                    this.mNewResourcesText = new WpfText(this);
                    #region Search Criteria
                    this.mNewResourcesText.SearchProperties[WpfText.PropertyNames.Name] = "New Resources";
                    this.mNewResourcesText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewResourcesText;
            }
        }
        
        public WpfText OverrideText
        {
            get
            {
                if ((this.mOverrideText == null))
                {
                    this.mOverrideText = new WpfText(this);
                    #region Search Criteria
                    this.mOverrideText.SearchProperties[WpfText.PropertyNames.Name] = "Override";
                    this.mOverrideText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOverrideText;
            }
        }
        
        public DeployButton DeployButton
        {
            get
            {
                if ((this.mDeployButton == null))
                {
                    this.mDeployButton = new DeployButton(this);
                }
                return this.mDeployButton;
            }
        }
        
        public WpfText DeployButtonMessageText
        {
            get
            {
                if ((this.mDeployButtonMessageText == null))
                {
                    this.mDeployButtonMessageText = new WpfText(this);
                    #region Search Criteria
                    this.mDeployButtonMessageText.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_DeploySelectTB_AutoID";
                    this.mDeployButtonMessageText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployButtonMessageText;
            }
        }
        
        public DestinationServerConectControl DestinationServerConectControl
        {
            get
            {
                if ((this.mDestinationServerConectControl == null))
                {
                    this.mDestinationServerConectControl = new DestinationServerConectControl(this);
                }
                return this.mDestinationServerConectControl;
            }
        }
        
        public SourceServerConectControl SourceServerConectControl
        {
            get
            {
                if ((this.mSourceServerConectControl == null))
                {
                    this.mSourceServerConectControl = new SourceServerConectControl(this);
                }
                return this.mSourceServerConectControl;
            }
        }
        
        public SourceServerExplorer SourceServerExplorer
        {
            get
            {
                if ((this.mSourceServerExplorer == null))
                {
                    this.mSourceServerExplorer = new SourceServerExplorer(this);
                }
                return this.mSourceServerExplorer;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mRefreshSourceServerButton;
        
        private WpfHyperlink mOverrideHyperlink;
        
        private WpfHyperlink mNewResourceHyperlink;
        
        private WpfButton mEditSourceButton;
        
        private WpfButton mSourceConnectButton;
        
        private WpfButton mEditDestinationButton;
        
        private SourceConnectControl mSourceConnectControl;
        
        private WpfButton mShowDependenciesButton;
        
        private WpfText mServicesText;
        
        private WpfText mServiceCountText;
        
        private WpfText mSourcesText;
        
        private WpfText mSourceCountText;
        
        private WpfText mNewResourcesText;
        
        private WpfText mOverrideText;
        
        private DeployButton mDeployButton;
        
        private WpfText mDeployButtonMessageText;
        
        private DestinationServerConectControl mDestinationServerConectControl;
        
        private SourceServerConectControl mSourceServerConectControl;
        
        private SourceServerExplorer mSourceServerExplorer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourceConnectControl : WpfCustom
    {
        
        public SourceConnectControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourceConnectControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ConnectSourceButton
        {
            get
            {
                if ((this.mConnectSourceButton == null))
                {
                    this.mConnectSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SourceConnectServerbtn_AutoID";
                    this.mConnectSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectSourceButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mConnectSourceButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeployButton : WpfButton
    {
        
        public DeployButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Deploybtn_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DestinationServerConectControl : WpfCustom
    {
        
        public DestinationServerConectControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DestinationConnectControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Combobox Combobox
        {
            get
            {
                if ((this.mCombobox == null))
                {
                    this.mCombobox = new Combobox(this);
                }
                return this.mCombobox;
            }
        }
        
        public WpfButton ConnectDestinationButton
        {
            get
            {
                if ((this.mConnectDestinationButton == null))
                {
                    this.mConnectDestinationButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectDestinationButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DestinationServerConnectbtn_AutoID";
                    this.mConnectDestinationButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectDestinationButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_IndicatorConnecting_AutoID";
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private Combobox mCombobox;
        
        private WpfButton mConnectDestinationButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Combobox : WpfCustom
    {
        
        public Combobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TheServerComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ToggleButton
        {
            get
            {
                if ((this.mToggleButton == null))
                {
                    this.mToggleButton = new WpfButton(this);
                    #region Search Criteria
                    this.mToggleButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToggleButton;
            }
        }
        
        public WpfText RemoteConnectionIntegrationText
        {
            get
            {
                if ((this.mRemoteConnectionIntegrationText == null))
                {
                    this.mRemoteConnectionIntegrationText = new WpfText(this);
                    #region Search Criteria
                    this.mRemoteConnectionIntegrationText.SearchProperties[WpfText.PropertyNames.Name] = "Remote Connection Integration";
                    this.mRemoteConnectionIntegrationText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRemoteConnectionIntegrationText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mToggleButton;
        
        private WpfText mRemoteConnectionIntegrationText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourceServerConectControl : WpfCustom
    {
        
        public SourceServerConectControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourceConnectControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Combobox1 Combobox
        {
            get
            {
                if ((this.mCombobox == null))
                {
                    this.mCombobox = new Combobox1(this);
                }
                return this.mCombobox;
            }
        }
        
        public WpfButton ConnectSourceButton
        {
            get
            {
                if ((this.mConnectSourceButton == null))
                {
                    this.mConnectSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SourceServerConnectbtn_AutoID";
                    this.mConnectSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectSourceButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_IndicatorConnecting_AutoID";
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private Combobox1 mCombobox;
        
        private WpfButton mConnectSourceButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Combobox1 : WpfCustom
    {
        
        public Combobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TheServerComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ToggleButton
        {
            get
            {
                if ((this.mToggleButton == null))
                {
                    this.mToggleButton = new WpfButton(this);
                    #region Search Criteria
                    this.mToggleButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToggleButton;
            }
        }
        
        public WpfText RemoteConnectionIntegrationText
        {
            get
            {
                if ((this.mRemoteConnectionIntegrationText == null))
                {
                    this.mRemoteConnectionIntegrationText = new WpfText(this);
                    #region Search Criteria
                    this.mRemoteConnectionIntegrationText.SearchProperties[WpfText.PropertyNames.Name] = "Remote Connection Integration";
                    this.mRemoteConnectionIntegrationText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRemoteConnectionIntegrationText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mToggleButton;
        
        private WpfText mRemoteConnectionIntegrationText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourceServerExplorer : WpfCustom
    {
        
        public SourceServerExplorer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourceNavigationView";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit SearchTextbox
        {
            get
            {
                if ((this.mSearchTextbox == null))
                {
                    this.mSearchTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSearchTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mSearchTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSearchTextbox;
            }
        }
        
        public ExplorerTree1 ExplorerTree
        {
            get
            {
                if ((this.mExplorerTree == null))
                {
                    this.mExplorerTree = new ExplorerTree1(this);
                }
                return this.mExplorerTree;
            }
        }
        
        public WpfText FilterText
        {
            get
            {
                if ((this.mFilterText == null))
                {
                    this.mFilterText = new WpfText(this);
                    #region Search Criteria
                    this.mFilterText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mFilterText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFilterText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mSearchTextbox;
        
        private ExplorerTree1 mExplorerTree;
        
        private WpfText mFilterText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerTree1 : WpfTree
    {
        
        public ExplorerTree1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SourceServerName SourceServerName
        {
            get
            {
                if ((this.mSourceServerName == null))
                {
                    this.mSourceServerName = new SourceServerName(this);
                }
                return this.mSourceServerName;
            }
        }
        #endregion
        
        #region Fields
        private SourceServerName mSourceServerName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourceServerName : WpfTreeItem
    {
        
        public SourceServerName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FirstExplorerTreeItem FirstExplorerTreeItem
        {
            get
            {
                if ((this.mFirstExplorerTreeItem == null))
                {
                    this.mFirstExplorerTreeItem = new FirstExplorerTreeItem(this);
                }
                return this.mFirstExplorerTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private FirstExplorerTreeItem mFirstExplorerTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FirstExplorerTreeItem : WpfTreeItem
    {
        
        public FirstExplorerTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox CheckBox
        {
            get
            {
                if ((this.mCheckBox == null))
                {
                    this.mCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "ResourceNameCheckBox";
                    this.mCheckBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerSourceWizardTab : WpfTabPage
    {
        
        public ServerSourceWizardTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.IServerSource]";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext2 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext2(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfButton TabCloseButton
        {
            get
            {
                if ((this.mTabCloseButton == null))
                {
                    this.mTabCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTabCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mTabCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTabCloseButton;
            }
        }
        
        public WpfImage NoAuthMessageText
        {
            get
            {
                if ((this.mNoAuthMessageText == null))
                {
                    this.mNoAuthMessageText = new WpfImage(this);
                    #region Search Criteria
                    this.mNoAuthMessageText.SearchProperties[WpfImage.PropertyNames.HelpText] = "You are not authorized to edit this resource";
                    this.mNoAuthMessageText.SearchProperties[WpfImage.PropertyNames.Instance] = "2";
                    this.mNoAuthMessageText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNoAuthMessageText;
            }
        }
        
        public WpfText NewServerTitleText
        {
            get
            {
                if ((this.mNewServerTitleText == null))
                {
                    this.mNewServerTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mNewServerTitleText.SearchProperties[WpfText.PropertyNames.Name] = "New Server Source";
                    this.mNewServerTitleText.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mNewServerTitleText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerTitleText;
            }
        }
        
        public WpfImage NewServerBackground
        {
            get
            {
                if ((this.mNewServerBackground == null))
                {
                    this.mNewServerBackground = new WpfImage(this);
                    #region Search Criteria
                    this.mNewServerBackground.SearchProperties[WpfImage.PropertyNames.AutomationId] = "New Server Source";
                    this.mNewServerBackground.SearchProperties[WpfImage.PropertyNames.Instance] = "2";
                    this.mNewServerBackground.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerBackground;
            }
        }
        
        public WpfImage NoAuthImage
        {
            get
            {
                if ((this.mNoAuthImage == null))
                {
                    this.mNoAuthImage = new WpfImage(this);
                    #region Search Criteria
                    this.mNoAuthImage.SearchProperties[WpfImage.PropertyNames.HelpText] = "You are not authorized to edit this resource";
                    this.mNoAuthImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNoAuthImage;
            }
        }
        
        public WpfText AddressText
        {
            get
            {
                if ((this.mAddressText == null))
                {
                    this.mAddressText = new WpfText(this);
                    #region Search Criteria
                    this.mAddressText.SearchProperties[WpfText.PropertyNames.Name] = "New Server Source";
                    this.mAddressText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddressText;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext2 mWorkSurfaceContext;
        
        private WpfButton mTabCloseButton;
        
        private WpfImage mNoAuthMessageText;
        
        private WpfText mNewServerTitleText;
        
        private WpfImage mNewServerBackground;
        
        private WpfImage mNoAuthImage;
        
        private WpfText mAddressText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext2 : WpfCustom
    {
        
        public WorkSurfaceContext2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NewServerSourceWizard NewServerSourceWizard
        {
            get
            {
                if ((this.mNewServerSourceWizard == null))
                {
                    this.mNewServerSourceWizard = new NewServerSourceWizard(this);
                }
                return this.mNewServerSourceWizard;
            }
        }
        
        public ErrorText ErrorText
        {
            get
            {
                if ((this.mErrorText == null))
                {
                    this.mErrorText = new ErrorText(this);
                }
                return this.mErrorText;
            }
        }
        
        public WpfRadioButton PublicRadioButton
        {
            get
            {
                if ((this.mPublicRadioButton == null))
                {
                    this.mPublicRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mPublicRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "PublicRadioButton";
                    this.mPublicRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublicRadioButton;
            }
        }
        
        public WpfImage NewServerTabIcon
        {
            get
            {
                if ((this.mNewServerTabIcon == null))
                {
                    this.mNewServerTabIcon = new WpfImage(this);
                    #region Search Criteria
                    this.mNewServerTabIcon.SearchProperties[WpfImage.PropertyNames.AutomationId] = "New Server Source";
                    this.mNewServerTabIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerTabIcon;
            }
        }
        
        public WpfRadioButton UserRadioButton
        {
            get
            {
                if ((this.mUserRadioButton == null))
                {
                    this.mUserRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUserRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UserRadioButton";
                    this.mUserRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUserRadioButton;
            }
        }
        
        public WpfRadioButton WindowsRadioButton
        {
            get
            {
                if ((this.mWindowsRadioButton == null))
                {
                    this.mWindowsRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mWindowsRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "WindowsRadioButton";
                    this.mWindowsRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWindowsRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private NewServerSourceWizard mNewServerSourceWizard;
        
        private ErrorText mErrorText;
        
        private WpfRadioButton mPublicRadioButton;
        
        private WpfImage mNewServerTabIcon;
        
        private WpfRadioButton mUserRadioButton;
        
        private WpfRadioButton mWindowsRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewServerSourceWizard : WpfCustom
    {
        
        public NewServerSourceWizard(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ManageServerControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AuthTypeOptions AuthTypeOptions
        {
            get
            {
                if ((this.mAuthTypeOptions == null))
                {
                    this.mAuthTypeOptions = new AuthTypeOptions(this);
                }
                return this.mAuthTypeOptions;
            }
        }
        
        public ProtocolCombobox ProtocolCombobox
        {
            get
            {
                if ((this.mProtocolCombobox == null))
                {
                    this.mProtocolCombobox = new ProtocolCombobox(this);
                }
                return this.mProtocolCombobox;
            }
        }
        
        public AddressComboBox AddressComboBox
        {
            get
            {
                if ((this.mAddressComboBox == null))
                {
                    this.mAddressComboBox = new AddressComboBox(this);
                }
                return this.mAddressComboBox;
            }
        }
        
        public WpfButton TestConnectionButton
        {
            get
            {
                if ((this.mTestConnectionButton == null))
                {
                    this.mTestConnectionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestConnectionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestConnectionButton";
                    this.mTestConnectionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestConnectionButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        
        public WpfText ErrorText
        {
            get
            {
                if ((this.mErrorText == null))
                {
                    this.mErrorText = new WpfText(this);
                    #region Search Criteria
                    this.mErrorText.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorTextBlock";
                    this.mErrorText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mErrorText;
            }
        }
        #endregion
        
        #region Fields
        private AuthTypeOptions mAuthTypeOptions;
        
        private ProtocolCombobox mProtocolCombobox;
        
        private AddressComboBox mAddressComboBox;
        
        private WpfButton mTestConnectionButton;
        
        private WpfCustom mSpinner;
        
        private WpfText mErrorText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AuthTypeOptions : WpfCustom
    {
        
        public AuthTypeOptions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ProtocolItems";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton WindowsAuth
        {
            get
            {
                if ((this.mWindowsAuth == null))
                {
                    this.mWindowsAuth = new WpfButton(this);
                    #region Search Criteria
                    this.mWindowsAuth.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mWindowsAuth.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWindowsAuth;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mWindowsAuth;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ProtocolCombobox : WpfCustom
    {
        
        public ProtocolCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ProtocolItems";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ToggleDropdown
        {
            get
            {
                if ((this.mToggleDropdown == null))
                {
                    this.mToggleDropdown = new WpfButton(this);
                    #region Search Criteria
                    this.mToggleDropdown.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mToggleDropdown.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToggleDropdown;
            }
        }
        
        public WpfText HttpSelectedItemText
        {
            get
            {
                if ((this.mHttpSelectedItemText == null))
                {
                    this.mHttpSelectedItemText = new WpfText(this);
                    #region Search Criteria
                    this.mHttpSelectedItemText.SearchProperties[WpfText.PropertyNames.Name] = "http";
                    this.mHttpSelectedItemText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHttpSelectedItemText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mToggleDropdown;
        
        private WpfText mHttpSelectedItemText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddressComboBox : WpfComboBox
    {
        
        public AddressComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "AddressTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit AddressEditBox
        {
            get
            {
                if ((this.mAddressEditBox == null))
                {
                    this.mAddressEditBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mAddressEditBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mAddressEditBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddressEditBox;
            }
        }
        
        public WpfListItem TSTCIREMOTE
        {
            get
            {
                if ((this.mTSTCIREMOTE == null))
                {
                    this.mTSTCIREMOTE = new WpfListItem(this);
                    #region Search Criteria
                    this.mTSTCIREMOTE.SearchProperties[WpfListItem.PropertyNames.Name] = "TST-CI-REMOTE";
                    this.mTSTCIREMOTE.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTSTCIREMOTE;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAddressEditBox;
        
        private WpfListItem mTSTCIREMOTE;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorText : WpfText
    {
        
        public ErrorText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorTextBlock";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SettingsTab : WpfTabPage
    {
        
        public SettingsTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Settings.SettingsViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorksurfaceContext3 WorksurfaceContext
        {
            get
            {
                if ((this.mWorksurfaceContext == null))
                {
                    this.mWorksurfaceContext = new WorksurfaceContext3(this);
                }
                return this.mWorksurfaceContext;
            }
        }
        
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WorksurfaceContext3 mWorksurfaceContext;
        
        private WpfButton mCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorksurfaceContext3 : WpfCustom
    {
        
        public WorksurfaceContext3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SettingsView SettingsView
        {
            get
            {
                if ((this.mSettingsView == null))
                {
                    this.mSettingsView = new SettingsView(this);
                }
                return this.mSettingsView;
            }
        }
        #endregion
        
        #region Fields
        private SettingsView mSettingsView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SettingsView : WpfCustom
    {
        
        public SettingsView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SettingsView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SettingsView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabList TabList
        {
            get
            {
                if ((this.mTabList == null))
                {
                    this.mTabList = new TabList(this);
                }
                return this.mTabList;
            }
        }
        #endregion
        
        #region Fields
        private TabList mTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabList : WpfTabList
    {
        
        public TabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SecurityTab SecurityTab
        {
            get
            {
                if ((this.mSecurityTab == null))
                {
                    this.mSecurityTab = new SecurityTab(this);
                }
                return this.mSecurityTab;
            }
        }
        
        public LoggingTab LoggingTab
        {
            get
            {
                if ((this.mLoggingTab == null))
                {
                    this.mLoggingTab = new LoggingTab(this);
                }
                return this.mLoggingTab;
            }
        }
        
        public PerfomanceCounterTab PerfomanceCounterTab
        {
            get
            {
                if ((this.mPerfomanceCounterTab == null))
                {
                    this.mPerfomanceCounterTab = new PerfomanceCounterTab(this);
                }
                return this.mPerfomanceCounterTab;
            }
        }
        #endregion
        
        #region Fields
        private SecurityTab mSecurityTab;
        
        private LoggingTab mLoggingTab;
        
        private PerfomanceCounterTab mPerfomanceCounterTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SecurityTab : WpfTabPage
    {
        
        public SecurityTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "System.Windows.Controls.TabItem Header: Content:";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SecurityWindow SecurityWindow
        {
            get
            {
                if ((this.mSecurityWindow == null))
                {
                    this.mSecurityWindow = new SecurityWindow(this);
                }
                return this.mSecurityWindow;
            }
        }
        
        public WpfText SECURITY
        {
            get
            {
                if ((this.mSECURITY == null))
                {
                    this.mSECURITY = new WpfText(this);
                    #region Search Criteria
                    this.mSECURITY.SearchProperties[WpfText.PropertyNames.Name] = "SECURITY";
                    this.mSECURITY.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSECURITY;
            }
        }
        #endregion
        
        #region Fields
        private SecurityWindow mSecurityWindow;
        
        private WpfText mSECURITY;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SecurityWindow : WpfCustom
    {
        
        public SecurityWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SecurityView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SecurityViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ServerPermissions ServerPermissions
        {
            get
            {
                if ((this.mServerPermissions == null))
                {
                    this.mServerPermissions = new ServerPermissions(this);
                }
                return this.mServerPermissions;
            }
        }
        
        public ResourcePermissions ResourcePermissions
        {
            get
            {
                if ((this.mResourcePermissions == null))
                {
                    this.mResourcePermissions = new ResourcePermissions(this);
                }
                return this.mResourcePermissions;
            }
        }
        #endregion
        
        #region Fields
        private ServerPermissions mServerPermissions;
        
        private ResourcePermissions mResourcePermissions;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerPermissions : WpfTable
    {
        
        public ServerPermissions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ServerPermissionsDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WarewolfAdminROW WarewolfAdminROW
        {
            get
            {
                if ((this.mWarewolfAdminROW == null))
                {
                    this.mWarewolfAdminROW = new WarewolfAdminROW(this);
                }
                return this.mWarewolfAdminROW;
            }
        }
        
        public PublicROW PublicROW
        {
            get
            {
                if ((this.mPublicROW == null))
                {
                    this.mPublicROW = new PublicROW(this);
                }
                return this.mPublicROW;
            }
        }
        #endregion
        
        #region Fields
        private WarewolfAdminROW mWarewolfAdminROW;
        
        private PublicROW mPublicROW;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WarewolfAdminROW : WpfPane
    {
        
        public WarewolfAdminROW(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "0";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DeleteCell DeleteCell
        {
            get
            {
                if ((this.mDeleteCell == null))
                {
                    this.mDeleteCell = new DeleteCell(this);
                }
                return this.mDeleteCell;
            }
        }
        
        public DeployToCell DeployToCell
        {
            get
            {
                if ((this.mDeployToCell == null))
                {
                    this.mDeployToCell = new DeployToCell(this);
                }
                return this.mDeployToCell;
            }
        }
        
        public DeployFromCell DeployFromCell
        {
            get
            {
                if ((this.mDeployFromCell == null))
                {
                    this.mDeployFromCell = new DeployFromCell(this);
                }
                return this.mDeployFromCell;
            }
        }
        
        public AdministratorCell AdministratorCell
        {
            get
            {
                if ((this.mAdministratorCell == null))
                {
                    this.mAdministratorCell = new AdministratorCell(this);
                }
                return this.mAdministratorCell;
            }
        }
        
        public ViewCell ViewCell
        {
            get
            {
                if ((this.mViewCell == null))
                {
                    this.mViewCell = new ViewCell(this);
                }
                return this.mViewCell;
            }
        }
        
        public ExecuteCell ExecuteCell
        {
            get
            {
                if ((this.mExecuteCell == null))
                {
                    this.mExecuteCell = new ExecuteCell(this);
                }
                return this.mExecuteCell;
            }
        }
        
        public ContributeCell ContributeCell
        {
            get
            {
                if ((this.mContributeCell == null))
                {
                    this.mContributeCell = new ContributeCell(this);
                }
                return this.mContributeCell;
            }
        }
        #endregion
        
        #region Fields
        private DeleteCell mDeleteCell;
        
        private DeployToCell mDeployToCell;
        
        private DeployFromCell mDeployFromCell;
        
        private AdministratorCell mAdministratorCell;
        
        private ViewCell mViewCell;
        
        private ExecuteCell mExecuteCell;
        
        private ContributeCell mContributeCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteCell : WpfCell
    {
        
        public DeleteCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "Dev2.Runtime.Configuration.ViewModels.Base.RelayCommand";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_AddRemovebtn_AutoID";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeployToCell : WpfCell
    {
        
        public DeployToCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox DeployToCheckBox
        {
            get
            {
                if ((this.mDeployToCheckBox == null))
                {
                    this.mDeployToCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mDeployToCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_DeployToPermissionCheckBox_AutoID";
                    this.mDeployToCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Instance] = "1";
                    this.mDeployToCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployToCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mDeployToCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeployFromCell : WpfCell
    {
        
        public DeployFromCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox DeployFromCheckBox
        {
            get
            {
                if ((this.mDeployFromCheckBox == null))
                {
                    this.mDeployFromCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mDeployFromCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_DeployFromPermissionCheckBox_AutoID";
                    this.mDeployFromCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployFromCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mDeployFromCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AdministratorCell : WpfCell
    {
        
        public AdministratorCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox AdministratorCheckBox
        {
            get
            {
                if ((this.mAdministratorCheckBox == null))
                {
                    this.mAdministratorCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mAdministratorCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_AdministratorPermissionCheckBox_AutoID";
                    this.mAdministratorCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAdministratorCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mAdministratorCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ViewCell : WpfCell
    {
        
        public ViewCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ViewCheckBox
        {
            get
            {
                if ((this.mViewCheckBox == null))
                {
                    this.mViewCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mViewCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_ViewPermissionCheckBox_AutoID";
                    this.mViewCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mViewCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExecuteCell : WpfCell
    {
        
        public ExecuteCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ExecuteCheckBox
        {
            get
            {
                if ((this.mExecuteCheckBox == null))
                {
                    this.mExecuteCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mExecuteCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_ExecutePermissionCheckBox_AutoID";
                    this.mExecuteCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExecuteCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mExecuteCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ContributeCell : WpfCell
    {
        
        public ContributeCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ContributeCheckBox
        {
            get
            {
                if ((this.mContributeCheckBox == null))
                {
                    this.mContributeCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mContributeCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Warewolf Administrators_ContributePermissionCheckBox_AutoID";
                    this.mContributeCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mContributeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mContributeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PublicROW : WpfPane
    {
        
        public PublicROW(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Public_DeployToCell Public_DeployToCell
        {
            get
            {
                if ((this.mPublic_DeployToCell == null))
                {
                    this.mPublic_DeployToCell = new Public_DeployToCell(this);
                }
                return this.mPublic_DeployToCell;
            }
        }
        
        public Public_DeployFromCell Public_DeployFromCell
        {
            get
            {
                if ((this.mPublic_DeployFromCell == null))
                {
                    this.mPublic_DeployFromCell = new Public_DeployFromCell(this);
                }
                return this.mPublic_DeployFromCell;
            }
        }
        
        public Public_AdministratorCell Public_AdministratorCell
        {
            get
            {
                if ((this.mPublic_AdministratorCell == null))
                {
                    this.mPublic_AdministratorCell = new Public_AdministratorCell(this);
                }
                return this.mPublic_AdministratorCell;
            }
        }
        
        public Public_ViewCell Public_ViewCell
        {
            get
            {
                if ((this.mPublic_ViewCell == null))
                {
                    this.mPublic_ViewCell = new Public_ViewCell(this);
                }
                return this.mPublic_ViewCell;
            }
        }
        
        public Public_ExecuteCell Public_ExecuteCell
        {
            get
            {
                if ((this.mPublic_ExecuteCell == null))
                {
                    this.mPublic_ExecuteCell = new Public_ExecuteCell(this);
                }
                return this.mPublic_ExecuteCell;
            }
        }
        
        public Public_ContributeCell Public_ContributeCell
        {
            get
            {
                if ((this.mPublic_ContributeCell == null))
                {
                    this.mPublic_ContributeCell = new Public_ContributeCell(this);
                }
                return this.mPublic_ContributeCell;
            }
        }
        
        public WindowsGroup WindowsGroup
        {
            get
            {
                if ((this.mWindowsGroup == null))
                {
                    this.mWindowsGroup = new WindowsGroup(this);
                }
                return this.mWindowsGroup;
            }
        }
        #endregion
        
        #region Fields
        private Public_DeployToCell mPublic_DeployToCell;
        
        private Public_DeployFromCell mPublic_DeployFromCell;
        
        private Public_AdministratorCell mPublic_AdministratorCell;
        
        private Public_ViewCell mPublic_ViewCell;
        
        private Public_ExecuteCell mPublic_ExecuteCell;
        
        private Public_ContributeCell mPublic_ContributeCell;
        
        private WindowsGroup mWindowsGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_DeployToCell : WpfCell
    {
        
        public Public_DeployToCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_DeployToCheckBox
        {
            get
            {
                if ((this.mPublic_DeployToCheckBox == null))
                {
                    this.mPublic_DeployToCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_DeployToCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_DeployToPermissionCheckBox_AutoID";
                    this.mPublic_DeployToCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_DeployToCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_DeployToCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_DeployFromCell : WpfCell
    {
        
        public Public_DeployFromCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_DeployFromCheckBox
        {
            get
            {
                if ((this.mPublic_DeployFromCheckBox == null))
                {
                    this.mPublic_DeployFromCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_DeployFromCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_DeployFromPermissionCheckBox_AutoID";
                    this.mPublic_DeployFromCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_DeployFromCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_DeployFromCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_AdministratorCell : WpfCell
    {
        
        public Public_AdministratorCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_AdministratorCheckBox
        {
            get
            {
                if ((this.mPublic_AdministratorCheckBox == null))
                {
                    this.mPublic_AdministratorCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_AdministratorCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_AdministratorPermissionCheckBox_AutoID";
                    this.mPublic_AdministratorCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_AdministratorCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_AdministratorCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_ViewCell : WpfCell
    {
        
        public Public_ViewCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_ViewCheckBox
        {
            get
            {
                if ((this.mPublic_ViewCheckBox == null))
                {
                    this.mPublic_ViewCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_ViewCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_ViewPermissionCheckBox_AutoID";
                    this.mPublic_ViewCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_ViewCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_ViewCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_ExecuteCell : WpfCell
    {
        
        public Public_ExecuteCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_ExecuteCheckBox
        {
            get
            {
                if ((this.mPublic_ExecuteCheckBox == null))
                {
                    this.mPublic_ExecuteCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_ExecuteCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_ExecutePermissionCheckBox_AutoID";
                    this.mPublic_ExecuteCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_ExecuteCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_ExecuteCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Public_ContributeCell : WpfCell
    {
        
        public Public_ContributeCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "7";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox Public_ContributeCheckBox
        {
            get
            {
                if ((this.mPublic_ContributeCheckBox == null))
                {
                    this.mPublic_ContributeCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mPublic_ContributeCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_Public_ContributePermissionCheckBox_AutoID";
                    this.mPublic_ContributeCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPublic_ContributeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mPublic_ContributeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WindowsGroup : WpfCell
    {
        
        public WindowsGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "Public";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton Select_GroupButton
        {
            get
            {
                if ((this.mSelect_GroupButton == null))
                {
                    this.mSelect_GroupButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSelect_GroupButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Public_AddWindowsGroupButton_AutoID";
                    this.mSelect_GroupButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelect_GroupButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mSelect_GroupButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourcePermissions : WpfTable
    {
        
        public ResourcePermissions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ResourcePermissionsDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row1 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row1(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row1 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row1 : WpfPane
    {
        
        public Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResourceCell ResourceCell
        {
            get
            {
                if ((this.mResourceCell == null))
                {
                    this.mResourceCell = new ResourceCell(this);
                }
                return this.mResourceCell;
            }
        }
        
        public WindowsGroupCell WindowsGroupCell
        {
            get
            {
                if ((this.mWindowsGroupCell == null))
                {
                    this.mWindowsGroupCell = new WindowsGroupCell(this);
                }
                return this.mWindowsGroupCell;
            }
        }
        
        public ViewCell1 ViewCell
        {
            get
            {
                if ((this.mViewCell == null))
                {
                    this.mViewCell = new ViewCell1(this);
                }
                return this.mViewCell;
            }
        }
        
        public ExecuteCell1 ExecuteCell
        {
            get
            {
                if ((this.mExecuteCell == null))
                {
                    this.mExecuteCell = new ExecuteCell1(this);
                }
                return this.mExecuteCell;
            }
        }
        
        public ContributeCell1 ContributeCell
        {
            get
            {
                if ((this.mContributeCell == null))
                {
                    this.mContributeCell = new ContributeCell1(this);
                }
                return this.mContributeCell;
            }
        }
        
        public DeleteCell1 DeleteCell
        {
            get
            {
                if ((this.mDeleteCell == null))
                {
                    this.mDeleteCell = new DeleteCell1(this);
                }
                return this.mDeleteCell;
            }
        }
        #endregion
        
        #region Fields
        private ResourceCell mResourceCell;
        
        private WindowsGroupCell mWindowsGroupCell;
        
        private ViewCell1 mViewCell;
        
        private ExecuteCell1 mExecuteCell;
        
        private ContributeCell1 mContributeCell;
        
        private DeleteCell1 mDeleteCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceCell : WpfCell
    {
        
        public ResourceCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText AddResourceText
        {
            get
            {
                if ((this.mAddResourceText == null))
                {
                    this.mAddResourceText = new WpfText(this);
                    #region Search Criteria
                    this.mAddResourceText.SearchProperties[WpfText.PropertyNames.Instance] = "1";
                    this.mAddResourceText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddResourceText;
            }
        }
        
        public WpfButton ItemButton
        {
            get
            {
                if ((this.mItemButton == null))
                {
                    this.mItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mItemButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__AddResourceButton_AutoID";
                    this.mItemButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mAddResourceText;
        
        private WpfButton mItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WindowsGroupCell : WpfCell
    {
        
        public WindowsGroupCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton AddWindowsGroupsButton
        {
            get
            {
                if ((this.mAddWindowsGroupsButton == null))
                {
                    this.mAddWindowsGroupsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mAddWindowsGroupsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__AddWindowsGroupsButton_AutoID";
                    this.mAddWindowsGroupsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddWindowsGroupsButton;
            }
        }
        
        public WpfEdit AddWindowsGroupsEdit
        {
            get
            {
                if ((this.mAddWindowsGroupsEdit == null))
                {
                    this.mAddWindowsGroupsEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mAddWindowsGroupsEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__AddWindowsGroupsTextBox_AutoID";
                    this.mAddWindowsGroupsEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddWindowsGroupsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mAddWindowsGroupsButton;
        
        private WpfEdit mAddWindowsGroupsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ViewCell1 : WpfCell
    {
        
        public ViewCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ViewCheckBox
        {
            get
            {
                if ((this.mViewCheckBox == null))
                {
                    this.mViewCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mViewCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Instance] = "1";
                    this.mViewCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mViewCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExecuteCell1 : WpfCell
    {
        
        public ExecuteCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ExecuteCheckBox
        {
            get
            {
                if ((this.mExecuteCheckBox == null))
                {
                    this.mExecuteCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mExecuteCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Instance] = "1";
                    this.mExecuteCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExecuteCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mExecuteCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ContributeCell1 : WpfCell
    {
        
        public ContributeCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ContributeCheckBox
        {
            get
            {
                if ((this.mContributeCheckBox == null))
                {
                    this.mContributeCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mContributeCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Instance] = "1";
                    this.mContributeCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mContributeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mContributeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteCell1 : WpfCell
    {
        
        public DeleteCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.Instance] = "1";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LoggingTab : WpfTabPage
    {
        
        public LoggingTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "System.Windows.Controls.TabItem Header: Content:";
            this.SearchProperties[WpfTabPage.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LogSettingsViewConte LogSettingsViewConte
        {
            get
            {
                if ((this.mLogSettingsViewConte == null))
                {
                    this.mLogSettingsViewConte = new LogSettingsViewConte(this);
                }
                return this.mLogSettingsViewConte;
            }
        }
        #endregion
        
        #region Fields
        private LogSettingsViewConte mLogSettingsViewConte;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LogSettingsViewConte : WpfCustom
    {
        
        public LogSettingsViewConte(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.LoggingView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LogSettingsViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public StudioLogs StudioLogs
        {
            get
            {
                if ((this.mStudioLogs == null))
                {
                    this.mStudioLogs = new StudioLogs(this);
                }
                return this.mStudioLogs;
            }
        }
        
        public ServerLogs ServerLogs
        {
            get
            {
                if ((this.mServerLogs == null))
                {
                    this.mServerLogs = new ServerLogs(this);
                }
                return this.mServerLogs;
            }
        }
        #endregion
        
        #region Fields
        private StudioLogs mStudioLogs;
        
        private ServerLogs mServerLogs;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StudioLogs : WpfPane
    {
        
        public StudioLogs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public StudioLogFile StudioLogFile
        {
            get
            {
                if ((this.mStudioLogFile == null))
                {
                    this.mStudioLogFile = new StudioLogFile(this);
                }
                return this.mStudioLogFile;
            }
        }
        #endregion
        
        #region Fields
        private StudioLogFile mStudioLogFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StudioLogFile : WpfText
    {
        
        public StudioLogFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "   ";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink ItemHyperlink
        {
            get
            {
                if ((this.mItemHyperlink == null))
                {
                    this.mItemHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mItemHyperlink.SearchProperties[WpfHyperlink.PropertyNames.Instance] = "1";
                    this.mItemHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mItemHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerLogs : WpfPane
    {
        
        public ServerLogs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ServerLogFile ServerLogFile
        {
            get
            {
                if ((this.mServerLogFile == null))
                {
                    this.mServerLogFile = new ServerLogFile(this);
                }
                return this.mServerLogFile;
            }
        }
        #endregion
        
        #region Fields
        private ServerLogFile mServerLogFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerLogFile : WpfText
    {
        
        public ServerLogFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "   ";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink ItemHyperlink
        {
            get
            {
                if ((this.mItemHyperlink == null))
                {
                    this.mItemHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mItemHyperlink.SearchProperties[WpfHyperlink.PropertyNames.Instance] = "1";
                    this.mItemHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mItemHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PerfomanceCounterTab : WpfTabPage
    {
        
        public PerfomanceCounterTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "System.Windows.Controls.TabItem Header: Content:";
            this.SearchProperties[WpfTabPage.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public PerfmonViewContent PerfmonViewContent
        {
            get
            {
                if ((this.mPerfmonViewContent == null))
                {
                    this.mPerfmonViewContent = new PerfmonViewContent(this);
                }
                return this.mPerfmonViewContent;
            }
        }
        #endregion
        
        #region Fields
        private PerfmonViewContent mPerfmonViewContent;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PerfmonViewContent : WpfCustom
    {
        
        public PerfmonViewContent(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.PerfCounterView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PerfmonViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResourceTable ResourceTable
        {
            get
            {
                if ((this.mResourceTable == null))
                {
                    this.mResourceTable = new ResourceTable(this);
                }
                return this.mResourceTable;
            }
        }
        
        public ServerTable ServerTable
        {
            get
            {
                if ((this.mServerTable == null))
                {
                    this.mServerTable = new ServerTable(this);
                }
                return this.mServerTable;
            }
        }
        
        public ResetCounter ResetCounter
        {
            get
            {
                if ((this.mResetCounter == null))
                {
                    this.mResetCounter = new ResetCounter(this);
                }
                return this.mResetCounter;
            }
        }
        #endregion
        
        #region Fields
        private ResourceTable mResourceTable;
        
        private ServerTable mServerTable;
        
        private ResetCounter mResetCounter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceTable : WpfTable
    {
        
        public ResourceTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ResourcePermissionsDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row11 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row11(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row11 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row11 : WpfPane
    {
        
        public Row11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "0";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TotalErrors TotalErrors
        {
            get
            {
                if ((this.mTotalErrors == null))
                {
                    this.mTotalErrors = new TotalErrors(this);
                }
                return this.mTotalErrors;
            }
        }
        
        public ResourceCell1 ResourceCell
        {
            get
            {
                if ((this.mResourceCell == null))
                {
                    this.mResourceCell = new ResourceCell1(this);
                }
                return this.mResourceCell;
            }
        }
        
        public RequestPerSecond RequestPerSecond
        {
            get
            {
                if ((this.mRequestPerSecond == null))
                {
                    this.mRequestPerSecond = new RequestPerSecond(this);
                }
                return this.mRequestPerSecond;
            }
        }
        
        public DeleteCell2 DeleteCell
        {
            get
            {
                if ((this.mDeleteCell == null))
                {
                    this.mDeleteCell = new DeleteCell2(this);
                }
                return this.mDeleteCell;
            }
        }
        
        public ConcurrentRequest ConcurrentRequest
        {
            get
            {
                if ((this.mConcurrentRequest == null))
                {
                    this.mConcurrentRequest = new ConcurrentRequest(this);
                }
                return this.mConcurrentRequest;
            }
        }
        
        public AverageExecTime AverageExecTime
        {
            get
            {
                if ((this.mAverageExecTime == null))
                {
                    this.mAverageExecTime = new AverageExecTime(this);
                }
                return this.mAverageExecTime;
            }
        }
        #endregion
        
        #region Fields
        private TotalErrors mTotalErrors;
        
        private ResourceCell1 mResourceCell;
        
        private RequestPerSecond mRequestPerSecond;
        
        private DeleteCell2 mDeleteCell;
        
        private ConcurrentRequest mConcurrentRequest;
        
        private AverageExecTime mAverageExecTime;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TotalErrors : WpfCell
    {
        
        public TotalErrors(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TotalErrorsCheckbox
        {
            get
            {
                if ((this.mTotalErrorsCheckbox == null))
                {
                    this.mTotalErrorsCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTotalErrorsCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTotalErrorsCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTotalErrorsCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceCell1 : WpfCell
    {
        
        public ResourceCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText ResourceTextBox
        {
            get
            {
                if ((this.mResourceTextBox == null))
                {
                    this.mResourceTextBox = new WpfText(this);
                    #region Search Criteria
                    this.mResourceTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResourceTextBox;
            }
        }
        
        public WpfButton ResourceButton
        {
            get
            {
                if ((this.mResourceButton == null))
                {
                    this.mResourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mResourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResourceButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mResourceTextBox;
        
        private WpfButton mResourceButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RequestPerSecond : WpfCell
    {
        
        public RequestPerSecond(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox RequestPerSecondCheckbox
        {
            get
            {
                if ((this.mRequestPerSecondCheckbox == null))
                {
                    this.mRequestPerSecondCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRequestPerSecondCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRequestPerSecondCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mRequestPerSecondCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteCell2 : WpfCell
    {
        
        public DeleteCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConcurrentRequest : WpfCell
    {
        
        public ConcurrentRequest(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ConcurrentRequestCheckbox
        {
            get
            {
                if ((this.mConcurrentRequestCheckbox == null))
                {
                    this.mConcurrentRequestCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mConcurrentRequestCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConcurrentRequestCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mConcurrentRequestCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AverageExecTime : WpfCell
    {
        
        public AverageExecTime(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox AverageExecTimeCheckbox
        {
            get
            {
                if ((this.mAverageExecTimeCheckbox == null))
                {
                    this.mAverageExecTimeCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mAverageExecTimeCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAverageExecTimeCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mAverageExecTimeCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerTable : WpfTable
    {
        
        public ServerTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ServerPermissionsDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AverageExecCounter AverageExecCounter
        {
            get
            {
                if ((this.mAverageExecCounter == null))
                {
                    this.mAverageExecCounter = new AverageExecCounter(this);
                }
                return this.mAverageExecCounter;
            }
        }
        
        public ConcurrRequest ConcurrRequest
        {
            get
            {
                if ((this.mConcurrRequest == null))
                {
                    this.mConcurrRequest = new ConcurrRequest(this);
                }
                return this.mConcurrRequest;
            }
        }
        
        public RequestPerSeccond RequestPerSeccond
        {
            get
            {
                if ((this.mRequestPerSeccond == null))
                {
                    this.mRequestPerSeccond = new RequestPerSeccond(this);
                }
                return this.mRequestPerSeccond;
            }
        }
        
        public TotalErrors1 TotalErrors
        {
            get
            {
                if ((this.mTotalErrors == null))
                {
                    this.mTotalErrors = new TotalErrors1(this);
                }
                return this.mTotalErrors;
            }
        }
        
        public WorkflowsNotFound WorkflowsNotFound
        {
            get
            {
                if ((this.mWorkflowsNotFound == null))
                {
                    this.mWorkflowsNotFound = new WorkflowsNotFound(this);
                }
                return this.mWorkflowsNotFound;
            }
        }
        
        public NotAuthorisedErrors NotAuthorisedErrors
        {
            get
            {
                if ((this.mNotAuthorisedErrors == null))
                {
                    this.mNotAuthorisedErrors = new NotAuthorisedErrors(this);
                }
                return this.mNotAuthorisedErrors;
            }
        }
        #endregion
        
        #region Fields
        private AverageExecCounter mAverageExecCounter;
        
        private ConcurrRequest mConcurrRequest;
        
        private RequestPerSeccond mRequestPerSeccond;
        
        private TotalErrors1 mTotalErrors;
        
        private WorkflowsNotFound mWorkflowsNotFound;
        
        private NotAuthorisedErrors mNotAuthorisedErrors;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AverageExecCounter : WpfCell
    {
        
        public AverageExecCounter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox AverageExecCounterCheckBox
        {
            get
            {
                if ((this.mAverageExecCounterCheckBox == null))
                {
                    this.mAverageExecCounterCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mAverageExecCounterCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_New_DeployToPermissionCheckBox_AutoID";
                    this.mAverageExecCounterCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAverageExecCounterCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mAverageExecCounterCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConcurrRequest : WpfCell
    {
        
        public ConcurrRequest(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ConcurrRequestCheckBox
        {
            get
            {
                if ((this.mConcurrRequestCheckBox == null))
                {
                    this.mConcurrRequestCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mConcurrRequestCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConcurrRequestCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mConcurrRequestCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RequestPerSeccond : WpfCell
    {
        
        public RequestPerSeccond(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox RequestPerSeccondCheckBox
        {
            get
            {
                if ((this.mRequestPerSeccondCheckBox == null))
                {
                    this.mRequestPerSeccondCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRequestPerSeccondCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRequestPerSeccondCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mRequestPerSeccondCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TotalErrors1 : WpfCell
    {
        
        public TotalErrors1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TotalErrorsCheckBox
        {
            get
            {
                if ((this.mTotalErrorsCheckBox == null))
                {
                    this.mTotalErrorsCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTotalErrorsCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTotalErrorsCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTotalErrorsCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowsNotFound : WpfCell
    {
        
        public WorkflowsNotFound(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox WorkflowsNotFoundCheckBox
        {
            get
            {
                if ((this.mWorkflowsNotFoundCheckBox == null))
                {
                    this.mWorkflowsNotFoundCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mWorkflowsNotFoundCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWorkflowsNotFoundCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mWorkflowsNotFoundCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NotAuthorisedErrors : WpfCell
    {
        
        public NotAuthorisedErrors(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox NotAuthorisedErrorsCheckBox
        {
            get
            {
                if ((this.mNotAuthorisedErrorsCheckBox == null))
                {
                    this.mNotAuthorisedErrorsCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mNotAuthorisedErrorsCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNotAuthorisedErrorsCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mNotAuthorisedErrorsCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResetCounter : WpfText
    {
        
        public ResetCounter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "   ";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink ItemHyperlink
        {
            get
            {
                if ((this.mItemHyperlink == null))
                {
                    this.mItemHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mItemHyperlink.SearchProperties[WpfHyperlink.PropertyNames.Instance] = "1";
                    this.mItemHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mItemHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowTab : WpfTabPage
    {
        
        public WorkflowTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.Workflow.WorkflowDesignerViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        
        public WorkSurfaceContext4 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext4(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfText Workflow1ciremoteText
        {
            get
            {
                if ((this.mWorkflow1ciremoteText == null))
                {
                    this.mWorkflow1ciremoteText = new WpfText(this);
                    #region Search Criteria
                    this.mWorkflow1ciremoteText.SearchProperties[WpfText.PropertyNames.Name] = "workflow1 - ci-remote";
                    this.mWorkflow1ciremoteText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWorkflow1ciremoteText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCloseButton;
        
        private WorkSurfaceContext4 mWorkSurfaceContext;
        
        private WpfText mWorkflow1ciremoteText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext4 : WpfCustom
    {
        
        public WorkSurfaceContext4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowDesignerView WorkflowDesignerView
        {
            get
            {
                if ((this.mWorkflowDesignerView == null))
                {
                    this.mWorkflowDesignerView = new WorkflowDesignerView(this);
                }
                return this.mWorkflowDesignerView;
            }
        }
        
        public TopScrollViewerPane TopScrollViewerPane
        {
            get
            {
                if ((this.mTopScrollViewerPane == null))
                {
                    this.mTopScrollViewerPane = new TopScrollViewerPane(this);
                }
                return this.mTopScrollViewerPane;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowDesignerView mWorkflowDesignerView;
        
        private TopScrollViewerPane mTopScrollViewerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowDesignerView : WpfCustom
    {
        
        public WorkflowDesignerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DesignerView DesignerView
        {
            get
            {
                if ((this.mDesignerView == null))
                {
                    this.mDesignerView = new DesignerView(this);
                }
                return this.mDesignerView;
            }
        }
        #endregion
        
        #region Fields
        private DesignerView mDesignerView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DesignerView : WpfCustom
    {
        
        public DesignerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfToggleButton ExpandAllToggleButton
        {
            get
            {
                if ((this.mExpandAllToggleButton == null))
                {
                    this.mExpandAllToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mExpandAllToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "expandAllButton";
                    this.mExpandAllToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpandAllToggleButton;
            }
        }
        
        public WpfToggleButton CollapseAllToggleButton
        {
            get
            {
                if ((this.mCollapseAllToggleButton == null))
                {
                    this.mCollapseAllToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mCollapseAllToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "collapseAllButton";
                    this.mCollapseAllToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCollapseAllToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane mScrollViewerPane;
        
        private WpfToggleButton mExpandAllToggleButton;
        
        private WpfToggleButton mCollapseAllToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane : WpfPane
    {
        
        public ScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "scrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ActivityTypeDesigner ActivityTypeDesigner
        {
            get
            {
                if ((this.mActivityTypeDesigner == null))
                {
                    this.mActivityTypeDesigner = new ActivityTypeDesigner(this);
                }
                return this.mActivityTypeDesigner;
            }
        }
        #endregion
        
        #region Fields
        private ActivityTypeDesigner mActivityTypeDesigner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ActivityTypeDesigner : WpfCustom
    {
        
        public ActivityTypeDesigner(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ActivityTypeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActivityTypeDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowItemPresenter WorkflowItemPresenter
        {
            get
            {
                if ((this.mWorkflowItemPresenter == null))
                {
                    this.mWorkflowItemPresenter = new WorkflowItemPresenter(this);
                }
                return this.mWorkflowItemPresenter;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowItemPresenter mWorkflowItemPresenter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowItemPresenter : WpfCustom
    {
        
        public WorkflowItemPresenter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Flowchart Flowchart
        {
            get
            {
                if ((this.mFlowchart == null))
                {
                    this.mFlowchart = new Flowchart(this);
                }
                return this.mFlowchart;
            }
        }
        #endregion
        
        #region Fields
        private Flowchart mFlowchart;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Flowchart : WpfCustom
    {
        
        public Flowchart(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RabbitMQPublish RabbitMQPublish
        {
            get
            {
                if ((this.mRabbitMQPublish == null))
                {
                    this.mRabbitMQPublish = new RabbitMQPublish(this);
                }
                return this.mRabbitMQPublish;
            }
        }
        
        public RabbitMQConsume RabbitMQConsume
        {
            get
            {
                if ((this.mRabbitMQConsume == null))
                {
                    this.mRabbitMQConsume = new RabbitMQConsume(this);
                }
                return this.mRabbitMQConsume;
            }
        }
        
        public WebPut WebPut
        {
            get
            {
                if ((this.mWebPut == null))
                {
                    this.mWebPut = new WebPut(this);
                }
                return this.mWebPut;
            }
        }
        
        public WebDelete WebDelete
        {
            get
            {
                if ((this.mWebDelete == null))
                {
                    this.mWebDelete = new WebDelete(this);
                }
                return this.mWebDelete;
            }
        }
        
        public AssignObject1 AssignObject
        {
            get
            {
                if ((this.mAssignObject == null))
                {
                    this.mAssignObject = new AssignObject1(this);
                }
                return this.mAssignObject;
            }
        }
        
        public WebRequest1 WebRequest
        {
            get
            {
                if ((this.mWebRequest == null))
                {
                    this.mWebRequest = new WebRequest1(this);
                }
                return this.mWebRequest;
            }
        }
        
        public DotNetDll1 DotNetDll
        {
            get
            {
                if ((this.mDotNetDll == null))
                {
                    this.mDotNetDll = new DotNetDll1(this);
                }
                return this.mDotNetDll;
            }
        }
        
        public DataMerge1 DataMerge
        {
            get
            {
                if ((this.mDataMerge == null))
                {
                    this.mDataMerge = new DataMerge1(this);
                }
                return this.mDataMerge;
            }
        }
        
        public DataSplit1 DataSplit
        {
            get
            {
                if ((this.mDataSplit == null))
                {
                    this.mDataSplit = new DataSplit1(this);
                }
                return this.mDataSplit;
            }
        }
        
        public MySqlDatabase MySqlDatabase
        {
            get
            {
                if ((this.mMySqlDatabase == null))
                {
                    this.mMySqlDatabase = new MySqlDatabase(this);
                }
                return this.mMySqlDatabase;
            }
        }
        
        public SqlServerDatabase SqlServerDatabase
        {
            get
            {
                if ((this.mSqlServerDatabase == null))
                {
                    this.mSqlServerDatabase = new SqlServerDatabase(this);
                }
                return this.mSqlServerDatabase;
            }
        }
        
        public BaseConvert1 BaseConvert
        {
            get
            {
                if ((this.mBaseConvert == null))
                {
                    this.mBaseConvert = new BaseConvert1(this);
                }
                return this.mBaseConvert;
            }
        }
        
        public CaseConvert1 CaseConvert
        {
            get
            {
                if ((this.mCaseConvert == null))
                {
                    this.mCaseConvert = new CaseConvert1(this);
                }
                return this.mCaseConvert;
            }
        }
        
        public WpfCustom SubWorkflow
        {
            get
            {
                if ((this.mSubWorkflow == null))
                {
                    this.mSubWorkflow = new WpfCustom(this);
                    #region Search Criteria
                    this.mSubWorkflow.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mSubWorkflow.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "workflow", PropertyExpressionOperator.Contains));
                    this.mSubWorkflow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSubWorkflow;
            }
        }
        
        public WpfCustom PluginConnector
        {
            get
            {
                if ((this.mPluginConnector == null))
                {
                    this.mPluginConnector = new WpfCustom(this);
                    #region Search Criteria
                    this.mPluginConnector.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mPluginConnector.SearchProperties[WpfControl.PropertyNames.AutomationId] = "wolf-829(ServiceDesigner)";
                    this.mPluginConnector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPluginConnector;
            }
        }
        
        public WpfCustom WebConnector
        {
            get
            {
                if ((this.mWebConnector == null))
                {
                    this.mWebConnector = new WpfCustom(this);
                    #region Search Criteria
                    this.mWebConnector.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mWebConnector.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Alert(ServiceDesigner)";
                    this.mWebConnector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebConnector;
            }
        }
        
        public WpfCustom DatabaseConnector
        {
            get
            {
                if ((this.mDatabaseConnector == null))
                {
                    this.mDatabaseConnector = new WpfCustom(this);
                    #region Search Criteria
                    this.mDatabaseConnector.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mDatabaseConnector.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MyDataCon(ServiceDesigner)";
                    this.mDatabaseConnector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDatabaseConnector;
            }
        }
        
        public ForEach1 ForEach
        {
            get
            {
                if ((this.mForEach == null))
                {
                    this.mForEach = new ForEach1(this);
                }
                return this.mForEach;
            }
        }
        
        public Length1 Length
        {
            get
            {
                if ((this.mLength == null))
                {
                    this.mLength = new Length1(this);
                }
                return this.mLength;
            }
        }
        
        public FindRecordsIndex FindRecordsIndex
        {
            get
            {
                if ((this.mFindRecordsIndex == null))
                {
                    this.mFindRecordsIndex = new FindRecordsIndex(this);
                }
                return this.mFindRecordsIndex;
            }
        }
        
        public DeleteRecord DeleteRecord
        {
            get
            {
                if ((this.mDeleteRecord == null))
                {
                    this.mDeleteRecord = new DeleteRecord(this);
                }
                return this.mDeleteRecord;
            }
        }
        
        public SortRecords SortRecords
        {
            get
            {
                if ((this.mSortRecords == null))
                {
                    this.mSortRecords = new SortRecords(this);
                }
                return this.mSortRecords;
            }
        }
        
        public CountRecordset CountRecordset
        {
            get
            {
                if ((this.mCountRecordset == null))
                {
                    this.mCountRecordset = new CountRecordset(this);
                }
                return this.mCountRecordset;
            }
        }
        
        public SqlBulkInsert1 SqlBulkInsert
        {
            get
            {
                if ((this.mSqlBulkInsert == null))
                {
                    this.mSqlBulkInsert = new SqlBulkInsert1(this);
                }
                return this.mSqlBulkInsert;
            }
        }
        
        public Unique Unique
        {
            get
            {
                if ((this.mUnique == null))
                {
                    this.mUnique = new Unique(this);
                }
                return this.mUnique;
            }
        }
        
        public CreateJson1 CreateJson
        {
            get
            {
                if ((this.mCreateJson == null))
                {
                    this.mCreateJson = new CreateJson1(this);
                }
                return this.mCreateJson;
            }
        }
        
        public ExecuteCommandLine ExecuteCommandLine
        {
            get
            {
                if ((this.mExecuteCommandLine == null))
                {
                    this.mExecuteCommandLine = new ExecuteCommandLine(this);
                }
                return this.mExecuteCommandLine;
            }
        }
        
        public SharepointMoveFile SharepointMoveFile
        {
            get
            {
                if ((this.mSharepointMoveFile == null))
                {
                    this.mSharepointMoveFile = new SharepointMoveFile(this);
                }
                return this.mSharepointMoveFile;
            }
        }
        
        public SharepointCreateListItem SharepointCreateListItem
        {
            get
            {
                if ((this.mSharepointCreateListItem == null))
                {
                    this.mSharepointCreateListItem = new SharepointCreateListItem(this);
                }
                return this.mSharepointCreateListItem;
            }
        }
        
        public SharepointCopyFile SharepointCopyFile
        {
            get
            {
                if ((this.mSharepointCopyFile == null))
                {
                    this.mSharepointCopyFile = new SharepointCopyFile(this);
                }
                return this.mSharepointCopyFile;
            }
        }
        
        public SharepointDeleteFile SharepointDeleteFile
        {
            get
            {
                if ((this.mSharepointDeleteFile == null))
                {
                    this.mSharepointDeleteFile = new SharepointDeleteFile(this);
                }
                return this.mSharepointDeleteFile;
            }
        }
        
        public SharepointRead SharepointRead
        {
            get
            {
                if ((this.mSharepointRead == null))
                {
                    this.mSharepointRead = new SharepointRead(this);
                }
                return this.mSharepointRead;
            }
        }
        
        public SharepointUpdate SharepointUpdate
        {
            get
            {
                if ((this.mSharepointUpdate == null))
                {
                    this.mSharepointUpdate = new SharepointUpdate(this);
                }
                return this.mSharepointUpdate;
            }
        }
        
        public SharepointUploadFile SharepointUploadFile
        {
            get
            {
                if ((this.mSharepointUploadFile == null))
                {
                    this.mSharepointUploadFile = new SharepointUploadFile(this);
                }
                return this.mSharepointUploadFile;
            }
        }
        
        public Calculate1 Calculate
        {
            get
            {
                if ((this.mCalculate == null))
                {
                    this.mCalculate = new Calculate1(this);
                }
                return this.mCalculate;
            }
        }
        
        public AggregateCalculat AggregateCalculat
        {
            get
            {
                if ((this.mAggregateCalculat == null))
                {
                    this.mAggregateCalculat = new AggregateCalculat(this);
                }
                return this.mAggregateCalculat;
            }
        }
        
        public DateTime1 DateTime
        {
            get
            {
                if ((this.mDateTime == null))
                {
                    this.mDateTime = new DateTime1(this);
                }
                return this.mDateTime;
            }
        }
        
        public DateTimeDifference1 DateTimeDifference
        {
            get
            {
                if ((this.mDateTimeDifference == null))
                {
                    this.mDateTimeDifference = new DateTimeDifference1(this);
                }
                return this.mDateTimeDifference;
            }
        }
        
        public GatherSystemInfo GatherSystemInfo
        {
            get
            {
                if ((this.mGatherSystemInfo == null))
                {
                    this.mGatherSystemInfo = new GatherSystemInfo(this);
                }
                return this.mGatherSystemInfo;
            }
        }
        
        public FormatNumber1 FormatNumber
        {
            get
            {
                if ((this.mFormatNumber == null))
                {
                    this.mFormatNumber = new FormatNumber1(this);
                }
                return this.mFormatNumber;
            }
        }
        
        public Random1 Random
        {
            get
            {
                if ((this.mRandom == null))
                {
                    this.mRandom = new Random1(this);
                }
                return this.mRandom;
            }
        }
        
        public SMTPEmail SMTPEmail
        {
            get
            {
                if ((this.mSMTPEmail == null))
                {
                    this.mSMTPEmail = new SMTPEmail(this);
                }
                return this.mSMTPEmail;
            }
        }
        
        public ExchangeEmail ExchangeEmail
        {
            get
            {
                if ((this.mExchangeEmail == null))
                {
                    this.mExchangeEmail = new ExchangeEmail(this);
                }
                return this.mExchangeEmail;
            }
        }
        
        public Comment1 Comment
        {
            get
            {
                if ((this.mComment == null))
                {
                    this.mComment = new Comment1(this);
                }
                return this.mComment;
            }
        }
        
        public XPath1 XPath
        {
            get
            {
                if ((this.mXPath == null))
                {
                    this.mXPath = new XPath1(this);
                }
                return this.mXPath;
            }
        }
        
        public WpfCustom DropBox_DOWNLOAD
        {
            get
            {
                if ((this.mDropBox_DOWNLOAD == null))
                {
                    this.mDropBox_DOWNLOAD = new WpfCustom(this);
                    #region Search Criteria
                    this.mDropBox_DOWNLOAD.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DropBoxDownloadDesigner";
                    this.mDropBox_DOWNLOAD.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DOWNLOAD from Dropbox(DropBoxDownloadDesigner)";
                    this.mDropBox_DOWNLOAD.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDropBox_DOWNLOAD;
            }
        }
        
        public WpfCustom DropBox_UPLOAD
        {
            get
            {
                if ((this.mDropBox_UPLOAD == null))
                {
                    this.mDropBox_UPLOAD = new WpfCustom(this);
                    #region Search Criteria
                    this.mDropBox_UPLOAD.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DropBoxUploadDesigner";
                    this.mDropBox_UPLOAD.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Upload to Dropbox(DropBoxUploadDesigner)";
                    this.mDropBox_UPLOAD.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDropBox_UPLOAD;
            }
        }
        
        public PathCreate PathCreate
        {
            get
            {
                if ((this.mPathCreate == null))
                {
                    this.mPathCreate = new PathCreate(this);
                }
                return this.mPathCreate;
            }
        }
        
        public PathCopy PathCopy
        {
            get
            {
                if ((this.mPathCopy == null))
                {
                    this.mPathCopy = new PathCopy(this);
                }
                return this.mPathCopy;
            }
        }
        
        public PathDelete PathDelete
        {
            get
            {
                if ((this.mPathDelete == null))
                {
                    this.mPathDelete = new PathDelete(this);
                }
                return this.mPathDelete;
            }
        }
        
        public PathMove PathMove
        {
            get
            {
                if ((this.mPathMove == null))
                {
                    this.mPathMove = new PathMove(this);
                }
                return this.mPathMove;
            }
        }
        
        public FolderRead FolderRead
        {
            get
            {
                if ((this.mFolderRead == null))
                {
                    this.mFolderRead = new FolderRead(this);
                }
                return this.mFolderRead;
            }
        }
        
        public FileRead FileRead
        {
            get
            {
                if ((this.mFileRead == null))
                {
                    this.mFileRead = new FileRead(this);
                }
                return this.mFileRead;
            }
        }
        
        public FileWrite FileWrite
        {
            get
            {
                if ((this.mFileWrite == null))
                {
                    this.mFileWrite = new FileWrite(this);
                }
                return this.mFileWrite;
            }
        }
        
        public PathRename PathRename
        {
            get
            {
                if ((this.mPathRename == null))
                {
                    this.mPathRename = new PathRename(this);
                }
                return this.mPathRename;
            }
        }
        
        public UnZip1 UnZip
        {
            get
            {
                if ((this.mUnZip == null))
                {
                    this.mUnZip = new UnZip1(this);
                }
                return this.mUnZip;
            }
        }
        
        public Zip1 Zip
        {
            get
            {
                if ((this.mZip == null))
                {
                    this.mZip = new Zip1(this);
                }
                return this.mZip;
            }
        }
        
        public FindIndex1 FindIndex
        {
            get
            {
                if ((this.mFindIndex == null))
                {
                    this.mFindIndex = new FindIndex1(this);
                }
                return this.mFindIndex;
            }
        }
        
        public Replace1 Replace
        {
            get
            {
                if ((this.mReplace == null))
                {
                    this.mReplace = new Replace1(this);
                }
                return this.mReplace;
            }
        }
        
        public Decision1 Decision
        {
            get
            {
                if ((this.mDecision == null))
                {
                    this.mDecision = new Decision1(this);
                }
                return this.mDecision;
            }
        }
        
        public Switch1 Switch
        {
            get
            {
                if ((this.mSwitch == null))
                {
                    this.mSwitch = new Switch1(this);
                }
                return this.mSwitch;
            }
        }
        
        public Sequence1 Sequence
        {
            get
            {
                if ((this.mSequence == null))
                {
                    this.mSequence = new Sequence1(this);
                }
                return this.mSequence;
            }
        }
        
        public MultiAssign1 MultiAssign
        {
            get
            {
                if ((this.mMultiAssign == null))
                {
                    this.mMultiAssign = new MultiAssign1(this);
                }
                return this.mMultiAssign;
            }
        }
        
        public WpfCustom StartNode
        {
            get
            {
                if ((this.mStartNode == null))
                {
                    this.mStartNode = new WpfCustom(this);
                    #region Search Criteria
                    this.mStartNode.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.StartSymbol";
                    this.mStartNode.SearchProperties[WpfControl.PropertyNames.AutomationId] = "StartSymbol";
                    this.mStartNode.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStartNode;
            }
        }
        
        public WebPost WebPost
        {
            get
            {
                if ((this.mWebPost == null))
                {
                    this.mWebPost = new WebPost(this);
                }
                return this.mWebPost;
            }
        }
        
        public WpfCustom Connector1
        {
            get
            {
                if ((this.mConnector1 == null))
                {
                    this.mConnector1 = new WpfCustom(this);
                    #region Search Criteria
                    this.mConnector1.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectorWithoutStartDot";
                    this.mConnector1.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
                    this.mConnector1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnector1;
            }
        }
        
        public WpfCustom Connector2
        {
            get
            {
                if ((this.mConnector2 == null))
                {
                    this.mConnector2 = new WpfCustom(this);
                    #region Search Criteria
                    this.mConnector2.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectorWithoutStartDot";
                    this.mConnector2.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
                    this.mConnector2.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnector2;
            }
        }
        
        public WpfCustom Connector3
        {
            get
            {
                if ((this.mConnector3 == null))
                {
                    this.mConnector3 = new WpfCustom(this);
                    #region Search Criteria
                    this.mConnector3.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectorWithoutStartDot";
                    this.mConnector3.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
                    this.mConnector3.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnector3;
            }
        }
        
        public Error1 Error1
        {
            get
            {
                if ((this.mError1 == null))
                {
                    this.mError1 = new Error1(this);
                }
                return this.mError1;
            }
        }
        
        public WebGet WebGet
        {
            get
            {
                if ((this.mWebGet == null))
                {
                    this.mWebGet = new WebGet(this);
                }
                return this.mWebGet;
            }
        }
        
        public ExternalWorkFlow ExternalWorkFlow
        {
            get
            {
                if ((this.mExternalWorkFlow == null))
                {
                    this.mExternalWorkFlow = new ExternalWorkFlow(this);
                }
                return this.mExternalWorkFlow;
            }
        }
        
        public Javascript1 Javascript
        {
            get
            {
                if ((this.mJavascript == null))
                {
                    this.mJavascript = new Javascript1(this);
                }
                return this.mJavascript;
            }
        }
        
        public Python1 Python
        {
            get
            {
                if ((this.mPython == null))
                {
                    this.mPython = new Python1(this);
                }
                return this.mPython;
            }
        }
        
        public Ruby1 Ruby
        {
            get
            {
                if ((this.mRuby == null))
                {
                    this.mRuby = new Ruby1(this);
                }
                return this.mRuby;
            }
        }
        
        public SelectAndApply1 SelectAndApply
        {
            get
            {
                if ((this.mSelectAndApply == null))
                {
                    this.mSelectAndApply = new SelectAndApply1(this);
                }
                return this.mSelectAndApply;
            }
        }
        
        public WpfCustom HelloWorldWorkFlow
        {
            get
            {
                if ((this.mHelloWorldWorkFlow == null))
                {
                    this.mHelloWorldWorkFlow = new WpfCustom(this);
                    #region Search Criteria
                    this.mHelloWorldWorkFlow.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mHelloWorldWorkFlow.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Hello World(ServiceDesigner)";
                    this.mHelloWorldWorkFlow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHelloWorldWorkFlow;
            }
        }
        
        public ODBCDatabaseActivCustom ODBCDatabaseActivCustom
        {
            get
            {
                if ((this.mODBCDatabaseActivCustom == null))
                {
                    this.mODBCDatabaseActivCustom = new ODBCDatabaseActivCustom(this);
                }
                return this.mODBCDatabaseActivCustom;
            }
        }
        
        public OracleDatabaseActCustom OracleDatabaseActCustom
        {
            get
            {
                if ((this.mOracleDatabaseActCustom == null))
                {
                    this.mOracleDatabaseActCustom = new OracleDatabaseActCustom(this);
                }
                return this.mOracleDatabaseActCustom;
            }
        }
        
        public PostgreSqlActivitCustom PostgreSqlActivitCustom
        {
            get
            {
                if ((this.mPostgreSqlActivitCustom == null))
                {
                    this.mPostgreSqlActivitCustom = new PostgreSqlActivitCustom(this);
                }
                return this.mPostgreSqlActivitCustom;
            }
        }
        
        public SharepointDownloadFile SharepointDownloadFile
        {
            get
            {
                if ((this.mSharepointDownloadFile == null))
                {
                    this.mSharepointDownloadFile = new SharepointDownloadFile(this);
                }
                return this.mSharepointDownloadFile;
            }
        }
        #endregion
        
        #region Fields
        private RabbitMQPublish mRabbitMQPublish;
        
        private RabbitMQConsume mRabbitMQConsume;
        
        private WebPut mWebPut;
        
        private WebDelete mWebDelete;
        
        private AssignObject1 mAssignObject;
        
        private WebRequest1 mWebRequest;
        
        private DotNetDll1 mDotNetDll;
        
        private DataMerge1 mDataMerge;
        
        private DataSplit1 mDataSplit;
        
        private MySqlDatabase mMySqlDatabase;
        
        private SqlServerDatabase mSqlServerDatabase;
        
        private BaseConvert1 mBaseConvert;
        
        private CaseConvert1 mCaseConvert;
        
        private WpfCustom mSubWorkflow;
        
        private WpfCustom mPluginConnector;
        
        private WpfCustom mWebConnector;
        
        private WpfCustom mDatabaseConnector;
        
        private ForEach1 mForEach;
        
        private Length1 mLength;
        
        private FindRecordsIndex mFindRecordsIndex;
        
        private DeleteRecord mDeleteRecord;
        
        private SortRecords mSortRecords;
        
        private CountRecordset mCountRecordset;
        
        private SqlBulkInsert1 mSqlBulkInsert;
        
        private Unique mUnique;
        
        private CreateJson1 mCreateJson;
        
        private ExecuteCommandLine mExecuteCommandLine;
        
        private SharepointMoveFile mSharepointMoveFile;
        
        private SharepointCreateListItem mSharepointCreateListItem;
        
        private SharepointCopyFile mSharepointCopyFile;
        
        private SharepointDeleteFile mSharepointDeleteFile;
        
        private SharepointRead mSharepointRead;
        
        private SharepointUpdate mSharepointUpdate;
        
        private SharepointUploadFile mSharepointUploadFile;
        
        private Calculate1 mCalculate;
        
        private AggregateCalculat mAggregateCalculat;
        
        private DateTime1 mDateTime;
        
        private DateTimeDifference1 mDateTimeDifference;
        
        private GatherSystemInfo mGatherSystemInfo;
        
        private FormatNumber1 mFormatNumber;
        
        private Random1 mRandom;
        
        private SMTPEmail mSMTPEmail;
        
        private ExchangeEmail mExchangeEmail;
        
        private Comment1 mComment;
        
        private XPath1 mXPath;
        
        private WpfCustom mDropBox_DOWNLOAD;
        
        private WpfCustom mDropBox_UPLOAD;
        
        private PathCreate mPathCreate;
        
        private PathCopy mPathCopy;
        
        private PathDelete mPathDelete;
        
        private PathMove mPathMove;
        
        private FolderRead mFolderRead;
        
        private FileRead mFileRead;
        
        private FileWrite mFileWrite;
        
        private PathRename mPathRename;
        
        private UnZip1 mUnZip;
        
        private Zip1 mZip;
        
        private FindIndex1 mFindIndex;
        
        private Replace1 mReplace;
        
        private Decision1 mDecision;
        
        private Switch1 mSwitch;
        
        private Sequence1 mSequence;
        
        private MultiAssign1 mMultiAssign;
        
        private WpfCustom mStartNode;
        
        private WebPost mWebPost;
        
        private WpfCustom mConnector1;
        
        private WpfCustom mConnector2;
        
        private WpfCustom mConnector3;
        
        private Error1 mError1;
        
        private WebGet mWebGet;
        
        private ExternalWorkFlow mExternalWorkFlow;
        
        private Javascript1 mJavascript;
        
        private Python1 mPython;
        
        private Ruby1 mRuby;
        
        private SelectAndApply1 mSelectAndApply;
        
        private WpfCustom mHelloWorldWorkFlow;
        
        private ODBCDatabaseActivCustom mODBCDatabaseActivCustom;
        
        private OracleDatabaseActCustom mOracleDatabaseActCustom;
        
        private PostgreSqlActivitCustom mPostgreSqlActivitCustom;
        
        private SharepointDownloadFile mSharepointDownloadFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RabbitMQPublish : WpfCustom
    {
        
        public RabbitMQPublish(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RabbitMQPublishDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "RabbitMQ Publish(RabbitMQPublishDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeViewContentCustom LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public SmallViewContentCustom SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private LargeViewContentCustom mLargeViewContentCustom;
        
        private WpfButton mDoneButton;
        
        private SmallViewContentCustom mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom : WpfCustom
    {
        
        public LargeViewContentCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox SourceComboBox
        {
            get
            {
                if ((this.mSourceComboBox == null))
                {
                    this.mSourceComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSourceComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "InitialFocusElement";
                    this.mSourceComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourceComboBox;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditRabbitMQSourceBtn_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.Name] = "New";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public QueueNameComboBox QueueNameComboBox
        {
            get
            {
                if ((this.mQueueNameComboBox == null))
                {
                    this.mQueueNameComboBox = new QueueNameComboBox(this);
                }
                return this.mQueueNameComboBox;
            }
        }
        
        public WpfCheckBox ExclusiveCheckBox
        {
            get
            {
                if ((this.mExclusiveCheckBox == null))
                {
                    this.mExclusiveCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mExclusiveCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Exclusive";
                    this.mExclusiveCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExclusiveCheckBox;
            }
        }
        
        public WpfCheckBox DurableCheckBox
        {
            get
            {
                if ((this.mDurableCheckBox == null))
                {
                    this.mDurableCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mDurableCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Durable";
                    this.mDurableCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDurableCheckBox;
            }
        }
        
        public WpfCheckBox AutoDeleteCheckBox
        {
            get
            {
                if ((this.mAutoDeleteCheckBox == null))
                {
                    this.mAutoDeleteCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mAutoDeleteCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Auto Delete";
                    this.mAutoDeleteCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAutoDeleteCheckBox;
            }
        }
        
        public MessageComboBox MessageComboBox
        {
            get
            {
                if ((this.mMessageComboBox == null))
                {
                    this.mMessageComboBox = new MessageComboBox(this);
                }
                return this.mMessageComboBox;
            }
        }
        
        public ResultsComboBox ResultsComboBox
        {
            get
            {
                if ((this.mResultsComboBox == null))
                {
                    this.mResultsComboBox = new ResultsComboBox(this);
                }
                return this.mResultsComboBox;
            }
        }
        
        public OnErrorCustom OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mSourceComboBox;
        
        private WpfButton mEditSourceButton;
        
        private WpfButton mNewSourceButton;
        
        private QueueNameComboBox mQueueNameComboBox;
        
        private WpfCheckBox mExclusiveCheckBox;
        
        private WpfCheckBox mDurableCheckBox;
        
        private WpfCheckBox mAutoDeleteCheckBox;
        
        private MessageComboBox mMessageComboBox;
        
        private ResultsComboBox mResultsComboBox;
        
        private OnErrorCustom mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QueueNameComboBox : WpfComboBox
    {
        
        public QueueNameComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__tostxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MessageComboBox : WpfComboBox
    {
        
        public MessageComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__bodytxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultsComboBox : WpfComboBox
    {
        
        public ResultsComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resultstxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom : WpfCustom
    {
        
        public OnErrorCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup : WpfGroup
    {
        
        public OnErrorGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox mErrorVariableComboBox;
        
        private WebServiceComboBox mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox : WpfComboBox
    {
        
        public ErrorVariableComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox : WpfComboBox
    {
        
        public WebServiceComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom : WpfCustom
    {
        
        public SmallViewContentCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfComboBox SourceComboBox
        {
            get
            {
                if ((this.mSourceComboBox == null))
                {
                    this.mSourceComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSourceComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "InitialFocusElement";
                    this.mSourceComboBox.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mSourceComboBox;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.Name] = "New";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditRabbitMQSourceBtn_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public QueueNameComboBox1 QueueNameComboBox
        {
            get
            {
                if ((this.mQueueNameComboBox == null))
                {
                    this.mQueueNameComboBox = new QueueNameComboBox1(this);
                }
                return this.mQueueNameComboBox;
            }
        }
        
        public MessageComboBox1 MessageComboBox
        {
            get
            {
                if ((this.mMessageComboBox == null))
                {
                    this.mMessageComboBox = new MessageComboBox1(this);
                }
                return this.mMessageComboBox;
            }
        }
        
        public ResultsComboBox1 ResultsComboBox
        {
            get
            {
                if ((this.mResultsComboBox == null))
                {
                    this.mResultsComboBox = new ResultsComboBox1(this);
                }
                return this.mResultsComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mSourceComboBox;
        
        private WpfButton mNewSourceButton;
        
        private WpfButton mEditSourceButton;
        
        private QueueNameComboBox1 mQueueNameComboBox;
        
        private MessageComboBox1 mMessageComboBox;
        
        private ResultsComboBox1 mResultsComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QueueNameComboBox1 : WpfComboBox
    {
        
        public QueueNameComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__tostxt_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MessageComboBox1 : WpfComboBox
    {
        
        public MessageComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__bodytxt_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultsComboBox1 : WpfComboBox
    {
        
        public ResultsComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resultstxt_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RabbitMQConsume : WpfCustom
    {
        
        public RabbitMQConsume(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RabbitMQConsumeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "RabbitMQ Consume(RabbitMQConsumeDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeViewContentCustom1 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom1(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public SmallViewContentCustom1 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom1(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private LargeViewContentCustom1 mLargeViewContentCustom;
        
        private WpfButton mDoneButton;
        
        private SmallViewContentCustom1 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom1 : WpfCustom
    {
        
        public LargeViewContentCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox SourceComboBox
        {
            get
            {
                if ((this.mSourceComboBox == null))
                {
                    this.mSourceComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSourceComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "InitialFocusElement";
                    this.mSourceComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourceComboBox;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditRabbitMQSourceBtn_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.Name] = "New";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public QueueNameComboBox2 QueueNameComboBox
        {
            get
            {
                if ((this.mQueueNameComboBox == null))
                {
                    this.mQueueNameComboBox = new QueueNameComboBox2(this);
                }
                return this.mQueueNameComboBox;
            }
        }
        
        public ResponseComboBox ResponseComboBox
        {
            get
            {
                if ((this.mResponseComboBox == null))
                {
                    this.mResponseComboBox = new ResponseComboBox(this);
                }
                return this.mResponseComboBox;
            }
        }
        
        public PrefetchComboBox PrefetchComboBox
        {
            get
            {
                if ((this.mPrefetchComboBox == null))
                {
                    this.mPrefetchComboBox = new PrefetchComboBox(this);
                }
                return this.mPrefetchComboBox;
            }
        }
        
        public TimeOutComboBox TimeOutComboBox
        {
            get
            {
                if ((this.mTimeOutComboBox == null))
                {
                    this.mTimeOutComboBox = new TimeOutComboBox(this);
                }
                return this.mTimeOutComboBox;
            }
        }
        
        public WpfCheckBox AcknowledgeCheckBox
        {
            get
            {
                if ((this.mAcknowledgeCheckBox == null))
                {
                    this.mAcknowledgeCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mAcknowledgeCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Acknowledge";
                    this.mAcknowledgeCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAcknowledgeCheckBox;
            }
        }
        
        public WpfCheckBox ReQueueCheckBox
        {
            get
            {
                if ((this.mReQueueCheckBox == null))
                {
                    this.mReQueueCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mReQueueCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "ReQueue";
                    this.mReQueueCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReQueueCheckBox;
            }
        }
        
        public ResultsComboBox2 ResultsComboBox
        {
            get
            {
                if ((this.mResultsComboBox == null))
                {
                    this.mResultsComboBox = new ResultsComboBox2(this);
                }
                return this.mResultsComboBox;
            }
        }
        
        public OnErrorCustom1 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom1(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mSourceComboBox;
        
        private WpfButton mEditSourceButton;
        
        private WpfButton mNewSourceButton;
        
        private QueueNameComboBox2 mQueueNameComboBox;
        
        private ResponseComboBox mResponseComboBox;
        
        private PrefetchComboBox mPrefetchComboBox;
        
        private TimeOutComboBox mTimeOutComboBox;
        
        private WpfCheckBox mAcknowledgeCheckBox;
        
        private WpfCheckBox mReQueueCheckBox;
        
        private ResultsComboBox2 mResultsComboBox;
        
        private OnErrorCustom1 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QueueNameComboBox2 : WpfComboBox
    {
        
        public QueueNameComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__tostxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResponseComboBox : WpfComboBox
    {
        
        public ResponseComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__tostxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PrefetchComboBox : WpfComboBox
    {
        
        public PrefetchComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__tostxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TimeOutComboBox : WpfComboBox
    {
        
        public TimeOutComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__tostxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultsComboBox2 : WpfComboBox
    {
        
        public ResultsComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resultstxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom1 : WpfCustom
    {
        
        public OnErrorCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup1 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup1(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup1 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup1 : WpfGroup
    {
        
        public OnErrorGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox1 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox1(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox1 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox1(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox1 mErrorVariableComboBox;
        
        private WebServiceComboBox1 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox1 : WpfComboBox
    {
        
        public ErrorVariableComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox1 : WpfComboBox
    {
        
        public WebServiceComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom1 : WpfCustom
    {
        
        public SmallViewContentCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox SourceComboBox
        {
            get
            {
                if ((this.mSourceComboBox == null))
                {
                    this.mSourceComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSourceComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "InitialFocusElement";
                    this.mSourceComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourceComboBox;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditRabbitMQSourceBtn_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.Name] = "New";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public QueueNameComboBox3 QueueNameComboBox
        {
            get
            {
                if ((this.mQueueNameComboBox == null))
                {
                    this.mQueueNameComboBox = new QueueNameComboBox3(this);
                }
                return this.mQueueNameComboBox;
            }
        }
        
        public ResponseComboBox1 ResponseComboBox
        {
            get
            {
                if ((this.mResponseComboBox == null))
                {
                    this.mResponseComboBox = new ResponseComboBox1(this);
                }
                return this.mResponseComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mSourceComboBox;
        
        private WpfButton mEditSourceButton;
        
        private WpfButton mNewSourceButton;
        
        private QueueNameComboBox3 mQueueNameComboBox;
        
        private ResponseComboBox1 mResponseComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QueueNameComboBox3 : WpfComboBox
    {
        
        public QueueNameComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__tostxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResponseComboBox1 : WpfComboBox
    {
        
        public ResponseComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__tostxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebPut : WpfCustom
    {
        
        public WebPut(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PUT Web Method(WebServicePutDesigner)";
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WebServicePutDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeView LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfEdit ResponseTextbox
        {
            get
            {
                if ((this.mResponseTextbox == null))
                {
                    this.mResponseTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mResponseTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ResponseTextbox";
                    this.mResponseTextbox.SearchProperties[WpfEdit.PropertyNames.Instance] = "2";
                    this.mResponseTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResponseTextbox;
            }
        }
        #endregion
        
        #region Fields
        private LargeView mLargeView;
        
        private WpfEdit mResponseTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView : WpfCustom
    {
        
        public LargeView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfTable InputDataGridTable
        {
            get
            {
                if ((this.mInputDataGridTable == null))
                {
                    this.mInputDataGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mInputDataGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
                    this.mInputDataGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputDataGridTable;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.Name] = "Cancel";
                    this.mCancelButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton PasteButton
        {
            get
            {
                if ((this.mPasteButton == null))
                {
                    this.mPasteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mPasteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PasteButton";
                    this.mPasteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasteButton;
            }
        }
        
        public Table Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table(this);
                }
                return this.mTable;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceEditButton";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceNewButton";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public WpfComboBox SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSourcesComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
                    this.mSourcesComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesComboBox;
            }
        }
        
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public WpfCheckBox OutputtoObjectCheckBox
        {
            get
            {
                if ((this.mOutputtoObjectCheckBox == null))
                {
                    this.mOutputtoObjectCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputtoObjectCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "IsObjectCheckBox";
                    this.mOutputtoObjectCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputtoObjectCheckBox;
            }
        }
        
        public QueryStringText QueryStringText
        {
            get
            {
                if ((this.mQueryStringText == null))
                {
                    this.mQueryStringText = new QueryStringText(this);
                }
                return this.mQueryStringText;
            }
        }
        
        public WpfEdit RequestBody
        {
            get
            {
                if ((this.mRequestBody == null))
                {
                    this.mRequestBody = new WpfEdit(this);
                    #region Search Criteria
                    this.mRequestBody.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RequestBody";
                    this.mRequestBody.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRequestBody;
            }
        }
        
        public WpfTable OutputsGridTable
        {
            get
            {
                if ((this.mOutputsGridTable == null))
                {
                    this.mOutputsGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mOutputsGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsMappingDataGrid";
                    this.mOutputsGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputsGridTable;
            }
        }
        
        public WpfEdit RecordSetTextBox
        {
            get
            {
                if ((this.mRecordSetTextBox == null))
                {
                    this.mRecordSetTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordSetTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RecordSetTextBox";
                    this.mRecordSetTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordSetTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfTable mInputDataGridTable;
        
        private WpfButton mCancelButton;
        
        private WpfButton mPasteButton;
        
        private Table mTable;
        
        private WpfButton mEditSourceButton;
        
        private WpfButton mNewSourceButton;
        
        private WpfComboBox mSourcesComboBox;
        
        private WpfButton mGenerateOutputsButton;
        
        private WpfCheckBox mOutputtoObjectCheckBox;
        
        private QueryStringText mQueryStringText;
        
        private WpfEdit mRequestBody;
        
        private WpfTable mOutputsGridTable;
        
        private WpfEdit mRecordSetTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table : WpfTable
    {
        
        public Table(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "Headers";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemRow1 ItemRow1
        {
            get
            {
                if ((this.mItemRow1 == null))
                {
                    this.mItemRow1 = new ItemRow1(this);
                }
                return this.mItemRow1;
            }
        }
        #endregion
        
        #region Fields
        private ItemRow1 mItemRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemRow1 : WpfRow
    {
        
        public ItemRow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = null;
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemValueCell ItemValueCell
        {
            get
            {
                if ((this.mItemValueCell == null))
                {
                    this.mItemValueCell = new ItemValueCell(this);
                }
                return this.mItemValueCell;
            }
        }
        
        public HeaderCell HeaderCell
        {
            get
            {
                if ((this.mHeaderCell == null))
                {
                    this.mHeaderCell = new HeaderCell(this);
                }
                return this.mHeaderCell;
            }
        }
        #endregion
        
        #region Fields
        private ItemValueCell mItemValueCell;
        
        private HeaderCell mHeaderCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemValueCell : WpfCell
    {
        
        public ItemValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueComboBox ValueComboBox
        {
            get
            {
                if ((this.mValueComboBox == null))
                {
                    this.mValueComboBox = new ValueComboBox(this);
                }
                return this.mValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ValueComboBox mValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueComboBox : WpfComboBox
    {
        
        public ValueComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "To supply additional header information in your get request, put the header info " +
                "in here.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderCell : WpfCell
    {
        
        public HeaderCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Header";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public HeaderComboBox HeaderComboBox
        {
            get
            {
                if ((this.mHeaderComboBox == null))
                {
                    this.mHeaderComboBox = new HeaderComboBox(this);
                }
                return this.mHeaderComboBox;
            }
        }
        #endregion
        
        #region Fields
        private HeaderComboBox mHeaderComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderComboBox : WpfComboBox
    {
        
        public HeaderComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "To supply additional header information in your get request, put the header info " +
                "in here.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QueryStringText : WpfText
    {
        
        public QueryStringText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "QueryStringLable";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebDelete : WpfCustom
    {
        
        public WebDelete(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "DELETE Web Method(WebServiceDeleteDesigner)", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeView1 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView1(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfCustom SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new WpfCustom(this);
                    #region Search Criteria
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
                    this.mSmallView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private LargeView1 mLargeView;
        
        private WpfButton mDoneButton;
        
        private WpfCustom mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView1 : WpfCustom
    {
        
        public LargeView1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfTable InputDataGridTable
        {
            get
            {
                if ((this.mInputDataGridTable == null))
                {
                    this.mInputDataGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mInputDataGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
                    this.mInputDataGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputDataGridTable;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.Name] = "Cancel";
                    this.mCancelButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton PasteButton
        {
            get
            {
                if ((this.mPasteButton == null))
                {
                    this.mPasteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mPasteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PasteButton";
                    this.mPasteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Paste a customized response instead";
                    this.mPasteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasteButton;
            }
        }
        
        public Table1 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table1(this);
                }
                return this.mTable;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceEditButton";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceNewButton";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public SourcesComboBox SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new SourcesComboBox(this);
                }
                return this.mSourcesComboBox;
            }
        }
        
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public WpfCheckBox OutputtoObjectCheckBox
        {
            get
            {
                if ((this.mOutputtoObjectCheckBox == null))
                {
                    this.mOutputtoObjectCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputtoObjectCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "IsObjectCheckBox";
                    this.mOutputtoObjectCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputtoObjectCheckBox;
            }
        }
        
        public QueryStringText1 QueryStringText
        {
            get
            {
                if ((this.mQueryStringText == null))
                {
                    this.mQueryStringText = new QueryStringText1(this);
                }
                return this.mQueryStringText;
            }
        }
        
        public WpfTable OutputsGridTable
        {
            get
            {
                if ((this.mOutputsGridTable == null))
                {
                    this.mOutputsGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mOutputsGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsMappingDataGrid";
                    this.mOutputsGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputsGridTable;
            }
        }
        
        public WpfEdit RecordSetTextBox
        {
            get
            {
                if ((this.mRecordSetTextBox == null))
                {
                    this.mRecordSetTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordSetTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RecordSetTextBox";
                    this.mRecordSetTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordSetTextBox;
            }
        }
        
        public WpfButton TestButton
        {
            get
            {
                if ((this.mTestButton == null))
                {
                    this.mTestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestActionButton";
                    this.mTestButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Test the procedure or function";
                    this.mTestButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfTable mInputDataGridTable;
        
        private WpfButton mCancelButton;
        
        private WpfButton mPasteButton;
        
        private Table1 mTable;
        
        private WpfButton mEditSourceButton;
        
        private WpfButton mNewSourceButton;
        
        private SourcesComboBox mSourcesComboBox;
        
        private WpfButton mGenerateOutputsButton;
        
        private WpfCheckBox mOutputtoObjectCheckBox;
        
        private QueryStringText1 mQueryStringText;
        
        private WpfTable mOutputsGridTable;
        
        private WpfEdit mRecordSetTextBox;
        
        private WpfButton mTestButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table1 : WpfTable
    {
        
        public Table1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "Headers";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemRow11 ItemRow1
        {
            get
            {
                if ((this.mItemRow1 == null))
                {
                    this.mItemRow1 = new ItemRow11(this);
                }
                return this.mItemRow1;
            }
        }
        #endregion
        
        #region Fields
        private ItemRow11 mItemRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemRow11 : WpfRow
    {
        
        public ItemRow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = null;
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemValueCell1 ItemValueCell
        {
            get
            {
                if ((this.mItemValueCell == null))
                {
                    this.mItemValueCell = new ItemValueCell1(this);
                }
                return this.mItemValueCell;
            }
        }
        
        public HeaderCell1 HeaderCell
        {
            get
            {
                if ((this.mHeaderCell == null))
                {
                    this.mHeaderCell = new HeaderCell1(this);
                }
                return this.mHeaderCell;
            }
        }
        #endregion
        
        #region Fields
        private ItemValueCell1 mItemValueCell;
        
        private HeaderCell1 mHeaderCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemValueCell1 : WpfCell
    {
        
        public ItemValueCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueComboBox1 ValueComboBox
        {
            get
            {
                if ((this.mValueComboBox == null))
                {
                    this.mValueComboBox = new ValueComboBox1(this);
                }
                return this.mValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ValueComboBox1 mValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueComboBox1 : WpfComboBox
    {
        
        public ValueComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "To supply additional header information in your get request, put the header info " +
                "in here.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderCell1 : WpfCell
    {
        
        public HeaderCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Header";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public HeaderComboBox1 HeaderComboBox
        {
            get
            {
                if ((this.mHeaderComboBox == null))
                {
                    this.mHeaderComboBox = new HeaderComboBox1(this);
                }
                return this.mHeaderComboBox;
            }
        }
        #endregion
        
        #region Fields
        private HeaderComboBox1 mHeaderComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderComboBox1 : WpfComboBox
    {
        
        public HeaderComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "To supply additional header information in your get request, put the header info " +
                "in here.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourcesComboBox : WpfComboBox
    {
        
        public SourcesComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem UITesting
        {
            get
            {
                if ((this.mUITesting == null))
                {
                    this.mUITesting = new WpfListItem(this);
                    #region Search Criteria
                    this.mUITesting.SearchProperties[WpfListItem.PropertyNames.Instance] = "8";
                    this.mUITesting.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUITesting;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUITesting;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QueryStringText1 : WpfText
    {
        
        public QueryStringText1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "QueryStringLable";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssignObject1 : WpfCustom
    {
        
        public AssignObject1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignObjectDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Assign Object (1)(MultiAssignObjectDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInput
        {
            get
            {
                if ((this.mOpenQuickVariableInput == null))
                {
                    this.mOpenQuickVariableInput = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInput.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInput.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInput;
            }
        }
        
        public WpfEdit DisplayNameTextbox
        {
            get
            {
                if ((this.mDisplayNameTextbox == null))
                {
                    this.mDisplayNameTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mDisplayNameTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DisplayNameBox";
                    this.mDisplayNameTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisplayNameTextbox;
            }
        }
        
        public SmallView SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView(this);
                }
                return this.mSmallView;
            }
        }
        
        public LargeView2 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView2(this);
                }
                return this.mLargeView;
            }
        }
        
        public QuickVariableInputContent QuickVariableInputContent
        {
            get
            {
                if ((this.mQuickVariableInputContent == null))
                {
                    this.mQuickVariableInputContent = new QuickVariableInputContent(this);
                }
                return this.mQuickVariableInputContent;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInput;
        
        private WpfEdit mDisplayNameTextbox;
        
        private SmallView mSmallView;
        
        private LargeView2 mLargeView;
        
        private QuickVariableInputContent mQuickVariableInputContent;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView : WpfCustom
    {
        
        public SmallView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid(this);
                }
                return this.mDataGrid;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid mDataGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid : WpfTable
    {
        
        public DataGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row12 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row12(this);
                }
                return this.mRow1;
            }
        }
        
        public Row2 Row2
        {
            get
            {
                if ((this.mRow2 == null))
                {
                    this.mRow2 = new Row2(this);
                }
                return this.mRow2;
            }
        }
        #endregion
        
        #region Fields
        private Row12 mRow1;
        
        private Row2 mRow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row12 : WpfRow
    {
        
        public Row12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_0_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell mVariableCell;
        
        private ValueCell mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell : WpfCell
    {
        
        public VariableCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableTextbox VariableTextbox
        {
            get
            {
                if ((this.mVariableTextbox == null))
                {
                    this.mVariableTextbox = new VariableTextbox(this);
                }
                return this.mVariableTextbox;
            }
        }
        #endregion
        
        #region Fields
        private VariableTextbox mVariableTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableTextbox : WpfEdit
    {
        
        public VariableTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText VariableTextboxFloatingText
        {
            get
            {
                if ((this.mVariableTextboxFloatingText == null))
                {
                    this.mVariableTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mVariableTextboxFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "[[Variable1]]";
                    this.mVariableTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextboxFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mVariableTextboxFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell : WpfCell
    {
        
        public ValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ValueTextbox
        {
            get
            {
                if ((this.mValueTextbox == null))
                {
                    this.mValueTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mValueTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row1_FieldValue_AutoID";
                    this.mValueTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mValueTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row2 : WpfRow
    {
        
        public Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_1_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell1 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell1(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell1 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell1(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell1 mVariableCell;
        
        private ValueCell1 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell1 : WpfCell
    {
        
        public VariableCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit VariableTextbox
        {
            get
            {
                if ((this.mVariableTextbox == null))
                {
                    this.mVariableTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mVariableTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
                    this.mVariableTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mVariableTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell1 : WpfCell
    {
        
        public ValueCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ValueTextbox
        {
            get
            {
                if ((this.mValueTextbox == null))
                {
                    this.mValueTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mValueTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row2_FieldValue_AutoID";
                    this.mValueTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mValueTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView2 : WpfCustom
    {
        
        public LargeView2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid1 DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid1(this);
                }
                return this.mDataGrid;
            }
        }
        
        public WpfText AddRowsMessage
        {
            get
            {
                if ((this.mAddRowsMessage == null))
                {
                    this.mAddRowsMessage = new WpfText(this);
                    #region Search Criteria
                    this.mAddRowsMessage.SearchProperties[WpfText.PropertyNames.Name] = "Type in the empty rows to add new rows.";
                    this.mAddRowsMessage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddRowsMessage;
            }
        }
        
        public WpfText InsertDeleteRowsMessage
        {
            get
            {
                if ((this.mInsertDeleteRowsMessage == null))
                {
                    this.mInsertDeleteRowsMessage = new WpfText(this);
                    #region Search Criteria
                    this.mInsertDeleteRowsMessage.SearchProperties[WpfText.PropertyNames.Name] = "Right click to insert or delete rows.";
                    this.mInsertDeleteRowsMessage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInsertDeleteRowsMessage;
            }
        }
        
        public OnError OnError
        {
            get
            {
                if ((this.mOnError == null))
                {
                    this.mOnError = new OnError(this);
                }
                return this.mOnError;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid1 mDataGrid;
        
        private WpfText mAddRowsMessage;
        
        private WpfText mInsertDeleteRowsMessage;
        
        private OnError mOnError;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid1 : WpfTable
    {
        
        public DataGrid1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row13 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row13(this);
                }
                return this.mRow1;
            }
        }
        
        public Row21 Row2
        {
            get
            {
                if ((this.mRow2 == null))
                {
                    this.mRow2 = new Row21(this);
                }
                return this.mRow2;
            }
        }
        #endregion
        
        #region Fields
        private Row13 mRow1;
        
        private Row21 mRow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row13 : WpfRow
    {
        
        public Row13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_0_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FieldCell FieldCell
        {
            get
            {
                if ((this.mFieldCell == null))
                {
                    this.mFieldCell = new FieldCell(this);
                }
                return this.mFieldCell;
            }
        }
        
        public FieldValueCell FieldValueCell
        {
            get
            {
                if ((this.mFieldValueCell == null))
                {
                    this.mFieldValueCell = new FieldValueCell(this);
                }
                return this.mFieldValueCell;
            }
        }
        #endregion
        
        #region Fields
        private FieldCell mFieldCell;
        
        private FieldValueCell mFieldValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FieldCell : WpfCell
    {
        
        public FieldCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FieldNameComboBox FieldNameComboBox
        {
            get
            {
                if ((this.mFieldNameComboBox == null))
                {
                    this.mFieldNameComboBox = new FieldNameComboBox(this);
                }
                return this.mFieldNameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private FieldNameComboBox mFieldNameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FieldNameComboBox : WpfComboBox
    {
        
        public FieldNameComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FieldName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FieldValueCell : WpfCell
    {
        
        public FieldValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FieldValueComboBox FieldValueComboBox
        {
            get
            {
                if ((this.mFieldValueComboBox == null))
                {
                    this.mFieldValueComboBox = new FieldValueComboBox(this);
                }
                return this.mFieldValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private FieldValueComboBox mFieldValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FieldValueComboBox : WpfComboBox
    {
        
        public FieldValueComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row21 : WpfRow
    {
        
        public Row21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_1_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FieldValueCell1 FieldValueCell
        {
            get
            {
                if ((this.mFieldValueCell == null))
                {
                    this.mFieldValueCell = new FieldValueCell1(this);
                }
                return this.mFieldValueCell;
            }
        }
        
        public FieldCell1 FieldCell
        {
            get
            {
                if ((this.mFieldCell == null))
                {
                    this.mFieldCell = new FieldCell1(this);
                }
                return this.mFieldCell;
            }
        }
        #endregion
        
        #region Fields
        private FieldValueCell1 mFieldValueCell;
        
        private FieldCell1 mFieldCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FieldValueCell1 : WpfCell
    {
        
        public FieldValueCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FieldValueComboBox1 FieldValueComboBox
        {
            get
            {
                if ((this.mFieldValueComboBox == null))
                {
                    this.mFieldValueComboBox = new FieldValueComboBox1(this);
                }
                return this.mFieldValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private FieldValueComboBox1 mFieldValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FieldValueComboBox1 : WpfComboBox
    {
        
        public FieldValueComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FieldCell1 : WpfCell
    {
        
        public FieldCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FieldNameComboBox1 FieldNameComboBox
        {
            get
            {
                if ((this.mFieldNameComboBox == null))
                {
                    this.mFieldNameComboBox = new FieldNameComboBox1(this);
                }
                return this.mFieldNameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private FieldNameComboBox1 mFieldNameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FieldNameComboBox1 : WpfComboBox
    {
        
        public FieldNameComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_FieldName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnError : WpfCustom
    {
        
        public OnError(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup2 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup2(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup2 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup2 : WpfGroup
    {
        
        public OnErrorGroup2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ErrorVariable
        {
            get
            {
                if ((this.mErrorVariable == null))
                {
                    this.mErrorVariable = new WpfEdit(this);
                    #region Search Criteria
                    this.mErrorVariable.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Variable_AutoID";
                    this.mErrorVariable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mErrorVariable;
            }
        }
        
        public WpfEdit ErrorWebservice
        {
            get
            {
                if ((this.mErrorWebservice == null))
                {
                    this.mErrorWebservice = new WpfEdit(this);
                    #region Search Criteria
                    this.mErrorWebservice.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
                    this.mErrorWebservice.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mErrorWebservice;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mErrorVariable;
        
        private WpfEdit mErrorWebservice;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QuickVariableInputContent : WpfCustom
    {
        
        public QuickVariableInputContent(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.QuickVariableInputView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "QuickVariableInputContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton AppendRadioButton
        {
            get
            {
                if ((this.mAppendRadioButton == null))
                {
                    this.mAppendRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mAppendRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "AppendOption";
                    this.mAppendRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAppendRadioButton;
            }
        }
        
        public WpfEdit PrefixWithEdit
        {
            get
            {
                if ((this.mPrefixWithEdit == null))
                {
                    this.mPrefixWithEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPrefixWithEdit.SearchProperties[WpfEdit.PropertyNames.HelpText] = "Adds this to the front of the variables";
                    this.mPrefixWithEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPrefixWithEdit;
            }
        }
        
        public PreviewCustom PreviewCustom
        {
            get
            {
                if ((this.mPreviewCustom == null))
                {
                    this.mPreviewCustom = new PreviewCustom(this);
                }
                return this.mPreviewCustom;
            }
        }
        
        public WpfEdit QviSplitOnCharacterEdit
        {
            get
            {
                if ((this.mQviSplitOnCharacterEdit == null))
                {
                    this.mQviSplitOnCharacterEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mQviSplitOnCharacterEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "QviSplitOnCharacter";
                    this.mQviSplitOnCharacterEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQviSplitOnCharacterEdit;
            }
        }
        
        public WpfComboBox QviSplitOnCombobox
        {
            get
            {
                if ((this.mQviSplitOnCombobox == null))
                {
                    this.mQviSplitOnCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mQviSplitOnCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "QviSplitOnCombobox";
                    this.mQviSplitOnCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQviSplitOnCombobox;
            }
        }
        
        public WpfEdit QviVariableListBoxEdit
        {
            get
            {
                if ((this.mQviVariableListBoxEdit == null))
                {
                    this.mQviVariableListBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mQviVariableListBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "QviVariableListBox";
                    this.mQviVariableListBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQviVariableListBoxEdit;
            }
        }
        
        public WpfRadioButton ReplaceRadioButton
        {
            get
            {
                if ((this.mReplaceRadioButton == null))
                {
                    this.mReplaceRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mReplaceRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "ReplaceOption";
                    this.mReplaceRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReplaceRadioButton;
            }
        }
        
        public WpfEdit SurfixWithEdit
        {
            get
            {
                if ((this.mSurfixWithEdit == null))
                {
                    this.mSurfixWithEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mSurfixWithEdit.SearchProperties[WpfEdit.PropertyNames.HelpText] = "Adds this to end of the variables";
                    this.mSurfixWithEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSurfixWithEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mAppendRadioButton;
        
        private WpfEdit mPrefixWithEdit;
        
        private PreviewCustom mPreviewCustom;
        
        private WpfEdit mQviSplitOnCharacterEdit;
        
        private WpfComboBox mQviSplitOnCombobox;
        
        private WpfEdit mQviVariableListBoxEdit;
        
        private WpfRadioButton mReplaceRadioButton;
        
        private WpfEdit mSurfixWithEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PreviewCustom : WpfCustom
    {
        
        public PreviewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.PreviewView";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Preview";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public PreviewGroup PreviewGroup
        {
            get
            {
                if ((this.mPreviewGroup == null))
                {
                    this.mPreviewGroup = new PreviewGroup(this);
                }
                return this.mPreviewGroup;
            }
        }
        #endregion
        
        #region Fields
        private PreviewGroup mPreviewGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PreviewGroup : WpfGroup
    {
        
        public PreviewGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "PreviewGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public PreviewButton PreviewButton
        {
            get
            {
                if ((this.mPreviewButton == null))
                {
                    this.mPreviewButton = new PreviewButton(this);
                }
                return this.mPreviewButton;
            }
        }
        #endregion
        
        #region Fields
        private PreviewButton mPreviewButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PreviewButton : WpfButton
    {
        
        public PreviewButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Preview";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebRequest1 : WpfCustom
    {
        
        public WebRequest1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.GetWebRequestWithTimeOutDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Web Request(GetWebRequestWithTimeOutDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new WpfCustom(this);
                    #region Search Criteria
                    this.mLargeView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
                    this.mLargeView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
                    this.mLargeView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom2 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom2(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom2 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom2(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mLargeView;
        
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom2 mLargeViewContentCustom;
        
        private SmallViewContentCustom2 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom2 : WpfCustom
    {
        
        public LargeViewContentCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputComboBox InputComboBox
        {
            get
            {
                if ((this.mInputComboBox == null))
                {
                    this.mInputComboBox = new InputComboBox(this);
                }
                return this.mInputComboBox;
            }
        }
        
        public HeaderComboBox2 HeaderComboBox
        {
            get
            {
                if ((this.mHeaderComboBox == null))
                {
                    this.mHeaderComboBox = new HeaderComboBox2(this);
                }
                return this.mHeaderComboBox;
            }
        }
        
        public TimeOutComboBox1 TimeOutComboBox
        {
            get
            {
                if ((this.mTimeOutComboBox == null))
                {
                    this.mTimeOutComboBox = new TimeOutComboBox1(this);
                }
                return this.mTimeOutComboBox;
            }
        }
        
        public ResultComboBox ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public PreviewCustom1 PreviewCustom
        {
            get
            {
                if ((this.mPreviewCustom == null))
                {
                    this.mPreviewCustom = new PreviewCustom1(this);
                }
                return this.mPreviewCustom;
            }
        }
        
        public OnErrorCustom2 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom2(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private InputComboBox mInputComboBox;
        
        private HeaderComboBox2 mHeaderComboBox;
        
        private TimeOutComboBox1 mTimeOutComboBox;
        
        private ResultComboBox mResultComboBox;
        
        private PreviewCustom1 mPreviewCustom;
        
        private OnErrorCustom2 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputComboBox : WpfComboBox
    {
        
        public InputComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Inputtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderComboBox2 : WpfComboBox
    {
        
        public HeaderComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Inputtxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TimeOutComboBox1 : WpfComboBox
    {
        
        public TimeOutComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "The length of time to wait for a web request to complete before failing";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox : WpfComboBox
    {
        
        public ResultComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__InputFormattxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PreviewCustom1 : WpfCustom
    {
        
        public PreviewCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.PreviewView";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Preview";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public PreviewGroup1 PreviewGroup
        {
            get
            {
                if ((this.mPreviewGroup == null))
                {
                    this.mPreviewGroup = new PreviewGroup1(this);
                }
                return this.mPreviewGroup;
            }
        }
        #endregion
        
        #region Fields
        private PreviewGroup1 mPreviewGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PreviewGroup1 : WpfGroup
    {
        
        public PreviewGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "PreviewGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public PreviewButton1 PreviewButton
        {
            get
            {
                if ((this.mPreviewButton == null))
                {
                    this.mPreviewButton = new PreviewButton1(this);
                }
                return this.mPreviewButton;
            }
        }
        #endregion
        
        #region Fields
        private PreviewButton1 mPreviewButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PreviewButton1 : WpfButton
    {
        
        public PreviewButton1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Preview";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom2 : WpfCustom
    {
        
        public OnErrorCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup3 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup3(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup3 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup3 : WpfGroup
    {
        
        public OnErrorGroup3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox2 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox2(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebSerciveComboBox WebSerciveComboBox
        {
            get
            {
                if ((this.mWebSerciveComboBox == null))
                {
                    this.mWebSerciveComboBox = new WebSerciveComboBox(this);
                }
                return this.mWebSerciveComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox2 mErrorVariableComboBox;
        
        private WebSerciveComboBox mWebSerciveComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox2 : WpfComboBox
    {
        
        public ErrorVariableComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebSerciveComboBox : WpfComboBox
    {
        
        public WebSerciveComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom2 : WpfCustom
    {
        
        public SmallViewContentCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputComboBox1 InputComboBox
        {
            get
            {
                if ((this.mInputComboBox == null))
                {
                    this.mInputComboBox = new InputComboBox1(this);
                }
                return this.mInputComboBox;
            }
        }
        
        public ResultComboBox1 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox1(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private InputComboBox1 mInputComboBox;
        
        private ResultComboBox1 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputComboBox1 : WpfComboBox
    {
        
        public InputComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Inputtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox1 : WpfComboBox
    {
        
        public ResultComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__InputFormattxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DotNetDll1 : WpfCustom
    {
        
        public DotNetDll1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DotNetDllDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "DotNet DLL", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeView3 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView3(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfCustom SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new WpfCustom(this);
                    #region Search Criteria
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
                    this.mSmallView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private LargeView3 mLargeView;
        
        private WpfButton mDoneButton;
        
        private WpfCustom mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView3 : WpfCustom
    {
        
        public LargeView3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SourcesComboBox1 SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new SourcesComboBox1(this);
                }
                return this.mSourcesComboBox;
            }
        }
        
        public ActionsComboBox ActionsComboBox
        {
            get
            {
                if ((this.mActionsComboBox == null))
                {
                    this.mActionsComboBox = new ActionsComboBox(this);
                }
                return this.mActionsComboBox;
            }
        }
        
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public WpfTable InputsTable
        {
            get
            {
                if ((this.mInputsTable == null))
                {
                    this.mInputsTable = new WpfTable(this);
                    #region Search Criteria
                    this.mInputsTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
                    this.mInputsTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputsTable;
            }
        }
        
        public ClassNameComboBox ClassNameComboBox
        {
            get
            {
                if ((this.mClassNameComboBox == null))
                {
                    this.mClassNameComboBox = new ClassNameComboBox(this);
                }
                return this.mClassNameComboBox;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "GenerateOutputsDoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfButton TestButton
        {
            get
            {
                if ((this.mTestButton == null))
                {
                    this.mTestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestActionButton";
                    this.mTestButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestButton;
            }
        }
        
        public WpfButton NewSourcButton
        {
            get
            {
                if ((this.mNewSourcButton == null))
                {
                    this.mNewSourcButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourcButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceNewButton";
                    this.mNewSourcButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourcButton;
            }
        }
        
        public LargeDataGridTable LargeDataGridTable
        {
            get
            {
                if ((this.mLargeDataGridTable == null))
                {
                    this.mLargeDataGridTable = new LargeDataGridTable(this);
                }
                return this.mLargeDataGridTable;
            }
        }
        #endregion
        
        #region Fields
        private SourcesComboBox1 mSourcesComboBox;
        
        private ActionsComboBox mActionsComboBox;
        
        private WpfButton mGenerateOutputsButton;
        
        private WpfTable mInputsTable;
        
        private ClassNameComboBox mClassNameComboBox;
        
        private WpfButton mDoneButton;
        
        private WpfButton mTestButton;
        
        private WpfButton mNewSourcButton;
        
        private LargeDataGridTable mLargeDataGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourcesComboBox1 : WpfComboBox
    {
        
        public SourcesComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem ListItem1
        {
            get
            {
                if ((this.mListItem1 == null))
                {
                    this.mListItem1 = new WpfListItem(this);
                    #region Search Criteria
                    this.mListItem1.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.PluginSourceDefinition";
                    this.mListItem1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mListItem1;
            }
        }
        
        public WpfListItem DotNetSource
        {
            get
            {
                if ((this.mDotNetSource == null))
                {
                    this.mDotNetSource = new WpfListItem(this);
                    #region Search Criteria
                    this.mDotNetSource.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.PluginSourceDefinition";
                    this.mDotNetSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDotNetSource;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mListItem1;
        
        private WpfListItem mDotNetSource;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ActionsComboBox : WpfComboBox
    {
        
        public ActionsComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "ActionsComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem Item1
        {
            get
            {
                if ((this.mItem1 == null))
                {
                    this.mItem1 = new WpfListItem(this);
                    #region Search Criteria
                    this.mItem1.SearchProperties[WpfListItem.PropertyNames.Instance] = "1";
                    this.mItem1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItem1;
            }
        }
        
        public WpfListItem NextListItem
        {
            get
            {
                if ((this.mNextListItem == null))
                {
                    this.mNextListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mNextListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Next";
                    this.mNextListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNextListItem;
            }
        }
        
        public WpfListItem EqualsAction
        {
            get
            {
                if ((this.mEqualsAction == null))
                {
                    this.mEqualsAction = new WpfListItem(this);
                    #region Search Criteria
                    this.mEqualsAction.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.PluginAction";
                    this.mEqualsAction.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEqualsAction;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mItem1;
        
        private WpfListItem mNextListItem;
        
        private WpfListItem mEqualsAction;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ClassNameComboBox : WpfComboBox
    {
        
        public ClassNameComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "NamespaceComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem ComboboxlistItemAsSystemObject
        {
            get
            {
                if ((this.mComboboxlistItemAsSystemObject == null))
                {
                    this.mComboboxlistItemAsSystemObject = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxlistItemAsSystemObject.SearchProperties[WpfListItem.PropertyNames.Instance] = "1";
                    this.mComboboxlistItemAsSystemObject.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxlistItemAsSystemObject;
            }
        }
        
        public WpfListItem SystemRandomListItem
        {
            get
            {
                if ((this.mSystemRandomListItem == null))
                {
                    this.mSystemRandomListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mSystemRandomListItem.SearchProperties.Add(new PropertyExpression(WpfListItem.PropertyNames.Name, "System.Random", PropertyExpressionOperator.Contains));
                    this.mSystemRandomListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSystemRandomListItem;
            }
        }
        
        public WpfListItem AssemblyLocationGACCListItem
        {
            get
            {
                if ((this.mAssemblyLocationGACCListItem == null))
                {
                    this.mAssemblyLocationGACCListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mAssemblyLocationGACCListItem.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""AssemblyLocation"":""GAC:CustomMarshalers, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=AMD64"",""AssemblyName"":""CustomMarshalers, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=AMD64"",""FullName"":""ReplacesCorHdrNumericDefines"",""MethodName"":null}";
                    this.mAssemblyLocationGACCListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssemblyLocationGACCListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mComboboxlistItemAsSystemObject;
        
        private WpfListItem mSystemRandomListItem;
        
        private WpfListItem mAssemblyLocationGACCListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeDataGridTable : WpfTable
    {
        
        public LargeDataGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row14 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row14(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row14 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row14 : WpfRow
    {
        
        public Row14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputVariableCell InputVariableCell
        {
            get
            {
                if ((this.mInputVariableCell == null))
                {
                    this.mInputVariableCell = new InputVariableCell(this);
                }
                return this.mInputVariableCell;
            }
        }
        
        public EmptyIsNullCell EmptyIsNullCell
        {
            get
            {
                if ((this.mEmptyIsNullCell == null))
                {
                    this.mEmptyIsNullCell = new EmptyIsNullCell(this);
                }
                return this.mEmptyIsNullCell;
            }
        }
        #endregion
        
        #region Fields
        private InputVariableCell mInputVariableCell;
        
        private EmptyIsNullCell mEmptyIsNullCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputVariableCell : WpfCell
    {
        
        public InputVariableCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input Data or [[Variable]]";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputVariableComboBox InputVariableComboBox
        {
            get
            {
                if ((this.mInputVariableComboBox == null))
                {
                    this.mInputVariableComboBox = new InputVariableComboBox(this);
                }
                return this.mInputVariableComboBox;
            }
        }
        #endregion
        
        #region Fields
        private InputVariableComboBox mInputVariableComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputVariableComboBox : WpfComboBox
    {
        
        public InputVariableComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "Hard coded values or variables.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EmptyIsNullCell : WpfCell
    {
        
        public EmptyIsNullCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Empty Is Null";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox EmptyIsNullCheckBox
        {
            get
            {
                if ((this.mEmptyIsNullCheckBox == null))
                {
                    this.mEmptyIsNullCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEmptyIsNullCheckBox.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Use NULL when empty.";
                    this.mEmptyIsNullCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEmptyIsNullCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mEmptyIsNullCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataMerge1 : WpfCustom
    {
        
        public DataMerge1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataMergeDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "DataMergeDesigner", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        
        public WpfCustom QuickVariableInputContent
        {
            get
            {
                if ((this.mQuickVariableInputContent == null))
                {
                    this.mQuickVariableInputContent = new WpfCustom(this);
                    #region Search Criteria
                    this.mQuickVariableInputContent.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.QuickVariableInputView";
                    this.mQuickVariableInputContent.SearchProperties[WpfControl.PropertyNames.AutomationId] = "QuickVariableInputContent";
                    this.mQuickVariableInputContent.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQuickVariableInputContent;
            }
        }
        
        public WpfEdit DisplayName
        {
            get
            {
                if ((this.mDisplayName == null))
                {
                    this.mDisplayName = new WpfEdit(this);
                    #region Search Criteria
                    this.mDisplayName.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DisplayNameBox";
                    this.mDisplayName.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisplayName;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public SmallView1 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView1(this);
                }
                return this.mSmallView;
            }
        }
        
        public LargeView4 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView4(this);
                }
                return this.mLargeView;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        
        private WpfCustom mQuickVariableInputContent;
        
        private WpfEdit mDisplayName;
        
        private WpfButton mDoneButton;
        
        private SmallView1 mSmallView;
        
        private LargeView4 mLargeView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView1 : WpfCustom
    {
        
        public SmallView1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UISmallDataGridTable UISmallDataGridTable
        {
            get
            {
                if ((this.mUISmallDataGridTable == null))
                {
                    this.mUISmallDataGridTable = new UISmallDataGridTable(this);
                }
                return this.mUISmallDataGridTable;
            }
        }
        
        public WpfEdit ResultTextbox
        {
            get
            {
                if ((this.mResultTextbox == null))
                {
                    this.mResultTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mResultTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
                    this.mResultTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResultTextbox;
            }
        }
        #endregion
        
        #region Fields
        private UISmallDataGridTable mUISmallDataGridTable;
        
        private WpfEdit mResultTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISmallDataGridTable : WpfTable
    {
        
        public UISmallDataGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row Row
        {
            get
            {
                if ((this.mRow == null))
                {
                    this.mRow = new Row(this);
                }
                return this.mRow;
            }
        }
        #endregion
        
        #region Fields
        private Row mRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row : WpfRow
    {
        
        public Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputCell InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell(this);
                }
                return this.mInputCell;
            }
        }
        
        public TypeCell TypeCell
        {
            get
            {
                if ((this.mTypeCell == null))
                {
                    this.mTypeCell = new TypeCell(this);
                }
                return this.mTypeCell;
            }
        }
        
        public IndexCell IndexCell
        {
            get
            {
                if ((this.mIndexCell == null))
                {
                    this.mIndexCell = new IndexCell(this);
                }
                return this.mIndexCell;
            }
        }
        #endregion
        
        #region Fields
        private InputCell mInputCell;
        
        private TypeCell mTypeCell;
        
        private IndexCell mIndexCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell : WpfCell
    {
        
        public InputCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row1InputTextbox Row1InputTextbox
        {
            get
            {
                if ((this.mRow1InputTextbox == null))
                {
                    this.mRow1InputTextbox = new Row1InputTextbox(this);
                }
                return this.mRow1InputTextbox;
            }
        }
        
        public WpfEdit Row2InputTextbox
        {
            get
            {
                if ((this.mRow2InputTextbox == null))
                {
                    this.mRow2InputTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRow2InputTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row2_InputVariable_AutoID";
                    this.mRow2InputTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRow2InputTextbox;
            }
        }
        #endregion
        
        #region Fields
        private Row1InputTextbox mRow1InputTextbox;
        
        private WpfEdit mRow2InputTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row1InputTextbox : WpfEdit
    {
        
        public Row1InputTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row1_InputVariable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText InputFloatingText
        {
            get
            {
                if ((this.mInputFloatingText == null))
                {
                    this.mInputFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mInputFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "[[Recordset().F1]]";
                    this.mInputFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mInputFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TypeCell : WpfCell
    {
        
        public TypeCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "2";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox Row1TypeCombobox
        {
            get
            {
                if ((this.mRow1TypeCombobox == null))
                {
                    this.mRow1TypeCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mRow1TypeCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_MergeType_AutoID";
                    this.mRow1TypeCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRow1TypeCombobox;
            }
        }
        
        public WpfComboBox Row2TypeCombobox
        {
            get
            {
                if ((this.mRow2TypeCombobox == null))
                {
                    this.mRow2TypeCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mRow2TypeCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_MergeType_AutoID";
                    this.mRow2TypeCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRow2TypeCombobox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mRow1TypeCombobox;
        
        private WpfComboBox mRow2TypeCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IndexCell : WpfCell
    {
        
        public IndexCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Row1IndexTextbox
        {
            get
            {
                if ((this.mRow1IndexTextbox == null))
                {
                    this.mRow1IndexTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRow1IndexTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__At_Row1_AutoID";
                    this.mRow1IndexTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRow1IndexTextbox;
            }
        }
        
        public WpfEdit Row2IndexTextbox
        {
            get
            {
                if ((this.mRow2IndexTextbox == null))
                {
                    this.mRow2IndexTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRow2IndexTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__At_Row2_AutoID";
                    this.mRow2IndexTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRow2IndexTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRow1IndexTextbox;
        
        private WpfEdit mRow2IndexTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView4 : WpfCustom
    {
        
        public LargeView4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DatGrid DatGrid
        {
            get
            {
                if ((this.mDatGrid == null))
                {
                    this.mDatGrid = new DatGrid(this);
                }
                return this.mDatGrid;
            }
        }
        
        public WpfEdit ResultTextbox
        {
            get
            {
                if ((this.mResultTextbox == null))
                {
                    this.mResultTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mResultTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
                    this.mResultTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResultTextbox;
            }
        }
        
        public OnErrorGroup4 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup4(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private DatGrid mDatGrid;
        
        private WpfEdit mResultTextbox;
        
        private OnErrorGroup4 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DatGrid : WpfTable
    {
        
        public DatGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row3 Row
        {
            get
            {
                if ((this.mRow == null))
                {
                    this.mRow = new Row3(this);
                }
                return this.mRow;
            }
        }
        #endregion
        
        #region Fields
        private Row3 mRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row3 : WpfRow
    {
        
        public Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputCell1 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell1(this);
                }
                return this.mInputCell;
            }
        }
        
        public WidthCell WidthCell
        {
            get
            {
                if ((this.mWidthCell == null))
                {
                    this.mWidthCell = new WidthCell(this);
                }
                return this.mWidthCell;
            }
        }
        
        public UsingCell UsingCell
        {
            get
            {
                if ((this.mUsingCell == null))
                {
                    this.mUsingCell = new UsingCell(this);
                }
                return this.mUsingCell;
            }
        }
        
        public PaddingCell PaddingCell
        {
            get
            {
                if ((this.mPaddingCell == null))
                {
                    this.mPaddingCell = new PaddingCell(this);
                }
                return this.mPaddingCell;
            }
        }
        
        public AlignCell AlignCell
        {
            get
            {
                if ((this.mAlignCell == null))
                {
                    this.mAlignCell = new AlignCell(this);
                }
                return this.mAlignCell;
            }
        }
        #endregion
        
        #region Fields
        private InputCell1 mInputCell;
        
        private WidthCell mWidthCell;
        
        private UsingCell mUsingCell;
        
        private PaddingCell mPaddingCell;
        
        private AlignCell mAlignCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell1 : WpfCell
    {
        
        public InputCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputTextbox InputTextbox
        {
            get
            {
                if ((this.mInputTextbox == null))
                {
                    this.mInputTextbox = new InputTextbox(this);
                }
                return this.mInputTextbox;
            }
        }
        #endregion
        
        #region Fields
        private InputTextbox mInputTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputTextbox : WpfEdit
    {
        
        public InputTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row1_InputVariable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText InputFloatingText
        {
            get
            {
                if ((this.mInputFloatingText == null))
                {
                    this.mInputFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mInputFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "[[Recordset().F1]]";
                    this.mInputFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mInputFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WidthCell : WpfCell
    {
        
        public WidthCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "With";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox WidthCombobox
        {
            get
            {
                if ((this.mWidthCombobox == null))
                {
                    this.mWidthCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mWidthCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_MergeType_AutoID";
                    this.mWidthCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWidthCombobox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mWidthCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UsingCell : WpfCell
    {
        
        public UsingCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Using";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit UsingTextbox
        {
            get
            {
                if ((this.mUsingTextbox == null))
                {
                    this.mUsingTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mUsingTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__At_Row1_AutoID";
                    this.mUsingTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUsingTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUsingTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PaddingCell : WpfCell
    {
        
        public PaddingCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Padding";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit PaddingTextbox
        {
            get
            {
                if ((this.mPaddingTextbox == null))
                {
                    this.mPaddingTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mPaddingTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Padding_Row1_AutoID";
                    this.mPaddingTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPaddingTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mPaddingTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AlignCell : WpfCell
    {
        
        public AlignCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Align";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox AlignCombobox
        {
            get
            {
                if ((this.mAlignCombobox == null))
                {
                    this.mAlignCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mAlignCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_Alignment_AutoID";
                    this.mAlignCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAlignCombobox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mAlignCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup4 : WpfGroup
    {
        
        public OnErrorGroup4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit VariableTextbox
        {
            get
            {
                if ((this.mVariableTextbox == null))
                {
                    this.mVariableTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mVariableTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Variable_AutoID";
                    this.mVariableTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextbox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mVariableTextbox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataSplit1 : WpfCustom
    {
        
        public DataSplit1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataSplitDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "DataSplitDesigner", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        
        public QuickVariableInputContent1 QuickVariableInputContent
        {
            get
            {
                if ((this.mQuickVariableInputContent == null))
                {
                    this.mQuickVariableInputContent = new QuickVariableInputContent1(this);
                }
                return this.mQuickVariableInputContent;
            }
        }
        
        public LargeViewContentCustom3 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom3(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom3 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom3(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        
        private QuickVariableInputContent1 mQuickVariableInputContent;
        
        private LargeViewContentCustom3 mLargeViewContentCustom;
        
        private SmallViewContentCustom3 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QuickVariableInputContent1 : WpfCustom
    {
        
        public QuickVariableInputContent1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.QuickVariableInputView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "QuickVariableInputContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton AppendRadioButton
        {
            get
            {
                if ((this.mAppendRadioButton == null))
                {
                    this.mAppendRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mAppendRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "AppendOption";
                    this.mAppendRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAppendRadioButton;
            }
        }
        
        public WpfEdit PrefixWithEdit
        {
            get
            {
                if ((this.mPrefixWithEdit == null))
                {
                    this.mPrefixWithEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPrefixWithEdit.SearchProperties[WpfEdit.PropertyNames.HelpText] = "Adds this to the front of the variables";
                    this.mPrefixWithEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPrefixWithEdit;
            }
        }
        
        public PreviewCustom2 PreviewCustom
        {
            get
            {
                if ((this.mPreviewCustom == null))
                {
                    this.mPreviewCustom = new PreviewCustom2(this);
                }
                return this.mPreviewCustom;
            }
        }
        
        public WpfEdit QviSplitOnCharacterEdit
        {
            get
            {
                if ((this.mQviSplitOnCharacterEdit == null))
                {
                    this.mQviSplitOnCharacterEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mQviSplitOnCharacterEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "QviSplitOnCharacter";
                    this.mQviSplitOnCharacterEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQviSplitOnCharacterEdit;
            }
        }
        
        public WpfComboBox QviSplitOnCombobox
        {
            get
            {
                if ((this.mQviSplitOnCombobox == null))
                {
                    this.mQviSplitOnCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mQviSplitOnCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "QviSplitOnCombobox";
                    this.mQviSplitOnCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQviSplitOnCombobox;
            }
        }
        
        public WpfEdit QviVariableListBoxEdit
        {
            get
            {
                if ((this.mQviVariableListBoxEdit == null))
                {
                    this.mQviVariableListBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mQviVariableListBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "QviVariableListBox";
                    this.mQviVariableListBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQviVariableListBoxEdit;
            }
        }
        
        public WpfRadioButton ReplaceRadioButton
        {
            get
            {
                if ((this.mReplaceRadioButton == null))
                {
                    this.mReplaceRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mReplaceRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "ReplaceOption";
                    this.mReplaceRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReplaceRadioButton;
            }
        }
        
        public WpfEdit SurfixWithEdit
        {
            get
            {
                if ((this.mSurfixWithEdit == null))
                {
                    this.mSurfixWithEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mSurfixWithEdit.SearchProperties[WpfEdit.PropertyNames.HelpText] = "Adds this to end of the variables";
                    this.mSurfixWithEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSurfixWithEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mAppendRadioButton;
        
        private WpfEdit mPrefixWithEdit;
        
        private PreviewCustom2 mPreviewCustom;
        
        private WpfEdit mQviSplitOnCharacterEdit;
        
        private WpfComboBox mQviSplitOnCombobox;
        
        private WpfEdit mQviVariableListBoxEdit;
        
        private WpfRadioButton mReplaceRadioButton;
        
        private WpfEdit mSurfixWithEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PreviewCustom2 : WpfCustom
    {
        
        public PreviewCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.PreviewView";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Preview";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public PreviewGroup2 PreviewGroup
        {
            get
            {
                if ((this.mPreviewGroup == null))
                {
                    this.mPreviewGroup = new PreviewGroup2(this);
                }
                return this.mPreviewGroup;
            }
        }
        #endregion
        
        #region Fields
        private PreviewGroup2 mPreviewGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PreviewGroup2 : WpfGroup
    {
        
        public PreviewGroup2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "PreviewGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public PreviewButton2 PreviewButton
        {
            get
            {
                if ((this.mPreviewButton == null))
                {
                    this.mPreviewButton = new PreviewButton2(this);
                }
                return this.mPreviewButton;
            }
        }
        #endregion
        
        #region Fields
        private PreviewButton2 mPreviewButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PreviewButton2 : WpfButton
    {
        
        public PreviewButton2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Preview";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom3 : WpfCustom
    {
        
        public LargeViewContentCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SourceStringComboBox SourceStringComboBox
        {
            get
            {
                if ((this.mSourceStringComboBox == null))
                {
                    this.mSourceStringComboBox = new SourceStringComboBox(this);
                }
                return this.mSourceStringComboBox;
            }
        }
        
        public WpfRadioButton ForwardRadioButton
        {
            get
            {
                if ((this.mForwardRadioButton == null))
                {
                    this.mForwardRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mForwardRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI__ProcessDirectionForward_AutoID";
                    this.mForwardRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mForwardRadioButton;
            }
        }
        
        public WpfRadioButton BackwardRadioButton
        {
            get
            {
                if ((this.mBackwardRadioButton == null))
                {
                    this.mBackwardRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mBackwardRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI__ProcessDirectionBackward_AutoID";
                    this.mBackwardRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mBackwardRadioButton;
            }
        }
        
        public WpfCheckBox SkipblankrowsCheckBox
        {
            get
            {
                if ((this.mSkipblankrowsCheckBox == null))
                {
                    this.mSkipblankrowsCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mSkipblankrowsCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__SkipBlankRows_AutoID";
                    this.mSkipblankrowsCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSkipblankrowsCheckBox;
            }
        }
        
        public LargeDataGridTable1 LargeDataGridTable
        {
            get
            {
                if ((this.mLargeDataGridTable == null))
                {
                    this.mLargeDataGridTable = new LargeDataGridTable1(this);
                }
                return this.mLargeDataGridTable;
            }
        }
        #endregion
        
        #region Fields
        private SourceStringComboBox mSourceStringComboBox;
        
        private WpfRadioButton mForwardRadioButton;
        
        private WpfRadioButton mBackwardRadioButton;
        
        private WpfCheckBox mSkipblankrowsCheckBox;
        
        private LargeDataGridTable1 mLargeDataGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourceStringComboBox : WpfComboBox
    {
        
        public SourceStringComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__SourceStringtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeDataGridTable1 : WpfTable
    {
        
        public LargeDataGridTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row15 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row15(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row15 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row15 : WpfRow
    {
        
        public Row15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResultCell ResultCell
        {
            get
            {
                if ((this.mResultCell == null))
                {
                    this.mResultCell = new ResultCell(this);
                }
                return this.mResultCell;
            }
        }
        
        public SplitTypeCell SplitTypeCell
        {
            get
            {
                if ((this.mSplitTypeCell == null))
                {
                    this.mSplitTypeCell = new SplitTypeCell(this);
                }
                return this.mSplitTypeCell;
            }
        }
        
        public UsingCell1 UsingCell
        {
            get
            {
                if ((this.mUsingCell == null))
                {
                    this.mUsingCell = new UsingCell1(this);
                }
                return this.mUsingCell;
            }
        }
        
        public IncludeCell IncludeCell
        {
            get
            {
                if ((this.mIncludeCell == null))
                {
                    this.mIncludeCell = new IncludeCell(this);
                }
                return this.mIncludeCell;
            }
        }
        
        public EscapeCharCell EscapeCharCell
        {
            get
            {
                if ((this.mEscapeCharCell == null))
                {
                    this.mEscapeCharCell = new EscapeCharCell(this);
                }
                return this.mEscapeCharCell;
            }
        }
        #endregion
        
        #region Fields
        private ResultCell mResultCell;
        
        private SplitTypeCell mSplitTypeCell;
        
        private UsingCell1 mUsingCell;
        
        private IncludeCell mIncludeCell;
        
        private EscapeCharCell mEscapeCharCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultCell : WpfCell
    {
        
        public ResultCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Results";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResultComboBox2 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox2(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ResultComboBox2 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox2 : WpfComboBox
    {
        
        public ResultComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_OutputVariable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitTypeCell : WpfCell
    {
        
        public SplitTypeCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "With";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox SplitTypeComboBox
        {
            get
            {
                if ((this.mSplitTypeComboBox == null))
                {
                    this.mSplitTypeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSplitTypeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SplitType_AutoID";
                    this.mSplitTypeComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSplitTypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mSplitTypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UsingCell1 : WpfCell
    {
        
        public UsingCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Using";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UsingComboBox UsingComboBox
        {
            get
            {
                if ((this.mUsingComboBox == null))
                {
                    this.mUsingComboBox = new UsingComboBox(this);
                }
                return this.mUsingComboBox;
            }
        }
        #endregion
        
        #region Fields
        private UsingComboBox mUsingComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UsingComboBox : WpfComboBox
    {
        
        public UsingComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__At_Row1_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IncludeCell : WpfCell
    {
        
        public IncludeCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Include";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IncludeCheckBox
        {
            get
            {
                if ((this.mIncludeCheckBox == null))
                {
                    this.mIncludeCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIncludeCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__Include_Row1_AutoID";
                    this.mIncludeCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIncludeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIncludeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EscapeCharCell : WpfCell
    {
        
        public EscapeCharCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Escape";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public EscapeCharComboBox EscapeCharComboBox
        {
            get
            {
                if ((this.mEscapeCharComboBox == null))
                {
                    this.mEscapeCharComboBox = new EscapeCharComboBox(this);
                }
                return this.mEscapeCharComboBox;
            }
        }
        #endregion
        
        #region Fields
        private EscapeCharComboBox mEscapeCharComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EscapeCharComboBox : WpfComboBox
    {
        
        public EscapeCharComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__EscapeChar_Row1_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom3 : WpfCustom
    {
        
        public SmallViewContentCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SourceStringComboBox1 SourceStringComboBox
        {
            get
            {
                if ((this.mSourceStringComboBox == null))
                {
                    this.mSourceStringComboBox = new SourceStringComboBox1(this);
                }
                return this.mSourceStringComboBox;
            }
        }
        
        public SmallDataGridTable SmallDataGridTable
        {
            get
            {
                if ((this.mSmallDataGridTable == null))
                {
                    this.mSmallDataGridTable = new SmallDataGridTable(this);
                }
                return this.mSmallDataGridTable;
            }
        }
        #endregion
        
        #region Fields
        private SourceStringComboBox1 mSourceStringComboBox;
        
        private SmallDataGridTable mSmallDataGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourceStringComboBox1 : WpfComboBox
    {
        
        public SourceStringComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__SourceStringtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallDataGridTable : WpfTable
    {
        
        public SmallDataGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row16 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row16(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row16 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row16 : WpfRow
    {
        
        public Row16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueCell2 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell2(this);
                }
                return this.mValueCell;
            }
        }
        
        public SplitTypeCell1 SplitTypeCell
        {
            get
            {
                if ((this.mSplitTypeCell == null))
                {
                    this.mSplitTypeCell = new SplitTypeCell1(this);
                }
                return this.mSplitTypeCell;
            }
        }
        
        public AtIndexCell AtIndexCell
        {
            get
            {
                if ((this.mAtIndexCell == null))
                {
                    this.mAtIndexCell = new AtIndexCell(this);
                }
                return this.mAtIndexCell;
            }
        }
        #endregion
        
        #region Fields
        private ValueCell2 mValueCell;
        
        private SplitTypeCell1 mSplitTypeCell;
        
        private AtIndexCell mAtIndexCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell2 : WpfCell
    {
        
        public ValueCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueComboBox2 ValueComboBox
        {
            get
            {
                if ((this.mValueComboBox == null))
                {
                    this.mValueComboBox = new ValueComboBox2(this);
                }
                return this.mValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ValueComboBox2 mValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueComboBox2 : WpfComboBox
    {
        
        public ValueComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_OutputVariable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitTypeCell1 : WpfCell
    {
        
        public SplitTypeCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "2";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox SplitTypeComboBox
        {
            get
            {
                if ((this.mSplitTypeComboBox == null))
                {
                    this.mSplitTypeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSplitTypeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SplitType_AutoID";
                    this.mSplitTypeComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSplitTypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mSplitTypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AtIndexCell : WpfCell
    {
        
        public AtIndexCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AtIndexComboBox AtIndexComboBox
        {
            get
            {
                if ((this.mAtIndexComboBox == null))
                {
                    this.mAtIndexComboBox = new AtIndexComboBox(this);
                }
                return this.mAtIndexComboBox;
            }
        }
        #endregion
        
        #region Fields
        private AtIndexComboBox mAtIndexComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AtIndexComboBox : WpfComboBox
    {
        
        public AtIndexComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__At_Row1_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MySqlDatabase : WpfCustom
    {
        
        public MySqlDatabase(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MySqlDatabaseDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MySql Database(MySqlDatabaseDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom4 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom4(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom4 mLargeViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom4 : WpfCustom
    {
        
        public LargeViewContentCustom4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSourcesComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
                    this.mSourcesComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesComboBox;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceNewButton";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceEditButton";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfComboBox ActionsComboBox
        {
            get
            {
                if ((this.mActionsComboBox == null))
                {
                    this.mActionsComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mActionsComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "ActionsComboBox";
                    this.mActionsComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mActionsComboBox;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ActionRefreshButton";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfTable InputLargeDataGridTable
        {
            get
            {
                if ((this.mInputLargeDataGridTable == null))
                {
                    this.mInputLargeDataGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mInputLargeDataGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
                    this.mInputLargeDataGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputLargeDataGridTable;
            }
        }
        
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public WpfTable OutputsMappingDataGrTable
        {
            get
            {
                if ((this.mOutputsMappingDataGrTable == null))
                {
                    this.mOutputsMappingDataGrTable = new WpfTable(this);
                    #region Search Criteria
                    this.mOutputsMappingDataGrTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsMappingDataGrid";
                    this.mOutputsMappingDataGrTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputsMappingDataGrTable;
            }
        }
        
        public WpfEdit RecordSetTextBoxEdit
        {
            get
            {
                if ((this.mRecordSetTextBoxEdit == null))
                {
                    this.mRecordSetTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordSetTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RecordSetTextBox";
                    this.mRecordSetTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordSetTextBoxEdit;
            }
        }
        
        public OnErrorCustom3 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom3(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mSourcesComboBox;
        
        private WpfButton mNewSourceButton;
        
        private WpfButton mEditSourceButton;
        
        private WpfComboBox mActionsComboBox;
        
        private WpfButton mRefreshButton;
        
        private WpfTable mInputLargeDataGridTable;
        
        private WpfButton mGenerateOutputsButton;
        
        private WpfTable mOutputsMappingDataGrTable;
        
        private WpfEdit mRecordSetTextBoxEdit;
        
        private OnErrorCustom3 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom3 : WpfCustom
    {
        
        public OnErrorCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup5 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup5(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup5 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup5 : WpfGroup
    {
        
        public OnErrorGroup5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox3 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox3(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox2 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox2(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox3 mErrorVariableComboBox;
        
        private WebServiceComboBox2 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox3 : WpfComboBox
    {
        
        public ErrorVariableComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox2 : WpfComboBox
    {
        
        public WebServiceComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SqlServerDatabase : WpfCustom
    {
        
        public SqlServerDatabase(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SqlServerDatabaseDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "SQL Server Database", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeView5 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView5(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public UIItemMenu UIItemMenu
        {
            get
            {
                if ((this.mUIItemMenu == null))
                {
                    this.mUIItemMenu = new UIItemMenu(this);
                }
                return this.mUIItemMenu;
            }
        }
        
        public WpfCustom UIDsfSqlServerDatabaseCustom
        {
            get
            {
                if ((this.mUIDsfSqlServerDatabaseCustom == null))
                {
                    this.mUIDsfSqlServerDatabaseCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIDsfSqlServerDatabaseCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SqlServerDatabaseDesigner";
                    this.mUIDsfSqlServerDatabaseCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SQL Server Database(SqlServerDatabaseDesigner)";
                    this.mUIDsfSqlServerDatabaseCustom.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIDsfSqlServerDatabaseCustom;
            }
        }
        #endregion
        
        #region Fields
        private LargeView5 mLargeView;
        
        private WpfButton mDoneButton;
        
        private UIItemMenu mUIItemMenu;
        
        private WpfCustom mUIDsfSqlServerDatabaseCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView5 : WpfCustom
    {
        
        public LargeView5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ActionsCombobox1 ActionsCombobox
        {
            get
            {
                if ((this.mActionsCombobox == null))
                {
                    this.mActionsCombobox = new ActionsCombobox1(this);
                }
                return this.mActionsCombobox;
            }
        }
        
        public SourcesCombobox2 SourcesCombobox
        {
            get
            {
                if ((this.mSourcesCombobox == null))
                {
                    this.mSourcesCombobox = new SourcesCombobox2(this);
                }
                return this.mSourcesCombobox;
            }
        }
        
        public InputsTable InputsTable
        {
            get
            {
                if ((this.mInputsTable == null))
                {
                    this.mInputsTable = new InputsTable(this);
                }
                return this.mInputsTable;
            }
        }
        
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public TestInputsTable TestInputsTable
        {
            get
            {
                if ((this.mTestInputsTable == null))
                {
                    this.mTestInputsTable = new TestInputsTable(this);
                }
                return this.mTestInputsTable;
            }
        }
        
        public WpfButton TestInputsButton
        {
            get
            {
                if ((this.mTestInputsButton == null))
                {
                    this.mTestInputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestInputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestActionButton";
                    this.mTestInputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestInputsButton;
            }
        }
        
        public WpfButton TestInputsDoneButton
        {
            get
            {
                if ((this.mTestInputsDoneButton == null))
                {
                    this.mTestInputsDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestInputsDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "GenerateOutputsDoneButton";
                    this.mTestInputsDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestInputsDoneButton;
            }
        }
        
        public WpfButton NewDbSourceButton
        {
            get
            {
                if ((this.mNewDbSourceButton == null))
                {
                    this.mNewDbSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewDbSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceNewButton";
                    this.mNewDbSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewDbSourceButton;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceEditButton";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public OnErrorCustom4 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom4(this);
                }
                return this.mOnErrorCustom;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ActionRefreshButton";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfEdit RecordSetTextBoxEdit
        {
            get
            {
                if ((this.mRecordSetTextBoxEdit == null))
                {
                    this.mRecordSetTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordSetTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RecordSetTextBox";
                    this.mRecordSetTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordSetTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private ActionsCombobox1 mActionsCombobox;
        
        private SourcesCombobox2 mSourcesCombobox;
        
        private InputsTable mInputsTable;
        
        private WpfButton mGenerateOutputsButton;
        
        private TestInputsTable mTestInputsTable;
        
        private WpfButton mTestInputsButton;
        
        private WpfButton mTestInputsDoneButton;
        
        private WpfButton mNewDbSourceButton;
        
        private WpfButton mEditSourceButton;
        
        private OnErrorCustom4 mOnErrorCustom;
        
        private WpfButton mRefreshButton;
        
        private WpfEdit mRecordSetTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ActionsCombobox1 : WpfComboBox
    {
        
        public ActionsCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "ActionsComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem GetCountriesListItem
        {
            get
            {
                if ((this.mGetCountriesListItem == null))
                {
                    this.mGetCountriesListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mGetCountriesListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "dbo.GetCountries";
                    this.mGetCountriesListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGetCountriesListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mGetCountriesListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourcesCombobox2 : WpfComboBox
    {
        
        public SourcesCombobox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem UITestingDBSourceListItem
        {
            get
            {
                if ((this.mUITestingDBSourceListItem == null))
                {
                    this.mUITestingDBSourceListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUITestingDBSourceListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "UITestingDBSource";
                    this.mUITestingDBSourceListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUITestingDBSourceListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUITestingDBSourceListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputsTable : WpfTable
    {
        
        public InputsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row17 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row17(this);
                }
                return this.mRow1;
            }
        }
        
        public Row22 Row2
        {
            get
            {
                if ((this.mRow2 == null))
                {
                    this.mRow2 = new Row22(this);
                }
                return this.mRow2;
            }
        }
        #endregion
        
        #region Fields
        private Row17 mRow1;
        
        private Row22 mRow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row17 : WpfRow
    {
        
        public Row17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataCell DataCell
        {
            get
            {
                if ((this.mDataCell == null))
                {
                    this.mDataCell = new DataCell(this);
                }
                return this.mDataCell;
            }
        }
        #endregion
        
        #region Fields
        private DataCell mDataCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataCell : WpfCell
    {
        
        public DataCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input Data or [[Variable]]";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataCombobox DataCombobox
        {
            get
            {
                if ((this.mDataCombobox == null))
                {
                    this.mDataCombobox = new DataCombobox(this);
                }
                return this.mDataCombobox;
            }
        }
        #endregion
        
        #region Fields
        private DataCombobox mDataCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataCombobox : WpfComboBox
    {
        
        public DataCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "Hard coded values or variables.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit DataTextbox
        {
            get
            {
                if ((this.mDataTextbox == null))
                {
                    this.mDataTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mDataTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mDataTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDataTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mDataTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row22 : WpfRow
    {
        
        public Row22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataCell1 DataCell
        {
            get
            {
                if ((this.mDataCell == null))
                {
                    this.mDataCell = new DataCell1(this);
                }
                return this.mDataCell;
            }
        }
        #endregion
        
        #region Fields
        private DataCell1 mDataCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataCell1 : WpfCell
    {
        
        public DataCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input Data or [[Variable]]";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataCombobox1 DataCombobox
        {
            get
            {
                if ((this.mDataCombobox == null))
                {
                    this.mDataCombobox = new DataCombobox1(this);
                }
                return this.mDataCombobox;
            }
        }
        #endregion
        
        #region Fields
        private DataCombobox1 mDataCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataCombobox1 : WpfComboBox
    {
        
        public DataCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "Hard coded values or variables.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit DataTextbox
        {
            get
            {
                if ((this.mDataTextbox == null))
                {
                    this.mDataTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mDataTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mDataTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDataTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mDataTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestInputsTable : WpfTable
    {
        
        public TestInputsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.SearchProperties[WpfTable.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row18 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row18(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row18 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row18 : WpfRow
    {
        
        public Row18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TestDataCell TestDataCell
        {
            get
            {
                if ((this.mTestDataCell == null))
                {
                    this.mTestDataCell = new TestDataCell(this);
                }
                return this.mTestDataCell;
            }
        }
        #endregion
        
        #region Fields
        private TestDataCell mTestDataCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestDataCell : WpfCell
    {
        
        public TestDataCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Test Data";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TestDataComboBox TestDataComboBox
        {
            get
            {
                if ((this.mTestDataComboBox == null))
                {
                    this.mTestDataComboBox = new TestDataComboBox(this);
                }
                return this.mTestDataComboBox;
            }
        }
        #endregion
        
        #region Fields
        private TestDataComboBox mTestDataComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestDataComboBox : WpfComboBox
    {
        
        public TestDataComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "This data is used for testing and not at run time.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TestDataTextbox
        {
            get
            {
                if ((this.mTestDataTextbox == null))
                {
                    this.mTestDataTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTestDataTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTestDataTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestDataTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTestDataTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom4 : WpfCustom
    {
        
        public OnErrorCustom4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup6 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup6(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup6 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup6 : WpfGroup
    {
        
        public OnErrorGroup6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox4 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox4(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox4 mErrorVariableComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox4 : WpfComboBox
    {
        
        public ErrorVariableComboBox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemMenu : WpfMenu
    {
        
        public UIItemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIShowLargeViewMenuItem
        {
            get
            {
                if ((this.mUIShowLargeViewMenuItem == null))
                {
                    this.mUIShowLargeViewMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIShowLargeViewMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_ShowLargeViewMenuItem_AutoID";
                    this.mUIShowLargeViewMenuItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIShowLargeViewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIShowLargeViewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BaseConvert1 : WpfCustom
    {
        
        public BaseConvert1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.BaseConvertDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "BaseConvertDesigner", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        
        public WpfCustom QuickVariableInputContent
        {
            get
            {
                if ((this.mQuickVariableInputContent == null))
                {
                    this.mQuickVariableInputContent = new WpfCustom(this);
                    #region Search Criteria
                    this.mQuickVariableInputContent.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.QuickVariableInputView";
                    this.mQuickVariableInputContent.SearchProperties[WpfControl.PropertyNames.AutomationId] = "QuickVariableInputContent";
                    this.mQuickVariableInputContent.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQuickVariableInputContent;
            }
        }
        
        public LargeView6 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView6(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public SmallView2 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView2(this);
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        
        private WpfCustom mQuickVariableInputContent;
        
        private LargeView6 mLargeView;
        
        private WpfButton mDoneButton;
        
        private SmallView2 mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView6 : WpfCustom
    {
        
        public LargeView6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid2 DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid2(this);
                }
                return this.mDataGrid;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid2 mDataGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid2 : WpfTable
    {
        
        public DataGrid2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row19 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row19(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row19 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row19 : WpfRow
    {
        
        public Row19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Cell Cell
        {
            get
            {
                if ((this.mCell == null))
                {
                    this.mCell = new Cell(this);
                }
                return this.mCell;
            }
        }
        #endregion
        
        #region Fields
        private Cell mCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell : WpfCell
    {
        
        public Cell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox : WpfControl
    {
        
        public Listbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Combobox";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__Row1_FromExpressiontxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ValueTextbox
        {
            get
            {
                if ((this.mValueTextbox == null))
                {
                    this.mValueTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mValueTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mValueTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mValueTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView2 : WpfCustom
    {
        
        public SmallView2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid3 DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid3(this);
                }
                return this.mDataGrid;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid3 mDataGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid3 : WpfTable
    {
        
        public DataGrid3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row110 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row110(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row110 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row110 : WpfRow
    {
        
        public Row110(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Cell1 Cell
        {
            get
            {
                if ((this.mCell == null))
                {
                    this.mCell = new Cell1(this);
                }
                return this.mCell;
            }
        }
        #endregion
        
        #region Fields
        private Cell1 mCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell1 : WpfCell
    {
        
        public Cell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox1 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox1(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox1 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox1 : WpfControl
    {
        
        public Listbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Combobox";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__Row1_FromExpressiontxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ValueTextbox
        {
            get
            {
                if ((this.mValueTextbox == null))
                {
                    this.mValueTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mValueTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mValueTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mValueTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CaseConvert1 : WpfCustom
    {
        
        public CaseConvert1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CaseConvertDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "CaseConvertDesigner", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        
        public QuickVariableInputContent2 QuickVariableInputContent
        {
            get
            {
                if ((this.mQuickVariableInputContent == null))
                {
                    this.mQuickVariableInputContent = new QuickVariableInputContent2(this);
                }
                return this.mQuickVariableInputContent;
            }
        }
        
        public SmallViewContentCustom4 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom4(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom5 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom5(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        
        private QuickVariableInputContent2 mQuickVariableInputContent;
        
        private SmallViewContentCustom4 mSmallViewContentCustom;
        
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom5 mLargeViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QuickVariableInputContent2 : WpfCustom
    {
        
        public QuickVariableInputContent2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.QuickVariableInputView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "QuickVariableInputContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton AppendRadioButton
        {
            get
            {
                if ((this.mAppendRadioButton == null))
                {
                    this.mAppendRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mAppendRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "AppendOption";
                    this.mAppendRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAppendRadioButton;
            }
        }
        
        public WpfEdit PrefixWithEdit
        {
            get
            {
                if ((this.mPrefixWithEdit == null))
                {
                    this.mPrefixWithEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPrefixWithEdit.SearchProperties[WpfEdit.PropertyNames.HelpText] = "Adds this to the front of the variables";
                    this.mPrefixWithEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPrefixWithEdit;
            }
        }
        
        public PreviewCustom3 PreviewCustom
        {
            get
            {
                if ((this.mPreviewCustom == null))
                {
                    this.mPreviewCustom = new PreviewCustom3(this);
                }
                return this.mPreviewCustom;
            }
        }
        
        public WpfEdit QviSplitOnCharacterEdit
        {
            get
            {
                if ((this.mQviSplitOnCharacterEdit == null))
                {
                    this.mQviSplitOnCharacterEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mQviSplitOnCharacterEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "QviSplitOnCharacter";
                    this.mQviSplitOnCharacterEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQviSplitOnCharacterEdit;
            }
        }
        
        public WpfComboBox QviSplitOnCombobox
        {
            get
            {
                if ((this.mQviSplitOnCombobox == null))
                {
                    this.mQviSplitOnCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mQviSplitOnCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "QviSplitOnCombobox";
                    this.mQviSplitOnCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQviSplitOnCombobox;
            }
        }
        
        public WpfEdit QviVariableListBoxEdit
        {
            get
            {
                if ((this.mQviVariableListBoxEdit == null))
                {
                    this.mQviVariableListBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mQviVariableListBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "QviVariableListBox";
                    this.mQviVariableListBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQviVariableListBoxEdit;
            }
        }
        
        public WpfRadioButton ReplaceRadioButton
        {
            get
            {
                if ((this.mReplaceRadioButton == null))
                {
                    this.mReplaceRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mReplaceRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "ReplaceOption";
                    this.mReplaceRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReplaceRadioButton;
            }
        }
        
        public WpfEdit SurfixWithEdit
        {
            get
            {
                if ((this.mSurfixWithEdit == null))
                {
                    this.mSurfixWithEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mSurfixWithEdit.SearchProperties[WpfEdit.PropertyNames.HelpText] = "Adds this to end of the variables";
                    this.mSurfixWithEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSurfixWithEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mAppendRadioButton;
        
        private WpfEdit mPrefixWithEdit;
        
        private PreviewCustom3 mPreviewCustom;
        
        private WpfEdit mQviSplitOnCharacterEdit;
        
        private WpfComboBox mQviSplitOnCombobox;
        
        private WpfEdit mQviVariableListBoxEdit;
        
        private WpfRadioButton mReplaceRadioButton;
        
        private WpfEdit mSurfixWithEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PreviewCustom3 : WpfCustom
    {
        
        public PreviewCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.PreviewView";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Preview";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public PreviewGroup3 PreviewGroup
        {
            get
            {
                if ((this.mPreviewGroup == null))
                {
                    this.mPreviewGroup = new PreviewGroup3(this);
                }
                return this.mPreviewGroup;
            }
        }
        #endregion
        
        #region Fields
        private PreviewGroup3 mPreviewGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PreviewGroup3 : WpfGroup
    {
        
        public PreviewGroup3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "PreviewGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public PreviewButton3 PreviewButton
        {
            get
            {
                if ((this.mPreviewButton == null))
                {
                    this.mPreviewButton = new PreviewButton3(this);
                }
                return this.mPreviewButton;
            }
        }
        #endregion
        
        #region Fields
        private PreviewButton3 mPreviewButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PreviewButton3 : WpfButton
    {
        
        public PreviewButton3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Preview";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom4 : WpfCustom
    {
        
        public SmallViewContentCustom4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallDataGridTable1 SmallDataGridTable
        {
            get
            {
                if ((this.mSmallDataGridTable == null))
                {
                    this.mSmallDataGridTable = new SmallDataGridTable1(this);
                }
                return this.mSmallDataGridTable;
            }
        }
        #endregion
        
        #region Fields
        private SmallDataGridTable1 mSmallDataGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallDataGridTable1 : WpfTable
    {
        
        public SmallDataGridTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row111 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row111(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row111 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row111 : WpfRow
    {
        
        public Row111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueCell3 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell3(this);
                }
                return this.mValueCell;
            }
        }
        
        public ConvertFuncCell ConvertFuncCell
        {
            get
            {
                if ((this.mConvertFuncCell == null))
                {
                    this.mConvertFuncCell = new ConvertFuncCell(this);
                }
                return this.mConvertFuncCell;
            }
        }
        #endregion
        
        #region Fields
        private ValueCell3 mValueCell;
        
        private ConvertFuncCell mConvertFuncCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell3 : WpfCell
    {
        
        public ValueCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueComboBox3 ValueComboBox
        {
            get
            {
                if ((this.mValueComboBox == null))
                {
                    this.mValueComboBox = new ValueComboBox3(this);
                }
                return this.mValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ValueComboBox3 mValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueComboBox3 : WpfComboBox
    {
        
        public ValueComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_OutputVariable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertFuncCell : WpfCell
    {
        
        public ConvertFuncCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "2";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox ConverFuncComboBox
        {
            get
            {
                if ((this.mConverFuncComboBox == null))
                {
                    this.mConverFuncComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mConverFuncComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_OutputVariable_AutoID";
                    this.mConverFuncComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConverFuncComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mConverFuncComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom5 : WpfCustom
    {
        
        public LargeViewContentCustom5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public SmallDataGridTable2 SmallDataGridTable
        {
            get
            {
                if ((this.mSmallDataGridTable == null))
                {
                    this.mSmallDataGridTable = new SmallDataGridTable2(this);
                }
                return this.mSmallDataGridTable;
            }
        }
        
        public OnErrorCustom5 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom5(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private SmallDataGridTable2 mSmallDataGridTable;
        
        private OnErrorCustom5 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallDataGridTable2 : WpfTable
    {
        
        public SmallDataGridTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public Row112 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row112(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row112 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row112 : WpfRow
    {
        
        public Row112(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public OutputVariableCell OutputVariableCell
        {
            get
            {
                if ((this.mOutputVariableCell == null))
                {
                    this.mOutputVariableCell = new OutputVariableCell(this);
                }
                return this.mOutputVariableCell;
            }
        }
        
        public ConvertToCell ConvertToCell
        {
            get
            {
                if ((this.mConvertToCell == null))
                {
                    this.mConvertToCell = new ConvertToCell(this);
                }
                return this.mConvertToCell;
            }
        }
        #endregion
        
        #region Fields
        private OutputVariableCell mOutputVariableCell;
        
        private ConvertToCell mConvertToCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputVariableCell : WpfCell
    {
        
        public OutputVariableCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public OutputVariableComboBox OutputVariableComboBox
        {
            get
            {
                if ((this.mOutputVariableComboBox == null))
                {
                    this.mOutputVariableComboBox = new OutputVariableComboBox(this);
                }
                return this.mOutputVariableComboBox;
            }
        }
        #endregion
        
        #region Fields
        private OutputVariableComboBox mOutputVariableComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputVariableComboBox : WpfComboBox
    {
        
        public OutputVariableComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_OutputVariable_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertToCell : WpfCell
    {
        
        public ConvertToCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "2";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfComboBox ConvertToComboBox
        {
            get
            {
                if ((this.mConvertToComboBox == null))
                {
                    this.mConvertToComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mConvertToComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_OutputVariable_AutoID";
                    this.mConvertToComboBox.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mConvertToComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mConvertToComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom5 : WpfCustom
    {
        
        public OnErrorCustom5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup7 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup7(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup7 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup7 : WpfGroup
    {
        
        public OnErrorGroup7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox5 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox5(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox3 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox3(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox5 mErrorVariableComboBox;
        
        private WebServiceComboBox3 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox5 : WpfComboBox
    {
        
        public ErrorVariableComboBox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox3 : WpfComboBox
    {
        
        public WebServiceComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ForEach1 : WpfCustom
    {
        
        public ForEach1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ForeachDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "For Each(ForeachDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallView3 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView3(this);
                }
                return this.mSmallView;
            }
        }
        
        public LargeView7 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView7(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private SmallView3 mSmallView;
        
        private LargeView7 mLargeView;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView3 : WpfCustom
    {
        
        public SmallView3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox ForEachTypeComboBox
        {
            get
            {
                if ((this.mForEachTypeComboBox == null))
                {
                    this.mForEachTypeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mForEachTypeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__ForEachType_AutoID";
                    this.mForEachTypeComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mForEachTypeComboBox;
            }
        }
        
        public FromIntellisenseTextbox FromIntellisenseTextbox
        {
            get
            {
                if ((this.mFromIntellisenseTextbox == null))
                {
                    this.mFromIntellisenseTextbox = new FromIntellisenseTextbox(this);
                }
                return this.mFromIntellisenseTextbox;
            }
        }
        
        public ToIntellisenseTextbox ToIntellisenseTextbox
        {
            get
            {
                if ((this.mToIntellisenseTextbox == null))
                {
                    this.mToIntellisenseTextbox = new ToIntellisenseTextbox(this);
                }
                return this.mToIntellisenseTextbox;
            }
        }
        
        public WpfCustom DropActivityHere
        {
            get
            {
                if ((this.mDropActivityHere == null))
                {
                    this.mDropActivityHere = new WpfCustom(this);
                    #region Search Criteria
                    this.mDropActivityHere.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
                    this.mDropActivityHere.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__DropPoint_AutoID";
                    this.mDropActivityHere.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDropActivityHere;
            }
        }
        
        public DropActivityHereCustom DropActivityHereCustom
        {
            get
            {
                if ((this.mDropActivityHereCustom == null))
                {
                    this.mDropActivityHereCustom = new DropActivityHereCustom(this);
                }
                return this.mDropActivityHereCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mForEachTypeComboBox;
        
        private FromIntellisenseTextbox mFromIntellisenseTextbox;
        
        private ToIntellisenseTextbox mToIntellisenseTextbox;
        
        private WpfCustom mDropActivityHere;
        
        private DropActivityHereCustom mDropActivityHereCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FromIntellisenseTextbox : WpfComboBox
    {
        
        public FromIntellisenseTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__ForEachFromTextbox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ToIntellisenseTextbox : WpfComboBox
    {
        
        public ToIntellisenseTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__ForEachToTextbox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DropActivityHereCustom : WpfCustom
    {
        
        public DropActivityHereCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__DropPoint_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfText DropActivityHereText
        {
            get
            {
                if ((this.mDropActivityHereText == null))
                {
                    this.mDropActivityHereText = new WpfText(this);
                    #region Search Criteria
                    this.mDropActivityHereText.SearchProperties[WpfText.PropertyNames.Name] = "Drop Activity Here";
                    this.mDropActivityHereText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDropActivityHereText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mDropActivityHereText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView7 : WpfCustom
    {
        
        public LargeView7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox TypeCombobox
        {
            get
            {
                if ((this.mTypeCombobox == null))
                {
                    this.mTypeCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mTypeCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__ForEachType_AutoID";
                    this.mTypeCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTypeCombobox;
            }
        }
        
        public ForEachFromIntellisenseTextbox ForEachFromIntellisenseTextbox
        {
            get
            {
                if ((this.mForEachFromIntellisenseTextbox == null))
                {
                    this.mForEachFromIntellisenseTextbox = new ForEachFromIntellisenseTextbox(this);
                }
                return this.mForEachFromIntellisenseTextbox;
            }
        }
        
        public ToIntellisenseTextbox1 ToIntellisenseTextbox
        {
            get
            {
                if ((this.mToIntellisenseTextbox == null))
                {
                    this.mToIntellisenseTextbox = new ToIntellisenseTextbox1(this);
                }
                return this.mToIntellisenseTextbox;
            }
        }
        
        public DropActivityHere DropActivityHere
        {
            get
            {
                if ((this.mDropActivityHere == null))
                {
                    this.mDropActivityHere = new DropActivityHere(this);
                }
                return this.mDropActivityHere;
            }
        }
        
        public OnErrorPane OnErrorPane
        {
            get
            {
                if ((this.mOnErrorPane == null))
                {
                    this.mOnErrorPane = new OnErrorPane(this);
                }
                return this.mOnErrorPane;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mTypeCombobox;
        
        private ForEachFromIntellisenseTextbox mForEachFromIntellisenseTextbox;
        
        private ToIntellisenseTextbox1 mToIntellisenseTextbox;
        
        private DropActivityHere mDropActivityHere;
        
        private OnErrorPane mOnErrorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ForEachFromIntellisenseTextbox : WpfComboBox
    {
        
        public ForEachFromIntellisenseTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__ForEachFromTextbox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ToIntellisenseTextbox1 : WpfComboBox
    {
        
        public ToIntellisenseTextbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__ForEachToTextbox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DropActivityHere : WpfCustom
    {
        
        public DropActivityHere(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__DropPoint_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText DropActivityHereFloatingText
        {
            get
            {
                if ((this.mDropActivityHereFloatingText == null))
                {
                    this.mDropActivityHereFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mDropActivityHereFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "Drop Activity Here";
                    this.mDropActivityHereFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDropActivityHereFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mDropActivityHereFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorPane : WpfCustom
    {
        
        public OnErrorPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup8 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup8(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup8 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup8 : WpfGroup
    {
        
        public OnErrorGroup8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableIntellisenseTextbox ErrorVariableIntellisenseTextbox
        {
            get
            {
                if ((this.mErrorVariableIntellisenseTextbox == null))
                {
                    this.mErrorVariableIntellisenseTextbox = new ErrorVariableIntellisenseTextbox(this);
                }
                return this.mErrorVariableIntellisenseTextbox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckbox
        {
            get
            {
                if ((this.mEndthisworkflowCheckbox == null))
                {
                    this.mEndthisworkflowCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableIntellisenseTextbox mErrorVariableIntellisenseTextbox;
        
        private WpfCheckBox mEndthisworkflowCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableIntellisenseTextbox : WpfComboBox
    {
        
        public ErrorVariableIntellisenseTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Length1 : WpfCustom
    {
        
        public Length1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RecordsLengthDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Length(RecordsLengthDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeViewContentCustom6 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom6(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public SmallViewContentCustom5 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom5(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private LargeViewContentCustom6 mLargeViewContentCustom;
        
        private WpfButton mDoneButton;
        
        private SmallViewContentCustom5 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom6 : WpfCustom
    {
        
        public LargeViewContentCustom6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RecordsetComboBox RecordsetComboBox
        {
            get
            {
                if ((this.mRecordsetComboBox == null))
                {
                    this.mRecordsetComboBox = new RecordsetComboBox(this);
                }
                return this.mRecordsetComboBox;
            }
        }
        
        public WpfCheckBox NullAsZeroCheckBox
        {
            get
            {
                if ((this.mNullAsZeroCheckBox == null))
                {
                    this.mNullAsZeroCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mNullAsZeroCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__NullAsCheckBox_AutoID";
                    this.mNullAsZeroCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNullAsZeroCheckBox;
            }
        }
        
        public ResultComboBox3 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox3(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom6 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom6(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetComboBox mRecordsetComboBox;
        
        private WpfCheckBox mNullAsZeroCheckBox;
        
        private ResultComboBox3 mResultComboBox;
        
        private OnErrorCustom6 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetComboBox : WpfComboBox
    {
        
        public RecordsetComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Recorsettxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox3 : WpfComboBox
    {
        
        public ResultComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom6 : WpfCustom
    {
        
        public OnErrorCustom6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup9 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup9(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup9 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup9 : WpfGroup
    {
        
        public OnErrorGroup9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableComboBox VariableComboBox
        {
            get
            {
                if ((this.mVariableComboBox == null))
                {
                    this.mVariableComboBox = new VariableComboBox(this);
                }
                return this.mVariableComboBox;
            }
        }
        
        public WebServiceComboBox4 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox4(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        #endregion
        
        #region Fields
        private VariableComboBox mVariableComboBox;
        
        private WebServiceComboBox4 mWebServiceComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableComboBox : WpfComboBox
    {
        
        public VariableComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox4 : WpfComboBox
    {
        
        public WebServiceComboBox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom5 : WpfCustom
    {
        
        public SmallViewContentCustom5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResultComboBox4 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox4(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public RecordsetComboBox1 RecordsetComboBox
        {
            get
            {
                if ((this.mRecordsetComboBox == null))
                {
                    this.mRecordsetComboBox = new RecordsetComboBox1(this);
                }
                return this.mRecordsetComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ResultComboBox4 mResultComboBox;
        
        private RecordsetComboBox1 mRecordsetComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox4 : WpfComboBox
    {
        
        public ResultComboBox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetComboBox1 : WpfComboBox
    {
        
        public RecordsetComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Recorsettxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FindRecordsIndex : WpfCustom
    {
        
        public FindRecordsIndex(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FindRecordsMultipleCriteriaDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "FindRecordsMultipleCriteriaDesigner", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallViewContentCustom6 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom6(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom7 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom7(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private SmallViewContentCustom6 mSmallViewContentCustom;
        
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom7 mLargeViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom6 : WpfCustom
    {
        
        public SmallViewContentCustom6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FieldsToSearchComboBox FieldsToSearchComboBox
        {
            get
            {
                if ((this.mFieldsToSearchComboBox == null))
                {
                    this.mFieldsToSearchComboBox = new FieldsToSearchComboBox(this);
                }
                return this.mFieldsToSearchComboBox;
            }
        }
        
        public SmallDataGridTable3 SmallDataGridTable
        {
            get
            {
                if ((this.mSmallDataGridTable == null))
                {
                    this.mSmallDataGridTable = new SmallDataGridTable3(this);
                }
                return this.mSmallDataGridTable;
            }
        }
        
        public ResultComboBox5 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox5(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private FieldsToSearchComboBox mFieldsToSearchComboBox;
        
        private SmallDataGridTable3 mSmallDataGridTable;
        
        private ResultComboBox5 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FieldsToSearchComboBox : WpfComboBox
    {
        
        public FieldsToSearchComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FieldsToSearch_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallDataGridTable3 : WpfTable
    {
        
        public SmallDataGridTable3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row113 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row113(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row113 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row113 : WpfRow
    {
        
        public Row113(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SearchTypeCell SearchTypeCell
        {
            get
            {
                if ((this.mSearchTypeCell == null))
                {
                    this.mSearchTypeCell = new SearchTypeCell(this);
                }
                return this.mSearchTypeCell;
            }
        }
        
        public SearchCriteriaCell SearchCriteriaCell
        {
            get
            {
                if ((this.mSearchCriteriaCell == null))
                {
                    this.mSearchCriteriaCell = new SearchCriteriaCell(this);
                }
                return this.mSearchCriteriaCell;
            }
        }
        #endregion
        
        #region Fields
        private SearchTypeCell mSearchTypeCell;
        
        private SearchCriteriaCell mSearchCriteriaCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SearchTypeCell : WpfCell
    {
        
        public SearchTypeCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox SearchTypeComboBox
        {
            get
            {
                if ((this.mSearchTypeComboBox == null))
                {
                    this.mSearchTypeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSearchTypeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchType_AutoID";
                    this.mSearchTypeComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSearchTypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mSearchTypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SearchCriteriaCell : WpfCell
    {
        
        public SearchCriteriaCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "2";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SearchCriteriaComboBox SearchCriteriaComboBox
        {
            get
            {
                if ((this.mSearchCriteriaComboBox == null))
                {
                    this.mSearchCriteriaComboBox = new SearchCriteriaComboBox(this);
                }
                return this.mSearchCriteriaComboBox;
            }
        }
        #endregion
        
        #region Fields
        private SearchCriteriaComboBox mSearchCriteriaComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SearchCriteriaComboBox : WpfComboBox
    {
        
        public SearchCriteriaComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchCriteria_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox5 : WpfComboBox
    {
        
        public ResultComboBox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Result_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom7 : WpfCustom
    {
        
        public LargeViewContentCustom7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FieldsToSearchComboBox1 FieldsToSearchComboBox
        {
            get
            {
                if ((this.mFieldsToSearchComboBox == null))
                {
                    this.mFieldsToSearchComboBox = new FieldsToSearchComboBox1(this);
                }
                return this.mFieldsToSearchComboBox;
            }
        }
        
        public LargeDataGridTable2 LargeDataGridTable
        {
            get
            {
                if ((this.mLargeDataGridTable == null))
                {
                    this.mLargeDataGridTable = new LargeDataGridTable2(this);
                }
                return this.mLargeDataGridTable;
            }
        }
        
        public WpfCheckBox RequireAllMatchesTruCheckBox
        {
            get
            {
                if ((this.mRequireAllMatchesTruCheckBox == null))
                {
                    this.mRequireAllMatchesTruCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRequireAllMatchesTruCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__RequireAllTrue_AutoID";
                    this.mRequireAllMatchesTruCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRequireAllMatchesTruCheckBox;
            }
        }
        
        public WpfCheckBox RequireAllFieldsToMatchCheckBox
        {
            get
            {
                if ((this.mRequireAllFieldsToMatchCheckBox == null))
                {
                    this.mRequireAllFieldsToMatchCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRequireAllFieldsToMatchCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__RequireAllFieldsToMatch_AutoID";
                    this.mRequireAllFieldsToMatchCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRequireAllFieldsToMatchCheckBox;
            }
        }
        
        public ResultComboBox6 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox6(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom7 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom7(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private FieldsToSearchComboBox1 mFieldsToSearchComboBox;
        
        private LargeDataGridTable2 mLargeDataGridTable;
        
        private WpfCheckBox mRequireAllMatchesTruCheckBox;
        
        private WpfCheckBox mRequireAllFieldsToMatchCheckBox;
        
        private ResultComboBox6 mResultComboBox;
        
        private OnErrorCustom7 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FieldsToSearchComboBox1 : WpfComboBox
    {
        
        public FieldsToSearchComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FieldsToSearchtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeDataGridTable2 : WpfTable
    {
        
        public LargeDataGridTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row114 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row114(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row114 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row114 : WpfRow
    {
        
        public Row114(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SearchTypeCell1 SearchTypeCell
        {
            get
            {
                if ((this.mSearchTypeCell == null))
                {
                    this.mSearchTypeCell = new SearchTypeCell1(this);
                }
                return this.mSearchTypeCell;
            }
        }
        
        public SearchCriteriaCell1 SearchCriteriaCell
        {
            get
            {
                if ((this.mSearchCriteriaCell == null))
                {
                    this.mSearchCriteriaCell = new SearchCriteriaCell1(this);
                }
                return this.mSearchCriteriaCell;
            }
        }
        #endregion
        
        #region Fields
        private SearchTypeCell1 mSearchTypeCell;
        
        private SearchCriteriaCell1 mSearchCriteriaCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SearchTypeCell1 : WpfCell
    {
        
        public SearchTypeCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "MatchType";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox SearchTypeComboBox
        {
            get
            {
                if ((this.mSearchTypeComboBox == null))
                {
                    this.mSearchTypeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSearchTypeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchType_AutoID";
                    this.mSearchTypeComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSearchTypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mSearchTypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SearchCriteriaCell1 : WpfCell
    {
        
        public SearchCriteriaCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Match";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SearchCriteriaComboBox1 SearchCriteriaComboBox
        {
            get
            {
                if ((this.mSearchCriteriaComboBox == null))
                {
                    this.mSearchCriteriaComboBox = new SearchCriteriaComboBox1(this);
                }
                return this.mSearchCriteriaComboBox;
            }
        }
        #endregion
        
        #region Fields
        private SearchCriteriaComboBox1 mSearchCriteriaComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SearchCriteriaComboBox1 : WpfComboBox
    {
        
        public SearchCriteriaComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchCriteria_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox6 : WpfComboBox
    {
        
        public ResultComboBox6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Result_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom7 : WpfCustom
    {
        
        public OnErrorCustom7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup10 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup10(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup10 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup10 : WpfGroup
    {
        
        public OnErrorGroup10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox6 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox6(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox5 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox5(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox6 mErrorVariableComboBox;
        
        private WebServiceComboBox5 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox6 : WpfComboBox
    {
        
        public ErrorVariableComboBox6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox5 : WpfComboBox
    {
        
        public WebServiceComboBox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteRecord : WpfCustom
    {
        
        public DeleteRecord(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DeleteRecordsDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Delete Record(DeleteRecordsDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallViewContentCustom7 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom7(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        
        public LargeViewContentCustom8 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom8(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private SmallViewContentCustom7 mSmallViewContentCustom;
        
        private LargeViewContentCustom8 mLargeViewContentCustom;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom7 : WpfCustom
    {
        
        public SmallViewContentCustom7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RecordsetComboBox2 RecordsetComboBox
        {
            get
            {
                if ((this.mRecordsetComboBox == null))
                {
                    this.mRecordsetComboBox = new RecordsetComboBox2(this);
                }
                return this.mRecordsetComboBox;
            }
        }
        
        public ResultComboBox7 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox7(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetComboBox2 mRecordsetComboBox;
        
        private ResultComboBox7 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetComboBox2 : WpfComboBox
    {
        
        public RecordsetComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Recorstxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox7 : WpfComboBox
    {
        
        public ResultComboBox7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom8 : WpfCustom
    {
        
        public LargeViewContentCustom8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RecordsetComboBox3 RecordsetComboBox
        {
            get
            {
                if ((this.mRecordsetComboBox == null))
                {
                    this.mRecordsetComboBox = new RecordsetComboBox3(this);
                }
                return this.mRecordsetComboBox;
            }
        }
        
        public WpfCheckBox NullAsZeroCheckBoxCheckBox
        {
            get
            {
                if ((this.mNullAsZeroCheckBoxCheckBox == null))
                {
                    this.mNullAsZeroCheckBoxCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mNullAsZeroCheckBoxCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__NullAsCheckBox_AutoID";
                    this.mNullAsZeroCheckBoxCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNullAsZeroCheckBoxCheckBox;
            }
        }
        
        public ResultComboBox8 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox8(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom8 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom8(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetComboBox3 mRecordsetComboBox;
        
        private WpfCheckBox mNullAsZeroCheckBoxCheckBox;
        
        private ResultComboBox8 mResultComboBox;
        
        private OnErrorCustom8 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetComboBox3 : WpfComboBox
    {
        
        public RecordsetComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Recorstxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox8 : WpfComboBox
    {
        
        public ResultComboBox8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom8 : WpfCustom
    {
        
        public OnErrorCustom8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup11 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup11(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup11 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup11 : WpfGroup
    {
        
        public OnErrorGroup11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox7 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox7(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox6 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox6(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox7 mErrorVariableComboBox;
        
        private WebServiceComboBox6 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox7 : WpfComboBox
    {
        
        public ErrorVariableComboBox7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox6 : WpfComboBox
    {
        
        public WebServiceComboBox6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SortRecords : WpfCustom
    {
        
        public SortRecords(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SortRecordsDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sort Records(SortRecordsDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallViewContentCustom8 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom8(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        
        public LargeViewContentCustom9 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom9(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private SmallViewContentCustom8 mSmallViewContentCustom;
        
        private LargeViewContentCustom9 mLargeViewContentCustom;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom8 : WpfCustom
    {
        
        public SmallViewContentCustom8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SortFieldComboBox SortFieldComboBox
        {
            get
            {
                if ((this.mSortFieldComboBox == null))
                {
                    this.mSortFieldComboBox = new SortFieldComboBox(this);
                }
                return this.mSortFieldComboBox;
            }
        }
        
        public WpfComboBox SortOrderComboBox
        {
            get
            {
                if ((this.mSortOrderComboBox == null))
                {
                    this.mSortOrderComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSortOrderComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__SortOrdercbx_AutoID";
                    this.mSortOrderComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSortOrderComboBox;
            }
        }
        #endregion
        
        #region Fields
        private SortFieldComboBox mSortFieldComboBox;
        
        private WpfComboBox mSortOrderComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SortFieldComboBox : WpfComboBox
    {
        
        public SortFieldComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__SortFieldtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom9 : WpfCustom
    {
        
        public LargeViewContentCustom9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SortFieldComboBox1 SortFieldComboBox
        {
            get
            {
                if ((this.mSortFieldComboBox == null))
                {
                    this.mSortFieldComboBox = new SortFieldComboBox1(this);
                }
                return this.mSortFieldComboBox;
            }
        }
        
        public WpfComboBox SortOrderComboBox
        {
            get
            {
                if ((this.mSortOrderComboBox == null))
                {
                    this.mSortOrderComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSortOrderComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__SortOrdercbx_AutoID";
                    this.mSortOrderComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSortOrderComboBox;
            }
        }
        
        public OnErrorCustom9 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom9(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private SortFieldComboBox1 mSortFieldComboBox;
        
        private WpfComboBox mSortOrderComboBox;
        
        private OnErrorCustom9 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SortFieldComboBox1 : WpfComboBox
    {
        
        public SortFieldComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__SortFieldtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom9 : WpfCustom
    {
        
        public OnErrorCustom9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup12 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup12(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup12 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup12 : WpfGroup
    {
        
        public OnErrorGroup12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox8 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox8(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox7 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox7(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox8 mErrorVariableComboBox;
        
        private WebServiceComboBox7 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox8 : WpfComboBox
    {
        
        public ErrorVariableComboBox8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox7 : WpfComboBox
    {
        
        public WebServiceComboBox7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CountRecordset : WpfCustom
    {
        
        public CountRecordset(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CountRecordsDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Count Records(CountRecordsDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom10 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom10(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom9 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom9(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom10 mLargeViewContentCustom;
        
        private SmallViewContentCustom9 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom10 : WpfCustom
    {
        
        public LargeViewContentCustom10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RecorsetComboBox RecorsetComboBox
        {
            get
            {
                if ((this.mRecorsetComboBox == null))
                {
                    this.mRecorsetComboBox = new RecorsetComboBox(this);
                }
                return this.mRecorsetComboBox;
            }
        }
        
        public WpfCheckBox NullAsZeroCheckBoxCheckBox
        {
            get
            {
                if ((this.mNullAsZeroCheckBoxCheckBox == null))
                {
                    this.mNullAsZeroCheckBoxCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mNullAsZeroCheckBoxCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__NullAsCheckBox_AutoID";
                    this.mNullAsZeroCheckBoxCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNullAsZeroCheckBoxCheckBox;
            }
        }
        
        public ResultComboBox9 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox9(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom10 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom10(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private RecorsetComboBox mRecorsetComboBox;
        
        private WpfCheckBox mNullAsZeroCheckBoxCheckBox;
        
        private ResultComboBox9 mResultComboBox;
        
        private OnErrorCustom10 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecorsetComboBox : WpfComboBox
    {
        
        public RecorsetComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Recorsettxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox9 : WpfComboBox
    {
        
        public ResultComboBox9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom10 : WpfCustom
    {
        
        public OnErrorCustom10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup13 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup13(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup13 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup13 : WpfGroup
    {
        
        public OnErrorGroup13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox9 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox9(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox8 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox8(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox9 mErrorVariableComboBox;
        
        private WebServiceComboBox8 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox9 : WpfComboBox
    {
        
        public ErrorVariableComboBox9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox8 : WpfComboBox
    {
        
        public WebServiceComboBox8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom9 : WpfCustom
    {
        
        public SmallViewContentCustom9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RecorsetComboBox1 RecorsetComboBox
        {
            get
            {
                if ((this.mRecorsetComboBox == null))
                {
                    this.mRecorsetComboBox = new RecorsetComboBox1(this);
                }
                return this.mRecorsetComboBox;
            }
        }
        
        public ResultComboBox10 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox10(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private RecorsetComboBox1 mRecorsetComboBox;
        
        private ResultComboBox10 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecorsetComboBox1 : WpfComboBox
    {
        
        public RecorsetComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Recorsettxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox10 : WpfComboBox
    {
        
        public ResultComboBox10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SqlBulkInsert1 : WpfCustom
    {
        
        public SqlBulkInsert1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SqlBulkInsertDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SQL Bulk Insert(SqlBulkInsertDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom11 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom11(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom10 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom10(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom11 mLargeViewContentCustom;
        
        private SmallViewContentCustom10 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom11 : WpfCustom
    {
        
        public LargeViewContentCustom11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox DatabaseComboBox
        {
            get
            {
                if ((this.mDatabaseComboBox == null))
                {
                    this.mDatabaseComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mDatabaseComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
                    this.mDatabaseComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDatabaseComboBox;
            }
        }
        
        public WpfButton ItemButton
        {
            get
            {
                if ((this.mItemButton == null))
                {
                    this.mItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mItemButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mItemButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemButton;
            }
        }
        
        public WpfComboBox TableNameComboBox
        {
            get
            {
                if ((this.mTableNameComboBox == null))
                {
                    this.mTableNameComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mTableNameComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__TableName_AutoID";
                    this.mTableNameComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTableNameComboBox;
            }
        }
        
        public WpfButton RfreshTableButton
        {
            get
            {
                if ((this.mRfreshTableButton == null))
                {
                    this.mRfreshTableButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRfreshTableButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__RefreshTablesCommand_AutoID";
                    this.mRfreshTableButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRfreshTableButton;
            }
        }
        
        public WpfTable LargeDataGridTable
        {
            get
            {
                if ((this.mLargeDataGridTable == null))
                {
                    this.mLargeDataGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mLargeDataGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
                    this.mLargeDataGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLargeDataGridTable;
            }
        }
        
        public BatchSizeComboBox BatchSizeComboBox
        {
            get
            {
                if ((this.mBatchSizeComboBox == null))
                {
                    this.mBatchSizeComboBox = new BatchSizeComboBox(this);
                }
                return this.mBatchSizeComboBox;
            }
        }
        
        public TimeoutComboBox2 TimeoutComboBox
        {
            get
            {
                if ((this.mTimeoutComboBox == null))
                {
                    this.mTimeoutComboBox = new TimeoutComboBox2(this);
                }
                return this.mTimeoutComboBox;
            }
        }
        
        public WpfCheckBox CheckConstraintsCheckBox
        {
            get
            {
                if ((this.mCheckConstraintsCheckBox == null))
                {
                    this.mCheckConstraintsCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mCheckConstraintsCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__CheckConstraints_AutoID";
                    this.mCheckConstraintsCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCheckConstraintsCheckBox;
            }
        }
        
        public WpfCheckBox KeepTableLockCheckBox
        {
            get
            {
                if ((this.mKeepTableLockCheckBox == null))
                {
                    this.mKeepTableLockCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mKeepTableLockCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__KeepTableLock_AutoID";
                    this.mKeepTableLockCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mKeepTableLockCheckBox;
            }
        }
        
        public WpfCheckBox FireTriggersCheckBox
        {
            get
            {
                if ((this.mFireTriggersCheckBox == null))
                {
                    this.mFireTriggersCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mFireTriggersCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__FireTriggers_AutoID";
                    this.mFireTriggersCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFireTriggersCheckBox;
            }
        }
        
        public WpfCheckBox UseInternalTransactiCheckBox
        {
            get
            {
                if ((this.mUseInternalTransactiCheckBox == null))
                {
                    this.mUseInternalTransactiCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUseInternalTransactiCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__UseInternalTransaction_AutoID";
                    this.mUseInternalTransactiCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUseInternalTransactiCheckBox;
            }
        }
        
        public WpfCheckBox SkipblankrowsCheckBox
        {
            get
            {
                if ((this.mSkipblankrowsCheckBox == null))
                {
                    this.mSkipblankrowsCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mSkipblankrowsCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IgnoreBlankRows_AutoID";
                    this.mSkipblankrowsCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSkipblankrowsCheckBox;
            }
        }
        
        public WpfCheckBox KeepIdentityCheckBox
        {
            get
            {
                if ((this.mKeepIdentityCheckBox == null))
                {
                    this.mKeepIdentityCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mKeepIdentityCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__KeepIdentity_AutoID";
                    this.mKeepIdentityCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mKeepIdentityCheckBox;
            }
        }
        
        public ResultComboBox11 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox11(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom11 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom11(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mDatabaseComboBox;
        
        private WpfButton mItemButton;
        
        private WpfComboBox mTableNameComboBox;
        
        private WpfButton mRfreshTableButton;
        
        private WpfTable mLargeDataGridTable;
        
        private BatchSizeComboBox mBatchSizeComboBox;
        
        private TimeoutComboBox2 mTimeoutComboBox;
        
        private WpfCheckBox mCheckConstraintsCheckBox;
        
        private WpfCheckBox mKeepTableLockCheckBox;
        
        private WpfCheckBox mFireTriggersCheckBox;
        
        private WpfCheckBox mUseInternalTransactiCheckBox;
        
        private WpfCheckBox mSkipblankrowsCheckBox;
        
        private WpfCheckBox mKeepIdentityCheckBox;
        
        private ResultComboBox11 mResultComboBox;
        
        private OnErrorCustom11 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BatchSizeComboBox : WpfComboBox
    {
        
        public BatchSizeComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__BatchSize_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TimeoutComboBox2 : WpfComboBox
    {
        
        public TimeoutComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Timeout_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox11 : WpfComboBox
    {
        
        public ResultComboBox11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Result_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom11 : WpfCustom
    {
        
        public OnErrorCustom11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup14 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup14(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup14 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup14 : WpfGroup
    {
        
        public OnErrorGroup14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox10 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox10(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox9 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox9(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox10 mErrorVariableComboBox;
        
        private WebServiceComboBox9 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox10 : WpfComboBox
    {
        
        public ErrorVariableComboBox10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox9 : WpfComboBox
    {
        
        public WebServiceComboBox9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom10 : WpfCustom
    {
        
        public SmallViewContentCustom10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DatabaseComboBox DatabaseComboBox
        {
            get
            {
                if ((this.mDatabaseComboBox == null))
                {
                    this.mDatabaseComboBox = new DatabaseComboBox(this);
                }
                return this.mDatabaseComboBox;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfComboBox TableNameComboBox
        {
            get
            {
                if ((this.mTableNameComboBox == null))
                {
                    this.mTableNameComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mTableNameComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__TableName_AutoID";
                    this.mTableNameComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTableNameComboBox;
            }
        }
        
        public WpfTable SmallDataGridTable
        {
            get
            {
                if ((this.mSmallDataGridTable == null))
                {
                    this.mSmallDataGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mSmallDataGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
                    this.mSmallDataGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSmallDataGridTable;
            }
        }
        
        public ResultComboBox12 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox12(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public WpfButton RefreshTableButton
        {
            get
            {
                if ((this.mRefreshTableButton == null))
                {
                    this.mRefreshTableButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshTableButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__RefreshTablesCommand_AutoID";
                    this.mRefreshTableButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshTableButton;
            }
        }
        #endregion
        
        #region Fields
        private DatabaseComboBox mDatabaseComboBox;
        
        private WpfButton mEditSourceButton;
        
        private WpfComboBox mTableNameComboBox;
        
        private WpfTable mSmallDataGridTable;
        
        private ResultComboBox12 mResultComboBox;
        
        private WpfButton mRefreshTableButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DatabaseComboBox : WpfComboBox
    {
        
        public DatabaseComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NewDataBaseSource
        {
            get
            {
                if ((this.mNewDataBaseSource == null))
                {
                    this.mNewDataBaseSource = new WpfListItem(this);
                    #region Search Criteria
                    this.mNewDataBaseSource.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""ServerType"":""SqlDatabase"",""Server"":null,""DatabaseName"":null,""Port"":0,""AuthenticationType"":""Windows"",""UserID"":null,""Password"":null,""DataList"":null,""ConnectionString"":""Data Source=;Initial Catalog=;Integrated Security=SSPI;"",""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""Version"":null,""ResourceID"":""4bc4d063-c49c-4fcc-829a-9d6efd41ce68"",""ResourceType"":""DbSource"",""ResourceName"":""New Database Source..."",""IsValid"":false,""Errors"":null,""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":null}";
                    this.mNewDataBaseSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewDataBaseSource;
            }
        }
        
        public WpfListItem GenDev
        {
            get
            {
                if ((this.mGenDev == null))
                {
                    this.mGenDev = new WpfListItem(this);
                    #region Search Criteria
                    this.mGenDev.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""ServerType"":""SqlDatabase"",""Server"":"""",""DatabaseName"":"""",""Port"":1433,""AuthenticationType"":""Windows"",""UserID"":null,""Password"":null,""DataList"":"""",""ConnectionString"":""Data Source=,1433;Initial Catalog=;Integrated Security=SSPI;"",""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""Version"":null,""ResourceID"":""62505a00-b304-4ac0-a55c-50ce85111f16"",""ResourceType"":""DbSource"",""ResourceName"":""GenDev"",""IsValid"":false,""Errors"":[],""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":null}";
                    this.mGenDev.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenDev;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNewDataBaseSource;
        
        private WpfListItem mGenDev;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox12 : WpfComboBox
    {
        
        public ResultComboBox12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Result_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Unique : WpfCustom
    {
        
        public Unique(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UniqueRecordsDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Unique Records(UniqueRecordsDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom12 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom12(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom11 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom11(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom12 mLargeViewContentCustom;
        
        private SmallViewContentCustom11 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom12 : WpfCustom
    {
        
        public LargeViewContentCustom12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InFieldsComboBox InFieldsComboBox
        {
            get
            {
                if ((this.mInFieldsComboBox == null))
                {
                    this.mInFieldsComboBox = new InFieldsComboBox(this);
                }
                return this.mInFieldsComboBox;
            }
        }
        
        public ReturnFieldsComboBox ReturnFieldsComboBox
        {
            get
            {
                if ((this.mReturnFieldsComboBox == null))
                {
                    this.mReturnFieldsComboBox = new ReturnFieldsComboBox(this);
                }
                return this.mReturnFieldsComboBox;
            }
        }
        
        public ResultsComboBox3 ResultsComboBox
        {
            get
            {
                if ((this.mResultsComboBox == null))
                {
                    this.mResultsComboBox = new ResultsComboBox3(this);
                }
                return this.mResultsComboBox;
            }
        }
        
        public OnErrorCustom12 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom12(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private InFieldsComboBox mInFieldsComboBox;
        
        private ReturnFieldsComboBox mReturnFieldsComboBox;
        
        private ResultsComboBox3 mResultsComboBox;
        
        private OnErrorCustom12 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InFieldsComboBox : WpfComboBox
    {
        
        public InFieldsComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__txtInFields_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReturnFieldsComboBox : WpfComboBox
    {
        
        public ReturnFieldsComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__txtReturnFields_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultsComboBox3 : WpfComboBox
    {
        
        public ResultsComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__txtResults_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom12 : WpfCustom
    {
        
        public OnErrorCustom12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup15 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup15(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup15 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup15 : WpfGroup
    {
        
        public OnErrorGroup15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableComboBox1 VariableComboBox
        {
            get
            {
                if ((this.mVariableComboBox == null))
                {
                    this.mVariableComboBox = new VariableComboBox1(this);
                }
                return this.mVariableComboBox;
            }
        }
        
        public WebServiceComboBox10 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox10(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private VariableComboBox1 mVariableComboBox;
        
        private WebServiceComboBox10 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableComboBox1 : WpfComboBox
    {
        
        public VariableComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox10 : WpfComboBox
    {
        
        public WebServiceComboBox10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom11 : WpfCustom
    {
        
        public SmallViewContentCustom11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InFieldsComboBox1 InFieldsComboBox
        {
            get
            {
                if ((this.mInFieldsComboBox == null))
                {
                    this.mInFieldsComboBox = new InFieldsComboBox1(this);
                }
                return this.mInFieldsComboBox;
            }
        }
        
        public ReturnFieldsComboBox1 ReturnFieldsComboBox
        {
            get
            {
                if ((this.mReturnFieldsComboBox == null))
                {
                    this.mReturnFieldsComboBox = new ReturnFieldsComboBox1(this);
                }
                return this.mReturnFieldsComboBox;
            }
        }
        
        public ResultsComboBox4 ResultsComboBox
        {
            get
            {
                if ((this.mResultsComboBox == null))
                {
                    this.mResultsComboBox = new ResultsComboBox4(this);
                }
                return this.mResultsComboBox;
            }
        }
        #endregion
        
        #region Fields
        private InFieldsComboBox1 mInFieldsComboBox;
        
        private ReturnFieldsComboBox1 mReturnFieldsComboBox;
        
        private ResultsComboBox4 mResultsComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InFieldsComboBox1 : WpfComboBox
    {
        
        public InFieldsComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__txtInFields_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReturnFieldsComboBox1 : WpfComboBox
    {
        
        public ReturnFieldsComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__txtReturnFields_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultsComboBox4 : WpfComboBox
    {
        
        public ResultsComboBox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__txtResults_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateJson1 : WpfCustom
    {
        
        public CreateJson1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CreateJsonDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "CreateJsonDesigner", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExecuteCommandLine : WpfCustom
    {
        
        public ExecuteCommandLine(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CommandLineDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Execute Command Line(CommandLineDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContent LargeViewContent
        {
            get
            {
                if ((this.mLargeViewContent == null))
                {
                    this.mLargeViewContent = new LargeViewContent(this);
                }
                return this.mLargeViewContent;
            }
        }
        
        public SmallViewContent SmallViewContent
        {
            get
            {
                if ((this.mSmallViewContent == null))
                {
                    this.mSmallViewContent = new SmallViewContent(this);
                }
                return this.mSmallViewContent;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContent mLargeViewContent;
        
        private SmallViewContent mSmallViewContent;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContent : WpfCustom
    {
        
        public LargeViewContent(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScriptIntellisenseTextbox ScriptIntellisenseTextbox
        {
            get
            {
                if ((this.mScriptIntellisenseTextbox == null))
                {
                    this.mScriptIntellisenseTextbox = new ScriptIntellisenseTextbox(this);
                }
                return this.mScriptIntellisenseTextbox;
            }
        }
        
        public WpfComboBox PriorityComboBox
        {
            get
            {
                if ((this.mPriorityComboBox == null))
                {
                    this.mPriorityComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mPriorityComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__CmdPriority_AutoID";
                    this.mPriorityComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPriorityComboBox;
            }
        }
        
        public ResultIntellisenseTextbox ResultIntellisenseTextbox
        {
            get
            {
                if ((this.mResultIntellisenseTextbox == null))
                {
                    this.mResultIntellisenseTextbox = new ResultIntellisenseTextbox(this);
                }
                return this.mResultIntellisenseTextbox;
            }
        }
        
        public OnError1 OnError
        {
            get
            {
                if ((this.mOnError == null))
                {
                    this.mOnError = new OnError1(this);
                }
                return this.mOnError;
            }
        }
        #endregion
        
        #region Fields
        private ScriptIntellisenseTextbox mScriptIntellisenseTextbox;
        
        private WpfComboBox mPriorityComboBox;
        
        private ResultIntellisenseTextbox mResultIntellisenseTextbox;
        
        private OnError1 mOnError;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScriptIntellisenseTextbox : WpfComboBox
    {
        
        public ScriptIntellisenseTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Cmdtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultIntellisenseTextbox : WpfComboBox
    {
        
        public ResultIntellisenseTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnError1 : WpfCustom
    {
        
        public OnError1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup16 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup16(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup16 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup16 : WpfGroup
    {
        
        public OnErrorGroup16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableIntellisenseTextbox1 ErrorVariableIntellisenseTextbox
        {
            get
            {
                if ((this.mErrorVariableIntellisenseTextbox == null))
                {
                    this.mErrorVariableIntellisenseTextbox = new ErrorVariableIntellisenseTextbox1(this);
                }
                return this.mErrorVariableIntellisenseTextbox;
            }
        }
        
        public OnErrorWorkflow OnErrorWorkflow
        {
            get
            {
                if ((this.mOnErrorWorkflow == null))
                {
                    this.mOnErrorWorkflow = new OnErrorWorkflow(this);
                }
                return this.mOnErrorWorkflow;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableIntellisenseTextbox1 mErrorVariableIntellisenseTextbox;
        
        private OnErrorWorkflow mOnErrorWorkflow;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableIntellisenseTextbox1 : WpfComboBox
    {
        
        public ErrorVariableIntellisenseTextbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorWorkflow : WpfComboBox
    {
        
        public OnErrorWorkflow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContent : WpfCustom
    {
        
        public SmallViewContent(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScriptIntellisenseTextbox1 ScriptIntellisenseTextbox
        {
            get
            {
                if ((this.mScriptIntellisenseTextbox == null))
                {
                    this.mScriptIntellisenseTextbox = new ScriptIntellisenseTextbox1(this);
                }
                return this.mScriptIntellisenseTextbox;
            }
        }
        
        public ResultIntellisenseTextbox1 ResultIntellisenseTextbox
        {
            get
            {
                if ((this.mResultIntellisenseTextbox == null))
                {
                    this.mResultIntellisenseTextbox = new ResultIntellisenseTextbox1(this);
                }
                return this.mResultIntellisenseTextbox;
            }
        }
        #endregion
        
        #region Fields
        private ScriptIntellisenseTextbox1 mScriptIntellisenseTextbox;
        
        private ResultIntellisenseTextbox1 mResultIntellisenseTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScriptIntellisenseTextbox1 : WpfComboBox
    {
        
        public ScriptIntellisenseTextbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Cmdtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultIntellisenseTextbox1 : WpfComboBox
    {
        
        public ResultIntellisenseTextbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SharepointMoveFile : WpfCustom
    {
        
        public SharepointMoveFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharePointMoveFileDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SharePoint Copy File(SharePointMoveFileDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeView8 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView8(this);
                }
                return this.mLargeView;
            }
        }
        
        public SmallView4 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView4(this);
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeView8 mLargeView;
        
        private SmallView4 mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView8 : WpfCustom
    {
        
        public LargeView8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public Server Server
        {
            get
            {
                if ((this.mServer == null))
                {
                    this.mServer = new Server(this);
                }
                return this.mServer;
            }
        }
        
        public FromDirectoryComboBox FromDirectoryComboBox
        {
            get
            {
                if ((this.mFromDirectoryComboBox == null))
                {
                    this.mFromDirectoryComboBox = new FromDirectoryComboBox(this);
                }
                return this.mFromDirectoryComboBox;
            }
        }
        
        public PathDirectoryComboBox PathDirectoryComboBox
        {
            get
            {
                if ((this.mPathDirectoryComboBox == null))
                {
                    this.mPathDirectoryComboBox = new PathDirectoryComboBox(this);
                }
                return this.mPathDirectoryComboBox;
            }
        }
        
        public ResultComboBox13 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox13(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorPane1 OnErrorPane
        {
            get
            {
                if ((this.mOnErrorPane == null))
                {
                    this.mOnErrorPane = new OnErrorPane1(this);
                }
                return this.mOnErrorPane;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mEditSourceButton;
        
        private Server mServer;
        
        private FromDirectoryComboBox mFromDirectoryComboBox;
        
        private PathDirectoryComboBox mPathDirectoryComboBox;
        
        private ResultComboBox13 mResultComboBox;
        
        private OnErrorPane1 mOnErrorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Server : WpfComboBox
    {
        
        public Server(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NewSharePointSource
        {
            get
            {
                if ((this.mNewSharePointSource == null))
                {
                    this.mNewSharePointSource = new WpfListItem(this);
                    #region Search Criteria
                    this.mNewSharePointSource.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":null,""AuthenticationType"":""Windows"",""UserName"":null,""Password"":null,""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""77fe880c-baa0-4f69-ad3c-94439293c611"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""New Sharepoint Server Source..."",""IsValid"":false,""Errors"":null,""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":null}";
                    this.mNewSharePointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharePointSource;
            }
        }
        
        public WpfListItem SharepointTestServer
        {
            get
            {
                if ((this.mSharepointTestServer == null))
                {
                    this.mSharepointTestServer = new WpfListItem(this);
                    #region Search Criteria
                    this.mSharepointTestServer.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":""http://rsaklfsvrsharep/"",""AuthenticationType"":""Windows"",""UserName"":"""",""Password"":"""",""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""SharePoint Test Server"",""IsValid"":false,""Errors"":[],""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":{""DateTimeStamp"":""2015-07-07T09:49:43.2102319+02:00"",""Reason"":""Save"",""User"":""Unknown"",""VersionNumber"":""1"",""ResourceId"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""VersionId"":""6d47f370-c0d3-4b96-89d7-52090a38331a""}}";
                    this.mSharepointTestServer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointTestServer;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNewSharePointSource;
        
        private WpfListItem mSharepointTestServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FromDirectoryComboBox : WpfComboBox
    {
        
        public FromDirectoryComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directorytxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PathDirectoryComboBox : WpfComboBox
    {
        
        public PathDirectoryComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directorytxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox13 : WpfComboBox
    {
        
        public ResultComboBox13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorPane1 : WpfCustom
    {
        
        public OnErrorPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup17 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup17(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup17 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup17 : WpfGroup
    {
        
        public OnErrorGroup17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorVariableIntellisenseCombobox OnErrorVariableIntellisenseCombobox
        {
            get
            {
                if ((this.mOnErrorVariableIntellisenseCombobox == null))
                {
                    this.mOnErrorVariableIntellisenseCombobox = new OnErrorVariableIntellisenseCombobox(this);
                }
                return this.mOnErrorVariableIntellisenseCombobox;
            }
        }
        
        public OnErrorServiceIntellisenseCombobox OnErrorServiceIntellisenseCombobox
        {
            get
            {
                if ((this.mOnErrorServiceIntellisenseCombobox == null))
                {
                    this.mOnErrorServiceIntellisenseCombobox = new OnErrorServiceIntellisenseCombobox(this);
                }
                return this.mOnErrorServiceIntellisenseCombobox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckbox
        {
            get
            {
                if ((this.mEndthisworkflowCheckbox == null))
                {
                    this.mEndthisworkflowCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorVariableIntellisenseCombobox mOnErrorVariableIntellisenseCombobox;
        
        private OnErrorServiceIntellisenseCombobox mOnErrorServiceIntellisenseCombobox;
        
        private WpfCheckBox mEndthisworkflowCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorVariableIntellisenseCombobox : WpfComboBox
    {
        
        public OnErrorVariableIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorServiceIntellisenseCombobox : WpfComboBox
    {
        
        public OnErrorServiceIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView4 : WpfCustom
    {
        
        public SmallView4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public Server1 Server
        {
            get
            {
                if ((this.mServer == null))
                {
                    this.mServer = new Server1(this);
                }
                return this.mServer;
            }
        }
        
        public FromDirectoryComboBox1 FromDirectoryComboBox
        {
            get
            {
                if ((this.mFromDirectoryComboBox == null))
                {
                    this.mFromDirectoryComboBox = new FromDirectoryComboBox1(this);
                }
                return this.mFromDirectoryComboBox;
            }
        }
        
        public PathDirectoryComboBox1 PathDirectoryComboBox
        {
            get
            {
                if ((this.mPathDirectoryComboBox == null))
                {
                    this.mPathDirectoryComboBox = new PathDirectoryComboBox1(this);
                }
                return this.mPathDirectoryComboBox;
            }
        }
        
        public ResultComboBox14 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox14(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mEditSourceButton;
        
        private Server1 mServer;
        
        private FromDirectoryComboBox1 mFromDirectoryComboBox;
        
        private PathDirectoryComboBox1 mPathDirectoryComboBox;
        
        private ResultComboBox14 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Server1 : WpfComboBox
    {
        
        public Server1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NewSharePointSource
        {
            get
            {
                if ((this.mNewSharePointSource == null))
                {
                    this.mNewSharePointSource = new WpfListItem(this);
                    #region Search Criteria
                    this.mNewSharePointSource.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":null,""AuthenticationType"":""Windows"",""UserName"":null,""Password"":null,""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""77fe880c-baa0-4f69-ad3c-94439293c611"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""New Sharepoint Server Source..."",""IsValid"":false,""Errors"":null,""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":null}";
                    this.mNewSharePointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharePointSource;
            }
        }
        
        public WpfListItem SharepointTestServer
        {
            get
            {
                if ((this.mSharepointTestServer == null))
                {
                    this.mSharepointTestServer = new WpfListItem(this);
                    #region Search Criteria
                    this.mSharepointTestServer.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":""http://rsaklfsvrsharep/"",""AuthenticationType"":""Windows"",""UserName"":"""",""Password"":"""",""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""SharePoint Test Server"",""IsValid"":false,""Errors"":[],""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":{""DateTimeStamp"":""2015-07-07T09:49:43.2102319+02:00"",""Reason"":""Save"",""User"":""Unknown"",""VersionNumber"":""1"",""ResourceId"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""VersionId"":""6d47f370-c0d3-4b96-89d7-52090a38331a""}}";
                    this.mSharepointTestServer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointTestServer;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNewSharePointSource;
        
        private WpfListItem mSharepointTestServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FromDirectoryComboBox1 : WpfComboBox
    {
        
        public FromDirectoryComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directorytxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PathDirectoryComboBox1 : WpfComboBox
    {
        
        public PathDirectoryComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directorytxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox14 : WpfComboBox
    {
        
        public ResultComboBox14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SharepointCreateListItem : WpfCustom
    {
        
        public SharepointCreateListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListCreateDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Create List Item(SharepointListCreateDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeView9 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView9(this);
                }
                return this.mLargeView;
            }
        }
        
        public SmallView5 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView5(this);
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeView9 mLargeView;
        
        private SmallView5 mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView9 : WpfCustom
    {
        
        public LargeView9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox List
        {
            get
            {
                if ((this.mList == null))
                {
                    this.mList = new WpfComboBox(this);
                    #region Search Criteria
                    this.mList.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__TableName_AutoID";
                    this.mList.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mList;
            }
        }
        
        public Server2 Server
        {
            get
            {
                if ((this.mServer == null))
                {
                    this.mServer = new Server2(this);
                }
                return this.mServer;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public MethodList MethodList
        {
            get
            {
                if ((this.mMethodList == null))
                {
                    this.mMethodList = new MethodList(this);
                }
                return this.mMethodList;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__RefreshTablesCommand_AutoID";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        
        public DataGridTable DataGridTable
        {
            get
            {
                if ((this.mDataGridTable == null))
                {
                    this.mDataGridTable = new DataGridTable(this);
                }
                return this.mDataGridTable;
            }
        }
        
        public OnErrorPane2 OnErrorPane
        {
            get
            {
                if ((this.mOnErrorPane == null))
                {
                    this.mOnErrorPane = new OnErrorPane2(this);
                }
                return this.mOnErrorPane;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mList;
        
        private Server2 mServer;
        
        private WpfButton mEditSourceButton;
        
        private MethodList mMethodList;
        
        private WpfButton mRefreshButton;
        
        private WpfCustom mSpinner;
        
        private DataGridTable mDataGridTable;
        
        private OnErrorPane2 mOnErrorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Server2 : WpfComboBox
    {
        
        public Server2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NewSharePointSource
        {
            get
            {
                if ((this.mNewSharePointSource == null))
                {
                    this.mNewSharePointSource = new WpfListItem(this);
                    #region Search Criteria
                    this.mNewSharePointSource.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":null,""AuthenticationType"":""Windows"",""UserName"":null,""Password"":null,""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""77fe880c-baa0-4f69-ad3c-94439293c611"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""New Sharepoint Server Source..."",""IsValid"":false,""Errors"":null,""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":null}";
                    this.mNewSharePointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharePointSource;
            }
        }
        
        public WpfListItem SharepointTestServer
        {
            get
            {
                if ((this.mSharepointTestServer == null))
                {
                    this.mSharepointTestServer = new WpfListItem(this);
                    #region Search Criteria
                    this.mSharepointTestServer.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":""http://rsaklfsvrsharep/"",""AuthenticationType"":""Windows"",""UserName"":"""",""Password"":"""",""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""SharePoint Test Server"",""IsValid"":false,""Errors"":[],""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":{""DateTimeStamp"":""2015-07-07T09:49:43.2102319+02:00"",""Reason"":""Save"",""User"":""Unknown"",""VersionNumber"":""1"",""ResourceId"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""VersionId"":""6d47f370-c0d3-4b96-89d7-52090a38331a""}}";
                    this.mSharepointTestServer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointTestServer;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNewSharePointSource;
        
        private WpfListItem mSharepointTestServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MethodList : WpfComboBox
    {
        
        public MethodList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__TableName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIAcceptanceTesting_CrListItem
        {
            get
            {
                if ((this.mUIAcceptanceTesting_CrListItem == null))
                {
                    this.mUIAcceptanceTesting_CrListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAcceptanceTesting_CrListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "AcceptanceTesting_Create";
                    this.mUIAcceptanceTesting_CrListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIAcceptanceTesting_CrListItem;
            }
        }
        
        public WpfListItem UIAppdataListItem
        {
            get
            {
                if ((this.mUIAppdataListItem == null))
                {
                    this.mUIAppdataListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAppdataListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "appdata";
                    this.mUIAppdataListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIAppdataListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIAcceptanceTesting_CrListItem;
        
        private WpfListItem mUIAppdataListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGridTable : WpfTable
    {
        
        public DataGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ContentTypeRow ContentTypeRow
        {
            get
            {
                if ((this.mContentTypeRow == null))
                {
                    this.mContentTypeRow = new ContentTypeRow(this);
                }
                return this.mContentTypeRow;
            }
        }
        
        public TitleRow TitleRow
        {
            get
            {
                if ((this.mTitleRow == null))
                {
                    this.mTitleRow = new TitleRow(this);
                }
                return this.mTitleRow;
            }
        }
        
        public AttachmentsRow AttachmentsRow
        {
            get
            {
                if ((this.mAttachmentsRow == null))
                {
                    this.mAttachmentsRow = new AttachmentsRow(this);
                }
                return this.mAttachmentsRow;
            }
        }
        #endregion
        
        #region Fields
        private ContentTypeRow mContentTypeRow;
        
        private TitleRow mTitleRow;
        
        private AttachmentsRow mAttachmentsRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ContentTypeRow : WpfRow
    {
        
        public ContentTypeRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = "Content Type";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemContentTypeCell ItemContentTypeCell
        {
            get
            {
                if ((this.mItemContentTypeCell == null))
                {
                    this.mItemContentTypeCell = new ItemContentTypeCell(this);
                }
                return this.mItemContentTypeCell;
            }
        }
        #endregion
        
        #region Fields
        private ItemContentTypeCell mItemContentTypeCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemContentTypeCell : WpfCell
    {
        
        public ItemContentTypeCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "To Field";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText ContentTypeText
        {
            get
            {
                if ((this.mContentTypeText == null))
                {
                    this.mContentTypeText = new WpfText(this);
                    #region Search Criteria
                    this.mContentTypeText.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI__Row0_OutputColumnName_AutoID";
                    this.mContentTypeText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mContentTypeText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mContentTypeText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TitleRow : WpfRow
    {
        
        public TitleRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = "Title";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TitleColumnCell TitleColumnCell
        {
            get
            {
                if ((this.mTitleColumnCell == null))
                {
                    this.mTitleColumnCell = new TitleColumnCell(this);
                }
                return this.mTitleColumnCell;
            }
        }
        #endregion
        
        #region Fields
        private TitleColumnCell mTitleColumnCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TitleColumnCell : WpfCell
    {
        
        public TitleColumnCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "To Field";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TitleText
        {
            get
            {
                if ((this.mTitleText == null))
                {
                    this.mTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mTitleText.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI__Row0_OutputColumnName_AutoID";
                    this.mTitleText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTitleText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTitleText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AttachmentsRow : WpfRow
    {
        
        public AttachmentsRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = "Attachments";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemAttachmentsCell ItemAttachmentsCell
        {
            get
            {
                if ((this.mItemAttachmentsCell == null))
                {
                    this.mItemAttachmentsCell = new ItemAttachmentsCell(this);
                }
                return this.mItemAttachmentsCell;
            }
        }
        #endregion
        
        #region Fields
        private ItemAttachmentsCell mItemAttachmentsCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemAttachmentsCell : WpfCell
    {
        
        public ItemAttachmentsCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "To Field";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText AttachmentsText
        {
            get
            {
                if ((this.mAttachmentsText == null))
                {
                    this.mAttachmentsText = new WpfText(this);
                    #region Search Criteria
                    this.mAttachmentsText.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI__Row0_OutputColumnName_AutoID";
                    this.mAttachmentsText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAttachmentsText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mAttachmentsText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorPane2 : WpfCustom
    {
        
        public OnErrorPane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup18 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup18(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup18 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup18 : WpfGroup
    {
        
        public OnErrorGroup18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorVariableIntellisenseCombobox1 OnErrorVariableIntellisenseCombobox
        {
            get
            {
                if ((this.mOnErrorVariableIntellisenseCombobox == null))
                {
                    this.mOnErrorVariableIntellisenseCombobox = new OnErrorVariableIntellisenseCombobox1(this);
                }
                return this.mOnErrorVariableIntellisenseCombobox;
            }
        }
        
        public OnErrorServiceIntellisenseCombobox1 OnErrorServiceIntellisenseCombobox
        {
            get
            {
                if ((this.mOnErrorServiceIntellisenseCombobox == null))
                {
                    this.mOnErrorServiceIntellisenseCombobox = new OnErrorServiceIntellisenseCombobox1(this);
                }
                return this.mOnErrorServiceIntellisenseCombobox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckbox
        {
            get
            {
                if ((this.mEndthisworkflowCheckbox == null))
                {
                    this.mEndthisworkflowCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorVariableIntellisenseCombobox1 mOnErrorVariableIntellisenseCombobox;
        
        private OnErrorServiceIntellisenseCombobox1 mOnErrorServiceIntellisenseCombobox;
        
        private WpfCheckBox mEndthisworkflowCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorVariableIntellisenseCombobox1 : WpfComboBox
    {
        
        public OnErrorVariableIntellisenseCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorServiceIntellisenseCombobox1 : WpfComboBox
    {
        
        public OnErrorServiceIntellisenseCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView5 : WpfCustom
    {
        
        public SmallView5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox List
        {
            get
            {
                if ((this.mList == null))
                {
                    this.mList = new WpfComboBox(this);
                    #region Search Criteria
                    this.mList.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__TableName_AutoID";
                    this.mList.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mList;
            }
        }
        
        public Server3 Server
        {
            get
            {
                if ((this.mServer == null))
                {
                    this.mServer = new Server3(this);
                }
                return this.mServer;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public MethodList1 MethodList
        {
            get
            {
                if ((this.mMethodList == null))
                {
                    this.mMethodList = new MethodList1(this);
                }
                return this.mMethodList;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__RefreshTablesCommand_AutoID";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mList;
        
        private Server3 mServer;
        
        private WpfButton mEditSourceButton;
        
        private MethodList1 mMethodList;
        
        private WpfButton mRefreshButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Server3 : WpfComboBox
    {
        
        public Server3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NewSharePointSource
        {
            get
            {
                if ((this.mNewSharePointSource == null))
                {
                    this.mNewSharePointSource = new WpfListItem(this);
                    #region Search Criteria
                    this.mNewSharePointSource.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":null,""AuthenticationType"":""Windows"",""UserName"":null,""Password"":null,""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""77fe880c-baa0-4f69-ad3c-94439293c611"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""New Sharepoint Server Source..."",""IsValid"":false,""Errors"":null,""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":null}";
                    this.mNewSharePointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharePointSource;
            }
        }
        
        public WpfListItem SharepointTestServer
        {
            get
            {
                if ((this.mSharepointTestServer == null))
                {
                    this.mSharepointTestServer = new WpfListItem(this);
                    #region Search Criteria
                    this.mSharepointTestServer.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":""http://rsaklfsvrsharep/"",""AuthenticationType"":""Windows"",""UserName"":"""",""Password"":"""",""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""SharePoint Test Server"",""IsValid"":false,""Errors"":[],""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":{""DateTimeStamp"":""2015-07-07T09:49:43.2102319+02:00"",""Reason"":""Save"",""User"":""Unknown"",""VersionNumber"":""1"",""ResourceId"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""VersionId"":""6d47f370-c0d3-4b96-89d7-52090a38331a""}}";
                    this.mSharepointTestServer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointTestServer;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNewSharePointSource;
        
        private WpfListItem mSharepointTestServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MethodList1 : WpfComboBox
    {
        
        public MethodList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__TableName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIAcceptanceTesting_CrListItem
        {
            get
            {
                if ((this.mUIAcceptanceTesting_CrListItem == null))
                {
                    this.mUIAcceptanceTesting_CrListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAcceptanceTesting_CrListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "AcceptanceTesting_Create";
                    this.mUIAcceptanceTesting_CrListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIAcceptanceTesting_CrListItem;
            }
        }
        
        public WpfListItem UIAppdataListItem
        {
            get
            {
                if ((this.mUIAppdataListItem == null))
                {
                    this.mUIAppdataListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAppdataListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "appdata";
                    this.mUIAppdataListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIAppdataListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIAcceptanceTesting_CrListItem;
        
        private WpfListItem mUIAppdataListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SharepointCopyFile : WpfCustom
    {
        
        public SharepointCopyFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharePointCopyFileDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SharePoint Copy File(SharePointCopyFileDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeView10 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView10(this);
                }
                return this.mLargeView;
            }
        }
        
        public SmallView6 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView6(this);
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeView10 mLargeView;
        
        private SmallView6 mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView10 : WpfCustom
    {
        
        public LargeView10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public Server4 Server
        {
            get
            {
                if ((this.mServer == null))
                {
                    this.mServer = new Server4(this);
                }
                return this.mServer;
            }
        }
        
        public FromDirectoryComboBox2 FromDirectoryComboBox
        {
            get
            {
                if ((this.mFromDirectoryComboBox == null))
                {
                    this.mFromDirectoryComboBox = new FromDirectoryComboBox2(this);
                }
                return this.mFromDirectoryComboBox;
            }
        }
        
        public PathDirectoryComboBox2 PathDirectoryComboBox
        {
            get
            {
                if ((this.mPathDirectoryComboBox == null))
                {
                    this.mPathDirectoryComboBox = new PathDirectoryComboBox2(this);
                }
                return this.mPathDirectoryComboBox;
            }
        }
        
        public ResultComboBox15 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox15(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorPane3 OnErrorPane
        {
            get
            {
                if ((this.mOnErrorPane == null))
                {
                    this.mOnErrorPane = new OnErrorPane3(this);
                }
                return this.mOnErrorPane;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mEditSourceButton;
        
        private Server4 mServer;
        
        private FromDirectoryComboBox2 mFromDirectoryComboBox;
        
        private PathDirectoryComboBox2 mPathDirectoryComboBox;
        
        private ResultComboBox15 mResultComboBox;
        
        private OnErrorPane3 mOnErrorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Server4 : WpfComboBox
    {
        
        public Server4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NewSharePointSource
        {
            get
            {
                if ((this.mNewSharePointSource == null))
                {
                    this.mNewSharePointSource = new WpfListItem(this);
                    #region Search Criteria
                    this.mNewSharePointSource.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":null,""AuthenticationType"":""Windows"",""UserName"":null,""Password"":null,""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""77fe880c-baa0-4f69-ad3c-94439293c611"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""New Sharepoint Server Source..."",""IsValid"":false,""Errors"":null,""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":null}";
                    this.mNewSharePointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharePointSource;
            }
        }
        
        public WpfListItem SharepointTestServer
        {
            get
            {
                if ((this.mSharepointTestServer == null))
                {
                    this.mSharepointTestServer = new WpfListItem(this);
                    #region Search Criteria
                    this.mSharepointTestServer.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":""http://rsaklfsvrsharep/"",""AuthenticationType"":""Windows"",""UserName"":"""",""Password"":"""",""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""SharePoint Test Server"",""IsValid"":false,""Errors"":[],""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":{""DateTimeStamp"":""2015-07-07T09:49:43.2102319+02:00"",""Reason"":""Save"",""User"":""Unknown"",""VersionNumber"":""1"",""ResourceId"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""VersionId"":""6d47f370-c0d3-4b96-89d7-52090a38331a""}}";
                    this.mSharepointTestServer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointTestServer;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNewSharePointSource;
        
        private WpfListItem mSharepointTestServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FromDirectoryComboBox2 : WpfComboBox
    {
        
        public FromDirectoryComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directorytxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PathDirectoryComboBox2 : WpfComboBox
    {
        
        public PathDirectoryComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directorytxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox15 : WpfComboBox
    {
        
        public ResultComboBox15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorPane3 : WpfCustom
    {
        
        public OnErrorPane3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup19 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup19(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup19 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup19 : WpfGroup
    {
        
        public OnErrorGroup19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorVariableIntellisenseCombobox2 OnErrorVariableIntellisenseCombobox
        {
            get
            {
                if ((this.mOnErrorVariableIntellisenseCombobox == null))
                {
                    this.mOnErrorVariableIntellisenseCombobox = new OnErrorVariableIntellisenseCombobox2(this);
                }
                return this.mOnErrorVariableIntellisenseCombobox;
            }
        }
        
        public OnErrorServiceIntellisenseCombobox2 OnErrorServiceIntellisenseCombobox
        {
            get
            {
                if ((this.mOnErrorServiceIntellisenseCombobox == null))
                {
                    this.mOnErrorServiceIntellisenseCombobox = new OnErrorServiceIntellisenseCombobox2(this);
                }
                return this.mOnErrorServiceIntellisenseCombobox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckbox
        {
            get
            {
                if ((this.mEndthisworkflowCheckbox == null))
                {
                    this.mEndthisworkflowCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorVariableIntellisenseCombobox2 mOnErrorVariableIntellisenseCombobox;
        
        private OnErrorServiceIntellisenseCombobox2 mOnErrorServiceIntellisenseCombobox;
        
        private WpfCheckBox mEndthisworkflowCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorVariableIntellisenseCombobox2 : WpfComboBox
    {
        
        public OnErrorVariableIntellisenseCombobox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorServiceIntellisenseCombobox2 : WpfComboBox
    {
        
        public OnErrorServiceIntellisenseCombobox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView6 : WpfCustom
    {
        
        public SmallView6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public Server5 Server
        {
            get
            {
                if ((this.mServer == null))
                {
                    this.mServer = new Server5(this);
                }
                return this.mServer;
            }
        }
        
        public FromDirectoryComboBox3 FromDirectoryComboBox
        {
            get
            {
                if ((this.mFromDirectoryComboBox == null))
                {
                    this.mFromDirectoryComboBox = new FromDirectoryComboBox3(this);
                }
                return this.mFromDirectoryComboBox;
            }
        }
        
        public PathDirectoryComboBox3 PathDirectoryComboBox
        {
            get
            {
                if ((this.mPathDirectoryComboBox == null))
                {
                    this.mPathDirectoryComboBox = new PathDirectoryComboBox3(this);
                }
                return this.mPathDirectoryComboBox;
            }
        }
        
        public ResultComboBox16 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox16(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mEditSourceButton;
        
        private Server5 mServer;
        
        private FromDirectoryComboBox3 mFromDirectoryComboBox;
        
        private PathDirectoryComboBox3 mPathDirectoryComboBox;
        
        private ResultComboBox16 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Server5 : WpfComboBox
    {
        
        public Server5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NewSharePointSource
        {
            get
            {
                if ((this.mNewSharePointSource == null))
                {
                    this.mNewSharePointSource = new WpfListItem(this);
                    #region Search Criteria
                    this.mNewSharePointSource.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":null,""AuthenticationType"":""Windows"",""UserName"":null,""Password"":null,""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""77fe880c-baa0-4f69-ad3c-94439293c611"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""New Sharepoint Server Source..."",""IsValid"":false,""Errors"":null,""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":null}";
                    this.mNewSharePointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharePointSource;
            }
        }
        
        public WpfListItem SharepointTestServer
        {
            get
            {
                if ((this.mSharepointTestServer == null))
                {
                    this.mSharepointTestServer = new WpfListItem(this);
                    #region Search Criteria
                    this.mSharepointTestServer.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":""http://rsaklfsvrsharep/"",""AuthenticationType"":""Windows"",""UserName"":"""",""Password"":"""",""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""SharePoint Test Server"",""IsValid"":false,""Errors"":[],""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":{""DateTimeStamp"":""2015-07-07T09:49:43.2102319+02:00"",""Reason"":""Save"",""User"":""Unknown"",""VersionNumber"":""1"",""ResourceId"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""VersionId"":""6d47f370-c0d3-4b96-89d7-52090a38331a""}}";
                    this.mSharepointTestServer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointTestServer;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNewSharePointSource;
        
        private WpfListItem mSharepointTestServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FromDirectoryComboBox3 : WpfComboBox
    {
        
        public FromDirectoryComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directorytxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PathDirectoryComboBox3 : WpfComboBox
    {
        
        public PathDirectoryComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directorytxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox16 : WpfComboBox
    {
        
        public ResultComboBox16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SharepointDeleteFile : WpfCustom
    {
        
        public SharepointDeleteFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListDeleteDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "SharepointListDeleteDesigner", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeView11 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView11(this);
                }
                return this.mLargeView;
            }
        }
        
        public SmallView7 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView7(this);
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeView11 mLargeView;
        
        private SmallView7 mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView11 : WpfCustom
    {
        
        public LargeView11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Server6 Server
        {
            get
            {
                if ((this.mServer == null))
                {
                    this.mServer = new Server6(this);
                }
                return this.mServer;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public MethodList2 MethodList
        {
            get
            {
                if ((this.mMethodList == null))
                {
                    this.mMethodList = new MethodList2(this);
                }
                return this.mMethodList;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__RefreshTablesCommand_AutoID";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        
        public OnErrorPane4 OnErrorPane
        {
            get
            {
                if ((this.mOnErrorPane == null))
                {
                    this.mOnErrorPane = new OnErrorPane4(this);
                }
                return this.mOnErrorPane;
            }
        }
        #endregion
        
        #region Fields
        private Server6 mServer;
        
        private WpfButton mEditSourceButton;
        
        private MethodList2 mMethodList;
        
        private WpfButton mRefreshButton;
        
        private WpfCustom mSpinner;
        
        private OnErrorPane4 mOnErrorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Server6 : WpfComboBox
    {
        
        public Server6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NewSharePointSource
        {
            get
            {
                if ((this.mNewSharePointSource == null))
                {
                    this.mNewSharePointSource = new WpfListItem(this);
                    #region Search Criteria
                    this.mNewSharePointSource.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":null,""AuthenticationType"":""Windows"",""UserName"":null,""Password"":null,""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""77fe880c-baa0-4f69-ad3c-94439293c611"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""New Sharepoint Server Source..."",""IsValid"":false,""Errors"":null,""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":null}";
                    this.mNewSharePointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharePointSource;
            }
        }
        
        public WpfListItem SharepointTestServer
        {
            get
            {
                if ((this.mSharepointTestServer == null))
                {
                    this.mSharepointTestServer = new WpfListItem(this);
                    #region Search Criteria
                    this.mSharepointTestServer.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":""http://rsaklfsvrsharep/"",""AuthenticationType"":""Windows"",""UserName"":"""",""Password"":"""",""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""SharePoint Test Server"",""IsValid"":false,""Errors"":[],""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":{""DateTimeStamp"":""2015-07-07T09:49:43.2102319+02:00"",""Reason"":""Save"",""User"":""Unknown"",""VersionNumber"":""1"",""ResourceId"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""VersionId"":""6d47f370-c0d3-4b96-89d7-52090a38331a""}}";
                    this.mSharepointTestServer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointTestServer;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNewSharePointSource;
        
        private WpfListItem mSharepointTestServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MethodList2 : WpfComboBox
    {
        
        public MethodList2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__TableName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIAcceptanceTesting_CrListItem
        {
            get
            {
                if ((this.mUIAcceptanceTesting_CrListItem == null))
                {
                    this.mUIAcceptanceTesting_CrListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAcceptanceTesting_CrListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "AcceptanceTesting_Create";
                    this.mUIAcceptanceTesting_CrListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIAcceptanceTesting_CrListItem;
            }
        }
        
        public WpfListItem UIAppdataListItem
        {
            get
            {
                if ((this.mUIAppdataListItem == null))
                {
                    this.mUIAppdataListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAppdataListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "appdata";
                    this.mUIAppdataListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIAppdataListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIAcceptanceTesting_CrListItem;
        
        private WpfListItem mUIAppdataListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorPane4 : WpfCustom
    {
        
        public OnErrorPane4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup20 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup20(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup20 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup20 : WpfGroup
    {
        
        public OnErrorGroup20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorVariableIntellisenseCombobox3 OnErrorVariableIntellisenseCombobox
        {
            get
            {
                if ((this.mOnErrorVariableIntellisenseCombobox == null))
                {
                    this.mOnErrorVariableIntellisenseCombobox = new OnErrorVariableIntellisenseCombobox3(this);
                }
                return this.mOnErrorVariableIntellisenseCombobox;
            }
        }
        
        public OnErrorServiceIntellisenseCombobox3 OnErrorServiceIntellisenseCombobox
        {
            get
            {
                if ((this.mOnErrorServiceIntellisenseCombobox == null))
                {
                    this.mOnErrorServiceIntellisenseCombobox = new OnErrorServiceIntellisenseCombobox3(this);
                }
                return this.mOnErrorServiceIntellisenseCombobox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckbox
        {
            get
            {
                if ((this.mEndthisworkflowCheckbox == null))
                {
                    this.mEndthisworkflowCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorVariableIntellisenseCombobox3 mOnErrorVariableIntellisenseCombobox;
        
        private OnErrorServiceIntellisenseCombobox3 mOnErrorServiceIntellisenseCombobox;
        
        private WpfCheckBox mEndthisworkflowCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorVariableIntellisenseCombobox3 : WpfComboBox
    {
        
        public OnErrorVariableIntellisenseCombobox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorServiceIntellisenseCombobox3 : WpfComboBox
    {
        
        public OnErrorServiceIntellisenseCombobox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView7 : WpfCustom
    {
        
        public SmallView7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Server7 Server
        {
            get
            {
                if ((this.mServer == null))
                {
                    this.mServer = new Server7(this);
                }
                return this.mServer;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public MethodList3 MethodList
        {
            get
            {
                if ((this.mMethodList == null))
                {
                    this.mMethodList = new MethodList3(this);
                }
                return this.mMethodList;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__RefreshTablesCommand_AutoID";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        
        public LargeViewContent1 LargeViewContent
        {
            get
            {
                if ((this.mLargeViewContent == null))
                {
                    this.mLargeViewContent = new LargeViewContent1(this);
                }
                return this.mLargeViewContent;
            }
        }
        #endregion
        
        #region Fields
        private Server7 mServer;
        
        private WpfButton mEditSourceButton;
        
        private MethodList3 mMethodList;
        
        private WpfButton mRefreshButton;
        
        private WpfCustom mSpinner;
        
        private LargeViewContent1 mLargeViewContent;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Server7 : WpfComboBox
    {
        
        public Server7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NewSharePointSource
        {
            get
            {
                if ((this.mNewSharePointSource == null))
                {
                    this.mNewSharePointSource = new WpfListItem(this);
                    #region Search Criteria
                    this.mNewSharePointSource.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":null,""AuthenticationType"":""Windows"",""UserName"":null,""Password"":null,""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""77fe880c-baa0-4f69-ad3c-94439293c611"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""New Sharepoint Server Source..."",""IsValid"":false,""Errors"":null,""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":null}";
                    this.mNewSharePointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharePointSource;
            }
        }
        
        public WpfListItem SharepointTestServer
        {
            get
            {
                if ((this.mSharepointTestServer == null))
                {
                    this.mSharepointTestServer = new WpfListItem(this);
                    #region Search Criteria
                    this.mSharepointTestServer.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":""http://rsaklfsvrsharep/"",""AuthenticationType"":""Windows"",""UserName"":"""",""Password"":"""",""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""SharePoint Test Server"",""IsValid"":false,""Errors"":[],""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":{""DateTimeStamp"":""2015-07-07T09:49:43.2102319+02:00"",""Reason"":""Save"",""User"":""Unknown"",""VersionNumber"":""1"",""ResourceId"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""VersionId"":""6d47f370-c0d3-4b96-89d7-52090a38331a""}}";
                    this.mSharepointTestServer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointTestServer;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNewSharePointSource;
        
        private WpfListItem mSharepointTestServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MethodList3 : WpfComboBox
    {
        
        public MethodList3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__TableName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIAcceptanceTesting_CrListItem
        {
            get
            {
                if ((this.mUIAcceptanceTesting_CrListItem == null))
                {
                    this.mUIAcceptanceTesting_CrListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAcceptanceTesting_CrListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "AcceptanceTesting_Create";
                    this.mUIAcceptanceTesting_CrListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIAcceptanceTesting_CrListItem;
            }
        }
        
        public WpfListItem UIAppdataListItem
        {
            get
            {
                if ((this.mUIAppdataListItem == null))
                {
                    this.mUIAppdataListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAppdataListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "appdata";
                    this.mUIAppdataListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIAppdataListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIAcceptanceTesting_CrListItem;
        
        private WpfListItem mUIAppdataListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContent1 : WpfCustom
    {
        
        public LargeViewContent1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGridTable1 DataGridTable
        {
            get
            {
                if ((this.mDataGridTable == null))
                {
                    this.mDataGridTable = new DataGridTable1(this);
                }
                return this.mDataGridTable;
            }
        }
        #endregion
        
        #region Fields
        private DataGridTable1 mDataGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGridTable1 : WpfTable
    {
        
        public DataGridTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemRow12 ItemRow1
        {
            get
            {
                if ((this.mItemRow1 == null))
                {
                    this.mItemRow1 = new ItemRow12(this);
                }
                return this.mItemRow1;
            }
        }
        #endregion
        
        #region Fields
        private ItemRow12 mItemRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemRow12 : WpfRow
    {
        
        public ItemRow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileNameCell FileNameCell
        {
            get
            {
                if ((this.mFileNameCell == null))
                {
                    this.mFileNameCell = new FileNameCell(this);
                }
                return this.mFileNameCell;
            }
        }
        
        public MatchTypeCell MatchTypeCell
        {
            get
            {
                if ((this.mMatchTypeCell == null))
                {
                    this.mMatchTypeCell = new MatchTypeCell(this);
                }
                return this.mMatchTypeCell;
            }
        }
        
        public ValueCell4 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell4(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private FileNameCell mFileNameCell;
        
        private MatchTypeCell mMatchTypeCell;
        
        private ValueCell4 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileNameCell : WpfCell
    {
        
        public FileNameCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Field Name";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox FieldComboBox
        {
            get
            {
                if ((this.mFieldComboBox == null))
                {
                    this.mFieldComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mFieldComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchType_AutoID";
                    this.mFieldComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFieldComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mFieldComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MatchTypeCell : WpfCell
    {
        
        public MatchTypeCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Match Type";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox MatchTypeComboBox
        {
            get
            {
                if ((this.mMatchTypeComboBox == null))
                {
                    this.mMatchTypeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mMatchTypeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchType_AutoID";
                    this.mMatchTypeComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMatchTypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mMatchTypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell4 : WpfCell
    {
        
        public ValueCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueComboBox4 ValueComboBox
        {
            get
            {
                if ((this.mValueComboBox == null))
                {
                    this.mValueComboBox = new ValueComboBox4(this);
                }
                return this.mValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ValueComboBox4 mValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueComboBox4 : WpfComboBox
    {
        
        public ValueComboBox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchCriteria_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SharepointRead : WpfCustom
    {
        
        public SharepointRead(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListReadDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "SharepointListReadDesigner", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeView12 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView12(this);
                }
                return this.mLargeView;
            }
        }
        
        public SmallView8 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView8(this);
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeView12 mLargeView;
        
        private SmallView8 mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView12 : WpfCustom
    {
        
        public LargeView12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Server8 Server
        {
            get
            {
                if ((this.mServer == null))
                {
                    this.mServer = new Server8(this);
                }
                return this.mServer;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public MethodList4 MethodList
        {
            get
            {
                if ((this.mMethodList == null))
                {
                    this.mMethodList = new MethodList4(this);
                }
                return this.mMethodList;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__RefreshTablesCommand_AutoID";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        
        public DataGridTableVariables DataGridTableVariables
        {
            get
            {
                if ((this.mDataGridTableVariables == null))
                {
                    this.mDataGridTableVariables = new DataGridTableVariables(this);
                }
                return this.mDataGridTableVariables;
            }
        }
        
        public DataGridTableValues DataGridTableValues
        {
            get
            {
                if ((this.mDataGridTableValues == null))
                {
                    this.mDataGridTableValues = new DataGridTableValues(this);
                }
                return this.mDataGridTableValues;
            }
        }
        
        public OnErrorPane5 OnErrorPane
        {
            get
            {
                if ((this.mOnErrorPane == null))
                {
                    this.mOnErrorPane = new OnErrorPane5(this);
                }
                return this.mOnErrorPane;
            }
        }
        #endregion
        
        #region Fields
        private Server8 mServer;
        
        private WpfButton mEditSourceButton;
        
        private MethodList4 mMethodList;
        
        private WpfButton mRefreshButton;
        
        private WpfCustom mSpinner;
        
        private DataGridTableVariables mDataGridTableVariables;
        
        private DataGridTableValues mDataGridTableValues;
        
        private OnErrorPane5 mOnErrorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Server8 : WpfComboBox
    {
        
        public Server8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NewSharePointSource
        {
            get
            {
                if ((this.mNewSharePointSource == null))
                {
                    this.mNewSharePointSource = new WpfListItem(this);
                    #region Search Criteria
                    this.mNewSharePointSource.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":null,""AuthenticationType"":""Windows"",""UserName"":null,""Password"":null,""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""77fe880c-baa0-4f69-ad3c-94439293c611"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""New Sharepoint Server Source..."",""IsValid"":false,""Errors"":null,""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":null}";
                    this.mNewSharePointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharePointSource;
            }
        }
        
        public WpfListItem SharepointTestServer
        {
            get
            {
                if ((this.mSharepointTestServer == null))
                {
                    this.mSharepointTestServer = new WpfListItem(this);
                    #region Search Criteria
                    this.mSharepointTestServer.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":""http://rsaklfsvrsharep/"",""AuthenticationType"":""Windows"",""UserName"":"""",""Password"":"""",""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""SharePoint Test Server"",""IsValid"":false,""Errors"":[],""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":{""DateTimeStamp"":""2015-07-07T09:49:43.2102319+02:00"",""Reason"":""Save"",""User"":""Unknown"",""VersionNumber"":""1"",""ResourceId"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""VersionId"":""6d47f370-c0d3-4b96-89d7-52090a38331a""}}";
                    this.mSharepointTestServer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointTestServer;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNewSharePointSource;
        
        private WpfListItem mSharepointTestServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MethodList4 : WpfComboBox
    {
        
        public MethodList4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__TableName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIAcceptanceTesting_CrListItem
        {
            get
            {
                if ((this.mUIAcceptanceTesting_CrListItem == null))
                {
                    this.mUIAcceptanceTesting_CrListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAcceptanceTesting_CrListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "AcceptanceTesting_Create";
                    this.mUIAcceptanceTesting_CrListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIAcceptanceTesting_CrListItem;
            }
        }
        
        public WpfListItem UIAppdataListItem
        {
            get
            {
                if ((this.mUIAppdataListItem == null))
                {
                    this.mUIAppdataListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAppdataListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "appdata";
                    this.mUIAppdataListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIAppdataListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIAcceptanceTesting_CrListItem;
        
        private WpfListItem mUIAppdataListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGridTableVariables : WpfTable
    {
        
        public DataGridTableVariables(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemRow13 ItemRow1
        {
            get
            {
                if ((this.mItemRow1 == null))
                {
                    this.mItemRow1 = new ItemRow13(this);
                }
                return this.mItemRow1;
            }
        }
        #endregion
        
        #region Fields
        private ItemRow13 mItemRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemRow13 : WpfRow
    {
        
        public ItemRow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileNameCell1 FileNameCell
        {
            get
            {
                if ((this.mFileNameCell == null))
                {
                    this.mFileNameCell = new FileNameCell1(this);
                }
                return this.mFileNameCell;
            }
        }
        
        public MatchTypeCell1 MatchTypeCell
        {
            get
            {
                if ((this.mMatchTypeCell == null))
                {
                    this.mMatchTypeCell = new MatchTypeCell1(this);
                }
                return this.mMatchTypeCell;
            }
        }
        
        public ValueCell5 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell5(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private FileNameCell1 mFileNameCell;
        
        private MatchTypeCell1 mMatchTypeCell;
        
        private ValueCell5 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileNameCell1 : WpfCell
    {
        
        public FileNameCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Field Name";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox FieldComboBox
        {
            get
            {
                if ((this.mFieldComboBox == null))
                {
                    this.mFieldComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mFieldComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchType_AutoID";
                    this.mFieldComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFieldComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mFieldComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MatchTypeCell1 : WpfCell
    {
        
        public MatchTypeCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Match Type";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox MatchTypeComboBox
        {
            get
            {
                if ((this.mMatchTypeComboBox == null))
                {
                    this.mMatchTypeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mMatchTypeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchType_AutoID";
                    this.mMatchTypeComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMatchTypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mMatchTypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell5 : WpfCell
    {
        
        public ValueCell5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueComboBox5 ValueComboBox
        {
            get
            {
                if ((this.mValueComboBox == null))
                {
                    this.mValueComboBox = new ValueComboBox5(this);
                }
                return this.mValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ValueComboBox5 mValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueComboBox5 : WpfComboBox
    {
        
        public ValueComboBox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchCriteria_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGridTableValues : WpfTable
    {
        
        public DataGridTableValues(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemRow14 ItemRow1
        {
            get
            {
                if ((this.mItemRow1 == null))
                {
                    this.mItemRow1 = new ItemRow14(this);
                }
                return this.mItemRow1;
            }
        }
        #endregion
        
        #region Fields
        private ItemRow14 mItemRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemRow14 : WpfRow
    {
        
        public ItemRow14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileNameCell2 FileNameCell
        {
            get
            {
                if ((this.mFileNameCell == null))
                {
                    this.mFileNameCell = new FileNameCell2(this);
                }
                return this.mFileNameCell;
            }
        }
        
        public MatchTypeCell2 MatchTypeCell
        {
            get
            {
                if ((this.mMatchTypeCell == null))
                {
                    this.mMatchTypeCell = new MatchTypeCell2(this);
                }
                return this.mMatchTypeCell;
            }
        }
        
        public ValueCell6 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell6(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private FileNameCell2 mFileNameCell;
        
        private MatchTypeCell2 mMatchTypeCell;
        
        private ValueCell6 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileNameCell2 : WpfCell
    {
        
        public FileNameCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Field Name";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox FieldComboBox
        {
            get
            {
                if ((this.mFieldComboBox == null))
                {
                    this.mFieldComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mFieldComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchType_AutoID";
                    this.mFieldComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFieldComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mFieldComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MatchTypeCell2 : WpfCell
    {
        
        public MatchTypeCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Match Type";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox MatchTypeComboBox
        {
            get
            {
                if ((this.mMatchTypeComboBox == null))
                {
                    this.mMatchTypeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mMatchTypeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchType_AutoID";
                    this.mMatchTypeComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMatchTypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mMatchTypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell6 : WpfCell
    {
        
        public ValueCell6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueComboBox6 ValueComboBox
        {
            get
            {
                if ((this.mValueComboBox == null))
                {
                    this.mValueComboBox = new ValueComboBox6(this);
                }
                return this.mValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ValueComboBox6 mValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueComboBox6 : WpfComboBox
    {
        
        public ValueComboBox6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchCriteria_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorPane5 : WpfCustom
    {
        
        public OnErrorPane5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup21 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup21(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup21 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup21 : WpfGroup
    {
        
        public OnErrorGroup21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorVariableIntellisenseCombobox4 OnErrorVariableIntellisenseCombobox
        {
            get
            {
                if ((this.mOnErrorVariableIntellisenseCombobox == null))
                {
                    this.mOnErrorVariableIntellisenseCombobox = new OnErrorVariableIntellisenseCombobox4(this);
                }
                return this.mOnErrorVariableIntellisenseCombobox;
            }
        }
        
        public OnErrorServiceIntellisenseCombobox4 OnErrorServiceIntellisenseCombobox
        {
            get
            {
                if ((this.mOnErrorServiceIntellisenseCombobox == null))
                {
                    this.mOnErrorServiceIntellisenseCombobox = new OnErrorServiceIntellisenseCombobox4(this);
                }
                return this.mOnErrorServiceIntellisenseCombobox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckbox
        {
            get
            {
                if ((this.mEndthisworkflowCheckbox == null))
                {
                    this.mEndthisworkflowCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorVariableIntellisenseCombobox4 mOnErrorVariableIntellisenseCombobox;
        
        private OnErrorServiceIntellisenseCombobox4 mOnErrorServiceIntellisenseCombobox;
        
        private WpfCheckBox mEndthisworkflowCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorVariableIntellisenseCombobox4 : WpfComboBox
    {
        
        public OnErrorVariableIntellisenseCombobox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorServiceIntellisenseCombobox4 : WpfComboBox
    {
        
        public OnErrorServiceIntellisenseCombobox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView8 : WpfCustom
    {
        
        public SmallView8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Server9 Server
        {
            get
            {
                if ((this.mServer == null))
                {
                    this.mServer = new Server9(this);
                }
                return this.mServer;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public MethodList5 MethodList
        {
            get
            {
                if ((this.mMethodList == null))
                {
                    this.mMethodList = new MethodList5(this);
                }
                return this.mMethodList;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__RefreshTablesCommand_AutoID";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private Server9 mServer;
        
        private WpfButton mEditSourceButton;
        
        private MethodList5 mMethodList;
        
        private WpfButton mRefreshButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Server9 : WpfComboBox
    {
        
        public Server9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NewSharePointSource
        {
            get
            {
                if ((this.mNewSharePointSource == null))
                {
                    this.mNewSharePointSource = new WpfListItem(this);
                    #region Search Criteria
                    this.mNewSharePointSource.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":null,""AuthenticationType"":""Windows"",""UserName"":null,""Password"":null,""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""77fe880c-baa0-4f69-ad3c-94439293c611"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""New Sharepoint Server Source..."",""IsValid"":false,""Errors"":null,""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":null}";
                    this.mNewSharePointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharePointSource;
            }
        }
        
        public WpfListItem SharepointTestServer
        {
            get
            {
                if ((this.mSharepointTestServer == null))
                {
                    this.mSharepointTestServer = new WpfListItem(this);
                    #region Search Criteria
                    this.mSharepointTestServer.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":""http://rsaklfsvrsharep/"",""AuthenticationType"":""Windows"",""UserName"":"""",""Password"":"""",""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""SharePoint Test Server"",""IsValid"":false,""Errors"":[],""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":{""DateTimeStamp"":""2015-07-07T09:49:43.2102319+02:00"",""Reason"":""Save"",""User"":""Unknown"",""VersionNumber"":""1"",""ResourceId"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""VersionId"":""6d47f370-c0d3-4b96-89d7-52090a38331a""}}";
                    this.mSharepointTestServer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointTestServer;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNewSharePointSource;
        
        private WpfListItem mSharepointTestServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MethodList5 : WpfComboBox
    {
        
        public MethodList5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__TableName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIAcceptanceTesting_CrListItem
        {
            get
            {
                if ((this.mUIAcceptanceTesting_CrListItem == null))
                {
                    this.mUIAcceptanceTesting_CrListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAcceptanceTesting_CrListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "AcceptanceTesting_Create";
                    this.mUIAcceptanceTesting_CrListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIAcceptanceTesting_CrListItem;
            }
        }
        
        public WpfListItem UIAppdataListItem
        {
            get
            {
                if ((this.mUIAppdataListItem == null))
                {
                    this.mUIAppdataListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAppdataListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "appdata";
                    this.mUIAppdataListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIAppdataListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIAcceptanceTesting_CrListItem;
        
        private WpfListItem mUIAppdataListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SharepointUpdate : WpfCustom
    {
        
        public SharepointUpdate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListUpdateDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "SharepointListUpdateDesigner", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeView13 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView13(this);
                }
                return this.mLargeView;
            }
        }
        
        public SmallView9 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView9(this);
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeView13 mLargeView;
        
        private SmallView9 mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView13 : WpfCustom
    {
        
        public LargeView13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Server10 Server
        {
            get
            {
                if ((this.mServer == null))
                {
                    this.mServer = new Server10(this);
                }
                return this.mServer;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public MethodList6 MethodList
        {
            get
            {
                if ((this.mMethodList == null))
                {
                    this.mMethodList = new MethodList6(this);
                }
                return this.mMethodList;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__RefreshTablesCommand_AutoID";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        
        public DataGridTableVariables1 DataGridTableVariables
        {
            get
            {
                if ((this.mDataGridTableVariables == null))
                {
                    this.mDataGridTableVariables = new DataGridTableVariables1(this);
                }
                return this.mDataGridTableVariables;
            }
        }
        
        public DataGridTableValues1 DataGridTableValues
        {
            get
            {
                if ((this.mDataGridTableValues == null))
                {
                    this.mDataGridTableValues = new DataGridTableValues1(this);
                }
                return this.mDataGridTableValues;
            }
        }
        
        public OnErrorPane6 OnErrorPane
        {
            get
            {
                if ((this.mOnErrorPane == null))
                {
                    this.mOnErrorPane = new OnErrorPane6(this);
                }
                return this.mOnErrorPane;
            }
        }
        #endregion
        
        #region Fields
        private Server10 mServer;
        
        private WpfButton mEditSourceButton;
        
        private MethodList6 mMethodList;
        
        private WpfButton mRefreshButton;
        
        private WpfCustom mSpinner;
        
        private DataGridTableVariables1 mDataGridTableVariables;
        
        private DataGridTableValues1 mDataGridTableValues;
        
        private OnErrorPane6 mOnErrorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Server10 : WpfComboBox
    {
        
        public Server10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NewSharePointSource
        {
            get
            {
                if ((this.mNewSharePointSource == null))
                {
                    this.mNewSharePointSource = new WpfListItem(this);
                    #region Search Criteria
                    this.mNewSharePointSource.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":null,""AuthenticationType"":""Windows"",""UserName"":null,""Password"":null,""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""77fe880c-baa0-4f69-ad3c-94439293c611"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""New Sharepoint Server Source..."",""IsValid"":false,""Errors"":null,""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":null}";
                    this.mNewSharePointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharePointSource;
            }
        }
        
        public WpfListItem SharepointTestServer
        {
            get
            {
                if ((this.mSharepointTestServer == null))
                {
                    this.mSharepointTestServer = new WpfListItem(this);
                    #region Search Criteria
                    this.mSharepointTestServer.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":""http://rsaklfsvrsharep/"",""AuthenticationType"":""Windows"",""UserName"":"""",""Password"":"""",""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""SharePoint Test Server"",""IsValid"":false,""Errors"":[],""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":{""DateTimeStamp"":""2015-07-07T09:49:43.2102319+02:00"",""Reason"":""Save"",""User"":""Unknown"",""VersionNumber"":""1"",""ResourceId"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""VersionId"":""6d47f370-c0d3-4b96-89d7-52090a38331a""}}";
                    this.mSharepointTestServer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointTestServer;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNewSharePointSource;
        
        private WpfListItem mSharepointTestServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MethodList6 : WpfComboBox
    {
        
        public MethodList6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__TableName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIAcceptanceTesting_CrListItem
        {
            get
            {
                if ((this.mUIAcceptanceTesting_CrListItem == null))
                {
                    this.mUIAcceptanceTesting_CrListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAcceptanceTesting_CrListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "AcceptanceTesting_Create";
                    this.mUIAcceptanceTesting_CrListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIAcceptanceTesting_CrListItem;
            }
        }
        
        public WpfListItem UIAppdataListItem
        {
            get
            {
                if ((this.mUIAppdataListItem == null))
                {
                    this.mUIAppdataListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAppdataListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "appdata";
                    this.mUIAppdataListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIAppdataListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIAcceptanceTesting_CrListItem;
        
        private WpfListItem mUIAppdataListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGridTableVariables1 : WpfTable
    {
        
        public DataGridTableVariables1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemRow15 ItemRow1
        {
            get
            {
                if ((this.mItemRow1 == null))
                {
                    this.mItemRow1 = new ItemRow15(this);
                }
                return this.mItemRow1;
            }
        }
        #endregion
        
        #region Fields
        private ItemRow15 mItemRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemRow15 : WpfRow
    {
        
        public ItemRow15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileNameCell3 FileNameCell
        {
            get
            {
                if ((this.mFileNameCell == null))
                {
                    this.mFileNameCell = new FileNameCell3(this);
                }
                return this.mFileNameCell;
            }
        }
        
        public MatchTypeCell3 MatchTypeCell
        {
            get
            {
                if ((this.mMatchTypeCell == null))
                {
                    this.mMatchTypeCell = new MatchTypeCell3(this);
                }
                return this.mMatchTypeCell;
            }
        }
        
        public ValueCell7 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell7(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private FileNameCell3 mFileNameCell;
        
        private MatchTypeCell3 mMatchTypeCell;
        
        private ValueCell7 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileNameCell3 : WpfCell
    {
        
        public FileNameCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Field Name";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox FieldComboBox
        {
            get
            {
                if ((this.mFieldComboBox == null))
                {
                    this.mFieldComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mFieldComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchType_AutoID";
                    this.mFieldComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFieldComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mFieldComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MatchTypeCell3 : WpfCell
    {
        
        public MatchTypeCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Match Type";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox MatchTypeComboBox
        {
            get
            {
                if ((this.mMatchTypeComboBox == null))
                {
                    this.mMatchTypeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mMatchTypeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchType_AutoID";
                    this.mMatchTypeComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMatchTypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mMatchTypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell7 : WpfCell
    {
        
        public ValueCell7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueComboBox7 ValueComboBox
        {
            get
            {
                if ((this.mValueComboBox == null))
                {
                    this.mValueComboBox = new ValueComboBox7(this);
                }
                return this.mValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ValueComboBox7 mValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueComboBox7 : WpfComboBox
    {
        
        public ValueComboBox7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchCriteria_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGridTableValues1 : WpfTable
    {
        
        public DataGridTableValues1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemRow16 ItemRow1
        {
            get
            {
                if ((this.mItemRow1 == null))
                {
                    this.mItemRow1 = new ItemRow16(this);
                }
                return this.mItemRow1;
            }
        }
        #endregion
        
        #region Fields
        private ItemRow16 mItemRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemRow16 : WpfRow
    {
        
        public ItemRow16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileNameCell4 FileNameCell
        {
            get
            {
                if ((this.mFileNameCell == null))
                {
                    this.mFileNameCell = new FileNameCell4(this);
                }
                return this.mFileNameCell;
            }
        }
        
        public MatchTypeCell4 MatchTypeCell
        {
            get
            {
                if ((this.mMatchTypeCell == null))
                {
                    this.mMatchTypeCell = new MatchTypeCell4(this);
                }
                return this.mMatchTypeCell;
            }
        }
        
        public ValueCell8 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell8(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private FileNameCell4 mFileNameCell;
        
        private MatchTypeCell4 mMatchTypeCell;
        
        private ValueCell8 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileNameCell4 : WpfCell
    {
        
        public FileNameCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Field Name";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox FieldComboBox
        {
            get
            {
                if ((this.mFieldComboBox == null))
                {
                    this.mFieldComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mFieldComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchType_AutoID";
                    this.mFieldComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFieldComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mFieldComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MatchTypeCell4 : WpfCell
    {
        
        public MatchTypeCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Match Type";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox MatchTypeComboBox
        {
            get
            {
                if ((this.mMatchTypeComboBox == null))
                {
                    this.mMatchTypeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mMatchTypeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchType_AutoID";
                    this.mMatchTypeComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMatchTypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mMatchTypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell8 : WpfCell
    {
        
        public ValueCell8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueComboBox8 ValueComboBox
        {
            get
            {
                if ((this.mValueComboBox == null))
                {
                    this.mValueComboBox = new ValueComboBox8(this);
                }
                return this.mValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ValueComboBox8 mValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueComboBox8 : WpfComboBox
    {
        
        public ValueComboBox8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_SearchCriteria_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorPane6 : WpfCustom
    {
        
        public OnErrorPane6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup22 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup22(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup22 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup22 : WpfGroup
    {
        
        public OnErrorGroup22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorVariableIntellisenseCombobox5 OnErrorVariableIntellisenseCombobox
        {
            get
            {
                if ((this.mOnErrorVariableIntellisenseCombobox == null))
                {
                    this.mOnErrorVariableIntellisenseCombobox = new OnErrorVariableIntellisenseCombobox5(this);
                }
                return this.mOnErrorVariableIntellisenseCombobox;
            }
        }
        
        public OnErrorServiceIntellisenseCombobox5 OnErrorServiceIntellisenseCombobox
        {
            get
            {
                if ((this.mOnErrorServiceIntellisenseCombobox == null))
                {
                    this.mOnErrorServiceIntellisenseCombobox = new OnErrorServiceIntellisenseCombobox5(this);
                }
                return this.mOnErrorServiceIntellisenseCombobox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckbox
        {
            get
            {
                if ((this.mEndthisworkflowCheckbox == null))
                {
                    this.mEndthisworkflowCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorVariableIntellisenseCombobox5 mOnErrorVariableIntellisenseCombobox;
        
        private OnErrorServiceIntellisenseCombobox5 mOnErrorServiceIntellisenseCombobox;
        
        private WpfCheckBox mEndthisworkflowCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorVariableIntellisenseCombobox5 : WpfComboBox
    {
        
        public OnErrorVariableIntellisenseCombobox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorServiceIntellisenseCombobox5 : WpfComboBox
    {
        
        public OnErrorServiceIntellisenseCombobox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView9 : WpfCustom
    {
        
        public SmallView9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Server11 Server
        {
            get
            {
                if ((this.mServer == null))
                {
                    this.mServer = new Server11(this);
                }
                return this.mServer;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public MethodList7 MethodList
        {
            get
            {
                if ((this.mMethodList == null))
                {
                    this.mMethodList = new MethodList7(this);
                }
                return this.mMethodList;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__RefreshTablesCommand_AutoID";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private Server11 mServer;
        
        private WpfButton mEditSourceButton;
        
        private MethodList7 mMethodList;
        
        private WpfButton mRefreshButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Server11 : WpfComboBox
    {
        
        public Server11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NewSharePointSource
        {
            get
            {
                if ((this.mNewSharePointSource == null))
                {
                    this.mNewSharePointSource = new WpfListItem(this);
                    #region Search Criteria
                    this.mNewSharePointSource.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":null,""AuthenticationType"":""Windows"",""UserName"":null,""Password"":null,""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""77fe880c-baa0-4f69-ad3c-94439293c611"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""New Sharepoint Server Source..."",""IsValid"":false,""Errors"":null,""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":null}";
                    this.mNewSharePointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharePointSource;
            }
        }
        
        public WpfListItem SharepointTestServer
        {
            get
            {
                if ((this.mSharepointTestServer == null))
                {
                    this.mSharepointTestServer = new WpfListItem(this);
                    #region Search Criteria
                    this.mSharepointTestServer.SearchProperties[WpfListItem.PropertyNames.Name] = @"{""Server"":""http://rsaklfsvrsharep/"",""AuthenticationType"":""Windows"",""UserName"":"""",""Password"":"""",""IsSource"":true,""IsService"":false,""IsFolder"":false,""IsReservedService"":false,""IsServer"":false,""IsResourceVersion"":false,""IsSharepointOnline"":false,""Version"":null,""ResourceID"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""ResourceType"":""SharepointServerSource"",""ResourceName"":""SharePoint Test Server"",""IsValid"":false,""Errors"":[],""ReloadActions"":false,""UserPermissions"":0,""VersionInfo"":{""DateTimeStamp"":""2015-07-07T09:49:43.2102319+02:00"",""Reason"":""Save"",""User"":""Unknown"",""VersionNumber"":""1"",""ResourceId"":""94d4b4ca-31e1-494d-886b-cd94224c9a8b"",""VersionId"":""6d47f370-c0d3-4b96-89d7-52090a38331a""}}";
                    this.mSharepointTestServer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointTestServer;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNewSharePointSource;
        
        private WpfListItem mSharepointTestServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MethodList7 : WpfComboBox
    {
        
        public MethodList7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__TableName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIAcceptanceTesting_CrListItem
        {
            get
            {
                if ((this.mUIAcceptanceTesting_CrListItem == null))
                {
                    this.mUIAcceptanceTesting_CrListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAcceptanceTesting_CrListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "AcceptanceTesting_Create";
                    this.mUIAcceptanceTesting_CrListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIAcceptanceTesting_CrListItem;
            }
        }
        
        public WpfListItem UIAppdataListItem
        {
            get
            {
                if ((this.mUIAppdataListItem == null))
                {
                    this.mUIAppdataListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAppdataListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "appdata";
                    this.mUIAppdataListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIAppdataListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIAcceptanceTesting_CrListItem;
        
        private WpfListItem mUIAppdataListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SharepointUploadFile : WpfCustom
    {
        
        public SharepointUploadFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.ClassName, "SharePointFileUploadDesigner", PropertyExpressionOperator.Contains));
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SharePoint Upload File(SharePointFileUploadDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeView14 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView14(this);
                }
                return this.mLargeView;
            }
        }
        
        public SmallView10 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView10(this);
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeView14 mLargeView;
        
        private SmallView10 mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView14 : WpfCustom
    {
        
        public LargeView14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SourceCombobox SourceCombobox
        {
            get
            {
                if ((this.mSourceCombobox == null))
                {
                    this.mSourceCombobox = new SourceCombobox(this);
                }
                return this.mSourceCombobox;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public LocalPathFromIntellisenseCombobox LocalPathFromIntellisenseCombobox
        {
            get
            {
                if ((this.mLocalPathFromIntellisenseCombobox == null))
                {
                    this.mLocalPathFromIntellisenseCombobox = new LocalPathFromIntellisenseCombobox(this);
                }
                return this.mLocalPathFromIntellisenseCombobox;
            }
        }
        
        public ServerPathToIntellisenseCombobox ServerPathToIntellisenseCombobox
        {
            get
            {
                if ((this.mServerPathToIntellisenseCombobox == null))
                {
                    this.mServerPathToIntellisenseCombobox = new ServerPathToIntellisenseCombobox(this);
                }
                return this.mServerPathToIntellisenseCombobox;
            }
        }
        
        public ResultsIntellisenseCombobox ResultsIntellisenseCombobox
        {
            get
            {
                if ((this.mResultsIntellisenseCombobox == null))
                {
                    this.mResultsIntellisenseCombobox = new ResultsIntellisenseCombobox(this);
                }
                return this.mResultsIntellisenseCombobox;
            }
        }
        
        public OnErrorPane7 OnErrorPane
        {
            get
            {
                if ((this.mOnErrorPane == null))
                {
                    this.mOnErrorPane = new OnErrorPane7(this);
                }
                return this.mOnErrorPane;
            }
        }
        #endregion
        
        #region Fields
        private SourceCombobox mSourceCombobox;
        
        private WpfButton mEditSourceButton;
        
        private LocalPathFromIntellisenseCombobox mLocalPathFromIntellisenseCombobox;
        
        private ServerPathToIntellisenseCombobox mServerPathToIntellisenseCombobox;
        
        private ResultsIntellisenseCombobox mResultsIntellisenseCombobox;
        
        private OnErrorPane7 mOnErrorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourceCombobox : WpfComboBox
    {
        
        public SourceCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NewSharePointSource
        {
            get
            {
                if ((this.mNewSharePointSource == null))
                {
                    this.mNewSharePointSource = new WpfListItem(this);
                    #region Search Criteria
                    this.mNewSharePointSource.SearchProperties.Add(new PropertyExpression(WpfListItem.PropertyNames.Name, "New Sharepoint Server Source...", PropertyExpressionOperator.Contains));
                    this.mNewSharePointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharePointSource;
            }
        }
        
        public WpfListItem SharepointTestServer
        {
            get
            {
                if ((this.mSharepointTestServer == null))
                {
                    this.mSharepointTestServer = new WpfListItem(this);
                    #region Search Criteria
                    this.mSharepointTestServer.SearchProperties.Add(new PropertyExpression(WpfListItem.PropertyNames.Name, "SharePoint Test Server", PropertyExpressionOperator.Contains));
                    this.mSharepointTestServer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointTestServer;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNewSharePointSource;
        
        private WpfListItem mSharepointTestServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LocalPathFromIntellisenseCombobox : WpfComboBox
    {
        
        public LocalPathFromIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directorytxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerPathToIntellisenseCombobox : WpfComboBox
    {
        
        public ServerPathToIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directorytxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultsIntellisenseCombobox : WpfComboBox
    {
        
        public ResultsIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorPane7 : WpfCustom
    {
        
        public OnErrorPane7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup23 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup23(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup23 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup23 : WpfGroup
    {
        
        public OnErrorGroup23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorVariableIntellisenseCombobox6 OnErrorVariableIntellisenseCombobox
        {
            get
            {
                if ((this.mOnErrorVariableIntellisenseCombobox == null))
                {
                    this.mOnErrorVariableIntellisenseCombobox = new OnErrorVariableIntellisenseCombobox6(this);
                }
                return this.mOnErrorVariableIntellisenseCombobox;
            }
        }
        
        public OnErrorServiceIntellisenseCombobox6 OnErrorServiceIntellisenseCombobox
        {
            get
            {
                if ((this.mOnErrorServiceIntellisenseCombobox == null))
                {
                    this.mOnErrorServiceIntellisenseCombobox = new OnErrorServiceIntellisenseCombobox6(this);
                }
                return this.mOnErrorServiceIntellisenseCombobox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckbox
        {
            get
            {
                if ((this.mEndthisworkflowCheckbox == null))
                {
                    this.mEndthisworkflowCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorVariableIntellisenseCombobox6 mOnErrorVariableIntellisenseCombobox;
        
        private OnErrorServiceIntellisenseCombobox6 mOnErrorServiceIntellisenseCombobox;
        
        private WpfCheckBox mEndthisworkflowCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorVariableIntellisenseCombobox6 : WpfComboBox
    {
        
        public OnErrorVariableIntellisenseCombobox6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorServiceIntellisenseCombobox6 : WpfComboBox
    {
        
        public OnErrorServiceIntellisenseCombobox6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView10 : WpfCustom
    {
        
        public SmallView10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SourceCombobox1 SourceCombobox
        {
            get
            {
                if ((this.mSourceCombobox == null))
                {
                    this.mSourceCombobox = new SourceCombobox1(this);
                }
                return this.mSourceCombobox;
            }
        }
        
        public LocalPathFromIntellisenseCombobox1 LocalPathFromIntellisenseCombobox
        {
            get
            {
                if ((this.mLocalPathFromIntellisenseCombobox == null))
                {
                    this.mLocalPathFromIntellisenseCombobox = new LocalPathFromIntellisenseCombobox1(this);
                }
                return this.mLocalPathFromIntellisenseCombobox;
            }
        }
        
        public ServerPathToIntellisenseCombobox1 ServerPathToIntellisenseCombobox
        {
            get
            {
                if ((this.mServerPathToIntellisenseCombobox == null))
                {
                    this.mServerPathToIntellisenseCombobox = new ServerPathToIntellisenseCombobox1(this);
                }
                return this.mServerPathToIntellisenseCombobox;
            }
        }
        
        public ResultsIntellisenseCombobox1 ResultsIntellisenseCombobox
        {
            get
            {
                if ((this.mResultsIntellisenseCombobox == null))
                {
                    this.mResultsIntellisenseCombobox = new ResultsIntellisenseCombobox1(this);
                }
                return this.mResultsIntellisenseCombobox;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        #endregion
        
        #region Fields
        private SourceCombobox1 mSourceCombobox;
        
        private LocalPathFromIntellisenseCombobox1 mLocalPathFromIntellisenseCombobox;
        
        private ServerPathToIntellisenseCombobox1 mServerPathToIntellisenseCombobox;
        
        private ResultsIntellisenseCombobox1 mResultsIntellisenseCombobox;
        
        private WpfButton mEditSourceButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourceCombobox1 : WpfComboBox
    {
        
        public SourceCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NewSharePointSource
        {
            get
            {
                if ((this.mNewSharePointSource == null))
                {
                    this.mNewSharePointSource = new WpfListItem(this);
                    #region Search Criteria
                    this.mNewSharePointSource.SearchProperties.Add(new PropertyExpression(WpfListItem.PropertyNames.Name, "New Sharepoint Server Source...", PropertyExpressionOperator.Contains));
                    this.mNewSharePointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharePointSource;
            }
        }
        
        public WpfListItem SharepointTestServer
        {
            get
            {
                if ((this.mSharepointTestServer == null))
                {
                    this.mSharepointTestServer = new WpfListItem(this);
                    #region Search Criteria
                    this.mSharepointTestServer.SearchProperties.Add(new PropertyExpression(WpfListItem.PropertyNames.Name, "SharePoint Test Server", PropertyExpressionOperator.Contains));
                    this.mSharepointTestServer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointTestServer;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNewSharePointSource;
        
        private WpfListItem mSharepointTestServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LocalPathFromIntellisenseCombobox1 : WpfComboBox
    {
        
        public LocalPathFromIntellisenseCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directorytxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerPathToIntellisenseCombobox1 : WpfComboBox
    {
        
        public ServerPathToIntellisenseCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directorytxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultsIntellisenseCombobox1 : WpfComboBox
    {
        
        public ResultsIntellisenseCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Calculate1 : WpfCustom
    {
        
        public Calculate1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CalculateDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Calculate(CalculateDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeView15 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView15(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public SmallView11 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView11(this);
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private LargeView15 mLargeView;
        
        private WpfButton mDoneButton;
        
        private SmallView11 mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView15 : WpfCustom
    {
        
        public LargeView15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox2 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox2(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox2 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox2 : WpfControl
    {
        
        public Listbox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Combobox";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__fxtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit FunctionTextbox
        {
            get
            {
                if ((this.mFunctionTextbox == null))
                {
                    this.mFunctionTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mFunctionTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mFunctionTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFunctionTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mFunctionTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView11 : WpfCustom
    {
        
        public SmallView11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox3 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox3(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox3 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox3 : WpfControl
    {
        
        public Listbox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Combobox";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__fxtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit FunctionTextbox
        {
            get
            {
                if ((this.mFunctionTextbox == null))
                {
                    this.mFunctionTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mFunctionTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mFunctionTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFunctionTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mFunctionTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AggregateCalculat : WpfCustom
    {
        
        public AggregateCalculat(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.AggregateCalculateDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Aggregate Calculate(AggregateCalculateDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallViewContentCustom12 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom12(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        
        public LargeViewContentCustom13 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom13(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private SmallViewContentCustom12 mSmallViewContentCustom;
        
        private LargeViewContentCustom13 mLargeViewContentCustom;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom12 : WpfCustom
    {
        
        public SmallViewContentCustom12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public fxComboBox fxComboBox
        {
            get
            {
                if ((this.mfxComboBox == null))
                {
                    this.mfxComboBox = new fxComboBox(this);
                }
                return this.mfxComboBox;
            }
        }
        
        public ResultComboBox17 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox17(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private fxComboBox mfxComboBox;
        
        private ResultComboBox17 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class fxComboBox : WpfComboBox
    {
        
        public fxComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__fxtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox17 : WpfComboBox
    {
        
        public ResultComboBox17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom13 : WpfCustom
    {
        
        public LargeViewContentCustom13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public fxComboBox1 fxComboBox
        {
            get
            {
                if ((this.mfxComboBox == null))
                {
                    this.mfxComboBox = new fxComboBox1(this);
                }
                return this.mfxComboBox;
            }
        }
        
        public ResultComboBox18 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox18(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom13 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom13(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private fxComboBox1 mfxComboBox;
        
        private ResultComboBox18 mResultComboBox;
        
        private OnErrorCustom13 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class fxComboBox1 : WpfComboBox
    {
        
        public fxComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__fxtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox18 : WpfComboBox
    {
        
        public ResultComboBox18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom13 : WpfCustom
    {
        
        public OnErrorCustom13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup24 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup24(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup24 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup24 : WpfGroup
    {
        
        public OnErrorGroup24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox11 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox11(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox11 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox11(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox11 mErrorVariableComboBox;
        
        private WebServiceComboBox11 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox11 : WpfComboBox
    {
        
        public ErrorVariableComboBox11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox11 : WpfComboBox
    {
        
        public WebServiceComboBox11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DateTime1 : WpfCustom
    {
        
        public DateTime1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DateTimeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Date and Time(DateTimeDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom14 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom14(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom13 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom13(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom14 mLargeViewContentCustom;
        
        private SmallViewContentCustom13 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom14 : WpfCustom
    {
        
        public LargeViewContentCustom14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputComboBox2 InputComboBox
        {
            get
            {
                if ((this.mInputComboBox == null))
                {
                    this.mInputComboBox = new InputComboBox2(this);
                }
                return this.mInputComboBox;
            }
        }
        
        public InputFormatComboBox InputFormatComboBox
        {
            get
            {
                if ((this.mInputFormatComboBox == null))
                {
                    this.mInputFormatComboBox = new InputFormatComboBox(this);
                }
                return this.mInputFormatComboBox;
            }
        }
        
        public WpfComboBox AddTimeTypeComboBox
        {
            get
            {
                if ((this.mAddTimeTypeComboBox == null))
                {
                    this.mAddTimeTypeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mAddTimeTypeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__AddTimeTypecbx_AutoID";
                    this.mAddTimeTypeComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddTimeTypeComboBox;
            }
        }
        
        public AddTimeAmountComboBox AddTimeAmountComboBox
        {
            get
            {
                if ((this.mAddTimeAmountComboBox == null))
                {
                    this.mAddTimeAmountComboBox = new AddTimeAmountComboBox(this);
                }
                return this.mAddTimeAmountComboBox;
            }
        }
        
        public OutputFormatComboBox OutputFormatComboBox
        {
            get
            {
                if ((this.mOutputFormatComboBox == null))
                {
                    this.mOutputFormatComboBox = new OutputFormatComboBox(this);
                }
                return this.mOutputFormatComboBox;
            }
        }
        
        public ResultComboBox19 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox19(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom14 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom14(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private InputComboBox2 mInputComboBox;
        
        private InputFormatComboBox mInputFormatComboBox;
        
        private WpfComboBox mAddTimeTypeComboBox;
        
        private AddTimeAmountComboBox mAddTimeAmountComboBox;
        
        private OutputFormatComboBox mOutputFormatComboBox;
        
        private ResultComboBox19 mResultComboBox;
        
        private OnErrorCustom14 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputComboBox2 : WpfComboBox
    {
        
        public InputComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Inputtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputFormatComboBox : WpfComboBox
    {
        
        public InputFormatComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__InputFormattxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddTimeAmountComboBox : WpfComboBox
    {
        
        public AddTimeAmountComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__AddTimeAmounttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputFormatComboBox : WpfComboBox
    {
        
        public OutputFormatComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__OutputFormattxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox19 : WpfComboBox
    {
        
        public ResultComboBox19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom14 : WpfCustom
    {
        
        public OnErrorCustom14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup25 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup25(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup25 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup25 : WpfGroup
    {
        
        public OnErrorGroup25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WebServiceComboBox12 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox12(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public ErrorVariableComboBox12 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox12(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WebServiceComboBox12 mWebServiceComboBox;
        
        private ErrorVariableComboBox12 mErrorVariableComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox12 : WpfComboBox
    {
        
        public WebServiceComboBox12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox12 : WpfComboBox
    {
        
        public ErrorVariableComboBox12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom13 : WpfCustom
    {
        
        public SmallViewContentCustom13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputComboBox3 InputComboBox
        {
            get
            {
                if ((this.mInputComboBox == null))
                {
                    this.mInputComboBox = new InputComboBox3(this);
                }
                return this.mInputComboBox;
            }
        }
        
        public InputFormatComboBox1 InputFormatComboBox
        {
            get
            {
                if ((this.mInputFormatComboBox == null))
                {
                    this.mInputFormatComboBox = new InputFormatComboBox1(this);
                }
                return this.mInputFormatComboBox;
            }
        }
        
        public AddTimeTypeComboBox AddTimeTypeComboBox
        {
            get
            {
                if ((this.mAddTimeTypeComboBox == null))
                {
                    this.mAddTimeTypeComboBox = new AddTimeTypeComboBox(this);
                }
                return this.mAddTimeTypeComboBox;
            }
        }
        
        public AddTimeAmountComboBox1 AddTimeAmountComboBox
        {
            get
            {
                if ((this.mAddTimeAmountComboBox == null))
                {
                    this.mAddTimeAmountComboBox = new AddTimeAmountComboBox1(this);
                }
                return this.mAddTimeAmountComboBox;
            }
        }
        
        public OutputFormatComboBox1 OutputFormatComboBox
        {
            get
            {
                if ((this.mOutputFormatComboBox == null))
                {
                    this.mOutputFormatComboBox = new OutputFormatComboBox1(this);
                }
                return this.mOutputFormatComboBox;
            }
        }
        
        public ResultComboBox20 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox20(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private InputComboBox3 mInputComboBox;
        
        private InputFormatComboBox1 mInputFormatComboBox;
        
        private AddTimeTypeComboBox mAddTimeTypeComboBox;
        
        private AddTimeAmountComboBox1 mAddTimeAmountComboBox;
        
        private OutputFormatComboBox1 mOutputFormatComboBox;
        
        private ResultComboBox20 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputComboBox3 : WpfComboBox
    {
        
        public InputComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Inputtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputFormatComboBox1 : WpfComboBox
    {
        
        public InputFormatComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__InputFormattxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddTimeTypeComboBox : WpfComboBox
    {
        
        public AddTimeTypeComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__AddTimeTypecbx_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem Months
        {
            get
            {
                if ((this.mMonths == null))
                {
                    this.mMonths = new WpfListItem(this);
                    #region Search Criteria
                    this.mMonths.SearchProperties[WpfListItem.PropertyNames.Name] = "Months";
                    this.mMonths.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMonths;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mMonths;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddTimeAmountComboBox1 : WpfComboBox
    {
        
        public AddTimeAmountComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__AddTimeAmounttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputFormatComboBox1 : WpfComboBox
    {
        
        public OutputFormatComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__OutputFormattxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox20 : WpfComboBox
    {
        
        public ResultComboBox20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DateTimeDifference1 : WpfCustom
    {
        
        public DateTimeDifference1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DateTimeDifferenceDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Date and Time Difference(DateTimeDifferenceDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom15 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom15(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom14 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom14(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom15 mLargeViewContentCustom;
        
        private SmallViewContentCustom14 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom15 : WpfCustom
    {
        
        public LargeViewContentCustom15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Input1ComboBox Input1ComboBox
        {
            get
            {
                if ((this.mInput1ComboBox == null))
                {
                    this.mInput1ComboBox = new Input1ComboBox(this);
                }
                return this.mInput1ComboBox;
            }
        }
        
        public Input2ComboBox Input2ComboBox
        {
            get
            {
                if ((this.mInput2ComboBox == null))
                {
                    this.mInput2ComboBox = new Input2ComboBox(this);
                }
                return this.mInput2ComboBox;
            }
        }
        
        public InputFormatComboBox2 InputFormatComboBox
        {
            get
            {
                if ((this.mInputFormatComboBox == null))
                {
                    this.mInputFormatComboBox = new InputFormatComboBox2(this);
                }
                return this.mInputFormatComboBox;
            }
        }
        
        public WpfComboBox OutputInComboBox
        {
            get
            {
                if ((this.mOutputInComboBox == null))
                {
                    this.mOutputInComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mOutputInComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__OutputIncbx_AutoID";
                    this.mOutputInComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputInComboBox;
            }
        }
        
        public ResultComboBox21 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox21(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom15 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom15(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private Input1ComboBox mInput1ComboBox;
        
        private Input2ComboBox mInput2ComboBox;
        
        private InputFormatComboBox2 mInputFormatComboBox;
        
        private WpfComboBox mOutputInComboBox;
        
        private ResultComboBox21 mResultComboBox;
        
        private OnErrorCustom15 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Input1ComboBox : WpfComboBox
    {
        
        public Input1ComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Input1txt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Input2ComboBox : WpfComboBox
    {
        
        public Input2ComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Input2txt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputFormatComboBox2 : WpfComboBox
    {
        
        public InputFormatComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__InputFormattxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox21 : WpfComboBox
    {
        
        public ResultComboBox21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom15 : WpfCustom
    {
        
        public OnErrorCustom15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup26 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup26(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup26 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup26 : WpfGroup
    {
        
        public OnErrorGroup26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox13 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox13(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox13 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox13(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox13 mErrorVariableComboBox;
        
        private WebServiceComboBox13 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox13 : WpfComboBox
    {
        
        public ErrorVariableComboBox13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox13 : WpfComboBox
    {
        
        public WebServiceComboBox13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom14 : WpfCustom
    {
        
        public SmallViewContentCustom14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Input1ComboBox1 Input1ComboBox
        {
            get
            {
                if ((this.mInput1ComboBox == null))
                {
                    this.mInput1ComboBox = new Input1ComboBox1(this);
                }
                return this.mInput1ComboBox;
            }
        }
        
        public Input2ComboBox1 Input2ComboBox
        {
            get
            {
                if ((this.mInput2ComboBox == null))
                {
                    this.mInput2ComboBox = new Input2ComboBox1(this);
                }
                return this.mInput2ComboBox;
            }
        }
        
        public InputFormatComboBox3 InputFormatComboBox
        {
            get
            {
                if ((this.mInputFormatComboBox == null))
                {
                    this.mInputFormatComboBox = new InputFormatComboBox3(this);
                }
                return this.mInputFormatComboBox;
            }
        }
        
        public OutputInComboBox OutputInComboBox
        {
            get
            {
                if ((this.mOutputInComboBox == null))
                {
                    this.mOutputInComboBox = new OutputInComboBox(this);
                }
                return this.mOutputInComboBox;
            }
        }
        
        public ResultComboBox22 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox22(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private Input1ComboBox1 mInput1ComboBox;
        
        private Input2ComboBox1 mInput2ComboBox;
        
        private InputFormatComboBox3 mInputFormatComboBox;
        
        private OutputInComboBox mOutputInComboBox;
        
        private ResultComboBox22 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Input1ComboBox1 : WpfComboBox
    {
        
        public Input1ComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Input1txt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Input2ComboBox1 : WpfComboBox
    {
        
        public Input2ComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Input2txt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputFormatComboBox3 : WpfComboBox
    {
        
        public InputFormatComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__InputFormattxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputInComboBox : WpfComboBox
    {
        
        public OutputInComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__OutputIncbx_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem Days
        {
            get
            {
                if ((this.mDays == null))
                {
                    this.mDays = new WpfListItem(this);
                    #region Search Criteria
                    this.mDays.SearchProperties[WpfListItem.PropertyNames.Name] = "Days";
                    this.mDays.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDays;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mDays;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox22 : WpfComboBox
    {
        
        public ResultComboBox22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class GatherSystemInfo : WpfCustom
    {
        
        public GatherSystemInfo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.GatherSystemInformationDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "GatherSystemInformationDesigner", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        
        public WpfCustom QuickVariableInputContent
        {
            get
            {
                if ((this.mQuickVariableInputContent == null))
                {
                    this.mQuickVariableInputContent = new WpfCustom(this);
                    #region Search Criteria
                    this.mQuickVariableInputContent.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.QuickVariableInputView";
                    this.mQuickVariableInputContent.SearchProperties[WpfControl.PropertyNames.AutomationId] = "QuickVariableInputContent";
                    this.mQuickVariableInputContent.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQuickVariableInputContent;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom16 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom16(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom15 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom15(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        
        private WpfCustom mQuickVariableInputContent;
        
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom16 mLargeViewContentCustom;
        
        private SmallViewContentCustom15 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom16 : WpfCustom
    {
        
        public LargeViewContentCustom16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorCustom16 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom16(this);
                }
                return this.mOnErrorCustom;
            }
        }
        
        public SmallDataGridTable4 SmallDataGridTable
        {
            get
            {
                if ((this.mSmallDataGridTable == null))
                {
                    this.mSmallDataGridTable = new SmallDataGridTable4(this);
                }
                return this.mSmallDataGridTable;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorCustom16 mOnErrorCustom;
        
        private SmallDataGridTable4 mSmallDataGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom16 : WpfCustom
    {
        
        public OnErrorCustom16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup27 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup27(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup27 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup27 : WpfGroup
    {
        
        public OnErrorGroup27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox14 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox14(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox14 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox14(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox14 mErrorVariableComboBox;
        
        private WebServiceComboBox14 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox14 : WpfComboBox
    {
        
        public ErrorVariableComboBox14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox14 : WpfComboBox
    {
        
        public WebServiceComboBox14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallDataGridTable4 : WpfTable
    {
        
        public SmallDataGridTable4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row115 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row115(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row115 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row115 : WpfRow
    {
        
        public Row115(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell2 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell2(this);
                }
                return this.mVariableCell;
            }
        }
        
        public TypeCell1 TypeCell
        {
            get
            {
                if ((this.mTypeCell == null))
                {
                    this.mTypeCell = new TypeCell1(this);
                }
                return this.mTypeCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell2 mVariableCell;
        
        private TypeCell1 mTypeCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell2 : WpfCell
    {
        
        public VariableCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableComboBox2 VariableComboBox
        {
            get
            {
                if ((this.mVariableComboBox == null))
                {
                    this.mVariableComboBox = new VariableComboBox2(this);
                }
                return this.mVariableComboBox;
            }
        }
        #endregion
        
        #region Fields
        private VariableComboBox2 mVariableComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableComboBox2 : WpfComboBox
    {
        
        public VariableComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FromExpressiontxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TypeCell1 : WpfCell
    {
        
        public TypeCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox TypeComboBox
        {
            get
            {
                if ((this.mTypeComboBox == null))
                {
                    this.mTypeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mTypeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FromTypecbx_AutoID";
                    this.mTypeComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mTypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom15 : WpfCustom
    {
        
        public SmallViewContentCustom15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallDataGridTable5 SmallDataGridTable
        {
            get
            {
                if ((this.mSmallDataGridTable == null))
                {
                    this.mSmallDataGridTable = new SmallDataGridTable5(this);
                }
                return this.mSmallDataGridTable;
            }
        }
        #endregion
        
        #region Fields
        private SmallDataGridTable5 mSmallDataGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallDataGridTable5 : WpfTable
    {
        
        public SmallDataGridTable5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row116 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row116(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row116 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row116 : WpfRow
    {
        
        public Row116(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell3 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell3(this);
                }
                return this.mVariableCell;
            }
        }
        
        public TypeCell2 TypeCell
        {
            get
            {
                if ((this.mTypeCell == null))
                {
                    this.mTypeCell = new TypeCell2(this);
                }
                return this.mTypeCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell3 mVariableCell;
        
        private TypeCell2 mTypeCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell3 : WpfCell
    {
        
        public VariableCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableComboBox3 VariableComboBox
        {
            get
            {
                if ((this.mVariableComboBox == null))
                {
                    this.mVariableComboBox = new VariableComboBox3(this);
                }
                return this.mVariableComboBox;
            }
        }
        #endregion
        
        #region Fields
        private VariableComboBox3 mVariableComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableComboBox3 : WpfComboBox
    {
        
        public VariableComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FromExpressiontxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TypeCell2 : WpfCell
    {
        
        public TypeCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox TypeComboBox
        {
            get
            {
                if ((this.mTypeComboBox == null))
                {
                    this.mTypeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mTypeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FromTypecbx_AutoID";
                    this.mTypeComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mTypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FormatNumber1 : WpfCustom
    {
        
        public FormatNumber1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FormatNumberDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Format Number(FormatNumberDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom17 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom17(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom16 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom16(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom17 mLargeViewContentCustom;
        
        private SmallViewContentCustom16 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom17 : WpfCustom
    {
        
        public LargeViewContentCustom17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NumberInputComboBox NumberInputComboBox
        {
            get
            {
                if ((this.mNumberInputComboBox == null))
                {
                    this.mNumberInputComboBox = new NumberInputComboBox(this);
                }
                return this.mNumberInputComboBox;
            }
        }
        
        public RoundingComboBox RoundingComboBox
        {
            get
            {
                if ((this.mRoundingComboBox == null))
                {
                    this.mRoundingComboBox = new RoundingComboBox(this);
                }
                return this.mRoundingComboBox;
            }
        }
        
        public DecimalsToShowComboBox DecimalsToShowComboBox
        {
            get
            {
                if ((this.mDecimalsToShowComboBox == null))
                {
                    this.mDecimalsToShowComboBox = new DecimalsToShowComboBox(this);
                }
                return this.mDecimalsToShowComboBox;
            }
        }
        
        public ResultInputComboBox ResultInputComboBox
        {
            get
            {
                if ((this.mResultInputComboBox == null))
                {
                    this.mResultInputComboBox = new ResultInputComboBox(this);
                }
                return this.mResultInputComboBox;
            }
        }
        
        public OnErrorCustom17 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom17(this);
                }
                return this.mOnErrorCustom;
            }
        }
        
        public RoundingInputComboBox RoundingInputComboBox
        {
            get
            {
                if ((this.mRoundingInputComboBox == null))
                {
                    this.mRoundingInputComboBox = new RoundingInputComboBox(this);
                }
                return this.mRoundingInputComboBox;
            }
        }
        #endregion
        
        #region Fields
        private NumberInputComboBox mNumberInputComboBox;
        
        private RoundingComboBox mRoundingComboBox;
        
        private DecimalsToShowComboBox mDecimalsToShowComboBox;
        
        private ResultInputComboBox mResultInputComboBox;
        
        private OnErrorCustom17 mOnErrorCustom;
        
        private RoundingInputComboBox mRoundingInputComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NumberInputComboBox : WpfComboBox
    {
        
        public NumberInputComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Number_Inputtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RoundingComboBox : WpfComboBox
    {
        
        public RoundingComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfComboBox.PropertyNames.HelpText, "How would you like to round the number?", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem RoungUP
        {
            get
            {
                if ((this.mRoungUP == null))
                {
                    this.mRoungUP = new WpfListItem(this);
                    #region Search Criteria
                    this.mRoungUP.SearchProperties[WpfListItem.PropertyNames.Name] = "Up";
                    this.mRoungUP.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRoungUP;
            }
        }
        
        public WpfListItem Normal
        {
            get
            {
                if ((this.mNormal == null))
                {
                    this.mNormal = new WpfListItem(this);
                    #region Search Criteria
                    this.mNormal.SearchProperties[WpfListItem.PropertyNames.Name] = "Normal";
                    this.mNormal.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNormal;
            }
        }
        
        public WpfListItem None
        {
            get
            {
                if ((this.mNone == null))
                {
                    this.mNone = new WpfListItem(this);
                    #region Search Criteria
                    this.mNone.SearchProperties[WpfListItem.PropertyNames.Name] = "None";
                    this.mNone.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNone;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mRoungUP;
        
        private WpfListItem mNormal;
        
        private WpfListItem mNone;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DecimalsToShowComboBox : WpfComboBox
    {
        
        public DecimalsToShowComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__DecimalsToShow_Inputtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultInputComboBox : WpfComboBox
    {
        
        public ResultInputComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Result_Inputtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom17 : WpfCustom
    {
        
        public OnErrorCustom17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup28 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup28(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup28 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup28 : WpfGroup
    {
        
        public OnErrorGroup28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox15 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox15(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox15 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox15(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox15 mErrorVariableComboBox;
        
        private WebServiceComboBox15 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox15 : WpfComboBox
    {
        
        public ErrorVariableComboBox15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox15 : WpfComboBox
    {
        
        public WebServiceComboBox15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RoundingInputComboBox : WpfComboBox
    {
        
        public RoundingInputComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Rounding_Inputtxt_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom16 : WpfCustom
    {
        
        public SmallViewContentCustom16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NumberInputComboBox1 NumberInputComboBox
        {
            get
            {
                if ((this.mNumberInputComboBox == null))
                {
                    this.mNumberInputComboBox = new NumberInputComboBox1(this);
                }
                return this.mNumberInputComboBox;
            }
        }
        
        public WpfComboBox RoundingComboBox
        {
            get
            {
                if ((this.mRoundingComboBox == null))
                {
                    this.mRoundingComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mRoundingComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRoundingComboBox;
            }
        }
        
        public DecimalsToShowComboBox1 DecimalsToShowComboBox
        {
            get
            {
                if ((this.mDecimalsToShowComboBox == null))
                {
                    this.mDecimalsToShowComboBox = new DecimalsToShowComboBox1(this);
                }
                return this.mDecimalsToShowComboBox;
            }
        }
        
        public ResultInputComboBox1 ResultInputComboBox
        {
            get
            {
                if ((this.mResultInputComboBox == null))
                {
                    this.mResultInputComboBox = new ResultInputComboBox1(this);
                }
                return this.mResultInputComboBox;
            }
        }
        #endregion
        
        #region Fields
        private NumberInputComboBox1 mNumberInputComboBox;
        
        private WpfComboBox mRoundingComboBox;
        
        private DecimalsToShowComboBox1 mDecimalsToShowComboBox;
        
        private ResultInputComboBox1 mResultInputComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NumberInputComboBox1 : WpfComboBox
    {
        
        public NumberInputComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Number_Inputtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DecimalsToShowComboBox1 : WpfComboBox
    {
        
        public DecimalsToShowComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__DecimalsToShow_Inputtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultInputComboBox1 : WpfComboBox
    {
        
        public ResultInputComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Result_Inputtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Random1 : WpfCustom
    {
        
        public Random1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RandomDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Random(RandomDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallView12 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView12(this);
                }
                return this.mSmallView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom18 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom18(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom17 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom17(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private SmallView12 mSmallView;
        
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom18 mLargeViewContentCustom;
        
        private SmallViewContentCustom17 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView12 : WpfCustom
    {
        
        public SmallView12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public From From
        {
            get
            {
                if ((this.mFrom == null))
                {
                    this.mFrom = new From(this);
                }
                return this.mFrom;
            }
        }
        
        public To To
        {
            get
            {
                if ((this.mTo == null))
                {
                    this.mTo = new To(this);
                }
                return this.mTo;
            }
        }
        #endregion
        
        #region Fields
        private From mFrom;
        
        private To mTo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class From : WpfComboBox
    {
        
        public From(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Lengthstxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit FromTextEdit
        {
            get
            {
                if ((this.mFromTextEdit == null))
                {
                    this.mFromTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mFromTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mFromTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFromTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mFromTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class To : WpfComboBox
    {
        
        public To(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Lengthstxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ToTextEdit
        {
            get
            {
                if ((this.mToTextEdit == null))
                {
                    this.mToTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mToTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mToTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mToTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom18 : WpfCustom
    {
        
        public LargeViewContentCustom18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox TypeComboBox
        {
            get
            {
                if ((this.mTypeComboBox == null))
                {
                    this.mTypeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mTypeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Wherecbx_AutoID";
                    this.mTypeComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTypeComboBox;
            }
        }
        
        public FromComboBox FromComboBox
        {
            get
            {
                if ((this.mFromComboBox == null))
                {
                    this.mFromComboBox = new FromComboBox(this);
                }
                return this.mFromComboBox;
            }
        }
        
        public ToComboBox ToComboBox
        {
            get
            {
                if ((this.mToComboBox == null))
                {
                    this.mToComboBox = new ToComboBox(this);
                }
                return this.mToComboBox;
            }
        }
        
        public ResultComboBox23 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox23(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom18 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom18(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mTypeComboBox;
        
        private FromComboBox mFromComboBox;
        
        private ToComboBox mToComboBox;
        
        private ResultComboBox23 mResultComboBox;
        
        private OnErrorCustom18 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FromComboBox : WpfComboBox
    {
        
        public FromComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Lengthstxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ToComboBox : WpfComboBox
    {
        
        public ToComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Lengthstxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox23 : WpfComboBox
    {
        
        public ResultComboBox23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom18 : WpfCustom
    {
        
        public OnErrorCustom18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup29 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup29(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup29 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup29 : WpfGroup
    {
        
        public OnErrorGroup29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox16 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox16(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox16 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox16(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox16 mErrorVariableComboBox;
        
        private WebServiceComboBox16 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox16 : WpfComboBox
    {
        
        public ErrorVariableComboBox16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox16 : WpfComboBox
    {
        
        public WebServiceComboBox16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom17 : WpfCustom
    {
        
        public SmallViewContentCustom17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TypeComboBox TypeComboBox
        {
            get
            {
                if ((this.mTypeComboBox == null))
                {
                    this.mTypeComboBox = new TypeComboBox(this);
                }
                return this.mTypeComboBox;
            }
        }
        
        public FromComboBox1 FromComboBox
        {
            get
            {
                if ((this.mFromComboBox == null))
                {
                    this.mFromComboBox = new FromComboBox1(this);
                }
                return this.mFromComboBox;
            }
        }
        
        public ToComboBox1 ToComboBox
        {
            get
            {
                if ((this.mToComboBox == null))
                {
                    this.mToComboBox = new ToComboBox1(this);
                }
                return this.mToComboBox;
            }
        }
        
        public ResultComboBox24 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox24(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public LengthComboBox LengthComboBox
        {
            get
            {
                if ((this.mLengthComboBox == null))
                {
                    this.mLengthComboBox = new LengthComboBox(this);
                }
                return this.mLengthComboBox;
            }
        }
        #endregion
        
        #region Fields
        private TypeComboBox mTypeComboBox;
        
        private FromComboBox1 mFromComboBox;
        
        private ToComboBox1 mToComboBox;
        
        private ResultComboBox24 mResultComboBox;
        
        private LengthComboBox mLengthComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TypeComboBox : WpfComboBox
    {
        
        public TypeComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Wherecbx_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem Letters
        {
            get
            {
                if ((this.mLetters == null))
                {
                    this.mLetters = new WpfListItem(this);
                    #region Search Criteria
                    this.mLetters.SearchProperties[WpfListItem.PropertyNames.Name] = "Letters";
                    this.mLetters.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLetters;
            }
        }
        
        public WpfListItem GUID
        {
            get
            {
                if ((this.mGUID == null))
                {
                    this.mGUID = new WpfListItem(this);
                    #region Search Criteria
                    this.mGUID.SearchProperties[WpfListItem.PropertyNames.Name] = "GUID";
                    this.mGUID.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGUID;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mLetters;
        
        private WpfListItem mGUID;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FromComboBox1 : WpfComboBox
    {
        
        public FromComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Lengthstxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ToComboBox1 : WpfComboBox
    {
        
        public ToComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Lengthstxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox24 : WpfComboBox
    {
        
        public ResultComboBox24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LengthComboBox : WpfComboBox
    {
        
        public LengthComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Lengthstxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SMTPEmail : WpfCustom
    {
        
        public SMTPEmail(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.EmailDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Email(EmailDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new WpfCustom(this);
                    #region Search Criteria
                    this.mLargeView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
                    this.mLargeView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
                    this.mLargeView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLargeView;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mLargeView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExchangeEmail : WpfCustom
    {
        
        public ExchangeEmail(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExchangeEmailDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Exchange Email(ExchangeEmailDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new WpfCustom(this);
                    #region Search Criteria
                    this.mLargeView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
                    this.mLargeView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
                    this.mLargeView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLargeView;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mLargeView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Comment1 : WpfCustom
    {
        
        public Comment1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CommentDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Comment(CommentDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeViewContentCustom19 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom19(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private LargeViewContentCustom19 mLargeViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom19 : WpfCustom
    {
        
        public LargeViewContentCustom19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CommentComboBox CommentComboBox
        {
            get
            {
                if ((this.mCommentComboBox == null))
                {
                    this.mCommentComboBox = new CommentComboBox(this);
                }
                return this.mCommentComboBox;
            }
        }
        #endregion
        
        #region Fields
        private CommentComboBox mCommentComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CommentComboBox : WpfComboBox
    {
        
        public CommentComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Commenttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XPath1 : WpfCustom
    {
        
        public XPath1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XPathDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "XPathDesigner", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        
        public WpfCustom QuickVariableInputContent
        {
            get
            {
                if ((this.mQuickVariableInputContent == null))
                {
                    this.mQuickVariableInputContent = new WpfCustom(this);
                    #region Search Criteria
                    this.mQuickVariableInputContent.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.QuickVariableInputView";
                    this.mQuickVariableInputContent.SearchProperties[WpfControl.PropertyNames.AutomationId] = "QuickVariableInputContent";
                    this.mQuickVariableInputContent.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQuickVariableInputContent;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom20 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom20(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom18 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom18(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        
        private WpfCustom mQuickVariableInputContent;
        
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom20 mLargeViewContentCustom;
        
        private SmallViewContentCustom18 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom20 : WpfCustom
    {
        
        public LargeViewContentCustom20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SourceStringComboBox2 SourceStringComboBox
        {
            get
            {
                if ((this.mSourceStringComboBox == null))
                {
                    this.mSourceStringComboBox = new SourceStringComboBox2(this);
                }
                return this.mSourceStringComboBox;
            }
        }
        
        public LargeDataGridTable3 LargeDataGridTable
        {
            get
            {
                if ((this.mLargeDataGridTable == null))
                {
                    this.mLargeDataGridTable = new LargeDataGridTable3(this);
                }
                return this.mLargeDataGridTable;
            }
        }
        
        public OnErrorCustom19 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom19(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private SourceStringComboBox2 mSourceStringComboBox;
        
        private LargeDataGridTable3 mLargeDataGridTable;
        
        private OnErrorCustom19 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourceStringComboBox2 : WpfComboBox
    {
        
        public SourceStringComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__SourceStringtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeDataGridTable3 : WpfTable
    {
        
        public LargeDataGridTable3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row117 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row117(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row117 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row117 : WpfRow
    {
        
        public Row117(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell4 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell4(this);
                }
                return this.mVariableCell;
            }
        }
        
        public XpathCell XpathCell
        {
            get
            {
                if ((this.mXpathCell == null))
                {
                    this.mXpathCell = new XpathCell(this);
                }
                return this.mXpathCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell4 mVariableCell;
        
        private XpathCell mXpathCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell4 : WpfCell
    {
        
        public VariableCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Results";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableComboBox4 VariableComboBox
        {
            get
            {
                if ((this.mVariableComboBox == null))
                {
                    this.mVariableComboBox = new VariableComboBox4(this);
                }
                return this.mVariableComboBox;
            }
        }
        #endregion
        
        #region Fields
        private VariableComboBox4 mVariableComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableComboBox4 : WpfComboBox
    {
        
        public VariableComboBox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_OutputVariable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XpathCell : WpfCell
    {
        
        public XpathCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Xpath";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public XpathComboBox XpathComboBox
        {
            get
            {
                if ((this.mXpathComboBox == null))
                {
                    this.mXpathComboBox = new XpathComboBox(this);
                }
                return this.mXpathComboBox;
            }
        }
        #endregion
        
        #region Fields
        private XpathComboBox mXpathComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XpathComboBox : WpfComboBox
    {
        
        public XpathComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__At_Row1_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom19 : WpfCustom
    {
        
        public OnErrorCustom19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup30 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup30(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup30 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup30 : WpfGroup
    {
        
        public OnErrorGroup30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox17 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox17(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox17 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox17(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox17 mErrorVariableComboBox;
        
        private WebServiceComboBox17 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox17 : WpfComboBox
    {
        
        public ErrorVariableComboBox17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox17 : WpfComboBox
    {
        
        public WebServiceComboBox17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom18 : WpfCustom
    {
        
        public SmallViewContentCustom18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SourceStringComboBox3 SourceStringComboBox
        {
            get
            {
                if ((this.mSourceStringComboBox == null))
                {
                    this.mSourceStringComboBox = new SourceStringComboBox3(this);
                }
                return this.mSourceStringComboBox;
            }
        }
        
        public SmallDataGridTable6 SmallDataGridTable
        {
            get
            {
                if ((this.mSmallDataGridTable == null))
                {
                    this.mSmallDataGridTable = new SmallDataGridTable6(this);
                }
                return this.mSmallDataGridTable;
            }
        }
        #endregion
        
        #region Fields
        private SourceStringComboBox3 mSourceStringComboBox;
        
        private SmallDataGridTable6 mSmallDataGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourceStringComboBox3 : WpfComboBox
    {
        
        public SourceStringComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__SourceStringtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallDataGridTable6 : WpfTable
    {
        
        public SmallDataGridTable6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row118 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row118(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row118 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row118 : WpfRow
    {
        
        public Row118(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell5 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell5(this);
                }
                return this.mVariableCell;
            }
        }
        
        public XpathCell1 XpathCell
        {
            get
            {
                if ((this.mXpathCell == null))
                {
                    this.mXpathCell = new XpathCell1(this);
                }
                return this.mXpathCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell5 mVariableCell;
        
        private XpathCell1 mXpathCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell5 : WpfCell
    {
        
        public VariableCell5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableComboBox5 VariableComboBox
        {
            get
            {
                if ((this.mVariableComboBox == null))
                {
                    this.mVariableComboBox = new VariableComboBox5(this);
                }
                return this.mVariableComboBox;
            }
        }
        #endregion
        
        #region Fields
        private VariableComboBox5 mVariableComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableComboBox5 : WpfComboBox
    {
        
        public VariableComboBox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_OutputVariable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XpathCell1 : WpfCell
    {
        
        public XpathCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "2";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public XpathComboBox1 XpathComboBox
        {
            get
            {
                if ((this.mXpathComboBox == null))
                {
                    this.mXpathComboBox = new XpathComboBox1(this);
                }
                return this.mXpathComboBox;
            }
        }
        #endregion
        
        #region Fields
        private XpathComboBox1 mXpathComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XpathComboBox1 : WpfComboBox
    {
        
        public XpathComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__At_Row1_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PathCreate : WpfCustom
    {
        
        public PathCreate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CreateDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Create(CreateDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom21 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom21(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom19 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom19(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom21 mLargeViewContentCustom;
        
        private SmallViewContentCustom19 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom21 : WpfCustom
    {
        
        public LargeViewContentCustom21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileNameoComboBox FileNameoComboBox
        {
            get
            {
                if ((this.mFileNameoComboBox == null))
                {
                    this.mFileNameoComboBox = new FileNameoComboBox(this);
                }
                return this.mFileNameoComboBox;
            }
        }
        
        public WpfCheckBox OverwriteCheckBox
        {
            get
            {
                if ((this.mOverwriteCheckBox == null))
                {
                    this.mOverwriteCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOverwriteCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Overwrite";
                    this.mOverwriteCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOverwriteCheckBox;
            }
        }
        
        public UserNameComboBox UserNameComboBox
        {
            get
            {
                if ((this.mUserNameComboBox == null))
                {
                    this.mUserNameComboBox = new UserNameComboBox(this);
                }
                return this.mUserNameComboBox;
            }
        }
        
        public WpfEdit PasswordEdit
        {
            get
            {
                if ((this.mPasswordEdit == null))
                {
                    this.mPasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Passwordtxt_AutoID";
                    this.mPasswordEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordEdit;
            }
        }
        
        public PrivateKeyComboBox PrivateKeyComboBox
        {
            get
            {
                if ((this.mPrivateKeyComboBox == null))
                {
                    this.mPrivateKeyComboBox = new PrivateKeyComboBox(this);
                }
                return this.mPrivateKeyComboBox;
            }
        }
        
        public ResultComboBox25 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox25(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom20 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom20(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private FileNameoComboBox mFileNameoComboBox;
        
        private WpfCheckBox mOverwriteCheckBox;
        
        private UserNameComboBox mUserNameComboBox;
        
        private WpfEdit mPasswordEdit;
        
        private PrivateKeyComboBox mPrivateKeyComboBox;
        
        private ResultComboBox25 mResultComboBox;
        
        private OnErrorCustom20 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileNameoComboBox : WpfComboBox
    {
        
        public FileNameoComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UserNameComboBox : WpfComboBox
    {
        
        public UserNameComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__UserNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PrivateKeyComboBox : WpfComboBox
    {
        
        public PrivateKeyComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileNametxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox25 : WpfComboBox
    {
        
        public ResultComboBox25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom20 : WpfCustom
    {
        
        public OnErrorCustom20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup31 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup31(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup31 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup31 : WpfGroup
    {
        
        public OnErrorGroup31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox18 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox18(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox18 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox18(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox18 mErrorVariableComboBox;
        
        private WebServiceComboBox18 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox18 : WpfComboBox
    {
        
        public ErrorVariableComboBox18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox18 : WpfComboBox
    {
        
        public WebServiceComboBox18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom19 : WpfCustom
    {
        
        public SmallViewContentCustom19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileOrFolderComboBox FileOrFolderComboBox
        {
            get
            {
                if ((this.mFileOrFolderComboBox == null))
                {
                    this.mFileOrFolderComboBox = new FileOrFolderComboBox(this);
                }
                return this.mFileOrFolderComboBox;
            }
        }
        
        public ResultComboBox26 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox26(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private FileOrFolderComboBox mFileOrFolderComboBox;
        
        private ResultComboBox26 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileOrFolderComboBox : WpfComboBox
    {
        
        public FileOrFolderComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox26 : WpfComboBox
    {
        
        public ResultComboBox26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PathCopy : WpfCustom
    {
        
        public PathCopy(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CopyDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Copy(CopyDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom22 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom22(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom20 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom20(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom22 mLargeViewContentCustom;
        
        private SmallViewContentCustom20 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom22 : WpfCustom
    {
        
        public LargeViewContentCustom22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileOrFolderComboBox1 FileOrFolderComboBox
        {
            get
            {
                if ((this.mFileOrFolderComboBox == null))
                {
                    this.mFileOrFolderComboBox = new FileOrFolderComboBox1(this);
                }
                return this.mFileOrFolderComboBox;
            }
        }
        
        public UserNameComboBox1 UserNameComboBox
        {
            get
            {
                if ((this.mUserNameComboBox == null))
                {
                    this.mUserNameComboBox = new UserNameComboBox1(this);
                }
                return this.mUserNameComboBox;
            }
        }
        
        public WpfEdit PasswordEdit
        {
            get
            {
                if ((this.mPasswordEdit == null))
                {
                    this.mPasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Passwordtxt_AutoID";
                    this.mPasswordEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordEdit;
            }
        }
        
        public PrivateKeyComboBox1 PrivateKeyComboBox
        {
            get
            {
                if ((this.mPrivateKeyComboBox == null))
                {
                    this.mPrivateKeyComboBox = new PrivateKeyComboBox1(this);
                }
                return this.mPrivateKeyComboBox;
            }
        }
        
        public DestinationComboBox DestinationComboBox
        {
            get
            {
                if ((this.mDestinationComboBox == null))
                {
                    this.mDestinationComboBox = new DestinationComboBox(this);
                }
                return this.mDestinationComboBox;
            }
        }
        
        public DestinationUserNameComboBox DestinationUserNameComboBox
        {
            get
            {
                if ((this.mDestinationUserNameComboBox == null))
                {
                    this.mDestinationUserNameComboBox = new DestinationUserNameComboBox(this);
                }
                return this.mDestinationUserNameComboBox;
            }
        }
        
        public WpfEdit DestinationPasswordEdit
        {
            get
            {
                if ((this.mDestinationPasswordEdit == null))
                {
                    this.mDestinationPasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mDestinationPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Passwordtxt_AutoID";
                    this.mDestinationPasswordEdit.SearchProperties[WpfEdit.PropertyNames.Instance] = "2";
                    this.mDestinationPasswordEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDestinationPasswordEdit;
            }
        }
        
        public DestinationFileOrFolderComboBox DestinationFileOrFolderComboBox
        {
            get
            {
                if ((this.mDestinationFileOrFolderComboBox == null))
                {
                    this.mDestinationFileOrFolderComboBox = new DestinationFileOrFolderComboBox(this);
                }
                return this.mDestinationFileOrFolderComboBox;
            }
        }
        
        public WpfCheckBox OverwriteCheckBox
        {
            get
            {
                if ((this.mOverwriteCheckBox == null))
                {
                    this.mOverwriteCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOverwriteCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Overwrite";
                    this.mOverwriteCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOverwriteCheckBox;
            }
        }
        
        public ResultComboBox27 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox27(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom21 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom21(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private FileOrFolderComboBox1 mFileOrFolderComboBox;
        
        private UserNameComboBox1 mUserNameComboBox;
        
        private WpfEdit mPasswordEdit;
        
        private PrivateKeyComboBox1 mPrivateKeyComboBox;
        
        private DestinationComboBox mDestinationComboBox;
        
        private DestinationUserNameComboBox mDestinationUserNameComboBox;
        
        private WpfEdit mDestinationPasswordEdit;
        
        private DestinationFileOrFolderComboBox mDestinationFileOrFolderComboBox;
        
        private WpfCheckBox mOverwriteCheckBox;
        
        private ResultComboBox27 mResultComboBox;
        
        private OnErrorCustom21 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileOrFolderComboBox1 : WpfComboBox
    {
        
        public FileOrFolderComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UserNameComboBox1 : WpfComboBox
    {
        
        public UserNameComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__UserNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PrivateKeyComboBox1 : WpfComboBox
    {
        
        public PrivateKeyComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DestinationComboBox : WpfComboBox
    {
        
        public DestinationComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Destinationtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DestinationUserNameComboBox : WpfComboBox
    {
        
        public DestinationUserNameComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__UserNametxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DestinationFileOrFolderComboBox : WpfComboBox
    {
        
        public DestinationFileOrFolderComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox27 : WpfComboBox
    {
        
        public ResultComboBox27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom21 : WpfCustom
    {
        
        public OnErrorCustom21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup32 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup32(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup32 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup32 : WpfGroup
    {
        
        public OnErrorGroup32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox19 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox19(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox19 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox19(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox19 mErrorVariableComboBox;
        
        private WebServiceComboBox19 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox19 : WpfComboBox
    {
        
        public ErrorVariableComboBox19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox19 : WpfComboBox
    {
        
        public WebServiceComboBox19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom20 : WpfCustom
    {
        
        public SmallViewContentCustom20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileOrFolderComboBox2 FileOrFolderComboBox
        {
            get
            {
                if ((this.mFileOrFolderComboBox == null))
                {
                    this.mFileOrFolderComboBox = new FileOrFolderComboBox2(this);
                }
                return this.mFileOrFolderComboBox;
            }
        }
        
        public DestinationComboBox1 DestinationComboBox
        {
            get
            {
                if ((this.mDestinationComboBox == null))
                {
                    this.mDestinationComboBox = new DestinationComboBox1(this);
                }
                return this.mDestinationComboBox;
            }
        }
        
        public ResultComboBox28 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox28(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private FileOrFolderComboBox2 mFileOrFolderComboBox;
        
        private DestinationComboBox1 mDestinationComboBox;
        
        private ResultComboBox28 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileOrFolderComboBox2 : WpfComboBox
    {
        
        public FileOrFolderComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DestinationComboBox1 : WpfComboBox
    {
        
        public DestinationComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Destinationtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox28 : WpfComboBox
    {
        
        public ResultComboBox28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PathDelete : WpfCustom
    {
        
        public PathDelete(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DeleteDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Delete(DeleteDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom23 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom23(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom21 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom21(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom23 mLargeViewContentCustom;
        
        private SmallViewContentCustom21 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom23 : WpfCustom
    {
        
        public LargeViewContentCustom23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileOrFolderComboBox3 FileOrFolderComboBox
        {
            get
            {
                if ((this.mFileOrFolderComboBox == null))
                {
                    this.mFileOrFolderComboBox = new FileOrFolderComboBox3(this);
                }
                return this.mFileOrFolderComboBox;
            }
        }
        
        public UserNameComboBox2 UserNameComboBox
        {
            get
            {
                if ((this.mUserNameComboBox == null))
                {
                    this.mUserNameComboBox = new UserNameComboBox2(this);
                }
                return this.mUserNameComboBox;
            }
        }
        
        public WpfEdit PasswordEdit
        {
            get
            {
                if ((this.mPasswordEdit == null))
                {
                    this.mPasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Passwordtxt_AutoID";
                    this.mPasswordEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordEdit;
            }
        }
        
        public FileNameComboBox FileNameComboBox
        {
            get
            {
                if ((this.mFileNameComboBox == null))
                {
                    this.mFileNameComboBox = new FileNameComboBox(this);
                }
                return this.mFileNameComboBox;
            }
        }
        
        public ResultComboBox29 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox29(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom22 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom22(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private FileOrFolderComboBox3 mFileOrFolderComboBox;
        
        private UserNameComboBox2 mUserNameComboBox;
        
        private WpfEdit mPasswordEdit;
        
        private FileNameComboBox mFileNameComboBox;
        
        private ResultComboBox29 mResultComboBox;
        
        private OnErrorCustom22 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileOrFolderComboBox3 : WpfComboBox
    {
        
        public FileOrFolderComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UserNameComboBox2 : WpfComboBox
    {
        
        public UserNameComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__UserNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileNameComboBox : WpfComboBox
    {
        
        public FileNameComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox29 : WpfComboBox
    {
        
        public ResultComboBox29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom22 : WpfCustom
    {
        
        public OnErrorCustom22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup33 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup33(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup33 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup33 : WpfGroup
    {
        
        public OnErrorGroup33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox20 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox20(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox20 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox20(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox20 mErrorVariableComboBox;
        
        private WebServiceComboBox20 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox20 : WpfComboBox
    {
        
        public ErrorVariableComboBox20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox20 : WpfComboBox
    {
        
        public WebServiceComboBox20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom21 : WpfCustom
    {
        
        public SmallViewContentCustom21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileOrFolderComboBox4 FileOrFolderComboBox
        {
            get
            {
                if ((this.mFileOrFolderComboBox == null))
                {
                    this.mFileOrFolderComboBox = new FileOrFolderComboBox4(this);
                }
                return this.mFileOrFolderComboBox;
            }
        }
        
        public ResultComboBox30 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox30(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private FileOrFolderComboBox4 mFileOrFolderComboBox;
        
        private ResultComboBox30 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileOrFolderComboBox4 : WpfComboBox
    {
        
        public FileOrFolderComboBox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox30 : WpfComboBox
    {
        
        public ResultComboBox30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PathMove : WpfCustom
    {
        
        public PathMove(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MoveDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Move(MoveDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom24 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom24(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom22 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom22(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom24 mLargeViewContentCustom;
        
        private SmallViewContentCustom22 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom24 : WpfCustom
    {
        
        public LargeViewContentCustom24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileOrFolderComboBox5 FileOrFolderComboBox
        {
            get
            {
                if ((this.mFileOrFolderComboBox == null))
                {
                    this.mFileOrFolderComboBox = new FileOrFolderComboBox5(this);
                }
                return this.mFileOrFolderComboBox;
            }
        }
        
        public UserNameComboBox3 UserNameComboBox
        {
            get
            {
                if ((this.mUserNameComboBox == null))
                {
                    this.mUserNameComboBox = new UserNameComboBox3(this);
                }
                return this.mUserNameComboBox;
            }
        }
        
        public WpfEdit PasswordEdit
        {
            get
            {
                if ((this.mPasswordEdit == null))
                {
                    this.mPasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Passwordtxt_AutoID";
                    this.mPasswordEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordEdit;
            }
        }
        
        public PrivateKeCombobox PrivateKeCombobox
        {
            get
            {
                if ((this.mPrivateKeCombobox == null))
                {
                    this.mPrivateKeCombobox = new PrivateKeCombobox(this);
                }
                return this.mPrivateKeCombobox;
            }
        }
        
        public DestinationComboBox2 DestinationComboBox
        {
            get
            {
                if ((this.mDestinationComboBox == null))
                {
                    this.mDestinationComboBox = new DestinationComboBox2(this);
                }
                return this.mDestinationComboBox;
            }
        }
        
        public DestinationUserNameComboBox1 DestinationUserNameComboBox
        {
            get
            {
                if ((this.mDestinationUserNameComboBox == null))
                {
                    this.mDestinationUserNameComboBox = new DestinationUserNameComboBox1(this);
                }
                return this.mDestinationUserNameComboBox;
            }
        }
        
        public WpfEdit DestinationPasswordEdit
        {
            get
            {
                if ((this.mDestinationPasswordEdit == null))
                {
                    this.mDestinationPasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mDestinationPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Passwordtxt_AutoID";
                    this.mDestinationPasswordEdit.SearchProperties[WpfEdit.PropertyNames.Instance] = "2";
                    this.mDestinationPasswordEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDestinationPasswordEdit;
            }
        }
        
        public DestinationPrvateKeyComboBox DestinationPrvateKeyComboBox
        {
            get
            {
                if ((this.mDestinationPrvateKeyComboBox == null))
                {
                    this.mDestinationPrvateKeyComboBox = new DestinationPrvateKeyComboBox(this);
                }
                return this.mDestinationPrvateKeyComboBox;
            }
        }
        
        public WpfCheckBox OverwriteCheckBox
        {
            get
            {
                if ((this.mOverwriteCheckBox == null))
                {
                    this.mOverwriteCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOverwriteCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Overwrite";
                    this.mOverwriteCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOverwriteCheckBox;
            }
        }
        
        public ResultComboBox31 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox31(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom23 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom23(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private FileOrFolderComboBox5 mFileOrFolderComboBox;
        
        private UserNameComboBox3 mUserNameComboBox;
        
        private WpfEdit mPasswordEdit;
        
        private PrivateKeCombobox mPrivateKeCombobox;
        
        private DestinationComboBox2 mDestinationComboBox;
        
        private DestinationUserNameComboBox1 mDestinationUserNameComboBox;
        
        private WpfEdit mDestinationPasswordEdit;
        
        private DestinationPrvateKeyComboBox mDestinationPrvateKeyComboBox;
        
        private WpfCheckBox mOverwriteCheckBox;
        
        private ResultComboBox31 mResultComboBox;
        
        private OnErrorCustom23 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileOrFolderComboBox5 : WpfComboBox
    {
        
        public FileOrFolderComboBox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UserNameComboBox3 : WpfComboBox
    {
        
        public UserNameComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__UserNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PrivateKeCombobox : WpfComboBox
    {
        
        public PrivateKeCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DestinationComboBox2 : WpfComboBox
    {
        
        public DestinationComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Destinationtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DestinationUserNameComboBox1 : WpfComboBox
    {
        
        public DestinationUserNameComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__UserNametxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DestinationPrvateKeyComboBox : WpfComboBox
    {
        
        public DestinationPrvateKeyComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox31 : WpfComboBox
    {
        
        public ResultComboBox31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom23 : WpfCustom
    {
        
        public OnErrorCustom23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup34 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup34(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup34 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup34 : WpfGroup
    {
        
        public OnErrorGroup34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox21 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox21(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox21 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox21(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox21 mErrorVariableComboBox;
        
        private WebServiceComboBox21 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox21 : WpfComboBox
    {
        
        public ErrorVariableComboBox21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox21 : WpfComboBox
    {
        
        public WebServiceComboBox21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom22 : WpfCustom
    {
        
        public SmallViewContentCustom22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileOrFolderComboBox6 FileOrFolderComboBox
        {
            get
            {
                if ((this.mFileOrFolderComboBox == null))
                {
                    this.mFileOrFolderComboBox = new FileOrFolderComboBox6(this);
                }
                return this.mFileOrFolderComboBox;
            }
        }
        
        public DestinationComboBox3 DestinationComboBox
        {
            get
            {
                if ((this.mDestinationComboBox == null))
                {
                    this.mDestinationComboBox = new DestinationComboBox3(this);
                }
                return this.mDestinationComboBox;
            }
        }
        
        public ResultComboBox32 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox32(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private FileOrFolderComboBox6 mFileOrFolderComboBox;
        
        private DestinationComboBox3 mDestinationComboBox;
        
        private ResultComboBox32 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileOrFolderComboBox6 : WpfComboBox
    {
        
        public FileOrFolderComboBox6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DestinationComboBox3 : WpfComboBox
    {
        
        public DestinationComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Destinationtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox32 : WpfComboBox
    {
        
        public ResultComboBox32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FolderRead : WpfCustom
    {
        
        public FolderRead(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ReadFolderDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Read Folder(ReadFolderDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom25 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom25(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom23 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom23(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom25 mLargeViewContentCustom;
        
        private SmallViewContentCustom23 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom25 : WpfCustom
    {
        
        public LargeViewContentCustom25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DirectoryComboBox DirectoryComboBox
        {
            get
            {
                if ((this.mDirectoryComboBox == null))
                {
                    this.mDirectoryComboBox = new DirectoryComboBox(this);
                }
                return this.mDirectoryComboBox;
            }
        }
        
        public WpfRadioButton FilesRadioButton
        {
            get
            {
                if ((this.mFilesRadioButton == null))
                {
                    this.mFilesRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mFilesRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Files";
                    this.mFilesRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFilesRadioButton;
            }
        }
        
        public WpfRadioButton FoldersRadioButton
        {
            get
            {
                if ((this.mFoldersRadioButton == null))
                {
                    this.mFoldersRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mFoldersRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Folders";
                    this.mFoldersRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFoldersRadioButton;
            }
        }
        
        public WpfRadioButton FilesFoldersRadioButton
        {
            get
            {
                if ((this.mFilesFoldersRadioButton == null))
                {
                    this.mFilesFoldersRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mFilesFoldersRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Files & Folders";
                    this.mFilesFoldersRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFilesFoldersRadioButton;
            }
        }
        
        public UserNameComboBox4 UserNameComboBox
        {
            get
            {
                if ((this.mUserNameComboBox == null))
                {
                    this.mUserNameComboBox = new UserNameComboBox4(this);
                }
                return this.mUserNameComboBox;
            }
        }
        
        public WpfEdit PasswordEdit
        {
            get
            {
                if ((this.mPasswordEdit == null))
                {
                    this.mPasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Passwordtxt_AutoID";
                    this.mPasswordEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordEdit;
            }
        }
        
        public PrivateKeyComboBox2 PrivateKeyComboBox
        {
            get
            {
                if ((this.mPrivateKeyComboBox == null))
                {
                    this.mPrivateKeyComboBox = new PrivateKeyComboBox2(this);
                }
                return this.mPrivateKeyComboBox;
            }
        }
        
        public ResultComboBox33 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox33(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom24 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom24(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private DirectoryComboBox mDirectoryComboBox;
        
        private WpfRadioButton mFilesRadioButton;
        
        private WpfRadioButton mFoldersRadioButton;
        
        private WpfRadioButton mFilesFoldersRadioButton;
        
        private UserNameComboBox4 mUserNameComboBox;
        
        private WpfEdit mPasswordEdit;
        
        private PrivateKeyComboBox2 mPrivateKeyComboBox;
        
        private ResultComboBox33 mResultComboBox;
        
        private OnErrorCustom24 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DirectoryComboBox : WpfComboBox
    {
        
        public DirectoryComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directorytxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UserNameComboBox4 : WpfComboBox
    {
        
        public UserNameComboBox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__UserNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PrivateKeyComboBox2 : WpfComboBox
    {
        
        public PrivateKeyComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox33 : WpfComboBox
    {
        
        public ResultComboBox33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom24 : WpfCustom
    {
        
        public OnErrorCustom24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup35 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup35(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup35 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup35 : WpfGroup
    {
        
        public OnErrorGroup35(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox22 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox22(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox22 mErrorVariableComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox22 : WpfComboBox
    {
        
        public ErrorVariableComboBox22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom23 : WpfCustom
    {
        
        public SmallViewContentCustom23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DirectoryComboBox1 DirectoryComboBox
        {
            get
            {
                if ((this.mDirectoryComboBox == null))
                {
                    this.mDirectoryComboBox = new DirectoryComboBox1(this);
                }
                return this.mDirectoryComboBox;
            }
        }
        
        public ResultComboBox34 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox34(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private DirectoryComboBox1 mDirectoryComboBox;
        
        private ResultComboBox34 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DirectoryComboBox1 : WpfComboBox
    {
        
        public DirectoryComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directorytxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox34 : WpfComboBox
    {
        
        public ResultComboBox34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileRead : WpfCustom
    {
        
        public FileRead(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ReadFileDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Read File(ReadFileDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom26 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom26(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom24 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom24(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom26 mLargeViewContentCustom;
        
        private SmallViewContentCustom24 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom26 : WpfCustom
    {
        
        public LargeViewContentCustom26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileNameComboBox1 FileNameComboBox
        {
            get
            {
                if ((this.mFileNameComboBox == null))
                {
                    this.mFileNameComboBox = new FileNameComboBox1(this);
                }
                return this.mFileNameComboBox;
            }
        }
        
        public UserNameComboBox5 UserNameComboBox
        {
            get
            {
                if ((this.mUserNameComboBox == null))
                {
                    this.mUserNameComboBox = new UserNameComboBox5(this);
                }
                return this.mUserNameComboBox;
            }
        }
        
        public WpfEdit PasswordEdit
        {
            get
            {
                if ((this.mPasswordEdit == null))
                {
                    this.mPasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Passwordtxt_AutoID";
                    this.mPasswordEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordEdit;
            }
        }
        
        public PrivateKeyComboBox3 PrivateKeyComboBox
        {
            get
            {
                if ((this.mPrivateKeyComboBox == null))
                {
                    this.mPrivateKeyComboBox = new PrivateKeyComboBox3(this);
                }
                return this.mPrivateKeyComboBox;
            }
        }
        
        public ResultComboBox35 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox35(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom25 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom25(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private FileNameComboBox1 mFileNameComboBox;
        
        private UserNameComboBox5 mUserNameComboBox;
        
        private WpfEdit mPasswordEdit;
        
        private PrivateKeyComboBox3 mPrivateKeyComboBox;
        
        private ResultComboBox35 mResultComboBox;
        
        private OnErrorCustom25 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileNameComboBox1 : WpfComboBox
    {
        
        public FileNameComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UserNameComboBox5 : WpfComboBox
    {
        
        public UserNameComboBox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__UserNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PrivateKeyComboBox3 : WpfComboBox
    {
        
        public PrivateKeyComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileNametxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox35 : WpfComboBox
    {
        
        public ResultComboBox35(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom25 : WpfCustom
    {
        
        public OnErrorCustom25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup36 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup36(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup36 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup36 : WpfGroup
    {
        
        public OnErrorGroup36(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox23 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox23(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox22 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox22(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox23 mErrorVariableComboBox;
        
        private WebServiceComboBox22 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox23 : WpfComboBox
    {
        
        public ErrorVariableComboBox23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox22 : WpfComboBox
    {
        
        public WebServiceComboBox22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom24 : WpfCustom
    {
        
        public SmallViewContentCustom24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileNameComboBox2 FileNameComboBox
        {
            get
            {
                if ((this.mFileNameComboBox == null))
                {
                    this.mFileNameComboBox = new FileNameComboBox2(this);
                }
                return this.mFileNameComboBox;
            }
        }
        
        public ResultComboBox36 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox36(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private FileNameComboBox2 mFileNameComboBox;
        
        private ResultComboBox36 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileNameComboBox2 : WpfComboBox
    {
        
        public FileNameComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox36 : WpfComboBox
    {
        
        public ResultComboBox36(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileWrite : WpfCustom
    {
        
        public FileWrite(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WriteFileDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Write File(WriteFileDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom27 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom27(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom25 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom25(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom27 mLargeViewContentCustom;
        
        private SmallViewContentCustom25 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom27 : WpfCustom
    {
        
        public LargeViewContentCustom27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileNameComboBox3 FileNameComboBox
        {
            get
            {
                if ((this.mFileNameComboBox == null))
                {
                    this.mFileNameComboBox = new FileNameComboBox3(this);
                }
                return this.mFileNameComboBox;
            }
        }
        
        public WpfRadioButton OverwriteRadioButton
        {
            get
            {
                if ((this.mOverwriteRadioButton == null))
                {
                    this.mOverwriteRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mOverwriteRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Overwrite";
                    this.mOverwriteRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOverwriteRadioButton;
            }
        }
        
        public WpfRadioButton AppendTopRadioButton
        {
            get
            {
                if ((this.mAppendTopRadioButton == null))
                {
                    this.mAppendTopRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mAppendTopRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Append Top";
                    this.mAppendTopRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAppendTopRadioButton;
            }
        }
        
        public WpfRadioButton AppendBottomRadioButton
        {
            get
            {
                if ((this.mAppendBottomRadioButton == null))
                {
                    this.mAppendBottomRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mAppendBottomRadioButton.SearchProperties[WpfRadioButton.PropertyNames.Name] = "Append Bottom";
                    this.mAppendBottomRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAppendBottomRadioButton;
            }
        }
        
        public ContentsComboBox ContentsComboBox
        {
            get
            {
                if ((this.mContentsComboBox == null))
                {
                    this.mContentsComboBox = new ContentsComboBox(this);
                }
                return this.mContentsComboBox;
            }
        }
        
        public UserNameComboBox6 UserNameComboBox
        {
            get
            {
                if ((this.mUserNameComboBox == null))
                {
                    this.mUserNameComboBox = new UserNameComboBox6(this);
                }
                return this.mUserNameComboBox;
            }
        }
        
        public WpfEdit PasswordEdit
        {
            get
            {
                if ((this.mPasswordEdit == null))
                {
                    this.mPasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Passwordtxt_AutoID";
                    this.mPasswordEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordEdit;
            }
        }
        
        public PrivateKeyComboBox4 PrivateKeyComboBox
        {
            get
            {
                if ((this.mPrivateKeyComboBox == null))
                {
                    this.mPrivateKeyComboBox = new PrivateKeyComboBox4(this);
                }
                return this.mPrivateKeyComboBox;
            }
        }
        
        public ResultComboBox37 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox37(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom26 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom26(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private FileNameComboBox3 mFileNameComboBox;
        
        private WpfRadioButton mOverwriteRadioButton;
        
        private WpfRadioButton mAppendTopRadioButton;
        
        private WpfRadioButton mAppendBottomRadioButton;
        
        private ContentsComboBox mContentsComboBox;
        
        private UserNameComboBox6 mUserNameComboBox;
        
        private WpfEdit mPasswordEdit;
        
        private PrivateKeyComboBox4 mPrivateKeyComboBox;
        
        private ResultComboBox37 mResultComboBox;
        
        private OnErrorCustom26 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileNameComboBox3 : WpfComboBox
    {
        
        public FileNameComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ContentsComboBox : WpfComboBox
    {
        
        public ContentsComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Contentstxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UserNameComboBox6 : WpfComboBox
    {
        
        public UserNameComboBox6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__UserNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PrivateKeyComboBox4 : WpfComboBox
    {
        
        public PrivateKeyComboBox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox37 : WpfComboBox
    {
        
        public ResultComboBox37(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom26 : WpfCustom
    {
        
        public OnErrorCustom26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup37 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup37(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup37 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup37 : WpfGroup
    {
        
        public OnErrorGroup37(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox24 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox24(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox23 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox23(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox24 mErrorVariableComboBox;
        
        private WebServiceComboBox23 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox24 : WpfComboBox
    {
        
        public ErrorVariableComboBox24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox23 : WpfComboBox
    {
        
        public WebServiceComboBox23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom25 : WpfCustom
    {
        
        public SmallViewContentCustom25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileNameComboBox4 FileNameComboBox
        {
            get
            {
                if ((this.mFileNameComboBox == null))
                {
                    this.mFileNameComboBox = new FileNameComboBox4(this);
                }
                return this.mFileNameComboBox;
            }
        }
        
        public ContentsComboBox1 ContentsComboBox
        {
            get
            {
                if ((this.mContentsComboBox == null))
                {
                    this.mContentsComboBox = new ContentsComboBox1(this);
                }
                return this.mContentsComboBox;
            }
        }
        
        public ResultComboBox38 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox38(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private FileNameComboBox4 mFileNameComboBox;
        
        private ContentsComboBox1 mContentsComboBox;
        
        private ResultComboBox38 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileNameComboBox4 : WpfComboBox
    {
        
        public FileNameComboBox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ContentsComboBox1 : WpfComboBox
    {
        
        public ContentsComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Contentstxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox38 : WpfComboBox
    {
        
        public ResultComboBox38(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PathRename : WpfCustom
    {
        
        public PathRename(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RenameDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Rename(RenameDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom28 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom28(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom26 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom26(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom28 mLargeViewContentCustom;
        
        private SmallViewContentCustom26 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom28 : WpfCustom
    {
        
        public LargeViewContentCustom28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileOrFolderComboBox7 FileOrFolderComboBox
        {
            get
            {
                if ((this.mFileOrFolderComboBox == null))
                {
                    this.mFileOrFolderComboBox = new FileOrFolderComboBox7(this);
                }
                return this.mFileOrFolderComboBox;
            }
        }
        
        public UserNameComboBox7 UserNameComboBox
        {
            get
            {
                if ((this.mUserNameComboBox == null))
                {
                    this.mUserNameComboBox = new UserNameComboBox7(this);
                }
                return this.mUserNameComboBox;
            }
        }
        
        public WpfEdit PasswordEdit
        {
            get
            {
                if ((this.mPasswordEdit == null))
                {
                    this.mPasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Passwordtxt_AutoID";
                    this.mPasswordEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordEdit;
            }
        }
        
        public PrivateKeyComboBox5 PrivateKeyComboBox
        {
            get
            {
                if ((this.mPrivateKeyComboBox == null))
                {
                    this.mPrivateKeyComboBox = new PrivateKeyComboBox5(this);
                }
                return this.mPrivateKeyComboBox;
            }
        }
        
        public NewNameComboBox NewNameComboBox
        {
            get
            {
                if ((this.mNewNameComboBox == null))
                {
                    this.mNewNameComboBox = new NewNameComboBox(this);
                }
                return this.mNewNameComboBox;
            }
        }
        
        public NewFileUserNameComboBox NewFileUserNameComboBox
        {
            get
            {
                if ((this.mNewFileUserNameComboBox == null))
                {
                    this.mNewFileUserNameComboBox = new NewFileUserNameComboBox(this);
                }
                return this.mNewFileUserNameComboBox;
            }
        }
        
        public WpfEdit NewFilePasswordEdit
        {
            get
            {
                if ((this.mNewFilePasswordEdit == null))
                {
                    this.mNewFilePasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mNewFilePasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Passwordtxt_AutoID";
                    this.mNewFilePasswordEdit.SearchProperties[WpfEdit.PropertyNames.Instance] = "2";
                    this.mNewFilePasswordEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewFilePasswordEdit;
            }
        }
        
        public NewFilePrivateKeyComboBox NewFilePrivateKeyComboBox
        {
            get
            {
                if ((this.mNewFilePrivateKeyComboBox == null))
                {
                    this.mNewFilePrivateKeyComboBox = new NewFilePrivateKeyComboBox(this);
                }
                return this.mNewFilePrivateKeyComboBox;
            }
        }
        
        public WpfCheckBox OverwriteCheckBox
        {
            get
            {
                if ((this.mOverwriteCheckBox == null))
                {
                    this.mOverwriteCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOverwriteCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Overwrite";
                    this.mOverwriteCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOverwriteCheckBox;
            }
        }
        
        public ResultComboBox39 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox39(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom27 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom27(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private FileOrFolderComboBox7 mFileOrFolderComboBox;
        
        private UserNameComboBox7 mUserNameComboBox;
        
        private WpfEdit mPasswordEdit;
        
        private PrivateKeyComboBox5 mPrivateKeyComboBox;
        
        private NewNameComboBox mNewNameComboBox;
        
        private NewFileUserNameComboBox mNewFileUserNameComboBox;
        
        private WpfEdit mNewFilePasswordEdit;
        
        private NewFilePrivateKeyComboBox mNewFilePrivateKeyComboBox;
        
        private WpfCheckBox mOverwriteCheckBox;
        
        private ResultComboBox39 mResultComboBox;
        
        private OnErrorCustom27 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileOrFolderComboBox7 : WpfComboBox
    {
        
        public FileOrFolderComboBox7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UserNameComboBox7 : WpfComboBox
    {
        
        public UserNameComboBox7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__UserNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PrivateKeyComboBox5 : WpfComboBox
    {
        
        public PrivateKeyComboBox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewNameComboBox : WpfComboBox
    {
        
        public NewNameComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__NewNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewFileUserNameComboBox : WpfComboBox
    {
        
        public NewFileUserNameComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__UserNametxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewFilePrivateKeyComboBox : WpfComboBox
    {
        
        public NewFilePrivateKeyComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox39 : WpfComboBox
    {
        
        public ResultComboBox39(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom27 : WpfCustom
    {
        
        public OnErrorCustom27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup38 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup38(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup38 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup38 : WpfGroup
    {
        
        public OnErrorGroup38(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox25 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox25(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox24 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox24(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox25 mErrorVariableComboBox;
        
        private WebServiceComboBox24 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox25 : WpfComboBox
    {
        
        public ErrorVariableComboBox25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox24 : WpfComboBox
    {
        
        public WebServiceComboBox24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom26 : WpfCustom
    {
        
        public SmallViewContentCustom26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileOrFolderComboBox8 FileOrFolderComboBox
        {
            get
            {
                if ((this.mFileOrFolderComboBox == null))
                {
                    this.mFileOrFolderComboBox = new FileOrFolderComboBox8(this);
                }
                return this.mFileOrFolderComboBox;
            }
        }
        
        public NewNameComboBox1 NewNameComboBox
        {
            get
            {
                if ((this.mNewNameComboBox == null))
                {
                    this.mNewNameComboBox = new NewNameComboBox1(this);
                }
                return this.mNewNameComboBox;
            }
        }
        
        public ResultComboBox40 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox40(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private FileOrFolderComboBox8 mFileOrFolderComboBox;
        
        private NewNameComboBox1 mNewNameComboBox;
        
        private ResultComboBox40 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileOrFolderComboBox8 : WpfComboBox
    {
        
        public FileOrFolderComboBox8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewNameComboBox1 : WpfComboBox
    {
        
        public NewNameComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__NewNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox40 : WpfComboBox
    {
        
        public ResultComboBox40(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UnZip1 : WpfCustom
    {
        
        public UnZip1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UnzipDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Unzip(UnzipDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom29 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom29(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom27 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom27(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom29 mLargeViewContentCustom;
        
        private SmallViewContentCustom27 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom29 : WpfCustom
    {
        
        public LargeViewContentCustom29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UnZipNameComboBox UnZipNameComboBox
        {
            get
            {
                if ((this.mUnZipNameComboBox == null))
                {
                    this.mUnZipNameComboBox = new UnZipNameComboBox(this);
                }
                return this.mUnZipNameComboBox;
            }
        }
        
        public UserNameComboBox8 UserNameComboBox
        {
            get
            {
                if ((this.mUserNameComboBox == null))
                {
                    this.mUserNameComboBox = new UserNameComboBox8(this);
                }
                return this.mUserNameComboBox;
            }
        }
        
        public WpfEdit PasswordEdit
        {
            get
            {
                if ((this.mPasswordEdit == null))
                {
                    this.mPasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Passwordtxt_AutoID";
                    this.mPasswordEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordEdit;
            }
        }
        
        public PrivateKeyComboBox6 PrivateKeyComboBox
        {
            get
            {
                if ((this.mPrivateKeyComboBox == null))
                {
                    this.mPrivateKeyComboBox = new PrivateKeyComboBox6(this);
                }
                return this.mPrivateKeyComboBox;
            }
        }
        
        public DestinationComboBox4 DestinationComboBox
        {
            get
            {
                if ((this.mDestinationComboBox == null))
                {
                    this.mDestinationComboBox = new DestinationComboBox4(this);
                }
                return this.mDestinationComboBox;
            }
        }
        
        public UnZipUserNameComboBox UnZipUserNameComboBox
        {
            get
            {
                if ((this.mUnZipUserNameComboBox == null))
                {
                    this.mUnZipUserNameComboBox = new UnZipUserNameComboBox(this);
                }
                return this.mUnZipUserNameComboBox;
            }
        }
        
        public WpfEdit UnZipPasswordEdit
        {
            get
            {
                if ((this.mUnZipPasswordEdit == null))
                {
                    this.mUnZipPasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUnZipPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Passwordtxt_AutoID";
                    this.mUnZipPasswordEdit.SearchProperties[WpfEdit.PropertyNames.Instance] = "2";
                    this.mUnZipPasswordEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnZipPasswordEdit;
            }
        }
        
        public UnZipPrivateKeyComboBox UnZipPrivateKeyComboBox
        {
            get
            {
                if ((this.mUnZipPrivateKeyComboBox == null))
                {
                    this.mUnZipPrivateKeyComboBox = new UnZipPrivateKeyComboBox(this);
                }
                return this.mUnZipPrivateKeyComboBox;
            }
        }
        
        public WpfCheckBox OverwriteCheckBox
        {
            get
            {
                if ((this.mOverwriteCheckBox == null))
                {
                    this.mOverwriteCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOverwriteCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Overwrite";
                    this.mOverwriteCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOverwriteCheckBox;
            }
        }
        
        public WpfEdit ArchivePassword
        {
            get
            {
                if ((this.mArchivePassword == null))
                {
                    this.mArchivePassword = new WpfEdit(this);
                    #region Search Criteria
                    this.mArchivePassword.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__ArchivePasswordtxt_AutoID";
                    this.mArchivePassword.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mArchivePassword;
            }
        }
        
        public ResultComboBox41 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox41(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public OnErrorCustom28 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom28(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private UnZipNameComboBox mUnZipNameComboBox;
        
        private UserNameComboBox8 mUserNameComboBox;
        
        private WpfEdit mPasswordEdit;
        
        private PrivateKeyComboBox6 mPrivateKeyComboBox;
        
        private DestinationComboBox4 mDestinationComboBox;
        
        private UnZipUserNameComboBox mUnZipUserNameComboBox;
        
        private WpfEdit mUnZipPasswordEdit;
        
        private UnZipPrivateKeyComboBox mUnZipPrivateKeyComboBox;
        
        private WpfCheckBox mOverwriteCheckBox;
        
        private WpfEdit mArchivePassword;
        
        private ResultComboBox41 mResultComboBox;
        
        private OnErrorCustom28 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UnZipNameComboBox : WpfComboBox
    {
        
        public UnZipNameComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__ZipNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UserNameComboBox8 : WpfComboBox
    {
        
        public UserNameComboBox8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__UserNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PrivateKeyComboBox6 : WpfComboBox
    {
        
        public PrivateKeyComboBox6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DestinationComboBox4 : WpfComboBox
    {
        
        public DestinationComboBox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Destinationtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UnZipUserNameComboBox : WpfComboBox
    {
        
        public UnZipUserNameComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__UserNametxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UnZipPrivateKeyComboBox : WpfComboBox
    {
        
        public UnZipPrivateKeyComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox41 : WpfComboBox
    {
        
        public ResultComboBox41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom28 : WpfCustom
    {
        
        public OnErrorCustom28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup39 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup39(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup39 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup39 : WpfGroup
    {
        
        public OnErrorGroup39(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox26 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox26(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox25 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox25(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox26 mErrorVariableComboBox;
        
        private WebServiceComboBox25 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox26 : WpfComboBox
    {
        
        public ErrorVariableComboBox26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox25 : WpfComboBox
    {
        
        public WebServiceComboBox25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom27 : WpfCustom
    {
        
        public SmallViewContentCustom27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UnZipNameComboBox1 UnZipNameComboBox
        {
            get
            {
                if ((this.mUnZipNameComboBox == null))
                {
                    this.mUnZipNameComboBox = new UnZipNameComboBox1(this);
                }
                return this.mUnZipNameComboBox;
            }
        }
        
        public ResultComboBox42 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox42(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public DestinationComboBox5 DestinationComboBox
        {
            get
            {
                if ((this.mDestinationComboBox == null))
                {
                    this.mDestinationComboBox = new DestinationComboBox5(this);
                }
                return this.mDestinationComboBox;
            }
        }
        #endregion
        
        #region Fields
        private UnZipNameComboBox1 mUnZipNameComboBox;
        
        private ResultComboBox42 mResultComboBox;
        
        private DestinationComboBox5 mDestinationComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UnZipNameComboBox1 : WpfComboBox
    {
        
        public UnZipNameComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__ZipNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox42 : WpfComboBox
    {
        
        public ResultComboBox42(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DestinationComboBox5 : WpfComboBox
    {
        
        public DestinationComboBox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Destinationtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Zip1 : WpfCustom
    {
        
        public Zip1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ZipDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Zip(ZipDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom30 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom30(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom28 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom28(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom30 mLargeViewContentCustom;
        
        private SmallViewContentCustom28 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom30 : WpfCustom
    {
        
        public LargeViewContentCustom30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileOrFolderComboBox9 FileOrFolderComboBox
        {
            get
            {
                if ((this.mFileOrFolderComboBox == null))
                {
                    this.mFileOrFolderComboBox = new FileOrFolderComboBox9(this);
                }
                return this.mFileOrFolderComboBox;
            }
        }
        
        public UserNameComboBox9 UserNameComboBox
        {
            get
            {
                if ((this.mUserNameComboBox == null))
                {
                    this.mUserNameComboBox = new UserNameComboBox9(this);
                }
                return this.mUserNameComboBox;
            }
        }
        
        public WpfEdit PasswordEdit
        {
            get
            {
                if ((this.mPasswordEdit == null))
                {
                    this.mPasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Passwordtxt_AutoID";
                    this.mPasswordEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordEdit;
            }
        }
        
        public PrivateKeyComboBox7 PrivateKeyComboBox
        {
            get
            {
                if ((this.mPrivateKeyComboBox == null))
                {
                    this.mPrivateKeyComboBox = new PrivateKeyComboBox7(this);
                }
                return this.mPrivateKeyComboBox;
            }
        }
        
        public ZipNameComboBox ZipNameComboBox
        {
            get
            {
                if ((this.mZipNameComboBox == null))
                {
                    this.mZipNameComboBox = new ZipNameComboBox(this);
                }
                return this.mZipNameComboBox;
            }
        }
        
        public ZipDestinationUsernComboBox ZipDestinationUsernComboBox
        {
            get
            {
                if ((this.mZipDestinationUsernComboBox == null))
                {
                    this.mZipDestinationUsernComboBox = new ZipDestinationUsernComboBox(this);
                }
                return this.mZipDestinationUsernComboBox;
            }
        }
        
        public WpfEdit ZipDestinationPasswEdit
        {
            get
            {
                if ((this.mZipDestinationPasswEdit == null))
                {
                    this.mZipDestinationPasswEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mZipDestinationPasswEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__DestinationPasswordtxt_AutoID";
                    this.mZipDestinationPasswEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mZipDestinationPasswEdit;
            }
        }
        
        public ZipPrivateKeyComboBox ZipPrivateKeyComboBox
        {
            get
            {
                if ((this.mZipPrivateKeyComboBox == null))
                {
                    this.mZipPrivateKeyComboBox = new ZipPrivateKeyComboBox(this);
                }
                return this.mZipPrivateKeyComboBox;
            }
        }
        
        public WpfCheckBox OverwriteCheckBox
        {
            get
            {
                if ((this.mOverwriteCheckBox == null))
                {
                    this.mOverwriteCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOverwriteCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Overwrite";
                    this.mOverwriteCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOverwriteCheckBox;
            }
        }
        
        public WpfEdit ArchivePasswordtEdit
        {
            get
            {
                if ((this.mArchivePasswordtEdit == null))
                {
                    this.mArchivePasswordtEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mArchivePasswordtEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__ArchivePasswordtxt_AutoID";
                    this.mArchivePasswordtEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mArchivePasswordtEdit;
            }
        }
        
        public SelectedCompressComboBox SelectedCompressComboBox
        {
            get
            {
                if ((this.mSelectedCompressComboBox == null))
                {
                    this.mSelectedCompressComboBox = new SelectedCompressComboBox(this);
                }
                return this.mSelectedCompressComboBox;
            }
        }
        
        public OnErrorCustom29 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom29(this);
                }
                return this.mOnErrorCustom;
            }
        }
        
        public ResultComboBox43 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox43(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private FileOrFolderComboBox9 mFileOrFolderComboBox;
        
        private UserNameComboBox9 mUserNameComboBox;
        
        private WpfEdit mPasswordEdit;
        
        private PrivateKeyComboBox7 mPrivateKeyComboBox;
        
        private ZipNameComboBox mZipNameComboBox;
        
        private ZipDestinationUsernComboBox mZipDestinationUsernComboBox;
        
        private WpfEdit mZipDestinationPasswEdit;
        
        private ZipPrivateKeyComboBox mZipPrivateKeyComboBox;
        
        private WpfCheckBox mOverwriteCheckBox;
        
        private WpfEdit mArchivePasswordtEdit;
        
        private SelectedCompressComboBox mSelectedCompressComboBox;
        
        private OnErrorCustom29 mOnErrorCustom;
        
        private ResultComboBox43 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileOrFolderComboBox9 : WpfComboBox
    {
        
        public FileOrFolderComboBox9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UserNameComboBox9 : WpfComboBox
    {
        
        public UserNameComboBox9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__UserNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PrivateKeyComboBox7 : WpfComboBox
    {
        
        public PrivateKeyComboBox7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ZipNameComboBox : WpfComboBox
    {
        
        public ZipNameComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__ZipNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ZipDestinationUsernComboBox : WpfComboBox
    {
        
        public ZipDestinationUsernComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__DestinationUsernametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ZipPrivateKeyComboBox : WpfComboBox
    {
        
        public ZipPrivateKeyComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectedCompressComboBox : WpfComboBox
    {
        
        public SelectedCompressComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__SelectedCompressionType_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem NoneNoCompression
        {
            get
            {
                if ((this.mNoneNoCompression == null))
                {
                    this.mNoneNoCompression = new WpfListItem(this);
                    #region Search Criteria
                    this.mNoneNoCompression.SearchProperties[WpfListItem.PropertyNames.Name] = "None (No Compression)";
                    this.mNoneNoCompression.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNoneNoCompression;
            }
        }
        
        public WpfListItem NormalDefault
        {
            get
            {
                if ((this.mNormalDefault == null))
                {
                    this.mNormalDefault = new WpfListItem(this);
                    #region Search Criteria
                    this.mNormalDefault.SearchProperties[WpfListItem.PropertyNames.Name] = "Normal (Default)";
                    this.mNormalDefault.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNormalDefault;
            }
        }
        
        public WpfListItem MaxBestCompression
        {
            get
            {
                if ((this.mMaxBestCompression == null))
                {
                    this.mMaxBestCompression = new WpfListItem(this);
                    #region Search Criteria
                    this.mMaxBestCompression.SearchProperties[WpfListItem.PropertyNames.Name] = "Max (Best Compression)";
                    this.mMaxBestCompression.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMaxBestCompression;
            }
        }
        
        public WpfListItem PartialBestSpeed
        {
            get
            {
                if ((this.mPartialBestSpeed == null))
                {
                    this.mPartialBestSpeed = new WpfListItem(this);
                    #region Search Criteria
                    this.mPartialBestSpeed.SearchProperties[WpfListItem.PropertyNames.Name] = "Partial (Best Speed)";
                    this.mPartialBestSpeed.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPartialBestSpeed;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mNoneNoCompression;
        
        private WpfListItem mNormalDefault;
        
        private WpfListItem mMaxBestCompression;
        
        private WpfListItem mPartialBestSpeed;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom29 : WpfCustom
    {
        
        public OnErrorCustom29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup40 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup40(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup40 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup40 : WpfGroup
    {
        
        public OnErrorGroup40(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox27 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox27(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox26 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox26(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox27 mErrorVariableComboBox;
        
        private WebServiceComboBox26 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox27 : WpfComboBox
    {
        
        public ErrorVariableComboBox27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox26 : WpfComboBox
    {
        
        public WebServiceComboBox26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox43 : WpfComboBox
    {
        
        public ResultComboBox43(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom28 : WpfCustom
    {
        
        public SmallViewContentCustom28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FileOrFolderComboBox10 FileOrFolderComboBox
        {
            get
            {
                if ((this.mFileOrFolderComboBox == null))
                {
                    this.mFileOrFolderComboBox = new FileOrFolderComboBox10(this);
                }
                return this.mFileOrFolderComboBox;
            }
        }
        
        public ZipNameComboBox1 ZipNameComboBox
        {
            get
            {
                if ((this.mZipNameComboBox == null))
                {
                    this.mZipNameComboBox = new ZipNameComboBox1(this);
                }
                return this.mZipNameComboBox;
            }
        }
        
        public ResultComboBox44 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox44(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private FileOrFolderComboBox10 mFileOrFolderComboBox;
        
        private ZipNameComboBox1 mZipNameComboBox;
        
        private ResultComboBox44 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileOrFolderComboBox10 : WpfComboBox
    {
        
        public FileOrFolderComboBox10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ZipNameComboBox1 : WpfComboBox
    {
        
        public ZipNameComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__ZipNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox44 : WpfComboBox
    {
        
        public ResultComboBox44(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FindIndex1 : WpfCustom
    {
        
        public FindIndex1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FindIndexDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Find Index(FindIndexDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom31 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom31(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom29 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom29(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom31 mLargeViewContentCustom;
        
        private SmallViewContentCustom29 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom31 : WpfCustom
    {
        
        public LargeViewContentCustom31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox DirectionComboBox
        {
            get
            {
                if ((this.mDirectionComboBox == null))
                {
                    this.mDirectionComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mDirectionComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directioncbx_AutoID";
                    this.mDirectionComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDirectionComboBox;
            }
        }
        
        public CharactersComboBox CharactersComboBox
        {
            get
            {
                if ((this.mCharactersComboBox == null))
                {
                    this.mCharactersComboBox = new CharactersComboBox(this);
                }
                return this.mCharactersComboBox;
            }
        }
        
        public WpfComboBox IndexComboBox
        {
            get
            {
                if ((this.mIndexComboBox == null))
                {
                    this.mIndexComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mIndexComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Indextcbx_AutoID";
                    this.mIndexComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIndexComboBox;
            }
        }
        
        public InFieldComboBox InFieldComboBox
        {
            get
            {
                if ((this.mInFieldComboBox == null))
                {
                    this.mInFieldComboBox = new InFieldComboBox(this);
                }
                return this.mInFieldComboBox;
            }
        }
        
        public OnErrorCustom30 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom30(this);
                }
                return this.mOnErrorCustom;
            }
        }
        
        public ResultComboBox45 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox45(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mDirectionComboBox;
        
        private CharactersComboBox mCharactersComboBox;
        
        private WpfComboBox mIndexComboBox;
        
        private InFieldComboBox mInFieldComboBox;
        
        private OnErrorCustom30 mOnErrorCustom;
        
        private ResultComboBox45 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CharactersComboBox : WpfComboBox
    {
        
        public CharactersComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Characterstxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InFieldComboBox : WpfComboBox
    {
        
        public InFieldComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__InFieldtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom30 : WpfCustom
    {
        
        public OnErrorCustom30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup41 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup41(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup41 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup41 : WpfGroup
    {
        
        public OnErrorGroup41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WebServiceComboBox27 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox27(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public ErrorVariableComboBox28 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox28(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WebServiceComboBox27 mWebServiceComboBox;
        
        private ErrorVariableComboBox28 mErrorVariableComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox27 : WpfComboBox
    {
        
        public WebServiceComboBox27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox28 : WpfComboBox
    {
        
        public ErrorVariableComboBox28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox45 : WpfComboBox
    {
        
        public ResultComboBox45(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom29 : WpfCustom
    {
        
        public SmallViewContentCustom29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResultComboBox46 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox46(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public WpfComboBox DirectionComboBox
        {
            get
            {
                if ((this.mDirectionComboBox == null))
                {
                    this.mDirectionComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mDirectionComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directioncbx_AutoID";
                    this.mDirectionComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDirectionComboBox;
            }
        }
        
        public CharactersComboBox1 CharactersComboBox
        {
            get
            {
                if ((this.mCharactersComboBox == null))
                {
                    this.mCharactersComboBox = new CharactersComboBox1(this);
                }
                return this.mCharactersComboBox;
            }
        }
        
        public WpfComboBox IndexComboBox
        {
            get
            {
                if ((this.mIndexComboBox == null))
                {
                    this.mIndexComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mIndexComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Indextcbx_AutoID";
                    this.mIndexComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIndexComboBox;
            }
        }
        
        public InFieldComboBox1 InFieldComboBox
        {
            get
            {
                if ((this.mInFieldComboBox == null))
                {
                    this.mInFieldComboBox = new InFieldComboBox1(this);
                }
                return this.mInFieldComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ResultComboBox46 mResultComboBox;
        
        private WpfComboBox mDirectionComboBox;
        
        private CharactersComboBox1 mCharactersComboBox;
        
        private WpfComboBox mIndexComboBox;
        
        private InFieldComboBox1 mInFieldComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox46 : WpfComboBox
    {
        
        public ResultComboBox46(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CharactersComboBox1 : WpfComboBox
    {
        
        public CharactersComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Characterstxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InFieldComboBox1 : WpfComboBox
    {
        
        public InFieldComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__InFieldtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Replace1 : WpfCustom
    {
        
        public Replace1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ReplaceDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Replace(ReplaceDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public LargeViewContentCustom32 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom32(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public SmallViewContentCustom30 SmallViewContentCustom
        {
            get
            {
                if ((this.mSmallViewContentCustom == null))
                {
                    this.mSmallViewContentCustom = new SmallViewContentCustom30(this);
                }
                return this.mSmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        
        private LargeViewContentCustom32 mLargeViewContentCustom;
        
        private SmallViewContentCustom30 mSmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom32 : WpfCustom
    {
        
        public LargeViewContentCustom32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InFiledsComboBox InFiledsComboBox
        {
            get
            {
                if ((this.mInFiledsComboBox == null))
                {
                    this.mInFiledsComboBox = new InFiledsComboBox(this);
                }
                return this.mInFiledsComboBox;
            }
        }
        
        public FindComboBox FindComboBox
        {
            get
            {
                if ((this.mFindComboBox == null))
                {
                    this.mFindComboBox = new FindComboBox(this);
                }
                return this.mFindComboBox;
            }
        }
        
        public ReplaceComboBox ReplaceComboBox
        {
            get
            {
                if ((this.mReplaceComboBox == null))
                {
                    this.mReplaceComboBox = new ReplaceComboBox(this);
                }
                return this.mReplaceComboBox;
            }
        }
        
        public ResultComboBox47 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox47(this);
                }
                return this.mResultComboBox;
            }
        }
        
        public UIOnErrorCustom UIOnErrorCustom
        {
            get
            {
                if ((this.mUIOnErrorCustom == null))
                {
                    this.mUIOnErrorCustom = new UIOnErrorCustom(this);
                }
                return this.mUIOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private InFiledsComboBox mInFiledsComboBox;
        
        private FindComboBox mFindComboBox;
        
        private ReplaceComboBox mReplaceComboBox;
        
        private ResultComboBox47 mResultComboBox;
        
        private UIOnErrorCustom mUIOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InFiledsComboBox : WpfComboBox
    {
        
        public InFiledsComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__InFiledstxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FindComboBox : WpfComboBox
    {
        
        public FindComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Findtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReplaceComboBox : WpfComboBox
    {
        
        public ReplaceComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Replacetxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox47 : WpfComboBox
    {
        
        public ResultComboBox47(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOnErrorCustom : WpfCustom
    {
        
        public UIOnErrorCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup42 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup42(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup42 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup42 : WpfGroup
    {
        
        public OnErrorGroup42(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        
        public WebserviceComboBox28 WebserviceComboBox
        {
            get
            {
                if ((this.mWebserviceComboBox == null))
                {
                    this.mWebserviceComboBox = new WebserviceComboBox28(this);
                }
                return this.mWebserviceComboBox;
            }
        }
        
        public ErrorVariableComboBox29 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox29(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mEndthisworkflowCheckBox;
        
        private WebserviceComboBox28 mWebserviceComboBox;
        
        private ErrorVariableComboBox29 mErrorVariableComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebserviceComboBox28 : WpfComboBox
    {
        
        public WebserviceComboBox28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox29 : WpfComboBox
    {
        
        public ErrorVariableComboBox29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallViewContentCustom30 : WpfCustom
    {
        
        public SmallViewContentCustom30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InFiledsComboBox1 InFiledsComboBox
        {
            get
            {
                if ((this.mInFiledsComboBox == null))
                {
                    this.mInFiledsComboBox = new InFiledsComboBox1(this);
                }
                return this.mInFiledsComboBox;
            }
        }
        
        public FindComboBox1 FindComboBox
        {
            get
            {
                if ((this.mFindComboBox == null))
                {
                    this.mFindComboBox = new FindComboBox1(this);
                }
                return this.mFindComboBox;
            }
        }
        
        public ReplaceComboBox1 ReplaceComboBox
        {
            get
            {
                if ((this.mReplaceComboBox == null))
                {
                    this.mReplaceComboBox = new ReplaceComboBox1(this);
                }
                return this.mReplaceComboBox;
            }
        }
        
        public ResultComboBox48 ResultComboBox
        {
            get
            {
                if ((this.mResultComboBox == null))
                {
                    this.mResultComboBox = new ResultComboBox48(this);
                }
                return this.mResultComboBox;
            }
        }
        #endregion
        
        #region Fields
        private InFiledsComboBox1 mInFiledsComboBox;
        
        private FindComboBox1 mFindComboBox;
        
        private ReplaceComboBox1 mReplaceComboBox;
        
        private ResultComboBox48 mResultComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InFiledsComboBox1 : WpfComboBox
    {
        
        public InFiledsComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__InFiledstxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FindComboBox1 : WpfComboBox
    {
        
        public FindComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Findtxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReplaceComboBox1 : WpfComboBox
    {
        
        public ReplaceComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Replacetxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultComboBox48 : WpfComboBox
    {
        
        public ResultComboBox48(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Decision1 : WpfCustom
    {
        
        public Decision1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowDecisionDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "FlowDecisionDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit DisplayNameTextBoxEdit
        {
            get
            {
                if ((this.mDisplayNameTextBoxEdit == null))
                {
                    this.mDisplayNameTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mDisplayNameTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DisplayNameTextBox";
                    this.mDisplayNameTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisplayNameTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mDisplayNameTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Switch1 : WpfCustom
    {
        
        public Switch1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConfigureSwitch";
            this.WindowTitles.Add("ActivityDefaultWindow");
            #endregion
        }
        
        #region Properties
        public VariableCombobox6 VariableCombobox
        {
            get
            {
                if ((this.mVariableCombobox == null))
                {
                    this.mVariableCombobox = new VariableCombobox6(this);
                }
                return this.mVariableCombobox;
            }
        }
        
        public WpfEdit DisplayTextEdit
        {
            get
            {
                if ((this.mDisplayTextEdit == null))
                {
                    this.mDisplayTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mDisplayTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DisplayText";
                    this.mDisplayTextEdit.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mDisplayTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private VariableCombobox6 mVariableCombobox;
        
        private WpfEdit mDisplayTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCombobox6 : WpfComboBox
    {
        
        public VariableCombobox6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Result_AutoID";
            this.WindowTitles.Add("ActivityDefaultWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Sequence1 : WpfCustom
    {
        
        public Sequence1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SequenceDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sequence(SequenceDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SequenceLargeView SequenceLargeView
        {
            get
            {
                if ((this.mSequenceLargeView == null))
                {
                    this.mSequenceLargeView = new SequenceLargeView(this);
                }
                return this.mSequenceLargeView;
            }
        }
        #endregion
        
        #region Fields
        private SequenceLargeView mSequenceLargeView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SequenceLargeView : WpfCustom
    {
        
        public SequenceLargeView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SequenceDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sequence(SequenceDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom AddModeNewActivity
        {
            get
            {
                if ((this.mAddModeNewActivity == null))
                {
                    this.mAddModeNewActivity = new WpfCustom(this);
                    #region Search Criteria
                    this.mAddModeNewActivity.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemsPresenter";
                    this.mAddModeNewActivity.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__ActivitiesPresenter_AutoID";
                    this.mAddModeNewActivity.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddModeNewActivity;
            }
        }
        
        public OnErrorCustom31 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom31(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mAddModeNewActivity;
        
        private OnErrorCustom31 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom31 : WpfCustom
    {
        
        public OnErrorCustom31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup43 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup43(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup43 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup43 : WpfGroup
    {
        
        public OnErrorGroup43(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox30 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox30(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox29 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox29(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox UIEndthisworkflowCheckBox
        {
            get
            {
                if ((this.mUIEndthisworkflowCheckBox == null))
                {
                    this.mUIEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mUIEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox30 mErrorVariableComboBox;
        
        private WebServiceComboBox29 mWebServiceComboBox;
        
        private WpfCheckBox mUIEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox30 : WpfComboBox
    {
        
        public ErrorVariableComboBox30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox29 : WpfComboBox
    {
        
        public WebServiceComboBox29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MultiAssign1 : WpfCustom
    {
        
        public MultiAssign1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "MultiAssignDesigner", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallView13 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView13(this);
                }
                return this.mSmallView;
            }
        }
        
        public LargeView16 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView16(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        
        public WpfCustom QuickVariableInputContent
        {
            get
            {
                if ((this.mQuickVariableInputContent == null))
                {
                    this.mQuickVariableInputContent = new WpfCustom(this);
                    #region Search Criteria
                    this.mQuickVariableInputContent.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.QuickVariableInputView";
                    this.mQuickVariableInputContent.SearchProperties[WpfControl.PropertyNames.AutomationId] = "QuickVariableInputContent";
                    this.mQuickVariableInputContent.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQuickVariableInputContent;
            }
        }
        #endregion
        
        #region Fields
        private SmallView13 mSmallView;
        
        private LargeView16 mLargeView;
        
        private WpfButton mDoneButton;
        
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        
        private WpfCustom mQuickVariableInputContent;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView13 : WpfCustom
    {
        
        public SmallView13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid4 DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid4(this);
                }
                return this.mDataGrid;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid4 mDataGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid4 : WpfTable
    {
        
        public DataGrid4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row119 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row119(this);
                }
                return this.mRow1;
            }
        }
        
        public Row23 Row2
        {
            get
            {
                if ((this.mRow2 == null))
                {
                    this.mRow2 = new Row23(this);
                }
                return this.mRow2;
            }
        }
        
        public Row31 Row3
        {
            get
            {
                if ((this.mRow3 == null))
                {
                    this.mRow3 = new Row31(this);
                }
                return this.mRow3;
            }
        }
        #endregion
        
        #region Fields
        private Row119 mRow1;
        
        private Row23 mRow2;
        
        private Row31 mRow3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row119 : WpfRow
    {
        
        public Row119(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_0_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell6 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell6(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell9 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell9(this);
                }
                return this.mValueCell;
            }
        }
        
        public RowNumberCell RowNumberCell
        {
            get
            {
                if ((this.mRowNumberCell == null))
                {
                    this.mRowNumberCell = new RowNumberCell(this);
                }
                return this.mRowNumberCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell6 mVariableCell;
        
        private ValueCell9 mValueCell;
        
        private RowNumberCell mRowNumberCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell6 : WpfCell
    {
        
        public VariableCell6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox4 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox4(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox4 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox4 : WpfComboBox
    {
        
        public Listbox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Textbox Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new Textbox(this);
                }
                return this.mTextbox;
            }
        }
        
        public WpfListItem ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "[[SomeVariable]]";
                    this.mListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private Textbox mTextbox;
        
        private WpfListItem mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Textbox : WpfEdit
    {
        
        public Textbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "[[Variable1]]";
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell9 : WpfCell
    {
        
        public ValueCell9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox5 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox5(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox5 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox5 : WpfComboBox
    {
        
        public Listbox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RowNumberCell : WpfCell
    {
        
        public RowNumberCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "0";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "1";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row23 : WpfRow
    {
        
        public Row23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_1_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell7 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell7(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell10 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell10(this);
                }
                return this.mValueCell;
            }
        }
        
        public RowNumberCell1 RowNumberCell
        {
            get
            {
                if ((this.mRowNumberCell == null))
                {
                    this.mRowNumberCell = new RowNumberCell1(this);
                }
                return this.mRowNumberCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell7 mVariableCell;
        
        private ValueCell10 mValueCell;
        
        private RowNumberCell1 mRowNumberCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell7 : WpfCell
    {
        
        public VariableCell7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox6 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox6(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox6 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox6 : WpfComboBox
    {
        
        public Listbox6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Textbox1 Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new Textbox1(this);
                }
                return this.mTextbox;
            }
        }
        
        public WpfListItem ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "[[SomeVariable]]";
                    this.mListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private Textbox1 mTextbox;
        
        private WpfListItem mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Textbox1 : WpfEdit
    {
        
        public Textbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell10 : WpfCell
    {
        
        public ValueCell10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox7 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox7(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox7 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox7 : WpfComboBox
    {
        
        public Listbox7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RowNumberCell1 : WpfCell
    {
        
        public RowNumberCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "0";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "2";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row31 : WpfRow
    {
        
        public Row31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_2_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell8 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell8(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell11 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell11(this);
                }
                return this.mValueCell;
            }
        }
        
        public RowNumberCell2 RowNumberCell
        {
            get
            {
                if ((this.mRowNumberCell == null))
                {
                    this.mRowNumberCell = new RowNumberCell2(this);
                }
                return this.mRowNumberCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell8 mVariableCell;
        
        private ValueCell11 mValueCell;
        
        private RowNumberCell2 mRowNumberCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell8 : WpfCell
    {
        
        public VariableCell8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox8 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox8(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox8 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox8 : WpfComboBox
    {
        
        public Listbox8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Textbox2 Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new Textbox2(this);
                }
                return this.mTextbox;
            }
        }
        
        public WpfListItem ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "[[SomeVariable]]";
                    this.mListItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private Textbox2 mTextbox;
        
        private WpfListItem mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Textbox2 : WpfEdit
    {
        
        public Textbox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell11 : WpfCell
    {
        
        public ValueCell11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox9 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox9(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox9 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox9 : WpfComboBox
    {
        
        public Listbox9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RowNumberCell2 : WpfCell
    {
        
        public RowNumberCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "0";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "3";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView16 : WpfCustom
    {
        
        public LargeView16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid5 DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid5(this);
                }
                return this.mDataGrid;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid5 mDataGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid5 : WpfTable
    {
        
        public DataGrid5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row120 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row120(this);
                }
                return this.mRow1;
            }
        }
        
        public Row24 Row2
        {
            get
            {
                if ((this.mRow2 == null))
                {
                    this.mRow2 = new Row24(this);
                }
                return this.mRow2;
            }
        }
        
        public Row32 Row3
        {
            get
            {
                if ((this.mRow3 == null))
                {
                    this.mRow3 = new Row32(this);
                }
                return this.mRow3;
            }
        }
        
        public Row4 Row4
        {
            get
            {
                if ((this.mRow4 == null))
                {
                    this.mRow4 = new Row4(this);
                }
                return this.mRow4;
            }
        }
        #endregion
        
        #region Fields
        private Row120 mRow1;
        
        private Row24 mRow2;
        
        private Row32 mRow3;
        
        private Row4 mRow4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row120 : WpfRow
    {
        
        public Row120(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfRow.PropertyNames.AutomationId, "UI_ActivityGridRow_0_AutoID", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell9 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell9(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell12 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell12(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell9 mVariableCell;
        
        private ValueCell12 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell9 : WpfCell
    {
        
        public VariableCell9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox10 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox10(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox10 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox10 : WpfComboBox
    {
        
        public Listbox10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FieldName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell12 : WpfCell
    {
        
        public ValueCell12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AssignValueCombobox AssignValueCombobox
        {
            get
            {
                if ((this.mAssignValueCombobox == null))
                {
                    this.mAssignValueCombobox = new AssignValueCombobox(this);
                }
                return this.mAssignValueCombobox;
            }
        }
        #endregion
        
        #region Fields
        private AssignValueCombobox mAssignValueCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssignValueCombobox : WpfComboBox
    {
        
        public AssignValueCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row24 : WpfRow
    {
        
        public Row24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_1_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell10 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell10(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell13 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell13(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell10 mVariableCell;
        
        private ValueCell13 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell10 : WpfCell
    {
        
        public VariableCell10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox11 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox11(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox11 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox11 : WpfComboBox
    {
        
        public Listbox11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_FieldName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell13 : WpfCell
    {
        
        public ValueCell13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AssignValueCombobox1 AssignValueCombobox
        {
            get
            {
                if ((this.mAssignValueCombobox == null))
                {
                    this.mAssignValueCombobox = new AssignValueCombobox1(this);
                }
                return this.mAssignValueCombobox;
            }
        }
        #endregion
        
        #region Fields
        private AssignValueCombobox1 mAssignValueCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssignValueCombobox1 : WpfComboBox
    {
        
        public AssignValueCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row32 : WpfRow
    {
        
        public Row32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_2_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell11 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell11(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell14 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell14(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell11 mVariableCell;
        
        private ValueCell14 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell11 : WpfCell
    {
        
        public VariableCell11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox12 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox12(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox12 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox12 : WpfComboBox
    {
        
        public Listbox12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row4_FieldName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell14 : WpfCell
    {
        
        public ValueCell14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AssignValueCombobox2 AssignValueCombobox
        {
            get
            {
                if ((this.mAssignValueCombobox == null))
                {
                    this.mAssignValueCombobox = new AssignValueCombobox2(this);
                }
                return this.mAssignValueCombobox;
            }
        }
        #endregion
        
        #region Fields
        private AssignValueCombobox2 mAssignValueCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssignValueCombobox2 : WpfComboBox
    {
        
        public AssignValueCombobox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row4_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row4 : WpfRow
    {
        
        public Row4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_3_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell12 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell12(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell15 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell15(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell12 mVariableCell;
        
        private ValueCell15 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell12 : WpfCell
    {
        
        public VariableCell12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Listbox13 Listbox
        {
            get
            {
                if ((this.mListbox == null))
                {
                    this.mListbox = new Listbox13(this);
                }
                return this.mListbox;
            }
        }
        #endregion
        
        #region Fields
        private Listbox13 mListbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Listbox13 : WpfComboBox
    {
        
        public Listbox13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row5_FieldName_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell15 : WpfCell
    {
        
        public ValueCell15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AssignValueCombobox3 AssignValueCombobox
        {
            get
            {
                if ((this.mAssignValueCombobox == null))
                {
                    this.mAssignValueCombobox = new AssignValueCombobox3(this);
                }
                return this.mAssignValueCombobox;
            }
        }
        #endregion
        
        #region Fields
        private AssignValueCombobox3 mAssignValueCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssignValueCombobox3 : WpfComboBox
    {
        
        public AssignValueCombobox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row5_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebPost : WpfCustom
    {
        
        public WebPost(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WebServicePostDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "POST Web Method(WebServicePostDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ResponseTextbox
        {
            get
            {
                if ((this.mResponseTextbox == null))
                {
                    this.mResponseTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mResponseTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ResponseTextbox";
                    this.mResponseTextbox.SearchProperties[WpfEdit.PropertyNames.Instance] = "2";
                    this.mResponseTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResponseTextbox;
            }
        }
        
        public LargeView17 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView17(this);
                }
                return this.mLargeView;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mResponseTextbox;
        
        private LargeView17 mLargeView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView17 : WpfCustom
    {
        
        public LargeView17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.Name] = "Cancel";
                    this.mCancelButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton PasteButton
        {
            get
            {
                if ((this.mPasteButton == null))
                {
                    this.mPasteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mPasteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PasteButton";
                    this.mPasteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasteButton;
            }
        }
        
        public Table2 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table2(this);
                }
                return this.mTable;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceEditButton";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceNewButton";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public WpfComboBox SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSourcesComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
                    this.mSourcesComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesComboBox;
            }
        }
        
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public WpfCheckBox OutputtoObjectCheckBox
        {
            get
            {
                if ((this.mOutputtoObjectCheckBox == null))
                {
                    this.mOutputtoObjectCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputtoObjectCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "IsObjectCheckBox";
                    this.mOutputtoObjectCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputtoObjectCheckBox;
            }
        }
        
        public QueryStringText2 QueryStringText
        {
            get
            {
                if ((this.mQueryStringText == null))
                {
                    this.mQueryStringText = new QueryStringText2(this);
                }
                return this.mQueryStringText;
            }
        }
        
        public WpfEdit RequestBody
        {
            get
            {
                if ((this.mRequestBody == null))
                {
                    this.mRequestBody = new WpfEdit(this);
                    #region Search Criteria
                    this.mRequestBody.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RequestBody";
                    this.mRequestBody.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRequestBody;
            }
        }
        
        public WpfTable OutputsGridTable
        {
            get
            {
                if ((this.mOutputsGridTable == null))
                {
                    this.mOutputsGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mOutputsGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsMappingDataGrid";
                    this.mOutputsGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputsGridTable;
            }
        }
        
        public WpfEdit RecordSetTextBox
        {
            get
            {
                if ((this.mRecordSetTextBox == null))
                {
                    this.mRecordSetTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordSetTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RecordSetTextBox";
                    this.mRecordSetTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordSetTextBox;
            }
        }
        
        public WpfTable InputDataGridTable
        {
            get
            {
                if ((this.mInputDataGridTable == null))
                {
                    this.mInputDataGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mInputDataGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
                    this.mInputDataGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputDataGridTable;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCancelButton;
        
        private WpfButton mPasteButton;
        
        private Table2 mTable;
        
        private WpfButton mEditSourceButton;
        
        private WpfButton mNewSourceButton;
        
        private WpfComboBox mSourcesComboBox;
        
        private WpfButton mGenerateOutputsButton;
        
        private WpfCheckBox mOutputtoObjectCheckBox;
        
        private QueryStringText2 mQueryStringText;
        
        private WpfEdit mRequestBody;
        
        private WpfTable mOutputsGridTable;
        
        private WpfEdit mRecordSetTextBox;
        
        private WpfTable mInputDataGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table2 : WpfTable
    {
        
        public Table2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "Headers";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemRow17 ItemRow1
        {
            get
            {
                if ((this.mItemRow1 == null))
                {
                    this.mItemRow1 = new ItemRow17(this);
                }
                return this.mItemRow1;
            }
        }
        #endregion
        
        #region Fields
        private ItemRow17 mItemRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemRow17 : WpfRow
    {
        
        public ItemRow17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = null;
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemValueCell2 ItemValueCell
        {
            get
            {
                if ((this.mItemValueCell == null))
                {
                    this.mItemValueCell = new ItemValueCell2(this);
                }
                return this.mItemValueCell;
            }
        }
        
        public HeaderCell2 HeaderCell
        {
            get
            {
                if ((this.mHeaderCell == null))
                {
                    this.mHeaderCell = new HeaderCell2(this);
                }
                return this.mHeaderCell;
            }
        }
        #endregion
        
        #region Fields
        private ItemValueCell2 mItemValueCell;
        
        private HeaderCell2 mHeaderCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemValueCell2 : WpfCell
    {
        
        public ItemValueCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueComboBox9 ValueComboBox
        {
            get
            {
                if ((this.mValueComboBox == null))
                {
                    this.mValueComboBox = new ValueComboBox9(this);
                }
                return this.mValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ValueComboBox9 mValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueComboBox9 : WpfComboBox
    {
        
        public ValueComboBox9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "To supply additional header information in your get request, put the header info " +
                "in here.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderCell2 : WpfCell
    {
        
        public HeaderCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Header";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public HeaderComboBox3 HeaderComboBox
        {
            get
            {
                if ((this.mHeaderComboBox == null))
                {
                    this.mHeaderComboBox = new HeaderComboBox3(this);
                }
                return this.mHeaderComboBox;
            }
        }
        #endregion
        
        #region Fields
        private HeaderComboBox3 mHeaderComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderComboBox3 : WpfComboBox
    {
        
        public HeaderComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "To supply additional header information in your get request, put the header info " +
                "in here.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QueryStringText2 : WpfText
    {
        
        public QueryStringText2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "QueryStringLable";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Error1 : WpfText
    {
        
        public Error1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_Error0_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink Hyperlink
        {
            get
            {
                if ((this.mHyperlink == null))
                {
                    this.mHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebGet : WpfCustom
    {
        
        public WebGet(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WebServiceGetDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "GET Web Method", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeView18 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView18(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfCustom SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new WpfCustom(this);
                    #region Search Criteria
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
                    this.mSmallView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private LargeView18 mLargeView;
        
        private WpfButton mDoneButton;
        
        private WpfCustom mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView18 : WpfCustom
    {
        
        public LargeView18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfTable InputDataGridTable
        {
            get
            {
                if ((this.mInputDataGridTable == null))
                {
                    this.mInputDataGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mInputDataGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
                    this.mInputDataGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputDataGridTable;
            }
        }
        
        public WpfButton TestButton
        {
            get
            {
                if ((this.mTestButton == null))
                {
                    this.mTestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestActionButton";
                    this.mTestButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestButton;
            }
        }
        
        public Table3 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table3(this);
                }
                return this.mTable;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceEditButton";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceNewButton";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public WpfComboBox SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSourcesComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
                    this.mSourcesComboBox.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "Select the webservice host you want to use";
                    this.mSourcesComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesComboBox;
            }
        }
        
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public WpfCheckBox OutputtoObjectCheckBox
        {
            get
            {
                if ((this.mOutputtoObjectCheckBox == null))
                {
                    this.mOutputtoObjectCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputtoObjectCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "IsObjectCheckBox";
                    this.mOutputtoObjectCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputtoObjectCheckBox;
            }
        }
        
        public QueryStringText3 QueryStringText
        {
            get
            {
                if ((this.mQueryStringText == null))
                {
                    this.mQueryStringText = new QueryStringText3(this);
                }
                return this.mQueryStringText;
            }
        }
        
        public WpfTable OutputsGridTable
        {
            get
            {
                if ((this.mOutputsGridTable == null))
                {
                    this.mOutputsGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mOutputsGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsMappingDataGrid";
                    this.mOutputsGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputsGridTable;
            }
        }
        
        public WpfEdit RecordSetTextBox
        {
            get
            {
                if ((this.mRecordSetTextBox == null))
                {
                    this.mRecordSetTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordSetTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RecordSetTextBox";
                    this.mRecordSetTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordSetTextBox;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "GenerateOutputsDoneButton";
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Accept these results and continue";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.Name] = "Cancel";
                    this.mCancelButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton PasteButton
        {
            get
            {
                if ((this.mPasteButton == null))
                {
                    this.mPasteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mPasteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PasteButton";
                    this.mPasteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfTable mInputDataGridTable;
        
        private WpfButton mTestButton;
        
        private Table3 mTable;
        
        private WpfButton mEditSourceButton;
        
        private WpfButton mNewSourceButton;
        
        private WpfComboBox mSourcesComboBox;
        
        private WpfButton mGenerateOutputsButton;
        
        private WpfCheckBox mOutputtoObjectCheckBox;
        
        private QueryStringText3 mQueryStringText;
        
        private WpfTable mOutputsGridTable;
        
        private WpfEdit mRecordSetTextBox;
        
        private WpfButton mDoneButton;
        
        private WpfButton mCancelButton;
        
        private WpfButton mPasteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table3 : WpfTable
    {
        
        public Table3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "Headers";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemRow18 ItemRow1
        {
            get
            {
                if ((this.mItemRow1 == null))
                {
                    this.mItemRow1 = new ItemRow18(this);
                }
                return this.mItemRow1;
            }
        }
        #endregion
        
        #region Fields
        private ItemRow18 mItemRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemRow18 : WpfRow
    {
        
        public ItemRow18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = null;
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemValueCell3 ItemValueCell
        {
            get
            {
                if ((this.mItemValueCell == null))
                {
                    this.mItemValueCell = new ItemValueCell3(this);
                }
                return this.mItemValueCell;
            }
        }
        
        public HeaderCell3 HeaderCell
        {
            get
            {
                if ((this.mHeaderCell == null))
                {
                    this.mHeaderCell = new HeaderCell3(this);
                }
                return this.mHeaderCell;
            }
        }
        #endregion
        
        #region Fields
        private ItemValueCell3 mItemValueCell;
        
        private HeaderCell3 mHeaderCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemValueCell3 : WpfCell
    {
        
        public ItemValueCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueComboBox10 ValueComboBox
        {
            get
            {
                if ((this.mValueComboBox == null))
                {
                    this.mValueComboBox = new ValueComboBox10(this);
                }
                return this.mValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ValueComboBox10 mValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueComboBox10 : WpfComboBox
    {
        
        public ValueComboBox10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "To supply additional header information in your get request, put the header info " +
                "in here.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderCell3 : WpfCell
    {
        
        public HeaderCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Header";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public HeaderComboBox4 HeaderComboBox
        {
            get
            {
                if ((this.mHeaderComboBox == null))
                {
                    this.mHeaderComboBox = new HeaderComboBox4(this);
                }
                return this.mHeaderComboBox;
            }
        }
        #endregion
        
        #region Fields
        private HeaderComboBox4 mHeaderComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderComboBox4 : WpfComboBox
    {
        
        public HeaderComboBox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "To supply additional header information in your get request, put the header info " +
                "in here.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QueryStringText3 : WpfText
    {
        
        public QueryStringText3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "QueryStringLable";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExternalWorkFlow : WpfCustom
    {
        
        public ExternalWorkFlow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "(ServiceDesigner)", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Javascript1 : WpfCustom
    {
        
        public Javascript1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ScriptDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "JavaScript(ScriptDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallView14 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView14(this);
                }
                return this.mSmallView;
            }
        }
        
        public LargeView19 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView19(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private SmallView14 mSmallView;
        
        private LargeView19 mLargeView;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView14 : WpfCustom
    {
        
        public SmallView14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScriptIntellisenseCombobox ScriptIntellisenseCombobox
        {
            get
            {
                if ((this.mScriptIntellisenseCombobox == null))
                {
                    this.mScriptIntellisenseCombobox = new ScriptIntellisenseCombobox(this);
                }
                return this.mScriptIntellisenseCombobox;
            }
        }
        
        public ResultsIntellisenseCombobox2 ResultsIntellisenseCombobox
        {
            get
            {
                if ((this.mResultsIntellisenseCombobox == null))
                {
                    this.mResultsIntellisenseCombobox = new ResultsIntellisenseCombobox2(this);
                }
                return this.mResultsIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private ScriptIntellisenseCombobox mScriptIntellisenseCombobox;
        
        private ResultsIntellisenseCombobox2 mResultsIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScriptIntellisenseCombobox : WpfComboBox
    {
        
        public ScriptIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__txtScript_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultsIntellisenseCombobox2 : WpfComboBox
    {
        
        public ResultsIntellisenseCombobox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView19 : WpfCustom
    {
        
        public LargeView19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScriptIntellisenseCombobox1 ScriptIntellisenseCombobox
        {
            get
            {
                if ((this.mScriptIntellisenseCombobox == null))
                {
                    this.mScriptIntellisenseCombobox = new ScriptIntellisenseCombobox1(this);
                }
                return this.mScriptIntellisenseCombobox;
            }
        }
        
        public AttachmentsIntellisenseCombobox AttachmentsIntellisenseCombobox
        {
            get
            {
                if ((this.mAttachmentsIntellisenseCombobox == null))
                {
                    this.mAttachmentsIntellisenseCombobox = new AttachmentsIntellisenseCombobox(this);
                }
                return this.mAttachmentsIntellisenseCombobox;
            }
        }
        
        public WpfButton AttachFileButton
        {
            get
            {
                if ((this.mAttachFileButton == null))
                {
                    this.mAttachFileButton = new WpfButton(this);
                    #region Search Criteria
                    this.mAttachFileButton.SearchProperties[WpfButton.PropertyNames.Name] = "...";
                    this.mAttachFileButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAttachFileButton;
            }
        }
        
        public WpfCheckBox EscapesequencesCheckBox
        {
            get
            {
                if ((this.mEscapesequencesCheckBox == null))
                {
                    this.mEscapesequencesCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEscapesequencesCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Escape sequences in variables";
                    this.mEscapesequencesCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEscapesequencesCheckBox;
            }
        }
        
        public ResultIntellisenseCombobox ResultIntellisenseCombobox
        {
            get
            {
                if ((this.mResultIntellisenseCombobox == null))
                {
                    this.mResultIntellisenseCombobox = new ResultIntellisenseCombobox(this);
                }
                return this.mResultIntellisenseCombobox;
            }
        }
        
        public OnErrorPane8 OnErrorPane
        {
            get
            {
                if ((this.mOnErrorPane == null))
                {
                    this.mOnErrorPane = new OnErrorPane8(this);
                }
                return this.mOnErrorPane;
            }
        }
        #endregion
        
        #region Fields
        private ScriptIntellisenseCombobox1 mScriptIntellisenseCombobox;
        
        private AttachmentsIntellisenseCombobox mAttachmentsIntellisenseCombobox;
        
        private WpfButton mAttachFileButton;
        
        private WpfCheckBox mEscapesequencesCheckBox;
        
        private ResultIntellisenseCombobox mResultIntellisenseCombobox;
        
        private OnErrorPane8 mOnErrorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScriptIntellisenseCombobox1 : WpfComboBox
    {
        
        public ScriptIntellisenseCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__txtScript_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AttachmentsIntellisenseCombobox : WpfComboBox
    {
        
        public AttachmentsIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__AttachmentsTxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultIntellisenseCombobox : WpfComboBox
    {
        
        public ResultIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorPane8 : WpfCustom
    {
        
        public OnErrorPane8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup44 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup44(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup44 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup44 : WpfGroup
    {
        
        public OnErrorGroup44(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableIntellisenseCombobox ErrorVariableIntellisenseCombobox
        {
            get
            {
                if ((this.mErrorVariableIntellisenseCombobox == null))
                {
                    this.mErrorVariableIntellisenseCombobox = new ErrorVariableIntellisenseCombobox(this);
                }
                return this.mErrorVariableIntellisenseCombobox;
            }
        }
        
        public ExecuteWorkflowIntellisenseCombobox ExecuteWorkflowIntellisenseCombobox
        {
            get
            {
                if ((this.mExecuteWorkflowIntellisenseCombobox == null))
                {
                    this.mExecuteWorkflowIntellisenseCombobox = new ExecuteWorkflowIntellisenseCombobox(this);
                }
                return this.mExecuteWorkflowIntellisenseCombobox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableIntellisenseCombobox mErrorVariableIntellisenseCombobox;
        
        private ExecuteWorkflowIntellisenseCombobox mExecuteWorkflowIntellisenseCombobox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableIntellisenseCombobox : WpfComboBox
    {
        
        public ErrorVariableIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExecuteWorkflowIntellisenseCombobox : WpfComboBox
    {
        
        public ExecuteWorkflowIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Python1 : WpfCustom
    {
        
        public Python1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ScriptDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Python(ScriptDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallView15 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView15(this);
                }
                return this.mSmallView;
            }
        }
        
        public LargeView20 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView20(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private SmallView15 mSmallView;
        
        private LargeView20 mLargeView;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView15 : WpfCustom
    {
        
        public SmallView15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScriptIntellisenseCombobox2 ScriptIntellisenseCombobox
        {
            get
            {
                if ((this.mScriptIntellisenseCombobox == null))
                {
                    this.mScriptIntellisenseCombobox = new ScriptIntellisenseCombobox2(this);
                }
                return this.mScriptIntellisenseCombobox;
            }
        }
        
        public ResultIntellisenseCombobox1 ResultIntellisenseCombobox
        {
            get
            {
                if ((this.mResultIntellisenseCombobox == null))
                {
                    this.mResultIntellisenseCombobox = new ResultIntellisenseCombobox1(this);
                }
                return this.mResultIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private ScriptIntellisenseCombobox2 mScriptIntellisenseCombobox;
        
        private ResultIntellisenseCombobox1 mResultIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScriptIntellisenseCombobox2 : WpfComboBox
    {
        
        public ScriptIntellisenseCombobox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__txtScript_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultIntellisenseCombobox1 : WpfComboBox
    {
        
        public ResultIntellisenseCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView20 : WpfCustom
    {
        
        public LargeView20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AttachmentsIntellisenseCombobox1 AttachmentsIntellisenseCombobox
        {
            get
            {
                if ((this.mAttachmentsIntellisenseCombobox == null))
                {
                    this.mAttachmentsIntellisenseCombobox = new AttachmentsIntellisenseCombobox1(this);
                }
                return this.mAttachmentsIntellisenseCombobox;
            }
        }
        
        public WpfButton AttachFileButton
        {
            get
            {
                if ((this.mAttachFileButton == null))
                {
                    this.mAttachFileButton = new WpfButton(this);
                    #region Search Criteria
                    this.mAttachFileButton.SearchProperties[WpfButton.PropertyNames.Name] = "...";
                    this.mAttachFileButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAttachFileButton;
            }
        }
        
        public WpfCheckBox EscapesequencesCheckBox
        {
            get
            {
                if ((this.mEscapesequencesCheckBox == null))
                {
                    this.mEscapesequencesCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEscapesequencesCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Escape sequences in variables";
                    this.mEscapesequencesCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEscapesequencesCheckBox;
            }
        }
        
        public ScriptIntellisenseCombobox3 ScriptIntellisenseCombobox
        {
            get
            {
                if ((this.mScriptIntellisenseCombobox == null))
                {
                    this.mScriptIntellisenseCombobox = new ScriptIntellisenseCombobox3(this);
                }
                return this.mScriptIntellisenseCombobox;
            }
        }
        
        public ResultIntellisenseCombobox2 ResultIntellisenseCombobox
        {
            get
            {
                if ((this.mResultIntellisenseCombobox == null))
                {
                    this.mResultIntellisenseCombobox = new ResultIntellisenseCombobox2(this);
                }
                return this.mResultIntellisenseCombobox;
            }
        }
        
        public OnErrorPane9 OnErrorPane
        {
            get
            {
                if ((this.mOnErrorPane == null))
                {
                    this.mOnErrorPane = new OnErrorPane9(this);
                }
                return this.mOnErrorPane;
            }
        }
        #endregion
        
        #region Fields
        private AttachmentsIntellisenseCombobox1 mAttachmentsIntellisenseCombobox;
        
        private WpfButton mAttachFileButton;
        
        private WpfCheckBox mEscapesequencesCheckBox;
        
        private ScriptIntellisenseCombobox3 mScriptIntellisenseCombobox;
        
        private ResultIntellisenseCombobox2 mResultIntellisenseCombobox;
        
        private OnErrorPane9 mOnErrorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AttachmentsIntellisenseCombobox1 : WpfComboBox
    {
        
        public AttachmentsIntellisenseCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__AttachmentsTxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScriptIntellisenseCombobox3 : WpfComboBox
    {
        
        public ScriptIntellisenseCombobox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__txtScript_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultIntellisenseCombobox2 : WpfComboBox
    {
        
        public ResultIntellisenseCombobox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorPane9 : WpfCustom
    {
        
        public OnErrorPane9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup45 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup45(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup45 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup45 : WpfGroup
    {
        
        public OnErrorGroup45(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableIntellisenseCombobox VariableIntellisenseCombobox
        {
            get
            {
                if ((this.mVariableIntellisenseCombobox == null))
                {
                    this.mVariableIntellisenseCombobox = new VariableIntellisenseCombobox(this);
                }
                return this.mVariableIntellisenseCombobox;
            }
        }
        
        public ExecuteWorkflowIntellisenseCombobox1 ExecuteWorkflowIntellisenseCombobox
        {
            get
            {
                if ((this.mExecuteWorkflowIntellisenseCombobox == null))
                {
                    this.mExecuteWorkflowIntellisenseCombobox = new ExecuteWorkflowIntellisenseCombobox1(this);
                }
                return this.mExecuteWorkflowIntellisenseCombobox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private VariableIntellisenseCombobox mVariableIntellisenseCombobox;
        
        private ExecuteWorkflowIntellisenseCombobox1 mExecuteWorkflowIntellisenseCombobox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableIntellisenseCombobox : WpfComboBox
    {
        
        public VariableIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExecuteWorkflowIntellisenseCombobox1 : WpfComboBox
    {
        
        public ExecuteWorkflowIntellisenseCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Ruby1 : WpfCustom
    {
        
        public Ruby1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ScriptDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Ruby(ScriptDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallView16 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView16(this);
                }
                return this.mSmallView;
            }
        }
        
        public LargeView21 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView21(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private SmallView16 mSmallView;
        
        private LargeView21 mLargeView;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView16 : WpfCustom
    {
        
        public SmallView16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScriptIntellisenseCombobox4 ScriptIntellisenseCombobox
        {
            get
            {
                if ((this.mScriptIntellisenseCombobox == null))
                {
                    this.mScriptIntellisenseCombobox = new ScriptIntellisenseCombobox4(this);
                }
                return this.mScriptIntellisenseCombobox;
            }
        }
        
        public ResultIntellisenseCombobox3 ResultIntellisenseCombobox
        {
            get
            {
                if ((this.mResultIntellisenseCombobox == null))
                {
                    this.mResultIntellisenseCombobox = new ResultIntellisenseCombobox3(this);
                }
                return this.mResultIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private ScriptIntellisenseCombobox4 mScriptIntellisenseCombobox;
        
        private ResultIntellisenseCombobox3 mResultIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScriptIntellisenseCombobox4 : WpfComboBox
    {
        
        public ScriptIntellisenseCombobox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__txtScript_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultIntellisenseCombobox3 : WpfComboBox
    {
        
        public ResultIntellisenseCombobox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView21 : WpfCustom
    {
        
        public LargeView21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AttachmentsIntellisenseCombobox2 AttachmentsIntellisenseCombobox
        {
            get
            {
                if ((this.mAttachmentsIntellisenseCombobox == null))
                {
                    this.mAttachmentsIntellisenseCombobox = new AttachmentsIntellisenseCombobox2(this);
                }
                return this.mAttachmentsIntellisenseCombobox;
            }
        }
        
        public WpfButton AttachFileButton
        {
            get
            {
                if ((this.mAttachFileButton == null))
                {
                    this.mAttachFileButton = new WpfButton(this);
                    #region Search Criteria
                    this.mAttachFileButton.SearchProperties[WpfButton.PropertyNames.Name] = "...";
                    this.mAttachFileButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAttachFileButton;
            }
        }
        
        public WpfCheckBox EscapesequencesCheckBox
        {
            get
            {
                if ((this.mEscapesequencesCheckBox == null))
                {
                    this.mEscapesequencesCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEscapesequencesCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Escape sequences in variables";
                    this.mEscapesequencesCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEscapesequencesCheckBox;
            }
        }
        
        public ScriptIntellisenseCombobox5 ScriptIntellisenseCombobox
        {
            get
            {
                if ((this.mScriptIntellisenseCombobox == null))
                {
                    this.mScriptIntellisenseCombobox = new ScriptIntellisenseCombobox5(this);
                }
                return this.mScriptIntellisenseCombobox;
            }
        }
        
        public ResultIntellisenseCombobox4 ResultIntellisenseCombobox
        {
            get
            {
                if ((this.mResultIntellisenseCombobox == null))
                {
                    this.mResultIntellisenseCombobox = new ResultIntellisenseCombobox4(this);
                }
                return this.mResultIntellisenseCombobox;
            }
        }
        
        public OnErrorPane10 OnErrorPane
        {
            get
            {
                if ((this.mOnErrorPane == null))
                {
                    this.mOnErrorPane = new OnErrorPane10(this);
                }
                return this.mOnErrorPane;
            }
        }
        #endregion
        
        #region Fields
        private AttachmentsIntellisenseCombobox2 mAttachmentsIntellisenseCombobox;
        
        private WpfButton mAttachFileButton;
        
        private WpfCheckBox mEscapesequencesCheckBox;
        
        private ScriptIntellisenseCombobox5 mScriptIntellisenseCombobox;
        
        private ResultIntellisenseCombobox4 mResultIntellisenseCombobox;
        
        private OnErrorPane10 mOnErrorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AttachmentsIntellisenseCombobox2 : WpfComboBox
    {
        
        public AttachmentsIntellisenseCombobox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__AttachmentsTxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScriptIntellisenseCombobox5 : WpfComboBox
    {
        
        public ScriptIntellisenseCombobox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__txtScript_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultIntellisenseCombobox4 : WpfComboBox
    {
        
        public ResultIntellisenseCombobox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorPane10 : WpfCustom
    {
        
        public OnErrorPane10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup46 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup46(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup46 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup46 : WpfGroup
    {
        
        public OnErrorGroup46(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableIntellisenseCombobox1 ErrorVariableIntellisenseCombobox
        {
            get
            {
                if ((this.mErrorVariableIntellisenseCombobox == null))
                {
                    this.mErrorVariableIntellisenseCombobox = new ErrorVariableIntellisenseCombobox1(this);
                }
                return this.mErrorVariableIntellisenseCombobox;
            }
        }
        
        public ExecuteWorkflowIntellisenseCombobox2 ExecuteWorkflowIntellisenseCombobox
        {
            get
            {
                if ((this.mExecuteWorkflowIntellisenseCombobox == null))
                {
                    this.mExecuteWorkflowIntellisenseCombobox = new ExecuteWorkflowIntellisenseCombobox2(this);
                }
                return this.mExecuteWorkflowIntellisenseCombobox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableIntellisenseCombobox1 mErrorVariableIntellisenseCombobox;
        
        private ExecuteWorkflowIntellisenseCombobox2 mExecuteWorkflowIntellisenseCombobox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableIntellisenseCombobox1 : WpfComboBox
    {
        
        public ErrorVariableIntellisenseCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExecuteWorkflowIntellisenseCombobox2 : WpfComboBox
    {
        
        public ExecuteWorkflowIntellisenseCombobox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectAndApply1 : WpfCustom
    {
        
        public SelectAndApply1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SelectAndApplyDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Select and apply(SelectAndApplyDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallView17 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView17(this);
                }
                return this.mSmallView;
            }
        }
        
        public LargeView22 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView22(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private SmallView17 mSmallView;
        
        private LargeView22 mLargeView;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView17 : WpfCustom
    {
        
        public SmallView17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SelectFromIntellisenseTextbox SelectFromIntellisenseTextbox
        {
            get
            {
                if ((this.mSelectFromIntellisenseTextbox == null))
                {
                    this.mSelectFromIntellisenseTextbox = new SelectFromIntellisenseTextbox(this);
                }
                return this.mSelectFromIntellisenseTextbox;
            }
        }
        
        public AliasIntellisenseTextbox AliasIntellisenseTextbox
        {
            get
            {
                if ((this.mAliasIntellisenseTextbox == null))
                {
                    this.mAliasIntellisenseTextbox = new AliasIntellisenseTextbox(this);
                }
                return this.mAliasIntellisenseTextbox;
            }
        }
        
        public DropActivityHere1 DropActivityHere
        {
            get
            {
                if ((this.mDropActivityHere == null))
                {
                    this.mDropActivityHere = new DropActivityHere1(this);
                }
                return this.mDropActivityHere;
            }
        }
        #endregion
        
        #region Fields
        private SelectFromIntellisenseTextbox mSelectFromIntellisenseTextbox;
        
        private AliasIntellisenseTextbox mAliasIntellisenseTextbox;
        
        private DropActivityHere1 mDropActivityHere;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectFromIntellisenseTextbox : WpfComboBox
    {
        
        public SelectFromIntellisenseTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AliasIntellisenseTextbox : WpfComboBox
    {
        
        public AliasIntellisenseTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileNametxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DropActivityHere1 : WpfCustom
    {
        
        public DropActivityHere1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__DropPoint_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText DropActivityHereFloatingText
        {
            get
            {
                if ((this.mDropActivityHereFloatingText == null))
                {
                    this.mDropActivityHereFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mDropActivityHereFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "Drop Activity Here";
                    this.mDropActivityHereFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDropActivityHereFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mDropActivityHereFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView22 : WpfCustom
    {
        
        public LargeView22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SelectFromIntellisenseTextbox1 SelectFromIntellisenseTextbox
        {
            get
            {
                if ((this.mSelectFromIntellisenseTextbox == null))
                {
                    this.mSelectFromIntellisenseTextbox = new SelectFromIntellisenseTextbox1(this);
                }
                return this.mSelectFromIntellisenseTextbox;
            }
        }
        
        public AliasIntellisenseTextbox1 AliasIntellisenseTextbox
        {
            get
            {
                if ((this.mAliasIntellisenseTextbox == null))
                {
                    this.mAliasIntellisenseTextbox = new AliasIntellisenseTextbox1(this);
                }
                return this.mAliasIntellisenseTextbox;
            }
        }
        
        public DropActivityHere2 DropActivityHere
        {
            get
            {
                if ((this.mDropActivityHere == null))
                {
                    this.mDropActivityHere = new DropActivityHere2(this);
                }
                return this.mDropActivityHere;
            }
        }
        
        public OnErrorPane11 OnErrorPane
        {
            get
            {
                if ((this.mOnErrorPane == null))
                {
                    this.mOnErrorPane = new OnErrorPane11(this);
                }
                return this.mOnErrorPane;
            }
        }
        #endregion
        
        #region Fields
        private SelectFromIntellisenseTextbox1 mSelectFromIntellisenseTextbox;
        
        private AliasIntellisenseTextbox1 mAliasIntellisenseTextbox;
        
        private DropActivityHere2 mDropActivityHere;
        
        private OnErrorPane11 mOnErrorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectFromIntellisenseTextbox1 : WpfComboBox
    {
        
        public SelectFromIntellisenseTextbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileNametxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AliasIntellisenseTextbox1 : WpfComboBox
    {
        
        public AliasIntellisenseTextbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileNametxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITextEdit
        {
            get
            {
                if ((this.mUITextEdit == null))
                {
                    this.mUITextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mUITextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUITextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DropActivityHere2 : WpfCustom
    {
        
        public DropActivityHere2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI__DropPoint_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText DropActivityHereFloatingText
        {
            get
            {
                if ((this.mDropActivityHereFloatingText == null))
                {
                    this.mDropActivityHereFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mDropActivityHereFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "Drop Activity Here";
                    this.mDropActivityHereFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDropActivityHereFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mDropActivityHereFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorPane11 : WpfCustom
    {
        
        public OnErrorPane11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup47 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup47(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup47 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup47 : WpfGroup
    {
        
        public OnErrorGroup47(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableIntellisenseTextbox2 ErrorVariableIntellisenseTextbox
        {
            get
            {
                if ((this.mErrorVariableIntellisenseTextbox == null))
                {
                    this.mErrorVariableIntellisenseTextbox = new ErrorVariableIntellisenseTextbox2(this);
                }
                return this.mErrorVariableIntellisenseTextbox;
            }
        }
        
        public ErrorWorkflowIntellisenseTextbox ErrorWorkflowIntellisenseTextbox
        {
            get
            {
                if ((this.mErrorWorkflowIntellisenseTextbox == null))
                {
                    this.mErrorWorkflowIntellisenseTextbox = new ErrorWorkflowIntellisenseTextbox(this);
                }
                return this.mErrorWorkflowIntellisenseTextbox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableIntellisenseTextbox2 mErrorVariableIntellisenseTextbox;
        
        private ErrorWorkflowIntellisenseTextbox mErrorWorkflowIntellisenseTextbox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableIntellisenseTextbox2 : WpfComboBox
    {
        
        public ErrorVariableIntellisenseTextbox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorWorkflowIntellisenseTextbox : WpfComboBox
    {
        
        public ErrorWorkflowIntellisenseTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ODBCDatabaseActivCustom : WpfCustom
    {
        
        public ODBCDatabaseActivCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ODBCDatabaseDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ODBC Data Source(ODBCDatabaseDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeViewContentCustom33 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom33(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private LargeViewContentCustom33 mLargeViewContentCustom;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom33 : WpfCustom
    {
        
        public LargeViewContentCustom33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSourcesComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
                    this.mSourcesComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesComboBox;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceNewButton";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public WpfButton EdistSourceButton
        {
            get
            {
                if ((this.mEdistSourceButton == null))
                {
                    this.mEdistSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEdistSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceEditButton";
                    this.mEdistSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEdistSourceButton;
            }
        }
        
        public ActionCommandComboBox ActionCommandComboBox
        {
            get
            {
                if ((this.mActionCommandComboBox == null))
                {
                    this.mActionCommandComboBox = new ActionCommandComboBox(this);
                }
                return this.mActionCommandComboBox;
            }
        }
        
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public WpfTable OutputsMappingDataGrTable
        {
            get
            {
                if ((this.mOutputsMappingDataGrTable == null))
                {
                    this.mOutputsMappingDataGrTable = new WpfTable(this);
                    #region Search Criteria
                    this.mOutputsMappingDataGrTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsMappingDataGrid";
                    this.mOutputsMappingDataGrTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputsMappingDataGrTable;
            }
        }
        
        public WpfEdit RecordSetTextBoxEdit
        {
            get
            {
                if ((this.mRecordSetTextBoxEdit == null))
                {
                    this.mRecordSetTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordSetTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RecordSetTextBox";
                    this.mRecordSetTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordSetTextBoxEdit;
            }
        }
        
        public OnErrorCustom32 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom32(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mSourcesComboBox;
        
        private WpfButton mNewSourceButton;
        
        private WpfButton mEdistSourceButton;
        
        private ActionCommandComboBox mActionCommandComboBox;
        
        private WpfButton mGenerateOutputsButton;
        
        private WpfTable mOutputsMappingDataGrTable;
        
        private WpfEdit mRecordSetTextBoxEdit;
        
        private OnErrorCustom32 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ActionCommandComboBox : WpfComboBox
    {
        
        public ActionCommandComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__FileOrFoldertxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom32 : WpfCustom
    {
        
        public OnErrorCustom32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup48 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup48(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup48 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup48 : WpfGroup
    {
        
        public OnErrorGroup48(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox31 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox31(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox30 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox30(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox31 mErrorVariableComboBox;
        
        private WebServiceComboBox30 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox31 : WpfComboBox
    {
        
        public ErrorVariableComboBox31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox30 : WpfComboBox
    {
        
        public WebServiceComboBox30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OracleDatabaseActCustom : WpfCustom
    {
        
        public OracleDatabaseActCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OracleDatabaseDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Oracle Database(OracleDatabaseDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeViewContentCustom34 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom34(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private LargeViewContentCustom34 mLargeViewContentCustom;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom34 : WpfCustom
    {
        
        public LargeViewContentCustom34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox SourcesComboBoxComboBox
        {
            get
            {
                if ((this.mSourcesComboBoxComboBox == null))
                {
                    this.mSourcesComboBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSourcesComboBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
                    this.mSourcesComboBoxComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesComboBoxComboBox;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceNewButton";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceEditButton";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfComboBox ActionsComboBox
        {
            get
            {
                if ((this.mActionsComboBox == null))
                {
                    this.mActionsComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mActionsComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "ActionsComboBox";
                    this.mActionsComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mActionsComboBox;
            }
        }
        
        public WpfTable LargeDataGridTable
        {
            get
            {
                if ((this.mLargeDataGridTable == null))
                {
                    this.mLargeDataGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mLargeDataGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
                    this.mLargeDataGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLargeDataGridTable;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ActionRefreshButton";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public WpfTable OutputsMappingDataGrTable
        {
            get
            {
                if ((this.mOutputsMappingDataGrTable == null))
                {
                    this.mOutputsMappingDataGrTable = new WpfTable(this);
                    #region Search Criteria
                    this.mOutputsMappingDataGrTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsMappingDataGrid";
                    this.mOutputsMappingDataGrTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputsMappingDataGrTable;
            }
        }
        
        public WpfEdit RecordSetTextBoxEdit
        {
            get
            {
                if ((this.mRecordSetTextBoxEdit == null))
                {
                    this.mRecordSetTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordSetTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RecordSetTextBox";
                    this.mRecordSetTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordSetTextBoxEdit;
            }
        }
        
        public OnErrorCustom33 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom33(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mSourcesComboBoxComboBox;
        
        private WpfButton mNewSourceButton;
        
        private WpfButton mEditSourceButton;
        
        private WpfComboBox mActionsComboBox;
        
        private WpfTable mLargeDataGridTable;
        
        private WpfButton mRefreshButton;
        
        private WpfButton mGenerateOutputsButton;
        
        private WpfTable mOutputsMappingDataGrTable;
        
        private WpfEdit mRecordSetTextBoxEdit;
        
        private OnErrorCustom33 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom33 : WpfCustom
    {
        
        public OnErrorCustom33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup49 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup49(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup49 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup49 : WpfGroup
    {
        
        public OnErrorGroup49(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox32 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox32(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox31 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox31(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox32 mErrorVariableComboBox;
        
        private WebServiceComboBox31 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox32 : WpfComboBox
    {
        
        public ErrorVariableComboBox32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox31 : WpfComboBox
    {
        
        public WebServiceComboBox31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PostgreSqlActivitCustom : WpfCustom
    {
        
        public PostgreSqlActivitCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.PostgreSqlDatabaseDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PostgreSQL Database(PostgreSqlDatabaseDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeViewContentCustom35 LargeViewContentCustom
        {
            get
            {
                if ((this.mLargeViewContentCustom == null))
                {
                    this.mLargeViewContentCustom = new LargeViewContentCustom35(this);
                }
                return this.mLargeViewContentCustom;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private LargeViewContentCustom35 mLargeViewContentCustom;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeViewContentCustom35 : WpfCustom
    {
        
        public LargeViewContentCustom35(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SourcesComboBox3 SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new SourcesComboBox3(this);
                }
                return this.mSourcesComboBox;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceNewButton";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceEditButton";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public ActionsComboBox2 ActionsComboBox
        {
            get
            {
                if ((this.mActionsComboBox == null))
                {
                    this.mActionsComboBox = new ActionsComboBox2(this);
                }
                return this.mActionsComboBox;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ActionRefreshButton";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfTable LargeDataGridTable
        {
            get
            {
                if ((this.mLargeDataGridTable == null))
                {
                    this.mLargeDataGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mLargeDataGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
                    this.mLargeDataGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLargeDataGridTable;
            }
        }
        
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public WpfTable OutputsMappingDataGrTable
        {
            get
            {
                if ((this.mOutputsMappingDataGrTable == null))
                {
                    this.mOutputsMappingDataGrTable = new WpfTable(this);
                    #region Search Criteria
                    this.mOutputsMappingDataGrTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsMappingDataGrid";
                    this.mOutputsMappingDataGrTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputsMappingDataGrTable;
            }
        }
        
        public WpfEdit RecordSetTextBoxEdit
        {
            get
            {
                if ((this.mRecordSetTextBoxEdit == null))
                {
                    this.mRecordSetTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordSetTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RecordSetTextBox";
                    this.mRecordSetTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordSetTextBoxEdit;
            }
        }
        
        public OnErrorCustom34 OnErrorCustom
        {
            get
            {
                if ((this.mOnErrorCustom == null))
                {
                    this.mOnErrorCustom = new OnErrorCustom34(this);
                }
                return this.mOnErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private SourcesComboBox3 mSourcesComboBox;
        
        private WpfButton mNewSourceButton;
        
        private WpfButton mEditSourceButton;
        
        private ActionsComboBox2 mActionsComboBox;
        
        private WpfButton mRefreshButton;
        
        private WpfTable mLargeDataGridTable;
        
        private WpfButton mGenerateOutputsButton;
        
        private WpfTable mOutputsMappingDataGrTable;
        
        private WpfEdit mRecordSetTextBoxEdit;
        
        private OnErrorCustom34 mOnErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourcesComboBox3 : WpfComboBox
    {
        
        public SourcesComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem PostgreSourceTest
        {
            get
            {
                if ((this.mPostgreSourceTest == null))
                {
                    this.mPostgreSourceTest = new WpfListItem(this);
                    #region Search Criteria
                    this.mPostgreSourceTest.SearchProperties[WpfListItem.PropertyNames.Name] = "PostgreSourceTest";
                    this.mPostgreSourceTest.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPostgreSourceTest;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mPostgreSourceTest;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ActionsComboBox2 : WpfComboBox
    {
        
        public ActionsComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "ActionsComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem GetCountries
        {
            get
            {
                if ((this.mGetCountries == null))
                {
                    this.mGetCountries = new WpfListItem(this);
                    #region Search Criteria
                    this.mGetCountries.SearchProperties[WpfListItem.PropertyNames.Name] = "get_countries";
                    this.mGetCountries.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGetCountries;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mGetCountries;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorCustom34 : WpfCustom
    {
        
        public OnErrorCustom34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup50 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup50(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup50 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup50 : WpfGroup
    {
        
        public OnErrorGroup50(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ErrorVariableComboBox33 ErrorVariableComboBox
        {
            get
            {
                if ((this.mErrorVariableComboBox == null))
                {
                    this.mErrorVariableComboBox = new ErrorVariableComboBox33(this);
                }
                return this.mErrorVariableComboBox;
            }
        }
        
        public WebServiceComboBox32 WebServiceComboBox
        {
            get
            {
                if ((this.mWebServiceComboBox == null))
                {
                    this.mWebServiceComboBox = new WebServiceComboBox32(this);
                }
                return this.mWebServiceComboBox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private ErrorVariableComboBox33 mErrorVariableComboBox;
        
        private WebServiceComboBox32 mWebServiceComboBox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorVariableComboBox33 : WpfComboBox
    {
        
        public ErrorVariableComboBox33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Variable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebServiceComboBox32 : WpfComboBox
    {
        
        public WebServiceComboBox32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SharepointDownloadFile : WpfCustom
    {
        
        public SharepointDownloadFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharePointFileDownLoadDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SharePoint Download File(SharePointFileDownLoadDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallView18 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView18(this);
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private SmallView18 mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView18 : WpfCustom
    {
        
        public SmallView18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox SelectSourceCombobox
        {
            get
            {
                if ((this.mSelectSourceCombobox == null))
                {
                    this.mSelectSourceCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSelectSourceCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Database_AutoID";
                    this.mSelectSourceCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelectSourceCombobox;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__EditDatabaseCommand_AutoID";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public ServerPathFromIntellisenseCombobox ServerPathFromIntellisenseCombobox
        {
            get
            {
                if ((this.mServerPathFromIntellisenseCombobox == null))
                {
                    this.mServerPathFromIntellisenseCombobox = new ServerPathFromIntellisenseCombobox(this);
                }
                return this.mServerPathFromIntellisenseCombobox;
            }
        }
        
        public LocalPathToIntellisenseCombobox LocalPathToIntellisenseCombobox
        {
            get
            {
                if ((this.mLocalPathToIntellisenseCombobox == null))
                {
                    this.mLocalPathToIntellisenseCombobox = new LocalPathToIntellisenseCombobox(this);
                }
                return this.mLocalPathToIntellisenseCombobox;
            }
        }
        
        public ResultIntellisenseCombobox5 ResultIntellisenseCombobox
        {
            get
            {
                if ((this.mResultIntellisenseCombobox == null))
                {
                    this.mResultIntellisenseCombobox = new ResultIntellisenseCombobox5(this);
                }
                return this.mResultIntellisenseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mSelectSourceCombobox;
        
        private WpfButton mNewSourceButton;
        
        private ServerPathFromIntellisenseCombobox mServerPathFromIntellisenseCombobox;
        
        private LocalPathToIntellisenseCombobox mLocalPathToIntellisenseCombobox;
        
        private ResultIntellisenseCombobox5 mResultIntellisenseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerPathFromIntellisenseCombobox : WpfComboBox
    {
        
        public ServerPathFromIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directorytxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LocalPathToIntellisenseCombobox : WpfComboBox
    {
        
        public LocalPathToIntellisenseCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Directorytxt_AutoID";
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultIntellisenseCombobox5 : WpfComboBox
    {
        
        public ResultIntellisenseCombobox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TopScrollViewerPane : WpfPane
    {
        
        public TopScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "ScrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UnsavedWorkflowLinkText UnsavedWorkflowLinkText
        {
            get
            {
                if ((this.mUnsavedWorkflowLinkText == null))
                {
                    this.mUnsavedWorkflowLinkText = new UnsavedWorkflowLinkText(this);
                }
                return this.mUnsavedWorkflowLinkText;
            }
        }
        #endregion
        
        #region Fields
        private UnsavedWorkflowLinkText mUnsavedWorkflowLinkText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UnsavedWorkflowLinkText : WpfText
    {
        
        public UnsavedWorkflowLinkText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfText.PropertyNames.Name, "Unassigned/Unsaved", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink Hyperlink
        {
            get
            {
                if ((this.mHyperlink == null))
                {
                    this.mHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DBSourceWizardTab : WpfTabPage
    {
        
        public DBSourceWizardTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.ServerProxyLayer.IDbSour" +
                "ce]";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext5 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext5(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfScrollBar VerticalScrollBar
        {
            get
            {
                if ((this.mVerticalScrollBar == null))
                {
                    this.mVerticalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mVerticalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "VerticalScrollBar";
                    this.mVerticalScrollBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVerticalScrollBar;
            }
        }
        
        public WpfScrollBar HorizontalScrollBar
        {
            get
            {
                if ((this.mHorizontalScrollBar == null))
                {
                    this.mHorizontalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mHorizontalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "HorizontalScrollBar";
                    this.mHorizontalScrollBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHorizontalScrollBar;
            }
        }
        
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext5 mWorkSurfaceContext;
        
        private WpfScrollBar mVerticalScrollBar;
        
        private WpfScrollBar mHorizontalScrollBar;
        
        private WpfButton mCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext5 : WpfCustom
    {
        
        public WorkSurfaceContext5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ManageDatabaseSourceControl ManageDatabaseSourceControl
        {
            get
            {
                if ((this.mManageDatabaseSourceControl == null))
                {
                    this.mManageDatabaseSourceControl = new ManageDatabaseSourceControl(this);
                }
                return this.mManageDatabaseSourceControl;
            }
        }
        
        public WpfButton TestConnectionButton
        {
            get
            {
                if ((this.mTestConnectionButton == null))
                {
                    this.mTestConnectionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestConnectionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestConnectionButton";
                    this.mTestConnectionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestConnectionButton;
            }
        }
        
        public ErrorText1 ErrorText
        {
            get
            {
                if ((this.mErrorText == null))
                {
                    this.mErrorText = new ErrorText1(this);
                }
                return this.mErrorText;
            }
        }
        
        public WpfEdit PasswordTextBox
        {
            get
            {
                if ((this.mPasswordTextBox == null))
                {
                    this.mPasswordTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PasswordTextBox";
                    this.mPasswordTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordTextBox;
            }
        }
        
        public WpfEdit UserNameTextBox
        {
            get
            {
                if ((this.mUserNameTextBox == null))
                {
                    this.mUserNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mUserNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UserNameTextBox";
                    this.mUserNameTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUserNameTextBox;
            }
        }
        
        public WpfRadioButton UserRadioButton
        {
            get
            {
                if ((this.mUserRadioButton == null))
                {
                    this.mUserRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUserRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UserRadioButton";
                    this.mUserRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUserRadioButton;
            }
        }
        
        public WpfRadioButton WindowsRadioButton
        {
            get
            {
                if ((this.mWindowsRadioButton == null))
                {
                    this.mWindowsRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mWindowsRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "WindowsRadioButton";
                    this.mWindowsRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWindowsRadioButton;
            }
        }
        
        public WpfButton CancelTestButton
        {
            get
            {
                if ((this.mCancelTestButton == null))
                {
                    this.mCancelTestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelTestButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelTestButton";
                    this.mCancelTestButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancelTestButton;
            }
        }
        
        public WpfImage ConnectionPassedImage
        {
            get
            {
                if ((this.mConnectionPassedImage == null))
                {
                    this.mConnectionPassedImage = new WpfImage(this);
                    #region Search Criteria
                    this.mConnectionPassedImage.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mConnectionPassedImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectionPassedImage;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private ManageDatabaseSourceControl mManageDatabaseSourceControl;
        
        private WpfButton mTestConnectionButton;
        
        private ErrorText1 mErrorText;
        
        private WpfEdit mPasswordTextBox;
        
        private WpfEdit mUserNameTextBox;
        
        private WpfRadioButton mUserRadioButton;
        
        private WpfRadioButton mWindowsRadioButton;
        
        private WpfButton mCancelTestButton;
        
        private WpfImage mConnectionPassedImage;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ManageDatabaseSourceControl : WpfCustom
    {
        
        public ManageDatabaseSourceControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ManageDatabaseSourceControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ServerTypeComboBox ServerTypeComboBox
        {
            get
            {
                if ((this.mServerTypeComboBox == null))
                {
                    this.mServerTypeComboBox = new ServerTypeComboBox(this);
                }
                return this.mServerTypeComboBox;
            }
        }
        
        public ServerComboBox1 ServerComboBox
        {
            get
            {
                if ((this.mServerComboBox == null))
                {
                    this.mServerComboBox = new ServerComboBox1(this);
                }
                return this.mServerComboBox;
            }
        }
        
        public UIDatabaseComboxBoxCustom UIDatabaseComboxBoxCustom
        {
            get
            {
                if ((this.mUIDatabaseComboxBoxCustom == null))
                {
                    this.mUIDatabaseComboxBoxCustom = new UIDatabaseComboxBoxCustom(this);
                }
                return this.mUIDatabaseComboxBoxCustom;
            }
        }
        
        public WpfButton TestConnectionButton
        {
            get
            {
                if ((this.mTestConnectionButton == null))
                {
                    this.mTestConnectionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestConnectionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestConnectionButton";
                    this.mTestConnectionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestConnectionButton;
            }
        }
        
        public DatabaseCombobox1 DatabaseCombobox
        {
            get
            {
                if ((this.mDatabaseCombobox == null))
                {
                    this.mDatabaseCombobox = new DatabaseCombobox1(this);
                }
                return this.mDatabaseCombobox;
            }
        }
        #endregion
        
        #region Fields
        private ServerTypeComboBox mServerTypeComboBox;
        
        private ServerComboBox1 mServerComboBox;
        
        private UIDatabaseComboxBoxCustom mUIDatabaseComboxBoxCustom;
        
        private WpfButton mTestConnectionButton;
        
        private DatabaseCombobox1 mDatabaseCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerTypeComboBox : WpfCustom
    {
        
        public ServerTypeComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ServerTypeComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ToggleButton
        {
            get
            {
                if ((this.mToggleButton == null))
                {
                    this.mToggleButton = new WpfButton(this);
                    #region Search Criteria
                    this.mToggleButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToggleButton;
            }
        }
        
        public WpfText MicrosoftSQLServer
        {
            get
            {
                if ((this.mMicrosoftSQLServer == null))
                {
                    this.mMicrosoftSQLServer = new WpfText(this);
                    #region Search Criteria
                    this.mMicrosoftSQLServer.SearchProperties[WpfText.PropertyNames.Name] = "Microsoft SQL Server";
                    this.mMicrosoftSQLServer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMicrosoftSQLServer;
            }
        }
        
        public WpfText OracleDatabase
        {
            get
            {
                if ((this.mOracleDatabase == null))
                {
                    this.mOracleDatabase = new WpfText(this);
                    #region Search Criteria
                    this.mOracleDatabase.SearchProperties[WpfText.PropertyNames.Name] = "Oracle Database";
                    this.mOracleDatabase.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOracleDatabase;
            }
        }
        
        public WpfText ODBCDatabase
        {
            get
            {
                if ((this.mODBCDatabase == null))
                {
                    this.mODBCDatabase = new WpfText(this);
                    #region Search Criteria
                    this.mODBCDatabase.SearchProperties[WpfText.PropertyNames.Name] = "ODBC Database";
                    this.mODBCDatabase.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mODBCDatabase;
            }
        }
        
        public WpfText MySqlDatabase
        {
            get
            {
                if ((this.mMySqlDatabase == null))
                {
                    this.mMySqlDatabase = new WpfText(this);
                    #region Search Criteria
                    this.mMySqlDatabase.SearchProperties[WpfText.PropertyNames.Name] = "MySql Database";
                    this.mMySqlDatabase.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMySqlDatabase;
            }
        }
        
        public WpfText PostgreSQLDatabaseText
        {
            get
            {
                if ((this.mPostgreSQLDatabaseText == null))
                {
                    this.mPostgreSQLDatabaseText = new WpfText(this);
                    #region Search Criteria
                    this.mPostgreSQLDatabaseText.SearchProperties[WpfText.PropertyNames.Name] = "PostgreSQL Database";
                    this.mPostgreSQLDatabaseText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPostgreSQLDatabaseText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mToggleButton;
        
        private WpfText mMicrosoftSQLServer;
        
        private WpfText mOracleDatabase;
        
        private WpfText mODBCDatabase;
        
        private WpfText mMySqlDatabase;
        
        private WpfText mPostgreSQLDatabaseText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerComboBox1 : WpfComboBox
    {
        
        public ServerComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "ServerTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem RSAKLFSVRGENDEV
        {
            get
            {
                if ((this.mRSAKLFSVRGENDEV == null))
                {
                    this.mRSAKLFSVRGENDEV = new WpfListItem(this);
                    #region Search Criteria
                    this.mRSAKLFSVRGENDEV.SearchProperties[WpfListItem.PropertyNames.Name] = "RSAKLFSVRGENDEV";
                    this.mRSAKLFSVRGENDEV.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRSAKLFSVRGENDEV;
            }
        }
        
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mRSAKLFSVRGENDEV;
        
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDatabaseComboxBoxCustom : WpfCustom
    {
        
        public UIDatabaseComboxBoxCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DatabaseComboxBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText UIDev2TestingDBText
        {
            get
            {
                if ((this.mUIDev2TestingDBText == null))
                {
                    this.mUIDev2TestingDBText = new WpfText(this);
                    #region Search Criteria
                    this.mUIDev2TestingDBText.SearchProperties[WpfText.PropertyNames.Name] = "Dev2TestingDB";
                    this.mUIDev2TestingDBText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIDev2TestingDBText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIDev2TestingDBText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DatabaseCombobox1 : WpfCustom
    {
        
        public DatabaseCombobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DatabaseComboxBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom DatabaseComboxBoxMsAccess
        {
            get
            {
                if ((this.mDatabaseComboxBoxMsAccess == null))
                {
                    this.mDatabaseComboxBoxMsAccess = new WpfCustom(this);
                    #region Search Criteria
                    this.mDatabaseComboxBoxMsAccess.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
                    this.mDatabaseComboxBoxMsAccess.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DatabaseComboxBox";
                    this.mDatabaseComboxBoxMsAccess.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDatabaseComboxBoxMsAccess;
            }
        }
        
        public WpfText MSAccessDatabaseText
        {
            get
            {
                if ((this.mMSAccessDatabaseText == null))
                {
                    this.mMSAccessDatabaseText = new WpfText(this);
                    #region Search Criteria
                    this.mMSAccessDatabaseText.SearchProperties[WpfText.PropertyNames.Name] = "MS Access Database";
                    this.mMSAccessDatabaseText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMSAccessDatabaseText;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mDatabaseComboxBoxMsAccess;
        
        private WpfText mMSAccessDatabaseText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorText1 : WpfText
    {
        
        public ErrorText1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorTextBlock";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FilesMenu : WpfMenu
    {
        
        public FilesMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.AutomationId] = "filesMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem PositionButton
        {
            get
            {
                if ((this.mPositionButton == null))
                {
                    this.mPositionButton = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mPositionButton.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "PART_FilesMenuItem";
                    this.mPositionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPositionButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mPositionButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DependencyGraphTab : WpfTabPage
    {
        
        public DependencyGraphTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.DependencyVisualization.DependencyVisualiserViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorksurfaceContext6 WorksurfaceContext
        {
            get
            {
                if ((this.mWorksurfaceContext == null))
                {
                    this.mWorksurfaceContext = new WorksurfaceContext6(this);
                }
                return this.mWorksurfaceContext;
            }
        }
        
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WorksurfaceContext6 mWorksurfaceContext;
        
        private WpfButton mCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorksurfaceContext6 : WpfCustom
    {
        
        public WorksurfaceContext6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DependencyView DependencyView
        {
            get
            {
                if ((this.mDependencyView == null))
                {
                    this.mDependencyView = new DependencyView(this);
                }
                return this.mDependencyView;
            }
        }
        #endregion
        
        #region Fields
        private DependencyView mDependencyView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DependencyView : WpfCustom
    {
        
        public DependencyView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DependencyVisualiserView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_DependencyView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewer ScrollViewer
        {
            get
            {
                if ((this.mScrollViewer == null))
                {
                    this.mScrollViewer = new ScrollViewer(this);
                }
                return this.mScrollViewer;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewer mScrollViewer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewer : WpfPane
    {
        
        public ScrollViewer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "UI_TopScrollView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.Name] = "Refresh";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfRadioButton ShowwhatdependsonthisRadioButton
        {
            get
            {
                if ((this.mShowwhatdependsonthisRadioButton == null))
                {
                    this.mShowwhatdependsonthisRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mShowwhatdependsonthisRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "WfDependsOn";
                    this.mShowwhatdependsonthisRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowwhatdependsonthisRadioButton;
            }
        }
        
        public WpfRadioButton ShowwhatthisdependsonRadioButton
        {
            get
            {
                if ((this.mShowwhatthisdependsonRadioButton == null))
                {
                    this.mShowwhatthisdependsonRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mShowwhatthisdependsonRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "DependsOnWf";
                    this.mShowwhatthisdependsonRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowwhatthisdependsonRadioButton;
            }
        }
        
        public NestingLevelsText NestingLevelsText
        {
            get
            {
                if ((this.mNestingLevelsText == null))
                {
                    this.mNestingLevelsText = new NestingLevelsText(this);
                }
                return this.mNestingLevelsText;
            }
        }
        
        public Node1 Node1
        {
            get
            {
                if ((this.mNode1 == null))
                {
                    this.mNode1 = new Node1(this);
                }
                return this.mNode1;
            }
        }
        
        public Node2 Node2
        {
            get
            {
                if ((this.mNode2 == null))
                {
                    this.mNode2 = new Node2(this);
                }
                return this.mNode2;
            }
        }
        
        public Node3 Node3
        {
            get
            {
                if ((this.mNode3 == null))
                {
                    this.mNode3 = new Node3(this);
                }
                return this.mNode3;
            }
        }
        
        public Node4 Node4
        {
            get
            {
                if ((this.mNode4 == null))
                {
                    this.mNode4 = new Node4(this);
                }
                return this.mNode4;
            }
        }
        
        public Node5 Node5
        {
            get
            {
                if ((this.mNode5 == null))
                {
                    this.mNode5 = new Node5(this);
                }
                return this.mNode5;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mRefreshButton;
        
        private WpfRadioButton mShowwhatdependsonthisRadioButton;
        
        private WpfRadioButton mShowwhatthisdependsonRadioButton;
        
        private NestingLevelsText mNestingLevelsText;
        
        private Node1 mNode1;
        
        private Node2 mNode2;
        
        private Node3 mNode3;
        
        private Node4 mNode4;
        
        private Node5 mNode5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NestingLevelsText : WpfText
    {
        
        public NestingLevelsText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Nesting Levels";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Node1 : WpfCustom
    {
        
        public Node1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamNetworkNode";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Nodes";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Node2 : WpfCustom
    {
        
        public Node2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamNetworkNode";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Nodes";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Node3 : WpfCustom
    {
        
        public Node3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamNetworkNode";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Nodes";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Node4 : WpfCustom
    {
        
        public Node4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamNetworkNode";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Nodes";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Node5 : WpfCustom
    {
        
        public Node5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamNetworkNode";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Nodes";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PluginSourceWizardTab : WpfTabPage
    {
        
        public PluginSourceWizardTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.IPluginSource]";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext7 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext7(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext7 mWorkSurfaceContext;
        
        private WpfButton mCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext7 : WpfCustom
    {
        
        public WorkSurfaceContext7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NewPluginSourceWizard NewPluginSourceWizard
        {
            get
            {
                if ((this.mNewPluginSourceWizard == null))
                {
                    this.mNewPluginSourceWizard = new NewPluginSourceWizard(this);
                }
                return this.mNewPluginSourceWizard;
            }
        }
        
        public WpfEdit AssemblyNameTextbox
        {
            get
            {
                if ((this.mAssemblyNameTextbox == null))
                {
                    this.mAssemblyNameTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mAssemblyNameTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "AssemblyNameTextBox";
                    this.mAssemblyNameTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssemblyNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NewPluginSourceWizard mNewPluginSourceWizard;
        
        private WpfEdit mAssemblyNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewPluginSourceWizard : WpfCustom
    {
        
        public NewPluginSourceWizard(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ManagePluginSourceControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewer1 ScrollViewer
        {
            get
            {
                if ((this.mScrollViewer == null))
                {
                    this.mScrollViewer = new ScrollViewer1(this);
                }
                return this.mScrollViewer;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewer1 mScrollViewer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewer1 : WpfPane
    {
        
        public ScrollViewer1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Tree Tree
        {
            get
            {
                if ((this.mTree == null))
                {
                    this.mTree = new Tree(this);
                }
                return this.mTree;
            }
        }
        #endregion
        
        #region Fields
        private Tree mTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Tree : WpfTree
    {
        
        public Tree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem FileSystemTreeItem
        {
            get
            {
                if ((this.mFileSystemTreeItem == null))
                {
                    this.mFileSystemTreeItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mFileSystemTreeItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "File System";
                    this.mFileSystemTreeItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFileSystemTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mFileSystemTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebSourceWizardTab : WpfTabPage
    {
        
        public WebSourceWizardTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.ServerProxyLayer.IWebSer" +
                "viceSource]";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext8 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext8(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext8 mWorkSurfaceContext;
        
        private WpfButton mCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext8 : WpfCustom
    {
        
        public WorkSurfaceContext8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit AddressTextbox
        {
            get
            {
                if ((this.mAddressTextbox == null))
                {
                    this.mAddressTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mAddressTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ServerTextBox";
                    this.mAddressTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddressTextbox;
            }
        }
        
        public WpfButton TestConnectionButton
        {
            get
            {
                if ((this.mTestConnectionButton == null))
                {
                    this.mTestConnectionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestConnectionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestConnectionButton";
                    this.mTestConnectionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestConnectionButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAddressTextbox;
        
        private WpfButton mTestConnectionButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestsTabPage : WpfTabPage
    {
        
        public TestsTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.StudioTestViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TabDescription
        {
            get
            {
                if ((this.mTabDescription == null))
                {
                    this.mTabDescription = new WpfText(this);
                    #region Search Criteria
                    this.mTabDescription.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTabDescription;
            }
        }
        
        public WpfButton CloseTestTabButton
        {
            get
            {
                if ((this.mCloseTestTabButton == null))
                {
                    this.mCloseTestTabButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseTestTabButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseTestTabButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseTestTabButton;
            }
        }
        
        public WorkSurfaceContext9 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext9(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTabDescription;
        
        private WpfButton mCloseTestTabButton;
        
        private WorkSurfaceContext9 mWorkSurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext9 : WpfCustom
    {
        
        public WorkSurfaceContext9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ServiceTestView ServiceTestView
        {
            get
            {
                if ((this.mServiceTestView == null))
                {
                    this.mServiceTestView = new ServiceTestView(this);
                }
                return this.mServiceTestView;
            }
        }
        #endregion
        
        #region Fields
        private ServiceTestView mServiceTestView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServiceTestView : WpfCustom
    {
        
        public ServiceTestView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceTestView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ServiceTestView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UrlText UrlText
        {
            get
            {
                if ((this.mUrlText == null))
                {
                    this.mUrlText = new UrlText(this);
                }
                return this.mUrlText;
            }
        }
        
        public WpfButton RunAllButton
        {
            get
            {
                if ((this.mRunAllButton == null))
                {
                    this.mRunAllButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunAllButton.SearchProperties[WpfButton.PropertyNames.Name] = "Run All";
                    this.mRunAllButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunAllButton;
            }
        }
        
        public TestsListboxList TestsListboxList
        {
            get
            {
                if ((this.mTestsListboxList == null))
                {
                    this.mTestsListboxList = new TestsListboxList(this);
                }
                return this.mTestsListboxList;
            }
        }
        
        public WpfButton DuplicateButton
        {
            get
            {
                if ((this.mDuplicateButton == null))
                {
                    this.mDuplicateButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDuplicateButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDuplicateButton;
            }
        }
        
        public WpfRadioButton WindowsRadioButton
        {
            get
            {
                if ((this.mWindowsRadioButton == null))
                {
                    this.mWindowsRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mWindowsRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "WindowsRadioButton";
                    this.mWindowsRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWindowsRadioButton;
            }
        }
        
        public WpfText TestNameText
        {
            get
            {
                if ((this.mTestNameText == null))
                {
                    this.mTestNameText = new WpfText(this);
                    #region Search Criteria
                    this.mTestNameText.SearchProperties[WpfText.PropertyNames.Name] = "Test Name";
                    this.mTestNameText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestNameText;
            }
        }
        
        public TestInputsTable1 TestInputsTable
        {
            get
            {
                if ((this.mTestInputsTable == null))
                {
                    this.mTestInputsTable = new TestInputsTable1(this);
                }
                return this.mTestInputsTable;
            }
        }
        
        public TestOutputsTable TestOutputsTable
        {
            get
            {
                if ((this.mTestOutputsTable == null))
                {
                    this.mTestOutputsTable = new TestOutputsTable(this);
                }
                return this.mTestOutputsTable;
            }
        }
        
        public WpfRadioButton ErrorRadioButton
        {
            get
            {
                if ((this.mErrorRadioButton == null))
                {
                    this.mErrorRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mErrorRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "ErrorRadioButton";
                    this.mErrorRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mErrorRadioButton;
            }
        }
        
        public WpfRadioButton NoErrorRadioButton
        {
            get
            {
                if ((this.mNoErrorRadioButton == null))
                {
                    this.mNoErrorRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mNoErrorRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "NoErrorRadioButton";
                    this.mNoErrorRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNoErrorRadioButton;
            }
        }
        
        public WpfRadioButton UserRadioButton
        {
            get
            {
                if ((this.mUserRadioButton == null))
                {
                    this.mUserRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUserRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UserRadioButton";
                    this.mUserRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUserRadioButton;
            }
        }
        
        public WpfEdit PasswordTextBoxEdit
        {
            get
            {
                if ((this.mPasswordTextBoxEdit == null))
                {
                    this.mPasswordTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PasswordTextBox";
                    this.mPasswordTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordTextBoxEdit;
            }
        }
        
        public WpfEdit UsernameTextBoxEdit
        {
            get
            {
                if ((this.mUsernameTextBoxEdit == null))
                {
                    this.mUsernameTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUsernameTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UsernameTextBox";
                    this.mUsernameTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUsernameTextBoxEdit;
            }
        }
        
        public WpfText TestUrlText
        {
            get
            {
                if ((this.mTestUrlText == null))
                {
                    this.mTestUrlText = new WpfText(this);
                    #region Search Criteria
                    this.mTestUrlText.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mTestUrlText.SearchProperties[WpfText.PropertyNames.Name] = " ";
                    this.mTestUrlText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestUrlText;
            }
        }
        
        public WpfEdit TestNameTextbox
        {
            get
            {
                if ((this.mTestNameTextbox == null))
                {
                    this.mTestNameTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTestNameTextbox.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mTestNameTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private UrlText mUrlText;
        
        private WpfButton mRunAllButton;
        
        private TestsListboxList mTestsListboxList;
        
        private WpfButton mDuplicateButton;
        
        private WpfRadioButton mWindowsRadioButton;
        
        private WpfText mTestNameText;
        
        private TestInputsTable1 mTestInputsTable;
        
        private TestOutputsTable mTestOutputsTable;
        
        private WpfRadioButton mErrorRadioButton;
        
        private WpfRadioButton mNoErrorRadioButton;
        
        private WpfRadioButton mUserRadioButton;
        
        private WpfEdit mPasswordTextBoxEdit;
        
        private WpfEdit mUsernameTextBoxEdit;
        
        private WpfText mTestUrlText;
        
        private WpfEdit mTestNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UrlText : WpfText
    {
        
        public UrlText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Instance] = "1";
            this.SearchProperties[WpfText.PropertyNames.Name] = " ";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink UrlHyperlink
        {
            get
            {
                if ((this.mUrlHyperlink == null))
                {
                    this.mUrlHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mUrlHyperlink.SearchProperties[WpfHyperlink.PropertyNames.AutomationId] = "RunAllTestsUrl";
                    this.mUrlHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUrlHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mUrlHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestsListboxList : WpfList
    {
        
        public TestsListboxList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "TestsListbox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CreateTest CreateTest
        {
            get
            {
                if ((this.mCreateTest == null))
                {
                    this.mCreateTest = new CreateTest(this);
                }
                return this.mCreateTest;
            }
        }
        
        public Test1 Test1
        {
            get
            {
                if ((this.mTest1 == null))
                {
                    this.mTest1 = new Test1(this);
                }
                return this.mTest1;
            }
        }
        
        public Test2 Test2
        {
            get
            {
                if ((this.mTest2 == null))
                {
                    this.mTest2 = new Test2(this);
                }
                return this.mTest2;
            }
        }
        
        public Test3 Test3
        {
            get
            {
                if ((this.mTest3 == null))
                {
                    this.mTest3 = new Test3(this);
                }
                return this.mTest3;
            }
        }
        
        public Test4 Test4
        {
            get
            {
                if ((this.mTest4 == null))
                {
                    this.mTest4 = new Test4(this);
                }
                return this.mTest4;
            }
        }
        
        public Test5 Test5
        {
            get
            {
                if ((this.mTest5 == null))
                {
                    this.mTest5 = new Test5(this);
                }
                return this.mTest5;
            }
        }
        #endregion
        
        #region Fields
        private CreateTest mCreateTest;
        
        private Test1 mTest1;
        
        private Test2 mTest2;
        
        private Test3 mTest3;
        
        private Test4 mTest4;
        
        private Test5 mTest5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateTest : WpfListItem
    {
        
        public CreateTest(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.DummyServiceTest";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton CreateTestButton
        {
            get
            {
                if ((this.mCreateTestButton == null))
                {
                    this.mCreateTestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCreateTestButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Create a new test";
                    this.mCreateTestButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCreateTestButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCreateTestButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test1 : WpfListItem
    {
        
        public Test1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Instance] = "1";
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ServiceTestModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TestEnabledSelector
        {
            get
            {
                if ((this.mTestEnabledSelector == null))
                {
                    this.mTestEnabledSelector = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTestEnabledSelector.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Enable or Ignore this test";
                    this.mTestEnabledSelector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestEnabledSelector;
            }
        }
        
        public WpfButton RunButton
        {
            get
            {
                if ((this.mRunButton == null))
                {
                    this.mRunButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Run this test";
                    this.mRunButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunButton;
            }
        }
        
        public WpfButton StopButton
        {
            get
            {
                if ((this.mStopButton == null))
                {
                    this.mStopButton = new WpfButton(this);
                    #region Search Criteria
                    this.mStopButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Stop this test";
                    this.mStopButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStopButton;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Delete this test";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        
        public WpfButton DisabledDeleteButton
        {
            get
            {
                if ((this.mDisabledDeleteButton == null))
                {
                    this.mDisabledDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDisabledDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Cannot delete an enabled test";
                    this.mDisabledDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisabledDeleteButton;
            }
        }
        
        public WpfText TestNameDisplay
        {
            get
            {
                if ((this.mTestNameDisplay == null))
                {
                    this.mTestNameDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mTestNameDisplay.SearchProperties[WpfText.PropertyNames.HelpText] = "Test Name";
                    this.mTestNameDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestNameDisplay;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.HelpText] = "Pending";
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Passing
        {
            get
            {
                if ((this.mPassing == null))
                {
                    this.mPassing = new WpfText(this);
                    #region Search Criteria
                    this.mPassing.SearchProperties[WpfText.PropertyNames.HelpText] = "Passed";
                    this.mPassing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassing;
            }
        }
        
        public WpfText Failing
        {
            get
            {
                if ((this.mFailing == null))
                {
                    this.mFailing = new WpfText(this);
                    #region Search Criteria
                    this.mFailing.SearchProperties[WpfText.PropertyNames.HelpText] = "Failed";
                    this.mFailing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailing;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText NeverRunDisplay
        {
            get
            {
                if ((this.mNeverRunDisplay == null))
                {
                    this.mNeverRunDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mNeverRunDisplay.SearchProperties[WpfText.PropertyNames.Name] = "Never run";
                    this.mNeverRunDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNeverRunDisplay;
            }
        }
        
        public WpfText RunTimeDisplay
        {
            get
            {
                if ((this.mRunTimeDisplay == null))
                {
                    this.mRunTimeDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mRunTimeDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunTimeDisplay;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTestEnabledSelector;
        
        private WpfButton mRunButton;
        
        private WpfButton mStopButton;
        
        private WpfButton mDeleteButton;
        
        private WpfButton mDisabledDeleteButton;
        
        private WpfText mTestNameDisplay;
        
        private WpfText mPending;
        
        private WpfText mPassing;
        
        private WpfText mFailing;
        
        private WpfText mInvalid;
        
        private WpfText mNeverRunDisplay;
        
        private WpfText mRunTimeDisplay;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test2 : WpfListItem
    {
        
        public Test2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ServiceTestModel";
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TestEnabledSelector
        {
            get
            {
                if ((this.mTestEnabledSelector == null))
                {
                    this.mTestEnabledSelector = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTestEnabledSelector.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Enable or Ignore this test";
                    this.mTestEnabledSelector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestEnabledSelector;
            }
        }
        
        public WpfButton RunButton
        {
            get
            {
                if ((this.mRunButton == null))
                {
                    this.mRunButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Run this test";
                    this.mRunButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunButton;
            }
        }
        
        public WpfButton StopButton
        {
            get
            {
                if ((this.mStopButton == null))
                {
                    this.mStopButton = new WpfButton(this);
                    #region Search Criteria
                    this.mStopButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Stop this test";
                    this.mStopButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStopButton;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Delete this test";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        
        public WpfButton DisabledDeleteButton
        {
            get
            {
                if ((this.mDisabledDeleteButton == null))
                {
                    this.mDisabledDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDisabledDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Cannot delete an enabled test";
                    this.mDisabledDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisabledDeleteButton;
            }
        }
        
        public WpfText TestNameDisplay
        {
            get
            {
                if ((this.mTestNameDisplay == null))
                {
                    this.mTestNameDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mTestNameDisplay.SearchProperties[WpfText.PropertyNames.HelpText] = "Test Name";
                    this.mTestNameDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestNameDisplay;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.HelpText] = "Pending";
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Passing
        {
            get
            {
                if ((this.mPassing == null))
                {
                    this.mPassing = new WpfText(this);
                    #region Search Criteria
                    this.mPassing.SearchProperties[WpfText.PropertyNames.HelpText] = "Passed";
                    this.mPassing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassing;
            }
        }
        
        public WpfText Failing
        {
            get
            {
                if ((this.mFailing == null))
                {
                    this.mFailing = new WpfText(this);
                    #region Search Criteria
                    this.mFailing.SearchProperties[WpfText.PropertyNames.HelpText] = "Failed";
                    this.mFailing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailing;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText NeverRunDisplay
        {
            get
            {
                if ((this.mNeverRunDisplay == null))
                {
                    this.mNeverRunDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mNeverRunDisplay.SearchProperties[WpfText.PropertyNames.Name] = "Never run";
                    this.mNeverRunDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNeverRunDisplay;
            }
        }
        
        public WpfText RunTimeDisplay
        {
            get
            {
                if ((this.mRunTimeDisplay == null))
                {
                    this.mRunTimeDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mRunTimeDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunTimeDisplay;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTestEnabledSelector;
        
        private WpfButton mRunButton;
        
        private WpfButton mStopButton;
        
        private WpfButton mDeleteButton;
        
        private WpfButton mDisabledDeleteButton;
        
        private WpfText mTestNameDisplay;
        
        private WpfText mPending;
        
        private WpfText mPassing;
        
        private WpfText mFailing;
        
        private WpfText mInvalid;
        
        private WpfText mNeverRunDisplay;
        
        private WpfText mRunTimeDisplay;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test3 : WpfListItem
    {
        
        public Test3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ServiceTestModel";
            this.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TestEnabledSelector
        {
            get
            {
                if ((this.mTestEnabledSelector == null))
                {
                    this.mTestEnabledSelector = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTestEnabledSelector.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Enable or Ignore this test";
                    this.mTestEnabledSelector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestEnabledSelector;
            }
        }
        
        public WpfButton RunButton
        {
            get
            {
                if ((this.mRunButton == null))
                {
                    this.mRunButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Run this test";
                    this.mRunButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunButton;
            }
        }
        
        public WpfButton StopButton
        {
            get
            {
                if ((this.mStopButton == null))
                {
                    this.mStopButton = new WpfButton(this);
                    #region Search Criteria
                    this.mStopButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Stop this test";
                    this.mStopButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStopButton;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Delete this test";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        
        public WpfButton DisabledDeleteButton
        {
            get
            {
                if ((this.mDisabledDeleteButton == null))
                {
                    this.mDisabledDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDisabledDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Cannot delete an enabled test";
                    this.mDisabledDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisabledDeleteButton;
            }
        }
        
        public WpfText TestNameDisplay
        {
            get
            {
                if ((this.mTestNameDisplay == null))
                {
                    this.mTestNameDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mTestNameDisplay.SearchProperties[WpfText.PropertyNames.HelpText] = "Test Name";
                    this.mTestNameDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestNameDisplay;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.HelpText] = "Pending";
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Passing
        {
            get
            {
                if ((this.mPassing == null))
                {
                    this.mPassing = new WpfText(this);
                    #region Search Criteria
                    this.mPassing.SearchProperties[WpfText.PropertyNames.HelpText] = "Passed";
                    this.mPassing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassing;
            }
        }
        
        public WpfText Failing
        {
            get
            {
                if ((this.mFailing == null))
                {
                    this.mFailing = new WpfText(this);
                    #region Search Criteria
                    this.mFailing.SearchProperties[WpfText.PropertyNames.HelpText] = "Failed";
                    this.mFailing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailing;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText NeverRunDisplay
        {
            get
            {
                if ((this.mNeverRunDisplay == null))
                {
                    this.mNeverRunDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mNeverRunDisplay.SearchProperties[WpfText.PropertyNames.Name] = "Never run";
                    this.mNeverRunDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNeverRunDisplay;
            }
        }
        
        public WpfText RunTimeDisplay
        {
            get
            {
                if ((this.mRunTimeDisplay == null))
                {
                    this.mRunTimeDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mRunTimeDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunTimeDisplay;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTestEnabledSelector;
        
        private WpfButton mRunButton;
        
        private WpfButton mStopButton;
        
        private WpfButton mDeleteButton;
        
        private WpfButton mDisabledDeleteButton;
        
        private WpfText mTestNameDisplay;
        
        private WpfText mPending;
        
        private WpfText mPassing;
        
        private WpfText mFailing;
        
        private WpfText mInvalid;
        
        private WpfText mNeverRunDisplay;
        
        private WpfText mRunTimeDisplay;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test4 : WpfListItem
    {
        
        public Test4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ServiceTestModel";
            this.SearchProperties[WpfListItem.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TestEnabledSelector
        {
            get
            {
                if ((this.mTestEnabledSelector == null))
                {
                    this.mTestEnabledSelector = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTestEnabledSelector.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Enable or Ignore this test";
                    this.mTestEnabledSelector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestEnabledSelector;
            }
        }
        
        public WpfButton RunButton
        {
            get
            {
                if ((this.mRunButton == null))
                {
                    this.mRunButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Run this test";
                    this.mRunButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunButton;
            }
        }
        
        public WpfButton StopButton
        {
            get
            {
                if ((this.mStopButton == null))
                {
                    this.mStopButton = new WpfButton(this);
                    #region Search Criteria
                    this.mStopButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Stop this test";
                    this.mStopButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStopButton;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Delete this test";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        
        public WpfButton DisabledDeleteButton
        {
            get
            {
                if ((this.mDisabledDeleteButton == null))
                {
                    this.mDisabledDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDisabledDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Cannot delete an enabled test";
                    this.mDisabledDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisabledDeleteButton;
            }
        }
        
        public WpfText TestNameDisplay
        {
            get
            {
                if ((this.mTestNameDisplay == null))
                {
                    this.mTestNameDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mTestNameDisplay.SearchProperties[WpfText.PropertyNames.HelpText] = "Test Name";
                    this.mTestNameDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestNameDisplay;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.HelpText] = "Pending";
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Passing
        {
            get
            {
                if ((this.mPassing == null))
                {
                    this.mPassing = new WpfText(this);
                    #region Search Criteria
                    this.mPassing.SearchProperties[WpfText.PropertyNames.HelpText] = "Passed";
                    this.mPassing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassing;
            }
        }
        
        public WpfText Failing
        {
            get
            {
                if ((this.mFailing == null))
                {
                    this.mFailing = new WpfText(this);
                    #region Search Criteria
                    this.mFailing.SearchProperties[WpfText.PropertyNames.HelpText] = "Failed";
                    this.mFailing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailing;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText NeverRunDisplay
        {
            get
            {
                if ((this.mNeverRunDisplay == null))
                {
                    this.mNeverRunDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mNeverRunDisplay.SearchProperties[WpfText.PropertyNames.Name] = "Never run";
                    this.mNeverRunDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNeverRunDisplay;
            }
        }
        
        public WpfText RunTimeDisplay
        {
            get
            {
                if ((this.mRunTimeDisplay == null))
                {
                    this.mRunTimeDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mRunTimeDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunTimeDisplay;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTestEnabledSelector;
        
        private WpfButton mRunButton;
        
        private WpfButton mStopButton;
        
        private WpfButton mDeleteButton;
        
        private WpfButton mDisabledDeleteButton;
        
        private WpfText mTestNameDisplay;
        
        private WpfText mPending;
        
        private WpfText mPassing;
        
        private WpfText mFailing;
        
        private WpfText mInvalid;
        
        private WpfText mNeverRunDisplay;
        
        private WpfText mRunTimeDisplay;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test5 : WpfListItem
    {
        
        public Test5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ServiceTestModel";
            this.SearchProperties[WpfListItem.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox TestEnabledSelector
        {
            get
            {
                if ((this.mTestEnabledSelector == null))
                {
                    this.mTestEnabledSelector = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTestEnabledSelector.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Enable or Ignore this test";
                    this.mTestEnabledSelector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestEnabledSelector;
            }
        }
        
        public WpfButton RunButton
        {
            get
            {
                if ((this.mRunButton == null))
                {
                    this.mRunButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Run this test";
                    this.mRunButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunButton;
            }
        }
        
        public WpfButton StopButton
        {
            get
            {
                if ((this.mStopButton == null))
                {
                    this.mStopButton = new WpfButton(this);
                    #region Search Criteria
                    this.mStopButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Stop this test";
                    this.mStopButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStopButton;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Delete this test";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        
        public WpfButton DisabledDeleteButton
        {
            get
            {
                if ((this.mDisabledDeleteButton == null))
                {
                    this.mDisabledDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDisabledDeleteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Cannot delete an enabled test";
                    this.mDisabledDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisabledDeleteButton;
            }
        }
        
        public WpfText TestNameDisplay
        {
            get
            {
                if ((this.mTestNameDisplay == null))
                {
                    this.mTestNameDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mTestNameDisplay.SearchProperties[WpfText.PropertyNames.HelpText] = "Test Name";
                    this.mTestNameDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestNameDisplay;
            }
        }
        
        public WpfText Pending
        {
            get
            {
                if ((this.mPending == null))
                {
                    this.mPending = new WpfText(this);
                    #region Search Criteria
                    this.mPending.SearchProperties[WpfText.PropertyNames.HelpText] = "Pending";
                    this.mPending.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPending;
            }
        }
        
        public WpfText Passing
        {
            get
            {
                if ((this.mPassing == null))
                {
                    this.mPassing = new WpfText(this);
                    #region Search Criteria
                    this.mPassing.SearchProperties[WpfText.PropertyNames.HelpText] = "Passed";
                    this.mPassing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPassing;
            }
        }
        
        public WpfText Failing
        {
            get
            {
                if ((this.mFailing == null))
                {
                    this.mFailing = new WpfText(this);
                    #region Search Criteria
                    this.mFailing.SearchProperties[WpfText.PropertyNames.HelpText] = "Failed";
                    this.mFailing.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFailing;
            }
        }
        
        public WpfText Invalid
        {
            get
            {
                if ((this.mInvalid == null))
                {
                    this.mInvalid = new WpfText(this);
                    #region Search Criteria
                    this.mInvalid.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInvalid;
            }
        }
        
        public WpfText NeverRunDisplay
        {
            get
            {
                if ((this.mNeverRunDisplay == null))
                {
                    this.mNeverRunDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mNeverRunDisplay.SearchProperties[WpfText.PropertyNames.Name] = "Never run";
                    this.mNeverRunDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNeverRunDisplay;
            }
        }
        
        public WpfText RunTimeDisplay
        {
            get
            {
                if ((this.mRunTimeDisplay == null))
                {
                    this.mRunTimeDisplay = new WpfText(this);
                    #region Search Criteria
                    this.mRunTimeDisplay.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunTimeDisplay;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mTestEnabledSelector;
        
        private WpfButton mRunButton;
        
        private WpfButton mStopButton;
        
        private WpfButton mDeleteButton;
        
        private WpfButton mDisabledDeleteButton;
        
        private WpfText mTestNameDisplay;
        
        private WpfText mPending;
        
        private WpfText mPassing;
        
        private WpfText mFailing;
        
        private WpfText mInvalid;
        
        private WpfText mNeverRunDisplay;
        
        private WpfText mRunTimeDisplay;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestInputsTable1 : WpfTable
    {
        
        public TestInputsTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "UI_TestInputsDev2DataGrid_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row121 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row121(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row121 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row121 : WpfRow
    {
        
        public Row121(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Cell2 Cell
        {
            get
            {
                if ((this.mCell == null))
                {
                    this.mCell = new Cell2(this);
                }
                return this.mCell;
            }
        }
        #endregion
        
        #region Fields
        private Cell2 mCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell2 : WpfCell
    {
        
        public Cell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseComboBox IntellisenseComboBox
        {
            get
            {
                if ((this.mIntellisenseComboBox == null))
                {
                    this.mIntellisenseComboBox = new IntellisenseComboBox(this);
                }
                return this.mIntellisenseComboBox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseComboBox mIntellisenseComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseComboBox : WpfComboBox
    {
        
        public IntellisenseComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_TestInputsValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.Instance] = "1";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestOutputsTable : WpfTable
    {
        
        public TestOutputsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "UI_TestOutputsDev2DataGrid_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row122 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row122(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row122 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row122 : WpfRow
    {
        
        public Row122(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Cell3 Cell
        {
            get
            {
                if ((this.mCell == null))
                {
                    this.mCell = new Cell3(this);
                }
                return this.mCell;
            }
        }
        #endregion
        
        #region Fields
        private Cell3 mCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Cell3 : WpfCell
    {
        
        public Cell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public IntellisenseComboBox1 IntellisenseComboBox
        {
            get
            {
                if ((this.mIntellisenseComboBox == null))
                {
                    this.mIntellisenseComboBox = new IntellisenseComboBox1(this);
                }
                return this.mIntellisenseComboBox;
            }
        }
        #endregion
        
        #region Fields
        private IntellisenseComboBox1 mIntellisenseComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IntellisenseComboBox1 : WpfComboBox
    {
        
        public IntellisenseComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_TestOutputsValue_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.SearchProperties[WpfEdit.PropertyNames.Instance] = "1";
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SchedulerTab : WpfTabPage
    {
        
        public SchedulerTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Settings.Scheduler.SchedulerViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext10 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext10(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext10 mWorkSurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext10 : WpfCustom
    {
        
        public WorkSurfaceContext10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SchedulerView SchedulerView
        {
            get
            {
                if ((this.mSchedulerView == null))
                {
                    this.mSchedulerView = new SchedulerView(this);
                }
                return this.mSchedulerView;
            }
        }
        #endregion
        
        #region Fields
        private SchedulerView mSchedulerView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SchedulerView : WpfCustom
    {
        
        public SchedulerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SchedulerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SchedulerView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox RunTaskCheckBox
        {
            get
            {
                if ((this.mRunTaskCheckBox == null))
                {
                    this.mRunTaskCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRunTaskCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_RunAsapCheckBox";
                    this.mRunTaskCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunTaskCheckBox;
            }
        }
        
        public WpfText RunasthefollowinguseText
        {
            get
            {
                if ((this.mRunasthefollowinguseText == null))
                {
                    this.mRunasthefollowinguseText = new WpfText(this);
                    #region Search Criteria
                    this.mRunasthefollowinguseText.SearchProperties[WpfText.PropertyNames.Name] = "Run as the following user account ";
                    this.mRunasthefollowinguseText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunasthefollowinguseText;
            }
        }
        
        public WpfButton ResourcePickerButton
        {
            get
            {
                if ((this.mResourcePickerButton == null))
                {
                    this.mResourcePickerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mResourcePickerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_WorkflowSelectorButton_AutoID";
                    this.mResourcePickerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResourcePickerButton;
            }
        }
        
        public WpfEdit PasswordTextbox
        {
            get
            {
                if ((this.mPasswordTextbox == null))
                {
                    this.mPasswordTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_PasswordBox";
                    this.mPasswordTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordTextbox;
            }
        }
        
        public WpfText PasswordText
        {
            get
            {
                if ((this.mPasswordText == null))
                {
                    this.mPasswordText = new WpfText(this);
                    #region Search Criteria
                    this.mPasswordText.SearchProperties[WpfText.PropertyNames.Name] = "Password ";
                    this.mPasswordText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordText;
            }
        }
        
        public WpfEdit NumOfHistoryTextBoxEdit
        {
            get
            {
                if ((this.mNumOfHistoryTextBoxEdit == null))
                {
                    this.mNumOfHistoryTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mNumOfHistoryTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NumOfHisTextBox";
                    this.mNumOfHistoryTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNumOfHistoryTextBoxEdit;
            }
        }
        
        public WpfText NumberofHistoryText
        {
            get
            {
                if ((this.mNumberofHistoryText == null))
                {
                    this.mNumberofHistoryText = new WpfText(this);
                    #region Search Criteria
                    this.mNumberofHistoryText.SearchProperties[WpfText.PropertyNames.Name] = "Number of History records to load (0 = all) ";
                    this.mNumberofHistoryText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNumberofHistoryText;
            }
        }
        
        public WpfEdit NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mNameTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextbox";
                    this.mNameTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNameTextbox;
            }
        }
        
        public WpfText NameText
        {
            get
            {
                if ((this.mNameText == null))
                {
                    this.mNameText = new WpfText(this);
                    #region Search Criteria
                    this.mNameText.SearchProperties[WpfText.PropertyNames.Name] = "Name ";
                    this.mNameText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNameText;
            }
        }
        
        public WpfTable HistoryTable
        {
            get
            {
                if ((this.mHistoryTable == null))
                {
                    this.mHistoryTable = new WpfTable(this);
                    #region Search Criteria
                    this.mHistoryTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHistoryTable;
            }
        }
        
        public WpfText ErrorMessageText
        {
            get
            {
                if ((this.mErrorMessageText == null))
                {
                    this.mErrorMessageText = new WpfText(this);
                    #region Search Criteria
                    this.mErrorMessageText.SearchProperties[WpfText.PropertyNames.Name] = "Please select a workflow to schedule";
                    this.mErrorMessageText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mErrorMessageText;
            }
        }
        
        public WpfRadioButton EnabledRadioButton
        {
            get
            {
                if ((this.mEnabledRadioButton == null))
                {
                    this.mEnabledRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mEnabledRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_EnabledRadioButton";
                    this.mEnabledRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEnabledRadioButton;
            }
        }
        
        public WpfButton EditTriggerButton
        {
            get
            {
                if ((this.mEditTriggerButton == null))
                {
                    this.mEditTriggerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditTriggerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_EditTriggerButton_AutoID";
                    this.mEditTriggerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditTriggerButton;
            }
        }
        
        public ConnectControl1 ConnectControl
        {
            get
            {
                if ((this.mConnectControl == null))
                {
                    this.mConnectControl = new ConnectControl1(this);
                }
                return this.mConnectControl;
            }
        }
        
        public SchedulesList SchedulesList
        {
            get
            {
                if ((this.mSchedulesList == null))
                {
                    this.mSchedulesList = new SchedulesList(this);
                }
                return this.mSchedulesList;
            }
        }
        
        public WpfText StatusText
        {
            get
            {
                if ((this.mStatusText == null))
                {
                    this.mStatusText = new WpfText(this);
                    #region Search Criteria
                    this.mStatusText.SearchProperties[WpfText.PropertyNames.Name] = "Status ";
                    this.mStatusText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStatusText;
            }
        }
        
        public WpfText TriggerText
        {
            get
            {
                if ((this.mTriggerText == null))
                {
                    this.mTriggerText = new WpfText(this);
                    #region Search Criteria
                    this.mTriggerText.SearchProperties[WpfText.PropertyNames.Name] = "Triggered at ";
                    this.mTriggerText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTriggerText;
            }
        }
        
        public WpfText TriggerValueText
        {
            get
            {
                if ((this.mTriggerValueText == null))
                {
                    this.mTriggerValueText = new WpfText(this);
                    #region Search Criteria
                    this.mTriggerValueText.SearchProperties[WpfText.PropertyNames.Name] = "At 2:40 PM every day";
                    this.mTriggerValueText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTriggerValueText;
            }
        }
        
        public WpfText UsernameText
        {
            get
            {
                if ((this.mUsernameText == null))
                {
                    this.mUsernameText = new WpfText(this);
                    #region Search Criteria
                    this.mUsernameText.SearchProperties[WpfText.PropertyNames.AutomationId] = "UsernameTextBlock";
                    this.mUsernameText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUsernameText;
            }
        }
        
        public WpfEdit UserNameTextBoxEdit
        {
            get
            {
                if ((this.mUserNameTextBoxEdit == null))
                {
                    this.mUserNameTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUserNameTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_UserNameTextBox";
                    this.mUserNameTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUserNameTextBoxEdit;
            }
        }
        
        public WpfEdit WorkflowNameTextBox
        {
            get
            {
                if ((this.mWorkflowNameTextBox == null))
                {
                    this.mWorkflowNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mWorkflowNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_WorkflowNameTextBox_AutoID";
                    this.mWorkflowNameTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWorkflowNameTextBox;
            }
        }
        
        public WpfText WorkflowText
        {
            get
            {
                if ((this.mWorkflowText == null))
                {
                    this.mWorkflowText = new WpfText(this);
                    #region Search Criteria
                    this.mWorkflowText.SearchProperties[WpfText.PropertyNames.Name] = "Workflow ";
                    this.mWorkflowText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWorkflowText;
            }
        }
        
        public WpfRadioButton DisabledRadioButton
        {
            get
            {
                if ((this.mDisabledRadioButton == null))
                {
                    this.mDisabledRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDisabledRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DisabledRadioButton";
                    this.mDisabledRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisabledRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mRunTaskCheckBox;
        
        private WpfText mRunasthefollowinguseText;
        
        private WpfButton mResourcePickerButton;
        
        private WpfEdit mPasswordTextbox;
        
        private WpfText mPasswordText;
        
        private WpfEdit mNumOfHistoryTextBoxEdit;
        
        private WpfText mNumberofHistoryText;
        
        private WpfEdit mNameTextbox;
        
        private WpfText mNameText;
        
        private WpfTable mHistoryTable;
        
        private WpfText mErrorMessageText;
        
        private WpfRadioButton mEnabledRadioButton;
        
        private WpfButton mEditTriggerButton;
        
        private ConnectControl1 mConnectControl;
        
        private SchedulesList mSchedulesList;
        
        private WpfText mStatusText;
        
        private WpfText mTriggerText;
        
        private WpfText mTriggerValueText;
        
        private WpfText mUsernameText;
        
        private WpfEdit mUserNameTextBoxEdit;
        
        private WpfEdit mWorkflowNameTextBox;
        
        private WpfText mWorkflowText;
        
        private WpfRadioButton mDisabledRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConnectControl1 : WpfCustom
    {
        
        public ConnectControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ConnectUserControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox ServerComboBox
        {
            get
            {
                if ((this.mServerComboBox == null))
                {
                    this.mServerComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mServerComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_SettingsServerComboBox_AutoID";
                    this.mServerComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServerComboBox;
            }
        }
        
        public WpfButton EditServerButton
        {
            get
            {
                if ((this.mEditServerButton == null))
                {
                    this.mEditServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SettingsServerEditButton_AutoID";
                    this.mEditServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditServerButton;
            }
        }
        
        public WpfButton ConnectServerButton
        {
            get
            {
                if ((this.mConnectServerButton == null))
                {
                    this.mConnectServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SettingsServerConnectButton_AutoID";
                    this.mConnectServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectServerButton;
            }
        }
        
        public WpfRadioButton DisabledRadioButton
        {
            get
            {
                if ((this.mDisabledRadioButton == null))
                {
                    this.mDisabledRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDisabledRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DisabledRadioButton";
                    this.mDisabledRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisabledRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mServerComboBox;
        
        private WpfButton mEditServerButton;
        
        private WpfButton mConnectServerButton;
        
        private WpfRadioButton mDisabledRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SchedulesList : WpfList
    {
        
        public SchedulesList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "Schedules";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UINameworkflow1ResourcListItem UINameworkflow1ResourcListItem
        {
            get
            {
                if ((this.mUINameworkflow1ResourcListItem == null))
                {
                    this.mUINameworkflow1ResourcListItem = new UINameworkflow1ResourcListItem(this);
                }
                return this.mUINameworkflow1ResourcListItem;
            }
        }
        
        public SchedulerListItem SchedulerListItem
        {
            get
            {
                if ((this.mSchedulerListItem == null))
                {
                    this.mSchedulerListItem = new SchedulerListItem(this);
                }
                return this.mSchedulerListItem;
            }
        }
        
        public NewTask NewTask
        {
            get
            {
                if ((this.mNewTask == null))
                {
                    this.mNewTask = new NewTask(this);
                }
                return this.mNewTask;
            }
        }
        
        public WpfButton DeleteTaskButton
        {
            get
            {
                if ((this.mDeleteTaskButton == null))
                {
                    this.mDeleteTaskButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteTaskButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_WorkflowSelectorButton_AutoID";
                    this.mDeleteTaskButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteTaskButton;
            }
        }
        #endregion
        
        #region Fields
        private UINameworkflow1ResourcListItem mUINameworkflow1ResourcListItem;
        
        private SchedulerListItem mSchedulerListItem;
        
        private NewTask mNewTask;
        
        private WpfButton mDeleteTaskButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINameworkflow1ResourcListItem : WpfListItem
    {
        
        public UINameworkflow1ResourcListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Name:workflow1 ResourceId:00000000-0000-0000-0000-000000000000";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox StatusCheckBox
        {
            get
            {
                if ((this.mStatusCheckBox == null))
                {
                    this.mStatusCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mStatusCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStatusCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mStatusCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SchedulerListItem : WpfListItem
    {
        
        public SchedulerListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Scheduler.DummyResource";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CreateTaskButton CreateTaskButton
        {
            get
            {
                if ((this.mCreateTaskButton == null))
                {
                    this.mCreateTaskButton = new CreateTaskButton(this);
                }
                return this.mCreateTaskButton;
            }
        }
        #endregion
        
        #region Fields
        private CreateTaskButton mCreateTaskButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateTaskButton : WpfButton
    {
        
        public CreateTaskButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton NewTaskButton
        {
            get
            {
                if ((this.mNewTaskButton == null))
                {
                    this.mNewTaskButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewTaskButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mNewTaskButton.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mNewTaskButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewTaskButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mNewTaskButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewTask : WpfListItem
    {
        
        public NewTask(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Name:New Task1 ResourceId:00000000-0000-0000-0000-000000000000";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox StatusCheckbox
        {
            get
            {
                if ((this.mStatusCheckbox == null))
                {
                    this.mStatusCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mStatusCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStatusCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mStatusCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SharepointServerSourceTab : WpfTabPage
    {
        
        public SharepointServerSourceTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.ISharepointServerSource]" +
                "";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SharepointServerSourceView SharepointServerSourceView
        {
            get
            {
                if ((this.mSharepointServerSourceView == null))
                {
                    this.mSharepointServerSourceView = new SharepointServerSourceView(this);
                }
                return this.mSharepointServerSourceView;
            }
        }
        
        public WpfButton SharepointSourceTabCloseButton
        {
            get
            {
                if ((this.mSharepointSourceTabCloseButton == null))
                {
                    this.mSharepointSourceTabCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSharepointSourceTabCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mSharepointSourceTabCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointSourceTabCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private SharepointServerSourceView mSharepointServerSourceView;
        
        private WpfButton mSharepointSourceTabCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SharepointServerSourceView : WpfCustom
    {
        
        public SharepointServerSourceView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SharepointView SharepointView
        {
            get
            {
                if ((this.mSharepointView == null))
                {
                    this.mSharepointView = new SharepointView(this);
                }
                return this.mSharepointView;
            }
        }
        #endregion
        
        #region Fields
        private SharepointView mSharepointView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SharepointView : WpfCustom
    {
        
        public SharepointView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointServerSource";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton TestConnectionButton
        {
            get
            {
                if ((this.mTestConnectionButton == null))
                {
                    this.mTestConnectionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestConnectionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestConnection";
                    this.mTestConnectionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestConnectionButton;
            }
        }
        
        public WpfRadioButton UserRadioButton
        {
            get
            {
                if ((this.mUserRadioButton == null))
                {
                    this.mUserRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUserRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UserRadioButton";
                    this.mUserRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUserRadioButton;
            }
        }
        
        public WpfEdit PasswordTextBox
        {
            get
            {
                if ((this.mPasswordTextBox == null))
                {
                    this.mPasswordTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PasswordTextBox";
                    this.mPasswordTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordTextBox;
            }
        }
        
        public WpfEdit ServerNameEdit
        {
            get
            {
                if ((this.mServerNameEdit == null))
                {
                    this.mServerNameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mServerNameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ServerName";
                    this.mServerNameEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServerNameEdit;
            }
        }
        
        public WpfEdit UserNameTextBox
        {
            get
            {
                if ((this.mUserNameTextBox == null))
                {
                    this.mUserNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mUserNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UserNameTextBox";
                    this.mUserNameTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUserNameTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mTestConnectionButton;
        
        private WpfRadioButton mUserRadioButton;
        
        private WpfEdit mPasswordTextBox;
        
        private WpfEdit mServerNameEdit;
        
        private WpfEdit mUserNameTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DotNetDllPlugInSource : WpfTabPage
    {
        
        public DotNetDllPlugInSource(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.IPluginSource]";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public GACTreeItem GACTreeItem
        {
            get
            {
                if ((this.mGACTreeItem == null))
                {
                    this.mGACTreeItem = new GACTreeItem(this);
                }
                return this.mGACTreeItem;
            }
        }
        
        public DotNetPlugInSourceViewModelsCustom DotNetPlugInSourceViewModelsCustom
        {
            get
            {
                if ((this.mDotNetPlugInSourceViewModelsCustom == null))
                {
                    this.mDotNetPlugInSourceViewModelsCustom = new DotNetPlugInSourceViewModelsCustom(this);
                }
                return this.mDotNetPlugInSourceViewModelsCustom;
            }
        }
        
        public WpfTreeItem FileSystemTreeItem
        {
            get
            {
                if ((this.mFileSystemTreeItem == null))
                {
                    this.mFileSystemTreeItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mFileSystemTreeItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "File System";
                    this.mFileSystemTreeItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFileSystemTreeItem;
            }
        }
        
        public WpfButton ClosePlugInSourceTabButton
        {
            get
            {
                if ((this.mClosePlugInSourceTabButton == null))
                {
                    this.mClosePlugInSourceTabButton = new WpfButton(this);
                    #region Search Criteria
                    this.mClosePlugInSourceTabButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mClosePlugInSourceTabButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mClosePlugInSourceTabButton;
            }
        }
        
        public WpfEdit AssemblyNameTextBoxEdit
        {
            get
            {
                if ((this.mAssemblyNameTextBoxEdit == null))
                {
                    this.mAssemblyNameTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mAssemblyNameTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "AssemblyNameTextBox";
                    this.mAssemblyNameTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssemblyNameTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private GACTreeItem mGACTreeItem;
        
        private DotNetPlugInSourceViewModelsCustom mDotNetPlugInSourceViewModelsCustom;
        
        private WpfTreeItem mFileSystemTreeItem;
        
        private WpfButton mClosePlugInSourceTabButton;
        
        private WpfEdit mAssemblyNameTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class GACTreeItem : WpfTreeItem
    {
        
        public GACTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "GAC";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox ExpansionIndicatorCheckBox
        {
            get
            {
                if ((this.mExpansionIndicatorCheckBox == null))
                {
                    this.mExpansionIndicatorCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mExpansionIndicatorCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "ExpansionIndicator";
                    this.mExpansionIndicatorCheckBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpansionIndicatorCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpansionIndicatorCheckBox;
            }
        }
        
        public WpfTreeItem FirstTreeItem
        {
            get
            {
                if ((this.mFirstTreeItem == null))
                {
                    this.mFirstTreeItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mFirstTreeItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mFirstTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFirstTreeItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFirstTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mExpansionIndicatorCheckBox;
        
        private WpfTreeItem mFirstTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DotNetPlugInSourceViewModelsCustom : WpfCustom
    {
        
        public DotNetPlugInSourceViewModelsCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SearchTextBoxEdit SearchTextBoxEdit
        {
            get
            {
                if ((this.mSearchTextBoxEdit == null))
                {
                    this.mSearchTextBoxEdit = new SearchTextBoxEdit(this);
                }
                return this.mSearchTextBoxEdit;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "RefreshButton";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        #endregion
        
        #region Fields
        private SearchTextBoxEdit mSearchTextBoxEdit;
        
        private WpfButton mRefreshButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SearchTextBoxEdit : WpfEdit
    {
        
        public SearchTextBoxEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText FilterText
        {
            get
            {
                if ((this.mFilterText == null))
                {
                    this.mFilterText = new WpfText(this);
                    #region Search Criteria
                    this.mFilterText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mFilterText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFilterText;
            }
        }
        
        public WpfButton ClearSearchButton
        {
            get
            {
                if ((this.mClearSearchButton == null))
                {
                    this.mClearSearchButton = new WpfButton(this);
                    #region Search Criteria
                    this.mClearSearchButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ClearSearchButton";
                    this.mClearSearchButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mClearSearchButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mFilterText;
        
        private WpfButton mClearSearchButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RabbitMqSourceTabPage : WpfTabPage
    {
        
        public RabbitMqSourceTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.IRabbitMQServiceSourceDe" +
                "finition]";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public RabbitMQSourceCustom RabbitMQSourceCustom
        {
            get
            {
                if ((this.mRabbitMQSourceCustom == null))
                {
                    this.mRabbitMQSourceCustom = new RabbitMQSourceCustom(this);
                }
                return this.mRabbitMQSourceCustom;
            }
        }
        #endregion
        
        #region Fields
        private RabbitMQSourceCustom mRabbitMQSourceCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RabbitMQSourceCustom : WpfCustom
    {
        
        public RabbitMQSourceCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit HostTextBoxEdit
        {
            get
            {
                if ((this.mHostTextBoxEdit == null))
                {
                    this.mHostTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mHostTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "HostTextBox";
                    this.mHostTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mHostTextBoxEdit;
            }
        }
        
        public WpfEdit PortTextBoxEdit
        {
            get
            {
                if ((this.mPortTextBoxEdit == null))
                {
                    this.mPortTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPortTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PortTextBox";
                    this.mPortTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mPortTextBoxEdit;
            }
        }
        
        public WpfEdit UserNameTextBoxEdit
        {
            get
            {
                if ((this.mUserNameTextBoxEdit == null))
                {
                    this.mUserNameTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUserNameTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UserNameTextBox";
                    this.mUserNameTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUserNameTextBoxEdit;
            }
        }
        
        public WpfEdit PasswordTextBoxEdit
        {
            get
            {
                if ((this.mPasswordTextBoxEdit == null))
                {
                    this.mPasswordTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PasswordTextBox";
                    this.mPasswordTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mPasswordTextBoxEdit;
            }
        }
        
        public WpfEdit VirtualHostTextBoxEdit
        {
            get
            {
                if ((this.mVirtualHostTextBoxEdit == null))
                {
                    this.mVirtualHostTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mVirtualHostTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "VirtualHostTextBox";
                    this.mVirtualHostTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mVirtualHostTextBoxEdit;
            }
        }
        
        public WpfButton TestConnectionButton
        {
            get
            {
                if ((this.mTestConnectionButton == null))
                {
                    this.mTestConnectionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestConnectionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestPublishCommand";
                    this.mTestConnectionButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTestConnectionButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mHostTextBoxEdit;
        
        private WpfEdit mPortTextBoxEdit;
        
        private WpfEdit mUserNameTextBoxEdit;
        
        private WpfEdit mPasswordTextBoxEdit;
        
        private WpfEdit mVirtualHostTextBoxEdit;
        
        private WpfButton mTestConnectionButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EmailSourceTabPage : WpfTabPage
    {
        
        public EmailSourceTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.IEmailServiceSource]";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public SendTestModelsCustom SendTestModelsCustom
        {
            get
            {
                if ((this.mSendTestModelsCustom == null))
                {
                    this.mSendTestModelsCustom = new SendTestModelsCustom(this);
                }
                return this.mSendTestModelsCustom;
            }
        }
        
        public WpfButton EmailSourceTabCloseButton
        {
            get
            {
                if ((this.mEmailSourceTabCloseButton == null))
                {
                    this.mEmailSourceTabCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEmailSourceTabCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mEmailSourceTabCloseButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mEmailSourceTabCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private SendTestModelsCustom mSendTestModelsCustom;
        
        private WpfButton mEmailSourceTabCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SendTestModelsCustom : WpfCustom
    {
        
        public SendTestModelsCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit FromTextBoxEdit
        {
            get
            {
                if ((this.mFromTextBoxEdit == null))
                {
                    this.mFromTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mFromTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "FromTextBox";
                    this.mFromTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mFromTextBoxEdit;
            }
        }
        
        public WpfEdit ToTextBoxEdit
        {
            get
            {
                if ((this.mToTextBoxEdit == null))
                {
                    this.mToTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mToTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ToTextBox";
                    this.mToTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mToTextBoxEdit;
            }
        }
        
        public WpfButton TestConnectionButton
        {
            get
            {
                if ((this.mTestConnectionButton == null))
                {
                    this.mTestConnectionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestConnectionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestSendCommand";
                    this.mTestConnectionButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTestConnectionButton;
            }
        }
        
        public WpfEdit TimeoutTextBoxEdit
        {
            get
            {
                if ((this.mTimeoutTextBoxEdit == null))
                {
                    this.mTimeoutTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTimeoutTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TimeoutTextBox";
                    this.mTimeoutTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTimeoutTextBoxEdit;
            }
        }
        
        public WpfEdit PortTextBoxEdit
        {
            get
            {
                if ((this.mPortTextBoxEdit == null))
                {
                    this.mPortTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPortTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PortTextBox";
                    this.mPortTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mPortTextBoxEdit;
            }
        }
        
        public WpfRadioButton EnableSSLYesRadioButton
        {
            get
            {
                if ((this.mEnableSSLYesRadioButton == null))
                {
                    this.mEnableSSLYesRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mEnableSSLYesRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "EnableSslYes";
                    this.mEnableSSLYesRadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mEnableSSLYesRadioButton;
            }
        }
        
        public WpfRadioButton EnableSSLNORadioButton
        {
            get
            {
                if ((this.mEnableSSLNORadioButton == null))
                {
                    this.mEnableSSLNORadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mEnableSSLNORadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "EnableSslNo";
                    this.mEnableSSLNORadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mEnableSSLNORadioButton;
            }
        }
        
        public WpfEdit PasswordTextBoxEdit
        {
            get
            {
                if ((this.mPasswordTextBoxEdit == null))
                {
                    this.mPasswordTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PasswordTextBox";
                    this.mPasswordTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mPasswordTextBoxEdit;
            }
        }
        
        public WpfEdit UserNameTextBoxEdit
        {
            get
            {
                if ((this.mUserNameTextBoxEdit == null))
                {
                    this.mUserNameTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUserNameTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UserNameTextBox";
                    this.mUserNameTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUserNameTextBoxEdit;
            }
        }
        
        public WpfEdit HostTextBoxEdit
        {
            get
            {
                if ((this.mHostTextBoxEdit == null))
                {
                    this.mHostTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mHostTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "HostTextBox";
                    this.mHostTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mHostTextBoxEdit;
            }
        }
        
        public WpfText PassedText
        {
            get
            {
                if ((this.mPassedText == null))
                {
                    this.mPassedText = new WpfText(this);
                    #region Search Criteria
                    this.mPassedText.SearchProperties[WpfText.PropertyNames.Name] = "Passed";
                    this.mPassedText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mPassedText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mFromTextBoxEdit;
        
        private WpfEdit mToTextBoxEdit;
        
        private WpfButton mTestConnectionButton;
        
        private WpfEdit mTimeoutTextBoxEdit;
        
        private WpfEdit mPortTextBoxEdit;
        
        private WpfRadioButton mEnableSSLYesRadioButton;
        
        private WpfRadioButton mEnableSSLNORadioButton;
        
        private WpfEdit mPasswordTextBoxEdit;
        
        private WpfEdit mUserNameTextBoxEdit;
        
        private WpfEdit mHostTextBoxEdit;
        
        private WpfText mPassedText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneRight : WpfCustom
    {
        
        public SplitPaneRight(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Variables Variables
        {
            get
            {
                if ((this.mVariables == null))
                {
                    this.mVariables = new Variables(this);
                }
                return this.mVariables;
            }
        }
        
        public DebugOutput DebugOutput
        {
            get
            {
                if ((this.mDebugOutput == null))
                {
                    this.mDebugOutput = new DebugOutput(this);
                }
                return this.mDebugOutput;
            }
        }
        #endregion
        
        #region Fields
        private Variables mVariables;
        
        private DebugOutput mDebugOutput;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Variables : WpfCustom
    {
        
        public Variables(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Variables";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton VariableUnpinBtn
        {
            get
            {
                if ((this.mVariableUnpinBtn == null))
                {
                    this.mVariableUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mVariableUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mVariableUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableUnpinBtn;
            }
        }
        
        public DatalistView DatalistView
        {
            get
            {
                if ((this.mDatalistView == null))
                {
                    this.mDatalistView = new DatalistView(this);
                }
                return this.mDatalistView;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mVariableUnpinBtn;
        
        private DatalistView mDatalistView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DatalistView : WpfCustom
    {
        
        public DatalistView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataListView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_VariablesControl_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableTree VariableTree
        {
            get
            {
                if ((this.mVariableTree == null))
                {
                    this.mVariableTree = new VariableTree(this);
                }
                return this.mVariableTree;
            }
        }
        
        public SearchTextbox2 SearchTextbox
        {
            get
            {
                if ((this.mSearchTextbox == null))
                {
                    this.mSearchTextbox = new SearchTextbox2(this);
                }
                return this.mSearchTextbox;
            }
        }
        
        public WpfButton RemoveUnused
        {
            get
            {
                if ((this.mRemoveUnused == null))
                {
                    this.mRemoveUnused = new WpfButton(this);
                    #region Search Criteria
                    this.mRemoveUnused.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_AddRemovebtn_AutoID";
                    this.mRemoveUnused.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRemoveUnused;
            }
        }
        
        public WpfButton Sort
        {
            get
            {
                if ((this.mSort == null))
                {
                    this.mSort = new WpfButton(this);
                    #region Search Criteria
                    this.mSort.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Sortbtn_AutoID";
                    this.mSort.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSort;
            }
        }
        #endregion
        
        #region Fields
        private VariableTree mVariableTree;
        
        private SearchTextbox2 mSearchTextbox;
        
        private WpfButton mRemoveUnused;
        
        private WpfButton mSort;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableTree : WpfTree
    {
        
        public VariableTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "UI_VariableTreeView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableTreeItem VariableTreeItem
        {
            get
            {
                if ((this.mVariableTreeItem == null))
                {
                    this.mVariableTreeItem = new VariableTreeItem(this);
                }
                return this.mVariableTreeItem;
            }
        }
        
        public RecordsetTreeItem RecordsetTreeItem
        {
            get
            {
                if ((this.mRecordsetTreeItem == null))
                {
                    this.mRecordsetTreeItem = new RecordsetTreeItem(this);
                }
                return this.mRecordsetTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private VariableTreeItem mVariableTreeItem;
        
        private RecordsetTreeItem mRecordsetTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableTreeItem : WpfTreeItem
    {
        
        public VariableTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Variable";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TreeItem1 TreeItem1
        {
            get
            {
                if ((this.mTreeItem1 == null))
                {
                    this.mTreeItem1 = new TreeItem1(this);
                }
                return this.mTreeItem1;
            }
        }
        
        public TreeItem2 TreeItem2
        {
            get
            {
                if ((this.mTreeItem2 == null))
                {
                    this.mTreeItem2 = new TreeItem2(this);
                }
                return this.mTreeItem2;
            }
        }
        
        public TreeItem3 TreeItem3
        {
            get
            {
                if ((this.mTreeItem3 == null))
                {
                    this.mTreeItem3 = new TreeItem3(this);
                }
                return this.mTreeItem3;
            }
        }
        
        public TreeItem4 TreeItem4
        {
            get
            {
                if ((this.mTreeItem4 == null))
                {
                    this.mTreeItem4 = new TreeItem4(this);
                }
                return this.mTreeItem4;
            }
        }
        
        public TreeItem5 TreeItem5
        {
            get
            {
                if ((this.mTreeItem5 == null))
                {
                    this.mTreeItem5 = new TreeItem5(this);
                }
                return this.mTreeItem5;
            }
        }
        
        public WpfButton ExpanderButton
        {
            get
            {
                if ((this.mExpanderButton == null))
                {
                    this.mExpanderButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpanderButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Expander";
                    this.mExpanderButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpanderButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderButton;
            }
        }
        #endregion
        
        #region Fields
        private TreeItem1 mTreeItem1;
        
        private TreeItem2 mTreeItem2;
        
        private TreeItem3 mTreeItem3;
        
        private TreeItem4 mTreeItem4;
        
        private TreeItem5 mTreeItem5;
        
        private WpfButton mExpanderButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem1 : WpfTreeItem
    {
        
        public TreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane1 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane1(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane1 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane1 : WpfPane
    {
        
        public ScrollViewerPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox : WpfEdit
    {
        
        public NameTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public DeleteButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new DeleteButton(this);
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private DeleteButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteButton : WpfButton
    {
        
        public DeleteButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage Image
        {
            get
            {
                if ((this.mImage == null))
                {
                    this.mImage = new WpfImage(this);
                    #region Search Criteria
                    this.mImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteVar";
                    this.mImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem2 : WpfTreeItem
    {
        
        public TreeItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane2 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane2(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane2 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane2 : WpfPane
    {
        
        public ScrollViewerPane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox1 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox1(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox1 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox1 : WpfEdit
    {
        
        public NameTextbox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem3 : WpfTreeItem
    {
        
        public TreeItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane3 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane3(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane3 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane3 : WpfPane
    {
        
        public ScrollViewerPane3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox2 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox2(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox2 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox2 : WpfEdit
    {
        
        public NameTextbox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem4 : WpfTreeItem
    {
        
        public TreeItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane4 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane4(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane4 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane4 : WpfPane
    {
        
        public ScrollViewerPane4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox3 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox3(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox3 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox3 : WpfEdit
    {
        
        public NameTextbox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem5 : WpfTreeItem
    {
        
        public TreeItem5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "5";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane5 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane5(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane5 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane5 : WpfPane
    {
        
        public ScrollViewerPane5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox4 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox4(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox4 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox4 : WpfEdit
    {
        
        public NameTextbox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetTreeItem : WpfTreeItem
    {
        
        public RecordsetTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Recordset";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TreeItem11 TreeItem1
        {
            get
            {
                if ((this.mTreeItem1 == null))
                {
                    this.mTreeItem1 = new TreeItem11(this);
                }
                return this.mTreeItem1;
            }
        }
        
        public TreeItem21 TreeItem2
        {
            get
            {
                if ((this.mTreeItem2 == null))
                {
                    this.mTreeItem2 = new TreeItem21(this);
                }
                return this.mTreeItem2;
            }
        }
        
        public TreeItem31 TreeItem3
        {
            get
            {
                if ((this.mTreeItem3 == null))
                {
                    this.mTreeItem3 = new TreeItem31(this);
                }
                return this.mTreeItem3;
            }
        }
        
        public TreeItem41 TreeItem4
        {
            get
            {
                if ((this.mTreeItem4 == null))
                {
                    this.mTreeItem4 = new TreeItem41(this);
                }
                return this.mTreeItem4;
            }
        }
        
        public TreeItem51 TreeItem5
        {
            get
            {
                if ((this.mTreeItem5 == null))
                {
                    this.mTreeItem5 = new TreeItem51(this);
                }
                return this.mTreeItem5;
            }
        }
        
        public WpfButton ExpanderButton
        {
            get
            {
                if ((this.mExpanderButton == null))
                {
                    this.mExpanderButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpanderButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Expander";
                    this.mExpanderButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpanderButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderButton;
            }
        }
        #endregion
        
        #region Fields
        private TreeItem11 mTreeItem1;
        
        private TreeItem21 mTreeItem2;
        
        private TreeItem31 mTreeItem3;
        
        private TreeItem41 mTreeItem4;
        
        private TreeItem51 mTreeItem5;
        
        private WpfButton mExpanderButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem11 : WpfTreeItem
    {
        
        public TreeItem11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane6 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane6(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        
        public Field1 Field1
        {
            get
            {
                if ((this.mField1 == null))
                {
                    this.mField1 = new Field1(this);
                }
                return this.mField1;
            }
        }
        
        public Field2 Field2
        {
            get
            {
                if ((this.mField2 == null))
                {
                    this.mField2 = new Field2(this);
                }
                return this.mField2;
            }
        }
        
        public WpfButton ExpanderButton
        {
            get
            {
                if ((this.mExpanderButton == null))
                {
                    this.mExpanderButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpanderButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Expander";
                    this.mExpanderButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpanderButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderButton;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane6 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        
        private Field1 mField1;
        
        private Field2 mField2;
        
        private WpfButton mExpanderButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane6 : WpfPane
    {
        
        public ScrollViewerPane6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox5 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox5(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox5 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox5 : WpfEdit
    {
        
        public NameTextbox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButtonButton
        {
            get
            {
                if ((this.mDeleteButtonButton == null))
                {
                    this.mDeleteButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButtonButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButtonButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field1 : WpfTreeItem
    {
        
        public Field1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane7 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane7(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane7 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane7 : WpfPane
    {
        
        public ScrollViewerPane7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox6 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox6(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox6 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox6 : WpfEdit
    {
        
        public NameTextbox6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field2 : WpfTreeItem
    {
        
        public Field2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane8 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane8(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane8 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane8 : WpfPane
    {
        
        public ScrollViewerPane8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox7 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox7(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox7 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox7 : WpfEdit
    {
        
        public NameTextbox7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem21 : WpfTreeItem
    {
        
        public TreeItem21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane9 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane9(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        
        public Field Field
        {
            get
            {
                if ((this.mField == null))
                {
                    this.mField = new Field(this);
                }
                return this.mField;
            }
        }
        
        public WpfButton ExpanderButton
        {
            get
            {
                if ((this.mExpanderButton == null))
                {
                    this.mExpanderButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpanderButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Expander";
                    this.mExpanderButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpanderButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderButton;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane9 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        
        private Field mField;
        
        private WpfButton mExpanderButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane9 : WpfPane
    {
        
        public ScrollViewerPane9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox8 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox8(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox8 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox8 : WpfEdit
    {
        
        public NameTextbox8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButtonButton
        {
            get
            {
                if ((this.mDeleteButtonButton == null))
                {
                    this.mDeleteButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButtonButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButtonButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field : WpfTreeItem
    {
        
        public Field(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane10 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane10(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane10 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane10 : WpfPane
    {
        
        public ScrollViewerPane10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox9 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox9(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox9 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox9 : WpfEdit
    {
        
        public NameTextbox9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem31 : WpfTreeItem
    {
        
        public TreeItem31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane11 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane11(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        
        public Field3 Field
        {
            get
            {
                if ((this.mField == null))
                {
                    this.mField = new Field3(this);
                }
                return this.mField;
            }
        }
        
        public WpfButton ExpanderButton
        {
            get
            {
                if ((this.mExpanderButton == null))
                {
                    this.mExpanderButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpanderButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Expander";
                    this.mExpanderButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpanderButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderButton;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane11 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        
        private Field3 mField;
        
        private WpfButton mExpanderButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane11 : WpfPane
    {
        
        public ScrollViewerPane11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox10 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox10(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox10 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox10 : WpfEdit
    {
        
        public NameTextbox10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButtonButton
        {
            get
            {
                if ((this.mDeleteButtonButton == null))
                {
                    this.mDeleteButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButtonButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButtonButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field3 : WpfTreeItem
    {
        
        public Field3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane12 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane12(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane12 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane12 : WpfPane
    {
        
        public ScrollViewerPane12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox11 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox11(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox11 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox11 : WpfEdit
    {
        
        public NameTextbox11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem41 : WpfTreeItem
    {
        
        public TreeItem41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane13 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane13(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        
        public Field4 Field
        {
            get
            {
                if ((this.mField == null))
                {
                    this.mField = new Field4(this);
                }
                return this.mField;
            }
        }
        
        public WpfButton ExpanderButton
        {
            get
            {
                if ((this.mExpanderButton == null))
                {
                    this.mExpanderButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpanderButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Expander";
                    this.mExpanderButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpanderButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderButton;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane13 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        
        private Field4 mField;
        
        private WpfButton mExpanderButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane13 : WpfPane
    {
        
        public ScrollViewerPane13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox12 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox12(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox12 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox12 : WpfEdit
    {
        
        public NameTextbox12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButtonButton
        {
            get
            {
                if ((this.mDeleteButtonButton == null))
                {
                    this.mDeleteButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButtonButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButtonButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field4 : WpfTreeItem
    {
        
        public Field4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane14 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane14(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane14 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane14 : WpfPane
    {
        
        public ScrollViewerPane14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox13 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox13(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox13 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox13 : WpfEdit
    {
        
        public NameTextbox13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem51 : WpfTreeItem
    {
        
        public TreeItem51(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "5";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane15 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane15(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        
        public Field5 Field
        {
            get
            {
                if ((this.mField == null))
                {
                    this.mField = new Field5(this);
                }
                return this.mField;
            }
        }
        
        public WpfButton ExpanderButton
        {
            get
            {
                if ((this.mExpanderButton == null))
                {
                    this.mExpanderButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpanderButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Expander";
                    this.mExpanderButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExpanderButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderButton;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane15 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        
        private Field5 mField;
        
        private WpfButton mExpanderButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane15 : WpfPane
    {
        
        public ScrollViewerPane15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox14 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox14(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox14 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox14 : WpfEdit
    {
        
        public NameTextbox14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButtonButton
        {
            get
            {
                if ((this.mDeleteButtonButton == null))
                {
                    this.mDeleteButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButtonButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteButtonButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Field5 : WpfTreeItem
    {
        
        public Field5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane16 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane16(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public WpfCheckBox InputCheckbox
        {
            get
            {
                if ((this.mInputCheckbox == null))
                {
                    this.mInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputCheckbox;
            }
        }
        
        public WpfCheckBox OutputCheckbox
        {
            get
            {
                if ((this.mOutputCheckbox == null))
                {
                    this.mOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane16 mScrollViewerPane;
        
        private WpfCheckBox mInputCheckbox;
        
        private WpfCheckBox mOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane16 : WpfPane
    {
        
        public ScrollViewerPane16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NameTextbox15 NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new NameTextbox15(this);
                }
                return this.mNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private NameTextbox15 mNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameTextbox15 : WpfEdit
    {
        
        public NameTextbox15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Label
        {
            get
            {
                if ((this.mLabel == null))
                {
                    this.mLabel = new WpfText(this);
                    #region Search Criteria
                    this.mLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mLabel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mLabel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLabel;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mLabel;
        
        private WpfImage mDeleteDisabledImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SearchTextbox2 : WpfEdit
    {
        
        public SearchTextbox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText FilterText
        {
            get
            {
                if ((this.mFilterText == null))
                {
                    this.mFilterText = new WpfText(this);
                    #region Search Criteria
                    this.mFilterText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mFilterText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFilterText;
            }
        }
        
        public WpfImage ClearSearchDisabled
        {
            get
            {
                if ((this.mClearSearchDisabled == null))
                {
                    this.mClearSearchDisabled = new WpfImage(this);
                    #region Search Criteria
                    this.mClearSearchDisabled.SearchProperties[WpfImage.PropertyNames.AutomationId] = "ClearSearchDisabled";
                    this.mClearSearchDisabled.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mClearSearchDisabled;
            }
        }
        
        public WpfButton ClearSearchButton
        {
            get
            {
                if ((this.mClearSearchButton == null))
                {
                    this.mClearSearchButton = new WpfButton(this);
                    #region Search Criteria
                    this.mClearSearchButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ClearSearchButton";
                    this.mClearSearchButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mClearSearchButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mFilterText;
        
        private WpfImage mClearSearchDisabled;
        
        private WpfButton mClearSearchButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DebugOutput : WpfCustom
    {
        
        public DebugOutput(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DebugOutputView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DebugOutput";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DebugOutputUnpinBtn
        {
            get
            {
                if ((this.mDebugOutputUnpinBtn == null))
                {
                    this.mDebugOutputUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mDebugOutputUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mDebugOutputUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDebugOutputUnpinBtn;
            }
        }
        
        public WpfEdit SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSearchTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mSearchTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSearchTextBox;
            }
        }
        
        public WpfButton SettingsButton
        {
            get
            {
                if ((this.mSettingsButton == null))
                {
                    this.mSettingsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSettingsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DebugOutputOptionsButton_AutoID";
                    this.mSettingsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSettingsButton;
            }
        }
        
        public WpfButton ExpandCollapseButton
        {
            get
            {
                if ((this.mExpandCollapseButton == null))
                {
                    this.mExpandCollapseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpandCollapseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DebugOutputExpandAllMode_AutoID";
                    this.mExpandCollapseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpandCollapseButton;
            }
        }
        
        public DebugOutputTree DebugOutputTree
        {
            get
            {
                if ((this.mDebugOutputTree == null))
                {
                    this.mDebugOutputTree = new DebugOutputTree(this);
                }
                return this.mDebugOutputTree;
            }
        }
        
        public StatusBar StatusBar
        {
            get
            {
                if ((this.mStatusBar == null))
                {
                    this.mStatusBar = new StatusBar(this);
                }
                return this.mStatusBar;
            }
        }
        
        public CommentTreeItem CommentTreeItem
        {
            get
            {
                if ((this.mCommentTreeItem == null))
                {
                    this.mCommentTreeItem = new CommentTreeItem(this);
                }
                return this.mCommentTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDebugOutputUnpinBtn;
        
        private WpfEdit mSearchTextBox;
        
        private WpfButton mSettingsButton;
        
        private WpfButton mExpandCollapseButton;
        
        private DebugOutputTree mDebugOutputTree;
        
        private StatusBar mStatusBar;
        
        private CommentTreeItem mCommentTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DebugOutputTree : WpfTree
    {
        
        public DebugOutputTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "DebugOutputTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Step1 Step1
        {
            get
            {
                if ((this.mStep1 == null))
                {
                    this.mStep1 = new Step1(this);
                }
                return this.mStep1;
            }
        }
        
        public SubWorkflow SubWorkflow
        {
            get
            {
                if ((this.mSubWorkflow == null))
                {
                    this.mSubWorkflow = new SubWorkflow(this);
                }
                return this.mSubWorkflow;
            }
        }
        
        public ServiceTreeItem ServiceTreeItem
        {
            get
            {
                if ((this.mServiceTreeItem == null))
                {
                    this.mServiceTreeItem = new ServiceTreeItem(this);
                }
                return this.mServiceTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private Step1 mStep1;
        
        private SubWorkflow mSubWorkflow;
        
        private ServiceTreeItem mServiceTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Step1 : WpfTreeItem
    {
        
        public Step1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Step";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText VariableTextbox
        {
            get
            {
                if ((this.mVariableTextbox == null))
                {
                    this.mVariableTextbox = new WpfText(this);
                    #region Search Criteria
                    this.mVariableTextbox.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_DebugOutputVariableTextBlock_AutoID";
                    this.mVariableTextbox.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mVariableTextbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextbox;
            }
        }
        
        public WpfButton Assign1Button
        {
            get
            {
                if ((this.mAssign1Button == null))
                {
                    this.mAssign1Button = new WpfButton(this);
                    #region Search Criteria
                    this.mAssign1Button.SearchProperties[WpfButton.PropertyNames.Name] = "Assign (1)";
                    this.mAssign1Button.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mAssign1Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssign1Button;
            }
        }
        
        public WpfButton BaseConversion1Button
        {
            get
            {
                if ((this.mBaseConversion1Button == null))
                {
                    this.mBaseConversion1Button = new WpfButton(this);
                    #region Search Criteria
                    this.mBaseConversion1Button.SearchProperties[WpfButton.PropertyNames.Name] = "Base Conversion (1)";
                    this.mBaseConversion1Button.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mBaseConversion1Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mBaseConversion1Button;
            }
        }
        
        public WpfButton CalculateButton
        {
            get
            {
                if ((this.mCalculateButton == null))
                {
                    this.mCalculateButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCalculateButton.SearchProperties[WpfButton.PropertyNames.Name] = "Calculate";
                    this.mCalculateButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCalculateButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCalculateButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mVariableTextbox;
        
        private WpfButton mAssign1Button;
        
        private WpfButton mBaseConversion1Button;
        
        private WpfButton mCalculateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SubWorkflow : WpfTreeItem
    {
        
        public SubWorkflow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Service";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIHelloWorldTreeItem1 UIHelloWorldTreeItem1
        {
            get
            {
                if ((this.mUIHelloWorldTreeItem1 == null))
                {
                    this.mUIHelloWorldTreeItem1 = new UIHelloWorldTreeItem1(this);
                }
                return this.mUIHelloWorldTreeItem1;
            }
        }
        #endregion
        
        #region Fields
        private UIHelloWorldTreeItem1 mUIHelloWorldTreeItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelloWorldTreeItem1 : WpfTreeItem
    {
        
        public UIHelloWorldTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Start";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton UIHelloWorldButton
        {
            get
            {
                if ((this.mUIHelloWorldButton == null))
                {
                    this.mUIHelloWorldButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIHelloWorldButton.SearchProperties[WpfButton.PropertyNames.Name] = "Hello World";
                    this.mUIHelloWorldButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHelloWorldButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIHelloWorldButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIHelloWorldButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServiceTreeItem : WpfTreeItem
    {
        
        public ServiceTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Service";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton Workflow1Button
        {
            get
            {
                if ((this.mWorkflow1Button == null))
                {
                    this.mWorkflow1Button = new WpfButton(this);
                    #region Search Criteria
                    this.mWorkflow1Button.SearchProperties[WpfButton.PropertyNames.Name] = "workflow1";
                    this.mWorkflow1Button.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mWorkflow1Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWorkflow1Button;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mWorkflow1Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StatusBar : WpfEdit
    {
        
        public StatusBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Dev2StatusBarAutomationID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CommentTreeItem : WpfTreeItem
    {
        
        public CommentTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Step";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfButton CommentButton
        {
            get
            {
                if ((this.mCommentButton == null))
                {
                    this.mCommentButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCommentButton.SearchProperties[WpfButton.PropertyNames.Name] = "Comment";
                    this.mCommentButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCommentButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCommentButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCommentButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DebugInputDialog : WpfWindow
    {
        
        public DebugInputDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Debug input data";
            this.SearchProperties[WpfWindow.PropertyNames.ClassName] = "Uia.Window";
            this.SearchProperties[WpfWindow.PropertyNames.AutomationId] = "UI_DebugInputWindow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabItemsTabList TabItemsTabList
        {
            get
            {
                if ((this.mTabItemsTabList == null))
                {
                    this.mTabItemsTabList = new TabItemsTabList(this);
                }
                return this.mTabItemsTabList;
            }
        }
        
        public WpfCheckBox RememberDebugInputCheckBox
        {
            get
            {
                if ((this.mRememberDebugInputCheckBox == null))
                {
                    this.mRememberDebugInputCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRememberDebugInputCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_RememberInputsCb_AutoID";
                    this.mRememberDebugInputCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRememberDebugInputCheckBox;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Cancelbtn_AutoID";
                    this.mCancelButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton DebugF6Button
        {
            get
            {
                if ((this.mDebugF6Button == null))
                {
                    this.mDebugF6Button = new WpfButton(this);
                    #region Search Criteria
                    this.mDebugF6Button.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Executebtn_AutoID";
                    this.mDebugF6Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDebugF6Button;
            }
        }
        
        public WpfButton ViewInBrowserF7Button
        {
            get
            {
                if ((this.mViewInBrowserF7Button == null))
                {
                    this.mViewInBrowserF7Button = new WpfButton(this);
                    #region Search Criteria
                    this.mViewInBrowserF7Button.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Browserbtn_AutoID";
                    this.mViewInBrowserF7Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewInBrowserF7Button;
            }
        }
        #endregion
        
        #region Fields
        private TabItemsTabList mTabItemsTabList;
        
        private WpfCheckBox mRememberDebugInputCheckBox;
        
        private WpfButton mCancelButton;
        
        private WpfButton mDebugF6Button;
        
        private WpfButton mViewInBrowserF7Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabItemsTabList : WpfTabList
    {
        
        public TabItemsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "TabItems";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputDataTab InputDataTab
        {
            get
            {
                if ((this.mInputDataTab == null))
                {
                    this.mInputDataTab = new InputDataTab(this);
                }
                return this.mInputDataTab;
            }
        }
        
        public XMLTab XMLTab
        {
            get
            {
                if ((this.mXMLTab == null))
                {
                    this.mXMLTab = new XMLTab(this);
                }
                return this.mXMLTab;
            }
        }
        
        public JSONTab JSONTab
        {
            get
            {
                if ((this.mJSONTab == null))
                {
                    this.mJSONTab = new JSONTab(this);
                }
                return this.mJSONTab;
            }
        }
        #endregion
        
        #region Fields
        private InputDataTab mInputDataTab;
        
        private XMLTab mXMLTab;
        
        private JSONTab mJSONTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputDataTab : WpfTabPage
    {
        
        public InputDataTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "UI_InputDataTab_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputsTable1 InputsTable
        {
            get
            {
                if ((this.mInputsTable == null))
                {
                    this.mInputsTable = new InputsTable1(this);
                }
                return this.mInputsTable;
            }
        }
        #endregion
        
        #region Fields
        private InputsTable1 mInputsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputsTable1 : WpfTable
    {
        
        public InputsTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "DataListInputs";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row123 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row123(this);
                }
                return this.mRow1;
            }
        }
        
        public Row25 Row2
        {
            get
            {
                if ((this.mRow2 == null))
                {
                    this.mRow2 = new Row25(this);
                }
                return this.mRow2;
            }
        }
        #endregion
        
        #region Fields
        private Row123 mRow1;
        
        private Row25 mRow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row123 : WpfPane
    {
        
        public Row123(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "0";
            this.SearchProperties[WpfPane.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputValueCell InputValueCell
        {
            get
            {
                if ((this.mInputValueCell == null))
                {
                    this.mInputValueCell = new InputValueCell(this);
                }
                return this.mInputValueCell;
            }
        }
        #endregion
        
        #region Fields
        private InputValueCell mInputValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputValueCell : WpfCell
    {
        
        public InputValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputValueComboboxl InputValueComboboxl
        {
            get
            {
                if ((this.mInputValueComboboxl == null))
                {
                    this.mInputValueComboboxl = new InputValueComboboxl(this);
                }
                return this.mInputValueComboboxl;
            }
        }
        #endregion
        
        #region Fields
        private InputValueComboboxl mInputValueComboboxl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputValueComboboxl : WpfComboBox
    {
        
        public InputValueComboboxl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit InputValueText
        {
            get
            {
                if ((this.mInputValueText == null))
                {
                    this.mInputValueText = new WpfEdit(this);
                    #region Search Criteria
                    this.mInputValueText.SearchProperties[WpfEdit.PropertyNames.Instance] = "1";
                    this.mInputValueText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputValueText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mInputValueText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row25 : WpfPane
    {
        
        public Row25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "0";
            this.SearchProperties[WpfPane.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputValueCell1 InputValueCell
        {
            get
            {
                if ((this.mInputValueCell == null))
                {
                    this.mInputValueCell = new InputValueCell1(this);
                }
                return this.mInputValueCell;
            }
        }
        #endregion
        
        #region Fields
        private InputValueCell1 mInputValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputValueCell1 : WpfCell
    {
        
        public InputValueCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputValueComboboxl1 InputValueComboboxl
        {
            get
            {
                if ((this.mInputValueComboboxl == null))
                {
                    this.mInputValueComboboxl = new InputValueComboboxl1(this);
                }
                return this.mInputValueComboboxl;
            }
        }
        #endregion
        
        #region Fields
        private InputValueComboboxl1 mInputValueComboboxl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputValueComboboxl1 : WpfComboBox
    {
        
        public InputValueComboboxl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit InputValueText
        {
            get
            {
                if ((this.mInputValueText == null))
                {
                    this.mInputValueText = new WpfEdit(this);
                    #region Search Criteria
                    this.mInputValueText.SearchProperties[WpfEdit.PropertyNames.Instance] = "1";
                    this.mInputValueText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputValueText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mInputValueText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XMLTab : WpfTabPage
    {
        
        public XMLTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "UI_XMLTab_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom XMLWindow
        {
            get
            {
                if ((this.mXMLWindow == null))
                {
                    this.mXMLWindow = new WpfCustom(this);
                    #region Search Criteria
                    this.mXMLWindow.SearchProperties[WpfControl.PropertyNames.ClassName] = null;
                    this.mXMLWindow.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_XMLEditor_AutoID";
                    this.mXMLWindow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mXMLWindow;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mXMLWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class JSONTab : WpfTabPage
    {
        
        public JSONTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "UI_XMLTab_AutoID";
            this.SearchProperties[WpfTabPage.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom JSONWindow
        {
            get
            {
                if ((this.mJSONWindow == null))
                {
                    this.mJSONWindow = new WpfCustom(this);
                    #region Search Criteria
                    this.mJSONWindow.SearchProperties[WpfControl.PropertyNames.ClassName] = null;
                    this.mJSONWindow.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_JsonEditor_AutoID";
                    this.mJSONWindow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mJSONWindow;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mJSONWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAsNewRemoteServer : WpfCustom
    {
        
        public ComboboxListItemAsNewRemoteServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "New Remote Server...";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText NewRemoteServerItemText
        {
            get
            {
                if ((this.mNewRemoteServerItemText == null))
                {
                    this.mNewRemoteServerItemText = new WpfText(this);
                    #region Search Criteria
                    this.mNewRemoteServerItemText.SearchProperties[WpfText.PropertyNames.Name] = "New Remote Server...";
                    this.mNewRemoteServerItemText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewRemoteServerItemText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mNewRemoteServerItemText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAsRemoteConnectionIntegration : WpfCustom
    {
        
        public ComboboxListItemAsRemoteConnectionIntegration(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Remote Connection Integration";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.Name] = "Remote Connection Integration";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemAsMicrosoftSQLServer : WpfCustom
    {
        
        public ComboboxListItemAsMicrosoftSQLServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Microsoft SQL Server";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText MicrosoftSQLServerText
        {
            get
            {
                if ((this.mMicrosoftSQLServerText == null))
                {
                    this.mMicrosoftSQLServerText = new WpfText(this);
                    #region Search Criteria
                    this.mMicrosoftSQLServerText.SearchProperties[WpfText.PropertyNames.Name] = "Microsoft SQL Server";
                    this.mMicrosoftSQLServerText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMicrosoftSQLServerText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mMicrosoftSQLServerText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemPostgreSqlDatabase : WpfCustom
    {
        
        public ComboboxListItemPostgreSqlDatabase(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "PostgreSQL Database";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText PostgreSQLDatabase
        {
            get
            {
                if ((this.mPostgreSQLDatabase == null))
                {
                    this.mPostgreSQLDatabase = new WpfText(this);
                    #region Search Criteria
                    this.mPostgreSQLDatabase.SearchProperties[WpfText.PropertyNames.Name] = "PostgreSQL Database";
                    this.mPostgreSQLDatabase.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPostgreSQLDatabase;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mPostgreSQLDatabase;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemODBCDatabase : WpfCustom
    {
        
        public ComboboxListItemODBCDatabase(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "ODBC Database";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText ODBCDatabaseText
        {
            get
            {
                if ((this.mODBCDatabaseText == null))
                {
                    this.mODBCDatabaseText = new WpfText(this);
                    #region Search Criteria
                    this.mODBCDatabaseText.SearchProperties[WpfText.PropertyNames.Name] = "ODBC Database";
                    this.mODBCDatabaseText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mODBCDatabaseText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mODBCDatabaseText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ComboboxListItemMySqlDatabase : WpfCustom
    {
        
        public ComboboxListItemMySqlDatabase(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "MySql Database";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText MySqlDatabaseText
        {
            get
            {
                if ((this.mMySqlDatabaseText == null))
                {
                    this.mMySqlDatabaseText = new WpfText(this);
                    #region Search Criteria
                    this.mMySqlDatabaseText.SearchProperties[WpfText.PropertyNames.Name] = "MySql Database";
                    this.mMySqlDatabaseText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMySqlDatabaseText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mMySqlDatabaseText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MessageBoxWindow : WpfWindow
    {
        
        public MessageBoxWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "WarewolfMessageBox";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public YesButton YesButton
        {
            get
            {
                if ((this.mYesButton == null))
                {
                    this.mYesButton = new YesButton(this);
                }
                return this.mYesButton;
            }
        }
        
        public NoButton NoButton
        {
            get
            {
                if ((this.mNoButton == null))
                {
                    this.mNoButton = new NoButton(this);
                }
                return this.mNoButton;
            }
        }
        
        public CancelButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new CancelButton(this);
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton OKButton
        {
            get
            {
                if ((this.mOKButton == null))
                {
                    this.mOKButton = new WpfButton(this);
                    #region Search Criteria
                    this.mOKButton.SearchProperties[WpfButton.PropertyNames.Name] = "OK";
                    this.mOKButton.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mOKButton;
            }
        }
        
        public WpfText UIPleasesavecurrentlyeText
        {
            get
            {
                if ((this.mUIPleasesavecurrentlyeText == null))
                {
                    this.mUIPleasesavecurrentlyeText = new WpfText(this);
                    #region Search Criteria
                    this.mUIPleasesavecurrentlyeText.SearchProperties[WpfText.PropertyNames.Name] = "Please save currently edited Test(s) before running the tests.";
                    this.mUIPleasesavecurrentlyeText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mUIPleasesavecurrentlyeText;
            }
        }
        
        public WpfText UIThefollowingerroroccText
        {
            get
            {
                if ((this.mUIThefollowingerroroccText == null))
                {
                    this.mUIThefollowingerroroccText = new WpfText(this);
                    #region Search Criteria
                    this.mUIThefollowingerroroccText.SearchProperties[WpfText.PropertyNames.Name] = "\r\n                  The following error occurred on save:\r\n                  Erro" +
                        "r while saving: This task requires that the user account specified has \'Log On A" +
                        "s Batch\' job rights\r\n                ";
                    this.mUIThefollowingerroroccText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mUIThefollowingerroroccText;
            }
        }
        
        public WpfText TheSwitchtoolcannotbText
        {
            get
            {
                if ((this.mTheSwitchtoolcannotbText == null))
                {
                    this.mTheSwitchtoolcannotbText = new WpfText(this);
                    #region Search Criteria
                    this.mTheSwitchtoolcannotbText.SearchProperties[WpfText.PropertyNames.Name] = "The Switch tool cannot be dropped onto this tool.";
                    this.mTheSwitchtoolcannotbText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mTheSwitchtoolcannotbText;
            }
        }
        
        public WpfText DropnotallowedText
        {
            get
            {
                if ((this.mDropnotallowedText == null))
                {
                    this.mDropnotallowedText = new WpfText(this);
                    #region Search Criteria
                    this.mDropnotallowedText.SearchProperties[WpfText.PropertyNames.Name] = "Drop not allowed";
                    this.mDropnotallowedText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mDropnotallowedText;
            }
        }
        #endregion
        
        #region Fields
        private YesButton mYesButton;
        
        private NoButton mNoButton;
        
        private CancelButton mCancelButton;
        
        private WpfButton mOKButton;
        
        private WpfText mUIPleasesavecurrentlyeText;
        
        private WpfText mUIThefollowingerroroccText;
        
        private WpfText mTheSwitchtoolcannotbText;
        
        private WpfText mDropnotallowedText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class YesButton : WpfButton
    {
        
        public YesButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Yes";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText YesButtonText
        {
            get
            {
                if ((this.mYesButtonText == null))
                {
                    this.mYesButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mYesButtonText.SearchProperties[WpfText.PropertyNames.Name] = "Yes";
                    this.mYesButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mYesButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mYesButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NoButton : WpfButton
    {
        
        public NoButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "No";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText NOButtonText
        {
            get
            {
                if ((this.mNOButtonText == null))
                {
                    this.mNOButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mNOButtonText.SearchProperties[WpfText.PropertyNames.Name] = "No";
                    this.mNOButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mNOButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mNOButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CancelButton : WpfButton
    {
        
        public CancelButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Cancel";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText CancelButtonText
        {
            get
            {
                if ((this.mCancelButtonText == null))
                {
                    this.mCancelButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mCancelButtonText.SearchProperties[WpfText.PropertyNames.Name] = "Cancel";
                    this.mCancelButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mCancelButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mCancelButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SaveDialogWindow : WpfWindow
    {
        
        public SaveDialogWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "SaveDialogView";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public ExplorerView ExplorerView
        {
            get
            {
                if ((this.mExplorerView == null))
                {
                    this.mExplorerView = new ExplorerView(this);
                }
                return this.mExplorerView;
            }
        }
        
        public WpfText NameLabel
        {
            get
            {
                if ((this.mNameLabel == null))
                {
                    this.mNameLabel = new WpfText(this);
                    #region Search Criteria
                    this.mNameLabel.SearchProperties[WpfText.PropertyNames.Name] = "Name:";
                    this.mNameLabel.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mNameLabel;
            }
        }
        
        public WpfEdit ServiceNameTextBox
        {
            get
            {
                if ((this.mServiceNameTextBox == null))
                {
                    this.mServiceNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mServiceNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ServiceNameTextBox";
                    this.mServiceNameTextBox.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mServiceNameTextBox;
            }
        }
        
        public WpfText ErrorLabel
        {
            get
            {
                if ((this.mErrorLabel == null))
                {
                    this.mErrorLabel = new WpfText(this);
                    #region Search Criteria
                    this.mErrorLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorMessageTextBlock";
                    this.mErrorLabel.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mErrorLabel;
            }
        }
        
        public WpfButton SaveButton
        {
            get
            {
                if ((this.mSaveButton == null))
                {
                    this.mSaveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSaveButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "OkButton";
                    this.mSaveButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mSaveButton;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelButton";
                    this.mCancelButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton DuplicateButton
        {
            get
            {
                if ((this.mDuplicateButton == null))
                {
                    this.mDuplicateButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDuplicateButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DuplicateButton";
                    this.mDuplicateButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mDuplicateButton;
            }
        }
        
        public WpfCheckBox UpdateDuplicatedRelat
        {
            get
            {
                if ((this.mUpdateDuplicatedRelat == null))
                {
                    this.mUpdateDuplicatedRelat = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUpdateDuplicatedRelat.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Update duplicated relationships?";
                    this.mUpdateDuplicatedRelat.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mUpdateDuplicatedRelat;
            }
        }
        #endregion
        
        #region Fields
        private ExplorerView mExplorerView;
        
        private WpfText mNameLabel;
        
        private WpfEdit mServiceNameTextBox;
        
        private WpfText mErrorLabel;
        
        private WpfButton mSaveButton;
        
        private WpfButton mCancelButton;
        
        private WpfButton mDuplicateButton;
        
        private WpfCheckBox mUpdateDuplicatedRelat;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerView : WpfCustom
    {
        
        public ExplorerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ExplorerView";
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public WpfEdit SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSearchTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mSearchTextBox.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mSearchTextBox;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public ExplorerTree2 ExplorerTree
        {
            get
            {
                if ((this.mExplorerTree == null))
                {
                    this.mExplorerTree = new ExplorerTree2(this);
                }
                return this.mExplorerTree;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mSearchTextBox;
        
        private WpfButton mRefreshButton;
        
        private ExplorerTree2 mExplorerTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerTree2 : WpfTree
    {
        
        public ExplorerTree2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public localhost1 localhost
        {
            get
            {
                if ((this.mlocalhost == null))
                {
                    this.mlocalhost = new localhost1(this);
                }
                return this.mlocalhost;
            }
        }
        #endregion
        
        #region Fields
        private localhost1 mlocalhost;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class localhost1 : WpfTreeItem
    {
        
        public localhost1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Checkbox2 Checkbox
        {
            get
            {
                if ((this.mCheckbox == null))
                {
                    this.mCheckbox = new Checkbox2(this);
                }
                return this.mCheckbox;
            }
        }
        
        public FirstItem2 FirstItem
        {
            get
            {
                if ((this.mFirstItem == null))
                {
                    this.mFirstItem = new FirstItem2(this);
                }
                return this.mFirstItem;
            }
        }
        
        public WpfTreeItem SecondItem
        {
            get
            {
                if ((this.mSecondItem == null))
                {
                    this.mSecondItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mSecondItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mSecondItem.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
                    this.mSecondItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSecondItem.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mSecondItem.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mSecondItem.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSecondItem;
            }
        }
        #endregion
        
        #region Fields
        private Checkbox2 mCheckbox;
        
        private FirstItem2 mFirstItem;
        
        private WpfTreeItem mSecondItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Checkbox2 : WpfCheckBox
    {
        
        public Checkbox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "Checkbox";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton IconButton
        {
            get
            {
                if ((this.mIconButton == null))
                {
                    this.mIconButton = new WpfButton(this);
                    #region Search Criteria
                    this.mIconButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mIconButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mIconButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIconButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mIconButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FirstItem2 : WpfTreeItem
    {
        
        public FirstItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResourceImageImage3 ResourceImageImage
        {
            get
            {
                if ((this.mResourceImageImage == null))
                {
                    this.mResourceImageImage = new ResourceImageImage3(this);
                }
                return this.mResourceImageImage;
            }
        }
        
        public WpfButton ExecuteIcon
        {
            get
            {
                if ((this.mExecuteIcon == null))
                {
                    this.mExecuteIcon = new WpfButton(this);
                    #region Search Criteria
                    this.mExecuteIcon.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExecuteButton";
                    this.mExecuteIcon.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExecuteIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExecuteIcon;
            }
        }
        #endregion
        
        #region Fields
        private ResourceImageImage3 mResourceImageImage;
        
        private WpfButton mExecuteIcon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceImageImage3 : WpfImage
    {
        
        public ResourceImageImage3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfImage.PropertyNames.AutomationId] = "ResourceImage";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplashPageWindow : WpfWindow
    {
        
        public SplashPageWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "SplashPage";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SplashPage");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DecisionOrSwitchDialog : WpfWindow
    {
        
        public DecisionOrSwitchDialog()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "ActivityDefaultWindow";
            #endregion
        }
        
        #region Properties
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelButton";
                    this.mCancelButton.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCancelButton;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectWindowsGroupDialog : WinWindow
    {
        
        public SelectWindowsGroupDialog()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Select Group";
            this.WindowTitles.Add("Select Group");
            #endregion
        }
        
        #region Properties
        public ItemPanel ItemPanel
        {
            get
            {
                if ((this.mItemPanel == null))
                {
                    this.mItemPanel = new ItemPanel(this);
                }
                return this.mItemPanel;
            }
        }
        
        public OKPanel OKPanel
        {
            get
            {
                if ((this.mOKPanel == null))
                {
                    this.mOKPanel = new OKPanel(this);
                }
                return this.mOKPanel;
            }
        }
        
        public CancelPanel CancelPanel
        {
            get
            {
                if ((this.mCancelPanel == null))
                {
                    this.mCancelPanel = new CancelPanel(this);
                }
                return this.mCancelPanel;
            }
        }
        #endregion
        
        #region Fields
        private ItemPanel mItemPanel;
        
        private OKPanel mOKPanel;
        
        private CancelPanel mCancelPanel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemPanel : WinWindow
    {
        
        public ItemPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "214";
            this.WindowTitles.Add("Select Group");
            #endregion
        }
        
        #region Properties
        public WinEdit ObjectNameTextbox
        {
            get
            {
                if ((this.mObjectNameTextbox == null))
                {
                    this.mObjectNameTextbox = new WinEdit(this);
                    #region Search Criteria
                    this.mObjectNameTextbox.SearchProperties.Add(new PropertyExpression(WinEdit.PropertyNames.Name, "Enter the object name to select", PropertyExpressionOperator.Contains));
                    this.mObjectNameTextbox.WindowTitles.Add("Select Group");
                    #endregion
                }
                return this.mObjectNameTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mObjectNameTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OKPanel : WinWindow
    {
        
        public OKPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Select Group");
            #endregion
        }
        
        #region Properties
        public WinButton OK
        {
            get
            {
                if ((this.mOK == null))
                {
                    this.mOK = new WinButton(this);
                    #region Search Criteria
                    this.mOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mOK.WindowTitles.Add("Select Group");
                    #endregion
                }
                return this.mOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CancelPanel : WinWindow
    {
        
        public CancelPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Select Group");
            #endregion
        }
        
        #region Properties
        public WinButton Cancel
        {
            get
            {
                if ((this.mCancel == null))
                {
                    this.mCancel = new WinButton(this);
                    #region Search Criteria
                    this.mCancel.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mCancel.WindowTitles.Add("Select Group");
                    #endregion
                }
                return this.mCancel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServicePickerDialog : WpfWindow
    {
        
        public ServicePickerDialog()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Select A Service";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchProperties[WpfWindow.PropertyNames.AutomationId] = "UI_SelectServiceWindow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Explorer1 Explorer
        {
            get
            {
                if ((this.mExplorer == null))
                {
                    this.mExplorer = new Explorer1(this);
                }
                return this.mExplorer;
            }
        }
        
        public WpfButton OK
        {
            get
            {
                if ((this.mOK == null))
                {
                    this.mOK = new WpfButton(this);
                    #region Search Criteria
                    this.mOK.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SelectServiceOKButton_AutoID";
                    this.mOK.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOK;
            }
        }
        
        public WpfButton Cancel
        {
            get
            {
                if ((this.mCancel == null))
                {
                    this.mCancel = new WpfButton(this);
                    #region Search Criteria
                    this.mCancel.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SelectServiceCancelButton_AutoID";
                    this.mCancel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancel;
            }
        }
        #endregion
        
        #region Fields
        private Explorer1 mExplorer;
        
        private WpfButton mOK;
        
        private WpfButton mCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Explorer1 : WpfCustom
    {
        
        public Explorer1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ExplorerView";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit FilterTextbox
        {
            get
            {
                if ((this.mFilterTextbox == null))
                {
                    this.mFilterTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mFilterTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mFilterTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFilterTextbox;
            }
        }
        
        public WpfButton Refresh
        {
            get
            {
                if ((this.mRefresh == null))
                {
                    this.mRefresh = new WpfButton(this);
                    #region Search Criteria
                    this.mRefresh.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefresh;
            }
        }
        
        public ExplorerTree3 ExplorerTree
        {
            get
            {
                if ((this.mExplorerTree == null))
                {
                    this.mExplorerTree = new ExplorerTree3(this);
                }
                return this.mExplorerTree;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mFilterTextbox;
        
        private WpfButton mRefresh;
        
        private ExplorerTree3 mExplorerTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerTree3 : WpfTree
    {
        
        public ExplorerTree3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Localhost2 Localhost
        {
            get
            {
                if ((this.mLocalhost == null))
                {
                    this.mLocalhost = new Localhost2(this);
                }
                return this.mLocalhost;
            }
        }
        #endregion
        
        #region Fields
        private Localhost2 mLocalhost;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Localhost2 : WpfTreeItem
    {
        
        public Localhost2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TreeItem12 TreeItem1
        {
            get
            {
                if ((this.mTreeItem1 == null))
                {
                    this.mTreeItem1 = new TreeItem12(this);
                }
                return this.mTreeItem1;
            }
        }
        
        public TreeItem22 TreeItem2
        {
            get
            {
                if ((this.mTreeItem2 == null))
                {
                    this.mTreeItem2 = new TreeItem22(this);
                }
                return this.mTreeItem2;
            }
        }
        
        public Checkbox3 Checkbox
        {
            get
            {
                if ((this.mCheckbox == null))
                {
                    this.mCheckbox = new Checkbox3(this);
                }
                return this.mCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private TreeItem12 mTreeItem1;
        
        private TreeItem22 mTreeItem2;
        
        private Checkbox3 mCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem12 : WpfTreeItem
    {
        
        public TreeItem12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem TreeItem11
        {
            get
            {
                if ((this.mTreeItem11 == null))
                {
                    this.mTreeItem11 = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mTreeItem11.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mTreeItem11.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mTreeItem11.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mTreeItem11.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTreeItem11;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mTreeItem11;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TreeItem22 : WpfTreeItem
    {
        
        public TreeItem22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem TreeItem1
        {
            get
            {
                if ((this.mTreeItem1 == null))
                {
                    this.mTreeItem1 = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mTreeItem1.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mTreeItem1.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mTreeItem1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mTreeItem1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTreeItem1;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mTreeItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Checkbox3 : WpfCheckBox
    {
        
        public Checkbox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "Checkbox";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SwitchCaseDialog : WpfWindow
    {
        
        public SwitchCaseDialog()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "ActivityDefaultWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ActivityDefaultWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("ActivityDefaultWindow");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWarewolfDEV2SANELEMTWindow : WpfWindow
    {
        
        public UIWarewolfDEV2SANELEMTWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Warewolf (DEV2\\SANELE.MTHEMBU)";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIUI_SplitPane_AutoIDCustom UIUI_SplitPane_AutoIDCustom
        {
            get
            {
                if ((this.mUIUI_SplitPane_AutoIDCustom == null))
                {
                    this.mUIUI_SplitPane_AutoIDCustom = new UIUI_SplitPane_AutoIDCustom(this);
                }
                return this.mUIUI_SplitPane_AutoIDCustom;
            }
        }
        
        public UIDebugOutputCustom UIDebugOutputCustom
        {
            get
            {
                if ((this.mUIDebugOutputCustom == null))
                {
                    this.mUIDebugOutputCustom = new UIDebugOutputCustom(this);
                }
                return this.mUIDebugOutputCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_SplitPane_AutoIDCustom mUIUI_SplitPane_AutoIDCustom;
        
        private UIDebugOutputCustom mUIDebugOutputCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUI_SplitPane_AutoIDCustom : WpfCustom
    {
        
        public UIUI_SplitPane_AutoIDCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SplitPane_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIUI_TabManager_AutoIDTabList UIUI_TabManager_AutoIDTabList
        {
            get
            {
                if ((this.mUIUI_TabManager_AutoIDTabList == null))
                {
                    this.mUIUI_TabManager_AutoIDTabList = new UIUI_TabManager_AutoIDTabList(this);
                }
                return this.mUIUI_TabManager_AutoIDTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_TabManager_AutoIDTabList mUIUI_TabManager_AutoIDTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUI_TabManager_AutoIDTabList : WpfTabList
    {
        
        public UIUI_TabManager_AutoIDTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIDev2StudioViewModelsTabPage UIDev2StudioViewModelsTabPage
        {
            get
            {
                if ((this.mUIDev2StudioViewModelsTabPage == null))
                {
                    this.mUIDev2StudioViewModelsTabPage = new UIDev2StudioViewModelsTabPage(this);
                }
                return this.mUIDev2StudioViewModelsTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UIDev2StudioViewModelsTabPage mUIDev2StudioViewModelsTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDev2StudioViewModelsTabPage : WpfTabPage
    {
        
        public UIDev2StudioViewModelsTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.Workflow.WorkflowDesignerViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIDev2StudioViewModelsCustom UIDev2StudioViewModelsCustom
        {
            get
            {
                if ((this.mUIDev2StudioViewModelsCustom == null))
                {
                    this.mUIDev2StudioViewModelsCustom = new UIDev2StudioViewModelsCustom(this);
                }
                return this.mUIDev2StudioViewModelsCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDev2StudioViewModelsCustom mUIDev2StudioViewModelsCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDev2StudioViewModelsCustom : WpfCustom
    {
        
        public UIDev2StudioViewModelsCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIUI_WorkflowDesigner_Custom UIUI_WorkflowDesigner_Custom
        {
            get
            {
                if ((this.mUIUI_WorkflowDesigner_Custom == null))
                {
                    this.mUIUI_WorkflowDesigner_Custom = new UIUI_WorkflowDesigner_Custom(this);
                }
                return this.mUIUI_WorkflowDesigner_Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_WorkflowDesigner_Custom mUIUI_WorkflowDesigner_Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUI_WorkflowDesigner_Custom : WpfCustom
    {
        
        public UIUI_WorkflowDesigner_Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowDesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_WorkflowDesigner_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIUserControl_1Custom UIUserControl_1Custom
        {
            get
            {
                if ((this.mUIUserControl_1Custom == null))
                {
                    this.mUIUserControl_1Custom = new UIUserControl_1Custom(this);
                }
                return this.mUIUserControl_1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIUserControl_1Custom mUIUserControl_1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUserControl_1Custom : WpfCustom
    {
        
        public UIUserControl_1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIScrollViewerPane UIScrollViewerPane
        {
            get
            {
                if ((this.mUIScrollViewerPane == null))
                {
                    this.mUIScrollViewerPane = new UIScrollViewerPane(this);
                }
                return this.mUIScrollViewerPane;
            }
        }
        #endregion
        
        #region Fields
        private UIScrollViewerPane mUIScrollViewerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIScrollViewerPane : WpfPane
    {
        
        public UIScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "scrollViewer";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIActivityBuilderCustom UIActivityBuilderCustom
        {
            get
            {
                if ((this.mUIActivityBuilderCustom == null))
                {
                    this.mUIActivityBuilderCustom = new UIActivityBuilderCustom(this);
                }
                return this.mUIActivityBuilderCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIActivityBuilderCustom mUIActivityBuilderCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIActivityBuilderCustom : WpfCustom
    {
        
        public UIActivityBuilderCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ActivityTypeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActivityTypeDesigner";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIWorkflowItemPresenteCustom UIWorkflowItemPresenteCustom
        {
            get
            {
                if ((this.mUIWorkflowItemPresenteCustom == null))
                {
                    this.mUIWorkflowItemPresenteCustom = new UIWorkflowItemPresenteCustom(this);
                }
                return this.mUIWorkflowItemPresenteCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIWorkflowItemPresenteCustom mUIWorkflowItemPresenteCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWorkflowItemPresenteCustom : WpfCustom
    {
        
        public UIWorkflowItemPresenteCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIFlowchartCustom UIFlowchartCustom
        {
            get
            {
                if ((this.mUIFlowchartCustom == null))
                {
                    this.mUIFlowchartCustom = new UIFlowchartCustom(this);
                }
                return this.mUIFlowchartCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFlowchartCustom mUIFlowchartCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFlowchartCustom : WpfCustom
    {
        
        public UIFlowchartCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Unsaved 1(FlowchartDesigner)";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIDsfNumberFormatActivCustom UIDsfNumberFormatActivCustom
        {
            get
            {
                if ((this.mUIDsfNumberFormatActivCustom == null))
                {
                    this.mUIDsfNumberFormatActivCustom = new UIDsfNumberFormatActivCustom(this);
                }
                return this.mUIDsfNumberFormatActivCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDsfNumberFormatActivCustom mUIDsfNumberFormatActivCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDsfNumberFormatActivCustom : WpfCustom
    {
        
        public UIDsfNumberFormatActivCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FormatNumberDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Format Number(FormatNumberDesigner)";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfCustom UILargeViewContentCustom
        {
            get
            {
                if ((this.mUILargeViewContentCustom == null))
                {
                    this.mUILargeViewContentCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUILargeViewContentCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
                    this.mUILargeViewContentCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
                    this.mUILargeViewContentCustom.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUILargeViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUILargeViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDebugOutputCustom : WpfCustom
    {
        
        public UIDebugOutputCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DebugOutputView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DebugOutput";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfTree DebugOutputTreeTree
        {
            get
            {
                if ((this.mDebugOutputTreeTree == null))
                {
                    this.mDebugOutputTreeTree = new WpfTree(this);
                    #region Search Criteria
                    this.mDebugOutputTreeTree.SearchProperties[WpfTree.PropertyNames.AutomationId] = "DebugOutputTree";
                    this.mDebugOutputTreeTree.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDebugOutputTreeTree;
            }
        }
        #endregion
        
        #region Fields
        private WpfTree mDebugOutputTreeTree;
        #endregion
    }
}
