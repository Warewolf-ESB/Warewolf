// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Warewolf.UITests.Deploy.DeployUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class DeployUIMap
    {
        
        #region Properties
        public MainStudioWindow MainStudioWindow
        {
            get
            {
                if ((this.mMainStudioWindow == null))
                {
                    this.mMainStudioWindow = new MainStudioWindow();
                }
                return this.mMainStudioWindow;
            }
        }
        #endregion
        
        #region Fields
        private MainStudioWindow mMainStudioWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MainStudioWindow : WpfWindow
    {
        
        public MainStudioWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.Name, "Warewolf", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DockManager DockManager
        {
            get
            {
                if ((this.mDockManager == null))
                {
                    this.mDockManager = new DockManager(this);
                }
                return this.mDockManager;
            }
        }
        #endregion
        
        #region Fields
        private DockManager mDockManager;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DockManager : WpfCustom
    {
        
        public DockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitPaneMiddle SplitPaneMiddle
        {
            get
            {
                if ((this.mSplitPaneMiddle == null))
                {
                    this.mSplitPaneMiddle = new SplitPaneMiddle(this);
                }
                return this.mSplitPaneMiddle;
            }
        }
        #endregion
        
        #region Fields
        private SplitPaneMiddle mSplitPaneMiddle;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneMiddle : WpfCustom
    {
        
        public SplitPaneMiddle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabManSplitPane TabManSplitPane
        {
            get
            {
                if ((this.mTabManSplitPane == null))
                {
                    this.mTabManSplitPane = new TabManSplitPane(this);
                }
                return this.mTabManSplitPane;
            }
        }
        #endregion
        
        #region Fields
        private TabManSplitPane mTabManSplitPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabManSplitPane : WpfCustom
    {
        
        public TabManSplitPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SplitPane_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabMan TabMan
        {
            get
            {
                if ((this.mTabMan == null))
                {
                    this.mTabMan = new TabMan(this);
                }
                return this.mTabMan;
            }
        }
        #endregion
        
        #region Fields
        private TabMan mTabMan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabMan : WpfTabList
    {
        
        public TabMan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DeployTab DeployTab
        {
            get
            {
                if ((this.mDeployTab == null))
                {
                    this.mDeployTab = new DeployTab(this);
                }
                return this.mDeployTab;
            }
        }
        #endregion
        
        #region Fields
        private DeployTab mDeployTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeployTab : WpfTabPage
    {
        
        public DeployTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.DeployWorksurfaceViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext mWorkSurfaceContext;
        
        private WpfButton mCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext : WpfCustom
    {
        
        public WorkSurfaceContext(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DockManager1 DockManager
        {
            get
            {
                if ((this.mDockManager == null))
                {
                    this.mDockManager = new DockManager1(this);
                }
                return this.mDockManager;
            }
        }
        #endregion
        
        #region Fields
        private DockManager1 mDockManager;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DockManager1 : WpfCustom
    {
        
        public DockManager1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ContentDockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DeployView DeployView
        {
            get
            {
                if ((this.mDeployView == null))
                {
                    this.mDeployView = new DeployView(this);
                }
                return this.mDeployView;
            }
        }
        #endregion
        
        #region Fields
        private DeployView mDeployView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeployView : WpfCustom
    {
        
        public DeployView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DeployView";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DeployButton DeployButton
        {
            get
            {
                if ((this.mDeployButton == null))
                {
                    this.mDeployButton = new DeployButton(this);
                }
                return this.mDeployButton;
            }
        }
        
        public WpfText DeployButtonMessageText
        {
            get
            {
                if ((this.mDeployButtonMessageText == null))
                {
                    this.mDeployButtonMessageText = new WpfText(this);
                    #region Search Criteria
                    this.mDeployButtonMessageText.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_DeploySelectTB_AutoID";
                    this.mDeployButtonMessageText.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mDeployButtonMessageText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployButtonMessageText;
            }
        }
        
        public DestinationServerConectControl DestinationServerConectControl
        {
            get
            {
                if ((this.mDestinationServerConectControl == null))
                {
                    this.mDestinationServerConectControl = new DestinationServerConectControl(this);
                }
                return this.mDestinationServerConectControl;
            }
        }
        
        public WpfButton EditDestinationButton
        {
            get
            {
                if ((this.mEditDestinationButton == null))
                {
                    this.mEditDestinationButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditDestinationButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DestinationServerEditbtn_AutoID";
                    this.mEditDestinationButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditDestinationButton;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SourceServerEditbtn_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfHyperlink NewResourceHyperlink
        {
            get
            {
                if ((this.mNewResourceHyperlink == null))
                {
                    this.mNewResourceHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mNewResourceHyperlink.SearchProperties[WpfHyperlink.PropertyNames.AutomationId] = "NewResourcesView";
                    this.mNewResourceHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewResourceHyperlink;
            }
        }
        
        public WpfText NewResourcesText
        {
            get
            {
                if ((this.mNewResourcesText == null))
                {
                    this.mNewResourcesText = new WpfText(this);
                    #region Search Criteria
                    this.mNewResourcesText.SearchProperties[WpfText.PropertyNames.Name] = "New Resources";
                    this.mNewResourcesText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewResourcesText;
            }
        }
        
        public OverrideHyperlink OverrideHyperlink
        {
            get
            {
                if ((this.mOverrideHyperlink == null))
                {
                    this.mOverrideHyperlink = new OverrideHyperlink(this);
                }
                return this.mOverrideHyperlink;
            }
        }
        
        public WpfText OverrideText
        {
            get
            {
                if ((this.mOverrideText == null))
                {
                    this.mOverrideText = new WpfText(this);
                    #region Search Criteria
                    this.mOverrideText.SearchProperties[WpfText.PropertyNames.Name] = "Override";
                    this.mOverrideText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOverrideText;
            }
        }
        
        public WpfText ServiceCountText
        {
            get
            {
                if ((this.mServiceCountText == null))
                {
                    this.mServiceCountText = new WpfText(this);
                    #region Search Criteria
                    this.mServiceCountText.SearchProperties[WpfText.PropertyNames.AutomationId] = "WorkflowsCount";
                    this.mServiceCountText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServiceCountText;
            }
        }
        
        public WpfText ServicesText
        {
            get
            {
                if ((this.mServicesText == null))
                {
                    this.mServicesText = new WpfText(this);
                    #region Search Criteria
                    this.mServicesText.SearchProperties[WpfText.PropertyNames.Name] = "Services";
                    this.mServicesText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServicesText;
            }
        }
        
        public WpfButton ShowDependenciesButton
        {
            get
            {
                if ((this.mShowDependenciesButton == null))
                {
                    this.mShowDependenciesButton = new WpfButton(this);
                    #region Search Criteria
                    this.mShowDependenciesButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SelectDepbtn_AutoID";
                    this.mShowDependenciesButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowDependenciesButton;
            }
        }
        
        public WpfButton SourceConnectButton
        {
            get
            {
                if ((this.mSourceConnectButton == null))
                {
                    this.mSourceConnectButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSourceConnectButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SourceConnectServerbtn_AutoID";
                    this.mSourceConnectButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourceConnectButton;
            }
        }
        
        public WpfText SourceCountText
        {
            get
            {
                if ((this.mSourceCountText == null))
                {
                    this.mSourceCountText = new WpfText(this);
                    #region Search Criteria
                    this.mSourceCountText.SearchProperties[WpfText.PropertyNames.AutomationId] = "SourcesCount";
                    this.mSourceCountText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourceCountText;
            }
        }
        
        public SourceServerConectControl SourceServerConectControl
        {
            get
            {
                if ((this.mSourceServerConectControl == null))
                {
                    this.mSourceServerConectControl = new SourceServerConectControl(this);
                }
                return this.mSourceServerConectControl;
            }
        }
        
        public SourceServerExplorer SourceServerExplorer
        {
            get
            {
                if ((this.mSourceServerExplorer == null))
                {
                    this.mSourceServerExplorer = new SourceServerExplorer(this);
                }
                return this.mSourceServerExplorer;
            }
        }
        
        public WpfText SourcesText
        {
            get
            {
                if ((this.mSourcesText == null))
                {
                    this.mSourcesText = new WpfText(this);
                    #region Search Criteria
                    this.mSourcesText.SearchProperties[WpfText.PropertyNames.Name] = "Sources";
                    this.mSourcesText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesText;
            }
        }
        #endregion
        
        #region Fields
        private DeployButton mDeployButton;
        
        private WpfText mDeployButtonMessageText;
        
        private DestinationServerConectControl mDestinationServerConectControl;
        
        private WpfButton mEditDestinationButton;
        
        private WpfButton mEditSourceButton;
        
        private WpfHyperlink mNewResourceHyperlink;
        
        private WpfText mNewResourcesText;
        
        private OverrideHyperlink mOverrideHyperlink;
        
        private WpfText mOverrideText;
        
        private WpfText mServiceCountText;
        
        private WpfText mServicesText;
        
        private WpfButton mShowDependenciesButton;
        
        private WpfButton mSourceConnectButton;
        
        private WpfText mSourceCountText;
        
        private SourceServerConectControl mSourceServerConectControl;
        
        private SourceServerExplorer mSourceServerExplorer;
        
        private WpfText mSourcesText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeployButton : WpfButton
    {
        
        public DeployButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Deploybtn_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DestinationServerConectControl : WpfCustom
    {
        
        public DestinationServerConectControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DestinationConnectControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Combobox Combobox
        {
            get
            {
                if ((this.mCombobox == null))
                {
                    this.mCombobox = new Combobox(this);
                }
                return this.mCombobox;
            }
        }
        
        public WpfButton ConnectDestinationButton
        {
            get
            {
                if ((this.mConnectDestinationButton == null))
                {
                    this.mConnectDestinationButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectDestinationButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DestinationServerConnectbtn_AutoID";
                    this.mConnectDestinationButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectDestinationButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_IndicatorConnecting_AutoID";
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private Combobox mCombobox;
        
        private WpfButton mConnectDestinationButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Combobox : WpfCustom
    {
        
        public Combobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TheServerComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ToggleButton
        {
            get
            {
                if ((this.mToggleButton == null))
                {
                    this.mToggleButton = new WpfButton(this);
                    #region Search Criteria
                    this.mToggleButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToggleButton;
            }
        }
        
        public WpfText RemoteConnectionIntegrationText
        {
            get
            {
                if ((this.mRemoteConnectionIntegrationText == null))
                {
                    this.mRemoteConnectionIntegrationText = new WpfText(this);
                    #region Search Criteria
                    this.mRemoteConnectionIntegrationText.SearchProperties[WpfText.PropertyNames.Name] = "Remote Connection Integration";
                    this.mRemoteConnectionIntegrationText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRemoteConnectionIntegrationText;
            }
        }
        
        public WpfText ConnectedRemoteConnectionText
        {
            get
            {
                if ((this.mConnectedRemoteConnectionText == null))
                {
                    this.mConnectedRemoteConnectionText = new WpfText(this);
                    #region Search Criteria
                    this.mConnectedRemoteConnectionText.SearchProperties[WpfText.PropertyNames.Name] = "Remote Connection Integration (Connected)";
                    this.mConnectedRemoteConnectionText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectedRemoteConnectionText;
            }
        }
        
        public WpfText ConnectedLocalhostText
        {
            get
            {
                if ((this.mConnectedLocalhostText == null))
                {
                    this.mConnectedLocalhostText = new WpfText(this);
                    #region Search Criteria
                    this.mConnectedLocalhostText.SearchProperties[WpfText.PropertyNames.Name] = "localhost (Connected)";
                    this.mConnectedLocalhostText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectedLocalhostText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mToggleButton;
        
        private WpfText mRemoteConnectionIntegrationText;
        
        private WpfText mConnectedRemoteConnectionText;
        
        private WpfText mConnectedLocalhostText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OverrideHyperlink : WpfHyperlink
    {
        
        public OverrideHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfHyperlink.PropertyNames.AutomationId] = "OverridesCountView";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText UIItem1Text
        {
            get
            {
                if ((this.mUIItem1Text == null))
                {
                    this.mUIItem1Text = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem1Text.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
                    #endregion
                }
                return this.mUIItem1Text;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIItem1Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourceServerConectControl : WpfCustom
    {
        
        public SourceServerConectControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourceConnectControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Combobox1 Combobox
        {
            get
            {
                if ((this.mCombobox == null))
                {
                    this.mCombobox = new Combobox1(this);
                }
                return this.mCombobox;
            }
        }
        
        public WpfButton ConnectSourceButton
        {
            get
            {
                if ((this.mConnectSourceButton == null))
                {
                    this.mConnectSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SourceConnectServerbtn_AutoID";
                    this.mConnectSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectSourceButton;
            }
        }
        
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_IndicatorConnecting_AutoID";
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private Combobox1 mCombobox;
        
        private WpfButton mConnectSourceButton;
        
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Combobox1 : WpfCustom
    {
        
        public Combobox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TheServerComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ToggleButton
        {
            get
            {
                if ((this.mToggleButton == null))
                {
                    this.mToggleButton = new WpfButton(this);
                    #region Search Criteria
                    this.mToggleButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToggleButton;
            }
        }
        
        public WpfText RemoteConnectionIntegrationText
        {
            get
            {
                if ((this.mRemoteConnectionIntegrationText == null))
                {
                    this.mRemoteConnectionIntegrationText = new WpfText(this);
                    #region Search Criteria
                    this.mRemoteConnectionIntegrationText.SearchProperties[WpfText.PropertyNames.Name] = "Remote Connection Integration";
                    this.mRemoteConnectionIntegrationText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRemoteConnectionIntegrationText;
            }
        }
        
        public WpfText ConnectedRemoteConnectionText
        {
            get
            {
                if ((this.mConnectedRemoteConnectionText == null))
                {
                    this.mConnectedRemoteConnectionText = new WpfText(this);
                    #region Search Criteria
                    this.mConnectedRemoteConnectionText.SearchProperties[WpfText.PropertyNames.Name] = "Remote Connection Integration (Connected)";
                    this.mConnectedRemoteConnectionText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectedRemoteConnectionText;
            }
        }
        
        public LocalhostText LocalhostText
        {
            get
            {
                if ((this.mLocalhostText == null))
                {
                    this.mLocalhostText = new LocalhostText(this);
                }
                return this.mLocalhostText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mToggleButton;
        
        private WpfText mRemoteConnectionIntegrationText;
        
        private WpfText mConnectedRemoteConnectionText;
        
        private LocalhostText mLocalhostText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LocalhostText : WpfText
    {
        
        public LocalhostText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "localhost (Connected)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom Spinner
        {
            get
            {
                if ((this.mSpinner == null))
                {
                    this.mSpinner = new WpfCustom(this);
                    #region Search Criteria
                    this.mSpinner.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mSpinner.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSpinner.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSpinner;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mSpinner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourceServerExplorer : WpfCustom
    {
        
        public SourceServerExplorer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourceNavigationView";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit SearchTextbox
        {
            get
            {
                if ((this.mSearchTextbox == null))
                {
                    this.mSearchTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSearchTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mSearchTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSearchTextbox;
            }
        }
        
        public ExplorerTree ExplorerTree
        {
            get
            {
                if ((this.mExplorerTree == null))
                {
                    this.mExplorerTree = new ExplorerTree(this);
                }
                return this.mExplorerTree;
            }
        }
        
        public WpfText FilterText
        {
            get
            {
                if ((this.mFilterText == null))
                {
                    this.mFilterText = new WpfText(this);
                    #region Search Criteria
                    this.mFilterText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mFilterText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFilterText;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "FilterRefreshButton";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mSearchTextbox;
        
        private ExplorerTree mExplorerTree;
        
        private WpfText mFilterText;
        
        private WpfButton mRefreshButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerTree : WpfTree
    {
        
        public ExplorerTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SourceServerName SourceServerName
        {
            get
            {
                if ((this.mSourceServerName == null))
                {
                    this.mSourceServerName = new SourceServerName(this);
                }
                return this.mSourceServerName;
            }
        }
        
        public LocalHost LocalHost
        {
            get
            {
                if ((this.mLocalHost == null))
                {
                    this.mLocalHost = new LocalHost(this);
                }
                return this.mLocalHost;
            }
        }
        
        public RemoteServer RemoteServer
        {
            get
            {
                if ((this.mRemoteServer == null))
                {
                    this.mRemoteServer = new RemoteServer(this);
                }
                return this.mRemoteServer;
            }
        }
        #endregion
        
        #region Fields
        private SourceServerName mSourceServerName;
        
        private LocalHost mLocalHost;
        
        private RemoteServer mRemoteServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourceServerName : WpfTreeItem
    {
        
        public SourceServerName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.EnvironmentViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FirstExplorerTreeItem FirstExplorerTreeItem
        {
            get
            {
                if ((this.mFirstExplorerTreeItem == null))
                {
                    this.mFirstExplorerTreeItem = new FirstExplorerTreeItem(this);
                }
                return this.mFirstExplorerTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private FirstExplorerTreeItem mFirstExplorerTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FirstExplorerTreeItem : WpfTreeItem
    {
        
        public FirstExplorerTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ExplorerItemViewModel";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox CheckBox
        {
            get
            {
                if ((this.mCheckBox == null))
                {
                    this.mCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "ResourceNameCheckBox";
                    this.mCheckBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LocalHost : WpfTreeItem
    {
        
        public LocalHost(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.EnvironmentViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Item1 Item1
        {
            get
            {
                if ((this.mItem1 == null))
                {
                    this.mItem1 = new Item1(this);
                }
                return this.mItem1;
            }
        }
        
        public WpfCheckBox EnvironmentNameCheckCheckBox
        {
            get
            {
                if ((this.mEnvironmentNameCheckCheckBox == null))
                {
                    this.mEnvironmentNameCheckCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEnvironmentNameCheckCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "EnvironmentNameCheckBox";
                    this.mEnvironmentNameCheckCheckBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mEnvironmentNameCheckCheckBox.WindowTitles.Add("Warewolf (DEV2\\NKOSINATHI.SANGWENI)");
                    #endregion
                }
                return this.mEnvironmentNameCheckCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private Item1 mItem1;
        
        private WpfCheckBox mEnvironmentNameCheckCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Item1 : WpfTreeItem
    {
        
        public Item1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ExplorerItemViewModel";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox CheckBox
        {
            get
            {
                if ((this.mCheckBox == null))
                {
                    this.mCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "ResourceNameCheckBox";
                    this.mCheckBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCheckBox;
            }
        }
        
        public WpfText ResourceText
        {
            get
            {
                if ((this.mResourceText == null))
                {
                    this.mResourceText = new WpfText(this);
                    #region Search Criteria
                    this.mResourceText.SearchProperties[WpfText.PropertyNames.AutomationId] = "ResourceNameTextBlock";
                    this.mResourceText.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mResourceText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mResourceText;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mCheckBox;
        
        private WpfText mResourceText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RemoteServer : WpfTreeItem
    {
        
        public RemoteServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.EnvironmentViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public FirstRemoteResource FirstRemoteResource
        {
            get
            {
                if ((this.mFirstRemoteResource == null))
                {
                    this.mFirstRemoteResource = new FirstRemoteResource(this);
                }
                return this.mFirstRemoteResource;
            }
        }
        #endregion
        
        #region Fields
        private FirstRemoteResource mFirstRemoteResource;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FirstRemoteResource : WpfTreeItem
    {
        
        public FirstRemoteResource(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ExplorerItemViewModel";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox FirstRemoteResourceCheckBox
        {
            get
            {
                if ((this.mFirstRemoteResourceCheckBox == null))
                {
                    this.mFirstRemoteResourceCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mFirstRemoteResourceCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "ResourceNameCheckBox";
                    this.mFirstRemoteResourceCheckBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFirstRemoteResourceCheckBox.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mFirstRemoteResourceCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mFirstRemoteResourceCheckBox;
        #endregion
    }
}
