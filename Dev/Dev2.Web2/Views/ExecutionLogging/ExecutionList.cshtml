@model IEnumerable<Dev2.Common.LogEntry>
@{
    Layout = "~/Views/Shared/_Layout2.cshtml";
}

<table id="executionList" class="table">
    <tr>
        <th data-toggle="tooltip" title="Execution Id" data-placement="right" style="width:10%" onclick="sortTable(0)">Execution Id</th>
        <th data-toggle="tooltip" title="Execution Time" data-placement="right" style="width:8%" onclick="sortTable(1)">Execution Time</th>
        <th data-toggle="tooltip" title="Status" data-placement="right" style="width:7%" onclick="sortTable(2)">Status</th>
        <th data-toggle="tooltip" title="Start Time" data-placement="right" style="width:15%" onclick="sortTable(3)">Start Time</th>
        <th data-toggle="tooltip" title="Completed Time" data-placement="right" style="width:15%" onclick="sortTable(4)">Completed Time</th>
        <th data-toggle="tooltip" title="Url" data-placement="right" style="width:28%" onclick="sortTable(5)">Url</th>
        <th data-toggle="tooltip" title="User" data-placement="right" style="width:28%" onclick="sortTable(6)">User</th>
        <th data-toggle="tooltip" title="Result" data-placement="right" style="width:1%" onclick="sortTable(7)">Result</th>
    </tr>
    <tr>
        <td id="filterTableRow"><input type="text" id="myInput" onkeyup="filterColumn(0)" placeholder="Search.."></td>
        <td id="filterTableRow"><input type="text" id="myInput" onkeyup="filterColumn(1)" placeholder="Search.."></td>
        <td id="filterTableRow"><input type="text" id="myInput" onkeyup="filterColumn(2)" placeholder="Search.."></td>
        <td id="filterTableRow"><input type="text" id="myInput" onkeyup="filterColumn(3)" placeholder="Search.."></td>
        <td id="filterTableRow"><input type="text" id="myDateinput" placeholder="Search.."></td>
        <td id="filterTableRow"><input type="text" id="myInput" onkeyup="filterColumn(5)" placeholder="Search.."></td>
        <td id="filterTableRow"><input type="text" id="myInput" onkeyup="filterColumn(6)" placeholder="Search.."></td>
        <td id="filterTableRow"></td>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td style="width:1%">
                @Html.DisplayFor(modelItem => item.ExecutionId)
            </td>
            <td style="width:5%">
                @Html.DisplayFor(modelItem => item.ExecutionTime)
            </td>
            <td style="width:5%">
                @Html.DisplayFor(modelItem => item.Status)
            </td>
            <td style="width:10%">
                @Html.DisplayFor(modelItem => item.StartDateTime)
            </td>
            <td style="width:10%">
                @Html.DisplayFor(modelItem => item.CompletedDateTime)
            </td>
            <td style="width:30%">
                @{

                    if (item.Url == null)
                    {
                        @Html.DisplayFor(modelItem => item.Url)
                    }
                    else
                    {
                        @Html.ActionLink(item.Url.ToString(), "OpenUrl", new { url = item.Url })
                    }
                }
            </td>
            <td style="width:30%">
                @Html.DisplayFor(modelItem => item.User)
            </td>
            <td>
                @Html.ActionLink("[...]", "Details", new { executionId = item.ExecutionId })
            </td>
        </tr>
                    }

</table>

<script type="text/javascript">
    $(document).ready(function () {
        $("#myDateinput").datepicker();
    });

</script>
<script>

    function filterColumn(n) {
        // Declare variables
        var input, filter, table, tr, td, i;
        input = document.getElementById("myInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("executionList");
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 2; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[n];
            if (td) {
                if (td.innerHTML.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }

    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("executionList");
        switching = true;
        //Set the sorting direction to ascending:
        dir = "asc";
        /*Make a loop that will continue until no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.getElementsByTagName("TR");
            /*Loop through all table rows (except the first, which contains table headers):*/
            for (i = 2; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare, one from current row and one from the next:*/
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /*check if the two rows should switch place, based on the direction, asc or desc:*/
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        //if so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        //if so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                //Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /*If no switching has been done AND the direction is "asc", set the direction to "desc" and run the while loop again.*/
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
</script>
