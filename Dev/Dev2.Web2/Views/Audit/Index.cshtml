@model Tuple<List<Dev2.Runtime.Auditing.AuditLog>, AuditingViewModel>
@using Dev2.Web2.Models.Auditing;
@{
	ViewBag.Title = "Warewolf";
}
<form id="frmAudit">
	<div id="ExecutionFilters" style="padding-top: 6px;">
		<table id="filterTable">
			<tr>
				<td class="serverName">
					@Html.LabelFor(model => model.Item2.Server)
				</td>
				<td class="protocol">
					@Html.DropDownListFor(m => m.Item2.Protocol, Model.Item2.Protocols, new { id = "protocolDropdown", @class = "form-control" })
				</td>
				<td class="serverDesc">://</td>
				<td class="serverText">@Html.EditorFor(model => model.Item2.Server, new { htmlAttributes = new { id = "serverName", @class = "form-control" } })</td>
				<td class="serverDesc">:</td>
				<td>@Html.EditorFor(model => model.Item2.Port, new { htmlAttributes = new { id = "port", @class = "form-control" } })</td>
				<td><button id="updateServer" class="btn btn-default">Update</button></td>
			</tr>
		</table>
	</div>



	<div style="padding-top: 3px;">
		<div id="auditFilters" class="auditFilters">
			<div class='filter-container filterWorkflowID'>
				<input id="WorkflowID" autocomplete='off' class='filter' name='WorkflowID' placeholder='Workflow ID' data-col='WorkflowID' />
			</div>
			<div class='filter-container filterWorkflowName'>
				<input id="WorkflowName" autocomplete='off' class='filter' name='WorkflowName' placeholder='Workflow Name' data-col='WorkflowName' />
			</div>
			<div class='filter-container filterExecutionID'>
				<input id="ExecutionID" autocomplete='off' class='filter' name='ExecutionID' placeholder='Execution ID' data-col='ExecutionID' />
			</div>
			<div class='filter-container filterAuditType'>
				<input id="AuditType" autocomplete='off' class='filter' name='AuditType' placeholder='Type' data-col='AuditType' />
			</div>
			<div class='filter-container filterServerID'>
				<input id="ServerID" autocomplete='off' class='filter' name='ServerID' placeholder='Server ID' data-col='ServerID' />
			</div>
			<div class='filter-container filterParentID'>
				<input id="ParentID" autocomplete='off' class='filter' name='ParentID' placeholder='Parent ID' data-col='ParentID' />
			</div>
			<div class='filter-container filterExecutingUser'>
				<input id="ExecutingUser" autocomplete='off' class='filter' name='ExecutingUser' placeholder='Executing User' data-col='ExecutingUser' />
			</div>
			<div class='filter-container filterIsSubExecution'>
				<input id="IsSubExecution" autocomplete='off' class='filter' name='IsSubExecution' placeholder='Is Sub Execution' data-col='IsSubExecution' />
			</div>
			<div class='filter-container filterIsRemoteWorkflow'>
				<input id="IsRemoteWorkflow" autocomplete='off' class='filter' name='IsRemoteWorkflow' placeholder='Is Remote Workflow' data-col='IsRemoteWorkflow' />
			</div>
		</div>
		<div class="clearfix"></div>
		<div id="auditFilters" class="auditFilters">
			<div class='filter-container filterContainStart'>
				<input id="StartDateTime" class='filter' name='StartDateTime' type="text" placeholder='Start Date' data-col='StartDateTime' />
			</div>
			<div class='filter-container filterContainComplete'>
				<input id="CompletedDateTime" class='filter' type="text" name='CompletedDateTime' placeholder='End Date' data-col='CompletedDateTime' />
			</div>
			<div class='filter-container filterContainReset'>
				<button type="button" class="btn btn-default" id="FilterButton">Filter</button>
			</div>
			<div class='filter-container filterContainReset'>
				<button type="button" class="btn btn-default" id="ResetButton">Clear</button>
			</div>
		</div>
	</div>

	<div id="divAuditList" class="animate-bottom">
		<div id="loader">
			<div id="loader_1" class="loader"></div>
			<div id="loader_2" class="loader"></div>
			<div id="loader_3" class="loader"></div>
			<div id="loader_4" class="loader"></div>
			<div id="loader_5" class="loader"></div>
			<div id="loader_6" class="loader"></div>
			<div id="loader_7" class="loader"></div>
			<div id="loader_8" class="loader"></div>
		</div>
	</div>

	<div id="ExecutionResults" class="dialogResult">
		<p class="exResult"></p>
	</div>

	<div id="generalMessageDiv" class="generalMessageWrap">
		<div class="generalMessage">
			<div class="generalMessageContent">
				<p class="generalMessageText"></p>
			</div>
		</div>
	</div>
</form>
<script type="text/javascript">
	var browserType;
	browserType = browser();

	$("#auditList").tablesorter();
	$('.filter').multifilter();
	$("#StartDateTime").datetimepicker({
		format: 'Y-m-d H:i:s',
		defaultDate: new Date()
	});

	$("#CompletedDateTime").datetimepicker({
		format: 'Y-m-d H:i:s',
		defaultDate: new Date()
	});

	function showExecutionList() {
		document.getElementById("loader").style.display = "none";
		document.getElementById("divAuditList").style.display = "block";
		document.getElementById("generalMessageDiv").style.display = "none";
	}

	function hideExecutionList() {
		document.getElementById("loader").style.display = "block";
		document.getElementById("divAuditList").style.display = "none";
		document.getElementById("generalMessageDiv").style.display = "none";
	}

	function hideExecutionAndLoader() {
		document.getElementById("loader").style.display = "none";
		document.getElementById("divAuditList").style.display = "none";
	}

	function getServerUrl() {
		var protocol = document.getElementById("protocolDropdown").value;
		var serverName = document.getElementById("serverName").value;
		var port = document.getElementById("port").value;

		var serverUrl = protocol + "://" + serverName + ":" + port;

		return serverUrl;
	}

	function reset() {
		document.getElementById("protocolDropdown").value = "http";
		document.getElementById("serverName").value = "localhost";
		document.getElementById("port").value = "3142";
	}

	function getLogData() {
		$.support.cors = true;
		var serverUrl = getServerUrl().toLowerCase();
		var wareWolfUrl = serverUrl + "/services/GetLogDataService";
		var pingUrl = serverUrl + "/secure/ping";

		var result = {};
		var startdate = $('#StartDateTime').val();
		var enddate = $('#CompletedDateTime').val();

		$.each($('.filter-container :input').serializeArray(), function () {
			var keyName = this.name.toString();;
			var keyValue = this.value.toString();

			if (keyName == 'StartDateTime' && startdate != '') {
				result[keyName] = new Date(startdate).toISOString();
			}
			else if (keyName == 'CompletedDateTime' && enddate != '') {
				result[keyName] = new Date(enddate).toISOString();
			}
			else {
				result[keyName] = keyValue.toString();
			}
		});
		console.log(result);
		$.ajax({
			type: "POST",
			url: wareWolfUrl,
			cache: false,
			'Content-Type': "application/json",
			data: result,
			crossDomain: true,
			xhrFields: {
				withCredentials: true
			},
			success: OnSuccessCall,
			fail: OnFailCall,
			error: OnErrorCall
		});

	}

	var OnSuccessCall = function (response, textStatus, jqXHR) {
		var url = "/Audit/AuditList";
		var myJSON = JSON.stringify(response);
		$.ajax({
			type: "POST",
			url: url,
			data: { 'jsonData': myJSON },
			success: function (executionListHTML) {
				showExecutionList();
				$("#divAuditList").html(executionListHTML);
			},
			error: OnErrorCall
		});
	};

	var OnFailCall = function (request, status, error) {
		var serverName = document.getElementById("serverName").value;
		reset();
		hideExecutionAndLoader();
		if (request.status == 0) {
			alert("Local Warewolf Server Not Found");
		}
		else if (request.status == 200) {
			alert("Service not found: " + serverName + " - check server version");
			getLogData();
		}
	}

	var OnErrorCall = function (request, status, error) {
		var serverName = document.getElementById("serverName").value;
		reset();
		hideExecutionAndLoader();
		if (request.status == 0) {
			alert("Local Warewolf Server Not Found");
		}
		else if (request.status == 200) {
			alert("Service not found: " + serverName + " - check server version");
			getLogData();
		}
	}

	var createDialog = function () {

		$('#ExecutionResults').dialog({
			autoOpen: false,
			modal: true,
			title: "Result",
			maxWidth: 600,
			maxHeight: 500,
			minWidth: 400,
			minHeight: 300,
			width: 400,
			height: 300,
			hide: {
				effect: "fade",
				duration: 500
			}
		});
	};

	$(document).on("keypress", "#serverName", function (e) {
		if (e.keyCode == 13)
			$('#updateServer').click();
	});

	$(document).on("click", "#ResetButton", function (e) {
		$('#auditFilters input').val("").keyup();
	});

	$(document).on("click", "#FilterButton", function (e) {
		getLogData();
	});

	$(document).on("click", "#auditList .details", function (e) {
		e.preventDefault();
		var serverUrl = getServerUrl();
		var executionId = $(this).closest("tr").find("td.auExecutionID").eq(0).html().trim();
		var environment = $(this).closest("tr").find("td.Environment").eq(0).html().trim();
		createDialog();
		$('div#ExecutionResults').dialog('open');
		$('.exResult').text(environment);
	});

	$(document).on("click", ".executionUrl", function () {
		return confirm('Are you sure you want to execute the process again?');
	});

	$('#updateServer').on('click', function (e) {
		e.preventDefault();
		e.stopPropagation();
		browserType = browser();
		hideExecutionList();
		getLogData();
	});

	$("#protocolDropdown").change(function () {
		var value = document.getElementById("protocolDropdown").value;
		if (value == "https") {
			$("#port").val("3143");
		}
		else {
			$("#port").val("3142");
		}
	});

	$(document).ready(function () {
		$("#StartDateTime").val(moment().format("YYYY-MM-DD hh:mm:ss"));
		$("#CompletedDateTime").val(moment().format("YYYY-MM-DD hh:mm:ss"));
		getLogData();
	});
</script>