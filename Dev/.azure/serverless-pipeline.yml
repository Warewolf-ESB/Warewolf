trigger:
  batch: true

pool:
  vmImage: 'windows-2022'

stages:
- stage: Compile
  jobs:
  
  - job: build
    displayName: 'Compile'
  
    steps:
    - task: PowerShell@2
      inputs:
        filePath: '$(Agent.BuildDirectory)/s/Compile.ps1'
        arguments: '-AcceptanceTesting -MSBuildPath "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe"'
        displayName: 'Compile'
  
    - task: DeleteFiles@1
      inputs:
        SourceFolder: '$(Agent.BuildDirectory)\\s\\bin\\AcceptanceTesting'
        Contents: 'TestResults'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\s\bin\AcceptanceTesting'
        ArtifactName: 'TestBinaries'
        publishLocation: 'Container'
        StoreAsTar: false
        
- stage: Test
  jobs:
  
  - job: Serverless_Tests_01
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_02
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_03
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_04
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_05
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_06
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_07
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_08
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_09
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_10
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_11
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_12
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_13
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_14
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_15
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_16
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_17
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_18
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_19
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_20
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_21
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_22
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_23
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_24
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_25
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_26
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_27
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_28
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_29
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Serverless_Tests_30
    displayName: 'Serverless Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $address = $env:UseThisServerlessAddress
          $username = $env:UseThisServerlessUsername
          $password = $env:UseThisServerlessPassword 
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Write-Host Testing against $address
          Test-NetConnection -Port 3142 $address
          New-LocalUser -Name $username -Password $securePassword -PasswordNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $username
          $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=127.0.0.1 connectport=3142 connectaddress=$address
          netsh interface portproxy add v4tov4 listenport=3142 listenaddress=$env:ComputerName connectport=3142 connectaddress=$address
          @"
          Start-Process -Wait -Verb RunAs -File powershell -ArgumentList '-NoProfile -NoLogo -ExecutionPolicy Bypass -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RunInDirectory "$(Agent.BuildDirectory)" -Projects Dev2.Integration.Tests -Category Serverless'
          "@ | Out-File -LiteralPath "C:\RunTestsAsAdministrator.ps1" -Encoding utf8 -Force
          Start-Process -Wait -Credential $credential -FilePath powershell -ArgumentList "-NoProfile -NoLogo -ExecutionPolicy Bypass -File C:\RunTestsAsAdministrator.ps1"
        displayName: 'Run Tests'
      env:
        UseThisServerlessUsername: $(ServerlessUsername)
        UseThisServerlessPassword: $(ServerlessPassword)
        UseThisServerlessAddress: $(ServerlessAddress)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Serverless Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'