trigger:
  batch: true

pool:
  name: Default

stages:
- stage: Compile
  jobs:
  
  - job: build
    displayName: 'Compile'
    pool:
      vmImage: 'windows-2019'
  
    steps:
    - task: PowerShell@2
      inputs:
        filePath: '$(Agent.BuildDirectory)/s/Compile.ps1'
        arguments: '-AcceptanceTesting -MSBuildPath "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe"'
  
    - task: DeleteFiles@1
      inputs:
        SourceFolder: '$(Agent.BuildDirectory)\\s\\bin\\AcceptanceTesting'
        Contents: 'TestResults'
  
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rmi registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest
        docker cp "$(Agent.BuildDirectory)\s\bin\AcceptanceTesting" $(Build.SourceVersion):C:\BuildUnderTest
        docker commit $(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        docker push registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
      displayName: 'Publish Build Image'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
        
- stage: Test
  jobs:
  
  - job: File_Read_Tool_Specs
    displayName: 'File Read Tool Specs'
    pool:
      vmImage: 'windows-2019'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %PushVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        PushVSTestContainer: $(VSTestContainerPassword)
  
    - powershell: |
        pip install pyftpdlib==1.5.0
        mkdir "$(Agent.BuildDirectory)\home\dev2"
        @"
        import os, random, string

        from pyftpdlib.authorizers import DummyAuthorizer
        from pyftpdlib.handlers import FTPHandler
        from pyftpdlib.servers import FTPServer
        
        PASSIVE_PORTS = '17000-17007'
        
        def main():
            authorizer = DummyAuthorizer()
            user_dir = "D:/a/1/home/dev2"
            if not os.path.isdir(user_dir):
                os.mkdir(user_dir)
            authorizer.add_user("dev2", "Q/ulw&]", user_dir, perm="elradfmw")
        
            handler = FTPHandler
            handler.authorizer = authorizer
            handler.permit_foreign_addresses = True
        
            passive_ports = list(map(int, PASSIVE_PORTS.split('-')))
            handler.passive_ports = range(passive_ports[0], passive_ports[1])
        
            server = FTPServer(('0.0.0.0', 21), handler)
            server.serve_forever()
            
        if __name__ == '__main__':
            main()
        "@ | Out-File -LiteralPath "$(Agent.BuildDirectory)\ftp_entrypoint.py" -Encoding utf8 -Force
        pythonw -u "$(Agent.BuildDirectory)\ftp_entrypoint.py"
        @"
        -----BEGIN CERTIFICATE-----
        MIID+TCCAuGgAwIBAgIUMjnF+Uh4NhKoRO425/Sgjbs7xs0wDQYJKoZIhvcNAQEL
        BQAwgYsxCzAJBgNVBAYTAlpBMQwwCgYDVQQIDANLWk4xEjAQBgNVBAcMCUhpbGxj
        cmVzdDERMA8GA1UECgwIV2FyZXdvbGYxDzANBgNVBAsMBkRldk9wczEUMBIGA1UE
        AwwLb3Bzd29sZi5jb20xIDAeBgkqhkiG9w0BCQEWEWFkbWluQG9wc3dvbGYuY29t
        MB4XDTIxMDQxODA2MzYzMVoXDTIyMDQxODA2MzYzMVowgYsxCzAJBgNVBAYTAlpB
        MQwwCgYDVQQIDANLWk4xEjAQBgNVBAcMCUhpbGxjcmVzdDERMA8GA1UECgwIV2Fy
        ZXdvbGYxDzANBgNVBAsMBkRldk9wczEUMBIGA1UEAwwLb3Bzd29sZi5jb20xIDAe
        BgkqhkiG9w0BCQEWEWFkbWluQG9wc3dvbGYuY29tMIIBIjANBgkqhkiG9w0BAQEF
        AAOCAQ8AMIIBCgKCAQEA2eWOl6OjY/V6xPKYKC8NwrtOYfmr04KYR+5xuzZhNPXV
        ICDZrHg3UfidSU9yiB8hRrZYlQ1YZw6kdfxYFiBqQV+450CHS2R9RbvPQTGxL0/I
        lO4LQVodiTW7Khiemye0OId04Ak6yVz6wF+UScPb2HLRM7dW2OMbDpUcb/6QSCBK
        1zdr6Co8O+okDdlXFSmqVuK5gIfT6lOKiny2XLaO6zPni4o6E5HzsX47YJiaTLCZ
        J9X5oCWhB0wIVgX7vkdBxiwXACaHWlN32//wya1h1dQQpGUvttzEHl+wc0Fk6R9f
        HKmP9owzuw40PPjdoOXhzqr7hCqszp/aTCqVFJU9xQIDAQABo1MwUTAdBgNVHQ4E
        FgQUk+fn8dM59dkM0u6ZWnRp70TDupwwHwYDVR0jBBgwFoAUk+fn8dM59dkM0u6Z
        WnRp70TDupwwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAR05k
        Ab9atURsGOHKZbKPFnwj6oKak3CcDSeB0wGAu75hKeGFBqisDg+s5pTcAlGgq8Md
        fv6AzFtmskYeHqzt3TtZ091kLXGPrEf4Gv0zYdJ5kEi5RKIxNz57BnntlG/YA1FC
        DAFen4U8zhavo4tQk04LkgnV4sHPutUMKqNNX64GAIfmeltr7yBaWs34nZ3+4OiF
        c5/UqCGPmHgd2paDzQ3qc5tpCy86mY0zy7FreP/Z8VrnoOKIoH8ULjQAxiopl6zg
        6bCLcDayKmfwBKrCgJobb76B7HJ5SKWpQCmgJeI/pFiQv67SsF63xtsPwtdmaY+T
        SfOUJf/1oE9T9vp1yQ==
        -----END CERTIFICATE-----
        "@ | Out-File -LiteralPath "$(Agent.BuildDirectory)\cert.crt" -Encoding utf8 -Force
        @"
        -----BEGIN PRIVATE KEY-----
        MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDZ5Y6Xo6Nj9XrE
        8pgoLw3Cu05h+avTgphH7nG7NmE09dUgINmseDdR+J1JT3KIHyFGtliVDVhnDqR1
        /FgWIGpBX7jnQIdLZH1Fu89BMbEvT8iU7gtBWh2JNbsqGJ6bJ7Q4h3TgCTrJXPrA
        X5RJw9vYctEzt1bY4xsOlRxv/pBIIErXN2voKjw76iQN2VcVKapW4rmAh9PqU4qK
        fLZcto7rM+eLijoTkfOxfjtgmJpMsJkn1fmgJaEHTAhWBfu+R0HGLBcAJodaU3fb
        //DJrWHV1BCkZS+23MQeX7BzQWTpH18cqY/2jDO7DjQ8+N2g5eHOqvuEKqzOn9pM
        KpUUlT3FAgMBAAECggEAVzFN8w4vRsOnggIVsxbJKeBsCDaxdGzw5O/coO6szVWG
        GFos4KAmeu3CeuCI00GpvjMflV2Gv46TbwcwdII6IrjcM+WVfizTGEGEOPFalrUV
        bcsnw9n8sbhHkhvR9AJaUriZo0DuPj+vs6VLoIz4f0/KuSgnX5jZbedrPsGeGM3e
        HYGY/eCB1D6JzbDrW8jHe63SOPOizVA9m/c2CoH/YbL4rVN6+8aSAJaWnVzSUvPD
        mRdY15EtF9VURU3C549Pw4C1RC0op2xvP8vlOFGsWDd2HHzxuo13UXd8NIes5zAE
        VKIhLsEFkFIRwp7rTVaf9n6KCvvVuuG6N1Kxyv2roQKBgQD1Md/8BJIieFfd/fbq
        zL+uAttBGuM88IUgx8c9usldWGYXvDOkmMQvkH7lnxFpOyZDynZyIw4ILrnh1T2+
        f5g/qHxEabU59//aAbYoBAXxUUI7ZdBwzmn0yL6KU9hILDhRsEbVLOROC1tmUbUk
        GIqTNMFBUimfy7LJJGTdxciouQKBgQDjf7kMijEbqP8bLUATdtlVoiOfuqOlMHYm
        FzKsp75+rxSAjUyGvzBNe+HzSlfwPlD6bSYIm3Do80FVG+AawPN7uBApsTb32Lmj
        nB1b1GUuN7VGQYJNxmrYe1m8VdLHN5kNM8hwOCpyYMdkFf6aYXAEtEO+iL9ghn1N
        +tmW9e8fbQKBgQDIaFGIrTu8TNyUp4Vv+JYa5l7K4e0l2/kUB/YDsG3xi9U2RS94
        sxx3PAVcLR2QAzaNZihVte08JuTrft2OnL+WGGIpkLT9goRubcOzBUbOLPqTje5G
        pY/Y8VM7wLgglXQa4JekmaKpX4L/KH2D2UM6en4So9M9tsKUwNhoo8YUkQKBgQDQ
        KQfrP28bvhBej5L3vGG0hz1NY/tkpOkWhVdqv7oANLbvwVpqWPobi+T9NeMtAfga
        jFCmw4QWwq3e8DiogjDH3W18mJiRQ47o82mxorBKD9MgS8Ss4YbWOlerimPowSib
        +evHMr00FvWa0L08CTf0NfVem8Vwzt5MweDiznlUKQKBgQCb/2zy03hepOHmr8oZ
        2gUv8764Y865wFryfXoOlb+664sgMkNKJGzX/v97NQIeM4vFUb6FMVQO9z4pcXVq
        w+jDPTUUugs8MOyE1bUNJutBgEjkeKN8bQt3mQlIhC6HSuwS+NHcku5sKobvjohj
        SxVGgsgXs58fKq0k6khAOa4asQ==
        -----END PRIVATE KEY-----
        "@ | Out-File -LiteralPath "$(Agent.BuildDirectory)\cert.key" -Encoding utf8 -Force
        @"
        import os, random, string
        
        from pyftpdlib.authorizers import DummyAuthorizer
        from pyftpdlib.handlers import TLS_FTPHandler
        from pyftpdlib.servers import FTPServer
        
        PASSIVE_PORTS = '45001-45008'
        
        def main():
            user_dir = "D:/a/1/home/dev2"
            if not os.path.isdir(user_dir):
                os.mkdir(user_dir)
            authorizer = DummyAuthorizer()
            authorizer.add_user('dev2', 'Q/ulw&]', user_dir, perm="elradfmw")
        
            handler = TLS_FTPHandler
            handler.authorizer = authorizer
            handler.permit_foreign_addresses = True
            handler.certfile = 'cert.crt'
            handler.keyfile = 'cert.key'
        
            passive_ports = list(map(int, PASSIVE_PORTS.split('-')))
            handler.passive_ports = range(passive_ports[0], passive_ports[1])
        
            server = FTPServer(('0.0.0.0', 1002), handler)
            server.serve_forever()
            
        if __name__ == '__main__':
            main()
        "@ | Out-File -LiteralPath "$(Agent.BuildDirectory)\ftps_entrypoint.py" -Encoding utf8 -Force
        pythonw -u "$(Agent.BuildDirectory)\ftps_entrypoint.py"
        Set-Location "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        &"$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 0 -Projects Warewolf.Tools.Specs -Category ReadFile
      displayName: 'Run Tests'
  
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        mkdir "$(Agent.BuildDirectory)\TestResults"
        echo Set-Location C:\BuildUnderTest>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        echo ^&".\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category ReadFile -UNCPassword "Dev2@dmin123">>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        docker run -i --rm --memory 4g -v "$(Agent.BuildDirectory)\TestResults:C:\BuildUnderTest\TestResults" registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion) powershell -File C:\BuildUnderTest\TestResults\RunTestsEntrypoint.ps1
      displayName: 'Run Tests'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'File Read Tool Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'