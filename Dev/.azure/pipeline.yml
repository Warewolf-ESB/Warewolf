trigger:
  batch: true

pool:
  name: Default

stages:
- stage: Compile
  jobs:
  
  - job: build
    displayName: 'Compile'
    pool:
      vmImage: 'windows-2019'
  
    steps:
    - task: PowerShell@2
      inputs:
        filePath: '$(Agent.BuildDirectory)/s/Compile.ps1'
        arguments: '-AcceptanceTesting -MSBuildPath "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe"'
  
    - task: DeleteFiles@1
      inputs:
        SourceFolder: '$(Agent.BuildDirectory)\\s\\bin\\AcceptanceTesting'
        Contents: 'TestResults'
  
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rmi registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest
        docker cp "$(Agent.BuildDirectory)\s\bin\AcceptanceTesting" $(Build.SourceVersion):C:\BuildUnderTest
        docker commit $(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        docker push registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
      displayName: 'Publish Build Image'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
        
- stage: Test
  jobs:
  
  - job: File_Read_Tool_Specs
    displayName: 'File Read Tool Specs'
    pool:
      vmImage: 'windows-2019'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %PushVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        PushVSTestContainer: $(VSTestContainerPassword)
  
    - powershell: |
        pip install pyftpdlib==1.5.0
        mkdir "$(Agent.BuildDirectory)\home\dev2"
        @"
        import os, random, string

        from pyftpdlib.authorizers import DummyAuthorizer
        from pyftpdlib.handlers import FTPHandler
        from pyftpdlib.servers import FTPServer
        
        PASSIVE_PORTS = '17000-17007'
        
        def main():
            authorizer = DummyAuthorizer()
            user_dir = "D:/a/1/home/dev2"
            if not os.path.isdir(user_dir):
                os.mkdir(user_dir)
            authorizer.add_user("dev2", "Q/ulw&]", user_dir, perm="elradfmw")
        
            handler = FTPHandler
            handler.authorizer = authorizer
            handler.permit_foreign_addresses = True
        
            passive_ports = list(map(int, PASSIVE_PORTS.split('-')))
            handler.passive_ports = range(passive_ports[0], passive_ports[1])
        
            server = FTPServer(('0.0.0.0', 21), handler)
            server.serve_forever()
            
        if __name__ == '__main__':
            main()
        "@ | Out-File -LiteralPath "$(Agent.BuildDirectory)\entrypoint.py" -Encoding utf8 -Force
        pythonw -u "$(Agent.BuildDirectory)\entrypoint.py"
        &"$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 0 -Projects Warewolf.Tools.Specs -Category ReadFile
      displayName: 'Run Tests'
  
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        mkdir "$(Agent.BuildDirectory)\TestResults"
        echo Set-Location C:\BuildUnderTest>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        echo ^&".\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category ReadFile -UNCPassword "Dev2@dmin123">>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        docker run -i --rm --memory 4g -v "$(Agent.BuildDirectory)\TestResults:C:\BuildUnderTest\TestResults" registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion) powershell -File C:\BuildUnderTest\TestResults\RunTestsEntrypoint.ps1
      displayName: 'Run Tests'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'File Read Tool Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'