trigger:
  batch: true

pool:
  vmImage: 'windows-2022'

stages:
- stage: Compile
  jobs:
  
  - job: build
    displayName: 'Compile'
  
    steps:
    - task: PowerShell@2
      inputs:
        filePath: '$(Agent.BuildDirectory)/s/Compile.ps1'
        arguments: '-ServerTests -StudioProject -MSBuildPath "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe" -TesthostConfig "Dev2.Activities.Specs.dll.config"'
        displayName: 'Compile'
  
    - task: DeleteFiles@1
      inputs:
        SourceFolder: '$(Agent.BuildDirectory)\s\bin\ServerTests'
        Contents: 'TestResults'
  
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %PushVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rmi registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:core2022
        docker cp "$(Agent.BuildDirectory)\s\bin\ServerTests" $(Build.SourceVersion):C:\BuildUnderTest
        docker commit $(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        docker push registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
      displayName: 'Publish Build Image'
      env:
        PushVSTestContainer: $(VSTestContainerPassword)

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\s\bin\ServerTests'
        ArtifactName: 'ServerBinaries'
        publishLocation: 'Container'
        StoreAsTar: false

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\s\bin\StudioProject'
        ArtifactName: 'StudioBinaries'
        publishLocation: 'Container'
        StoreAsTar: false
        
- stage: Test
  jobs:

  - job: Unit_Tests
    displayName: 'Unit Tests'

    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.*.Tests,Warewolf.*.Tests,Warewolf.UIBindingTests.* -ExcludeProjects Dev2.Integration.Tests,Dev2.Studio.Core.Tests,Dev2.RunTime.Tests,Dev2.Infrastructure.Tests,Warewolf.UI.Tests,Warewolf.Logger.Tests,Warewolf.Studio.ViewModels.Tests,Warewolf.Web.UI.Tests,Warewolf.Storage.Tests,Warewolf.Auditing.Tests,Dev2.Activities.Tests,Dev2.Activities.Designers.Tests -ExcludeCategories CannotParallelize,ResourceCatalog_LoadTests,PluginRuntimeHandler,GatherSystemInformation,LocalSchedulerAdmin,Multithread,AnonymousRedis,COMIPCSaxonCSandStudioTests -UseRegionalSettings
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)/TestResults/*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Unit Tests'
       
    - script: 'if not exist "$(Agent.BuildDirectory)/TestResults/*.trx" exit 1'
  
  - job: Activities_Tests
    displayName: 'Activities Tests'

    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Tests -UseRegionalSettings
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Activities Tests'
       
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Activities_Designers_Tests
    displayName: 'Activities Designers Tests'

    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Designers.Tests
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Activities Designers Tests'
       
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Scheduler_Admin_User_Unit_Tests
    displayName: 'Scheduler Admin User Unit Tests'
    
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -CreateLocalSchedulerAdmin -Projects Dev2.Data.Tests,Dev2.TaskScheduler.Wrappers.Tests -Category LocalSchedulerAdmin -UseRegionalSettings
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Scheduler Admin User Unit Tests'
       
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Multithread_Unit_Tests
    displayName: 'Multithread Unit Tests'
    
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
    
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Common.NetStandard20.Tests -Category Multithread
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Multithread Unit Tests'
       
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
        
  - job: Zip_Tool_Specs
    displayName: 'Zip Tool Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category Zip
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Zip Tool Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Email_Tools_Specs
    displayName: 'Email Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category Email
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Email Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Resource_Tools_Specs
    displayName: 'Resource Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category Resources
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Resource Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: File_And_Folder_Copy_Tool_Specs
    displayName: 'File And Folder Copy Tool Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category FileAndFolderCopy
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'File And Folder Copy Tool Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Data_Tools_Specs
    displayName: 'Data Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category Data
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Data Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Request_Service_Name_View_Models_Unit_Tests
    displayName: 'Request Service Name View Models Unit Tests'
  
    steps:
    - checkout: none
  
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        mkdir "$(Agent.BuildDirectory)\TestResults"
        echo Set-Location C:\BuildUnderTest>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        echo ^&".\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category RequestServiceNameViewModel>>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        docker run -i --rm --memory 4g -v "$(Agent.BuildDirectory)\TestResults:C:\BuildUnderTest\TestResults" registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion) powershell -File C:\BuildUnderTest\TestResults\RunTestsEntrypoint.ps1
      displayName: 'Run Tests'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Request Service Name View Models Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Unzip_Tool_Specs_Validation
    displayName: 'Unzip Tool Specs Validation'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category UnzipValidation
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Unzip Tool Specs Validation'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Recordset_Tools_Specs
    displayName: 'Recordset Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category Recordset
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Recordset Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: File_And_Folder_Rename_Tool_Specs
    displayName: 'File And Folder Rename Tool Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category FileAndFolderRename -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'File And Folder Rename Tool Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
    
  - job: Other_Tools_Specs
    displayName: 'Other Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -ExcludeCategories Recordset,FileMoveFromFTP,ZipFromFTPS,UnzipFromLocal,UnzipFromFTPS,CopyFileFromFTP,SqlBulkInsert,FileAndFolderDelete,CopyFileFromSFTP,FileMoveFromFTPS,WriteFile,FileRenameFromLocal,Storage,FileRenameFromFTPS,ReadFolder,FileAndFolderCreate,ControlFlow,FileRenameFromFTP,FileMoveFromUNC,CopyFileFromFTPS,Scripting,Zip,ZipFromLocal,CopyFileFromUNC,FileAndFolderRename,UnzipFromFTP,FileAndFolderMove,FileMoveFromLocal,Resources,CopyFileFromLocal,DatabaseTimeout,Database,UnzipValidation,Email,ZipFromSFTP,FileRenameFromUNC,UnzipFromSFTP,FileAndFolderCopy,LoopConstructs,ZipFromFTP,NewReadFolder,FileMoveFromSFTP,Data,ReadFile,FileRenameFromSFTP,Utility,AnonymousRedis,COMIPCSaxonCSandStudioTests
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Other Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: File_And_Folder_Move_Tool_Specs
    displayName: 'File And Folder Move Tool Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category FileAndFolderMove
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'File And Folder Move Tool Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: File_Read_Tool_Specs
    displayName: 'File Read Tool Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category ReadFile -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'File Read Tool Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Infrastructure_Unit_Tests
    displayName: 'Infrastructure Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Infrastructure.Tests -InContainerVersion 2022
      displayName: 'Run Tests'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Infrastructure Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: New_Folder_Read_Tool_Specs
    displayName: 'New Folder Read Tool Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category NewReadFolder
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'New Folder Read Tool Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Write_File_Tool_Specs
    displayName: 'Write File Tool Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category WriteFile -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Write File Tool Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Loop_Construct_Tools_Specs
    displayName: 'Loop Construct Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category LoopConstructs
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Loop Construct Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Utility_Tools_Specs
    displayName: 'Utility Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category Utility
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Utility Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Folder_Read_Tool_Specs
    displayName: 'Folder Read Tool Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category ReadFolder
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Folder Read Tool Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: SQL_Bulk_Insert_Tool_Specs
    displayName: 'SQL Bulk Insert Tool Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category SqlBulkInsert -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'
      
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'SQL_Bulk_Insert_Tool_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'SQL Bulk Insert Tool Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Control_Flow_Tools_Specs
    displayName: 'Control Flow Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category ControlFlow
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Control Flow Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Studio_View_Models_Unit_Tests
    displayName: 'Studio View Models Unit Tests'
  
    steps:
    - checkout: none
  
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        mkdir "$(Agent.BuildDirectory)\TestResults"
        echo Set-Location C:\BuildUnderTest>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        echo ^&".\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -ExcludeCategories ElasticsearchSourceViewModel,RequestServiceNameViewModel,ElasticsearchSourceViewModel_Constructor,ElasticsearchSourceViewModel_TestOkCommand,ElasticsearchSourceViewModel_TestName,ElasticsearchSourceViewModel_RequestServiceNameViewModel,ElasticsearchSourceViewModel_TestResourceName,ElasticsearchSourceViewModel_TestHostName,ElasticsearchSourceViewModel_TestPort,ElasticsearchSourceViewModel_TestUsername,ElasticsearchSourceViewModel_TestPassword,ElasticsearchSourceViewModel_TestAuthenticationType,ElasticsearchSourceViewModel_Test,ElasticsearchSourceViewModel_TestHeaderText,ElasticsearchSourceViewModel_TestModelItem,ElasticsearchSourceViewModel_TestSaveSource,ElasticsearchSourceViewModel_TestSave,ElasticsearchSourceViewModel_TestUpdateHelpDescriptor,ElasticsearchSourceViewModel_TestCanSave,ElasticsearchSourceViewModel_CanTest,COMIPCSaxonCSandStudioTests>>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        docker run -i --rm --memory 4g -v "$(Agent.BuildDirectory)\TestResults:C:\BuildUnderTest\TestResults" registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion) powershell -File C:\BuildUnderTest\TestResults\RunTestsEntrypoint.ps1
      displayName: 'Run Tests'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio View Models Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: File_And_Folder_Create_Tool_Specs
    displayName: 'File And Folder Create Tool Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category FileAndFolderCreate -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'File And Folder Create Tool Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Storage_Unit_Tests
    displayName: 'Storage Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Storage.Tests
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Storage Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Storage_Tools_Specs
    displayName: 'Storage Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category Storage
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Storage Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: File_And_Folder_Delete_Tool_Specs
    displayName: 'File And Folder Delete Tool Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category FileAndFolderDelete -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'File And Folder Delete Tool Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Scripting_Tools_Specs
    displayName: 'Scripting Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category Scripting
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Scripting Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Database_Tools_Specs
    displayName: 'Database Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category Database
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Database Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Auditing_Unit_Tests
    displayName: 'Auditing Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Auditing.Tests
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Auditing Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Workflow_Execution_Specs
    displayName: 'Workflow Execution Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category WorkflowExecution -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Workflow_Execution_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false  
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Workflow Execution Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Studio_Test_Framework_With_Hello_World_Workflow_Specs
    displayName: 'Studio Test Framework With Hello World Workflow Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category StudioTestFrameworkWithHelloWorldWorkflow -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Studio_Test_Framework_With_Hello_World_Workflow_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio Test Framework With Hello World Workflow Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Studio_Test_Framework_With_Utility_Tools_Specs
    displayName: 'Studio Test Framework With Utility Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category StudioTestFrameworkWithUtilityTools -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Studio_Test_Framework_With_Utility_Tools_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio Test Framework With Utility Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: MS_SQL_Server_Specs
    displayName: 'MS SQL Server Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category MSSql -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'MS_SQL_Server_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'MS SQL Server Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Studio_Test_Framework_With_Data_Tools_Specs
    displayName: 'Studio Test Framework With Data Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category StudioTestFrameworkWithDataTools -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Studio_Test_Framework_With_Data_Tools_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio Test Framework With Data Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Assign_Workflow_Execution_Specs
    displayName: 'Assign Workflow Execution Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category AssignWorkflowExecution -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Assign_Workflow_Execution_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Assign Workflow Execution Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Integration_Tests
    displayName: 'Integration Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Integration.Tests -ExcludeCategories "Load Tests","Server Startup",AnonymousRedis,COMIPCSaxonCSandStudioTests -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Integration_Tests_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Integration Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Anonymous_Redis_Tests
    displayName: 'Anonymous Redis Tests'

    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Integration.Tests,Dev2.Runtime.Tests,Warewolf.Tools.Specs -Category AnonymousRedis
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Anonymous Redis Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Studio_Test_Framework_With_Scripting_Tools_Specs
    displayName: 'Studio Test Framework With Scripting Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category StudioTestFrameworkWithScriptingTools -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Studio_Test_Framework_With_Scripting_Tools_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio Test Framework With Scripting Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Other_Activities_Specs
    displayName: 'Other Activities Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -ExcludeCategories ExampleWorkflowExecution,DateTimeExampleWorkflowExecution,RemoteServer,StudioTestFrameworkWithScriptingTools,StudioTestFrameworkWithHelloWorldWorkflow,StudioTestFrameworkWithHTTPWebPostTools,StudioTestFrameworkWithHTTPWebGetTools,StudioTestFrameworkWithHTTPWebDeleteTools,MSSql,DatabaseWorkflowExecution,ExecuteInBrowser,StudioTestFrameworkWithUtilityTools,StudioTestFrameworkWithSharepointTools,SubworkflowOracleExecution,RabbitMQWorkflowExecution,WorkflowMerging,StudioTestFrameworkWithFileAndFolderTools,DatabaseSubworkflowExecution,StudioTestFrameworkWithDatabaseTools,StudioTestFrameworkWithSubworkflow,Scheduler,StudioTestFrameworkWithHTTPWebPutTools,StudioTestFrameworkWithDropboxTools,SubworkflowExecution,StudioTestFrameworkWithDataTools,StudioTestFrameworkWithDeletedResources,StudioTestFrameworkWithRabbitMQTools,WorkflowExecution,StudioTestFramework,NestedForEachExecution,WarewolfSearch,AssignWorkflowExecution,WorkflowExecutionLogging,StudioTestFrameworkWithHTTPWebTools,CompositionLoadTests,COMIPCSaxonCSandStudioTests -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Other_Activities_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Other Activities Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Studio_Test_Framework_With_File_And_Folder_Tools_Specs
    displayName: 'Studio Test Framework With File And Folder Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category StudioTestFrameworkWithFileAndFolderTools -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Studio_Test_Framework_With_File_And_Folder_Tools_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio Test Framework With File And Folder Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Studio_Test_Framework_With_HTTP_Web_Tools_Specs
    displayName: 'Studio Test Framework With HTTP Web Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category StudioTestFrameworkWithHTTPWebTools -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Studio_Test_Framework_With_HTTP_Web_Tools_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio Test Framework With HTTP Web Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Studio_Test_Framework_With_Subworkflow_Specs
    displayName: 'Studio Test Framework With Subworkflow Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category StudioTestFrameworkWithSubworkflow -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Studio_Test_Framework_With_Subworkflow_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio Test Framework With Subworkflow Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Workflow_Merging_Specs
    displayName: 'Workflow Merging Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category WorkflowMerging -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Workflow_Merging_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Workflow Merging Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Example_Workflow_Execution_Specs
    displayName: 'Example Workflow Execution Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Categories ExampleWorkflowExecution,DateTimeExampleWorkflowExecution -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath Release" -PostTestRunScript ReverseDeployLog.ps1 -UseRegionalSettings
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Example Workflow Execution Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Studio_Test_Framework_Specs
    displayName: 'Studio Test Framework Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category StudioTestFramework -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Studio_Test_Framework_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio Test Framework Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Subworkflow_Execution_Specs
    displayName: 'Subworkflow Execution Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category SubworkflowExecution -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Subworkflow_Execution_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Subworkflow Execution Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Other_Specs
    displayName: 'Other Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.*.Specs,Warewolf.*.Specs -ExcludeProjects Dev2.Activities.Specs,Warewolf.Tools.Specs,Warewolf.UI.Specs,Warewolf.UI.Load.Specs -ExcludeCategories NoConflictingPermissionsSecurity,ResourcePermissionsSecurity,ConflictingViewExecutePermissionsSecurity,ConflictingExecutePermissionsSecurity,ConflictingViewPermissionsSecurity,OverlappingUserGroupsPermissionsSecurity,ServerPermissionsSecurity,ConflictingContributeViewExecutePermissionsSecurity,COMIPCSaxonCSandStudioTests -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Other_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Other Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Studio_Test_Framework_With_Deleted_Resources_Specs
    displayName: 'Studio Test Framework With Deleted Resources Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category StudioTestFrameworkWithDeletedResources -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Studio_Test_Framework_With_Deleted_Resources_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio Test Framework With Deleted Resources Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: SQL_Integration_Tests
    displayName: 'SQL Integration Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Integration.Tests,Warewolf.Tools.Specs -Category SqlDatabaseBroker -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'SQL_Integration_Tests_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'SQL Integration Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: For_Each_Workflow_Execution_Specs
    displayName: 'For Each Workflow Execution Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category NestedForEachExecution -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'For_Each_Workflow_Execution_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'For Each Workflow Execution Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Copy_Tool_Specs_From_Local
    displayName: 'Copy Tool Specs From Local'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category CopyFileFromLocal -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Copy Tool Specs From Local'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Move_Tool_Specs_From_Local
    displayName: 'Move Tool Specs From Local'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category FileMoveFromLocal -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Move Tool Specs From Local'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Rename_Tool_Specs_From_Local
    displayName: 'Rename Tool Specs From Local'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category FileRenameFromLocal -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Rename Tool Specs From Local'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Unzip_Tool_Specs_From_Local
    displayName: 'Unzip Tool Specs From Local'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category UnzipFromLocal -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Unzip Tool Specs From Local'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Zip_Tool_Specs_From_Local
    displayName: 'Zip Tool Specs From Local'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category ZipFromLocal -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Zip Tool Specs From Local'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Copy_Tool_Specs_From_FTP
    displayName: 'Copy Tool Specs From FTP'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category CopyFileFromFTP -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'File Read Tool Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Move_Tool_Specs_From_FTP
    displayName: 'Move Tool Specs From FTP'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category FileMoveFromFTP -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Move Tool Specs From FTP'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Rename_Tool_Specs_From_FTP
    displayName: 'Rename Tool Specs From FTP'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category FileRenameFromFTP -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Rename Tool Specs From FTP'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Unzip_Tool_Specs_From_FTP
    displayName: 'Unzip Tool Specs From FTP'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category UnzipFromFTP -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Unzip Tool Specs From FTP'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Zip_Tool_Specs_From_FTP
    displayName: 'Zip Tool Specs From FTP'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category ZipFromFTP -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Zip Tool Specs From FTP'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Copy_Tool_Specs_From_FTPS
    displayName: 'Copy Tool Specs From FTPS'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category CopyFileFromFTPS -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Copy Tool Specs From FTPS'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Move_Tool_Specs_From_FTPS
    displayName: 'Move Tool Specs From FTPS'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category FileMoveFromFTPS -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Move Tool Specs From FTPS'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Rename_Tool_Specs_From_FTPS
    displayName: 'Rename Tool Specs From FTPS'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category FileRenameFromFTPS -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Rename Tool Specs From FTPS'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Unzip_Tool_Specs_From_FTPS
    displayName: 'Unzip Tool Specs From FTPS'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category UnzipFromFTPS -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Unzip Tool Specs From FTPS'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Zip_Tool_Specs_From_FTPS
    displayName: 'Zip Tool Specs From FTPS'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category ZipFromFTPS -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Zip Tool Specs From FTPS'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Copy_Tool_Specs_From_SFTP
    displayName: 'Copy Tool Specs From SFTP'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category CopyFileFromSFTP -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Copy Tool Specs From SFTP'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Move_Tool_Specs_From_SFTP
    displayName: 'Move Tool Specs From SFTP'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category FileMoveFromSFTP -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Move Tool Specs From SFTP'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Rename_Tool_Specs_From_SFTP
    displayName: 'Rename Tool Specs From SFTP'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category FileRenameFromSFTP -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'FRename Tool Specs From SFTP'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Unzip_Tool_Specs_From_SFTP
    displayName: 'Unzip Tool Specs From SFTP'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category UnzipFromSFTP -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Unzip Tool Specs From SFTP'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Zip_Tool_Specs_From_SFTP
    displayName: 'Zip Tool Specs From SFTP'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category ZipFromSFTP -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Zip Tool Specs From SFTP'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Copy_Tool_Specs_From_UNC
    displayName: 'Copy Tool Specs From UNC'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category CopyFileFromUNC -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Copy Tool Specs From UNC'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Move_Tool_Specs_From_UNC
    displayName: 'Move Tool Specs From UNC'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category FileMoveFromUNC -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Move Tool Specs From UNC'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Studio_Core_Unit_Tests
    displayName: 'Studio Core Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        if (!(Test-Path "$env:localappdata\Warewolf\Studio\Settings.config")) {
          New-Item -ItemType directory "$env:localappdata\Warewolf\Studio"
        @"
        <?xml version="1.0" encoding="utf-8"?>
        <log4net>
          <appender name="rollingFile" type="log4net.Appender.RollingFileAppender">
            <file type="log4net.Util.PatternString" value="${LOCALAPPDATA}\Warewolf\Studio Logs\Warewolf Studio.log" />
            <appendToFile value="true" />
            <rollingStyle value="Size" />
            <maxSizeRollBackups value="1" />
            <maximumFileSize value="200MB" />
            <!-- An alternate output encoding can be specified -->
            <!-- <encoding value="unicodeFFFE" /> -->
            <layout type="log4net.Layout.PatternLayout">
              <header value="[Header]&#xD;&#xA;" />
              <footer value="[Footer]&#xD;&#xA;" />
              <conversionPattern value="%date %-5level - %message%newline" />
            </layout>
          </appender>
          <appender name="LogFileAppender" type="Log4Net.Async.ParallelForwardingAppender,Log4Net.Async">
            <appender-ref ref="rollingFile" />
            <bufferSize value="200" />
          </appender>
          <appender name="EventLogLogger" type="log4net.Appender.EventLogAppender">
            <threshold value="ERROR" />
            <mapping>
              <level value="ERROR" />
              <eventLogEntryType value="Error" />
            </mapping>
            <mapping>
              <level value="DEBUG" />
              <eventLogEntryType value="Information" />
            </mapping>
            <mapping>
              <level value="INFO" />
              <eventLogEntryType value="Information" />
            </mapping>
            <mapping>
              <level value="WARN" />
              <eventLogEntryType value="Warning" />
            </mapping>
            <logName value="Warewolf" />
            <applicationName value="Warewolf Server" />
            <layout type="log4net.Layout.PatternLayout">
              <conversionPattern value="%date %-5level - %message%newline" />
            </layout>
          </appender>
          <!-- Setup the root category, add the appenders and set the default level -->
          <root>
            <level value="DEBUG" />
            <appender-ref ref="LogFileAppender" />
            <appender-ref ref="EventLogLogger" />
          </root>
        </log4net>
        "@ | Out-File -LiteralPath "$env:localappdata\Warewolf\Studio\Settings.config" -Encoding utf8 -Force
        }
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -ExcludeCategories "Intellisense Textbox Visual Tree","Studio Settings Core",SettingsViewModel_SaveCommand,SettingsViewModel_IsDirty,LogSettingsViewModel_Constructor,SettingsViewModel_OnDeactivate,SettingsViewModel_ReturnsFalse,SettingsViewModel_DoDeactivate,LogSettingsViewModel_ServerLogLevel,LogSettingsViewModel_UpdateHelp,LogSettingsViewModel_SelectedLoggingType,LogSettingsViewModel_GetLogFileCommand,LogSettingsViewModel_PropertyChangeFired,LogSettingsViewModel_StudioFileLogLevel,LogSettingsViewModel_Construct,COMIPCSaxonCSandStudioTests -UseRegionalSettings
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio Core Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Settings_View_Model_Unit_Tests
    displayName: 'Settings View Model Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category "Studio Settings Core"
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Settings View Model Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Settings_View_Model_Save_Command_Unit_Tests
    displayName: 'Settings View Model Save Command Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category SettingsViewModel_SaveCommand
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Settings View Model Save Command Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Settings_View_Model_Is_Dirty_Unit_Tests
    displayName: 'Settings View Model Is Dirty Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category SettingsViewModel_IsDirty
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Settings View Model Is Dirty Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Log_Settings_View_Model_Constructor_Unit_Tests
    displayName: 'Log Settings View Model Constructor Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        if (!(Test-Path "$env:localappdata\Warewolf\Studio\Settings.config")) {
          New-Item -ItemType directory "$env:localappdata\Warewolf\Studio"
        @"
        <?xml version="1.0" encoding="utf-8"?>
        <log4net>
          <appender name="rollingFile" type="log4net.Appender.RollingFileAppender">
            <file type="log4net.Util.PatternString" value="${LOCALAPPDATA}\Warewolf\Studio Logs\Warewolf Studio.log" />
            <appendToFile value="true" />
            <rollingStyle value="Size" />
            <maxSizeRollBackups value="1" />
            <maximumFileSize value="200MB" />
            <!-- An alternate output encoding can be specified -->
            <!-- <encoding value="unicodeFFFE" /> -->
            <layout type="log4net.Layout.PatternLayout">
              <header value="[Header]&#xD;&#xA;" />
              <footer value="[Footer]&#xD;&#xA;" />
              <conversionPattern value="%date %-5level - %message%newline" />
            </layout>
          </appender>
          <appender name="LogFileAppender" type="Log4Net.Async.ParallelForwardingAppender,Log4Net.Async">
            <appender-ref ref="rollingFile" />
            <bufferSize value="200" />
          </appender>
          <appender name="EventLogLogger" type="log4net.Appender.EventLogAppender">
            <threshold value="ERROR" />
            <mapping>
              <level value="ERROR" />
              <eventLogEntryType value="Error" />
            </mapping>
            <mapping>
              <level value="DEBUG" />
              <eventLogEntryType value="Information" />
            </mapping>
            <mapping>
              <level value="INFO" />
              <eventLogEntryType value="Information" />
            </mapping>
            <mapping>
              <level value="WARN" />
              <eventLogEntryType value="Warning" />
            </mapping>
            <logName value="Warewolf" />
            <applicationName value="Warewolf Server" />
            <layout type="log4net.Layout.PatternLayout">
              <conversionPattern value="%date %-5level - %message%newline" />
            </layout>
          </appender>
          <!-- Setup the root category, add the appenders and set the default level -->
          <root>
            <level value="DEBUG" />
            <appender-ref ref="LogFileAppender" />
            <appender-ref ref="EventLogLogger" />
          </root>
        </log4net>
        "@ | Out-File -LiteralPath "$env:localappdata\Warewolf\Studio\Settings.config" -Encoding utf8 -Force
        }
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category LogSettingsViewModel_Constructor
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Log Settings View Model Constructor Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Settings_View_Model_On_Deactivate_Unit_Tests
    displayName: 'Settings View Model On Deactivate Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category SettingsViewModel_OnDeactivate
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Settings View Model On Deactivate Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Settings_View_Model_Returns_False_Unit_Tests
    displayName: 'Settings View Model Returns False Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category SettingsViewModel_ReturnsFalse
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Settings View Model Returns False Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Settings_View_Model_Do_Deactivate_Unit_Tests
    displayName: 'Settings View Model On Deactivate Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category SettingsViewModel_DoDeactivate
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Settings View Model Do Deactivate Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Log_Settings_View_Model_Server_Log_Level_Unit_Tests
    displayName: 'Log Settings View Model Server Log Level Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category LogSettingsViewModel_ServerLogLevel
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Log Settings View Model Server Log Level Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Log_Settings_View_Model_Update_Help_Unit_Tests
    displayName: 'Log Settings View Model Update Help Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category LogSettingsViewModel_UpdateHelp
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Log Settings View Model Update Help Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Log_Settings_View_Model_Selected_Logging_Type_Unit_Tests
    displayName: 'Log Settings View Model Selected Logging Type Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category LogSettingsViewModel_SelectedLoggingType
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Log Settings View Model Selected Logging Type Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Log_Settings_View_Model_Get_Log_File_Command_Unit_Tests
    displayName: 'Log Settings View Model Get Log File Command Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category LogSettingsViewModel_GetLogFileCommand
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Log Settings View Model Get Log File Command Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Log_Settings_View_Model_Property_Change_Fired_Unit_Tests
    displayName: 'Log Settings View Model Property Change Fired Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category LogSettingsViewModel_PropertyChangeFired
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Log Settings View Model Property Change Fired Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Log_Settings_View_Model_Studio_File_Log_Level_Unit_Tests
    displayName: 'Log Settings View Model Studio File Log Level Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category LogSettingsViewModel_StudioFileLogLevel
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Log Settings View Model Studio File Log Level Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Log_Settings_View_Model_Construct_Unit_Tests
    displayName: 'Log Settings View Model Construct Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category LogSettingsViewModel_Construct
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Log Settings View Model Construct Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_View_Models_Unit_Tests
    displayName: 'Elasticsearch View Model Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Constructor_Unit_Tests
    displayName: 'Elasticsearch View Model Constructor Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_Constructor
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Constructor Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Test_Ok_Command_Unit_Tests
    displayName: 'Elasticsearch View Model Test Ok Command Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_TestOkCommand
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Test Ok Command Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Test_Name_Unit_Tests
    displayName: 'Elasticsearch View Model Test Name Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_TestName
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Test Name Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Request_Service_Name_View_Model_Unit_Tests
    displayName: 'Elasticsearch View Model Request Service Name View Model Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_RequestServiceNameViewModel
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Request Service Name View Model Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Test_Resource_Name_Unit_Tests
    displayName: 'Elasticsearch View Model Test Resource Name Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_TestResourceName
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Test Resource Name Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Test_Host_Name_Unit_Tests
    displayName: 'Elasticsearch View Model Test Host Name Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_TestHostName
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Test Host Name Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Test_Port_Unit_Tests
    displayName: 'Elasticsearch View Model Test Port Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_TestPort
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Test Port Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Test_Username_Unit_Tests
    displayName: 'Elasticsearch View Model Test Username Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_TestUsername
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Test Username Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Test_Password_Unit_Tests
    displayName: 'Elasticsearch View Model Test Password Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_TestPassword
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Test Password Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Test_Authentication_Type_Unit_Tests
    displayName: 'Elasticsearch View Model Test Authentication Type Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_TestAuthenticationType
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Test Authentication Type Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Test_Unit_Tests
    displayName: 'Elasticsearch View Model Test Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_Test
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Test Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Test_Header_Text_Unit_Tests
    displayName: 'Elasticsearch View Model Test Header Text Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_TestHeaderText
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Test Header Text Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Test_Model_Item_Unit_Tests
    displayName: 'Elasticsearch View Model Test Model Item Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_TestModelItem
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Test Model Item Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Test_Save_Source_Unit_Tests
    displayName: 'Elasticsearch View Model Test Save Source Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_TestSaveSource
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Test Save Source Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Test_Save_Unit_Tests
    displayName: 'Elasticsearch View Model Test Save Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_TestSave
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Test Save Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Test_Update_Help_Descriptor_Unit_Tests
    displayName: 'Elasticsearch View Model Test Update Help Descriptor Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_TestUpdateHelpDescriptor
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Test Update Help Descriptor Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Test_Can_Save_Unit_Tests
    displayName: 'Elasticsearch View Model Test Can Save Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_TestCanSave
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Test Can Save Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_Source_View_Model_Can_Test_Unit_Tests
    displayName: 'Elasticsearch View Model Can Test Unit Tests'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        del /f /s /q  "$(Agent.BuildDirectory)\s\bin" 1>nul
        rmdir /s /q "$(Agent.BuildDirectory)\s\bin"
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel_CanTest
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Model Can Test Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\TestResults\*.trx" exit 1'
  
  - job: Search_Specs
    displayName: 'Search Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category WarewolfSearch -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Search_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Search Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Logger_Unit_Tests
    displayName: 'Logger Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Logger.Tests
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Logger Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Rename_Tool_Specs_From_UNC
    displayName: 'Rename Tool Specs From UNC'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - powershell: |
        Set-Location "$(Agent.BuildDirectory)"
        &"$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category FileRenameFromUNC -StartFTPServer -StartFTPSServer -CreateUNCPath
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Rename Tool Specs From UNC'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Not_Parallelizable_Unit_Tests
    displayName: 'Not Parallelizable Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.*.Tests,Warewolf.*.Tests,Warewolf.UIBindingTests.* -Category CannotParallelize -UseRegionalSettings
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Not Parallelizable Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Gather_System_Information_Unit_Tests
    displayName: 'Gather System Information Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.*.Tests,Warewolf.*.Tests,Warewolf.UIBindingTests.* -ExcludeProjects Dev2.Integration.Tests,Dev2.Studio.Core.Tests,Dev2.RunTime.Tests,Dev2.Infrastructure.Tests,Warewolf.UI.Tests,Warewolf.Logger.Tests,Warewolf.Studio.ViewModels.Tests,Warewolf.Web.UI.Tests,Warewolf.Storage.Tests,Warewolf.Auditing.Tests,Warewolf.UIBindingTests.Deploy,Warewolf.UIBindingTests.ComPluginSource -Category GatherSystemInformation
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Gather System Information Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Database_Workflow_Execution_Specs
    displayName: 'Database Workflow Execution Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category DatabaseWorkflowExecution -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Database_Workflow_Execution_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Database Workflow Execution Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: RabbitMQ_Workflow_Execution_Specs
    displayName: 'RabbitMQ Workflow Execution Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category RabbitMQWorkflowExecution -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'RabbitMQ_Workflow_Execution_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'RabbitMQ Workflow Execution Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Studio_Test_Framework_With_HTTP_Web_Get_Tools_Specs
    displayName: 'Studio Test Framework With HTTP Web Get Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category StudioTestFrameworkWithHTTPWebGetTools -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Studio_Test_Framework_With_HTTP_Web_Get_Tools_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio Test Framework With HTTP Web Get Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Studio_Test_Framework_With_HTTP_Web_Delete_Tools_Specs
    displayName: 'Studio Test Framework With HTTP Web Delete Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category StudioTestFrameworkWithHTTPWebDeleteTools -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Studio_Test_Framework_With_HTTP_Web_Delete_Tools_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio Test Framework With HTTP Web Delete Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Studio_Test_Framework_With_HTTP_Web_Post_Tools_Specs
    displayName: 'Studio Test Framework With HTTP Web Post Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category StudioTestFrameworkWithHTTPWebPostTools -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Studio_Test_Framework_With_HTTP_Web_Post_Tools_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio Test Framework With HTTP Web Post Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Studio_Test_Framework_With_HTTP_Web_Put_Tools_Specs
    displayName: 'Studio Test Framework With HTTP Web Put Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category StudioTestFrameworkWithHTTPWebPutTools -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Studio_Test_Framework_With_HTTP_Web_Put_Tools_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio Test Framework With HTTP Web Put Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Studio_Test_Framework_With_RabbitMQ_Tools_Specs
    displayName: 'Studio Test Framework With RabbitMQ Tools Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category StudioTestFrameworkWithRabbitMQTools -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Studio_Test_Framework_With_RabbitMQ_Tools_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio Test Framework With RabbitMQ Tools Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Database_Subworkflow_Execution_Specs
    displayName: 'Database Subworkflow Execution Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category DatabaseSubworkflowExecution -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Database_Subworkflow_Execution_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Database Subworkflow Execution Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Intellisense_Textbox_Visual_Tree_Unit_Tests
    displayName: 'Intellisense Textbox Visual Tree Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category "Intellisense Textbox Visual Tree"
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Intellisense Textbox Visual Tree Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Workflow_Execution_Logging_Specs
    displayName: 'Workflow Execution Logging Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Activities.Specs -Category WorkflowExecutionLogging -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Workflow_Execution_Logging_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Workflow Execution Logging Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
        
    - powershell: 'sc.exe stop "Warewolf Server";exit 0'
      condition: always()
      failOnStderr: false
  
  - job: Server_Startup_Tests
    displayName: 'Server Startup Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Integration.Tests -Category "Server Startup" -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Server_Startup_Tests_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Server Startup Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Plugin_Handler_Unit_Tests
    displayName: 'Plugin Handler Unit Tests'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ServerBinaries'
        targetPath: '$(Agent.BuildDirectory)'
        
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Runtime.Tests -Category PluginRuntimeHandler
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Plugin Handler Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Other_Security_Specs
    displayName: 'Other Security Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Security.Specs -ExcludeCategories ResourcePermissionsSecurity,OverlappingUserGroupsPermissionsSecurity,ConflictingViewPermissionsSecurity,ConflictingExecutePermissionsSecurity,ConflictingContributeViewExecutePermissionsSecurity,ConflictingViewExecutePermissionsSecurity,NoConflictingPermissionsSecurity,COMIPCSaxonCSandStudioTests -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
        ArtifactName: 'Security_Specs_Server_Log_File'
        publishLocation: 'Container'
        StoreAsTar: false
        
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Other Security Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Resource_Permissions_Security_Specs
    displayName: 'Resource Permissions Security Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Security.Specs -Category ResourcePermissionsSecurity -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Resource Permissions Security Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Overlapping_User_Groups_Permissions_Security_Specs
    displayName: 'Overlapping User Groups Permissions Security Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Security.Specs -Category OverlappingUserGroupsPermissionsSecurity -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Overlapping User Groups Permissions Security Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Conflicting_View_Permissions_Security_Specs
    displayName: 'Conflicting View Permissions Security Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Security.Specs -Category ConflictingViewPermissionsSecurity -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Conflicting View Permissions Security Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Conflicting_Execute_Permissions_Security_Specs
    displayName: 'Conflicting Execute Permissions Security Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Security.Specs -Category ConflictingExecutePermissionsSecurity -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Conflicting Execute Permissions Security Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Conflicting_Contribute_View_Execute_Permissions_Security_Specs
    displayName: 'Conflicting Contribute View Execute Permissions Security Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Security.Specs -Category ConflictingContributeViewExecutePermissionsSecurity -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Conflicting Contribute View Execute Permissions Security Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Conflicting_View_Execute_Permissions_Security_Specs
    displayName: 'Conflicting View Execute Permissions Security Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Security.Specs -Category ConflictingViewExecutePermissionsSecurity -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Conflicting View Execute Permissions Security Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: No_Conflicting_Permissions_Security_Specs
    displayName: 'No Conflicting Permissions Security Specs'
  
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'TestBinaries'
        targetPath: '$(Agent.BuildDirectory)'
  
    - script: |
        cd /d "$(Agent.BuildDirectory)"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Security.Specs -Category NoConflictingPermissionsSecurity -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'No Conflicting Permissions Security Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
#  - job: COMIPC_SaxonCS_and_Studio_Tests
 #   displayName: 'COMIPC SaxonCS and Studio Tests'
  #
 #   steps:
  #  - checkout: none
 #   
 #   - task: DownloadPipelineArtifact@2
  #    inputs:
  #      buildType: 'current'
  #      artifactName: 'ServerBinaries'
  #      targetPath: '$(Agent.BuildDirectory)'
  #
  #  - script: |
  #      cd /d "$(Agent.BuildDirectory)"
  #      powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.*.Specs,Warewolf.*.Specs,Dev2.*.Tests,Warewolf.*.Tests,Warewolf.UIBindingTests.* -Category COMIPCSaxonCSandStudioTests -PreTestRunScript "StartAsService.ps1 -Cleanup -ResourcesPath ServerTests" -PostTestRunScript ReverseDeployLog.ps1
  #    displayName: 'Run Tests'
#
  #  - task: PublishBuildArtifacts@1
  #    inputs:
  #      PathtoPublish: '$(Agent.BuildDirectory)\TestResults\warewolf-server.log'
  #      ArtifactName: 'COMIPC_SaxonCS_and_Studio_Tests_Server_Log_File'
  #      publishLocation: 'Container'
  #      StoreAsTar: false
 #       
  #  - task: PublishTestResults@2
  #    inputs:
  #      testRunner: VSTest
  #      testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
  #      failTaskOnFailedTests: true
  #      testRunTitle: 'COMIPC SaxonCS and Studio Tests'
  #      
   # - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'

- stage: Compile_Release
  displayName: 'Compile Release'
  jobs:
  
  - job: build_release
    displayName: 'Compile for Release'
  
    steps:
    - checkout: self
      clean: true
      persistCredentials: true
      
    - task: PowerShell@2
      inputs:
        filePath: '$(Agent.BuildDirectory)/s/Compile.ps1'
        arguments: '-ServerTests -StudioProject -AutoVersion -Config Release -Target Rebuild -ProjectSpecificOutputs -MSBuildPath "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe" -GitCredential ashley.lewis%40theunlimited.co.za:$env:GitLabTagsAccount'
      displayName: 'Compile in Release Config'
      env:
        GitLabTagsAccount: $(GitLabTagsAccountPassword)
  
    - powershell: |
        Write-Host Testing Warewolf assembly file versions...
        $HighestReadVersion = "0.0.0.0"
        $LastReadVersion = "0.0.0.0"
        foreach ($file in Get-ChildItem -recurse "$(Agent.BuildDirectory)\s\Dev") {
            if (($file.Name.EndsWith(".dll") -or ($file.Name.EndsWith(".exe") -and -Not $file.Name.EndsWith(".vshost.exe"))) -and ($file.Name.StartsWith("Dev2.") -or $file.Name.StartsWith("Warewolf.") -or $file.Name.StartsWith("WareWolf")) -and $file.Name -ne "Warewolf.Usage.dll") {
                # Get version.
                $ReadVersion = [system.diagnostics.fileversioninfo]::GetVersionInfo($file.FullName).FileVersion
        
                # Find highest version
                $SeperateVersionNumbers = $ReadVersion.split(".")
                $SeperateVersionNumbersHighest = $HighestReadVersion.split(".")
                if ([convert]::ToInt32($SeperateVersionNumbers[0], 10) -gt [convert]::ToInt32($SeperateVersionNumbersHighest[0], 10)`
                -or [convert]::ToInt32($SeperateVersionNumbers[1], 10) -gt [convert]::ToInt32($SeperateVersionNumbersHighest[1], 10)`
                -or [convert]::ToInt32($SeperateVersionNumbers[2], 10) -gt [convert]::ToInt32($SeperateVersionNumbersHighest[2], 10)`
                -or [convert]::ToInt32($SeperateVersionNumbers[3], 10) -gt [convert]::ToInt32($SeperateVersionNumbersHighest[3], 10)){
                    $HighestReadVersion = $ReadVersion
                }
        
                # Check for invalid.
                if ($ReadVersion.StartsWith("0.0.") -or ($LastReadVersion -ne $ReadVersion -and $LastReadVersion -ne "0.0.0.0")) {
                    $getFullPath = $file.FullName
                    Write-Host ERROR! Invalid version! $getFullPath $ReadVersion $LastReadVersion
                    throw "ERROR! `"$getFullPath $ReadVersion`" is either an invalid version or not equal to `"$LastReadVersion`". All Warewolf assembly versions in `"$TestsPath`" must conform and cannot start with 0.0. or end with .0"
                }
                $LastReadVersion = $ReadVersion
            }
        }
        Out-File -LiteralPath "$(Agent.BuildDirectory)\s\Dev\Dev2.Server\bin\Release\net6.0-windows\FullVersionString" -InputObject $HighestReadVersion -Encoding default -Force
        Out-File -LiteralPath "$(Agent.BuildDirectory)\s\Dev\Dev2.Studio\bin\Release\net6.0-windows\FullVersionString" -InputObject $HighestReadVersion -Encoding default -Force
        git -C "$(Build.SourcesDirectory)" tag $HighestReadVersion
        git -C "$(Build.SourcesDirectory)" push https://ashley.lewis%40theunlimited.co.za:$env:GitLabTagsAccount@gitlab.com/warewolf/warewolf $HighestReadVersion
        Write-Host "##vso[build.updatebuildnumber]$(Build.BuildNumber) ($HighestReadVersion)"
      env:
        GitLabTagsAccount: $(GitLabTagsAccountPassword)
  
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\\s\\Dev\\Dev2.Server\\bin\\Release\\net6.0-windows'
        ArtifactName: 'Release Server'
        publishLocation: 'Container'
        StoreAsTar: false
  
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\\s\\Dev\\Dev2.Studio\\bin\\Release\\net6.0-windows'
        ArtifactName: 'Release Studio'
        publishLocation: 'Container'
        StoreAsTar: false
  
