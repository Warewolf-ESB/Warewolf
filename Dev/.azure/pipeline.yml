trigger:
  batch: true

pool:
  name: Default

stages:

- stage: Compile_Release
  displayName: 'Compile Release'
  jobs:
  
  - job: build_release
    displayName: 'Compile for Release'
    pool:
      vmImage: 'windows-2019'
  
    steps:
    - checkout: self
      clean: true
      persistCredentials: true
      
    - task: PowerShell@2
      inputs:
        filePath: '$(Agent.BuildDirectory)/s/Compile.ps1'
        arguments: '-AcceptanceTesting -AutoVersion -Config Release -Target Rebuild -ProjectSpecificOutputs -MSBuildPath "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe"'
      displayName: 'Compile in Release Config'
  
    - powershell: |
        Write-Host Testing Warewolf assembly file versions...
        $HighestReadVersion = "0.0.0.0"
        $LastReadVersion = "0.0.0.0"
        foreach ($file in Get-ChildItem -recurse "$(Agent.BuildDirectory)\s\Dev") {
            if (($file.Name.EndsWith(".dll") -or ($file.Name.EndsWith(".exe") -and -Not $file.Name.EndsWith(".vshost.exe"))) -and ($file.Name.StartsWith("Dev2.") -or $file.Name.StartsWith("Warewolf.") -or $file.Name.StartsWith("WareWolf")) -and $file.Name -ne "Warewolf.Usage.dll") {
                # Get version.
                $ReadVersion = [system.diagnostics.fileversioninfo]::GetVersionInfo($file.FullName).FileVersion
        
                # Find highest version
                $SeperateVersionNumbers = $ReadVersion.split(".")
                $SeperateVersionNumbersHighest = $HighestReadVersion.split(".")
                if ([convert]::ToInt32($SeperateVersionNumbers[0], 10) -gt [convert]::ToInt32($SeperateVersionNumbersHighest[0], 10)`
                -or [convert]::ToInt32($SeperateVersionNumbers[1], 10) -gt [convert]::ToInt32($SeperateVersionNumbersHighest[1], 10)`
                -or [convert]::ToInt32($SeperateVersionNumbers[2], 10) -gt [convert]::ToInt32($SeperateVersionNumbersHighest[2], 10)`
                -or [convert]::ToInt32($SeperateVersionNumbers[3], 10) -gt [convert]::ToInt32($SeperateVersionNumbersHighest[3], 10)){
                    $HighestReadVersion = $ReadVersion
                }
        
                # Check for invalid.
                if ($ReadVersion.StartsWith("0.0.") -or ($LastReadVersion -ne $ReadVersion -and $LastReadVersion -ne "0.0.0.0")) {
                    $getFullPath = $file.FullName
                    Write-Host ERROR! Invalid version! $getFullPath $ReadVersion $LastReadVersion
                    throw "ERROR! `"$getFullPath $ReadVersion`" is either an invalid version or not equal to `"$LastReadVersion`". All Warewolf assembly versions in `"$TestsPath`" must conform and cannot start with 0.0. or end with .0"
                }
                $LastReadVersion = $ReadVersion
            }
        }
        Out-File -LiteralPath "$(Agent.BuildDirectory)\s\Dev\Dev2.Server\bin\Release\net48\win\FullVersionString" -InputObject $HighestReadVersion -Encoding default -Force
        Out-File -LiteralPath "$(Agent.BuildDirectory)\s\Dev\Dev2.Studio\bin\Release\net48\win\FullVersionString" -InputObject $HighestReadVersion -Encoding default -Force
        git -C "$(Build.SourcesDirectory)" tag $HighestReadVersion
        git -C "$(Build.SourcesDirectory)" push https://ashley.lewis%40theunlimited.co.za:$env:GitLabTagsAccount@gitlab.com/warewolf/warewolf $HighestReadVersion
        Write-Host "##vso[build.updatebuildnumber]$(Build.BuildNumber) ($HighestReadVersion)"
      env:
        GitLabTagsAccount: $(GitLabTagsAccountPassword)
  
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\\s\\Dev\\Dev2.Server\\bin\\Release\\net48\\win'
        ArtifactName: 'Release Server'
        publishLocation: 'Container'
        StoreAsTar: false
  
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)\\s\\Dev\\Dev2.Studio\\bin\\Release\\net48\\win'
        ArtifactName: 'Release Studio'
        publishLocation: 'Container'
        StoreAsTar: false
  
