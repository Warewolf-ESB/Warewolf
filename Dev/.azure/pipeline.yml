trigger:
  batch: true

pool:
  name: Default

stages:
- stage: Compile
  jobs:
  
  - job: build
    displayName: 'Compile'
    pool:
      vmImage: 'windows-2019'
  
    steps:
    - task: PowerShell@2
      inputs:
        filePath: '$(Agent.BuildDirectory)/s/Compile.ps1'
        arguments: '-AcceptanceTesting -MSBuildPath "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe"'
  
    - task: DeleteFiles@1
      inputs:
        SourceFolder: '$(Agent.BuildDirectory)\\s\\bin\\AcceptanceTesting'
        Contents: 'TestResults'
  
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rmi registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest
        docker cp "$(Agent.BuildDirectory)\s\bin\AcceptanceTesting" $(Build.SourceVersion):C:\BuildUnderTest
        docker commit $(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        docker push registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
      displayName: 'Publish Build Image'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
        
- stage: Test
  jobs:
  
  - job: Studio_Core_Unit_Tests
    displayName: 'Studio Core Unit Tests'
    pool:
      vmImage: 'windows-2019'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - powershell: |
        New-Item -ItemType directory "$env:localappdata\Warewolf\Studio"
        @"
        <?xml version="1.0" encoding="utf-8"?>
        <log4net>
          <appender name="rollingFile" type="log4net.Appender.RollingFileAppender">
            <file type="log4net.Util.PatternString" value="${LOCALAPPDATA}\Warewolf\Studio Logs\Warewolf Studio.log" />
            <appendToFile value="true" />
            <rollingStyle value="Size" />
            <maxSizeRollBackups value="1" />
            <maximumFileSize value="200MB" />
            <!-- An alternate output encoding can be specified -->
            <!-- <encoding value="unicodeFFFE" /> -->
            <layout type="log4net.Layout.PatternLayout">
              <header value="[Header]&#xD;&#xA;" />
              <footer value="[Footer]&#xD;&#xA;" />
              <conversionPattern value="%date %-5level - %message%newline" />
            </layout>
          </appender>
          <appender name="LogFileAppender" type="Log4Net.Async.ParallelForwardingAppender,Log4Net.Async">
            <appender-ref ref="rollingFile" />
            <bufferSize value="200" />
          </appender>
          <appender name="EventLogLogger" type="log4net.Appender.EventLogAppender">
            <threshold value="ERROR" />
            <mapping>
              <level value="ERROR" />
              <eventLogEntryType value="Error" />
            </mapping>
            <mapping>
              <level value="DEBUG" />
              <eventLogEntryType value="Information" />
            </mapping>
            <mapping>
              <level value="INFO" />
              <eventLogEntryType value="Information" />
            </mapping>
            <mapping>
              <level value="WARN" />
              <eventLogEntryType value="Warning" />
            </mapping>
            <logName value="Warewolf" />
            <applicationName value="Warewolf Server" />
            <layout type="log4net.Layout.PatternLayout">
              <conversionPattern value="%date %-5level - %message%newline" />
            </layout>
          </appender>
          <!-- Setup the root category, add the appenders and set the default level -->
          <root>
            <level value="DEBUG" />
            <appender-ref ref="LogFileAppender" />
            <appender-ref ref="EventLogLogger" />
          </root>
        </log4net>
        "@ | Out-File -LiteralPath "$env:localappdata\Warewolf\Studio\Settings.config" -Encoding utf8 -Force
        $culture = [System.Globalization.CultureInfo]::CreateSpecificCulture("en-ZA")      
        $assembly = [System.Reflection.Assembly]::Load("System.Management.Automation")
        $type = $assembly.GetType("Microsoft.PowerShell.NativeCultureResolver")
        $field = $type.GetField("m_uiCulture", [Reflection.BindingFlags]::NonPublic -bor [Reflection.BindingFlags]::Static)
        $field.SetValue($null, $culture)      
        Set-Culture en-ZA
        Get-ChildItem -Path 'Microsoft.PowerShell.Core\Registry::HKEY_USERS' | % { $SubKeyName = $_.Name;if (!($SubKeyName.EndsWith('-500_Classes'))) { Set-ItemProperty -Path "Microsoft.PowerShell.Core\Registry::$SubKeyName\Control Panel\International" -Name sTimeFormat -Value 'hh:mm:ss tt' } }
        Get-ChildItem -Path 'Microsoft.PowerShell.Core\Registry::HKEY_USERS' | % { $SubKeyName = $_.Name;if (!($SubKeyName.EndsWith('-500_Classes'))) { Set-ItemProperty -Path "Microsoft.PowerShell.Core\Registry::$SubKeyName\Control Panel\International" -Name sShortTime -Value 'hh:mm tt' } }
        Get-ChildItem -Path 'Microsoft.PowerShell.Core\Registry::HKEY_USERS' | % { $SubKeyName = $_.Name;if (!($SubKeyName.EndsWith('-500_Classes'))) { Set-ItemProperty -Path "Microsoft.PowerShell.Core\Registry::$SubKeyName\Control Panel\International" -Name sLongDate -Value 'dddd, dd MMMM yyyy' } }
        Get-ChildItem -Path 'Microsoft.PowerShell.Core\Registry::HKEY_USERS' | % { $SubKeyName = $_.Name;if (!($SubKeyName.EndsWith('-500_Classes'))) { Set-ItemProperty -Path "Microsoft.PowerShell.Core\Registry::$SubKeyName\Control Panel\International" -Name sShortDate -Value 'yyyy/MM/dd' } }
        Get-ChildItem -Path 'Microsoft.PowerShell.Core\Registry::HKEY_USERS' | % { $SubKeyName = $_.Name;if (!($SubKeyName.EndsWith('-500_Classes'))) { Set-ItemProperty -Path "Microsoft.PowerShell.Core\Registry::$SubKeyName\Control Panel\International" -Name sDecimal -Value '.' } }
        Get-ChildItem -Path 'Microsoft.PowerShell.Core\Registry::HKEY_USERS' | % { $SubKeyName = $_.Name;if (!($SubKeyName.EndsWith('-500_Classes'))) { Set-ItemProperty -Path "Microsoft.PowerShell.Core\Registry::$SubKeyName\Control Panel\International" -Name s1159 -Value 'AM' } }
        Get-ChildItem -Path 'Microsoft.PowerShell.Core\Registry::HKEY_USERS' | % { $SubKeyName = $_.Name;if (!($SubKeyName.EndsWith('-500_Classes'))) { Set-ItemProperty -Path "Microsoft.PowerShell.Core\Registry::$SubKeyName\Control Panel\International" -Name s2359 -Value 'PM' } }
        Set-ItemProperty -Path 'Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\Control Panel\International' -Name sTimeFormat -Value 'hh:mm:ss tt'
        Set-ItemProperty -Path 'Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\Control Panel\International' -Name sShortTime -Value 'hh:mm tt'
        Set-ItemProperty -Path 'Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\Control Panel\International' -Name sLongDate -Value 'dddd, dd MMMM yyyy'
        Set-ItemProperty -Path 'Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\Control Panel\International' -Name sShortDate -Value 'yyyy/MM/dd'
        Set-ItemProperty -Path 'Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\Control Panel\International' -Name sDecimal -Value '.'
        Set-ItemProperty -Path 'Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\Control Panel\International' -Name s1159 -Value 'AM'
        Set-ItemProperty -Path 'Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\Control Panel\International' -Name s2359 -Value 'PM'
        Set-Location "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        &"$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -ExcludeCategories "Intellisense Textbox Visual Tree","Studio Settings Core",SettingsViewModel_SaveCommand,SettingsViewModel_IsDirty,LogSettingsViewModel_Constructor
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)/s/Bin/BuildUnderTest/TestResults/*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Studio Core Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)/s/Bin/BuildUnderTest/TestResults/*.trx" exit 1'
  
  - job: Settings_View_Model_Unit_Tests
    displayName: 'Settings View Model Unit Tests'
    pool:
      vmImage: 'windows-2019'
  
    steps:
    - checkout: none
  
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        mkdir "$(Agent.BuildDirectory)\TestResults"
        echo Set-Location C:\BuildUnderTest>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        echo ^&".\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category "Studio Settings Core">>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        docker run -i --rm --memory 4g -v "$(Agent.BuildDirectory)\TestResults:C:\BuildUnderTest\TestResults" registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion) powershell -File C:\BuildUnderTest\TestResults\RunTestsEntrypoint.ps1
      displayName: 'Run Tests'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Settings View Models Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Settings_View_Model_Save_Command_Unit_Tests
    displayName: 'Settings View Model Save Command Unit Tests'
    pool:
      vmImage: 'windows-2019'
  
    steps:
    - checkout: none
  
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        mkdir "$(Agent.BuildDirectory)\TestResults"
        echo Set-Location C:\BuildUnderTest>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        echo ^&".\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category SettingsViewModel_SaveCommand>>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        docker run -i --rm --memory 4g -v "$(Agent.BuildDirectory)\TestResults:C:\BuildUnderTest\TestResults" registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion) powershell -File C:\BuildUnderTest\TestResults\RunTestsEntrypoint.ps1
      displayName: 'Run Tests'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Settings View Models Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Settings_View_Model_Is_Dirty_Unit_Tests
    displayName: 'Settings View Model Is Dirty Unit Tests'
    pool:
      vmImage: 'windows-2019'
  
    steps:
    - checkout: none
  
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        mkdir "$(Agent.BuildDirectory)\TestResults"
        echo Set-Location C:\BuildUnderTest>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        echo ^&".\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category SettingsViewModel_IsDirty>>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        docker run -i --rm --memory 4g -v "$(Agent.BuildDirectory)\TestResults:C:\BuildUnderTest\TestResults" registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion) powershell -File C:\BuildUnderTest\TestResults\RunTestsEntrypoint.ps1
      displayName: 'Run Tests'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Settings View Models Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Log_Settings_View_Model_Constructor_Unit_Tests
    displayName: 'Log Settings View Model Constructor Unit Tests'
    pool:
      vmImage: 'windows-2019'
  
    steps:
    - checkout: none
  
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        mkdir "$(Agent.BuildDirectory)\TestResults"
        echo Set-Location C:\BuildUnderTest>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        echo ^&".\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Dev2.Studio.Core.Tests -Category LogSettingsViewModel_Constructor>>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        docker run -i --rm --memory 4g -v "$(Agent.BuildDirectory)\TestResults:C:\BuildUnderTest\TestResults" registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion) powershell -File C:\BuildUnderTest\TestResults\RunTestsEntrypoint.ps1
      displayName: 'Run Tests'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Settings View Models Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'
  
  - job: Elasticsearch_View_Models_Unit_Tests
    displayName: 'Elasticsearch View Models Unit Tests'
    pool:
      vmImage: 'windows-2019'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - script: |
        cd /d "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        powershell -NoProfile -NoLogo -ExecutionPolicy Bypass -NoExit -File "$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Studio.ViewModels.Tests -Category ElasticsearchSourceViewModel
      displayName: 'Run Tests'
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'Elasticsearch View Models Unit Tests'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'