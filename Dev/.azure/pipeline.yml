trigger:
  batch: true

pool:
  name: Default

stages:
- stage: Compile
  jobs:
  
  - job: build
    displayName: 'Compile'
    pool:
      vmImage: 'windows-2019'
  
    steps:
    - task: PowerShell@2
      inputs:
        filePath: '$(Agent.BuildDirectory)/s/Compile.ps1'
        arguments: '-AcceptanceTesting -MSBuildPath "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe"'
  
    - task: DeleteFiles@1
      inputs:
        SourceFolder: '$(Agent.BuildDirectory)\\s\\bin\\AcceptanceTesting'
        Contents: 'TestResults'
  
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rmi registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest
        docker cp "$(Agent.BuildDirectory)\s\bin\AcceptanceTesting" $(Build.SourceVersion):C:\BuildUnderTest
        docker commit $(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        docker push registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
      displayName: 'Publish Build Image'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
        
- stage: Test
  jobs:
  
  - job: File_Read_Tool_Specs
    displayName: 'File Read Tool Specs'
    pool:
      vmImage: 'windows-2019'
  
    steps:
    - checkout: none
    
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %PushVSTestContainer% registry.gitlab.com/warewolf/vstest
        docker rm -f $(Build.SourceVersion)
        docker create --name=$(Build.SourceVersion) registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion)
        mkdir "$(Agent.BuildDirectory)\s\bin"
        docker cp $(Build.SourceVersion):C:\BuildUnderTest "$(Agent.BuildDirectory)\s\bin"
      displayName: 'Unpack Binaries'
      env:
        PushVSTestContainer: $(VSTestContainerPassword)
  
    - powershell: |
        pip install pyftpdlib==1.5.0
        mkdir "$(Agent.BuildDirectory)\home\dev2"
        @"
        import os, random, string

        from pyftpdlib.authorizers import DummyAuthorizer
        from pyftpdlib.handlers import FTPHandler
        from pyftpdlib.servers import FTPServer
        
        PASSIVE_PORTS = '17000-17007'
        
        def main():
            authorizer = DummyAuthorizer()
            user_dir = "D:/a/1/home/dev2"
            if not os.path.isdir(user_dir):
                os.mkdir(user_dir)
            authorizer.add_user("dev2", "Q/ulw&]", user_dir, perm="elradfmw")
        
            handler = FTPHandler
            handler.authorizer = authorizer
            handler.permit_foreign_addresses = True
        
            passive_ports = list(map(int, PASSIVE_PORTS.split('-')))
            handler.passive_ports = range(passive_ports[0], passive_ports[1])
        
            server = FTPServer(('0.0.0.0', 21), handler)
            server.serve_forever()
            
        if __name__ == '__main__':
            main()
        "@ | Out-File -LiteralPath "$(Agent.BuildDirectory)\ftp_entrypoint.py" -Encoding utf8 -Force
        pythonw -u "$(Agent.BuildDirectory)\ftp_entrypoint.py"
        pip install pyOpenSSL
        @"
        -----BEGIN RSA PRIVATE KEY-----
        MIICXwIBAAKBgQC8ddrhm+LutBvjYcQlnH21PPIseJ1JVG2HMmN2CmZk2YukO+9L
        opdJhTvbGfEj0DQs1IE8M+kTUyOmuKfVrFMKwtVeCJphrAnhoz7TYOuLBSqt7lVH
        fhi/VwovESJlaBOp+WMnfhcduPEYHYx/6cnVapIkZnLt30zu2um+DzA9jQIDAQAB
        AoGBAK0FZpaKj6WnJZN0RqhhK+ggtBWwBnc0U/ozgKz2j1s3fsShYeiGtW6CK5nU
        D1dZ5wzhbGThI7LiOXDvRucc9n7vUgi0alqPQ/PFodPxAN/eEYkmXQ7W2k7zwsDA
        IUK0KUhktQbLu8qF/m8qM86ba9y9/9YkXuQbZ3COl5ahTZrhAkEA301P08RKv3KM
        oXnGU2UHTuJ1MAD2hOrPxjD4/wxA/39EWG9bZczbJyggB4RHu0I3NOSFjAm3HQm0
        ANOu5QK9owJBANgOeLfNNcF4pp+UikRFqxk5hULqRAWzVxVrWe85FlPm0VVmHbb/
        loif7mqjU8o1jTd/LM7RD9f2usZyE2psaw8CQQCNLhkpX3KO5kKJmS9N7JMZSc4j
        oog58yeYO8BBqKKzpug0LXuQultYv2K4veaIO04iL9VLe5z9S/Q1jaCHBBuXAkEA
        z8gjGoi1AOp6PBBLZNsncCvcV/0aC+1se4HxTNo2+duKSDnbq+ljqOM+E7odU+Nq
        ewvIWOG//e8fssd0mq3HywJBAJ8l/c8GVmrpFTx8r/nZ2Pyyjt3dH1widooDXYSV
        q6Gbf41Llo5sYAtmxdndTLASuHKecacTgZVhy0FryZpLKrU=
        -----END RSA PRIVATE KEY-----
        -----BEGIN CERTIFICATE-----
        MIICpzCCAhCgAwIBAgIJAP+qStv1cIGNMA0GCSqGSIb3DQEBBQUAMIGJMQswCQYD
        VQQGEwJVUzERMA8GA1UECBMIRGVsYXdhcmUxEzARBgNVBAcTCldpbG1pbmd0b24x
        IzAhBgNVBAoTGlB5dGhvbiBTb2Z0d2FyZSBGb3VuZGF0aW9uMQwwCgYDVQQLEwNT
        U0wxHzAdBgNVBAMTFnNvbWVtYWNoaW5lLnB5dGhvbi5vcmcwHhcNMDcwODI3MTY1
        NDUwWhcNMTMwMjE2MTY1NDUwWjCBiTELMAkGA1UEBhMCVVMxETAPBgNVBAgTCERl
        bGF3YXJlMRMwEQYDVQQHEwpXaWxtaW5ndG9uMSMwIQYDVQQKExpQeXRob24gU29m
        dHdhcmUgRm91bmRhdGlvbjEMMAoGA1UECxMDU1NMMR8wHQYDVQQDExZzb21lbWFj
        aGluZS5weXRob24ub3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC8ddrh
        m+LutBvjYcQlnH21PPIseJ1JVG2HMmN2CmZk2YukO+9LopdJhTvbGfEj0DQs1IE8
        M+kTUyOmuKfVrFMKwtVeCJphrAnhoz7TYOuLBSqt7lVHfhi/VwovESJlaBOp+WMn
        fhcduPEYHYx/6cnVapIkZnLt30zu2um+DzA9jQIDAQABoxUwEzARBglghkgBhvhC
        AQEEBAMCBkAwDQYJKoZIhvcNAQEFBQADgYEAF4Q5BVqmCOLv1n8je/Jw9K669VXb
        08hyGzQhkemEBYQd6fzQ9A/1ZzHkJKb1P6yreOLSEh4KcxYPyrLRC1ll8nr5OlCx
        CMhKkTnR6qBsdNV0XtdU2+N25hqW+Ma4ZeqsN/iiJVCGNOZGnvQuvCAGWF8+J/f/
        iHkC6gGdBJhogs4=
        -----END CERTIFICATE-----
        "@ | Out-File -LiteralPath "C:\keycert.pem" -Encoding utf8 -Force
        @"
        import os, random, string
        
        from pyftpdlib.authorizers import DummyAuthorizer
        from pyftpdlib.handlers import TLS_FTPHandler
        from pyftpdlib.servers import FTPServer
        
        PASSIVE_PORTS = '45001-45008'
        
        def main():
            user_dir = "D:/a/1/home/dev2"
            if not os.path.isdir(user_dir):
                os.mkdir(user_dir)
            authorizer = DummyAuthorizer()
            authorizer.add_user('dev2', 'Q/ulw&]', user_dir, perm="elradfmw")
        
            handler = TLS_FTPHandler
            handler.authorizer = authorizer
            handler.permit_foreign_addresses = True
            handler.certfile = 'C:/keycert.pem'
        
            passive_ports = list(map(int, PASSIVE_PORTS.split('-')))
            handler.passive_ports = range(passive_ports[0], passive_ports[1])
        
            server = FTPServer(('0.0.0.0', 1002), handler)
            server.serve_forever()
            
        if __name__ == '__main__':
            main()
        "@ | Out-File -LiteralPath "$(Agent.BuildDirectory)\ftps_entrypoint.py" -Encoding utf8 -Force
        pythonw -u "$(Agent.BuildDirectory)\ftps_entrypoint.py"
        Set-Location "$(Agent.BuildDirectory)\s\bin\BuildUnderTest"
        &"$(Agent.BuildDirectory)\s\bin\BuildUnderTest\Job Shortcuts\TestRun.ps1" -RetryCount 0 -Projects Warewolf.Tools.Specs -Category ReadFile
      displayName: 'Run Tests'
  
    - script: |
        docker login --username ashley.lewis@theunlimited.co.za --password %GetVSTestContainer% registry.gitlab.com/warewolf/vstest
        mkdir "$(Agent.BuildDirectory)\TestResults"
        echo Set-Location C:\BuildUnderTest>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        echo ^&".\Job Shortcuts\TestRun.ps1" -RetryCount 6 -Projects Warewolf.Tools.Specs -Category ReadFile -UNCPassword "Dev2@dmin123">>"$(Agent.BuildDirectory)\TestResults\RunTestsEntrypoint.ps1"
        docker run -i --rm --memory 4g -v "$(Agent.BuildDirectory)\TestResults:C:\BuildUnderTest\TestResults" registry.gitlab.com/warewolf/vstest:$(Build.SourceVersion) powershell -File C:\BuildUnderTest\TestResults\RunTestsEntrypoint.ps1
      displayName: 'Run Tests'
      env:
        GetVSTestContainer: $(VSTestContainerPassword)
  
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.BuildDirectory)\TestResults\*.trx'
        failTaskOnFailedTests: true
        testRunTitle: 'File Read Tool Specs'
        
    - script: 'if not exist "$(Agent.BuildDirectory)\TestResults\*.trx" exit 1'