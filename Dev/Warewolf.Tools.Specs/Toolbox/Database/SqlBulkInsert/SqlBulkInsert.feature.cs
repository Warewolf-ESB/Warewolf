// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.Database.SqlBulkInsert
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("TechTalk.SpecFlow.MSTest.SpecFlowPlugin.dll")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SqlBulkInsertFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = new string[] {
                "MSTest:DeploymentItem:EnableDocker.txt"};
        
#line 1 "SqlBulkInsert.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Toolbox/Database/SqlBulkInsert", "SqlBulkInsert", "\tIn order to quickly insert large amounts of data in a sql server database\r\n\tAs a" +
                    " Warewolf user\r\n\tI want a tool that performs this action", ProgrammingLanguage.CSharp, new string[] {
                        "MSTest:DeploymentItem:EnableDocker.txt"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "SqlBulkInsert")))
            {
                global::Warewolf.Tools.Specs.Toolbox.Database.SqlBulkInsert.SqlBulkInsertFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into table with check contraint disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithCheckContraintDisabled()
        {
            string[] tagsOfScenario = new string[] {
                    "SqlBulkInsert"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into table with check contraint disabled", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1066 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1066.AddRow(new string[] {
                            "1",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1066.AddRow(new string[] {
                            "1",
                            "TestData",
                            "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
#line 9
 testRunner.Given("I have this data", ((string)(null)), table1066, "Given ");
#line hidden
#line 13
 testRunner.And("Check constraints is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1067 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1067.AddRow(new string[] {
                            "1",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1067.AddRow(new string[] {
                            "2",
                            "TestData",
                            "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
#line 15
 testRunner.Then("the new table will have", ((string)(null)), table1067, "Then ");
#line hidden
#line 19
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1068 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "To Field",
                            "Type",
                            "Batch Size",
                            "Timeout",
                            "Check Constraints",
                            "Keep Table Lock",
                            "Fire Triggers",
                            "Keep Identity",
                            "Use Internal Transaction",
                            "Skip Blank Rows"});
                table1068.AddRow(new string[] {
                            "1",
                            "[[rs(1).Col1]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1068.AddRow(new string[] {
                            "",
                            "[[rs(2).Col1]] = 1",
                            "Col1",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1068.AddRow(new string[] {
                            "2",
                            "[[rs(1).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1068.AddRow(new string[] {
                            "",
                            "[[rs(2).Col2]] = TestData",
                            "Col2",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1068.AddRow(new string[] {
                            "3",
                            "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1068.AddRow(new string[] {
                            "",
                            "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                            "Col3",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1068.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "NO",
                            "NO",
                            "NO",
                            "NO",
                            "NO",
                            "NO"});
#line 20
 testRunner.And("the debug inputs as", ((string)(null)), table1068, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1069 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1069.AddRow(new string[] {
                            "[[result]] = Success"});
#line 29
 testRunner.And("the debug output as", ((string)(null)), table1069, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with check constraint enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithCheckConstraintEnabled()
        {
            string[] tagsOfScenario = new string[] {
                    "SqlBulkInsert"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with check constraint enabled", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1070 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1070.AddRow(new string[] {
                            "1",
                            "TestData",
                            "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
#line 36
 testRunner.Given("I have this data", ((string)(null)), table1070, "Given ");
#line hidden
#line 39
 testRunner.And("Check constraints is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
 testRunner.Then("the new table will will have 0 of rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1071 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "To Field",
                            "Type",
                            "Batch Size",
                            "Timeout",
                            "Check Constraints",
                            "Keep Table Lock",
                            "Fire Triggers",
                            "Keep Identity",
                            "Use Internal Transaction",
                            "Skip Blank Rows"});
                table1071.AddRow(new string[] {
                            "1",
                            "[[rs(1).Col1]] = 1",
                            "Col1",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1071.AddRow(new string[] {
                            "2",
                            "[[rs(1).Col2]] = TestData",
                            "Col2",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1071.AddRow(new string[] {
                            "3",
                            "[[rs(1).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                            "Col3",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1071.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "YES",
                            "NO",
                            "NO",
                            "NO",
                            "NO",
                            "NO"});
#line 43
 testRunner.And("the debug inputs as", ((string)(null)), table1071, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1072 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1072.AddRow(new string[] {
                            "[[result]] = Failure"});
#line 49
 testRunner.And("the debug output as", ((string)(null)), table1072, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with keep identity disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithKeepIdentityDisabled()
        {
            string[] tagsOfScenario = new string[] {
                    "SqlBulkInsert"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with keep identity disabled", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1073 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1073.AddRow(new string[] {
                            "4",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1073.AddRow(new string[] {
                            "6",
                            "TestData",
                            "bc7a9611-102e-4899-82b8-97ff1517d268"});
                table1073.AddRow(new string[] {
                            "8",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 56
 testRunner.Given("I have this data", ((string)(null)), table1073, "Given ");
#line hidden
#line 61
 testRunner.And("Keep identity is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1074 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1074.AddRow(new string[] {
                            "1",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1074.AddRow(new string[] {
                            "2",
                            "TestData",
                            "bc7a9611-102e-4899-82b8-97ff1517d268"});
                table1074.AddRow(new string[] {
                            "3",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 63
 testRunner.Then("the new table will have", ((string)(null)), table1074, "Then ");
#line hidden
#line 68
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1075 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "To Field",
                            "Type",
                            "Batch Size",
                            "Timeout",
                            "Check Constraints",
                            "Keep Table Lock",
                            "Fire Triggers",
                            "Keep Identity",
                            "Use Internal Transaction",
                            "Skip Blank Rows"});
                table1075.AddRow(new string[] {
                            "1",
                            "[[rs(1).Col1]] = 4",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1075.AddRow(new string[] {
                            "",
                            "[[rs(2).Col1]] = 6",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1075.AddRow(new string[] {
                            "",
                            "[[rs(3).Col1]] = 8",
                            "Col1",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1075.AddRow(new string[] {
                            "2",
                            "[[rs(1).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1075.AddRow(new string[] {
                            "",
                            "[[rs(2).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1075.AddRow(new string[] {
                            "",
                            "[[rs(3).Col2]] = TestData",
                            "Col2",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1075.AddRow(new string[] {
                            "3",
                            "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1075.AddRow(new string[] {
                            "",
                            "[[rs(2).Col3]] = bc7a9611-102e-4899-82b8-97ff1517d268",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1075.AddRow(new string[] {
                            "",
                            "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "Col3",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1075.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "NO",
                            "NO",
                            "NO",
                            "NO",
                            "NO",
                            "NO"});
#line 69
 testRunner.And("the debug inputs as", ((string)(null)), table1075, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1076 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1076.AddRow(new string[] {
                            "[[result]] = Success"});
#line 81
 testRunner.And("the debug output as", ((string)(null)), table1076, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with keep identity enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithKeepIdentityEnabled()
        {
            string[] tagsOfScenario = new string[] {
                    "SqlBulkInsert"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with keep identity enabled", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1077 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1077.AddRow(new string[] {
                            "4",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1077.AddRow(new string[] {
                            "6",
                            "TestData",
                            "bc7a9611-102e-4899-82b8-97ff1517d268"});
                table1077.AddRow(new string[] {
                            "8",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 87
 testRunner.Given("I have this data", ((string)(null)), table1077, "Given ");
#line hidden
#line 92
 testRunner.And("Keep identity is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1078 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1078.AddRow(new string[] {
                            "4",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1078.AddRow(new string[] {
                            "6",
                            "TestData",
                            "bc7a9611-102e-4899-82b8-97ff1517d268"});
                table1078.AddRow(new string[] {
                            "8",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 94
 testRunner.Then("the new table will have", ((string)(null)), table1078, "Then ");
#line hidden
#line 99
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1079 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "To Field",
                            "Type",
                            "Batch Size",
                            "Timeout",
                            "Check Constraints",
                            "Keep Table Lock",
                            "Fire Triggers",
                            "Keep Identity",
                            "Use Internal Transaction",
                            "Skip Blank Rows"});
                table1079.AddRow(new string[] {
                            "1",
                            "[[rs(1).Col1]] = 4",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1079.AddRow(new string[] {
                            "",
                            "[[rs(2).Col1]] = 6",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1079.AddRow(new string[] {
                            "",
                            "[[rs(3).Col1]] = 8",
                            "Col1",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1079.AddRow(new string[] {
                            "2",
                            "[[rs(1).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1079.AddRow(new string[] {
                            "",
                            "[[rs(2).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1079.AddRow(new string[] {
                            "",
                            "[[rs(3).Col2]] = TestData",
                            "Col2",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1079.AddRow(new string[] {
                            "3",
                            "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1079.AddRow(new string[] {
                            "",
                            "[[rs(2).Col3]] = bc7a9611-102e-4899-82b8-97ff1517d268",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1079.AddRow(new string[] {
                            "",
                            "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "Col3",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1079.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "NO",
                            "NO",
                            "NO",
                            "YES",
                            "NO",
                            "NO"});
#line 100
 testRunner.And("the debug inputs as", ((string)(null)), table1079, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1080 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1080.AddRow(new string[] {
                            "[[result]] = Success"});
#line 112
 testRunner.And("the debug output as", ((string)(null)), table1080, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with skip blank rows disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithSkipBlankRowsDisabled()
        {
            string[] tagsOfScenario = new string[] {
                    "SqlBulkInsert"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with skip blank rows disabled", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1081 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1081.AddRow(new string[] {
                            "1",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1081.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table1081.AddRow(new string[] {
                            "2",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1081.AddRow(new string[] {
                            "3",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 119
 testRunner.Given("I have this data", ((string)(null)), table1081, "Given ");
#line hidden
#line 125
 testRunner.And("Skip rows is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 127
 testRunner.Then("the new table will will have 0 of rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1082 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "To Field",
                            "Type",
                            "Batch Size",
                            "Timeout",
                            "Check Constraints",
                            "Keep Table Lock",
                            "Fire Triggers",
                            "Keep Identity",
                            "Use Internal Transaction",
                            "Skip Blank Rows"});
                table1082.AddRow(new string[] {
                            "1",
                            "[[rs(1).Col1]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1082.AddRow(new string[] {
                            "",
                            "[[rs(2).Col1]] =",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1082.AddRow(new string[] {
                            "",
                            "[[rs(3).Col1]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1082.AddRow(new string[] {
                            "",
                            "[[rs(4).Col1]] = 3",
                            "Col1",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1082.AddRow(new string[] {
                            "2",
                            "[[rs(1).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1082.AddRow(new string[] {
                            "",
                            "[[rs(2).Col2]] =",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1082.AddRow(new string[] {
                            "",
                            "[[rs(3).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1082.AddRow(new string[] {
                            "",
                            "[[rs(4).Col2]] = TestData",
                            "Col2",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1082.AddRow(new string[] {
                            "3",
                            "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1082.AddRow(new string[] {
                            "",
                            "[[rs(2).Col3]] =",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1082.AddRow(new string[] {
                            "",
                            "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1082.AddRow(new string[] {
                            "",
                            "[[rs(4).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "Col3",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
#line 129
 testRunner.And("the debug inputs as", ((string)(null)), table1082, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1083 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1083.AddRow(new string[] {
                            "[[result]] = Failure"});
#line 143
 testRunner.And("the debug output as", ((string)(null)), table1083, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with skip blank rows enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithSkipBlankRowsEnabled()
        {
            string[] tagsOfScenario = new string[] {
                    "SqlBulkInsert"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with skip blank rows enabled", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 148
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1084 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1084.AddRow(new string[] {
                            "1",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1084.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table1084.AddRow(new string[] {
                            "2",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1084.AddRow(new string[] {
                            "3",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 150
 testRunner.Given("I have this data", ((string)(null)), table1084, "Given ");
#line hidden
#line 156
 testRunner.And("Skip rows is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 158
 testRunner.Then("the new table will will have 3 of rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 159
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1085 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "To Field",
                            "Type",
                            "Batch Size",
                            "Timeout",
                            "Check Constraints",
                            "Keep Table Lock",
                            "Fire Triggers",
                            "Keep Identity",
                            "Use Internal Transaction",
                            "Skip Blank Rows"});
                table1085.AddRow(new string[] {
                            "1",
                            "[[rs(1).Col1]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1085.AddRow(new string[] {
                            "",
                            "[[rs(2).Col1]] =",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1085.AddRow(new string[] {
                            "",
                            "[[rs(3).Col1]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1085.AddRow(new string[] {
                            "",
                            "[[rs(4).Col1]] = 3",
                            "Col1",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1085.AddRow(new string[] {
                            "2",
                            "[[rs(1).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1085.AddRow(new string[] {
                            "",
                            "[[rs(2).Col2]] =",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1085.AddRow(new string[] {
                            "",
                            "[[rs(3).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1085.AddRow(new string[] {
                            "",
                            "[[rs(4).Col2]] = TestData",
                            "Col2",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1085.AddRow(new string[] {
                            "3",
                            "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1085.AddRow(new string[] {
                            "",
                            "[[rs(2).Col3]] =",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1085.AddRow(new string[] {
                            "",
                            "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1085.AddRow(new string[] {
                            "",
                            "[[rs(4).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "Col3",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1085.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "NO",
                            "NO",
                            "NO",
                            "NO",
                            "NO",
                            "YES"});
#line 160
 testRunner.And("the debug inputs as", ((string)(null)), table1085, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1086 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1086.AddRow(new string[] {
                            "[[result]] = Success"});
#line 175
 testRunner.And("the debug output as", ((string)(null)), table1086, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with fire triggers disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithFireTriggersDisabled()
        {
            string[] tagsOfScenario = new string[] {
                    "SqlBulkInsert"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with fire triggers disabled", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 180
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1087 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1087.AddRow(new string[] {
                            "1",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1087.AddRow(new string[] {
                            "2",
                            "",
                            "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
                table1087.AddRow(new string[] {
                            "3",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 182
 testRunner.Given("I have this data", ((string)(null)), table1087, "Given ");
#line hidden
#line 187
 testRunner.And("Fire triggers is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 188
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1088 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1088.AddRow(new string[] {
                            "1",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1088.AddRow(new string[] {
                            "2",
                            "",
                            "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
                table1088.AddRow(new string[] {
                            "3",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 189
 testRunner.Then("the new table will have", ((string)(null)), table1088, "Then ");
#line hidden
#line 194
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1089 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "To Field",
                            "Type",
                            "Batch Size",
                            "Timeout",
                            "Check Constraints",
                            "Keep Table Lock",
                            "Fire Triggers",
                            "Keep Identity",
                            "Use Internal Transaction",
                            "Skip Blank Rows"});
                table1089.AddRow(new string[] {
                            "1",
                            "[[rs(1).Col1]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1089.AddRow(new string[] {
                            "",
                            "[[rs(2).Col1]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1089.AddRow(new string[] {
                            "",
                            "[[rs(3).Col1]] = 3",
                            "Col1",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1089.AddRow(new string[] {
                            "2",
                            "[[rs(1).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1089.AddRow(new string[] {
                            "",
                            "[[rs(2).Col2]] =",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1089.AddRow(new string[] {
                            "",
                            "[[rs(3).Col2]] = TestData",
                            "Col2",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1089.AddRow(new string[] {
                            "3",
                            "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1089.AddRow(new string[] {
                            "",
                            "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1089.AddRow(new string[] {
                            "",
                            "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "Col3",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1089.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "NO",
                            "NO",
                            "NO",
                            "NO",
                            "NO",
                            "NO"});
#line 195
 testRunner.And("the debug inputs as", ((string)(null)), table1089, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1090 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1090.AddRow(new string[] {
                            "[[result]] = Success"});
#line 207
 testRunner.And("the debug output as", ((string)(null)), table1090, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with fire triggers enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithFireTriggersEnabled()
        {
            string[] tagsOfScenario = new string[] {
                    "SqlBulkInsert"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with fire triggers enabled", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 212
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1091 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1091.AddRow(new string[] {
                            "1",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1091.AddRow(new string[] {
                            "2",
                            "",
                            "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
                table1091.AddRow(new string[] {
                            "3",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 214
 testRunner.Given("I have this data", ((string)(null)), table1091, "Given ");
#line hidden
#line 219
 testRunner.And("Fire triggers is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 220
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1092 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1092.AddRow(new string[] {
                            "1",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1092.AddRow(new string[] {
                            "2",
                            "XXXXXXXX",
                            "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
                table1092.AddRow(new string[] {
                            "3",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 221
 testRunner.Then("the new table will have", ((string)(null)), table1092, "Then ");
#line hidden
#line 226
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1093 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "To Field",
                            "Type",
                            "Batch Size",
                            "Timeout",
                            "Check Constraints",
                            "Keep Table Lock",
                            "Fire Triggers",
                            "Keep Identity",
                            "Use Internal Transaction",
                            "Skip Blank Rows"});
                table1093.AddRow(new string[] {
                            "1",
                            "[[rs(1).Col1]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1093.AddRow(new string[] {
                            "",
                            "[[rs(2).Col1]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1093.AddRow(new string[] {
                            "",
                            "[[rs(3).Col1]] = 3",
                            "Col1",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1093.AddRow(new string[] {
                            "2",
                            "[[rs(1).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1093.AddRow(new string[] {
                            "",
                            "[[rs(2).Col2]] =",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1093.AddRow(new string[] {
                            "",
                            "[[rs(3).Col2]] = TestData",
                            "Col2",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1093.AddRow(new string[] {
                            "3",
                            "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1093.AddRow(new string[] {
                            "",
                            "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1093.AddRow(new string[] {
                            "",
                            "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "Col3",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1093.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "NO",
                            "NO",
                            "YES",
                            "NO",
                            "NO",
                            "NO"});
#line 227
 testRunner.And("the debug inputs as", ((string)(null)), table1093, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1094 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1094.AddRow(new string[] {
                            "[[result]] = Success"});
#line 239
 testRunner.And("the debug output as", ((string)(null)), table1094, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table Batch size is 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableBatchSizeIs0()
        {
            string[] tagsOfScenario = new string[] {
                    "SqlBulkInsert"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table Batch size is 0", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 244
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1095 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1095.AddRow(new string[] {
                            "1",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1095.AddRow(new string[] {
                            "2",
                            "TestData",
                            "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
                table1095.AddRow(new string[] {
                            "3",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 245
 testRunner.Given("I have this data", ((string)(null)), table1095, "Given ");
#line hidden
#line 250
 testRunner.And("Batch size is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 251
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 252
 testRunner.Then("number of inserts is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 253
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1096 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "To Field",
                            "Type",
                            "Batch Size",
                            "Timeout",
                            "Check Constraints",
                            "Keep Table Lock",
                            "Fire Triggers",
                            "Keep Identity",
                            "Use Internal Transaction",
                            "Skip Blank Rows"});
                table1096.AddRow(new string[] {
                            "1",
                            "[[rs(1).Col1]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1096.AddRow(new string[] {
                            "",
                            "[[rs(2).Col1]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1096.AddRow(new string[] {
                            "",
                            "[[rs(3).Col1]] = 3",
                            "Col1",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1096.AddRow(new string[] {
                            "2",
                            "[[rs(1).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1096.AddRow(new string[] {
                            "",
                            "[[rs(2).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1096.AddRow(new string[] {
                            "",
                            "[[rs(3).Col2]] = TestData",
                            "Col2",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1096.AddRow(new string[] {
                            "3",
                            "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1096.AddRow(new string[] {
                            "",
                            "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1096.AddRow(new string[] {
                            "",
                            "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "Col3",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1096.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "0",
                            "",
                            "NO",
                            "NO",
                            "YES",
                            "NO",
                            "NO",
                            "NO"});
#line 254
 testRunner.And("the debug inputs as", ((string)(null)), table1096, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1097 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1097.AddRow(new string[] {
                            "[[result]] = Success"});
#line 266
 testRunner.And("the debug output as", ((string)(null)), table1097, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table Batch size is 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableBatchSizeIs1()
        {
            string[] tagsOfScenario = new string[] {
                    "SqlBulkInsert"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table Batch size is 1", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 271
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1098 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1098.AddRow(new string[] {
                            "1",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1098.AddRow(new string[] {
                            "2",
                            "TestData",
                            "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
                table1098.AddRow(new string[] {
                            "3",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 272
 testRunner.Given("I have this data", ((string)(null)), table1098, "Given ");
#line hidden
#line 277
 testRunner.And("Batch size is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 278
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 279
 testRunner.Then("number of inserts is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 280
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1099 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "To Field",
                            "Type",
                            "Batch Size",
                            "Timeout",
                            "Check Constraints",
                            "Keep Table Lock",
                            "Fire Triggers",
                            "Keep Identity",
                            "Use Internal Transaction",
                            "Skip Blank Rows"});
                table1099.AddRow(new string[] {
                            "1",
                            "[[rs(1).Col1]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1099.AddRow(new string[] {
                            "",
                            "[[rs(2).Col1]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1099.AddRow(new string[] {
                            "",
                            "[[rs(3).Col1]] = 3",
                            "Col1",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1099.AddRow(new string[] {
                            "2",
                            "[[rs(1).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1099.AddRow(new string[] {
                            "",
                            "[[rs(2).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1099.AddRow(new string[] {
                            "",
                            "[[rs(3).Col2]] = TestData",
                            "Col2",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1099.AddRow(new string[] {
                            "3",
                            "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1099.AddRow(new string[] {
                            "",
                            "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1099.AddRow(new string[] {
                            "",
                            "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "Col3",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1099.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "1",
                            "",
                            "NO",
                            "NO",
                            "YES",
                            "NO",
                            "NO",
                            "NO"});
#line 281
 testRunner.And("the debug inputs as", ((string)(null)), table1099, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table Batch size is 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableBatchSizeIs2()
        {
            string[] tagsOfScenario = new string[] {
                    "SqlBulkInsert"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table Batch size is 2", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 295
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1100 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1100.AddRow(new string[] {
                            "1",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1100.AddRow(new string[] {
                            "2",
                            "TestData",
                            "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
                table1100.AddRow(new string[] {
                            "3",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 296
 testRunner.Given("I have this data", ((string)(null)), table1100, "Given ");
#line hidden
#line 301
 testRunner.And("Batch size is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 302
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 303
 testRunner.Then("number of inserts is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 304
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1101 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "To Field",
                            "Type",
                            "Batch Size",
                            "Timeout",
                            "Check Constraints",
                            "Keep Table Lock",
                            "Fire Triggers",
                            "Keep Identity",
                            "Use Internal Transaction",
                            "Skip Blank Rows"});
                table1101.AddRow(new string[] {
                            "1",
                            "[[rs(1).Col1]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1101.AddRow(new string[] {
                            "",
                            "[[rs(2).Col1]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1101.AddRow(new string[] {
                            "",
                            "[[rs(3).Col1]] = 3",
                            "Col1",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1101.AddRow(new string[] {
                            "2",
                            "[[rs(1).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1101.AddRow(new string[] {
                            "",
                            "[[rs(2).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1101.AddRow(new string[] {
                            "",
                            "[[rs(3).Col2]] = TestData",
                            "Col2",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1101.AddRow(new string[] {
                            "3",
                            "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1101.AddRow(new string[] {
                            "",
                            "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1101.AddRow(new string[] {
                            "",
                            "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "Col3",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1101.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "2",
                            "",
                            "NO",
                            "NO",
                            "YES",
                            "NO",
                            "NO",
                            "NO"});
#line 305
 testRunner.And("the debug inputs as", ((string)(null)), table1101, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table timeout after 3 second")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DatabaseTimeout")]
        public virtual void ImportDataIntoTableTimeoutAfter3Second()
        {
            string[] tagsOfScenario = new string[] {
                    "DatabaseTimeout"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table timeout after 3 second", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 319
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1102 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1102.AddRow(new string[] {
                            "1",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1102.AddRow(new string[] {
                            "2",
                            "TestData",
                            "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
                table1102.AddRow(new string[] {
                            "3",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 320
 testRunner.Given("I have this data", ((string)(null)), table1102, "Given ");
#line hidden
#line 325
 testRunner.And("Timeout in 3 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 326
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 327
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 328
 testRunner.And("number of inserts is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1103 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "To Field",
                            "Type",
                            "Batch Size",
                            "Timeout",
                            "Check Constraints",
                            "Keep Table Lock",
                            "Fire Triggers",
                            "Keep Identity",
                            "Use Internal Transaction",
                            "Skip Blank Rows"});
                table1103.AddRow(new string[] {
                            "1",
                            "[[rs(1).Col1]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1103.AddRow(new string[] {
                            "",
                            "[[rs(2).Col1]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1103.AddRow(new string[] {
                            "",
                            "[[rs(3).Col1]] = 3",
                            "Col1",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1103.AddRow(new string[] {
                            "2",
                            "[[rs(1).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1103.AddRow(new string[] {
                            "",
                            "[[rs(2).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1103.AddRow(new string[] {
                            "",
                            "[[rs(3).Col2]] = TestData",
                            "Col2",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1103.AddRow(new string[] {
                            "3",
                            "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1103.AddRow(new string[] {
                            "",
                            "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1103.AddRow(new string[] {
                            "",
                            "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "Col3",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1103.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "3",
                            "NO",
                            "NO",
                            "YES",
                            "NO",
                            "NO",
                            "NO"});
#line 329
 testRunner.And("the debug inputs as", ((string)(null)), table1103, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1104 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1104.AddRow(new string[] {
                            "[[result]] = Success"});
#line 341
 testRunner.And("the debug output as", ((string)(null)), table1104, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table timeout after 1 second")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DatabaseTimeout")]
        public virtual void ImportDataIntoTableTimeoutAfter1Second()
        {
            string[] tagsOfScenario = new string[] {
                    "DatabaseTimeout"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table timeout after 1 second", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 346
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1105 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
                table1105.AddRow(new string[] {
                            "1",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
                table1105.AddRow(new string[] {
                            "2",
                            "TestData",
                            "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
                table1105.AddRow(new string[] {
                            "3",
                            "TestData",
                            "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 348
 testRunner.Given("I have this data", ((string)(null)), table1105, "Given ");
#line hidden
#line 353
 testRunner.And("Timeout in 1 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 354
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 355
 testRunner.Then("number of inserts is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 356
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1106 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "To Field",
                            "Type",
                            "Batch Size",
                            "Timeout",
                            "Check Constraints",
                            "Keep Table Lock",
                            "Fire Triggers",
                            "Keep Identity",
                            "Use Internal Transaction",
                            "Skip Blank Rows"});
                table1106.AddRow(new string[] {
                            "1",
                            "[[rs(1).Col1]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1106.AddRow(new string[] {
                            "",
                            "[[rs(2).Col1]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1106.AddRow(new string[] {
                            "",
                            "[[rs(3).Col1]] = 3",
                            "Col1",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1106.AddRow(new string[] {
                            "2",
                            "[[rs(1).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1106.AddRow(new string[] {
                            "",
                            "[[rs(2).Col2]] = TestData",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1106.AddRow(new string[] {
                            "",
                            "[[rs(3).Col2]] = TestData",
                            "Col2",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1106.AddRow(new string[] {
                            "3",
                            "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1106.AddRow(new string[] {
                            "",
                            "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1106.AddRow(new string[] {
                            "",
                            "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                            "Col3",
                            "bigint",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1106.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "1",
                            "NO",
                            "NO",
                            "YES",
                            "NO",
                            "NO",
                            "NO"});
#line 357
  testRunner.And("the debug inputs as", ((string)(null)), table1106, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1107 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1107.AddRow(new string[] {
                            "[[result]] = Failure"});
#line 369
 testRunner.And("the debug output as", ((string)(null)), table1107, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into table with blank data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithBlankData()
        {
            string[] tagsOfScenario = new string[] {
                    "SqlBulkInsert"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into table with blank data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 374
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1108 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
#line 375
 testRunner.Given("I have this data", ((string)(null)), table1108, "Given ");
#line hidden
#line 377
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1109 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1",
                            "Col2",
                            "Col3"});
#line 378
 testRunner.Then("the new table will have", ((string)(null)), table1109, "Then ");
#line hidden
#line 380
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
