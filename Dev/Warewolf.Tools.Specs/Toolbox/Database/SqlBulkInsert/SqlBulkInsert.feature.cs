// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.Database.SqlBulkInsert
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SqlBulkInsertFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "SqlBulkInsert.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SqlBulkInsert", "\tIn order to quickly insert large amounts of data in a sql server database\r\n\tAs a" +
                    " Warewolf user\r\n\tI want a tool that performs this action", ProgrammingLanguage.CSharp, new string[] {
                        "MSTest:DeploymentItem:EnableDocker.txt"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "SqlBulkInsert")))
            {
                global::Warewolf.Tools.Specs.Toolbox.Database.SqlBulkInsert.SqlBulkInsertFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into table with check contraint disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithCheckContraintDisabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into table with check contraint disabled", new string[] {
                        "SqlBulkInsert"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2281 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2281.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2281.AddRow(new string[] {
                        "1",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
#line 9
 testRunner.Given("I have this data", ((string)(null)), table2281, "Given ");
#line 13
 testRunner.And("Check constraints is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2282 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2282.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2282.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
#line 15
 testRunner.Then("the new table will have", ((string)(null)), table2282, "Then ");
#line 19
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2283 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2283.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2283.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 1",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2283.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2283.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2283.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2283.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2283.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO"});
#line 20
 testRunner.And("the debug inputs as", ((string)(null)), table2283, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2284 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2284.AddRow(new string[] {
                        "[[result]] = Success"});
#line 29
 testRunner.And("the debug output as", ((string)(null)), table2284, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with check constraint enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithCheckConstraintEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with check constraint enabled", new string[] {
                        "SqlBulkInsert"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2285 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2285.AddRow(new string[] {
                        "1",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
#line 36
 testRunner.Given("I have this data", ((string)(null)), table2285, "Given ");
#line 39
 testRunner.And("Check constraints is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.Then("the new table will will have 0 of rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 42
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2286 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2286.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2286.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2286.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2286.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "YES",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO"});
#line 43
 testRunner.And("the debug inputs as", ((string)(null)), table2286, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2287 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2287.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 49
 testRunner.And("the debug output as", ((string)(null)), table2287, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with keep identity disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithKeepIdentityDisabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with keep identity disabled", new string[] {
                        "SqlBulkInsert"});
#line 54
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2288 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2288.AddRow(new string[] {
                        "4",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2288.AddRow(new string[] {
                        "6",
                        "TestData",
                        "bc7a9611-102e-4899-82b8-97ff1517d268"});
            table2288.AddRow(new string[] {
                        "8",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 56
 testRunner.Given("I have this data", ((string)(null)), table2288, "Given ");
#line 61
 testRunner.And("Keep identity is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2289 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2289.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2289.AddRow(new string[] {
                        "2",
                        "TestData",
                        "bc7a9611-102e-4899-82b8-97ff1517d268"});
            table2289.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 63
 testRunner.Then("the new table will have", ((string)(null)), table2289, "Then ");
#line 68
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2290 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2290.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2290.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 6",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2290.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 8",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2290.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2290.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2290.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2290.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2290.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = bc7a9611-102e-4899-82b8-97ff1517d268",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2290.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2290.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO"});
#line 69
 testRunner.And("the debug inputs as", ((string)(null)), table2290, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2291 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2291.AddRow(new string[] {
                        "[[result]] = Success"});
#line 81
 testRunner.And("the debug output as", ((string)(null)), table2291, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with keep identity enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithKeepIdentityEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with keep identity enabled", new string[] {
                        "SqlBulkInsert"});
#line 86
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2292 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2292.AddRow(new string[] {
                        "4",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2292.AddRow(new string[] {
                        "6",
                        "TestData",
                        "bc7a9611-102e-4899-82b8-97ff1517d268"});
            table2292.AddRow(new string[] {
                        "8",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 87
 testRunner.Given("I have this data", ((string)(null)), table2292, "Given ");
#line 92
 testRunner.And("Keep identity is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2293 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2293.AddRow(new string[] {
                        "4",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2293.AddRow(new string[] {
                        "6",
                        "TestData",
                        "bc7a9611-102e-4899-82b8-97ff1517d268"});
            table2293.AddRow(new string[] {
                        "8",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 94
 testRunner.Then("the new table will have", ((string)(null)), table2293, "Then ");
#line 99
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2294 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2294.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2294.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 6",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2294.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 8",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2294.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2294.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2294.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2294.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2294.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = bc7a9611-102e-4899-82b8-97ff1517d268",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2294.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2294.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO"});
#line 100
 testRunner.And("the debug inputs as", ((string)(null)), table2294, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2295 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2295.AddRow(new string[] {
                        "[[result]] = Success"});
#line 112
 testRunner.And("the debug output as", ((string)(null)), table2295, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with skip blank rows disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithSkipBlankRowsDisabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with skip blank rows disabled", new string[] {
                        "SqlBulkInsert"});
#line 117
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2296 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2296.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2296.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table2296.AddRow(new string[] {
                        "2",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2296.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 119
 testRunner.Given("I have this data", ((string)(null)), table2296, "Given ");
#line 125
 testRunner.And("Skip rows is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
 testRunner.Then("the new table will will have 0 of rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 128
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2297 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2297.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2297.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2297.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2297.AddRow(new string[] {
                        "",
                        "[[rs(4).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2297.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2297.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2297.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2297.AddRow(new string[] {
                        "",
                        "[[rs(4).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2297.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2297.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2297.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2297.AddRow(new string[] {
                        "",
                        "[[rs(4).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 129
 testRunner.And("the debug inputs as", ((string)(null)), table2297, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2298 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2298.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 143
 testRunner.And("the debug output as", ((string)(null)), table2298, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with skip blank rows enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithSkipBlankRowsEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with skip blank rows enabled", new string[] {
                        "SqlBulkInsert"});
#line 148
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2299 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2299.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2299.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table2299.AddRow(new string[] {
                        "2",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2299.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 150
 testRunner.Given("I have this data", ((string)(null)), table2299, "Given ");
#line 156
 testRunner.And("Skip rows is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 158
 testRunner.Then("the new table will will have 3 of rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 159
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2300 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2300.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2300.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2300.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2300.AddRow(new string[] {
                        "",
                        "[[rs(4).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2300.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2300.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2300.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2300.AddRow(new string[] {
                        "",
                        "[[rs(4).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2300.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2300.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2300.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2300.AddRow(new string[] {
                        "",
                        "[[rs(4).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2300.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "YES"});
#line 160
 testRunner.And("the debug inputs as", ((string)(null)), table2300, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2301 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2301.AddRow(new string[] {
                        "[[result]] = Success"});
#line 175
 testRunner.And("the debug output as", ((string)(null)), table2301, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with fire triggers disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithFireTriggersDisabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with fire triggers disabled", new string[] {
                        "SqlBulkInsert"});
#line 180
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2302 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2302.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2302.AddRow(new string[] {
                        "2",
                        "",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2302.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 182
 testRunner.Given("I have this data", ((string)(null)), table2302, "Given ");
#line 187
 testRunner.And("Fire triggers is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2303 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2303.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2303.AddRow(new string[] {
                        "2",
                        "",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2303.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 189
 testRunner.Then("the new table will have", ((string)(null)), table2303, "Then ");
#line 194
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2304 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2304.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2304.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2304.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2304.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2304.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2304.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2304.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2304.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2304.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2304.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO"});
#line 195
 testRunner.And("the debug inputs as", ((string)(null)), table2304, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2305 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2305.AddRow(new string[] {
                        "[[result]] = Success"});
#line 207
 testRunner.And("the debug output as", ((string)(null)), table2305, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with fire triggers enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithFireTriggersEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with fire triggers enabled", new string[] {
                        "SqlBulkInsert"});
#line 212
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2306 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2306.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2306.AddRow(new string[] {
                        "2",
                        "",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2306.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 214
 testRunner.Given("I have this data", ((string)(null)), table2306, "Given ");
#line 219
 testRunner.And("Fire triggers is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2307 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2307.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2307.AddRow(new string[] {
                        "2",
                        "XXXXXXXX",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2307.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 221
 testRunner.Then("the new table will have", ((string)(null)), table2307, "Then ");
#line 226
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2308 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2308.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2308.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2308.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2308.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2308.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2308.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2308.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2308.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2308.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2308.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 227
 testRunner.And("the debug inputs as", ((string)(null)), table2308, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2309 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2309.AddRow(new string[] {
                        "[[result]] = Success"});
#line 239
 testRunner.And("the debug output as", ((string)(null)), table2309, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table Batch size is 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableBatchSizeIs0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table Batch size is 0", new string[] {
                        "SqlBulkInsert"});
#line 244
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2310 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2310.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2310.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2310.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 245
 testRunner.Given("I have this data", ((string)(null)), table2310, "Given ");
#line 250
 testRunner.And("Batch size is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 252
 testRunner.Then("number of inserts is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 253
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2311 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2311.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2311.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2311.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2311.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2311.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2311.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2311.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2311.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2311.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2311.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "0",
                        "",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 254
 testRunner.And("the debug inputs as", ((string)(null)), table2311, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2312 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2312.AddRow(new string[] {
                        "[[result]] = Success"});
#line 266
 testRunner.And("the debug output as", ((string)(null)), table2312, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table Batch size is 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableBatchSizeIs1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table Batch size is 1", new string[] {
                        "SqlBulkInsert"});
#line 271
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2313 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2313.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2313.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2313.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 272
 testRunner.Given("I have this data", ((string)(null)), table2313, "Given ");
#line 277
 testRunner.And("Batch size is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 278
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 279
 testRunner.Then("number of inserts is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 280
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2314 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2314.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2314.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2314.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2314.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2314.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2314.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2314.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2314.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2314.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2314.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "1",
                        "",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 281
 testRunner.And("the debug inputs as", ((string)(null)), table2314, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table Batch size is 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableBatchSizeIs2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table Batch size is 2", new string[] {
                        "SqlBulkInsert"});
#line 295
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2315 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2315.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2315.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2315.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 296
 testRunner.Given("I have this data", ((string)(null)), table2315, "Given ");
#line 301
 testRunner.And("Batch size is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 302
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 303
 testRunner.Then("number of inserts is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 304
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2316 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2316.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2316.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2316.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2316.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2316.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2316.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2316.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2316.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2316.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2316.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "2",
                        "",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 305
 testRunner.And("the debug inputs as", ((string)(null)), table2316, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table timeout after 3 second")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DatabaseTimeout")]
        public virtual void ImportDataIntoTableTimeoutAfter3Second()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table timeout after 3 second", new string[] {
                        "DatabaseTimeout"});
#line 319
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2317 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2317.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2317.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2317.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 320
 testRunner.Given("I have this data", ((string)(null)), table2317, "Given ");
#line 325
 testRunner.And("Timeout in 3 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 327
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 328
 testRunner.And("number of inserts is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2318 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2318.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2318.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2318.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2318.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2318.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2318.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2318.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2318.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2318.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2318.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "3",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 329
 testRunner.And("the debug inputs as", ((string)(null)), table2318, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2319 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2319.AddRow(new string[] {
                        "[[result]] = Success"});
#line 341
 testRunner.And("the debug output as", ((string)(null)), table2319, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table timeout after 1 second")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DatabaseTimeout")]
        public virtual void ImportDataIntoTableTimeoutAfter1Second()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table timeout after 1 second", new string[] {
                        "DatabaseTimeout"});
#line 346
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2320 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2320.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2320.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2320.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 348
 testRunner.Given("I have this data", ((string)(null)), table2320, "Given ");
#line 353
 testRunner.And("Timeout in 1 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 354
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 355
 testRunner.Then("number of inserts is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 356
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2321 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2321.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2321.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2321.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2321.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2321.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2321.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2321.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2321.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2321.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2321.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "1",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 357
  testRunner.And("the debug inputs as", ((string)(null)), table2321, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2322 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2322.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 369
 testRunner.And("the debug output as", ((string)(null)), table2322, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into table with blank data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithBlankData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into table with blank data", new string[] {
                        "SqlBulkInsert"});
#line 374
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2323 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
#line 375
 testRunner.Given("I have this data", ((string)(null)), table2323, "Given ");
#line 377
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2324 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
#line 378
 testRunner.Then("the new table will have", ((string)(null)), table2324, "Then ");
#line 380
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
