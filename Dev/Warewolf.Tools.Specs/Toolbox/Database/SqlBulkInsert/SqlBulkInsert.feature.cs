// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.Database.SqlBulkInsert
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SqlBulkInsertFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "SqlBulkInsert.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SqlBulkInsert", "\tIn order to quickly insert large amounts of data in a sql server database\r\n\tAs a" +
                    " Warewolf user\r\n\tI want a tool that performs this action", ProgrammingLanguage.CSharp, new string[] {
                        "SqlBulkInsert",
                        "MSTest:DeploymentItem:EnableDocker.txt"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "SqlBulkInsert")))
            {
                global::Warewolf.Tools.Specs.Toolbox.Database.SqlBulkInsert.SqlBulkInsertFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into table with check contraint disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        public virtual void ImportDataIntoTableWithCheckContraintDisabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into table with check contraint disabled", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table1.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table1.AddRow(new string[] {
                        "1",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
#line 9
 testRunner.Given("I have this data", ((string)(null)), table1, "Given ");
#line 13
 testRunner.And("Check constraints is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
#line 15
 testRunner.Then("the new table will have", ((string)(null)), table2, "Then ");
#line 19
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table3.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 1",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO"});
#line 20
 testRunner.And("the debug inputs as", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table4.AddRow(new string[] {
                        "[[result]] = Success"});
#line 29
 testRunner.And("the debug output as", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with check constraint enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        public virtual void ImportDataIntoTableWithCheckConstraintEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with check constraint enabled", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table5.AddRow(new string[] {
                        "1",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
#line 35
 testRunner.Given("I have this data", ((string)(null)), table5, "Given ");
#line 38
 testRunner.And("Check constraints is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("the new table will will have 0 of rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table6.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "YES",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO"});
#line 42
 testRunner.And("the debug inputs as", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table7.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 48
 testRunner.And("the debug output as", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with keep identity disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        public virtual void ImportDataIntoTableWithKeepIdentityDisabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with keep identity disabled", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table8.AddRow(new string[] {
                        "4",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table8.AddRow(new string[] {
                        "6",
                        "TestData",
                        "bc7a9611-102e-4899-82b8-97ff1517d268"});
            table8.AddRow(new string[] {
                        "8",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 54
 testRunner.Given("I have this data", ((string)(null)), table8, "Given ");
#line 59
 testRunner.And("Keep identity is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table9.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table9.AddRow(new string[] {
                        "2",
                        "TestData",
                        "bc7a9611-102e-4899-82b8-97ff1517d268"});
            table9.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 61
 testRunner.Then("the new table will have", ((string)(null)), table9, "Then ");
#line 66
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table10.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 6",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 8",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = bc7a9611-102e-4899-82b8-97ff1517d268",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO"});
#line 67
 testRunner.And("the debug inputs as", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table11.AddRow(new string[] {
                        "[[result]] = Success"});
#line 79
 testRunner.And("the debug output as", ((string)(null)), table11, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with keep identity enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        public virtual void ImportDataIntoTableWithKeepIdentityEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with keep identity enabled", ((string[])(null)));
#line 83
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table12.AddRow(new string[] {
                        "4",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table12.AddRow(new string[] {
                        "6",
                        "TestData",
                        "bc7a9611-102e-4899-82b8-97ff1517d268"});
            table12.AddRow(new string[] {
                        "8",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 84
 testRunner.Given("I have this data", ((string)(null)), table12, "Given ");
#line 89
 testRunner.And("Keep identity is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table13.AddRow(new string[] {
                        "4",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table13.AddRow(new string[] {
                        "6",
                        "TestData",
                        "bc7a9611-102e-4899-82b8-97ff1517d268"});
            table13.AddRow(new string[] {
                        "8",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 91
 testRunner.Then("the new table will have", ((string)(null)), table13, "Then ");
#line 96
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table14.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 6",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 8",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = bc7a9611-102e-4899-82b8-97ff1517d268",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO"});
#line 97
 testRunner.And("the debug inputs as", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table15.AddRow(new string[] {
                        "[[result]] = Success"});
#line 109
 testRunner.And("the debug output as", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with skip blank rows disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        public virtual void ImportDataIntoTableWithSkipBlankRowsDisabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with skip blank rows disabled", ((string[])(null)));
#line 113
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table16.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table16.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "2",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table16.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 115
 testRunner.Given("I have this data", ((string)(null)), table16, "Given ");
#line 121
 testRunner.And("Skip rows is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
 testRunner.Then("the new table will will have 0 of rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 124
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table17.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "",
                        "[[rs(4).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "",
                        "[[rs(4).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "",
                        "[[rs(4).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 125
 testRunner.And("the debug inputs as", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table18.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 139
 testRunner.And("the debug output as", ((string)(null)), table18, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with skip blank rows enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        public virtual void ImportDataIntoTableWithSkipBlankRowsEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with skip blank rows enabled", ((string[])(null)));
#line 143
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table19.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table19.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "2",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table19.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 145
 testRunner.Given("I have this data", ((string)(null)), table19, "Given ");
#line 151
 testRunner.And("Skip rows is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 153
 testRunner.Then("the new table will will have 3 of rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 154
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table20.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "[[rs(4).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "[[rs(4).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "[[rs(4).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "YES"});
#line 155
 testRunner.And("the debug inputs as", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table21.AddRow(new string[] {
                        "[[result]] = Success"});
#line 170
 testRunner.And("the debug output as", ((string)(null)), table21, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with fire triggers disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        public virtual void ImportDataIntoTableWithFireTriggersDisabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with fire triggers disabled", ((string[])(null)));
#line 174
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table22.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table22.AddRow(new string[] {
                        "2",
                        "",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table22.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 176
 testRunner.Given("I have this data", ((string)(null)), table22, "Given ");
#line 181
 testRunner.And("Fire triggers is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 182
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table23.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table23.AddRow(new string[] {
                        "2",
                        "",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table23.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 183
 testRunner.Then("the new table will have", ((string)(null)), table23, "Then ");
#line 188
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table24.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO"});
#line 189
 testRunner.And("the debug inputs as", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table25.AddRow(new string[] {
                        "[[result]] = Success"});
#line 201
 testRunner.And("the debug output as", ((string)(null)), table25, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with fire triggers enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        public virtual void ImportDataIntoTableWithFireTriggersEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with fire triggers enabled", ((string[])(null)));
#line 205
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table26.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table26.AddRow(new string[] {
                        "2",
                        "",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table26.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 207
 testRunner.Given("I have this data", ((string)(null)), table26, "Given ");
#line 212
 testRunner.And("Fire triggers is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table27.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table27.AddRow(new string[] {
                        "2",
                        "XXXXXXXX",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table27.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 214
 testRunner.Then("the new table will have", ((string)(null)), table27, "Then ");
#line 219
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table28.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table28.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table28.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table28.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table28.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table28.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table28.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table28.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table28.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table28.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 220
 testRunner.And("the debug inputs as", ((string)(null)), table28, "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table29.AddRow(new string[] {
                        "[[result]] = Success"});
#line 232
 testRunner.And("the debug output as", ((string)(null)), table29, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table Batch size is 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        public virtual void ImportDataIntoTableBatchSizeIs0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table Batch size is 0", ((string[])(null)));
#line 236
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table30.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table30.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table30.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 237
 testRunner.Given("I have this data", ((string)(null)), table30, "Given ");
#line 242
 testRunner.And("Batch size is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 243
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 244
 testRunner.Then("number of inserts is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 245
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table31.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "0",
                        "",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 246
 testRunner.And("the debug inputs as", ((string)(null)), table31, "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table32.AddRow(new string[] {
                        "[[result]] = Success"});
#line 258
 testRunner.And("the debug output as", ((string)(null)), table32, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table Batch size is 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        public virtual void ImportDataIntoTableBatchSizeIs1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table Batch size is 1", ((string[])(null)));
#line 262
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table33.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table33.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table33.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 263
 testRunner.Given("I have this data", ((string)(null)), table33, "Given ");
#line 268
 testRunner.And("Batch size is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 269
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 270
 testRunner.Then("number of inserts is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 271
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table34.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "1",
                        "",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 272
 testRunner.And("the debug inputs as", ((string)(null)), table34, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table Batch size is 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        public virtual void ImportDataIntoTableBatchSizeIs2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table Batch size is 2", ((string[])(null)));
#line 285
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table35.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table35.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table35.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 286
 testRunner.Given("I have this data", ((string)(null)), table35, "Given ");
#line 291
 testRunner.And("Batch size is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 292
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 293
 testRunner.Then("number of inserts is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 294
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table36.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "2",
                        "",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 295
 testRunner.And("the debug inputs as", ((string)(null)), table36, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table timeout after 3 second")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        public virtual void ImportDataIntoTableTimeoutAfter3Second()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table timeout after 3 second", ((string[])(null)));
#line 308
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table37.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table37.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table37.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 309
 testRunner.Given("I have this data", ((string)(null)), table37, "Given ");
#line 314
 testRunner.And("Timeout in 3 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 315
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 316
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 317
 testRunner.And("number of inserts is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table38.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "3",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 318
 testRunner.And("the debug inputs as", ((string)(null)), table38, "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table39.AddRow(new string[] {
                        "[[result]] = Success"});
#line 330
 testRunner.And("the debug output as", ((string)(null)), table39, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table timeout after 1 second")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        public virtual void ImportDataIntoTableTimeoutAfter1Second()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table timeout after 1 second", ((string[])(null)));
#line 334
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table40.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table40.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table40.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 336
 testRunner.Given("I have this data", ((string)(null)), table40, "Given ");
#line 341
 testRunner.And("Timeout in 1 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 342
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 343
 testRunner.Then("number of inserts is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 344
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table41.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "1",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 345
  testRunner.And("the debug inputs as", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table42.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 357
 testRunner.And("the debug output as", ((string)(null)), table42, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into table with blank data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        public virtual void ImportDataIntoTableWithBlankData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into table with blank data", ((string[])(null)));
#line 361
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
#line 362
 testRunner.Given("I have this data", ((string)(null)), table43, "Given ");
#line 364
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
#line 365
 testRunner.Then("the new table will have", ((string)(null)), table44, "Then ");
#line 367
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
