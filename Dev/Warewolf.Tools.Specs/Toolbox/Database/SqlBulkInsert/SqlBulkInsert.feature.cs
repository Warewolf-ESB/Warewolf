// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.Database.SqlBulkInsert
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SqlBulkInsertFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "SqlBulkInsert.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SqlBulkInsert", "\tIn order to quickly insert large amounts of data in a sql server database\r\n\tAs a" +
                    " Warewolf user\r\n\tI want a tool that performs this action", ProgrammingLanguage.CSharp, new string[] {
                        "MSTest:DeploymentItem:EnableDocker.txt"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "SqlBulkInsert")))
            {
                global::Warewolf.Tools.Specs.Toolbox.Database.SqlBulkInsert.SqlBulkInsertFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into table with check contraint disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithCheckContraintDisabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into table with check contraint disabled", new string[] {
                        "SqlBulkInsert"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2227 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2227.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2227.AddRow(new string[] {
                        "1",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
#line 9
 testRunner.Given("I have this data", ((string)(null)), table2227, "Given ");
#line 13
 testRunner.And("Check constraints is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2228 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2228.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2228.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
#line 15
 testRunner.Then("the new table will have", ((string)(null)), table2228, "Then ");
#line 19
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2229 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2229.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2229.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 1",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2229.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2229.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2229.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2229.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2229.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO"});
#line 20
 testRunner.And("the debug inputs as", ((string)(null)), table2229, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2230 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2230.AddRow(new string[] {
                        "[[result]] = Success"});
#line 29
 testRunner.And("the debug output as", ((string)(null)), table2230, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with check constraint enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithCheckConstraintEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with check constraint enabled", new string[] {
                        "SqlBulkInsert"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2231 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2231.AddRow(new string[] {
                        "1",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
#line 36
 testRunner.Given("I have this data", ((string)(null)), table2231, "Given ");
#line 39
 testRunner.And("Check constraints is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.Then("the new table will will have 0 of rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 42
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2232 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2232.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2232.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2232.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2232.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "YES",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO"});
#line 43
 testRunner.And("the debug inputs as", ((string)(null)), table2232, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2233 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2233.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 49
 testRunner.And("the debug output as", ((string)(null)), table2233, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with keep identity disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithKeepIdentityDisabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with keep identity disabled", new string[] {
                        "SqlBulkInsert"});
#line 54
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2234 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2234.AddRow(new string[] {
                        "4",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2234.AddRow(new string[] {
                        "6",
                        "TestData",
                        "bc7a9611-102e-4899-82b8-97ff1517d268"});
            table2234.AddRow(new string[] {
                        "8",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 56
 testRunner.Given("I have this data", ((string)(null)), table2234, "Given ");
#line 61
 testRunner.And("Keep identity is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2235 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2235.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2235.AddRow(new string[] {
                        "2",
                        "TestData",
                        "bc7a9611-102e-4899-82b8-97ff1517d268"});
            table2235.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 63
 testRunner.Then("the new table will have", ((string)(null)), table2235, "Then ");
#line 68
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2236 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2236.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2236.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 6",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2236.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 8",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2236.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2236.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2236.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2236.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2236.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = bc7a9611-102e-4899-82b8-97ff1517d268",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2236.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2236.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO"});
#line 69
 testRunner.And("the debug inputs as", ((string)(null)), table2236, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2237 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2237.AddRow(new string[] {
                        "[[result]] = Success"});
#line 81
 testRunner.And("the debug output as", ((string)(null)), table2237, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with keep identity enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithKeepIdentityEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with keep identity enabled", new string[] {
                        "SqlBulkInsert"});
#line 86
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2238 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2238.AddRow(new string[] {
                        "4",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2238.AddRow(new string[] {
                        "6",
                        "TestData",
                        "bc7a9611-102e-4899-82b8-97ff1517d268"});
            table2238.AddRow(new string[] {
                        "8",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 87
 testRunner.Given("I have this data", ((string)(null)), table2238, "Given ");
#line 92
 testRunner.And("Keep identity is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2239 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2239.AddRow(new string[] {
                        "4",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2239.AddRow(new string[] {
                        "6",
                        "TestData",
                        "bc7a9611-102e-4899-82b8-97ff1517d268"});
            table2239.AddRow(new string[] {
                        "8",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 94
 testRunner.Then("the new table will have", ((string)(null)), table2239, "Then ");
#line 99
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2240 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2240.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2240.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 6",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2240.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 8",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2240.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2240.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2240.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2240.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2240.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = bc7a9611-102e-4899-82b8-97ff1517d268",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2240.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2240.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO"});
#line 100
 testRunner.And("the debug inputs as", ((string)(null)), table2240, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2241 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2241.AddRow(new string[] {
                        "[[result]] = Success"});
#line 112
 testRunner.And("the debug output as", ((string)(null)), table2241, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with skip blank rows disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithSkipBlankRowsDisabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with skip blank rows disabled", new string[] {
                        "SqlBulkInsert"});
#line 117
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2242 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2242.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2242.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table2242.AddRow(new string[] {
                        "2",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2242.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 119
 testRunner.Given("I have this data", ((string)(null)), table2242, "Given ");
#line 125
 testRunner.And("Skip rows is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
 testRunner.Then("the new table will will have 0 of rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 128
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2243 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2243.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2243.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2243.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2243.AddRow(new string[] {
                        "",
                        "[[rs(4).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2243.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2243.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2243.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2243.AddRow(new string[] {
                        "",
                        "[[rs(4).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2243.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2243.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2243.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2243.AddRow(new string[] {
                        "",
                        "[[rs(4).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 129
 testRunner.And("the debug inputs as", ((string)(null)), table2243, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2244 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2244.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 143
 testRunner.And("the debug output as", ((string)(null)), table2244, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with skip blank rows enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithSkipBlankRowsEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with skip blank rows enabled", new string[] {
                        "SqlBulkInsert"});
#line 148
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2245 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2245.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2245.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table2245.AddRow(new string[] {
                        "2",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2245.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 150
 testRunner.Given("I have this data", ((string)(null)), table2245, "Given ");
#line 156
 testRunner.And("Skip rows is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 158
 testRunner.Then("the new table will will have 3 of rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 159
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2246 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2246.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2246.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2246.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2246.AddRow(new string[] {
                        "",
                        "[[rs(4).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2246.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2246.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2246.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2246.AddRow(new string[] {
                        "",
                        "[[rs(4).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2246.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2246.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2246.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2246.AddRow(new string[] {
                        "",
                        "[[rs(4).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2246.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "YES"});
#line 160
 testRunner.And("the debug inputs as", ((string)(null)), table2246, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2247 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2247.AddRow(new string[] {
                        "[[result]] = Success"});
#line 175
 testRunner.And("the debug output as", ((string)(null)), table2247, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with fire triggers disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithFireTriggersDisabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with fire triggers disabled", new string[] {
                        "SqlBulkInsert"});
#line 180
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2248 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2248.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2248.AddRow(new string[] {
                        "2",
                        "",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2248.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 182
 testRunner.Given("I have this data", ((string)(null)), table2248, "Given ");
#line 187
 testRunner.And("Fire triggers is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2249 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2249.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2249.AddRow(new string[] {
                        "2",
                        "",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2249.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 189
 testRunner.Then("the new table will have", ((string)(null)), table2249, "Then ");
#line 194
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2250 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2250.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2250.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2250.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2250.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2250.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2250.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2250.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2250.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2250.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2250.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO"});
#line 195
 testRunner.And("the debug inputs as", ((string)(null)), table2250, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2251 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2251.AddRow(new string[] {
                        "[[result]] = Success"});
#line 207
 testRunner.And("the debug output as", ((string)(null)), table2251, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table with fire triggers enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithFireTriggersEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table with fire triggers enabled", new string[] {
                        "SqlBulkInsert"});
#line 212
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2252 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2252.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2252.AddRow(new string[] {
                        "2",
                        "",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2252.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 214
 testRunner.Given("I have this data", ((string)(null)), table2252, "Given ");
#line 219
 testRunner.And("Fire triggers is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2253 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2253.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2253.AddRow(new string[] {
                        "2",
                        "XXXXXXXX",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2253.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 221
 testRunner.Then("the new table will have", ((string)(null)), table2253, "Then ");
#line 226
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2254 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2254.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2254.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2254.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2254.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2254.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] =",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2254.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2254.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2254.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2254.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2254.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 227
 testRunner.And("the debug inputs as", ((string)(null)), table2254, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2255 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2255.AddRow(new string[] {
                        "[[result]] = Success"});
#line 239
 testRunner.And("the debug output as", ((string)(null)), table2255, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table Batch size is 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableBatchSizeIs0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table Batch size is 0", new string[] {
                        "SqlBulkInsert"});
#line 244
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2256 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2256.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2256.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2256.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 245
 testRunner.Given("I have this data", ((string)(null)), table2256, "Given ");
#line 250
 testRunner.And("Batch size is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 252
 testRunner.Then("number of inserts is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 253
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2257 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2257.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2257.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2257.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2257.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2257.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2257.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2257.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2257.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2257.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2257.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "0",
                        "",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 254
 testRunner.And("the debug inputs as", ((string)(null)), table2257, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2258 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2258.AddRow(new string[] {
                        "[[result]] = Success"});
#line 266
 testRunner.And("the debug output as", ((string)(null)), table2258, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table Batch size is 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableBatchSizeIs1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table Batch size is 1", new string[] {
                        "SqlBulkInsert"});
#line 271
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2259 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2259.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2259.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2259.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 272
 testRunner.Given("I have this data", ((string)(null)), table2259, "Given ");
#line 277
 testRunner.And("Batch size is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 278
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 279
 testRunner.Then("number of inserts is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 280
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2260 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2260.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2260.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2260.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2260.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2260.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2260.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2260.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2260.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2260.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2260.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "1",
                        "",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 281
 testRunner.And("the debug inputs as", ((string)(null)), table2260, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table Batch size is 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableBatchSizeIs2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table Batch size is 2", new string[] {
                        "SqlBulkInsert"});
#line 295
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2261 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2261.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2261.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2261.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 296
 testRunner.Given("I have this data", ((string)(null)), table2261, "Given ");
#line 301
 testRunner.And("Batch size is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 302
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 303
 testRunner.Then("number of inserts is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 304
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2262 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2262.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2262.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2262.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2262.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2262.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2262.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2262.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2262.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2262.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2262.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "2",
                        "",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 305
 testRunner.And("the debug inputs as", ((string)(null)), table2262, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table timeout after 3 second")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DatabaseTimeout")]
        public virtual void ImportDataIntoTableTimeoutAfter3Second()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table timeout after 3 second", new string[] {
                        "DatabaseTimeout"});
#line 319
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2263 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2263.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2263.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2263.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 320
 testRunner.Given("I have this data", ((string)(null)), table2263, "Given ");
#line 325
 testRunner.And("Timeout in 3 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 327
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 328
 testRunner.And("number of inserts is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2264 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2264.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2264.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2264.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2264.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2264.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2264.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2264.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2264.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2264.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2264.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "3",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 329
 testRunner.And("the debug inputs as", ((string)(null)), table2264, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2265 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2265.AddRow(new string[] {
                        "[[result]] = Success"});
#line 341
 testRunner.And("the debug output as", ((string)(null)), table2265, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into Table timeout after 1 second")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DatabaseTimeout")]
        public virtual void ImportDataIntoTableTimeoutAfter1Second()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into Table timeout after 1 second", new string[] {
                        "DatabaseTimeout"});
#line 346
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2266 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
            table2266.AddRow(new string[] {
                        "1",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
            table2266.AddRow(new string[] {
                        "2",
                        "TestData",
                        "b89416b9-5b24-4f95-bd11-25d9db8160a2"});
            table2266.AddRow(new string[] {
                        "3",
                        "TestData",
                        "279c690e-3304-47a0-8bde-5d3ca2520a34"});
#line 348
 testRunner.Given("I have this data", ((string)(null)), table2266, "Given ");
#line 353
 testRunner.And("Timeout in 1 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 354
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 355
 testRunner.Then("number of inserts is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 356
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2267 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table2267.AddRow(new string[] {
                        "1",
                        "[[rs(1).Col1]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2267.AddRow(new string[] {
                        "",
                        "[[rs(2).Col1]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2267.AddRow(new string[] {
                        "",
                        "[[rs(3).Col1]] = 3",
                        "Col1",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2267.AddRow(new string[] {
                        "2",
                        "[[rs(1).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2267.AddRow(new string[] {
                        "",
                        "[[rs(2).Col2]] = TestData",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2267.AddRow(new string[] {
                        "",
                        "[[rs(3).Col2]] = TestData",
                        "Col2",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2267.AddRow(new string[] {
                        "3",
                        "[[rs(1).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2267.AddRow(new string[] {
                        "",
                        "[[rs(2).Col3]] = b89416b9-5b24-4f95-bd11-25d9db8160a2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2267.AddRow(new string[] {
                        "",
                        "[[rs(3).Col3]] = 279c690e-3304-47a0-8bde-5d3ca2520a34",
                        "Col3",
                        "bigint",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2267.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "1",
                        "NO",
                        "NO",
                        "YES",
                        "NO",
                        "NO",
                        "NO"});
#line 357
  testRunner.And("the debug inputs as", ((string)(null)), table2267, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2268 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2268.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 369
 testRunner.And("the debug output as", ((string)(null)), table2268, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Import data into table with blank data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlBulkInsert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute("EnableDocker.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SqlBulkInsert")]
        public virtual void ImportDataIntoTableWithBlankData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data into table with blank data", new string[] {
                        "SqlBulkInsert"});
#line 374
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2269 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
#line 375
 testRunner.Given("I have this data", ((string)(null)), table2269, "Given ");
#line 377
 testRunner.When("the tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2270 = new TechTalk.SpecFlow.Table(new string[] {
                        "Col1",
                        "Col2",
                        "Col3"});
#line 378
 testRunner.Then("the new table will have", ((string)(null)), table2270, "Then ");
#line 380
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
