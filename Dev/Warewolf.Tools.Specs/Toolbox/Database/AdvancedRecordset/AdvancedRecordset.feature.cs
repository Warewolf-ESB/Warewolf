// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.Database.AdvancedRecordset
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AdvancedRecordsetFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AdvancedRecordset.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AdvancedRecordset", "\tIn order to validate sql executing over a recordset\r\n\tAs a Warewolf developer\r\n\t" +
                    "I want to be what sql is supported", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "AdvancedRecordset")))
            {
                global::Warewolf.Tools.Specs.Toolbox.Database.AdvancedRecordset.AdvancedRecordsetFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAll()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table1.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table1.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table1.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
#line 7
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1, "Given ");
#line 12
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("I have the following sql statement \"SELECT * from person\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table2.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 15
 testRunner.Then("Outputs are as follows", ((string)(null)), table2, "Then ");
#line 18
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table3.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 19
 testRunner.And("Outputs are as follows", ((string)(null)), table3, "And ");
#line 22
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table4.AddRow(new string[] {
                        "TableCopy().name",
                        "Bob"});
            table4.AddRow(new string[] {
                        "TableCopy().name",
                        "Alice"});
            table4.AddRow(new string[] {
                        "TableCopy().name",
                        "Hatter"});
#line 23
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table4, "Then ");
#line 28
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table5.AddRow(new string[] {
                        "[[TableCopy(3).name]] = Hatter"});
#line 29
 testRunner.And("the debug output as", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select specific field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectSpecificField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select specific field", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table6.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table6.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table6.AddRow(new string[] {
                        "person(1).surname",
                        "Smith"});
            table6.AddRow(new string[] {
                        "person(2).surname",
                        "Jones"});
            table6.AddRow(new string[] {
                        "person(1).gender",
                        "Male"});
            table6.AddRow(new string[] {
                        "person(2).gender",
                        "Female"});
#line 34
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table6, "Given ");
#line 42
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("I have the following sql statement \"SELECT gender from person\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table7.AddRow(new string[] {
                        "gender",
                        "[[TableCopy().gender]]"});
#line 45
 testRunner.Then("Outputs are as follows", ((string)(null)), table7, "Then ");
#line 48
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table8.AddRow(new string[] {
                        "TableCopy().gender",
                        "Male"});
            table8.AddRow(new string[] {
                        "TableCopy().gender",
                        "Female"});
#line 50
 testRunner.Then("recordset \"[[TableCopy(*).gender]]\"  will be", ((string)(null)), table8, "Then ");
#line 54
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table9.AddRow(new string[] {
                        "[[TableCopy(2).gender]] = Female"});
#line 55
 testRunner.And("the debug output as", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select statement multiple fields but NOT all")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectStatementMultipleFieldsButNOTAll()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select statement multiple fields but NOT all", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table10.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table10.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table10.AddRow(new string[] {
                        "person(1).surname",
                        "Smith"});
            table10.AddRow(new string[] {
                        "person(2).surname",
                        "Jones"});
            table10.AddRow(new string[] {
                        "person(1).gender",
                        "Male"});
            table10.AddRow(new string[] {
                        "person(2).gender",
                        "Female"});
#line 60
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table10, "Given ");
#line 68
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.And("I have the following sql statement \"SELECT name, gender from person\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table11.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table11.AddRow(new string[] {
                        "gender",
                        "[[TableCopy().gender]]"});
#line 71
 testRunner.Then("Outputs are as follows", ((string)(null)), table11, "Then ");
#line 75
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table12.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
            table12.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
#line 77
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table12, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table13.AddRow(new string[] {
                        "TableCopy(1).gender",
                        "Male"});
            table13.AddRow(new string[] {
                        "TableCopy(2).gender",
                        "Female"});
#line 81
 testRunner.Then("recordset \"[[TableCopy(*).gender]]\"  will be", ((string)(null)), table13, "Then ");
#line 85
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table14.AddRow(new string[] {
                        "[[TableCopy(2).name]] = Alice"});
            table14.AddRow(new string[] {
                        "[[TableCopy(2).gender]] = Female"});
#line 86
 testRunner.And("the debug output as", ((string)(null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with Where condition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithWhereCondition()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with Where condition", ((string[])(null)));
#line 91
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table15.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table15.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table15.AddRow(new string[] {
                        "person(1).surname",
                        "Smith"});
            table15.AddRow(new string[] {
                        "person(2).surname",
                        "Jones"});
            table15.AddRow(new string[] {
                        "person(1).gender",
                        "Male"});
            table15.AddRow(new string[] {
                        "person(2).gender",
                        "Female"});
#line 92
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table15, "Given ");
#line 100
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.And("I have the following sql statement \"SELECT gender from person\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table16.AddRow(new string[] {
                        "gender",
                        "[[TableCopy().gender]]"});
#line 103
 testRunner.Then("Outputs are as follows", ((string)(null)), table16, "Then ");
#line 106
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
 testRunner.When("I update Recordset to \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
 testRunner.Then("Recordset is \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table17.AddRow(new string[] {
                        "gender",
                        "[[newPerson().gender]]"});
#line 109
 testRunner.And("Outputs are as follows", ((string)(null)), table17, "And ");
#line 112
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table18.AddRow(new string[] {
                        "newPerson().gender",
                        "Male"});
            table18.AddRow(new string[] {
                        "newPerson().gender",
                        "Female"});
#line 113
 testRunner.Then("recordset \"[[newPerson(*).gender]]\"  will be", ((string)(null)), table18, "Then ");
#line 117
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table19.AddRow(new string[] {
                        "[[newPerson(2).gender]] = Female"});
#line 118
 testRunner.And("the debug output as", ((string)(null)), table19, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select statement all fields Where condition is true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectStatementAllFieldsWhereConditionIsTrue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select statement all fields Where condition is true", ((string[])(null)));
#line 122
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table20.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table20.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table20.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table20.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table20.AddRow(new string[] {
                        "person(3).name",
                        "Kim"});
            table20.AddRow(new string[] {
                        "person(3).age",
                        "28"});
#line 123
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table20, "Given ");
#line 131
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
 testRunner.And("I have the following sql statement \"SELECT * from person where age = 30\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table21.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table21.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 134
 testRunner.Then("Outputs are as follows", ((string)(null)), table21, "Then ");
#line 138
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table22.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table22.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 139
 testRunner.And("Outputs are as follows", ((string)(null)), table22, "And ");
#line 143
 testRunner.When("I update Recordset to \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 144
 testRunner.Then("Recordset is \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table23.AddRow(new string[] {
                        "name",
                        "[[newPerson().name]]"});
            table23.AddRow(new string[] {
                        "age",
                        "[[newPerson().age]]"});
#line 145
 testRunner.And("Outputs are as follows", ((string)(null)), table23, "And ");
#line 149
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table24.AddRow(new string[] {
                        "newPerson().name",
                        "Alice"});
#line 150
 testRunner.Then("recordset \"[[newPerson(*).name]]\"  will be", ((string)(null)), table24, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table25.AddRow(new string[] {
                        "newPerson().age",
                        "30"});
#line 153
 testRunner.Then("recordset \"[[newPerson(*).age]]\"  will be", ((string)(null)), table25, "Then ");
#line 156
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table26.AddRow(new string[] {
                        "[[newPerson(1).name]] = Alice"});
            table26.AddRow(new string[] {
                        "[[newPerson(1).age]] = 30"});
#line 157
 testRunner.And("the debug output as", ((string)(null)), table26, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with Where condition as a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithWhereConditionAsAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with Where condition as a Scalar", ((string[])(null)));
#line 162
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table27.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table27.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table27.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table27.AddRow(new string[] {
                        "checkName",
                        "Alice"});
#line 163
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table27, "Given ");
#line 169
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table28.AddRow(new string[] {
                        "filName",
                        "[[checkName]]"});
#line 170
 testRunner.And("Declare variables as", ((string)(null)), table28, "And ");
#line 173
 testRunner.And("I have the following sql statement \"SELECT * from person where name = @filName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table29.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 175
 testRunner.Then("Outputs are as follows", ((string)(null)), table29, "Then ");
#line 178
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table30.AddRow(new string[] {
                        "TableCopy().name",
                        "Alice"});
#line 180
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table30, "Then ");
#line 183
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "filName"});
            table31.AddRow(new string[] {
                        "String",
                        "[[checkName]] = Alice"});
#line 184
 testRunner.And("the debug inputs as", ((string)(null)), table31, "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table32.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Alice"});
#line 187
 testRunner.And("the debug output as", ((string)(null)), table32, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select specific field With Where condition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectSpecificFieldWithWhereCondition()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select specific field With Where condition", ((string[])(null)));
#line 191
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table33.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table33.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table33.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table33.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table33.AddRow(new string[] {
                        "person(3).name",
                        "Kim"});
            table33.AddRow(new string[] {
                        "person(3).age",
                        "28"});
            table33.AddRow(new string[] {
                        "person(1).gender",
                        "Male"});
            table33.AddRow(new string[] {
                        "person(2).gender",
                        "Female"});
            table33.AddRow(new string[] {
                        "person(3).gender",
                        "Female"});
#line 192
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table33, "Given ");
#line 203
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 204
 testRunner.And("I have the following sql statement \"SELECT name from person where age = 30\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table34.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 206
 testRunner.Then("Outputs are as follows", ((string)(null)), table34, "Then ");
#line 209
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 210
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table35.AddRow(new string[] {
                        "TableCopy().name",
                        "Alice"});
#line 211
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table35, "Then ");
#line 214
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table36.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Alice"});
#line 215
 testRunner.And("the debug output as", ((string)(null)), table36, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select specific field with Where condition as Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectSpecificFieldWithWhereConditionAsScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select specific field with Where condition as Scalar", ((string[])(null)));
#line 219
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table37.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table37.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table37.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table37.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table37.AddRow(new string[] {
                        "person(3).name",
                        "Kim"});
            table37.AddRow(new string[] {
                        "person(3).age",
                        "28"});
            table37.AddRow(new string[] {
                        "person(1).gender",
                        "Male"});
            table37.AddRow(new string[] {
                        "person(2).gender",
                        "Female"});
            table37.AddRow(new string[] {
                        "person(3).gender",
                        "Female"});
            table37.AddRow(new string[] {
                        "checkAge",
                        "56"});
#line 220
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table37, "Given ");
#line 232
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table38.AddRow(new string[] {
                        "filAge",
                        "[[checkAge]]"});
#line 233
 testRunner.And("Declare variables as", ((string)(null)), table38, "And ");
#line 236
 testRunner.And("I have the following sql statement \"SELECT gender from person where age = @filAge" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 237
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table39.AddRow(new string[] {
                        "gender",
                        "[[TableCopy().gender]]"});
#line 238
 testRunner.Then("Outputs are as follows", ((string)(null)), table39, "Then ");
#line 241
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 242
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table40.AddRow(new string[] {
                        "TableCopy().gender",
                        "Male"});
#line 243
 testRunner.Then("recordset \"[[TableCopy(*).gender]]\"  will be", ((string)(null)), table40, "Then ");
#line 246
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table41.AddRow(new string[] {
                        "[[TableCopy(1).gender]] = Male"});
#line 247
 testRunner.And("the debug output as", ((string)(null)), table41, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select multiple fields with Where condition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectMultipleFieldsWithWhereCondition()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select multiple fields with Where condition", ((string[])(null)));
#line 251
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table42.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table42.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table42.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table42.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table42.AddRow(new string[] {
                        "person(3).name",
                        "Kim"});
            table42.AddRow(new string[] {
                        "person(3).age",
                        "28"});
            table42.AddRow(new string[] {
                        "person(1).gender",
                        "Male"});
            table42.AddRow(new string[] {
                        "person(2).gender",
                        "Female"});
            table42.AddRow(new string[] {
                        "person(3).gender",
                        "Female"});
#line 252
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table42, "Given ");
#line 263
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 264
 testRunner.And("I have the following sql statement \"SELECT name, gender from person where age = 5" +
                    "6\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 265
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table43.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table43.AddRow(new string[] {
                        "gender",
                        "[[TableCopy().gender]]"});
#line 266
 testRunner.Then("Outputs are as follows", ((string)(null)), table43, "Then ");
#line 270
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 271
 testRunner.When("I update Recordset to \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 272
 testRunner.Then("Recordset is \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table44.AddRow(new string[] {
                        "name",
                        "[[newPerson().name]]"});
            table44.AddRow(new string[] {
                        "gender",
                        "[[newPerson().gender]]"});
#line 273
 testRunner.And("Outputs are as follows", ((string)(null)), table44, "And ");
#line 277
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table45.AddRow(new string[] {
                        "newPerson().name",
                        "Bob"});
#line 278
 testRunner.Then("recordset \"[[newPerson(*).name]]\"  will be", ((string)(null)), table45, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table46.AddRow(new string[] {
                        "newPerson().gender",
                        "Male"});
#line 281
 testRunner.Then("recordset \"[[newPerson(*).gender]]\"  will be", ((string)(null)), table46, "Then ");
#line 284
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table47.AddRow(new string[] {
                        "[[newPerson(1).name]] = Bob"});
            table47.AddRow(new string[] {
                        "[[newPerson(1).gender]] = Male"});
#line 285
 testRunner.And("the debug output as", ((string)(null)), table47, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select multiple fields with Where condition as a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectMultipleFieldsWithWhereConditionAsAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select multiple fields with Where condition as a Scalar", ((string[])(null)));
#line 290
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table48.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table48.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table48.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table48.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table48.AddRow(new string[] {
                        "person(3).name",
                        "Kim"});
            table48.AddRow(new string[] {
                        "person(3).age",
                        "28"});
            table48.AddRow(new string[] {
                        "person(1).gender",
                        "Male"});
            table48.AddRow(new string[] {
                        "person(2).gender",
                        "Female"});
            table48.AddRow(new string[] {
                        "person(3).gender",
                        "Female"});
            table48.AddRow(new string[] {
                        "checkAge",
                        "28"});
#line 291
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table48, "Given ");
#line 303
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table49.AddRow(new string[] {
                        "filAge",
                        "[[checkAge]]"});
#line 304
 testRunner.And("Declare variables as", ((string)(null)), table49, "And ");
#line 307
 testRunner.And("I have the following sql statement \"SELECT name, gender from person where age = @" +
                    "filAge\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 308
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table50.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table50.AddRow(new string[] {
                        "gender",
                        "[[TableCopy().gender]]"});
#line 309
 testRunner.Then("Outputs are as follows", ((string)(null)), table50, "Then ");
#line 313
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 314
 testRunner.When("I update Recordset to \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 315
 testRunner.Then("Recordset is \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table51.AddRow(new string[] {
                        "name",
                        "[[newPerson().name]]"});
            table51.AddRow(new string[] {
                        "gender",
                        "[[newPerson().gender]]"});
#line 316
 testRunner.And("Outputs are as follows", ((string)(null)), table51, "And ");
#line 320
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table52.AddRow(new string[] {
                        "newPerson().name",
                        "Kim"});
#line 321
 testRunner.Then("recordset \"[[newPerson(*).name]]\"  will be", ((string)(null)), table52, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table53.AddRow(new string[] {
                        "newPerson().gender",
                        "Female"});
#line 324
 testRunner.Then("recordset \"[[newPerson(*).gender]]\"  will be", ((string)(null)), table53, "Then ");
#line 327
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table54.AddRow(new string[] {
                        "[[newPerson(1).name]] = Kim"});
            table54.AddRow(new string[] {
                        "[[newPerson(1).gender]] = Female"});
#line 328
 testRunner.And("the debug output as", ((string)(null)), table54, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With Condition Is not equal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithConditionIsNotEqual()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With Condition Is not equal", ((string[])(null)));
#line 333
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table55.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table55.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table55.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table55.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table55.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table55.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 334
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table55, "Given ");
#line 342
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 343
 testRunner.And("I have the following sql statement \"SELECT * from person where age != 19\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 344
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table56.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table56.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 345
 testRunner.Then("Outputs are as follows", ((string)(null)), table56, "Then ");
#line 349
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table57.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 350
 testRunner.And("Outputs are as follows", ((string)(null)), table57, "And ");
#line 353
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table58.AddRow(new string[] {
                        "TableCopy().name",
                        "Bob"});
            table58.AddRow(new string[] {
                        "TableCopy().name",
                        "Alice"});
#line 354
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table58, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table59.AddRow(new string[] {
                        "TableCopy().age",
                        "25"});
            table59.AddRow(new string[] {
                        "TableCopy().age",
                        "31"});
#line 358
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table59, "Then ");
#line 362
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table60.AddRow(new string[] {
                        "String"});
#line 363
 testRunner.And("the debug inputs as", ((string)(null)), table60, "And ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table61.AddRow(new string[] {
                        "[[TableCopy(2).name]] = Alice"});
            table61.AddRow(new string[] {
                        "[[TableCopy(2).age]] = 31"});
#line 366
 testRunner.And("the debug output as", ((string)(null)), table61, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With Condition Is not equal in a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithConditionIsNotEqualInAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With Condition Is not equal in a Scalar", ((string[])(null)));
#line 371
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table62.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table62.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table62.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table62.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table62.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table62.AddRow(new string[] {
                        "person(3).age",
                        "19"});
            table62.AddRow(new string[] {
                        "checkAge",
                        "19"});
#line 372
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table62, "Given ");
#line 381
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table63.AddRow(new string[] {
                        "filAge",
                        "[[checkAge]]"});
#line 382
 testRunner.And("Declare variables as", ((string)(null)), table63, "And ");
#line 385
 testRunner.And("I have the following sql statement \"SELECT * from person where age != @filAge\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 386
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table64.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table64.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 387
 testRunner.Then("Outputs are as follows", ((string)(null)), table64, "Then ");
#line 391
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table65.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 392
 testRunner.And("Outputs are as follows", ((string)(null)), table65, "And ");
#line 395
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table66.AddRow(new string[] {
                        "TableCopy().name",
                        "Bob"});
            table66.AddRow(new string[] {
                        "TableCopy().name",
                        "Alice"});
#line 396
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table66, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table67.AddRow(new string[] {
                        "TableCopy().age",
                        "25"});
            table67.AddRow(new string[] {
                        "TableCopy().age",
                        "31"});
#line 400
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table67, "Then ");
#line 404
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table68.AddRow(new string[] {
                        "[[TableCopy(2).name]] = Alice"});
            table68.AddRow(new string[] {
                        "[[TableCopy(2).age]] = 31"});
#line 405
 testRunner.And("the debug output as", ((string)(null)), table68, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select specific field With different field Condition Is not equal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectSpecificFieldWithDifferentFieldConditionIsNotEqual()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select specific field With different field Condition Is not equal", ((string[])(null)));
#line 410
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table69.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table69.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table69.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table69.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table69.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table69.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 411
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table69, "Given ");
#line 419
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 420
 testRunner.And("I have the following sql statement \"SELECT name from person where age != 19\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 421
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table70.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 422
 testRunner.Then("Outputs are as follows", ((string)(null)), table70, "Then ");
#line 425
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 426
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table71.AddRow(new string[] {
                        "TableCopy().name",
                        "Bob"});
            table71.AddRow(new string[] {
                        "TableCopy().name",
                        "Alice"});
#line 427
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table71, "Then ");
#line 431
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table72.AddRow(new string[] {
                        "String"});
#line 432
 testRunner.And("the debug inputs as", ((string)(null)), table72, "And ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table73.AddRow(new string[] {
                        "[[TableCopy(2).name]] = Alice"});
#line 435
 testRunner.And("the debug output as", ((string)(null)), table73, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select specific field With different field Condition Is not equal in a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectSpecificFieldWithDifferentFieldConditionIsNotEqualInAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select specific field With different field Condition Is not equal in a Scalar", ((string[])(null)));
#line 439
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table74.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table74.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table74.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table74.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table74.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table74.AddRow(new string[] {
                        "person(3).age",
                        "19"});
            table74.AddRow(new string[] {
                        "checkAge",
                        "19"});
#line 440
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table74, "Given ");
#line 449
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table75.AddRow(new string[] {
                        "filAge",
                        "[[checkAge]]"});
#line 450
 testRunner.And("Declare variables as", ((string)(null)), table75, "And ");
#line 453
 testRunner.And("I have the following sql statement \"SELECT name from person where age != @filAge\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 454
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table76.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 455
 testRunner.Then("Outputs are as follows", ((string)(null)), table76, "Then ");
#line 458
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 459
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table77.AddRow(new string[] {
                        "TableCopy().name",
                        "Bob"});
            table77.AddRow(new string[] {
                        "TableCopy().name",
                        "Alice"});
#line 460
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table77, "Then ");
#line 464
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table78.AddRow(new string[] {
                        "[[TableCopy(2).name]] = Alice"});
#line 465
 testRunner.And("the debug output as", ((string)(null)), table78, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select specific field Filetered by a different field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectSpecificFieldFileteredByADifferentField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select specific field Filetered by a different field", ((string[])(null)));
#line 469
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table79.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table79.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table79.AddRow(new string[] {
                        "person(3).name",
                        "Kim"});
            table79.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table79.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table79.AddRow(new string[] {
                        "person(3).age",
                        "28"});
            table79.AddRow(new string[] {
                        "person(1).gender",
                        "male"});
            table79.AddRow(new string[] {
                        "person(2).gender",
                        "female"});
            table79.AddRow(new string[] {
                        "person(3).gender",
                        "female"});
#line 470
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table79, "Given ");
#line 481
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 482
 testRunner.And("I have the following sql statement \"SELECT age from person where name = \'Kim\'\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 483
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table80.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 484
 testRunner.Then("Outputs are as follows", ((string)(null)), table80, "Then ");
#line 487
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 488
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table81.AddRow(new string[] {
                        "TableCopy(1).age",
                        "28"});
#line 489
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table81, "Then ");
#line 492
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table82.AddRow(new string[] {
                        "[[TableCopy(1).age]] = 28"});
#line 493
 testRunner.And("the debug output as", ((string)(null)), table82, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select specific field Filetered by a different field as a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectSpecificFieldFileteredByADifferentFieldAsAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select specific field Filetered by a different field as a Scalar", ((string[])(null)));
#line 497
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table83.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table83.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table83.AddRow(new string[] {
                        "person(3).name",
                        "Kim"});
            table83.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table83.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table83.AddRow(new string[] {
                        "person(3).age",
                        "28"});
            table83.AddRow(new string[] {
                        "person(1).gender",
                        "male"});
            table83.AddRow(new string[] {
                        "person(2).gender",
                        "female"});
            table83.AddRow(new string[] {
                        "person(3).gender",
                        "female"});
            table83.AddRow(new string[] {
                        "checkName",
                        "Kim"});
#line 498
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table83, "Given ");
#line 510
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table84.AddRow(new string[] {
                        "filName",
                        "[[checkName]]"});
#line 511
 testRunner.And("Declare variables as", ((string)(null)), table84, "And ");
#line 514
 testRunner.And("I have the following sql statement \"SELECT age from person where name = @filName\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 515
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table85.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 516
 testRunner.Then("Outputs are as follows", ((string)(null)), table85, "Then ");
#line 519
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 520
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table86.AddRow(new string[] {
                        "TableCopy(1).age",
                        "28"});
#line 521
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table86, "Then ");
#line 524
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table87.AddRow(new string[] {
                        "[[TableCopy(1).age]] = 28"});
#line 525
 testRunner.And("the debug output as", ((string)(null)), table87, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with like clause")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithLikeClause()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with like clause", ((string[])(null)));
#line 529
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table88.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table88.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table88.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
#line 530
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table88, "Given ");
#line 535
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 536
 testRunner.And("I have the following sql statement \"SELECT * from person where name like \'%tt%\'\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 537
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table89.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 538
 testRunner.Then("Outputs are as follows", ((string)(null)), table89, "Then ");
#line 541
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 542
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table90.AddRow(new string[] {
                        "TableCopy().name",
                        "Hatter"});
#line 543
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table90, "Then ");
#line 546
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table91.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Hatter"});
#line 547
 testRunner.And("the debug output as", ((string)(null)), table91, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with like clause in a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithLikeClauseInAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with like clause in a Scalar", ((string[])(null)));
#line 551
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table92.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table92.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table92.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table92.AddRow(new string[] {
                        "checkName",
                        "%tt%"});
#line 552
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table92, "Given ");
#line 558
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table93.AddRow(new string[] {
                        "filName",
                        "[[checkName]]"});
#line 559
 testRunner.And("Declare variables as", ((string)(null)), table93, "And ");
#line 562
 testRunner.And("I have the following sql statement \"SELECT * from person where name like @filName" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 563
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table94.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 564
 testRunner.Then("Outputs are as follows", ((string)(null)), table94, "Then ");
#line 567
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 568
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table95.AddRow(new string[] {
                        "TableCopy().name",
                        "Hatter"});
#line 569
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table95, "Then ");
#line 572
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table96.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Hatter"});
#line 573
 testRunner.And("the debug output as", ((string)(null)), table96, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with begin with clause")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithBeginWithClause()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with begin with clause", ((string[])(null)));
#line 577
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table97.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table97.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table97.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
#line 578
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table97, "Given ");
#line 583
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 584
 testRunner.And("I have the following sql statement \"SELECT * from person where name like \'B%\'\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 585
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table98.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 586
 testRunner.Then("Outputs are as follows", ((string)(null)), table98, "Then ");
#line 589
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 590
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table99.AddRow(new string[] {
                        "TableCopy().name",
                        "Bob"});
#line 591
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table99, "Then ");
#line 594
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table100.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Bob"});
#line 595
 testRunner.And("the debug output as", ((string)(null)), table100, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with begin with clause in a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithBeginWithClauseInAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with begin with clause in a Scalar", ((string[])(null)));
#line 599
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table101.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table101.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table101.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table101.AddRow(new string[] {
                        "checkName",
                        "B%"});
#line 600
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table101, "Given ");
#line 606
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table102.AddRow(new string[] {
                        "filName",
                        "[[checkName]]"});
#line 607
 testRunner.And("Declare variables as", ((string)(null)), table102, "And ");
#line 610
 testRunner.And("I have the following sql statement \"SELECT * from person where name like @filName" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 611
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table103.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 612
 testRunner.Then("Outputs are as follows", ((string)(null)), table103, "Then ");
#line 615
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 616
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table104.AddRow(new string[] {
                        "TableCopy().name",
                        "Bob"});
#line 617
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table104, "Then ");
#line 620
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table105.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Bob"});
#line 621
 testRunner.And("the debug output as", ((string)(null)), table105, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with end with clause")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithEndWithClause()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with end with clause", ((string[])(null)));
#line 625
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table106.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table106.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table106.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
#line 626
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table106, "Given ");
#line 631
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 632
 testRunner.And("I have the following sql statement \"SELECT * from person where name like \'%r\'\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 633
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table107.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 634
 testRunner.Then("Outputs are as follows", ((string)(null)), table107, "Then ");
#line 637
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 638
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table108.AddRow(new string[] {
                        "TableCopy().name",
                        "Hatter"});
#line 639
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table108, "Then ");
#line 642
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table109.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Hatter"});
#line 643
 testRunner.And("the debug output as", ((string)(null)), table109, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with end with clause in a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithEndWithClauseInAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with end with clause in a Scalar", ((string[])(null)));
#line 647
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table110.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table110.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table110.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table110.AddRow(new string[] {
                        "checkName",
                        "%r"});
#line 648
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table110, "Given ");
#line 654
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table111.AddRow(new string[] {
                        "filName",
                        "[[checkName]]"});
#line 655
 testRunner.And("Declare variables as", ((string)(null)), table111, "And ");
#line 658
 testRunner.And("I have the following sql statement \"SELECT * from person where name like @filName" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 659
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table112.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 660
 testRunner.Then("Outputs are as follows", ((string)(null)), table112, "Then ");
#line 663
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 664
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table113.AddRow(new string[] {
                        "TableCopy().name",
                        "Hatter"});
#line 665
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table113, "Then ");
#line 668
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table114.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Hatter"});
#line 669
 testRunner.And("the debug output as", ((string)(null)), table114, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with NOT like clause")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithNOTLikeClause()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with NOT like clause", ((string[])(null)));
#line 673
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table115.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table115.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table115.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
#line 674
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table115, "Given ");
#line 679
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 680
 testRunner.And("I have the following sql statement \"SELECT * from person where name not like \'%tt" +
                    "%\'\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 681
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table116.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 682
 testRunner.Then("Outputs are as follows", ((string)(null)), table116, "Then ");
#line 685
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 686
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table117.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
            table117.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
#line 687
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table117, "Then ");
#line 691
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table118.AddRow(new string[] {
                        "[[TableCopy(2).name]] = Alice"});
#line 692
 testRunner.And("the debug output as", ((string)(null)), table118, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with NOT like clause in a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithNOTLikeClauseInAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with NOT like clause in a Scalar", ((string[])(null)));
#line 696
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table119.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table119.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table119.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table119.AddRow(new string[] {
                        "checkName",
                        "%tt%"});
#line 697
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table119, "Given ");
#line 703
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table120.AddRow(new string[] {
                        "filName",
                        "[[checkName]]"});
#line 704
 testRunner.And("Declare variables as", ((string)(null)), table120, "And ");
#line 707
 testRunner.And("I have the following sql statement \"SELECT * from person where name not like @fil" +
                    "Name\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 708
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table121.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 709
 testRunner.Then("Outputs are as follows", ((string)(null)), table121, "Then ");
#line 712
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 713
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table122.AddRow(new string[] {
                        "TableCopy().name",
                        "Bob"});
            table122.AddRow(new string[] {
                        "TableCopy().name",
                        "Alice"});
#line 714
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table122, "Then ");
#line 718
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table123.AddRow(new string[] {
                        "[[TableCopy(2).name]] = Alice"});
#line 719
 testRunner.And("the debug output as", ((string)(null)), table123, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with NOT begin with clause")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithNOTBeginWithClause()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with NOT begin with clause", ((string[])(null)));
#line 723
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table124.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table124.AddRow(new string[] {
                        "person().name",
                        "Mandy"});
            table124.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
#line 724
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table124, "Given ");
#line 729
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 730
 testRunner.And("I have the following sql statement \"SELECT * from person where name not like \'B%\'" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 731
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table125.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 732
 testRunner.Then("Outputs are as follows", ((string)(null)), table125, "Then ");
#line 735
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 736
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table126.AddRow(new string[] {
                        "TableCopy().name",
                        "Mandy"});
            table126.AddRow(new string[] {
                        "TableCopy().name",
                        "Hatter"});
#line 737
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table126, "Then ");
#line 741
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table127.AddRow(new string[] {
                        "[[TableCopy(2).name]] = Hatter"});
#line 742
 testRunner.And("the debug output as", ((string)(null)), table127, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with NOT beggin with clause in a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithNOTBegginWithClauseInAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with NOT beggin with clause in a Scalar", ((string[])(null)));
#line 746
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table128.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table128.AddRow(new string[] {
                        "person().name",
                        "Mandy"});
            table128.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table128.AddRow(new string[] {
                        "checkName",
                        "B%"});
#line 747
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table128, "Given ");
#line 753
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table129.AddRow(new string[] {
                        "filName",
                        "[[checkName]]"});
#line 754
 testRunner.And("Declare variables as", ((string)(null)), table129, "And ");
#line 757
 testRunner.And("I have the following sql statement \"SELECT * from person where name not like @fil" +
                    "Name\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 758
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table130.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 759
 testRunner.Then("Outputs are as follows", ((string)(null)), table130, "Then ");
#line 762
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 763
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table131.AddRow(new string[] {
                        "TableCopy().name",
                        "Mandy"});
            table131.AddRow(new string[] {
                        "TableCopy().name",
                        "Hatter"});
#line 764
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table131, "Then ");
#line 768
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table132.AddRow(new string[] {
                        "[[TableCopy(2).name]] = Hatter"});
#line 769
 testRunner.And("the debug output as", ((string)(null)), table132, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with NOT end with clause")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithNOTEndWithClause()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with NOT end with clause", ((string[])(null)));
#line 773
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table133.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table133.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table133.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
#line 774
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table133, "Given ");
#line 779
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 780
 testRunner.And("I have the following sql statement \"SELECT * from person where name not like \'%e\'" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 781
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table134.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 782
 testRunner.Then("Outputs are as follows", ((string)(null)), table134, "Then ");
#line 785
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 786
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table135.AddRow(new string[] {
                        "TableCopy().name",
                        "Bob"});
            table135.AddRow(new string[] {
                        "TableCopy().name",
                        "Hatter"});
#line 787
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table135, "Then ");
#line 791
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table136.AddRow(new string[] {
                        "[[TableCopy(2).name]] = Hatter"});
#line 792
 testRunner.And("the debug output as", ((string)(null)), table136, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with NOT end with clause in a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithNOTEndWithClauseInAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with NOT end with clause in a Scalar", ((string[])(null)));
#line 796
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table137.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table137.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table137.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table137.AddRow(new string[] {
                        "checkName",
                        "%e"});
#line 797
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table137, "Given ");
#line 803
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table138.AddRow(new string[] {
                        "filName",
                        "[[checkName]]"});
#line 804
 testRunner.And("Declare variables as", ((string)(null)), table138, "And ");
#line 807
 testRunner.And("I have the following sql statement \"SELECT * from person where name not like @fil" +
                    "Name\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 808
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table139.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 809
 testRunner.Then("Outputs are as follows", ((string)(null)), table139, "Then ");
#line 812
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 813
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table140.AddRow(new string[] {
                        "TableCopy().name",
                        "Bob"});
            table140.AddRow(new string[] {
                        "TableCopy().name",
                        "Hatter"});
#line 814
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table140, "Then ");
#line 818
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table141.AddRow(new string[] {
                        "[[TableCopy(2).name]] = Hatter"});
#line 819
 testRunner.And("the debug output as", ((string)(null)), table141, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With Condition Is Not IN Range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithConditionIsNotINRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With Condition Is Not IN Range", ((string[])(null)));
#line 823
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table142.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table142.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table142.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table142.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table142.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table142.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 824
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table142, "Given ");
#line 832
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 833
 testRunner.And("I have the following sql statement \"SELECT * from person where age not in (25, 31" +
                    ")\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 834
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table143.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table143.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 835
 testRunner.Then("Outputs are as follows", ((string)(null)), table143, "Then ");
#line 839
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 840
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table144.AddRow(new string[] {
                        "String"});
#line 841
 testRunner.And("the debug inputs as", ((string)(null)), table144, "And ");
#line hidden
            TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table145.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Hatter"});
            table145.AddRow(new string[] {
                        "[[TableCopy(1).age]] = 19"});
#line 844
 testRunner.And("the debug output as", ((string)(null)), table145, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With Condition Is Not IN Range With Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithConditionIsNotINRangeWithScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With Condition Is Not IN Range With Scalar", ((string[])(null)));
#line 849
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table146.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table146.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table146.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table146.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table146.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table146.AddRow(new string[] {
                        "person(3).age",
                        "19"});
            table146.AddRow(new string[] {
                        "Range",
                        "25, 31"});
#line 850
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table146, "Given ");
#line 859
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table147.AddRow(new string[] {
                        "filRange",
                        "[[Range]]"});
#line 860
 testRunner.And("Declare variables as", ((string)(null)), table147, "And ");
#line 863
 testRunner.And("I have the following sql statement \"SELECT * from person where age not in (@filRa" +
                    "nge)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 864
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 865
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table148.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table148.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 866
 testRunner.And("Outputs are as follows", ((string)(null)), table148, "And ");
#line 870
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 871
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table149.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Hatter"});
            table149.AddRow(new string[] {
                        "[[TableCopy(1).age]] = 19"});
#line 872
 testRunner.And("the debug output as", ((string)(null)), table149, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With Condition Is IN Range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithConditionIsINRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With Condition Is IN Range", ((string[])(null)));
#line 877
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table150.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table150.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table150.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table150.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table150.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table150.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 878
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table150, "Given ");
#line 886
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 887
 testRunner.And("I have the following sql statement \"SELECT * from person where age in (25, 31)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 888
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table151.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table151.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 889
 testRunner.Then("Outputs are as follows", ((string)(null)), table151, "Then ");
#line 893
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 894
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table152.AddRow(new string[] {
                        "String"});
#line 895
 testRunner.And("the debug inputs as", ((string)(null)), table152, "And ");
#line hidden
            TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table153.AddRow(new string[] {
                        "[[TableCopy(2).name]] = Alice"});
            table153.AddRow(new string[] {
                        "[[TableCopy(2).age]] = 31"});
#line 898
 testRunner.And("the debug output as", ((string)(null)), table153, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With Condition Is IN Range With Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithConditionIsINRangeWithScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With Condition Is IN Range With Scalar", ((string[])(null)));
#line 903
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table154.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table154.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table154.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table154.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table154.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table154.AddRow(new string[] {
                        "person(3).age",
                        "19"});
            table154.AddRow(new string[] {
                        "Range",
                        "25, 31"});
#line 904
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table154, "Given ");
#line 913
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table155.AddRow(new string[] {
                        "filRange",
                        "[[Range]]"});
#line 914
 testRunner.And("Declare variables as", ((string)(null)), table155, "And ");
#line 917
 testRunner.And("I have the following sql statement \"SELECT * from person where age in (@filRange)" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 918
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table156.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table156.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 919
 testRunner.Then("Outputs are as follows", ((string)(null)), table156, "Then ");
#line 923
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 924
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table157.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
            table157.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
#line 925
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table157, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table158.AddRow(new string[] {
                        "TableCopy(1).age",
                        "25"});
            table158.AddRow(new string[] {
                        "TableCopy(2).age",
                        "31"});
#line 929
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table158, "Then ");
#line 933
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "filRange"});
            table159.AddRow(new string[] {
                        "String",
                        "[[Range]] = 25, 31"});
#line 934
 testRunner.And("the debug inputs as", ((string)(null)), table159, "And ");
#line hidden
            TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table160.AddRow(new string[] {
                        "[[TableCopy(2).name]] = Alice"});
            table160.AddRow(new string[] {
                        "[[TableCopy(2).age]] = 31"});
#line 937
 testRunner.And("the debug output as", ((string)(null)), table160, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with Inner select clause")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithInnerSelectClause()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with Inner select clause", ((string[])(null)));
#line 942
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table161.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table161.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table161.AddRow(new string[] {
                        "person(3).name",
                        "Kim"});
            table161.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table161.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table161.AddRow(new string[] {
                        "person(3).age",
                        "28"});
            table161.AddRow(new string[] {
                        "employee(1).name",
                        "Bob"});
            table161.AddRow(new string[] {
                        "employee(2).name",
                        "Alice"});
            table161.AddRow(new string[] {
                        "employee(3).name",
                        "Kim"});
            table161.AddRow(new string[] {
                        "employee(1).Position",
                        "Manager"});
            table161.AddRow(new string[] {
                        "employee(2).Position",
                        "Admin"});
            table161.AddRow(new string[] {
                        "employee(3).Position",
                        "Developer"});
            table161.AddRow(new string[] {
                        "employee(1).Salary",
                        "90000"});
            table161.AddRow(new string[] {
                        "employee(2).Salary",
                        "2000"});
            table161.AddRow(new string[] {
                        "employee(3).Salary",
                        "35000"});
#line 943
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table161, "Given ");
#line 960
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 961
 testRunner.And("I have the following sql statement \"SELECT * from person where name = (Select nam" +
                    "e from employee where salary = (select max(salary) as maxAge from employee))\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 962
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table162.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table162.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 963
 testRunner.Then("Outputs are as follows", ((string)(null)), table162, "Then ");
#line 967
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 968
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table163.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
#line 969
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table163, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table164.AddRow(new string[] {
                        "TableCopy(1).age",
                        "56"});
#line 972
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table164, "Then ");
#line 975
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table165.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Bob"});
            table165.AddRow(new string[] {
                        "[[TableCopy(1).age]] = 56"});
#line 976
 testRunner.And("the debug output as", ((string)(null)), table165, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With AND Condition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithANDCondition()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With AND Condition", ((string[])(null)));
#line 981
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table166.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table166.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table166.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table166.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table166.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table166.AddRow(new string[] {
                        "person(3).age",
                        "25"});
#line 982
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table166, "Given ");
#line 990
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 991
 testRunner.And("I have the following sql statement \"SELECT * from person where name = \'Alice\' And" +
                    " age = 31\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 992
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table167.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table167.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 993
 testRunner.Then("Outputs are as follows", ((string)(null)), table167, "Then ");
#line 997
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 998
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table168.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Alice"});
#line 999
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table168, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table169.AddRow(new string[] {
                        "TableCopy(1).age",
                        "31"});
#line 1002
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table169, "Then ");
#line 1005
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table170.AddRow(new string[] {
                        "String"});
#line 1006
 testRunner.And("the debug inputs as", ((string)(null)), table170, "And ");
#line hidden
            TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table171.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Alice"});
            table171.AddRow(new string[] {
                        "[[TableCopy(1).age]] = 31"});
#line 1009
 testRunner.And("the debug output as", ((string)(null)), table171, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With AND Condition in a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithANDConditionInAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With AND Condition in a Scalar", ((string[])(null)));
#line 1014
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table172.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table172.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table172.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table172.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table172.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table172.AddRow(new string[] {
                        "person(3).age",
                        "25"});
            table172.AddRow(new string[] {
                        "checkName",
                        "Alice"});
            table172.AddRow(new string[] {
                        "checkAge",
                        "31"});
#line 1015
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table172, "Given ");
#line 1025
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table173.AddRow(new string[] {
                        "filName",
                        "[[checkName]]"});
            table173.AddRow(new string[] {
                        "filAge",
                        "[[checkAge]]"});
#line 1026
 testRunner.And("Declare variables as", ((string)(null)), table173, "And ");
#line 1030
 testRunner.And("I have the following sql statement \"SELECT * from person where age = @filAge And " +
                    "name = @filName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1031
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table174.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table174.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 1032
 testRunner.Then("Outputs are as follows", ((string)(null)), table174, "Then ");
#line 1036
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1037
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table175.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Alice"});
#line 1038
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table175, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table176.AddRow(new string[] {
                        "TableCopy(1).age",
                        "31"});
#line 1041
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table176, "Then ");
#line 1044
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table177.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Alice"});
            table177.AddRow(new string[] {
                        "[[TableCopy(1).age]] = 31"});
#line 1045
 testRunner.And("the debug output as", ((string)(null)), table177, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With OR Condition on different fields")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithORConditionOnDifferentFields()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With OR Condition on different fields", ((string[])(null)));
#line 1050
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table178.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table178.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table178.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table178.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table178.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table178.AddRow(new string[] {
                        "person(3).age",
                        "25"});
#line 1051
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table178, "Given ");
#line 1059
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1060
 testRunner.And("I have the following sql statement \"SELECT * from person where name = \'Alice\' OR " +
                    "age = 25\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1061
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1062
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table179.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table179.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 1063
 testRunner.Then("Outputs are as follows", ((string)(null)), table179, "Then ");
#line 1067
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table180 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table180.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
            table180.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
            table180.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Hatter"});
#line 1068
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table180, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table181 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table181.AddRow(new string[] {
                        "TableCopy(1).age",
                        "25"});
            table181.AddRow(new string[] {
                        "TableCopy(2).age",
                        "31"});
            table181.AddRow(new string[] {
                        "TableCopy(3).age",
                        "25"});
#line 1073
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table181, "Then ");
#line 1078
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table182 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table182.AddRow(new string[] {
                        "[[TableCopy(3).name]] = Hatter"});
            table182.AddRow(new string[] {
                        "[[TableCopy(3).age]] = 25"});
#line 1079
 testRunner.And("the debug output as", ((string)(null)), table182, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With OR Condition on Different fields in a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithORConditionOnDifferentFieldsInAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With OR Condition on Different fields in a Scalar", ((string[])(null)));
#line 1084
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table183.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table183.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table183.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table183.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table183.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table183.AddRow(new string[] {
                        "person(3).age",
                        "25"});
            table183.AddRow(new string[] {
                        "checkName",
                        "Alice"});
            table183.AddRow(new string[] {
                        "checkAge",
                        "25"});
#line 1085
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table183, "Given ");
#line 1095
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table184.AddRow(new string[] {
                        "filName1",
                        "[[checkName]]"});
            table184.AddRow(new string[] {
                        "filAge",
                        "[[checkAge]]"});
#line 1096
 testRunner.And("Declare variables as", ((string)(null)), table184, "And ");
#line 1100
 testRunner.And("I have the following sql statement \"SELECT * from person where name = @filName1 O" +
                    "R age = @filAge\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1101
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                        "VariableName"});
            table185.AddRow(new string[] {
                        "filName1"});
            table185.AddRow(new string[] {
                        "filAge"});
#line 1102
 testRunner.Then("The declared Variables are", ((string)(null)), table185, "Then ");
#line 1106
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table186.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table186.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 1107
 testRunner.Then("Outputs are as follows", ((string)(null)), table186, "Then ");
#line 1111
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table187.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
            table187.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
            table187.AddRow(new string[] {
                        "TableCopy(3).name",
                        "Hatter"});
#line 1112
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table187, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table188.AddRow(new string[] {
                        "TableCopy(1).age",
                        "25"});
            table188.AddRow(new string[] {
                        "TableCopy(2).age",
                        "31"});
            table188.AddRow(new string[] {
                        "TableCopy(3).age",
                        "25"});
#line 1117
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table188, "Then ");
#line 1122
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table189.AddRow(new string[] {
                        "[[TableCopy(3).name]] = Hatter"});
            table189.AddRow(new string[] {
                        "[[TableCopy(3).age]] = 25"});
#line 1123
 testRunner.And("the debug output as", ((string)(null)), table189, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With OR Condition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithORCondition()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With OR Condition", ((string[])(null)));
#line 1128
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table190.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table190.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table190.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table190.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table190.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table190.AddRow(new string[] {
                        "person(3).age",
                        "25"});
#line 1129
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table190, "Given ");
#line 1137
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1138
 testRunner.And("I have the following sql statement \"SELECT * from person where name = \'Alice\' OR " +
                    "name = \'Bob\'\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1139
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1140
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table191.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table191.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 1141
 testRunner.Then("Outputs are as follows", ((string)(null)), table191, "Then ");
#line 1145
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table192.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
            table192.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
#line 1146
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table192, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table193.AddRow(new string[] {
                        "TableCopy(1).age",
                        "25"});
            table193.AddRow(new string[] {
                        "TableCopy(2).age",
                        "31"});
#line 1150
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table193, "Then ");
#line 1154
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table194.AddRow(new string[] {
                        "[[TableCopy(2).name]] = Alice"});
            table194.AddRow(new string[] {
                        "[[TableCopy(2).age]] = 31"});
#line 1155
 testRunner.And("the debug output as", ((string)(null)), table194, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With OR Condition in a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithORConditionInAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With OR Condition in a Scalar", ((string[])(null)));
#line 1160
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table195.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table195.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table195.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table195.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table195.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table195.AddRow(new string[] {
                        "person(3).age",
                        "25"});
            table195.AddRow(new string[] {
                        "checkName",
                        "Alice"});
            table195.AddRow(new string[] {
                        "checkName2",
                        "Bob"});
#line 1161
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table195, "Given ");
#line 1171
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table196.AddRow(new string[] {
                        "filName1",
                        "[[checkName]]"});
            table196.AddRow(new string[] {
                        "filName2",
                        "[[checkName2]]"});
#line 1172
 testRunner.And("Declare variables as", ((string)(null)), table196, "And ");
#line 1176
 testRunner.And("I have the following sql statement \"SELECT * from person where name = @filName1 O" +
                    "R name = @filName2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1177
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                        "VariableName"});
            table197.AddRow(new string[] {
                        "filName1"});
            table197.AddRow(new string[] {
                        "filName2"});
#line 1178
 testRunner.Then("The declared Variables are", ((string)(null)), table197, "Then ");
#line 1182
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table198.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table198.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 1183
 testRunner.Then("Outputs are as follows", ((string)(null)), table198, "Then ");
#line 1187
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table199.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
            table199.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
#line 1188
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table199, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table200 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table200.AddRow(new string[] {
                        "TableCopy(1).age",
                        "25"});
            table200.AddRow(new string[] {
                        "TableCopy(2).age",
                        "31"});
#line 1192
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table200, "Then ");
#line 1196
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table201 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table201.AddRow(new string[] {
                        "[[TableCopy(2).name]] = Alice"});
            table201.AddRow(new string[] {
                        "[[TableCopy(2).age]] = 31"});
#line 1197
 testRunner.And("the debug output as", ((string)(null)), table201, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with Alias and variable in where clause")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithAliasAndVariableInWhereClause()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with Alias and variable in where clause", ((string[])(null)));
#line 1202
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table202 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table202.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table202.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table202.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table202.AddRow(new string[] {
                        "checkName",
                        "Alice"});
#line 1203
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table202, "Given ");
#line 1209
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table203.AddRow(new string[] {
                        "filName",
                        "[[checkName]]"});
#line 1210
 testRunner.And("Declare variables as", ((string)(null)), table203, "And ");
#line 1213
 testRunner.And("I have the following sql statement \"SELECT * from person p where p.name = @filNam" +
                    "e\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1214
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table204.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 1215
 testRunner.Then("Outputs are as follows", ((string)(null)), table204, "Then ");
#line 1218
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1219
 testRunner.When("I update Recordset to \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1220
 testRunner.Then("Recordset is \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table205.AddRow(new string[] {
                        "name",
                        "[[newPerson().name]]"});
#line 1221
 testRunner.And("Outputs are as follows", ((string)(null)), table205, "And ");
#line 1224
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table206.AddRow(new string[] {
                        "newPerson().name",
                        "Alice"});
#line 1225
 testRunner.Then("recordset \"[[newPerson(*).name]]\"  will be", ((string)(null)), table206, "Then ");
#line 1228
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table207 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "filName"});
            table207.AddRow(new string[] {
                        "String",
                        "[[checkName]] = Alice"});
#line 1229
 testRunner.And("the debug inputs as", ((string)(null)), table207, "And ");
#line hidden
            TechTalk.SpecFlow.Table table208 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table208.AddRow(new string[] {
                        "[[newPerson(1).name]] = Alice"});
#line 1232
 testRunner.And("the debug output as", ((string)(null)), table208, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with Alias for function")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithAliasForFunction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with Alias for function", ((string[])(null)));
#line 1236
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table209 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table209.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table209.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table209.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table209.AddRow(new string[] {
                        "checkName",
                        "Alice"});
#line 1237
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table209, "Given ");
#line 1243
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1244
 testRunner.And("I have the following sql statement \"SELECT count(*) as numberOfPeople from person" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1245
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table210 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table210.AddRow(new string[] {
                        "numberOfPeople",
                        "[[TableCopy().numberOfPeople]]"});
#line 1246
 testRunner.Then("Outputs are as follows", ((string)(null)), table210, "Then ");
#line 1249
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1250
 testRunner.When("I update Recordset to \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1251
 testRunner.Then("Recordset is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table211 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table211.AddRow(new string[] {
                        "numberOfPeople",
                        "[[numberOfPeople]]"});
#line 1252
 testRunner.And("Outputs are as follows", ((string)(null)), table211, "And ");
#line 1255
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1256
 testRunner.Then("the result variable \"[[numberOfPeople]]\" will be \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1257
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table212 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table212.AddRow(new string[] {
                        "String"});
#line 1258
 testRunner.And("the debug inputs as", ((string)(null)), table212, "And ");
#line hidden
            TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table213.AddRow(new string[] {
                        "[[numberOfPeople]] = 3"});
#line 1261
 testRunner.And("the debug output as", ((string)(null)), table213, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with Alias non join")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithAliasNonJoin()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with Alias non join", ((string[])(null)));
#line 1265
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table214.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table214.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table214.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table214.AddRow(new string[] {
                        "child(1).name",
                        "Builder"});
            table214.AddRow(new string[] {
                        "child(1).parent",
                        "Bob"});
            table214.AddRow(new string[] {
                        "child(2).name",
                        "Wonderland"});
            table214.AddRow(new string[] {
                        "child(2).parent",
                        "Alice"});
            table214.AddRow(new string[] {
                        "child(3).name",
                        "Mad"});
            table214.AddRow(new string[] {
                        "child(3).parent",
                        "Hatter"});
#line 1266
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table214, "Given ");
#line 1277
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1278
 testRunner.And("I have the following sql statement \"Select p.name as ParentName, c.name as ChildN" +
                    "ame from person AS p, child AS c WHERE p.Name = c.parent;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1279
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table215 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table215.AddRow(new string[] {
                        "ParentName",
                        "[[TableCopy().ParentName]]"});
            table215.AddRow(new string[] {
                        "ChildName",
                        "[[TableCopy().ChildName]]"});
#line 1280
 testRunner.Then("Outputs are as follows", ((string)(null)), table215, "Then ");
#line 1284
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1285
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table216 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table216.AddRow(new string[] {
                        "TableCopy().ParentName",
                        "Bob"});
            table216.AddRow(new string[] {
                        "TableCopy().ParentName",
                        "Alice"});
            table216.AddRow(new string[] {
                        "TableCopy().ParentName",
                        "Hatter"});
#line 1286
 testRunner.Then("recordset \"[[TableCopy(*).ParentName]]\"  will be", ((string)(null)), table216, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table217 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table217.AddRow(new string[] {
                        "TableCopy().ChildName",
                        "Builder"});
            table217.AddRow(new string[] {
                        "TableCopy().ChildName",
                        "Wonderland"});
            table217.AddRow(new string[] {
                        "TableCopy().ChildName",
                        "Mad"});
#line 1291
 testRunner.Then("recordset \"[[TableCopy(*).ChildName]]\"  will be", ((string)(null)), table217, "Then ");
#line 1296
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table218.AddRow(new string[] {
                        "String"});
#line 1297
 testRunner.And("the debug inputs as", ((string)(null)), table218, "And ");
#line hidden
            TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table219.AddRow(new string[] {
                        "[[TableCopy(3).ParentName]] = Hatter"});
            table219.AddRow(new string[] {
                        "[[TableCopy(3).ChildName]] = Mad"});
#line 1300
 testRunner.And("the debug output as", ((string)(null)), table219, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With Condition Age Is Greater Than")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithConditionAgeIsGreaterThan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With Condition Age Is Greater Than", ((string[])(null)));
#line 1305
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table220.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table220.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table220.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table220.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table220.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table220.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 1306
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table220, "Given ");
#line 1314
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table221 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table221.AddRow(new string[] {
                        "inAge",
                        "[[checkAge]]"});
#line 1315
 testRunner.And("Declare variables as", ((string)(null)), table221, "And ");
#line 1318
 testRunner.And("I have the following sql statement \"SELECT * from person where age > 30\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1319
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table222.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table222.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 1320
 testRunner.Then("Outputs are as follows", ((string)(null)), table222, "Then ");
#line 1324
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table223 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table223.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 1325
 testRunner.And("Outputs are as follows", ((string)(null)), table223, "And ");
#line 1328
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table224 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table224.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
#line 1329
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table224, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table225 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table225.AddRow(new string[] {
                        "TableCopy(2).age",
                        "31"});
#line 1332
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table225, "Then ");
#line 1335
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table226 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table226.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Alice"});
            table226.AddRow(new string[] {
                        "[[TableCopy(1).age]] = 31"});
#line 1336
 testRunner.And("the debug output as", ((string)(null)), table226, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With Condition Age Is Greater Than in a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithConditionAgeIsGreaterThanInAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With Condition Age Is Greater Than in a Scalar", ((string[])(null)));
#line 1341
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table227 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table227.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table227.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table227.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table227.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table227.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table227.AddRow(new string[] {
                        "person(3).age",
                        "19"});
            table227.AddRow(new string[] {
                        "checkAge",
                        "30"});
#line 1342
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table227, "Given ");
#line 1351
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table228.AddRow(new string[] {
                        "inAge",
                        "[[checkAge]]"});
#line 1352
 testRunner.And("Declare variables as", ((string)(null)), table228, "And ");
#line 1355
 testRunner.And("I have the following sql statement \"SELECT * from person where age > @inAge\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1356
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table229.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table229.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 1357
 testRunner.Then("Outputs are as follows", ((string)(null)), table229, "Then ");
#line 1361
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table230.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 1362
 testRunner.And("Outputs are as follows", ((string)(null)), table230, "And ");
#line 1365
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table231 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table231.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
#line 1366
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table231, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table232 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table232.AddRow(new string[] {
                        "TableCopy(2).age",
                        "31"});
#line 1369
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table232, "Then ");
#line 1372
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table233 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table233.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Alice"});
            table233.AddRow(new string[] {
                        "[[TableCopy(1).age]] = 31"});
#line 1373
 testRunner.And("the debug output as", ((string)(null)), table233, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With Condition Age Is Less Than")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithConditionAgeIsLessThan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With Condition Age Is Less Than", ((string[])(null)));
#line 1378
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table234 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table234.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table234.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table234.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table234.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table234.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table234.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 1379
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table234, "Given ");
#line 1387
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1388
 testRunner.And("I have the following sql statement \"SELECT * from person where age < 25\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1389
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table235 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table235.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table235.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 1390
 testRunner.Then("Outputs are as follows", ((string)(null)), table235, "Then ");
#line 1394
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table236 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table236.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 1395
 testRunner.And("Outputs are as follows", ((string)(null)), table236, "And ");
#line 1398
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1399
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table237 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table237.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Hatter"});
            table237.AddRow(new string[] {
                        "[[TableCopy(1).age]] = 19"});
#line 1400
 testRunner.And("the debug output as", ((string)(null)), table237, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With Condition Age Is Less Than in a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithConditionAgeIsLessThanInAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With Condition Age Is Less Than in a Scalar", ((string[])(null)));
#line 1405
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table238 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table238.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table238.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table238.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table238.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table238.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table238.AddRow(new string[] {
                        "person(3).age",
                        "19"});
            table238.AddRow(new string[] {
                        "checkAge",
                        "25"});
#line 1406
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table238, "Given ");
#line 1415
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table239 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table239.AddRow(new string[] {
                        "inAge",
                        "[[checkAge]]"});
#line 1416
 testRunner.And("Declare variables as", ((string)(null)), table239, "And ");
#line 1419
 testRunner.And("I have the following sql statement \"SELECT * from person where age < @inAge\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1420
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table240 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table240.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table240.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 1421
 testRunner.Then("Outputs are as follows", ((string)(null)), table240, "Then ");
#line 1425
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table241 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table241.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 1426
 testRunner.And("Outputs are as follows", ((string)(null)), table241, "And ");
#line 1429
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1430
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table242 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table242.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Hatter"});
            table242.AddRow(new string[] {
                        "[[TableCopy(1).age]] = 19"});
#line 1431
 testRunner.And("the debug output as", ((string)(null)), table242, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With Condition Age Is Between")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithConditionAgeIsBetween()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With Condition Age Is Between", ((string[])(null)));
#line 1436
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table243.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table243.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table243.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table243.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table243.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table243.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 1437
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table243, "Given ");
#line 1445
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1446
 testRunner.And("I have the following sql statement \"SELECT name from person where age between 20 " +
                    "and 30\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1447
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table244 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table244.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 1448
 testRunner.Then("Outputs are as follows", ((string)(null)), table244, "Then ");
#line 1451
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table245 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table245.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 1452
 testRunner.And("Outputs are as follows", ((string)(null)), table245, "And ");
#line 1455
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table246 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table246.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
#line 1456
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table246, "Then ");
#line 1459
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table247 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table247.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Bob"});
#line 1460
 testRunner.And("the debug output as", ((string)(null)), table247, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With Condition Age Is Between in a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithConditionAgeIsBetweenInAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With Condition Age Is Between in a Scalar", ((string[])(null)));
#line 1464
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table248.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table248.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table248.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table248.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table248.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table248.AddRow(new string[] {
                        "person(3).age",
                        "19"});
            table248.AddRow(new string[] {
                        "minAge",
                        "20"});
            table248.AddRow(new string[] {
                        "maxAge",
                        "30"});
#line 1465
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table248, "Given ");
#line 1475
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table249.AddRow(new string[] {
                        "inMinAge",
                        "[[minAge]]"});
            table249.AddRow(new string[] {
                        "inMaxAge",
                        "[[maxAge]]"});
#line 1476
 testRunner.And("Declare variables as", ((string)(null)), table249, "And ");
#line 1480
 testRunner.And("I have the following sql statement \"SELECT name from person where age between @in" +
                    "MinAge and @inMaxAge\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1481
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table250.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 1482
 testRunner.Then("Outputs are as follows", ((string)(null)), table250, "Then ");
#line 1485
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table251.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 1486
 testRunner.And("Outputs are as follows", ((string)(null)), table251, "And ");
#line 1489
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table252.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
#line 1490
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table252, "Then ");
#line 1493
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table253.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Bob"});
#line 1494
 testRunner.And("the debug output as", ((string)(null)), table253, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With Condition Age Is NOT IN Range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithConditionAgeIsNOTINRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With Condition Age Is NOT IN Range", ((string[])(null)));
#line 1498
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table254.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table254.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table254.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table254.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table254.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table254.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 1499
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table254, "Given ");
#line 1507
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1508
 testRunner.And("I have the following sql statement \"SELECT * from person where age NOT in (25,31)" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1509
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table255.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table255.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 1510
 testRunner.Then("Outputs are as follows", ((string)(null)), table255, "Then ");
#line 1514
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1515
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table256.AddRow(new string[] {
                        "TableCopy(3).name",
                        "Hatter"});
#line 1516
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table256, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table257.AddRow(new string[] {
                        "TableCopy(3).age",
                        "19"});
#line 1519
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table257, "Then ");
#line 1522
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table258.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Hatter"});
            table258.AddRow(new string[] {
                        "[[TableCopy(1).age]] = 19"});
#line 1523
 testRunner.And("the debug output as", ((string)(null)), table258, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all With Condition Age Is NOT IN Range in a Scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithConditionAgeIsNOTINRangeInAScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all With Condition Age Is NOT IN Range in a Scalar", ((string[])(null)));
#line 1528
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table259.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table259.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table259.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table259.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table259.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table259.AddRow(new string[] {
                        "person(3).age",
                        "19"});
            table259.AddRow(new string[] {
                        "minAge",
                        "25"});
            table259.AddRow(new string[] {
                        "maxAge",
                        "31"});
#line 1529
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table259, "Given ");
#line 1539
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table260.AddRow(new string[] {
                        "inMinAge",
                        "[[minAge]]"});
            table260.AddRow(new string[] {
                        "inMaxAge",
                        "[[maxAge]]"});
#line 1540
 testRunner.And("Declare variables as", ((string)(null)), table260, "And ");
#line 1544
 testRunner.And("I have the following sql statement \"SELECT * from person where age NOT in (@inMin" +
                    "Age, @inMaxAge)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1545
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table261.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table261.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 1546
 testRunner.Then("Outputs are as follows", ((string)(null)), table261, "Then ");
#line 1550
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1551
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table262.AddRow(new string[] {
                        "TableCopy(3).name",
                        "Hatter"});
#line 1552
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table262, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table263.AddRow(new string[] {
                        "TableCopy(3).age",
                        "19"});
#line 1555
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table263, "Then ");
#line 1558
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table264.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Hatter"});
            table264.AddRow(new string[] {
                        "[[TableCopy(1).age]] = 19"});
#line 1559
 testRunner.And("the debug output as", ((string)(null)), table264, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with Orderby Age asc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithOrderbyAgeAsc()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with Orderby Age asc", ((string[])(null)));
#line 1564
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table265.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table265.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table265.AddRow(new string[] {
                        "person(3).name",
                        "Kim"});
            table265.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table265.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table265.AddRow(new string[] {
                        "person(3).age",
                        "28"});
#line 1565
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table265, "Given ");
#line 1573
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1574
 testRunner.And("I have the following sql statement \"SELECT * from person order by age\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1575
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table266 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table266.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table266.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table266.AddRow(new string[] {
                        "person(3).name",
                        "Kim"});
#line 1576
 testRunner.Then("recordset \"[[person(*).name]]\"  will be", ((string)(null)), table266, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table267 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table267.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table267.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table267.AddRow(new string[] {
                        "person(3).age",
                        "28"});
#line 1581
 testRunner.Then("recordset \"[[person(*).age]]\"  will be", ((string)(null)), table267, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table268 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table268.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table268.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 1586
 testRunner.Then("Outputs are as follows", ((string)(null)), table268, "Then ");
#line 1590
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1591
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table269 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table269.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Kim"});
            table269.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
            table269.AddRow(new string[] {
                        "TableCopy(3).name",
                        "Bob"});
#line 1592
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table269, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table270 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table270.AddRow(new string[] {
                        "TableCopy(1).age",
                        "28"});
            table270.AddRow(new string[] {
                        "TableCopy(2).age",
                        "30"});
            table270.AddRow(new string[] {
                        "TableCopy(3).age",
                        "56"});
#line 1597
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table270, "Then ");
#line 1602
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table271 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table271.AddRow(new string[] {
                        "[[TableCopy(3).name]] = Bob"});
            table271.AddRow(new string[] {
                        "[[TableCopy(3).age]] = 56"});
#line 1603
 testRunner.And("the debug output as", ((string)(null)), table271, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with Orderby Age desc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithOrderbyAgeDesc()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with Orderby Age desc", ((string[])(null)));
#line 1608
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table272 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table272.AddRow(new string[] {
                        "person(1).name",
                        "Alice"});
            table272.AddRow(new string[] {
                        "person(2).name",
                        "Bob"});
            table272.AddRow(new string[] {
                        "person(3).name",
                        "Kim"});
            table272.AddRow(new string[] {
                        "person(1).age",
                        "30"});
            table272.AddRow(new string[] {
                        "person(2).age",
                        "56"});
            table272.AddRow(new string[] {
                        "person(3).age",
                        "28"});
#line 1609
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table272, "Given ");
#line 1617
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1618
 testRunner.And("I have the following sql statement \"SELECT * from person order by age desc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1619
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table273 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table273.AddRow(new string[] {
                        "person(1).name",
                        "Alice"});
            table273.AddRow(new string[] {
                        "person(2).name",
                        "Bob"});
            table273.AddRow(new string[] {
                        "person(3).name",
                        "Kim"});
#line 1620
 testRunner.Then("recordset \"[[person(*).name]]\"  will be", ((string)(null)), table273, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table274 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table274.AddRow(new string[] {
                        "person(1).age",
                        "30"});
            table274.AddRow(new string[] {
                        "person(2).age",
                        "56"});
            table274.AddRow(new string[] {
                        "person(3).age",
                        "28"});
#line 1625
 testRunner.Then("recordset \"[[person(*).age]]\"  will be", ((string)(null)), table274, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table275 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table275.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table275.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 1630
 testRunner.Then("Outputs are as follows", ((string)(null)), table275, "Then ");
#line 1634
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1635
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table276 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table276.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
            table276.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
            table276.AddRow(new string[] {
                        "TableCopy(3).name",
                        "Kim"});
#line 1636
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table276, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table277 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table277.AddRow(new string[] {
                        "TableCopy(1).age",
                        "56"});
            table277.AddRow(new string[] {
                        "TableCopy(2).age",
                        "30"});
            table277.AddRow(new string[] {
                        "TableCopy(3).age",
                        "28"});
#line 1641
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table277, "Then ");
#line 1646
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table278 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table278.AddRow(new string[] {
                        "[[TableCopy(3).name]] = Kim"});
            table278.AddRow(new string[] {
                        "[[TableCopy(3).age]] = 28"});
#line 1647
 testRunner.And("the debug output as", ((string)(null)), table278, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with Orderby Age then by age desc and salary asc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithOrderbyAgeThenByAgeDescAndSalaryAsc()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with Orderby Age then by age desc and salary asc", ((string[])(null)));
#line 1652
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table279 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table279.AddRow(new string[] {
                        "person(1).name",
                        "A"});
            table279.AddRow(new string[] {
                        "person(2).name",
                        "B"});
            table279.AddRow(new string[] {
                        "person(3).name",
                        "C"});
            table279.AddRow(new string[] {
                        "person(4).name",
                        "D"});
            table279.AddRow(new string[] {
                        "person(5).name",
                        "E"});
            table279.AddRow(new string[] {
                        "person(6).name",
                        "F"});
            table279.AddRow(new string[] {
                        "person(7).name",
                        "G"});
            table279.AddRow(new string[] {
                        "person(8).name",
                        "H"});
            table279.AddRow(new string[] {
                        "person(9).name",
                        "I"});
            table279.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table279.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table279.AddRow(new string[] {
                        "person(3).age",
                        "28"});
            table279.AddRow(new string[] {
                        "person(4).age",
                        "56"});
            table279.AddRow(new string[] {
                        "person(5).age",
                        "30"});
            table279.AddRow(new string[] {
                        "person(6).age",
                        "56"});
            table279.AddRow(new string[] {
                        "person(7).age",
                        "28"});
            table279.AddRow(new string[] {
                        "person(8).age",
                        "28"});
            table279.AddRow(new string[] {
                        "person(9).age",
                        "29"});
            table279.AddRow(new string[] {
                        "person(1).salary",
                        "4000"});
            table279.AddRow(new string[] {
                        "person(2).salary",
                        "4000"});
            table279.AddRow(new string[] {
                        "person(3).salary",
                        "3500"});
            table279.AddRow(new string[] {
                        "person(4).salary",
                        "3500"});
            table279.AddRow(new string[] {
                        "person(5).salary",
                        "2000"});
            table279.AddRow(new string[] {
                        "person(6).salary",
                        "5500"});
            table279.AddRow(new string[] {
                        "person(7).salary",
                        "1500"});
            table279.AddRow(new string[] {
                        "person(8).salary",
                        "7500"});
            table279.AddRow(new string[] {
                        "person(9).salary",
                        "3500"});
#line 1653
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table279, "Given ");
#line 1682
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1683
 testRunner.And("I have the following sql statement \"SELECT * from person order by age desc, salar" +
                    "y asc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1684
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table280 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table280.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table280.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table280.AddRow(new string[] {
                        "person(3).age",
                        "28"});
            table280.AddRow(new string[] {
                        "person(4).age",
                        "56"});
            table280.AddRow(new string[] {
                        "person(5).age",
                        "30"});
            table280.AddRow(new string[] {
                        "person(6).age",
                        "56"});
            table280.AddRow(new string[] {
                        "person(7).age",
                        "28"});
            table280.AddRow(new string[] {
                        "person(8).age",
                        "28"});
            table280.AddRow(new string[] {
                        "person(9).age",
                        "29"});
#line 1685
 testRunner.Then("recordset \"[[person(*).age]]\"  will be", ((string)(null)), table280, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table281 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table281.AddRow(new string[] {
                        "person(1).salary",
                        "4000"});
            table281.AddRow(new string[] {
                        "person(2).salary",
                        "4000"});
            table281.AddRow(new string[] {
                        "person(3).salary",
                        "3500"});
            table281.AddRow(new string[] {
                        "person(4).salary",
                        "3500"});
            table281.AddRow(new string[] {
                        "person(5).salary",
                        "2000"});
            table281.AddRow(new string[] {
                        "person(6).salary",
                        "5500"});
            table281.AddRow(new string[] {
                        "person(7).salary",
                        "1500"});
            table281.AddRow(new string[] {
                        "person(8).salary",
                        "7500"});
            table281.AddRow(new string[] {
                        "person(9).salary",
                        "3500"});
#line 1696
 testRunner.Then("recordset \"[[person(*).salary]]\"  will be", ((string)(null)), table281, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table282 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table282.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table282.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
            table282.AddRow(new string[] {
                        "salary",
                        "[[TableCopy().salary]]"});
#line 1707
 testRunner.Then("Outputs are as follows", ((string)(null)), table282, "Then ");
#line 1712
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1713
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table283 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table283.AddRow(new string[] {
                        "TableCopy(1).name",
                        "D"});
            table283.AddRow(new string[] {
                        "TableCopy(2).name",
                        "A"});
            table283.AddRow(new string[] {
                        "TableCopy(3).name",
                        "F"});
            table283.AddRow(new string[] {
                        "TableCopy(4).name",
                        "E"});
            table283.AddRow(new string[] {
                        "TableCopy(5).name",
                        "B"});
            table283.AddRow(new string[] {
                        "TableCopy(6).name",
                        "I"});
            table283.AddRow(new string[] {
                        "TableCopy(7).name",
                        "G"});
            table283.AddRow(new string[] {
                        "TableCopy(8).name",
                        "C"});
            table283.AddRow(new string[] {
                        "TableCopy(9).name",
                        "H"});
#line 1714
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table283, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table284 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table284.AddRow(new string[] {
                        "TableCopy(1).age",
                        "56"});
            table284.AddRow(new string[] {
                        "TableCopy(2).age",
                        "56"});
            table284.AddRow(new string[] {
                        "TableCopy(3).age",
                        "56"});
            table284.AddRow(new string[] {
                        "TableCopy(4).age",
                        "30"});
            table284.AddRow(new string[] {
                        "TableCopy(5).age",
                        "30"});
            table284.AddRow(new string[] {
                        "TableCopy(6).age",
                        "29"});
            table284.AddRow(new string[] {
                        "TableCopy(7).age",
                        "28"});
            table284.AddRow(new string[] {
                        "TableCopy(8).age",
                        "28"});
            table284.AddRow(new string[] {
                        "TableCopy(9).age",
                        "28"});
#line 1725
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table284, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table285 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table285.AddRow(new string[] {
                        "TableCopy(1).salary",
                        "3500"});
            table285.AddRow(new string[] {
                        "TableCopy(2).salary",
                        "4000"});
            table285.AddRow(new string[] {
                        "TableCopy(3).salary",
                        "5500"});
            table285.AddRow(new string[] {
                        "TableCopy(4).salary",
                        "2000"});
            table285.AddRow(new string[] {
                        "TableCopy(5).salary",
                        "4000"});
            table285.AddRow(new string[] {
                        "TableCopy(6).salary",
                        "3500"});
            table285.AddRow(new string[] {
                        "TableCopy(7).salary",
                        "1500"});
            table285.AddRow(new string[] {
                        "TableCopy(8).salary",
                        "3500"});
            table285.AddRow(new string[] {
                        "TableCopy(9).salary",
                        "7500"});
#line 1736
 testRunner.Then("recordset \"[[TableCopy(*).salary]]\"  will be", ((string)(null)), table285, "Then ");
#line 1747
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table286 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table286.AddRow(new string[] {
                        "[[TableCopy(9).name]] = H"});
            table286.AddRow(new string[] {
                        "[[TableCopy(9).age]] = 28"});
            table286.AddRow(new string[] {
                        "[[TableCopy(9).salary]] = 7500"});
#line 1748
 testRunner.And("the debug output as", ((string)(null)), table286, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with Orderby Age then by salary asc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithOrderbyAgeThenBySalaryAsc()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with Orderby Age then by salary asc", ((string[])(null)));
#line 1754
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table287 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table287.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table287.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table287.AddRow(new string[] {
                        "person(3).age",
                        "28"});
            table287.AddRow(new string[] {
                        "person(4).age",
                        "56"});
            table287.AddRow(new string[] {
                        "person(5).age",
                        "30"});
            table287.AddRow(new string[] {
                        "person(6).age",
                        "56"});
            table287.AddRow(new string[] {
                        "person(7).age",
                        "28"});
            table287.AddRow(new string[] {
                        "person(8).age",
                        "28"});
            table287.AddRow(new string[] {
                        "person(9).age",
                        "29"});
            table287.AddRow(new string[] {
                        "person(1).salary",
                        "4000"});
            table287.AddRow(new string[] {
                        "person(2).salary",
                        "4000"});
            table287.AddRow(new string[] {
                        "person(3).salary",
                        "3500"});
            table287.AddRow(new string[] {
                        "person(4).salary",
                        "3500"});
            table287.AddRow(new string[] {
                        "person(5).salary",
                        "2000"});
            table287.AddRow(new string[] {
                        "person(6).salary",
                        "5500"});
            table287.AddRow(new string[] {
                        "person(7).salary",
                        "1500"});
            table287.AddRow(new string[] {
                        "person(8).salary",
                        "7500"});
            table287.AddRow(new string[] {
                        "person(9).salary",
                        "3500"});
#line 1755
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table287, "Given ");
#line 1775
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1776
 testRunner.And("I have the following sql statement \"SELECT * from person order by age, salary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1777
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table288 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table288.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table288.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table288.AddRow(new string[] {
                        "person(3).age",
                        "28"});
            table288.AddRow(new string[] {
                        "person(4).age",
                        "56"});
            table288.AddRow(new string[] {
                        "person(5).age",
                        "30"});
            table288.AddRow(new string[] {
                        "person(6).age",
                        "56"});
            table288.AddRow(new string[] {
                        "person(7).age",
                        "28"});
            table288.AddRow(new string[] {
                        "person(8).age",
                        "28"});
            table288.AddRow(new string[] {
                        "person(9).age",
                        "29"});
#line 1778
 testRunner.Then("recordset \"[[person(*).age]]\"  will be", ((string)(null)), table288, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table289 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table289.AddRow(new string[] {
                        "person(1).salary",
                        "4000"});
            table289.AddRow(new string[] {
                        "person(2).salary",
                        "4000"});
            table289.AddRow(new string[] {
                        "person(3).salary",
                        "3500"});
            table289.AddRow(new string[] {
                        "person(4).salary",
                        "3500"});
            table289.AddRow(new string[] {
                        "person(5).salary",
                        "2000"});
            table289.AddRow(new string[] {
                        "person(6).salary",
                        "5500"});
            table289.AddRow(new string[] {
                        "person(7).salary",
                        "1500"});
            table289.AddRow(new string[] {
                        "person(8).salary",
                        "7500"});
            table289.AddRow(new string[] {
                        "person(9).salary",
                        "3500"});
#line 1789
 testRunner.Then("recordset \"[[person(*).salary]]\"  will be", ((string)(null)), table289, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table290 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table290.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
            table290.AddRow(new string[] {
                        "salary",
                        "[[TableCopy().salary]]"});
#line 1800
 testRunner.Then("Outputs are as follows", ((string)(null)), table290, "Then ");
#line 1804
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1805
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table291 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table291.AddRow(new string[] {
                        "TableCopy(1).age",
                        "28"});
            table291.AddRow(new string[] {
                        "TableCopy(2).age",
                        "28"});
            table291.AddRow(new string[] {
                        "TableCopy(3).age",
                        "28"});
            table291.AddRow(new string[] {
                        "TableCopy(4).age",
                        "29"});
            table291.AddRow(new string[] {
                        "TableCopy(5).age",
                        "30"});
            table291.AddRow(new string[] {
                        "TableCopy(6).age",
                        "30"});
            table291.AddRow(new string[] {
                        "TableCopy(7).age",
                        "56"});
            table291.AddRow(new string[] {
                        "TableCopy(8).age",
                        "56"});
            table291.AddRow(new string[] {
                        "TableCopy(9).age",
                        "56"});
#line 1806
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table291, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table292 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table292.AddRow(new string[] {
                        "TableCopy(1).salary",
                        "1500"});
            table292.AddRow(new string[] {
                        "TableCopy(2).salary",
                        "3500"});
            table292.AddRow(new string[] {
                        "TableCopy(3).salary",
                        "7500"});
            table292.AddRow(new string[] {
                        "TableCopy(4).salary",
                        "3500"});
            table292.AddRow(new string[] {
                        "TableCopy(5).salary",
                        "2000"});
            table292.AddRow(new string[] {
                        "TableCopy(6).salary",
                        "4000"});
            table292.AddRow(new string[] {
                        "TableCopy(7).salary",
                        "3500"});
            table292.AddRow(new string[] {
                        "TableCopy(8).salary",
                        "4000"});
            table292.AddRow(new string[] {
                        "TableCopy(9).salary",
                        "5500"});
#line 1817
 testRunner.Then("recordset \"[[TableCopy(*).salary]]\"  will be", ((string)(null)), table292, "Then ");
#line 1828
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table293 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table293.AddRow(new string[] {
                        "[[TableCopy(9).age]] = 56"});
            table293.AddRow(new string[] {
                        "[[TableCopy(9).salary]] = 5500"});
#line 1829
 testRunner.And("the debug output as", ((string)(null)), table293, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with Orderby Age then by salary desc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithOrderbyAgeThenBySalaryDesc()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with Orderby Age then by salary desc", ((string[])(null)));
#line 1834
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table294 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table294.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table294.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table294.AddRow(new string[] {
                        "person(3).age",
                        "28"});
            table294.AddRow(new string[] {
                        "person(4).age",
                        "56"});
            table294.AddRow(new string[] {
                        "person(5).age",
                        "30"});
            table294.AddRow(new string[] {
                        "person(6).age",
                        "56"});
            table294.AddRow(new string[] {
                        "person(7).age",
                        "28"});
            table294.AddRow(new string[] {
                        "person(8).age",
                        "28"});
            table294.AddRow(new string[] {
                        "person(9).age",
                        "29"});
            table294.AddRow(new string[] {
                        "person(1).salary",
                        "4000"});
            table294.AddRow(new string[] {
                        "person(2).salary",
                        "4000"});
            table294.AddRow(new string[] {
                        "person(3).salary",
                        "3500"});
            table294.AddRow(new string[] {
                        "person(4).salary",
                        "3500"});
            table294.AddRow(new string[] {
                        "person(5).salary",
                        "2000"});
            table294.AddRow(new string[] {
                        "person(6).salary",
                        "5500"});
            table294.AddRow(new string[] {
                        "person(7).salary",
                        "1500"});
            table294.AddRow(new string[] {
                        "person(8).salary",
                        "7500"});
            table294.AddRow(new string[] {
                        "person(9).salary",
                        "3500"});
#line 1835
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table294, "Given ");
#line 1855
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1856
 testRunner.And("I have the following sql statement \"SELECT * from person order by age desc, salar" +
                    "y desc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1857
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table295 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table295.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table295.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table295.AddRow(new string[] {
                        "person(3).age",
                        "28"});
            table295.AddRow(new string[] {
                        "person(4).age",
                        "56"});
            table295.AddRow(new string[] {
                        "person(5).age",
                        "30"});
            table295.AddRow(new string[] {
                        "person(6).age",
                        "56"});
            table295.AddRow(new string[] {
                        "person(7).age",
                        "28"});
            table295.AddRow(new string[] {
                        "person(8).age",
                        "28"});
            table295.AddRow(new string[] {
                        "person(9).age",
                        "29"});
#line 1858
 testRunner.Then("recordset \"[[person(*).age]]\"  will be", ((string)(null)), table295, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table296 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table296.AddRow(new string[] {
                        "person(1).salary",
                        "4000"});
            table296.AddRow(new string[] {
                        "person(2).salary",
                        "4000"});
            table296.AddRow(new string[] {
                        "person(3).salary",
                        "3500"});
            table296.AddRow(new string[] {
                        "person(4).salary",
                        "3500"});
            table296.AddRow(new string[] {
                        "person(5).salary",
                        "2000"});
            table296.AddRow(new string[] {
                        "person(6).salary",
                        "5500"});
            table296.AddRow(new string[] {
                        "person(7).salary",
                        "1500"});
            table296.AddRow(new string[] {
                        "person(8).salary",
                        "7500"});
            table296.AddRow(new string[] {
                        "person(9).salary",
                        "3500"});
#line 1869
 testRunner.Then("recordset \"[[person(*).salary]]\"  will be", ((string)(null)), table296, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table297 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table297.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
            table297.AddRow(new string[] {
                        "salary",
                        "[[TableCopy().salary]]"});
#line 1880
 testRunner.Then("Outputs are as follows", ((string)(null)), table297, "Then ");
#line 1884
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1885
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table298 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table298.AddRow(new string[] {
                        "TableCopy(1).age",
                        "56"});
            table298.AddRow(new string[] {
                        "TableCopy(2).age",
                        "56"});
            table298.AddRow(new string[] {
                        "TableCopy(3).age",
                        "56"});
            table298.AddRow(new string[] {
                        "TableCopy(4).age",
                        "30"});
            table298.AddRow(new string[] {
                        "TableCopy(5).age",
                        "30"});
            table298.AddRow(new string[] {
                        "TableCopy(6).age",
                        "29"});
            table298.AddRow(new string[] {
                        "TableCopy(7).age",
                        "28"});
            table298.AddRow(new string[] {
                        "TableCopy(8).age",
                        "28"});
            table298.AddRow(new string[] {
                        "TableCopy(9).age",
                        "28"});
#line 1886
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table298, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table299 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table299.AddRow(new string[] {
                        "TableCopy(1).salary",
                        "5500"});
            table299.AddRow(new string[] {
                        "TableCopy(2).salary",
                        "4000"});
            table299.AddRow(new string[] {
                        "TableCopy(3).salary",
                        "3500"});
            table299.AddRow(new string[] {
                        "TableCopy(4).salary",
                        "4000"});
            table299.AddRow(new string[] {
                        "TableCopy(5).salary",
                        "2000"});
            table299.AddRow(new string[] {
                        "TableCopy(6).salary",
                        "3500"});
            table299.AddRow(new string[] {
                        "TableCopy(7).salary",
                        "7500"});
            table299.AddRow(new string[] {
                        "TableCopy(8).salary",
                        "3500"});
            table299.AddRow(new string[] {
                        "TableCopy(9).salary",
                        "1500"});
#line 1897
 testRunner.Then("recordset \"[[TableCopy(*).salary]]\"  will be", ((string)(null)), table299, "Then ");
#line 1908
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table300 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table300.AddRow(new string[] {
                        "[[TableCopy(9).age]] = 28"});
            table300.AddRow(new string[] {
                        "[[TableCopy(9).salary]] = 1500"});
#line 1909
 testRunner.And("the debug output as", ((string)(null)), table300, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select Ascending Ordered Distinct Age Asc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAscendingOrderedDistinctAgeAsc()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select Ascending Ordered Distinct Age Asc", ((string[])(null)));
#line 1914
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table301 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table301.AddRow(new string[] {
                        "person(1).age",
                        "32"});
            table301.AddRow(new string[] {
                        "person(2).age",
                        "28"});
            table301.AddRow(new string[] {
                        "person(3).age",
                        "30"});
            table301.AddRow(new string[] {
                        "person(4).age",
                        "56"});
            table301.AddRow(new string[] {
                        "person(5).age",
                        "30"});
            table301.AddRow(new string[] {
                        "person(6).age",
                        "28"});
#line 1915
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table301, "Given ");
#line 1923
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1924
 testRunner.And("I have the following sql statement \"SELECT Distinct(age) as UniqueAge from person" +
                    " order by UniqueAge asc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1925
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table302 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table302.AddRow(new string[] {
                        "UniqueAge",
                        "[[TableCopy().UniqueAge]]"});
#line 1926
 testRunner.Then("Outputs are as follows", ((string)(null)), table302, "Then ");
#line 1929
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1930
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table303 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table303.AddRow(new string[] {
                        "TableCopy(1).UniqueAge",
                        "28"});
            table303.AddRow(new string[] {
                        "TableCopy(2).UniqueAge",
                        "30"});
            table303.AddRow(new string[] {
                        "TableCopy(3).UniqueAge",
                        "32"});
            table303.AddRow(new string[] {
                        "TableCopy(4).UniqueAge",
                        "56"});
#line 1931
 testRunner.Then("recordset \"[[TableCopy(*).UniqueAge]]\"  will be", ((string)(null)), table303, "Then ");
#line 1937
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table304 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table304.AddRow(new string[] {
                        "[[TableCopy(4).UniqueAge]] = 56"});
#line 1938
 testRunner.And("the debug output as", ((string)(null)), table304, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select Distinct Age")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectDistinctAge()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select Distinct Age", ((string[])(null)));
#line 1942
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table305 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table305.AddRow(new string[] {
                        "person(1).age",
                        "32"});
            table305.AddRow(new string[] {
                        "person(2).age",
                        "28"});
            table305.AddRow(new string[] {
                        "person(3).age",
                        "30"});
            table305.AddRow(new string[] {
                        "person(4).age",
                        "56"});
            table305.AddRow(new string[] {
                        "person(5).age",
                        "30"});
            table305.AddRow(new string[] {
                        "person(6).age",
                        "28"});
#line 1943
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table305, "Given ");
#line 1951
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1952
 testRunner.And("I have the following sql statement \"SELECT Distinct(age) from person\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1953
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table306 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table306.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 1954
 testRunner.Then("Outputs are as follows", ((string)(null)), table306, "Then ");
#line 1957
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1958
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table307 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table307.AddRow(new string[] {
                        "TableCopy(1).age",
                        "32"});
            table307.AddRow(new string[] {
                        "TableCopy(2).age",
                        "28"});
            table307.AddRow(new string[] {
                        "TableCopy(3).age",
                        "30"});
            table307.AddRow(new string[] {
                        "TableCopy(4).age",
                        "56"});
#line 1959
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table307, "Then ");
#line 1965
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table308 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table308.AddRow(new string[] {
                        "[[TableCopy(4).age]] = 56"});
#line 1966
 testRunner.And("the debug output as", ((string)(null)), table308, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select Ascending Ordered Distinct Age Desc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAscendingOrderedDistinctAgeDesc()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select Ascending Ordered Distinct Age Desc", ((string[])(null)));
#line 1970
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table309 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table309.AddRow(new string[] {
                        "person(1).age",
                        "32"});
            table309.AddRow(new string[] {
                        "person(2).age",
                        "28"});
            table309.AddRow(new string[] {
                        "person(3).age",
                        "30"});
            table309.AddRow(new string[] {
                        "person(4).age",
                        "56"});
            table309.AddRow(new string[] {
                        "person(5).age",
                        "30"});
            table309.AddRow(new string[] {
                        "person(6).age",
                        "28"});
#line 1971
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table309, "Given ");
#line 1979
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1980
 testRunner.And("I have the following sql statement \"SELECT Distinct(age) as UniqueAge from person" +
                    " order by UniqueAge desc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1981
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table310 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table310.AddRow(new string[] {
                        "UniqueAge",
                        "[[TableCopy().UniqueAge]]"});
#line 1982
 testRunner.Then("Outputs are as follows", ((string)(null)), table310, "Then ");
#line 1985
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1986
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table311 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table311.AddRow(new string[] {
                        "TableCopy(1).UniqueAge",
                        "56"});
            table311.AddRow(new string[] {
                        "TableCopy(2).UniqueAge",
                        "32"});
            table311.AddRow(new string[] {
                        "TableCopy(3).UniqueAge",
                        "30"});
            table311.AddRow(new string[] {
                        "TableCopy(4).UniqueAge",
                        "28"});
#line 1987
 testRunner.Then("recordset \"[[TableCopy(*).UniqueAge]]\"  will be", ((string)(null)), table311, "Then ");
#line 1993
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table312 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table312.AddRow(new string[] {
                        "[[TableCopy(4).UniqueAge]] = 28"});
#line 1994
 testRunner.And("the debug output as", ((string)(null)), table312, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select Multiple Distinct Fields Given 2 People with same name with different Jobs" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectMultipleDistinctFieldsGiven2PeopleWithSameNameWithDifferentJobs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select Multiple Distinct Fields Given 2 People with same name with different Jobs" +
                    "", ((string[])(null)));
#line 1998
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table313 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table313.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table313.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table313.AddRow(new string[] {
                        "person(3).name",
                        "Alice"});
            table313.AddRow(new string[] {
                        "person(4).name",
                        "Garry"});
            table313.AddRow(new string[] {
                        "person(1).surname",
                        "Smith"});
            table313.AddRow(new string[] {
                        "person(2).surname",
                        "Jacobs"});
            table313.AddRow(new string[] {
                        "person(3).surname",
                        "Jones"});
            table313.AddRow(new string[] {
                        "person(4).surname",
                        "Smith"});
            table313.AddRow(new string[] {
                        "person(1).job",
                        "Developer"});
            table313.AddRow(new string[] {
                        "person(2).job",
                        "Developer"});
            table313.AddRow(new string[] {
                        "person(3).job",
                        "Manager"});
            table313.AddRow(new string[] {
                        "person(4).job",
                        "Admin"});
#line 1999
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table313, "Given ");
#line 2013
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2014
 testRunner.And("I have the following sql statement \"SELECT Distinct name as UniqueName, job as Un" +
                    "iqueJob from person\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2015
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table314 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table314.AddRow(new string[] {
                        "UniqueName",
                        "[[TableCopy().UniqueName]]"});
            table314.AddRow(new string[] {
                        "UniqueJob",
                        "[[TableCopy().UniqueJob]]"});
#line 2016
 testRunner.Then("Outputs are as follows", ((string)(null)), table314, "Then ");
#line 2020
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2021
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table315 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table315.AddRow(new string[] {
                        "TableCopy(1).UniqueName",
                        "Bob"});
            table315.AddRow(new string[] {
                        "TableCopy(2).UniqueName",
                        "Alice"});
            table315.AddRow(new string[] {
                        "TableCopy(3).UniqueName",
                        "Alice"});
            table315.AddRow(new string[] {
                        "TableCopy(4).UniqueName",
                        "Garry"});
#line 2022
 testRunner.Then("recordset \"[[TableCopy(*).UniqueName]]\"  will be", ((string)(null)), table315, "Then ");
#line 2028
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table316 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table316.AddRow(new string[] {
                        "[[TableCopy(4).UniqueName]] = Garry"});
            table316.AddRow(new string[] {
                        "[[TableCopy(4).UniqueJob]] = Admin"});
#line 2029
 testRunner.And("the debug output as", ((string)(null)), table316, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select Multiple Distinct Fields Given 2 People with same name with same Jobs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectMultipleDistinctFieldsGiven2PeopleWithSameNameWithSameJobs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select Multiple Distinct Fields Given 2 People with same name with same Jobs", ((string[])(null)));
#line 2034
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table317 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table317.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table317.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table317.AddRow(new string[] {
                        "person(3).name",
                        "Alice"});
            table317.AddRow(new string[] {
                        "person(4).name",
                        "Garry"});
            table317.AddRow(new string[] {
                        "person(1).surname",
                        "Smith"});
            table317.AddRow(new string[] {
                        "person(2).surname",
                        "Jacobs"});
            table317.AddRow(new string[] {
                        "person(3).surname",
                        "Jones"});
            table317.AddRow(new string[] {
                        "person(4).surname",
                        "Smith"});
            table317.AddRow(new string[] {
                        "person(1).job",
                        "Manager"});
            table317.AddRow(new string[] {
                        "person(2).job",
                        "Developer"});
            table317.AddRow(new string[] {
                        "person(3).job",
                        "Developer"});
            table317.AddRow(new string[] {
                        "person(4).job",
                        "Admin"});
#line 2035
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table317, "Given ");
#line 2049
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2050
 testRunner.And("I have the following sql statement \"SELECT Distinct name as UniqueName, job as Un" +
                    "iqueJob from person\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2051
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table318 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table318.AddRow(new string[] {
                        "UniqueName",
                        "[[TableCopy().UniqueName]]"});
            table318.AddRow(new string[] {
                        "UniqueJob",
                        "[[TableCopy().UniqueJob]]"});
#line 2052
 testRunner.Then("Outputs are as follows", ((string)(null)), table318, "Then ");
#line 2056
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2057
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table319 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table319.AddRow(new string[] {
                        "TableCopy(1).UniqueName",
                        "Bob"});
            table319.AddRow(new string[] {
                        "TableCopy(2).UniqueName",
                        "Alice"});
            table319.AddRow(new string[] {
                        "TableCopy(3).UniqueName",
                        "Garry"});
#line 2058
 testRunner.Then("recordset \"[[TableCopy(*).UniqueName]]\"  will be", ((string)(null)), table319, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table320 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table320.AddRow(new string[] {
                        "TableCopy(1).UniqueJob",
                        "Manager"});
            table320.AddRow(new string[] {
                        "TableCopy(2).UniqueJob",
                        "Developer"});
            table320.AddRow(new string[] {
                        "TableCopy(3).UniqueJob",
                        "Admin"});
#line 2063
 testRunner.Then("recordset \"[[TableCopy(*).UniqueJob]]\"  will be", ((string)(null)), table320, "Then ");
#line 2068
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table321 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table321.AddRow(new string[] {
                        "[[TableCopy(3).UniqueName]] = Garry"});
            table321.AddRow(new string[] {
                        "[[TableCopy(3).UniqueJob]] = Admin"});
#line 2069
 testRunner.And("the debug output as", ((string)(null)), table321, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with fields but Limit to 5 rows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithFieldsButLimitTo5Rows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with fields but Limit to 5 rows", ((string[])(null)));
#line 2074
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table322 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table322.AddRow(new string[] {
                        "person(1).name",
                        "A"});
            table322.AddRow(new string[] {
                        "person(2).name",
                        "B"});
            table322.AddRow(new string[] {
                        "person(3).name",
                        "C"});
            table322.AddRow(new string[] {
                        "person(4).name",
                        "D"});
            table322.AddRow(new string[] {
                        "person(5).name",
                        "E"});
            table322.AddRow(new string[] {
                        "person(6).name",
                        "F"});
            table322.AddRow(new string[] {
                        "person(7).name",
                        "G"});
            table322.AddRow(new string[] {
                        "person(8).name",
                        "H"});
            table322.AddRow(new string[] {
                        "person(9).name",
                        "I"});
            table322.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table322.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table322.AddRow(new string[] {
                        "person(3).age",
                        "28"});
            table322.AddRow(new string[] {
                        "person(4).age",
                        "56"});
            table322.AddRow(new string[] {
                        "person(5).age",
                        "30"});
            table322.AddRow(new string[] {
                        "person(6).age",
                        "56"});
            table322.AddRow(new string[] {
                        "person(7).age",
                        "28"});
            table322.AddRow(new string[] {
                        "person(8).age",
                        "28"});
            table322.AddRow(new string[] {
                        "person(9).age",
                        "29"});
            table322.AddRow(new string[] {
                        "person(1).salary",
                        "4000"});
            table322.AddRow(new string[] {
                        "person(2).salary",
                        "4000"});
            table322.AddRow(new string[] {
                        "person(3).salary",
                        "3500"});
            table322.AddRow(new string[] {
                        "person(4).salary",
                        "3500"});
            table322.AddRow(new string[] {
                        "person(5).salary",
                        "2000"});
            table322.AddRow(new string[] {
                        "person(6).salary",
                        "5500"});
            table322.AddRow(new string[] {
                        "person(7).salary",
                        "1500"});
            table322.AddRow(new string[] {
                        "person(8).salary",
                        "7500"});
            table322.AddRow(new string[] {
                        "person(9).salary",
                        "3500"});
#line 2075
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table322, "Given ");
#line 2104
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2105
 testRunner.And("I have the following sql statement \"SELECT * from person limit 5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2106
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table323 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table323.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table323.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
            table323.AddRow(new string[] {
                        "salary",
                        "[[TableCopy().salary]]"});
#line 2107
 testRunner.Then("Outputs are as follows", ((string)(null)), table323, "Then ");
#line 2112
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2113
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table324 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table324.AddRow(new string[] {
                        "TableCopy(1).name",
                        "A"});
            table324.AddRow(new string[] {
                        "TableCopy(2).name",
                        "B"});
            table324.AddRow(new string[] {
                        "TableCopy(3).name",
                        "C"});
            table324.AddRow(new string[] {
                        "TableCopy(4).name",
                        "D"});
            table324.AddRow(new string[] {
                        "TableCopy(5).name",
                        "E"});
#line 2114
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table324, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table325 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table325.AddRow(new string[] {
                        "TableCopy(1).age",
                        "56"});
            table325.AddRow(new string[] {
                        "TableCopy(2).age",
                        "30"});
            table325.AddRow(new string[] {
                        "TableCopy(3).age",
                        "28"});
            table325.AddRow(new string[] {
                        "TableCopy(4).age",
                        "56"});
            table325.AddRow(new string[] {
                        "TableCopy(5).age",
                        "30"});
#line 2121
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table325, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table326 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table326.AddRow(new string[] {
                        "TableCopy(1).salary",
                        "4000"});
            table326.AddRow(new string[] {
                        "TableCopy(2).salary",
                        "4000"});
            table326.AddRow(new string[] {
                        "TableCopy(3).salary",
                        "3500"});
            table326.AddRow(new string[] {
                        "TableCopy(4).salary",
                        "3500"});
            table326.AddRow(new string[] {
                        "TableCopy(5).salary",
                        "2000"});
#line 2128
 testRunner.Then("recordset \"[[TableCopy(*).salary]]\"  will be", ((string)(null)), table326, "Then ");
#line 2135
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table327 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table327.AddRow(new string[] {
                        "[[TableCopy(5).name]] = E"});
            table327.AddRow(new string[] {
                        "[[TableCopy(5).age]] = 30"});
            table327.AddRow(new string[] {
                        "[[TableCopy(5).salary]] = 2000"});
#line 2136
 testRunner.And("the debug output as", ((string)(null)), table327, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with fields from 2 but Limit to 5 rows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithFieldsFrom2ButLimitTo5Rows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with fields from 2 but Limit to 5 rows", ((string[])(null)));
#line 2142
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table328 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table328.AddRow(new string[] {
                        "person(1).name",
                        "A"});
            table328.AddRow(new string[] {
                        "person(2).name",
                        "B"});
            table328.AddRow(new string[] {
                        "person(3).name",
                        "C"});
            table328.AddRow(new string[] {
                        "person(4).name",
                        "D"});
            table328.AddRow(new string[] {
                        "person(5).name",
                        "E"});
            table328.AddRow(new string[] {
                        "person(6).name",
                        "F"});
            table328.AddRow(new string[] {
                        "person(7).name",
                        "G"});
            table328.AddRow(new string[] {
                        "person(8).name",
                        "H"});
            table328.AddRow(new string[] {
                        "person(9).name",
                        "I"});
            table328.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table328.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table328.AddRow(new string[] {
                        "person(3).age",
                        "28"});
            table328.AddRow(new string[] {
                        "person(4).age",
                        "56"});
            table328.AddRow(new string[] {
                        "person(5).age",
                        "30"});
            table328.AddRow(new string[] {
                        "person(6).age",
                        "56"});
            table328.AddRow(new string[] {
                        "person(7).age",
                        "28"});
            table328.AddRow(new string[] {
                        "person(8).age",
                        "28"});
            table328.AddRow(new string[] {
                        "person(9).age",
                        "29"});
            table328.AddRow(new string[] {
                        "person(1).salary",
                        "4000"});
            table328.AddRow(new string[] {
                        "person(2).salary",
                        "4000"});
            table328.AddRow(new string[] {
                        "person(3).salary",
                        "3500"});
            table328.AddRow(new string[] {
                        "person(4).salary",
                        "3500"});
            table328.AddRow(new string[] {
                        "person(5).salary",
                        "2000"});
            table328.AddRow(new string[] {
                        "person(6).salary",
                        "5500"});
            table328.AddRow(new string[] {
                        "person(7).salary",
                        "1500"});
            table328.AddRow(new string[] {
                        "person(8).salary",
                        "7500"});
            table328.AddRow(new string[] {
                        "person(9).salary",
                        "3500"});
#line 2143
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table328, "Given ");
#line 2172
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2173
 testRunner.And("I have the following sql statement \"SELECT * from person limit 5 offset 2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2174
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table329 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table329.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table329.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
            table329.AddRow(new string[] {
                        "salary",
                        "[[TableCopy().salary]]"});
#line 2175
 testRunner.Then("Outputs are as follows", ((string)(null)), table329, "Then ");
#line 2180
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2181
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table330 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table330.AddRow(new string[] {
                        "TableCopy(1).name",
                        "C"});
            table330.AddRow(new string[] {
                        "TableCopy(2).name",
                        "D"});
            table330.AddRow(new string[] {
                        "TableCopy(3).name",
                        "E"});
            table330.AddRow(new string[] {
                        "TableCopy(4).name",
                        "F"});
            table330.AddRow(new string[] {
                        "TableCopy(5).name",
                        "G"});
#line 2182
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table330, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table331 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table331.AddRow(new string[] {
                        "TableCopy(1).age",
                        "28"});
            table331.AddRow(new string[] {
                        "TableCopy(2).age",
                        "56"});
            table331.AddRow(new string[] {
                        "TableCopy(3).age",
                        "30"});
            table331.AddRow(new string[] {
                        "TableCopy(4).age",
                        "56"});
            table331.AddRow(new string[] {
                        "TableCopy(5).age",
                        "28"});
#line 2189
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table331, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table332 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table332.AddRow(new string[] {
                        "TableCopy(1).salary",
                        "3500"});
            table332.AddRow(new string[] {
                        "TableCopy(2).salary",
                        "3500"});
            table332.AddRow(new string[] {
                        "TableCopy(3).salary",
                        "2000"});
            table332.AddRow(new string[] {
                        "TableCopy(4).salary",
                        "5500"});
            table332.AddRow(new string[] {
                        "TableCopy(5).salary",
                        "1500"});
#line 2196
 testRunner.Then("recordset \"[[TableCopy(*).salary]]\"  will be", ((string)(null)), table332, "Then ");
#line 2203
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table333 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table333.AddRow(new string[] {
                        "[[TableCopy(5).name]] = G"});
            table333.AddRow(new string[] {
                        "[[TableCopy(5).age]] = 28"});
            table333.AddRow(new string[] {
                        "[[TableCopy(5).salary]] = 1500"});
#line 2204
 testRunner.And("the debug output as", ((string)(null)), table333, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select all with Case")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllWithCase()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select all with Case", ((string[])(null)));
#line 2210
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table334 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table334.AddRow(new string[] {
                        "person(1).name",
                        "A"});
            table334.AddRow(new string[] {
                        "person(2).name",
                        "B"});
            table334.AddRow(new string[] {
                        "person(3).name",
                        "C"});
            table334.AddRow(new string[] {
                        "person(4).name",
                        "D"});
            table334.AddRow(new string[] {
                        "person(5).name",
                        "E"});
            table334.AddRow(new string[] {
                        "person(6).name",
                        "F"});
            table334.AddRow(new string[] {
                        "person(7).name",
                        "G"});
            table334.AddRow(new string[] {
                        "person(8).name",
                        "H"});
            table334.AddRow(new string[] {
                        "person(9).name",
                        "I"});
            table334.AddRow(new string[] {
                        "person(1).age",
                        "56"});
            table334.AddRow(new string[] {
                        "person(2).age",
                        "30"});
            table334.AddRow(new string[] {
                        "person(3).age",
                        "28"});
            table334.AddRow(new string[] {
                        "person(4).age",
                        "56"});
            table334.AddRow(new string[] {
                        "person(5).age",
                        "30"});
            table334.AddRow(new string[] {
                        "person(6).age",
                        "56"});
            table334.AddRow(new string[] {
                        "person(7).age",
                        "28"});
            table334.AddRow(new string[] {
                        "person(8).age",
                        "28"});
            table334.AddRow(new string[] {
                        "person(9).age",
                        "29"});
            table334.AddRow(new string[] {
                        "person(1).salary",
                        "4000"});
            table334.AddRow(new string[] {
                        "person(2).salary",
                        "4000"});
            table334.AddRow(new string[] {
                        "person(3).salary",
                        "3500"});
            table334.AddRow(new string[] {
                        "person(4).salary",
                        "3500"});
            table334.AddRow(new string[] {
                        "person(5).salary",
                        "2000"});
            table334.AddRow(new string[] {
                        "person(6).salary",
                        "5500"});
            table334.AddRow(new string[] {
                        "person(7).salary",
                        "1500"});
            table334.AddRow(new string[] {
                        "person(8).salary",
                        "7500"});
            table334.AddRow(new string[] {
                        "person(9).salary",
                        "3500"});
#line 2211
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table334, "Given ");
#line 2240
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2241
 testRunner.And("I have the following sql statement \"SELECT name, salary, CASE WHEN salary < 3500 " +
                    " THEN \'Underpaid\' ELSE \'Well paid\' END FairPaid from person\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2242
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table335 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table335.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table335.AddRow(new string[] {
                        "salary",
                        "[[TableCopy().salary]]"});
            table335.AddRow(new string[] {
                        "FairPaid",
                        "[[TableCopy().FairPaid]]"});
#line 2243
 testRunner.Then("Outputs are as follows", ((string)(null)), table335, "Then ");
#line 2248
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2249
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table336 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table336.AddRow(new string[] {
                        "TableCopy(1).name",
                        "A"});
            table336.AddRow(new string[] {
                        "TableCopy(2).name",
                        "B"});
            table336.AddRow(new string[] {
                        "TableCopy(3).name",
                        "C"});
            table336.AddRow(new string[] {
                        "TableCopy(4).name",
                        "D"});
            table336.AddRow(new string[] {
                        "TableCopy(5).name",
                        "E"});
            table336.AddRow(new string[] {
                        "TableCopy(6).name",
                        "F"});
            table336.AddRow(new string[] {
                        "TableCopy(7).name",
                        "G"});
            table336.AddRow(new string[] {
                        "TableCopy(8).name",
                        "H"});
            table336.AddRow(new string[] {
                        "TableCopy(9).name",
                        "I"});
#line 2250
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table336, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table337 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table337.AddRow(new string[] {
                        "TableCopy(1).FairPaid",
                        "Well paid"});
            table337.AddRow(new string[] {
                        "TableCopy(2).FairPaid",
                        "Well paid"});
            table337.AddRow(new string[] {
                        "TableCopy(3).FairPaid",
                        "Well paid"});
            table337.AddRow(new string[] {
                        "TableCopy(4).FairPaid",
                        "Well paid"});
            table337.AddRow(new string[] {
                        "TableCopy(5).FairPaid",
                        "Underpaid"});
            table337.AddRow(new string[] {
                        "TableCopy(6).FairPaid",
                        "Well paid"});
            table337.AddRow(new string[] {
                        "TableCopy(7).FairPaid",
                        "Underpaid"});
            table337.AddRow(new string[] {
                        "TableCopy(8).FairPaid",
                        "Well paid"});
            table337.AddRow(new string[] {
                        "TableCopy(9).FairPaid",
                        "Well paid"});
#line 2261
 testRunner.Then("recordset \"[[TableCopy(*).FairPaid]]\"  will be", ((string)(null)), table337, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table338 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table338.AddRow(new string[] {
                        "TableCopy(1).salary",
                        "4000"});
            table338.AddRow(new string[] {
                        "TableCopy(2).salary",
                        "4000"});
            table338.AddRow(new string[] {
                        "TableCopy(3).salary",
                        "3500"});
            table338.AddRow(new string[] {
                        "TableCopy(4).salary",
                        "3500"});
            table338.AddRow(new string[] {
                        "TableCopy(5).salary",
                        "2000"});
            table338.AddRow(new string[] {
                        "TableCopy(6).salary",
                        "5500"});
            table338.AddRow(new string[] {
                        "TableCopy(7).salary",
                        "1500"});
            table338.AddRow(new string[] {
                        "TableCopy(8).salary",
                        "7500"});
            table338.AddRow(new string[] {
                        "TableCopy(9).salary",
                        "3500"});
#line 2272
 testRunner.Then("recordset \"[[TableCopy(*).salary]]\"  will be", ((string)(null)), table338, "Then ");
#line 2283
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table339 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table339.AddRow(new string[] {
                        "[[TableCopy(9).name]] = I"});
            table339.AddRow(new string[] {
                        "[[TableCopy(9).salary]] = 3500"});
            table339.AddRow(new string[] {
                        "[[TableCopy(9).FairPaid]] = Well paid"});
#line 2284
 testRunner.And("the debug output as", ((string)(null)), table339, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update statement with variable in where clause")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void UpdateStatementWithVariableInWhereClause()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update statement with variable in where clause", ((string[])(null)));
#line 2290
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table340 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table340.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table340.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table340.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table340.AddRow(new string[] {
                        "updateName",
                        "Hatter"});
#line 2291
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table340, "Given ");
#line 2297
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table341 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table341.AddRow(new string[] {
                        "newName",
                        "[[updateName]]"});
#line 2298
 testRunner.And("Declare variables as", ((string)(null)), table341, "And ");
#line 2301
 testRunner.And("I have the following sql statement \"UPDATE person SET name = \'Mad Hatter\' WHERE n" +
                    "ame = @newName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2302
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table342 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table342.AddRow(new string[] {
                        "records_affected",
                        "[[Table1Copy().records_affected]]"});
#line 2303
 testRunner.Then("Outputs are as follows", ((string)(null)), table342, "Then ");
#line 2306
 testRunner.And("Recordset is \"Table1Copy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2307
 testRunner.When("I update Recordset to \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2308
 testRunner.Then("Recordset is \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table343 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table343.AddRow(new string[] {
                        "records_affected",
                        "[[newPerson().records_affected]]"});
#line 2309
 testRunner.And("Outputs are as follows", ((string)(null)), table343, "And ");
#line 2312
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table344 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table344.AddRow(new string[] {
                        "newPerson().records_affected",
                        "1"});
#line 2313
 testRunner.Then("recordset \"[[newPerson(*).records_affected]]\"  will be", ((string)(null)), table344, "Then ");
#line 2316
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table345 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "newName"});
            table345.AddRow(new string[] {
                        "String",
                        "[[updateName]] = Hatter"});
#line 2317
 testRunner.And("the debug inputs as", ((string)(null)), table345, "And ");
#line hidden
            TechTalk.SpecFlow.Table table346 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table346.AddRow(new string[] {
                        "[[newPerson(1).records_affected]] = 1"});
#line 2320
 testRunner.And("the debug output as", ((string)(null)), table346, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update statement with variable in where clause and Select statement")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void UpdateStatementWithVariableInWhereClauseAndSelectStatement()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update statement with variable in where clause and Select statement", ((string[])(null)));
#line 2324
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table347 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table347.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table347.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table347.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table347.AddRow(new string[] {
                        "updateName",
                        "Hatter"});
#line 2325
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table347, "Given ");
#line 2331
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table348 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table348.AddRow(new string[] {
                        "newName",
                        "[[updateName]]"});
#line 2332
 testRunner.And("Declare variables as", ((string)(null)), table348, "And ");
#line 2335
 testRunner.And("I have the following sql statement \"UPDATE person SET name = \'Mad Hatter\' where n" +
                    "ame = @newName; SELECT * FROM person\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2336
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table349 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table349.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 2337
 testRunner.Then("Outputs are as follows", ((string)(null)), table349, "Then ");
#line 2340
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2341
 testRunner.When("I update Recordset to \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2342
 testRunner.Then("Recordset is \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table350 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table350.AddRow(new string[] {
                        "name",
                        "[[newPerson().name]]"});
#line 2343
 testRunner.And("Outputs are as follows", ((string)(null)), table350, "And ");
#line 2346
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table351 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table351.AddRow(new string[] {
                        "newPerson().name",
                        "Bob"});
            table351.AddRow(new string[] {
                        "newPerson().name",
                        "Alice"});
            table351.AddRow(new string[] {
                        "newPerson().name",
                        "Mad Hatter"});
#line 2347
 testRunner.Then("recordset \"[[newPerson(*).name]]\"  will be", ((string)(null)), table351, "Then ");
#line 2352
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table352 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "newName"});
            table352.AddRow(new string[] {
                        "String",
                        "[[updateName]] = Hatter"});
#line 2353
 testRunner.And("the debug inputs as", ((string)(null)), table352, "And ");
#line hidden
            TechTalk.SpecFlow.Table table353 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table353.AddRow(new string[] {
                        "[[newPerson(3).name]] = Mad Hatter"});
#line 2356
 testRunner.And("the debug output as", ((string)(null)), table353, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("complex Update statement")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void ComplexUpdateStatement()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("complex Update statement", ((string[])(null)));
#line 2360
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table354 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table354.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table354.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table354.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table354.AddRow(new string[] {
                        "other().name",
                        "Hatter"});
#line 2361
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table354, "Given ");
#line 2367
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2368
 testRunner.And("I have the following sql statement \"UPDATE person SET name = \'Mad Hatter\' where n" +
                    "ame IN (SELECT name FROM other);\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2369
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table355 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table355.AddRow(new string[] {
                        "records_affected",
                        "[[Table1Copy().records_affected]]"});
#line 2370
 testRunner.Then("Outputs are as follows", ((string)(null)), table355, "Then ");
#line 2373
 testRunner.And("Recordset is \"Table1Copy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2374
 testRunner.When("I update Recordset to \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2375
 testRunner.Then("Recordset is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table356 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table356.AddRow(new string[] {
                        "records_affected",
                        "[[records_affected]]"});
#line 2376
 testRunner.And("Outputs are as follows", ((string)(null)), table356, "And ");
#line 2379
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2380
 testRunner.Then("the result variable \"[[records_affected]]\" will be \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table357 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table357.AddRow(new string[] {
                        "String"});
#line 2381
 testRunner.And("the debug inputs as", ((string)(null)), table357, "And ");
#line hidden
            TechTalk.SpecFlow.Table table358 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table358.AddRow(new string[] {
                        "[[records_affected]] = 1"});
#line 2384
 testRunner.And("the debug output as", ((string)(null)), table358, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update statement with variable in where clause and Select Where statement")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void UpdateStatementWithVariableInWhereClauseAndSelectWhereStatement()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update statement with variable in where clause and Select Where statement", ((string[])(null)));
#line 2388
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table359 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table359.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table359.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table359.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table359.AddRow(new string[] {
                        "updateName",
                        "Hatter"});
#line 2389
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table359, "Given ");
#line 2395
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table360 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table360.AddRow(new string[] {
                        "newName",
                        "[[updateName]]"});
#line 2396
 testRunner.And("Declare variables as", ((string)(null)), table360, "And ");
#line 2399
 testRunner.And("I have the following sql statement \"UPDATE person SET name = \'Mad Hatter\' where n" +
                    "ame = @newName; SELECT * FROM person WHERE name = \'Mad Hatter\'\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2400
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table361 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table361.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 2401
 testRunner.Then("Outputs are as follows", ((string)(null)), table361, "Then ");
#line 2404
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2405
 testRunner.When("I update Recordset to \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2406
 testRunner.Then("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table362 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table362.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 2407
 testRunner.And("Outputs are as follows", ((string)(null)), table362, "And ");
#line 2410
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table363 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table363.AddRow(new string[] {
                        "TableCopy().name",
                        "Mad Hatter"});
#line 2411
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table363, "Then ");
#line 2414
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table364 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "newName"});
            table364.AddRow(new string[] {
                        "String",
                        "[[updateName]] = Hatter"});
#line 2415
 testRunner.And("the debug inputs as", ((string)(null)), table364, "And ");
#line hidden
            TechTalk.SpecFlow.Table table365 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table365.AddRow(new string[] {
                        "[[TableCopy(1).name]] =  Mad Hatter"});
#line 2418
 testRunner.And("the debug output as", ((string)(null)), table365, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete statement with variable in where clause")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void DeleteStatementWithVariableInWhereClause()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete statement with variable in where clause", ((string[])(null)));
#line 2422
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table366 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table366.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table366.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table366.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table366.AddRow(new string[] {
                        "deleteName",
                        "Hatter"});
#line 2423
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table366, "Given ");
#line 2429
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table367 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table367.AddRow(new string[] {
                        "newName",
                        "[[deleteName]]"});
#line 2430
 testRunner.And("Declare variables as", ((string)(null)), table367, "And ");
#line 2433
 testRunner.And("I have the following sql statement \"DELETE FROM person WHERE name = @newName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2434
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table368 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table368.AddRow(new string[] {
                        "records_affected",
                        "[[Table1Copy().records_affected]]"});
#line 2435
 testRunner.Then("Outputs are as follows", ((string)(null)), table368, "Then ");
#line 2438
 testRunner.And("Recordset is \"Table1Copy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2439
 testRunner.When("I update Recordset to \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2440
 testRunner.Then("Recordset is \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table369 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table369.AddRow(new string[] {
                        "records_affected",
                        "[[newPerson().records_affected]]"});
#line 2441
 testRunner.And("Outputs are as follows", ((string)(null)), table369, "And ");
#line 2444
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table370 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table370.AddRow(new string[] {
                        "newPerson().records_affected",
                        "1"});
#line 2445
 testRunner.Then("recordset \"[[newPerson(*).records_affected]]\"  will be", ((string)(null)), table370, "Then ");
#line 2448
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table371 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "newName"});
            table371.AddRow(new string[] {
                        "String",
                        "[[deleteName]] = Hatter"});
#line 2449
 testRunner.And("the debug inputs as", ((string)(null)), table371, "And ");
#line hidden
            TechTalk.SpecFlow.Table table372 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table372.AddRow(new string[] {
                        "[[newPerson(1).records_affected]] = 1"});
#line 2452
 testRunner.And("the debug output as", ((string)(null)), table372, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete statement with variable in where clause and Select statement")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void DeleteStatementWithVariableInWhereClauseAndSelectStatement()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete statement with variable in where clause and Select statement", ((string[])(null)));
#line 2456
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table373 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table373.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table373.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table373.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table373.AddRow(new string[] {
                        "deleteName",
                        "Hatter"});
#line 2457
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table373, "Given ");
#line 2463
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table374 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table374.AddRow(new string[] {
                        "newName",
                        "[[deleteName]]"});
#line 2464
 testRunner.And("Declare variables as", ((string)(null)), table374, "And ");
#line 2467
 testRunner.And("I have the following sql statement \"DELETE FROM person WHERE name = @newName; SEL" +
                    "ECT * FROM person\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2468
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table375 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table375.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 2469
 testRunner.Then("Outputs are as follows", ((string)(null)), table375, "Then ");
#line 2472
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2473
 testRunner.When("I update Recordset to \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2474
 testRunner.Then("Recordset is \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table376 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table376.AddRow(new string[] {
                        "name",
                        "[[newPerson().name]]"});
#line 2475
 testRunner.And("Outputs are as follows", ((string)(null)), table376, "And ");
#line 2478
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table377 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table377.AddRow(new string[] {
                        "newPerson().name",
                        "Bob"});
            table377.AddRow(new string[] {
                        "newPerson().name",
                        "Alice"});
#line 2479
 testRunner.Then("recordset \"[[newPerson(*).name]]\"  will be", ((string)(null)), table377, "Then ");
#line 2483
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table378 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "newName"});
            table378.AddRow(new string[] {
                        "String",
                        "[[deleteName]] = Hatter"});
#line 2484
 testRunner.And("the debug inputs as", ((string)(null)), table378, "And ");
#line hidden
            TechTalk.SpecFlow.Table table379 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table379.AddRow(new string[] {
                        "[[newPerson(2).name]] =  Alice"});
#line 2487
 testRunner.And("the debug output as", ((string)(null)), table379, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete statement with variable in where clause and Select Where statement")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void DeleteStatementWithVariableInWhereClauseAndSelectWhereStatement()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete statement with variable in where clause and Select Where statement", ((string[])(null)));
#line 2491
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table380 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table380.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table380.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table380.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table380.AddRow(new string[] {
                        "deleteName",
                        "Hatter"});
#line 2492
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table380, "Given ");
#line 2498
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table381 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table381.AddRow(new string[] {
                        "newName",
                        "[[deleteName]]"});
#line 2499
 testRunner.And("Declare variables as", ((string)(null)), table381, "And ");
#line 2502
 testRunner.And("I have the following sql statement \"DELETE FROM person WHERE name = @newName; SEL" +
                    "ECT * FROM person WHERE name = \'Bob\'\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2503
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table382 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table382.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 2504
 testRunner.Then("Outputs are as follows", ((string)(null)), table382, "Then ");
#line 2507
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2508
 testRunner.When("I update Recordset to \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2509
 testRunner.Then("Recordset is \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table383 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table383.AddRow(new string[] {
                        "name",
                        "[[newPerson().name]]"});
#line 2510
 testRunner.And("Outputs are as follows", ((string)(null)), table383, "And ");
#line 2513
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table384 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table384.AddRow(new string[] {
                        "newPerson().name",
                        "Bob"});
#line 2514
 testRunner.Then("recordset \"[[newPerson(*).name]]\"  will be", ((string)(null)), table384, "Then ");
#line 2517
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table385 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "newName"});
            table385.AddRow(new string[] {
                        "String",
                        "[[deleteName]] = Hatter"});
#line 2518
 testRunner.And("the debug inputs as", ((string)(null)), table385, "And ");
#line hidden
            TechTalk.SpecFlow.Table table386 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table386.AddRow(new string[] {
                        "[[newPerson(1).name]] = Bob"});
#line 2521
 testRunner.And("the debug output as", ((string)(null)), table386, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("simple Join statement")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SimpleJoinStatement()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("simple Join statement", ((string[])(null)));
#line 2525
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table387 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table387.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table387.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table387.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table387.AddRow(new string[] {
                        "other().name",
                        "Hatter"});
            table387.AddRow(new string[] {
                        "other().name",
                        "Gary"});
#line 2526
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table387, "Given ");
#line 2533
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2534
 testRunner.And("I have the following sql statement \"select o.name from person p join other o on p" +
                    ".name=o.name\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2535
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table388 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table388.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 2536
 testRunner.Then("Outputs are as follows", ((string)(null)), table388, "Then ");
#line 2539
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2540
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table389 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table389.AddRow(new string[] {
                        "TableCopy().name",
                        "Hatter"});
#line 2541
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table389, "Then ");
#line 2544
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table390 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table390.AddRow(new string[] {
                        "String"});
#line 2545
 testRunner.And("the debug inputs as", ((string)(null)), table390, "And ");
#line hidden
            TechTalk.SpecFlow.Table table391 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table391.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Hatter"});
#line 2548
 testRunner.And("the debug output as", ((string)(null)), table391, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("simple Join statement with star in field names")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SimpleJoinStatementWithStarInFieldNames()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("simple Join statement with star in field names", ((string[])(null)));
#line 2552
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table392 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table392.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table392.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table392.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table392.AddRow(new string[] {
                        "other().name",
                        "Hatter"});
            table392.AddRow(new string[] {
                        "other().name",
                        "Gary"});
#line 2553
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table392, "Given ");
#line 2560
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2561
 testRunner.And("I have the following sql statement \"select o.* from person p join other o on p.na" +
                    "me=o.name\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2562
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table393 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table393.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 2563
 testRunner.Then("Outputs are as follows", ((string)(null)), table393, "Then ");
#line 2566
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2567
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table394 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table394.AddRow(new string[] {
                        "TableCopy().name",
                        "Hatter"});
#line 2568
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table394, "Then ");
#line 2571
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table395 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table395.AddRow(new string[] {
                        "String"});
#line 2572
 testRunner.And("the debug inputs as", ((string)(null)), table395, "And ");
#line hidden
            TechTalk.SpecFlow.Table table396 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table396.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Hatter"});
#line 2575
 testRunner.And("the debug output as", ((string)(null)), table396, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("simple inner Join statement with star in field names")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SimpleInnerJoinStatementWithStarInFieldNames()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("simple inner Join statement with star in field names", ((string[])(null)));
#line 2579
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table397 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table397.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table397.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table397.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table397.AddRow(new string[] {
                        "other().name",
                        "Hatter"});
            table397.AddRow(new string[] {
                        "other().name",
                        "Gary"});
#line 2580
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table397, "Given ");
#line 2587
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2588
 testRunner.And("I have the following sql statement \"select o.* from person p join other o on p.na" +
                    "me=o.name\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2589
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table398 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table398.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 2590
 testRunner.Then("Outputs are as follows", ((string)(null)), table398, "Then ");
#line 2593
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2594
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table399 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table399.AddRow(new string[] {
                        "TableCopy().name",
                        "Hatter"});
#line 2595
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table399, "Then ");
#line 2598
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table400 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table400.AddRow(new string[] {
                        "String"});
#line 2599
 testRunner.And("the debug inputs as", ((string)(null)), table400, "And ");
#line hidden
            TechTalk.SpecFlow.Table table401 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table401.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Hatter"});
#line 2602
 testRunner.And("the debug output as", ((string)(null)), table401, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("simple cross Join statement with star in field names")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SimpleCrossJoinStatementWithStarInFieldNames()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("simple cross Join statement with star in field names", ((string[])(null)));
#line 2606
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table402 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table402.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table402.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table402.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table402.AddRow(new string[] {
                        "other().surname",
                        "tt"});
            table402.AddRow(new string[] {
                        "other().surname",
                        "uu"});
#line 2607
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table402, "Given ");
#line 2614
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2615
 testRunner.And("I have the following sql statement \"select * from person cross join other\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2616
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table403 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table403.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table403.AddRow(new string[] {
                        "surname",
                        "[[TableCopy().surname]]"});
#line 2617
 testRunner.Then("Outputs are as follows", ((string)(null)), table403, "Then ");
#line 2621
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2622
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table404 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table404.AddRow(new string[] {
                        "TableCopy().name",
                        "Bob"});
            table404.AddRow(new string[] {
                        "TableCopy().name",
                        "Bob"});
            table404.AddRow(new string[] {
                        "TableCopy().name",
                        "Alice"});
            table404.AddRow(new string[] {
                        "TableCopy().name",
                        "Alice"});
            table404.AddRow(new string[] {
                        "TableCopy().name",
                        "Hatter"});
            table404.AddRow(new string[] {
                        "TableCopy().name",
                        "Hatter"});
#line 2623
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table404, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table405 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table405.AddRow(new string[] {
                        "TableCopy().surname",
                        "tt"});
            table405.AddRow(new string[] {
                        "TableCopy().surname",
                        "uu"});
            table405.AddRow(new string[] {
                        "TableCopy().surname",
                        "tt"});
            table405.AddRow(new string[] {
                        "TableCopy().surname",
                        "uu"});
            table405.AddRow(new string[] {
                        "TableCopy().surname",
                        "tt"});
            table405.AddRow(new string[] {
                        "TableCopy().surname",
                        "uu"});
#line 2631
 testRunner.Then("recordset \"[[TableCopy(*).surname]]\"  will be", ((string)(null)), table405, "Then ");
#line 2639
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table406 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table406.AddRow(new string[] {
                        "String"});
#line 2640
 testRunner.And("the debug inputs as", ((string)(null)), table406, "And ");
#line hidden
            TechTalk.SpecFlow.Table table407 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table407.AddRow(new string[] {
                        "[[TableCopy(6).name]] = Hatter"});
            table407.AddRow(new string[] {
                        "[[TableCopy(6).surname]] = uu"});
#line 2643
 testRunner.And("the debug output as", ((string)(null)), table407, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update statement with variable in where clause and Like starts with")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void UpdateStatementWithVariableInWhereClauseAndLikeStartsWith()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update statement with variable in where clause and Like starts with", ((string[])(null)));
#line 2648
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table408 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table408.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table408.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table408.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table408.AddRow(new string[] {
                        "updateName",
                        "Hatter"});
            table408.AddRow(new string[] {
                        "likeName",
                        "Ma%"});
#line 2649
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table408, "Given ");
#line 2656
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table409 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table409.AddRow(new string[] {
                        "newName",
                        "[[updateName]]"});
            table409.AddRow(new string[] {
                        "newMatch",
                        "[[likeName]]"});
#line 2657
 testRunner.And("Declare variables as", ((string)(null)), table409, "And ");
#line 2661
 testRunner.And("I have the following sql statement \"UPDATE person SET name = \'Mad Hatter\' WHERE n" +
                    "ame = @newName; SELECT * FROM person WHERE name LIKE @newMatch;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2662
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table410 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table410.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 2663
 testRunner.Then("Outputs are as follows", ((string)(null)), table410, "Then ");
#line 2666
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table411 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table411.AddRow(new string[] {
                        "TableCopy().name",
                        "Mad Hatter"});
#line 2667
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table411, "Then ");
#line 2670
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table412 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "newName",
                        "newMatch"});
            table412.AddRow(new string[] {
                        "String",
                        "[[updateName]] = Hatter",
                        "[[likeName]] = Ma%"});
#line 2671
 testRunner.And("the debug inputs as", ((string)(null)), table412, "And ");
#line hidden
            TechTalk.SpecFlow.Table table413 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table413.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Mad Hatter"});
#line 2674
 testRunner.And("the debug output as", ((string)(null)), table413, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update statement with variable in where clause and Like ends with")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void UpdateStatementWithVariableInWhereClauseAndLikeEndsWith()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update statement with variable in where clause and Like ends with", ((string[])(null)));
#line 2678
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table414 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table414.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table414.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table414.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table414.AddRow(new string[] {
                        "updateName",
                        "Hatter"});
            table414.AddRow(new string[] {
                        "likeName",
                        "%ter"});
#line 2679
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table414, "Given ");
#line 2686
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table415 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table415.AddRow(new string[] {
                        "newName",
                        "[[updateName]]"});
            table415.AddRow(new string[] {
                        "newMatch",
                        "[[likeName]]"});
#line 2687
 testRunner.And("Declare variables as", ((string)(null)), table415, "And ");
#line 2691
 testRunner.And("I have the following sql statement \"UPDATE person SET name = \'Mad Hatter\' WHERE n" +
                    "ame = @newName; SELECT * FROM person WHERE name LIKE @newMatch;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2692
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table416 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table416.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 2693
 testRunner.Then("Outputs are as follows", ((string)(null)), table416, "Then ");
#line 2696
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2697
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table417 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table417.AddRow(new string[] {
                        "TableCopy().name",
                        "Mad Hatter"});
#line 2698
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table417, "Then ");
#line 2701
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table418 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "newName",
                        "newMatch"});
            table418.AddRow(new string[] {
                        "String",
                        "[[updateName]] = Hatter",
                        "[[likeName]] = %ter"});
#line 2702
 testRunner.And("the debug inputs as", ((string)(null)), table418, "And ");
#line hidden
            TechTalk.SpecFlow.Table table419 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table419.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Mad Hatter"});
#line 2705
 testRunner.And("the debug output as", ((string)(null)), table419, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update statement with variable in where clause and Like in any position")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void UpdateStatementWithVariableInWhereClauseAndLikeInAnyPosition()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update statement with variable in where clause and Like in any position", ((string[])(null)));
#line 2709
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table420 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table420.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table420.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table420.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table420.AddRow(new string[] {
                        "updateName",
                        "Hatter"});
            table420.AddRow(new string[] {
                        "likeName",
                        "%att%"});
#line 2710
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table420, "Given ");
#line 2717
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table421 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table421.AddRow(new string[] {
                        "newName",
                        "[[updateName]]"});
            table421.AddRow(new string[] {
                        "newMatch",
                        "[[likeName]]"});
#line 2718
 testRunner.And("Declare variables as", ((string)(null)), table421, "And ");
#line 2722
 testRunner.And("I have the following sql statement \"UPDATE person SET name = \'Mad Hatter\' WHERE n" +
                    "ame = @newName; SELECT * FROM person WHERE name LIKE @newMatch;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2723
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table422 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table422.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 2724
 testRunner.Then("Outputs are as follows", ((string)(null)), table422, "Then ");
#line 2727
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2728
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table423 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table423.AddRow(new string[] {
                        "TableCopy().name",
                        "Mad Hatter"});
#line 2729
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table423, "Then ");
#line 2732
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table424 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "newName",
                        "newMatch"});
            table424.AddRow(new string[] {
                        "String",
                        "[[updateName]] = Hatter",
                        "[[likeName]] = %att%"});
#line 2733
 testRunner.And("the debug inputs as", ((string)(null)), table424, "And ");
#line hidden
            TechTalk.SpecFlow.Table table425 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table425.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Mad Hatter"});
#line 2736
 testRunner.And("the debug output as", ((string)(null)), table425, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update statement with variable in where clause and Like in second position")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void UpdateStatementWithVariableInWhereClauseAndLikeInSecondPosition()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update statement with variable in where clause and Like in second position", ((string[])(null)));
#line 2740
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table426 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table426.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table426.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table426.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table426.AddRow(new string[] {
                        "updateName",
                        "Hatter"});
            table426.AddRow(new string[] {
                        "likeName",
                        "_a%"});
#line 2741
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table426, "Given ");
#line 2748
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table427 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table427.AddRow(new string[] {
                        "newName",
                        "[[updateName]]"});
            table427.AddRow(new string[] {
                        "newMatch",
                        "[[likeName]]"});
#line 2749
 testRunner.And("Declare variables as", ((string)(null)), table427, "And ");
#line 2753
 testRunner.And("I have the following sql statement \"UPDATE person SET name = \'Mad Hatter\' WHERE n" +
                    "ame = @newName; SELECT * FROM person WHERE name LIKE @newMatch;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2754
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table428 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table428.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 2755
 testRunner.Then("Outputs are as follows", ((string)(null)), table428, "Then ");
#line 2758
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2759
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table429 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table429.AddRow(new string[] {
                        "TableCopy().name",
                        "Mad Hatter"});
#line 2760
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table429, "Then ");
#line 2763
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table430 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "newName",
                        "newMatch"});
            table430.AddRow(new string[] {
                        "String",
                        "[[updateName]] = Hatter",
                        "[[likeName]] = _a%"});
#line 2764
 testRunner.And("the debug inputs as", ((string)(null)), table430, "And ");
#line hidden
            TechTalk.SpecFlow.Table table431 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table431.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Mad Hatter"});
#line 2767
 testRunner.And("the debug output as", ((string)(null)), table431, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update statement with variable in where clause and Like starts with and at least " +
            "three characters in length")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void UpdateStatementWithVariableInWhereClauseAndLikeStartsWithAndAtLeastThreeCharactersInLength()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update statement with variable in where clause and Like starts with and at least " +
                    "three characters in length", ((string[])(null)));
#line 2771
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table432 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table432.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table432.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table432.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table432.AddRow(new string[] {
                        "updateName",
                        "Hatter"});
            table432.AddRow(new string[] {
                        "likeName",
                        "M_%_%"});
#line 2772
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table432, "Given ");
#line 2779
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table433 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table433.AddRow(new string[] {
                        "newName",
                        "[[updateName]]"});
            table433.AddRow(new string[] {
                        "newMatch",
                        "[[likeName]]"});
#line 2780
 testRunner.And("Declare variables as", ((string)(null)), table433, "And ");
#line 2784
 testRunner.And("I have the following sql statement \"UPDATE person SET name = \'Mad Hatter\' WHERE n" +
                    "ame = @newName; SELECT * FROM person WHERE name LIKE @newMatch;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2785
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table434 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table434.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 2786
 testRunner.Then("Outputs are as follows", ((string)(null)), table434, "Then ");
#line 2789
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2790
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table435 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table435.AddRow(new string[] {
                        "TableCopy().name",
                        "Mad Hatter"});
#line 2791
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table435, "Then ");
#line 2794
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table436 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "newName",
                        "newMatch"});
            table436.AddRow(new string[] {
                        "String",
                        "[[updateName]] = Hatter",
                        "[[likeName]] = M_%_%"});
#line 2795
 testRunner.And("the debug inputs as", ((string)(null)), table436, "And ");
#line hidden
            TechTalk.SpecFlow.Table table437 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table437.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Mad Hatter"});
#line 2798
 testRunner.And("the debug output as", ((string)(null)), table437, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update statement with variable in where clause and Like starts with and ends with" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void UpdateStatementWithVariableInWhereClauseAndLikeStartsWithAndEndsWith()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update statement with variable in where clause and Like starts with and ends with" +
                    "", ((string[])(null)));
#line 2802
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table438 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table438.AddRow(new string[] {
                        "person().name",
                        "Bob"});
            table438.AddRow(new string[] {
                        "person().name",
                        "Alice"});
            table438.AddRow(new string[] {
                        "person().name",
                        "Hatter"});
            table438.AddRow(new string[] {
                        "updateName",
                        "Hatter"});
            table438.AddRow(new string[] {
                        "likeName",
                        "M%r"});
#line 2803
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table438, "Given ");
#line 2810
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table439 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table439.AddRow(new string[] {
                        "newName",
                        "[[updateName]]"});
            table439.AddRow(new string[] {
                        "newMatch",
                        "[[likeName]]"});
#line 2811
 testRunner.And("Declare variables as", ((string)(null)), table439, "And ");
#line 2815
 testRunner.And("I have the following sql statement \"UPDATE person SET name = \'Mad Hatter\' WHERE n" +
                    "ame = @newName; SELECT * FROM person WHERE name LIKE @newMatch;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2816
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table440 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table440.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 2817
 testRunner.Then("Outputs are as follows", ((string)(null)), table440, "Then ");
#line 2820
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2821
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table441 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table441.AddRow(new string[] {
                        "TableCopy().name",
                        "Mad Hatter"});
#line 2822
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table441, "Then ");
#line 2825
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table442 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "newName",
                        "newMatch"});
            table442.AddRow(new string[] {
                        "String",
                        "[[updateName]] = Hatter",
                        "[[likeName]] = M%r"});
#line 2826
 testRunner.And("the debug inputs as", ((string)(null)), table442, "And ");
#line hidden
            TechTalk.SpecFlow.Table table443 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table443.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Mad Hatter"});
#line 2829
 testRunner.And("the debug output as", ((string)(null)), table443, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("aggregate functions Select with AVG")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void AggregateFunctionsSelectWithAVG()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("aggregate functions Select with AVG", ((string[])(null)));
#line 2833
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table444 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[avg_tests]]",
                        ""});
            table444.AddRow(new string[] {
                        "avg_tests().val",
                        "1"});
            table444.AddRow(new string[] {
                        "avg_tests().val",
                        "2"});
            table444.AddRow(new string[] {
                        "avg_tests().val",
                        "10.1"});
            table444.AddRow(new string[] {
                        "avg_tests().val",
                        "20.5"});
            table444.AddRow(new string[] {
                        "avg_tests().val",
                        "8"});
#line 2834
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table444, "Given ");
#line 2841
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2842
 testRunner.And("I have the following sql statement \"SELECT avg(val) as val FROM avg_tests;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2843
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table445 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table445.AddRow(new string[] {
                        "val",
                        "[[TableCopy().val]]"});
#line 2844
 testRunner.Then("Outputs are as follows", ((string)(null)), table445, "Then ");
#line 2847
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2848
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table446 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table446.AddRow(new string[] {
                        "TableCopy().val",
                        "8.32"});
#line 2849
 testRunner.Then("recordset \"[[TableCopy(*).val]]\"  will be", ((string)(null)), table446, "Then ");
#line 2852
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table447 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table447.AddRow(new string[] {
                        "String"});
#line 2853
 testRunner.And("the debug inputs as", ((string)(null)), table447, "And ");
#line hidden
            TechTalk.SpecFlow.Table table448 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table448.AddRow(new string[] {
                        "[[TableCopy(1).val]] = 8.32"});
#line 2856
 testRunner.And("the debug output as", ((string)(null)), table448, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("aggregate functions  Select with AVG using variable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void AggregateFunctionsSelectWithAVGUsingVariable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("aggregate functions  Select with AVG using variable", ((string[])(null)));
#line 2860
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table449 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[avg_tests]]",
                        ""});
            table449.AddRow(new string[] {
                        "avg_tests().val",
                        "1"});
            table449.AddRow(new string[] {
                        "avg_tests().val",
                        "2"});
            table449.AddRow(new string[] {
                        "avg_tests().val",
                        "10.1"});
            table449.AddRow(new string[] {
                        "avg_tests().val",
                        "20.5"});
            table449.AddRow(new string[] {
                        "avg_tests().val",
                        "8"});
            table449.AddRow(new string[] {
                        "avg_variable",
                        "2"});
#line 2861
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table449, "Given ");
#line 2869
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table450 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table450.AddRow(new string[] {
                        "newName",
                        "[[avg_variable]]"});
#line 2870
 testRunner.And("Declare variables as", ((string)(null)), table450, "And ");
#line 2873
 testRunner.And("I have the following sql statement \"SELECT avg(val) as val FROM avg_tests where v" +
                    "al > @newName ;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2874
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table451 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table451.AddRow(new string[] {
                        "val",
                        "[[TableCopy().val]]"});
#line 2875
 testRunner.Then("Outputs are as follows", ((string)(null)), table451, "Then ");
#line 2878
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2879
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table452 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table452.AddRow(new string[] {
                        "TableCopy().val",
                        "12.86666666666670"});
#line 2880
 testRunner.Then("recordset \"[[TableCopy(*).val]]\"  will be", ((string)(null)), table452, "Then ");
#line 2883
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table453 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "newName"});
            table453.AddRow(new string[] {
                        "String",
                        "[[avg_variable]] = 2"});
#line 2884
 testRunner.And("the debug inputs as", ((string)(null)), table453, "And ");
#line hidden
            TechTalk.SpecFlow.Table table454 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table454.AddRow(new string[] {
                        "[[TableCopy(1).val]] = 12.86666666666670"});
#line 2887
 testRunner.And("the debug output as", ((string)(null)), table454, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("aggregate functions Select With MAX")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void AggregateFunctionsSelectWithMAX()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("aggregate functions Select With MAX", ((string[])(null)));
#line 2891
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table455 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table455.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table455.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table455.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table455.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table455.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table455.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 2892
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table455, "Given ");
#line 2900
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2901
 testRunner.And("I have the following sql statement \"SELECT MAX(age) as MaxAge from person;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2902
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table456 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table456.AddRow(new string[] {
                        "MaxAge",
                        "[[TableCopy().MaxAge]]"});
#line 2903
 testRunner.Then("Outputs are as follows", ((string)(null)), table456, "Then ");
#line 2906
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table457 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table457.AddRow(new string[] {
                        "MaxAge",
                        "[[TableCopy().MaxAge]]"});
#line 2907
 testRunner.And("Outputs are as follows", ((string)(null)), table457, "And ");
#line 2910
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table458 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table458.AddRow(new string[] {
                        "TableCopy(1).MaxAge",
                        "31"});
#line 2911
 testRunner.Then("recordset \"[[TableCopy(*).MaxAge]]\"  will be", ((string)(null)), table458, "Then ");
#line 2914
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table459 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table459.AddRow(new string[] {
                        "[[TableCopy(1).MaxAge]] = 31"});
#line 2915
 testRunner.And("the debug output as", ((string)(null)), table459, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("aggregate functions Select With MAX with Max in where clause")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void AggregateFunctionsSelectWithMAXWithMaxInWhereClause()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("aggregate functions Select With MAX with Max in where clause", ((string[])(null)));
#line 2919
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table460 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table460.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table460.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table460.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table460.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table460.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table460.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 2920
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table460, "Given ");
#line 2929
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2930
 testRunner.And("I have the following sql statement \"SELECT * from person where age  =(select MAX(" +
                    "age) from person);\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2931
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table461 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table461.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table461.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 2932
 testRunner.Then("Outputs are as follows", ((string)(null)), table461, "Then ");
#line 2936
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2937
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table462 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table462.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
#line 2938
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table462, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table463 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table463.AddRow(new string[] {
                        "TableCopy(2).age",
                        "31"});
#line 2941
  testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table463, "Then ");
#line 2944
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table464 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table464.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Alice"});
            table464.AddRow(new string[] {
                        "[[TableCopy(1).age]] = 31"});
#line 2945
 testRunner.And("the debug output as", ((string)(null)), table464, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("aggregate functions Select With ROUND")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void AggregateFunctionsSelectWithROUND()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("aggregate functions Select With ROUND", ((string[])(null)));
#line 2950
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table465 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[avg_tests]]",
                        ""});
            table465.AddRow(new string[] {
                        "avg_tests().val",
                        "1"});
            table465.AddRow(new string[] {
                        "avg_tests().val",
                        "2"});
            table465.AddRow(new string[] {
                        "avg_tests().val",
                        "10.1"});
            table465.AddRow(new string[] {
                        "avg_tests().val",
                        "20.5"});
            table465.AddRow(new string[] {
                        "avg_tests().val",
                        "8"});
            table465.AddRow(new string[] {
                        "avg_variable",
                        "2"});
#line 2951
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table465, "Given ");
#line 2959
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table466 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table466.AddRow(new string[] {
                        "newName",
                        "[[avg_variable]]"});
#line 2960
 testRunner.And("Declare variables as", ((string)(null)), table466, "And ");
#line 2963
 testRunner.And("I have the following sql statement \"SELECT round(avg(val),2)  as val FROM avg_tes" +
                    "ts where val > @newName ;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2964
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table467 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table467.AddRow(new string[] {
                        "val",
                        "[[TableCopy().val]]"});
#line 2965
 testRunner.Then("Outputs are as follows", ((string)(null)), table467, "Then ");
#line 2968
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2969
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table468 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table468.AddRow(new string[] {
                        "TableCopy().val",
                        "12.87"});
#line 2970
 testRunner.Then("recordset \"[[TableCopy(*).val]]\"  will be", ((string)(null)), table468, "Then ");
#line 2973
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table469 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query",
                        "newName"});
            table469.AddRow(new string[] {
                        "String",
                        "[[avg_variable]] = 2"});
#line 2974
 testRunner.And("the debug inputs as", ((string)(null)), table469, "And ");
#line hidden
            TechTalk.SpecFlow.Table table470 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table470.AddRow(new string[] {
                        "[[TableCopy(1).val]] = 12.87"});
#line 2977
 testRunner.And("the debug output as", ((string)(null)), table470, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("aggregate functions Select With MIN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void AggregateFunctionsSelectWithMIN()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("aggregate functions Select With MIN", ((string[])(null)));
#line 2981
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table471 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table471.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table471.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table471.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table471.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table471.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table471.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 2982
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table471, "Given ");
#line 2990
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2991
 testRunner.And("I have the following sql statement \"SELECT MIN(age) as MinAge from person;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2992
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table472 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table472.AddRow(new string[] {
                        "MinAge",
                        "[[TableCopy().MinAge]]"});
#line 2993
 testRunner.Then("Outputs are as follows", ((string)(null)), table472, "Then ");
#line 2996
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table473 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table473.AddRow(new string[] {
                        "MinAge",
                        "[[TableCopy().MinAge]]"});
#line 2997
 testRunner.And("Outputs are as follows", ((string)(null)), table473, "And ");
#line 3000
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table474 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table474.AddRow(new string[] {
                        "TableCopy(1).MinAge",
                        "19"});
#line 3001
 testRunner.Then("recordset \"[[TableCopy(*).MinAge]]\"  will be", ((string)(null)), table474, "Then ");
#line 3004
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table475 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table475.AddRow(new string[] {
                        "[[TableCopy(1).MinAge]] = 19"});
#line 3005
 testRunner.And("the debug output as", ((string)(null)), table475, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Aggregate functions Select With MIN with min in where clause")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void AggregateFunctionsSelectWithMINWithMinInWhereClause()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Aggregate functions Select With MIN with min in where clause", ((string[])(null)));
#line 3009
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table476 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table476.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table476.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table476.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table476.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table476.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table476.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 3010
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table476, "Given ");
#line 3019
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3020
 testRunner.And("I have the following sql statement \"SELECT * from person where age  =(select MIN(" +
                    "age) from person);\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3021
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table477 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table477.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table477.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 3022
 testRunner.Then("Outputs are as follows", ((string)(null)), table477, "Then ");
#line 3026
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3027
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table478 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table478.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Hatter"});
#line 3028
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table478, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table479 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table479.AddRow(new string[] {
                        "TableCopy(2).age",
                        "19"});
#line 3031
  testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table479, "Then ");
#line 3034
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table480 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table480.AddRow(new string[] {
                        "[[TableCopy(1).name]] = Hatter"});
            table480.AddRow(new string[] {
                        "[[TableCopy(1).age]] = 19"});
#line 3035
 testRunner.And("the debug output as", ((string)(null)), table480, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("aggregate functions Select With SUM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void AggregateFunctionsSelectWithSUM()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("aggregate functions Select With SUM", ((string[])(null)));
#line 3040
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table481 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table481.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table481.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table481.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table481.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table481.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table481.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 3041
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table481, "Given ");
#line 3050
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3051
 testRunner.And("I have the following sql statement \"SELECT SUM(age)  as ages from person;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3052
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table482 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table482.AddRow(new string[] {
                        "ages",
                        "[[TableCopy().ages]]"});
#line 3053
 testRunner.Then("Outputs are as follows", ((string)(null)), table482, "Then ");
#line 3056
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3057
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table483 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table483.AddRow(new string[] {
                        "TableCopy(2).ages",
                        "75"});
#line 3058
 testRunner.Then("recordset \"[[TableCopy(*).ages]]\"  will be", ((string)(null)), table483, "Then ");
#line 3061
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table484 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table484.AddRow(new string[] {
                        "[[TableCopy(1).ages]] = 75"});
#line 3062
 testRunner.And("the debug output as", ((string)(null)), table484, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("String Function Select With Substr")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void StringFunctionSelectWithSubstr()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("String Function Select With Substr", ((string[])(null)));
#line 3066
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table485 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table485.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table485.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table485.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
#line 3067
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table485, "Given ");
#line 3073
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3074
 testRunner.And("I have the following sql statement \"SELECT substr(name, 0, 4) as name from person" +
                    ";\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3075
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table486 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table486.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 3076
 testRunner.Then("Outputs are as follows", ((string)(null)), table486, "Then ");
#line 3079
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3080
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table487 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table487.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
            table487.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Ali"});
            table487.AddRow(new string[] {
                        "TableCopy(3).name",
                        "Hat"});
#line 3081
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table487, "Then ");
#line 3086
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table488 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table488.AddRow(new string[] {
                        "[[TableCopy(3).name]] = Hat"});
#line 3087
 testRunner.And("the debug output as", ((string)(null)), table488, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("String Function Select With Trim")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void StringFunctionSelectWithTrim()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("String Function Select With Trim", ((string[])(null)));
#line 3091
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table489 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table489.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table489.AddRow(new string[] {
                        "person(2).name",
                        "Alice^^"});
            table489.AddRow(new string[] {
                        "person(3).name",
                        "Hatter^"});
#line 3092
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table489, "Given ");
#line 3098
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3099
 testRunner.And("I have the following sql statement \"SELECT trim(name, \'^\') as name from person;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3100
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table490 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table490.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 3101
 testRunner.Then("Outputs are as follows", ((string)(null)), table490, "Then ");
#line 3104
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3105
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table491 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table491.AddRow(new string[] {
                        "[[TableCopy(1).name",
                        "Bob"});
            table491.AddRow(new string[] {
                        "[[TableCopy(2).name]]",
                        "Alice"});
            table491.AddRow(new string[] {
                        "[[TableCopy(3).name]]",
                        "Hatter"});
#line 3106
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table491, "Then ");
#line 3111
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table492 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table492.AddRow(new string[] {
                        "[[TableCopy(3).name]] = Hatter"});
#line 3112
 testRunner.And("the debug output as", ((string)(null)), table492, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("String  Function Select With LTrim")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void StringFunctionSelectWithLTrim()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("String  Function Select With LTrim", ((string[])(null)));
#line 3116
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table493 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table493.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table493.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table493.AddRow(new string[] {
                        "person(3).name",
                        "^^^Hatter"});
#line 3117
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table493, "Given ");
#line 3123
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3124
 testRunner.And("I have the following sql statement \"SELECT ltrim(name, \'^\') as name from person;\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3125
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table494 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table494.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 3126
 testRunner.Then("Outputs are as follows", ((string)(null)), table494, "Then ");
#line 3129
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3130
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table495 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table495.AddRow(new string[] {
                        "[[TableCopy(1).name",
                        "Bob"});
            table495.AddRow(new string[] {
                        "[[TableCopy(2).name]]",
                        "Alice"});
            table495.AddRow(new string[] {
                        "[[TableCopy(3).name]]",
                        "Hatter"});
#line 3131
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table495, "Then ");
#line 3136
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table496 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table496.AddRow(new string[] {
                        "[[TableCopy(3).name]] = Hatter"});
#line 3137
 testRunner.And("the debug output as", ((string)(null)), table496, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("String  Function Select With RTrim")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void StringFunctionSelectWithRTrim()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("String  Function Select With RTrim", ((string[])(null)));
#line 3141
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table497 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table497.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table497.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table497.AddRow(new string[] {
                        "person(3).name",
                        "Hatter^^^"});
#line 3142
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table497, "Given ");
#line 3148
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3149
 testRunner.And("I have the following sql statement \"SELECT rtrim(name, \'^\') as name from person;\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3150
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table498 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table498.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 3151
 testRunner.Then("Outputs are as follows", ((string)(null)), table498, "Then ");
#line 3154
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3155
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table499 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table499.AddRow(new string[] {
                        "[[TableCopy(1).name",
                        "Bob"});
            table499.AddRow(new string[] {
                        "[[TableCopy(2).name]]",
                        "Alice"});
            table499.AddRow(new string[] {
                        "[[TableCopy(3).name]]",
                        "Hatter"});
#line 3156
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table499, "Then ");
#line 3161
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table500 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table500.AddRow(new string[] {
                        "[[TableCopy(3).name]] = Hatter"});
#line 3162
 testRunner.And("the debug output as", ((string)(null)), table500, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("String  Function Select With Length")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void StringFunctionSelectWithLength()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("String  Function Select With Length", ((string[])(null)));
#line 3166
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table501 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table501.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table501.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table501.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
#line 3167
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table501, "Given ");
#line 3173
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3174
 testRunner.And("I have the following sql statement \"SELECT length(name) as name from person;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3175
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table502 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table502.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 3176
 testRunner.Then("Outputs are as follows", ((string)(null)), table502, "Then ");
#line 3179
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3180
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table503 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table503.AddRow(new string[] {
                        "TableCopy(1).name",
                        "3"});
            table503.AddRow(new string[] {
                        "TableCopy(2).name",
                        "5"});
            table503.AddRow(new string[] {
                        "TableCopy(3).name",
                        "6"});
#line 3181
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table503, "Then ");
#line 3186
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table504 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table504.AddRow(new string[] {
                        "[[TableCopy(3).name]] = 6"});
#line 3187
 testRunner.And("the debug output as", ((string)(null)), table504, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("String  Function Select With Complex Length")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void StringFunctionSelectWithComplexLength()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("String  Function Select With Complex Length", ((string[])(null)));
#line 3191
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table505 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table505.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table505.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table505.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
#line 3192
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table505, "Given ");
#line 3198
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3199
 testRunner.And("I have the following sql statement \"SELECT name, length(name) as name2 FROM perso" +
                    "n ORDER BY length(name) DESC\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3200
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table506 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table506.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table506.AddRow(new string[] {
                        "name2",
                        "[[TableCopy().name2]]"});
#line 3201
 testRunner.Then("Outputs are as follows", ((string)(null)), table506, "Then ");
#line 3205
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3206
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table507 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table507.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Hatter"});
            table507.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
            table507.AddRow(new string[] {
                        "TableCopy(3).name",
                        "Bob"});
#line 3207
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table507, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table508 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table508.AddRow(new string[] {
                        "TableCopy(1).name2",
                        "6"});
            table508.AddRow(new string[] {
                        "TableCopy(2).name2",
                        "5"});
            table508.AddRow(new string[] {
                        "TableCopy(3).name2",
                        "3"});
#line 3212
 testRunner.Then("recordset \"[[TableCopy(*).name2]]\"  will be", ((string)(null)), table508, "Then ");
#line 3217
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table509 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table509.AddRow(new string[] {
                        "[[TableCopy(3).name]] = Bob"});
            table509.AddRow(new string[] {
                        "[[TableCopy(3).name2]] = 3"});
#line 3218
 testRunner.And("the debug output as", ((string)(null)), table509, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("String  Function Select With Replace Then Select")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void StringFunctionSelectWithReplaceThenSelect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("String  Function Select With Replace Then Select", ((string[])(null)));
#line 3223
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table510 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table510.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table510.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table510.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table510.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table510.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table510.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 3224
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table510, "Given ");
#line 3233
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3234
 testRunner.And("I have the following sql statement \"REPLACE INTO person (name, age) VALUES (\'Robo" +
                    "cop\', 1000) ;select * from person\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3235
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table511 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table511.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 3236
 testRunner.Then("Outputs are as follows", ((string)(null)), table511, "Then ");
#line 3239
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3240
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table512 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table512.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
            table512.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
            table512.AddRow(new string[] {
                        "TableCopy(3).name",
                        "Hatter"});
            table512.AddRow(new string[] {
                        "TableCopy(4).name",
                        "Robocop"});
#line 3241
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table512, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table513 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table513.AddRow(new string[] {
                        "TableCopy(1).age",
                        "25"});
            table513.AddRow(new string[] {
                        "TableCopy(2).age",
                        "31"});
            table513.AddRow(new string[] {
                        "TableCopy(3).age",
                        "19"});
            table513.AddRow(new string[] {
                        "TableCopy(4).age",
                        "1000"});
#line 3247
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table513, "Then ");
#line 3253
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table514 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table514.AddRow(new string[] {
                        "[[TableCopy(4).name]] = Robocop"});
            table514.AddRow(new string[] {
                        "[[TableCopy(4).age]] = 1000"});
#line 3254
 testRunner.And("the debug output as", ((string)(null)), table514, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("String  Function Select With Replace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void StringFunctionSelectWithReplace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("String  Function Select With Replace", ((string[])(null)));
#line 3259
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table515 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table515.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table515.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table515.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table515.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table515.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table515.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 3260
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table515, "Given ");
#line 3269
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3270
 testRunner.And("I have the following sql statement \"REPLACE INTO person (name, age) VALUES (\'Robo" +
                    "cop\', 1000)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3271
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table516 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table516.AddRow(new string[] {
                        "records_affected",
                        "[[Table1Copy().records_affected]]"});
#line 3272
 testRunner.Then("Outputs are as follows", ((string)(null)), table516, "Then ");
#line 3275
 testRunner.And("Recordset is \"Table1Copy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3276
 testRunner.When("I update Recordset to \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3277
 testRunner.Then("Recordset is \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table517 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table517.AddRow(new string[] {
                        "records_affected",
                        "[[newPerson().records_affected]]"});
#line 3278
 testRunner.And("Outputs are as follows", ((string)(null)), table517, "And ");
#line 3281
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table518 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table518.AddRow(new string[] {
                        "newPerson().records_affected",
                        "1"});
#line 3282
 testRunner.Then("recordset \"[[newPerson(*).records_affected]]\"  will be", ((string)(null)), table518, "Then ");
#line 3285
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table519 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table519.AddRow(new string[] {
                        "[[newPerson(1).records_affected]] = 1"});
#line 3286
 testRunner.And("the debug output as", ((string)(null)), table519, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("String  Function Select With INSERT Then Select")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void StringFunctionSelectWithINSERTThenSelect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("String  Function Select With INSERT Then Select", ((string[])(null)));
#line 3290
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table520 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table520.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table520.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table520.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table520.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table520.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table520.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 3291
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table520, "Given ");
#line 3300
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3301
 testRunner.And("I have the following sql statement \"INSERT INTO person (name, age) VALUES (\'Roboc" +
                    "op\', 1000) ;select * from person\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3302
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table521 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table521.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 3303
 testRunner.Then("Outputs are as follows", ((string)(null)), table521, "Then ");
#line 3306
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3307
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table522 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table522.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
            table522.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
            table522.AddRow(new string[] {
                        "TableCopy(3).name",
                        "Hatter"});
            table522.AddRow(new string[] {
                        "TableCopy(4).name",
                        "Robocop"});
#line 3308
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table522, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table523 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table523.AddRow(new string[] {
                        "TableCopy(1).age",
                        "25"});
            table523.AddRow(new string[] {
                        "TableCopy(2).age",
                        "31"});
            table523.AddRow(new string[] {
                        "TableCopy(3).age",
                        "19"});
            table523.AddRow(new string[] {
                        "TableCopy(4).age",
                        "1000"});
#line 3314
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table523, "Then ");
#line 3320
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table524 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table524.AddRow(new string[] {
                        "[[TableCopy(4).name]] = Robocop"});
            table524.AddRow(new string[] {
                        "[[TableCopy(4).age]] = 1000"});
#line 3321
 testRunner.And("the debug output as", ((string)(null)), table524, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("String  Function Select With Insert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void StringFunctionSelectWithInsert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("String  Function Select With Insert", ((string[])(null)));
#line 3326
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table525 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table525.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table525.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table525.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table525.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table525.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table525.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 3327
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table525, "Given ");
#line 3336
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3337
 testRunner.And("I have the following sql statement \"INSERT INTO person (name, age) VALUES (\'Roboc" +
                    "op\', 1000)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3338
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table526 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table526.AddRow(new string[] {
                        "records_affected",
                        "[[Table1Copy().records_affected]]"});
#line 3339
 testRunner.Then("Outputs are as follows", ((string)(null)), table526, "Then ");
#line 3342
 testRunner.And("Recordset is \"Table1Copy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3343
 testRunner.When("I update Recordset to \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3344
 testRunner.Then("Recordset is \"newPerson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table527 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table527.AddRow(new string[] {
                        "records_affected",
                        "[[newPerson().records_affected]]"});
#line 3345
 testRunner.And("Outputs are as follows", ((string)(null)), table527, "And ");
#line 3348
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table528 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table528.AddRow(new string[] {
                        "newPerson().records_affected",
                        "1"});
#line 3349
 testRunner.Then("recordset \"[[newPerson(*).records_affected]]\"  will be", ((string)(null)), table528, "Then ");
#line 3352
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table529 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table529.AddRow(new string[] {
                        "[[newPerson(1).records_affected]] = 1"});
#line 3353
 testRunner.And("the debug output as", ((string)(null)), table529, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("String Function Select With INSTR")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void StringFunctionSelectWithINSTR()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("String Function Select With INSTR", ((string[])(null)));
#line 3357
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table530 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table530.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table530.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table530.AddRow(new string[] {
                        "person(3).name",
                        "Mad Hatter"});
#line 3358
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table530, "Given ");
#line 3364
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3365
 testRunner.And("I have the following sql statement \"SELECT INSTR(name,\'Hatter\') as position from " +
                    "person;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3366
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table531 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table531.AddRow(new string[] {
                        "position",
                        "[[TableCopy().position]]"});
#line 3367
 testRunner.Then("Outputs are as follows", ((string)(null)), table531, "Then ");
#line 3370
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3371
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table532 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table532.AddRow(new string[] {
                        "TableCopy(1).position",
                        "0"});
            table532.AddRow(new string[] {
                        "TableCopy(2).position",
                        "0"});
            table532.AddRow(new string[] {
                        "TableCopy(3).position",
                        "5"});
#line 3372
 testRunner.Then("recordset \"[[TableCopy(*).position]]\"  will be", ((string)(null)), table532, "Then ");
#line 3377
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table533 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table533.AddRow(new string[] {
                        "[[TableCopy(3).position]] = 5"});
#line 3378
 testRunner.And("the debug output as", ((string)(null)), table533, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("String Function Select With Upper")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void StringFunctionSelectWithUpper()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("String Function Select With Upper", ((string[])(null)));
#line 3382
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table534 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table534.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table534.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table534.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
#line 3383
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table534, "Given ");
#line 3389
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3390
 testRunner.And("I have the following sql statement \"SELECT upper(name) as name from person;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3391
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table535 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table535.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 3392
 testRunner.Then("Outputs are as follows", ((string)(null)), table535, "Then ");
#line 3395
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3396
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table536 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table536.AddRow(new string[] {
                        "TableCopy(1).name",
                        "BOB"});
            table536.AddRow(new string[] {
                        "TableCopy(2).name",
                        "ALICE"});
            table536.AddRow(new string[] {
                        "TableCopy(3).name",
                        "HATTER"});
#line 3397
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table536, "Then ");
#line 3402
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table537 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table537.AddRow(new string[] {
                        "[[TableCopy(3).name]] = HATTER"});
#line 3403
 testRunner.And("the debug output as", ((string)(null)), table537, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("String Function Select With Lower")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void StringFunctionSelectWithLower()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("String Function Select With Lower", ((string[])(null)));
#line 3407
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table538 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table538.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table538.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table538.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
#line 3408
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table538, "Given ");
#line 3414
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3415
 testRunner.And("I have the following sql statement \"SELECT lower(name) as name from person;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3416
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table539 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table539.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 3417
 testRunner.Then("Outputs are as follows", ((string)(null)), table539, "Then ");
#line 3420
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3421
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table540 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table540.AddRow(new string[] {
                        "TableCopy(1).name",
                        "bob"});
            table540.AddRow(new string[] {
                        "TableCopy(2).name",
                        "alice"});
            table540.AddRow(new string[] {
                        "TableCopy(3).name",
                        "hatter"});
#line 3422
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table540, "Then ");
#line 3427
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table541 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table541.AddRow(new string[] {
                        "[[TableCopy(3).name]] = hatter"});
#line 3428
 testRunner.And("the debug output as", ((string)(null)), table541, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select All UNION ALL clause which DOES remove duplicates.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllUNIONALLClauseWhichDOESRemoveDuplicates_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select All UNION ALL clause which DOES remove duplicates.", ((string[])(null)));
#line 3432
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table542 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table542.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table542.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table542.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table542.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table542.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table542.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 3433
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table542, "Given ");
#line 3442
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3443
 testRunner.And("I have the following sql statement \"SELECT * from person UNION  SELECT * from per" +
                    "son;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3444
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table543 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table543.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table543.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 3445
 testRunner.Then("Outputs are as follows", ((string)(null)), table543, "Then ");
#line 3449
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3450
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table544 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table544.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
            table544.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
            table544.AddRow(new string[] {
                        "TableCopy(3).name",
                        "Hatter"});
#line 3451
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table544, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table545 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table545.AddRow(new string[] {
                        "TableCopy(1).age",
                        "25"});
            table545.AddRow(new string[] {
                        "TableCopy(2).age",
                        "31"});
            table545.AddRow(new string[] {
                        "TableCopy(3).age",
                        "19"});
#line 3456
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table545, "Then ");
#line 3461
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table546 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table546.AddRow(new string[] {
                        "[[TableCopy(3).name]] = Hatter"});
            table546.AddRow(new string[] {
                        "[[TableCopy(3).age]] = 19"});
#line 3462
 testRunner.And("the debug output as", ((string)(null)), table546, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select All UNION  clause which DOES NOT remove duplicates.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectAllUNIONClauseWhichDOESNOTRemoveDuplicates_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select All UNION  clause which DOES NOT remove duplicates.", ((string[])(null)));
#line 3467
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table547 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table547.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table547.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table547.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table547.AddRow(new string[] {
                        "person(1).age",
                        "25"});
            table547.AddRow(new string[] {
                        "person(2).age",
                        "31"});
            table547.AddRow(new string[] {
                        "person(3).age",
                        "19"});
#line 3468
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table547, "Given ");
#line 3477
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3478
 testRunner.And("I have the following sql statement \"SELECT * from person UNION ALL  SELECT * from" +
                    " person;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3479
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table548 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table548.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
            table548.AddRow(new string[] {
                        "age",
                        "[[TableCopy().age]]"});
#line 3480
 testRunner.Then("Outputs are as follows", ((string)(null)), table548, "Then ");
#line 3484
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3485
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table549 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table549.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
            table549.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
            table549.AddRow(new string[] {
                        "TableCopy(3).name",
                        "Hatter"});
            table549.AddRow(new string[] {
                        "TableCopy(4).name",
                        "Bob"});
            table549.AddRow(new string[] {
                        "TableCopy(5).name",
                        "Alice"});
            table549.AddRow(new string[] {
                        "TableCopy(6).name",
                        "Hatter"});
#line 3486
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table549, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table550 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table550.AddRow(new string[] {
                        "TableCopy(1).age",
                        "25"});
            table550.AddRow(new string[] {
                        "TableCopy(2).age",
                        "31"});
            table550.AddRow(new string[] {
                        "TableCopy(3).age",
                        "19"});
            table550.AddRow(new string[] {
                        "TableCopy(4).age",
                        "25"});
            table550.AddRow(new string[] {
                        "TableCopy(5).age",
                        "31"});
            table550.AddRow(new string[] {
                        "TableCopy(6).age",
                        "19"});
#line 3494
 testRunner.Then("recordset \"[[TableCopy(*).age]]\"  will be", ((string)(null)), table550, "Then ");
#line 3502
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table551 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table551.AddRow(new string[] {
                        "[[TableCopy(6).name]] = Hatter"});
            table551.AddRow(new string[] {
                        "[[TableCopy(6).age]] = 19"});
#line 3503
 testRunner.And("the debug output as", ((string)(null)), table551, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("math functions Select With ABS")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void MathFunctionsSelectWithABS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("math functions Select With ABS", ((string[])(null)));
#line 3508
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table552 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[avg_tests]]",
                        ""});
            table552.AddRow(new string[] {
                        "avg_tests().val",
                        "-1000"});
#line 3509
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table552, "Given ");
#line 3512
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3513
 testRunner.And("I have the following sql statement \"SELECT ABS(val) absValue from avg_tests;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3514
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table553 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table553.AddRow(new string[] {
                        "absValue",
                        "[[TableCopy().absValue]]"});
#line 3515
 testRunner.Then("Outputs are as follows", ((string)(null)), table553, "Then ");
#line 3518
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3519
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table554 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table554.AddRow(new string[] {
                        "TableCopy().absValue",
                        "1000"});
#line 3520
 testRunner.Then("recordset \"[[TableCopy(*).absValue]]\"  will be", ((string)(null)), table554, "Then ");
#line 3523
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table555 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table555.AddRow(new string[] {
                        "String"});
#line 3524
 testRunner.And("the debug inputs as", ((string)(null)), table555, "And ");
#line hidden
            TechTalk.SpecFlow.Table table556 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table556.AddRow(new string[] {
                        "[[TableCopy(1).absValue]] = 1000"});
#line 3527
 testRunner.And("the debug output as", ((string)(null)), table556, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select With Self Join")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void SelectWithSelfJoin()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select With Self Join", ((string[])(null)));
#line 3531
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table557 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table557.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table557.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table557.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table557.AddRow(new string[] {
                        "person(4).name",
                        "Rabbit"});
            table557.AddRow(new string[] {
                        "person(5).name",
                        "Puff"});
            table557.AddRow(new string[] {
                        "person(1).reportsto",
                        "Puff"});
            table557.AddRow(new string[] {
                        "person(2).reportsto",
                        "Bob"});
            table557.AddRow(new string[] {
                        "person(3).reportsto",
                        "Bob"});
            table557.AddRow(new string[] {
                        "person(4).reportsto",
                        "Bob"});
            table557.AddRow(new string[] {
                        "person(5).reportsto",
                        "Puff"});
#line 3532
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table557, "Given ");
#line 3544
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3545
 testRunner.And("I have the following sql statement \"SELECT e.name as Manager,f.name as DirectRepo" +
                    "rt from person e inner join person f on e.reportsto = f.name;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3546
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table558 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table558.AddRow(new string[] {
                        "Manager",
                        "[[TableCopy().Manager]]"});
            table558.AddRow(new string[] {
                        "DirectReport",
                        "[[TableCopy().DirectReport]]"});
#line 3547
 testRunner.Then("Outputs are as follows", ((string)(null)), table558, "Then ");
#line 3551
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3552
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table559 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table559.AddRow(new string[] {
                        "TableCopy(1).Manager",
                        "Bob"});
            table559.AddRow(new string[] {
                        "TableCopy(2).Manager",
                        "Alice"});
            table559.AddRow(new string[] {
                        "TableCopy(3).Manager",
                        "Hatter"});
            table559.AddRow(new string[] {
                        "TableCopy(4).Manager",
                        "Rabbit"});
            table559.AddRow(new string[] {
                        "TableCopy(5).Manager",
                        "Puff"});
#line 3553
 testRunner.Then("recordset \"[[TableCopy(*).Manager]]\"  will be", ((string)(null)), table559, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table560 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table560.AddRow(new string[] {
                        "TableCopy(1).DirectReport",
                        "Puff"});
            table560.AddRow(new string[] {
                        "TableCopy(2).DirectReport",
                        "Bob"});
            table560.AddRow(new string[] {
                        "TableCopy(3).DirectReport",
                        "Bob"});
            table560.AddRow(new string[] {
                        "TableCopy(4).DirectReport",
                        "Bob"});
            table560.AddRow(new string[] {
                        "TableCopy(5).DirectReport",
                        "Puff"});
#line 3560
 testRunner.Then("recordset \"[[TableCopy(*).DirectReport]]\"  will be", ((string)(null)), table560, "Then ");
#line 3567
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table561 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table561.AddRow(new string[] {
                        "[[TableCopy(5).Manager]] = Puff"});
            table561.AddRow(new string[] {
                        "[[TableCopy(5).DirectReport]] = Puff"});
#line 3568
 testRunner.And("the debug output as", ((string)(null)), table561, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("strftime Select the number of seconds since a particular moment:")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void StrftimeSelectTheNumberOfSecondsSinceAParticularMoment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("strftime Select the number of seconds since a particular moment:", ((string[])(null)));
#line 3573
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table562 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table562.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table562.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table562.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table562.AddRow(new string[] {
                        "person(1).dob",
                        "1978-01-01 02:34:56"});
            table562.AddRow(new string[] {
                        "person(2).dob",
                        "1979-01-01 02:34:56"});
            table562.AddRow(new string[] {
                        "person(3).dob",
                        "1980-01-01 02:34:56"});
#line 3574
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table562, "Given ");
#line 3582
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3583
 testRunner.And("I have the following sql statement \"SELECT name, strftime(\'%s\',date(\'1981-01-01 0" +
                    "2:34:56\')) - strftime(\'%s\',dob) as numberofseconds from person;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3584
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table563 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table563.AddRow(new string[] {
                        "numberofseconds",
                        "[[TableCopy().numberofseconds]]"});
            table563.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 3585
 testRunner.Then("Outputs are as follows", ((string)(null)), table563, "Then ");
#line 3589
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3590
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table564 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table564.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
            table564.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
            table564.AddRow(new string[] {
                        "TableCopy(3).name",
                        "Hatter"});
#line 3591
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table564, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table565 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table565.AddRow(new string[] {
                        "TableCopy(1).numberofseconds",
                        "94685104"});
            table565.AddRow(new string[] {
                        "TableCopy(2).numberofseconds",
                        "63149104"});
            table565.AddRow(new string[] {
                        "TableCopy(3).numberofseconds",
                        "31613104"});
#line 3596
 testRunner.Then("recordset \"[[TableCopy(*).numberofseconds]]\"  will be", ((string)(null)), table565, "Then ");
#line 3601
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table566 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table566.AddRow(new string[] {
                        "String"});
#line 3602
 testRunner.And("the debug inputs as", ((string)(null)), table566, "And ");
#line hidden
            TechTalk.SpecFlow.Table table567 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table567.AddRow(new string[] {
                        "[[TableCopy(3).name]] = Hatter"});
            table567.AddRow(new string[] {
                        "[[TableCopy(3).numberofseconds]] = 31613104"});
#line 3605
 testRunner.And("the debug output as", ((string)(null)), table567, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("datetime Select the date and time given a unix timestamp 1092941466:")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void DatetimeSelectTheDateAndTimeGivenAUnixTimestamp1092941466()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("datetime Select the date and time given a unix timestamp 1092941466:", ((string[])(null)));
#line 3610
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table568 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table568.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table568.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table568.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table568.AddRow(new string[] {
                        "person(1).dob",
                        "1978-01-01 02:34:56"});
            table568.AddRow(new string[] {
                        "person(2).dob",
                        "1979-01-01 02:34:56"});
            table568.AddRow(new string[] {
                        "person(3).dob",
                        "1980-01-01 02:34:56"});
#line 3611
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table568, "Given ");
#line 3619
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3620
 testRunner.And("I have the following sql statement \"SELECT datetime(1092941466, \'unixepoch\') as d" +
                    "ob,name from person;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3621
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table569 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table569.AddRow(new string[] {
                        "dob",
                        "[[TableCopy().dob]]"});
            table569.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 3622
 testRunner.Then("Outputs are as follows", ((string)(null)), table569, "Then ");
#line 3626
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3627
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table570 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table570.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
            table570.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
            table570.AddRow(new string[] {
                        "TableCopy(3).name",
                        "Hatter"});
#line 3628
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table570, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table571 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table571.AddRow(new string[] {
                        "TableCopy(1).dob",
                        "2004-08-19 18:51:06"});
            table571.AddRow(new string[] {
                        "TableCopy(2).dob",
                        "2004-08-19 18:51:06"});
            table571.AddRow(new string[] {
                        "TableCopy(3).dob",
                        "2004-08-19 18:51:06"});
#line 3633
 testRunner.Then("recordset \"[[TableCopy(*).dob]]\"  will be", ((string)(null)), table571, "Then ");
#line 3638
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table572 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table572.AddRow(new string[] {
                        "String"});
#line 3639
 testRunner.And("the debug inputs as", ((string)(null)), table572, "And ");
#line hidden
            TechTalk.SpecFlow.Table table573 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table573.AddRow(new string[] {
                        "[[TableCopy(3).dob]] = 2004-08-19 18:51:06"});
            table573.AddRow(new string[] {
                        "[[TableCopy(3).name]] = Hatter"});
#line 3642
 testRunner.And("the debug output as", ((string)(null)), table573, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("time Select the time given a dob:")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AdvancedRecordset")]
        public virtual void TimeSelectTheTimeGivenADob()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("time Select the time given a dob:", ((string[])(null)));
#line 3647
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table574 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[person]]",
                        ""});
            table574.AddRow(new string[] {
                        "person(1).name",
                        "Bob"});
            table574.AddRow(new string[] {
                        "person(2).name",
                        "Alice"});
            table574.AddRow(new string[] {
                        "person(3).name",
                        "Hatter"});
            table574.AddRow(new string[] {
                        "person(1).dob",
                        "1978-01-01 02:34:56"});
            table574.AddRow(new string[] {
                        "person(2).dob",
                        "1979-01-01 15:34:56"});
            table574.AddRow(new string[] {
                        "person(3).dob",
                        "1980-01-01 10:34:56"});
#line 3648
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table574, "Given ");
#line 3656
 testRunner.And("I drag on an Advanced Recordset tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3657
 testRunner.And("I have the following sql statement \"SELECT time(dob) as dob,name from person;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3658
 testRunner.When("I click Generate Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table575 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mapped From",
                        "Mapped To"});
            table575.AddRow(new string[] {
                        "dob",
                        "[[TableCopy().dob]]"});
            table575.AddRow(new string[] {
                        "name",
                        "[[TableCopy().name]]"});
#line 3659
 testRunner.Then("Outputs are as follows", ((string)(null)), table575, "Then ");
#line 3663
 testRunner.And("Recordset is \"TableCopy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3664
 testRunner.When("Advanced Recordset tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table576 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table576.AddRow(new string[] {
                        "TableCopy(1).name",
                        "Bob"});
            table576.AddRow(new string[] {
                        "TableCopy(2).name",
                        "Alice"});
            table576.AddRow(new string[] {
                        "TableCopy(3).name",
                        "Hatter"});
#line 3665
 testRunner.Then("recordset \"[[TableCopy(*).name]]\"  will be", ((string)(null)), table576, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table577 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table577.AddRow(new string[] {
                        "TableCopy(1).dob",
                        "02:34:56"});
            table577.AddRow(new string[] {
                        "TableCopy(2).dob",
                        "15:34:56"});
            table577.AddRow(new string[] {
                        "TableCopy(3).dob",
                        "10:34:56"});
#line 3670
 testRunner.Then("recordset \"[[TableCopy(*).dob]]\"  will be", ((string)(null)), table577, "Then ");
#line 3675
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table578 = new TechTalk.SpecFlow.Table(new string[] {
                        "Query"});
            table578.AddRow(new string[] {
                        "String"});
#line 3676
 testRunner.And("the debug inputs as", ((string)(null)), table578, "And ");
#line hidden
            TechTalk.SpecFlow.Table table579 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table579.AddRow(new string[] {
                        "[[TableCopy(3).dob]] = 10:34:56"});
            table579.AddRow(new string[] {
                        "[[TableCopy(3).name]] = Hatter"});
#line 3679
 testRunner.And("the debug output as", ((string)(null)), table579, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
