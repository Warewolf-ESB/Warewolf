// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.ControlFlow.Sequence
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SequenceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "Sequence.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Sequence", "\tIn order to execute sequence \r\n\tAs a Warewolf user\r\n\tI want to a tool that will " +
                    "allow me to construct and execute tools and services in sequence", ProgrammingLanguage.CSharp, new string[] {
                        "ControlFlow"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Sequence")))
            {
                global::Warewolf.Tools.Specs.Toolbox.ControlFlow.Sequence.SequenceFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute Sequence with Assign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ControlFlow")]
        public virtual void ExecuteSequenceWithAssign()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Sequence with Assign", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
          testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table175.AddRow(new string[] {
                        "[[var1]]",
                        "1"});
            table175.AddRow(new string[] {
                        "[[var2]]",
                        "2"});
#line 9
          testRunner.And("\"Test\" contains an Assign \"TestAssign\" as", ((string)(null)), table175, "And ");
#line 13
          testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
          testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table176.AddRow(new string[] {
                        "1",
                        "[[var1]] =",
                        "1"});
            table176.AddRow(new string[] {
                        "2",
                        "[[var2]] =",
                        "2"});
#line 15
          testRunner.And("the \"TestAssign\" debug inputs as", ((string)(null)), table176, "And ");
#line hidden
            TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table177.AddRow(new string[] {
                        "1",
                        "[[var1]] = 1"});
            table177.AddRow(new string[] {
                        "2",
                        "[[var2]] = 2"});
#line 19
          testRunner.And("the \"TestAssign\" debug outputs as", ((string)(null)), table177, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign and Calculate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ControlFlow")]
        public virtual void ExecuteASequenceWithAssignAndCalculate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign and Calculate", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
       testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table178.AddRow(new string[] {
                        "[[var1]]",
                        "1"});
            table178.AddRow(new string[] {
                        "[[var2]]",
                        "2"});
#line 26
    testRunner.And("\"Test\" contains an Assign \"SetVariables\" as", ((string)(null)), table178, "And ");
#line 30
       testRunner.And("\"Test\" contains Calculate \"Calculate Sum\" with formula \"[[var1]]+[[var2]]\" into \"" +
                    "[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
       testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
       testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table179.AddRow(new string[] {
                        "1",
                        "[[var1]] =",
                        "1"});
            table179.AddRow(new string[] {
                        "2",
                        "[[var2]] =",
                        "2"});
#line 33
       testRunner.And("the \"SetVariables\" debug inputs as", ((string)(null)), table179, "And ");
#line hidden
            TechTalk.SpecFlow.Table table180 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table180.AddRow(new string[] {
                        "1",
                        "[[var1]] = 1"});
            table180.AddRow(new string[] {
                        "2",
                        "[[var2]] = 2"});
#line 37
       testRunner.And("the \"SetVariables\" debug outputs as", ((string)(null)), table180, "And ");
#line hidden
            TechTalk.SpecFlow.Table table181 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table181.AddRow(new string[] {
                        "[[var1]]+[[var2]] = 1+2"});
#line 41
       testRunner.And("the \"Calculate Sum\" debug inputs as", ((string)(null)), table181, "And ");
#line hidden
            TechTalk.SpecFlow.Table table182 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table182.AddRow(new string[] {
                        "[[result]] = 3"});
#line 44
       testRunner.And("the \"Calculate Sum\" debug outputs as", ((string)(null)), table182, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign and Aggregate Calculate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ControlFlow")]
        public virtual void ExecuteASequenceWithAssignAndAggregateCalculate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign and Aggregate Calculate", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
       testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table183.AddRow(new string[] {
                        "[[numbers().num]]",
                        "1"});
            table183.AddRow(new string[] {
                        "[[numbers().num]]",
                        "2"});
#line 50
    testRunner.And("\"Test\" contains an Assign \"SetVariables\" as", ((string)(null)), table183, "And ");
#line 54
       testRunner.And("\"Test\" contains Aggregate Calculate \"Calculate Aggregate Sum\" with formula \"sum([" +
                    "[numbers(*).num]])\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
       testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
       testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table184.AddRow(new string[] {
                        "1",
                        "[[numbers().num]] =",
                        "1"});
            table184.AddRow(new string[] {
                        "2",
                        "[[numbers().num]] =",
                        "2"});
#line 57
       testRunner.And("the \"SetVariables\" debug inputs as", ((string)(null)), table184, "And ");
#line hidden
            TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table185.AddRow(new string[] {
                        "1",
                        "[[numbers(1).num]] = 1"});
            table185.AddRow(new string[] {
                        "2",
                        "[[numbers(2).num]] = 2"});
#line 61
       testRunner.And("the \"SetVariables\" debug outputs as", ((string)(null)), table185, "And ");
#line hidden
            TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table186.AddRow(new string[] {
                        "sum([[numbers(*).num]]) = sum(1,2)"});
#line 65
       testRunner.And("the \"Calculate Aggregate Sum\" debug inputs as", ((string)(null)), table186, "And ");
#line hidden
            TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table187.AddRow(new string[] {
                        "[[result]] = 3"});
#line 68
       testRunner.And("the \"Calculate Aggregate Sum\" debug outputs as", ((string)(null)), table187, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign and Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ControlFlow")]
        public virtual void ExecuteASequenceWithAssignAndCount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign and Count", ((string[])(null)));
#line 72
 this.ScenarioSetup(scenarioInfo);
#line 73
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table188.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "1"});
            table188.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "2"});
            table188.AddRow(new string[] {
                        "[[rec(3).a]]",
                        "3"});
            table188.AddRow(new string[] {
                        "[[rec(4).a]]",
                        "4"});
#line 74
   testRunner.And("\"Test\" contains an Assign \"Records\" as", ((string)(null)), table188, "And ");
#line 80
   testRunner.And("\"Test\" contains Count Record \"Count\" on \"[[rec()]]\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
      testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table189.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "1"});
            table189.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "2"});
            table189.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =",
                        "3"});
            table189.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] =",
                        "4"});
#line 83
   testRunner.And("the \"Records\" debug inputs as", ((string)(null)), table189, "And ");
#line hidden
            TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table190.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  1"});
            table190.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =  2"});
            table190.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =  3"});
            table190.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] =  4"});
#line 89
   testRunner.And("the \"Records\" debug outputs as", ((string)(null)), table190, "And ");
#line hidden
            TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table191.AddRow(new string[] {
                        "[[rec(1).a]] = 1"});
            table191.AddRow(new string[] {
                        "[[rec(2).a]] = 2"});
            table191.AddRow(new string[] {
                        "[[rec(3).a]] = 3"});
            table191.AddRow(new string[] {
                        "[[rec(4).a]] = 4"});
#line 95
   testRunner.And("the \"Count\" debug inputs as", ((string)(null)), table191, "And ");
#line hidden
            TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table192.AddRow(new string[] {
                        "[[result]] = 4"});
#line 101
   testRunner.And("the \"Count\" debug outputs as", ((string)(null)), table192, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign and Delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ControlFlow")]
        public virtual void ExecuteASequenceWithAssignAndDelete()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign and Delete", ((string[])(null)));
#line 105
this.ScenarioSetup(scenarioInfo);
#line 106
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table193.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "1"});
            table193.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "2"});
            table193.AddRow(new string[] {
                        "[[rec(3).a]]",
                        "3"});
            table193.AddRow(new string[] {
                        "[[rec(4).a]]",
                        "4"});
#line 107
   testRunner.And("\"Test\" contains an Assign \"All Records\" as", ((string)(null)), table193, "And ");
#line hidden
            TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table194.AddRow(new string[] {
                        "[[rec(2)]]",
                        "[[result]]"});
#line 113
   testRunner.And("\"Test\" contains Delete \"Delete Record\" as", ((string)(null)), table194, "And ");
#line hidden
            TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table195.AddRow(new string[] {
                        "[[check]]",
                        "[[rec(2).a]]"});
#line 116
      testRunner.And("\"Test\" contains an Assign \"Delete check\" as", ((string)(null)), table195, "And ");
#line 119
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
      testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table196.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "1"});
            table196.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "2"});
            table196.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =",
                        "3"});
            table196.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] =",
                        "4"});
#line 121
   testRunner.And("the \"All Records\" debug inputs as", ((string)(null)), table196, "And ");
#line hidden
            TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table197.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 1"});
            table197.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 2"});
            table197.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] = 3"});
            table197.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] = 4"});
#line 127
   testRunner.And("the \"All Records\" debug outputs as", ((string)(null)), table197, "And ");
#line hidden
            TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table198.AddRow(new string[] {
                        "[[rec(2).a]] = 2"});
#line 133
   testRunner.And("the \"Delete Record\" debug inputs as", ((string)(null)), table198, "And ");
#line hidden
            TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table199.AddRow(new string[] {
                        "[[result]] = Success"});
#line 136
   testRunner.And("the \"Delete Record\" debug outputs as", ((string)(null)), table199, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign and Find Record Index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ControlFlow")]
        public virtual void ExecuteASequenceWithAssignAndFindRecordIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign and Find Record Index", ((string[])(null)));
#line 142
this.ScenarioSetup(scenarioInfo);
#line 143
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table200 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table200.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "1"});
            table200.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "2"});
            table200.AddRow(new string[] {
                        "[[rec(3).a]]",
                        "3"});
            table200.AddRow(new string[] {
                        "[[rec(4).a]]",
                        "4"});
#line 144
   testRunner.And("\"Test\" contains an Assign \"Assign Records\" as", ((string)(null)), table200, "And ");
#line hidden
            TechTalk.SpecFlow.Table table201 = new TechTalk.SpecFlow.Table(new string[] {
                        "Match Type",
                        "Match"});
            table201.AddRow(new string[] {
                        "=",
                        "1"});
#line 150
   testRunner.And("\"Test\" contains Find Record Index \"Find Record\" search \"[[rec().a]]\" and result \"" +
                    "[[result]]\" as", ((string)(null)), table201, "And ");
#line 153
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 154
      testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table202 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table202.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "1"});
            table202.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "2"});
            table202.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =",
                        "3"});
            table202.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] =",
                        "4"});
#line 155
   testRunner.And("the \"Assign Records\" debug inputs as", ((string)(null)), table202, "And ");
#line hidden
            TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table203.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 1"});
            table203.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 2"});
            table203.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] = 3"});
            table203.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] = 4"});
#line 161
   testRunner.And("the \"Assign Records\" debug outputs as", ((string)(null)), table203, "And ");
#line hidden
            TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table204.AddRow(new string[] {
                        "In Field(s)",
                        "[[rec(1).a]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table204.AddRow(new string[] {
                        "",
                        "[[rec(2).a]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table204.AddRow(new string[] {
                        "",
                        "[[rec(3).a]] = 3",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table204.AddRow(new string[] {
                        "",
                        "[[rec(4).a]] = 4",
                        "1",
                        "=",
                        "1",
                        "",
                        "NO",
                        "NO"});
#line 167
   testRunner.And("the \"Find Record\" debug inputs as", ((string)(null)), table204, "And ");
#line hidden
            TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table205.AddRow(new string[] {
                        "[[result]] = 1"});
#line 173
   testRunner.And("the \"Find Record\" debug outputs as", ((string)(null)), table205, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign and Unique Records")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ControlFlow")]
        public virtual void ExecuteASequenceWithAssignAndUniqueRecords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign and Unique Records", ((string[])(null)));
#line 178
this.ScenarioSetup(scenarioInfo);
#line 179
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table206.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "11"});
            table206.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "11"});
            table206.AddRow(new string[] {
                        "[[rec(3).a]]",
                        "11"});
            table206.AddRow(new string[] {
                        "[[rec(4).a]]",
                        "12"});
            table206.AddRow(new string[] {
                        "[[rec(5).a]]",
                        "12"});
            table206.AddRow(new string[] {
                        "[[rec(6).a]]",
                        "13"});
            table206.AddRow(new string[] {
                        "[[rec(7).a]]",
                        "13"});
            table206.AddRow(new string[] {
                        "[[rec(8).a]]",
                        "13"});
#line 180
   testRunner.And("\"Test\" contains an Assign \"Assign data\" as", ((string)(null)), table206, "And ");
#line hidden
            TechTalk.SpecFlow.Table table207 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Return Fields",
                        "Result"});
            table207.AddRow(new string[] {
                        "[[rec(*).a]]",
                        "[[rec().a]]",
                        "[[rec().unique]]"});
#line 190
      testRunner.And("\"Test\" contains find unique \"Unique\" as", ((string)(null)), table207, "And ");
#line 193
      testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 194
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table208 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table208.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "11"});
            table208.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "11"});
            table208.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =",
                        "11"});
            table208.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] =",
                        "12"});
            table208.AddRow(new string[] {
                        "5",
                        "[[rec(5).a]] =",
                        "12"});
            table208.AddRow(new string[] {
                        "6",
                        "[[rec(6).a]] =",
                        "13"});
            table208.AddRow(new string[] {
                        "7",
                        "[[rec(7).a]] =",
                        "13"});
            table208.AddRow(new string[] {
                        "8",
                        "[[rec(8).a]] =",
                        "13"});
#line 195
   testRunner.And("the \"Assign data\" debug inputs as", ((string)(null)), table208, "And ");
#line hidden
            TechTalk.SpecFlow.Table table209 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table209.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  11"});
            table209.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =  11"});
            table209.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =  11"});
            table209.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] =  12"});
            table209.AddRow(new string[] {
                        "5",
                        "[[rec(5).a]] =  12"});
            table209.AddRow(new string[] {
                        "6",
                        "[[rec(6).a]] =  13"});
            table209.AddRow(new string[] {
                        "7",
                        "[[rec(7).a]] =  13"});
            table209.AddRow(new string[] {
                        "8",
                        "[[rec(8).a]] =  13"});
#line 205
   testRunner.And("the \"Assign data\" debug outputs as", ((string)(null)), table209, "And ");
#line hidden
            TechTalk.SpecFlow.Table table210 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table210.AddRow(new string[] {
                        "In Field(s)",
                        "[[rec(1).a]] = 11",
                        ""});
            table210.AddRow(new string[] {
                        "",
                        "[[rec(2).a]] = 11",
                        ""});
            table210.AddRow(new string[] {
                        "",
                        "[[rec(3).a]] = 11",
                        ""});
            table210.AddRow(new string[] {
                        "",
                        "[[rec(4).a]] = 12",
                        ""});
            table210.AddRow(new string[] {
                        "",
                        "[[rec(5).a]] = 12",
                        ""});
            table210.AddRow(new string[] {
                        "",
                        "[[rec(6).a]] = 13",
                        ""});
            table210.AddRow(new string[] {
                        "",
                        "[[rec(7).a]] = 13",
                        ""});
            table210.AddRow(new string[] {
                        "",
                        "[[rec(8).a]] = 13",
                        "[[rec().a]]  ="});
#line 215
   testRunner.And("the \"Unique\" debug inputs as", ((string)(null)), table210, "And ");
#line hidden
            TechTalk.SpecFlow.Table table211 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table211.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] ="});
            table211.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] ="});
            table211.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] ="});
            table211.AddRow(new string[] {
                        "",
                        "[[rec(4).unique]] ="});
            table211.AddRow(new string[] {
                        "",
                        "[[rec(5).unique]] ="});
            table211.AddRow(new string[] {
                        "",
                        "[[rec(6).unique]] ="});
            table211.AddRow(new string[] {
                        "",
                        "[[rec(7).unique]] ="});
            table211.AddRow(new string[] {
                        "",
                        "[[rec(8).unique]] ="});
            table211.AddRow(new string[] {
                        "",
                        "[[rec(9).unique]] = 11"});
            table211.AddRow(new string[] {
                        "",
                        "[[rec(10).unique]] = 12"});
            table211.AddRow(new string[] {
                        "",
                        "[[rec(11).unique]] = 13"});
#line 225
   testRunner.And("the \"Unique\" debug outputs as", ((string)(null)), table211, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign, Base Convert and Case Convert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ControlFlow")]
        public virtual void ExecuteASequenceWithAssignBaseConvertAndCaseConvert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign, Base Convert and Case Convert", ((string[])(null)));
#line 242
this.ScenarioSetup(scenarioInfo);
#line 243
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table212 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table212.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "0x4141"});
            table212.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "warewolf"});
#line 244
   testRunner.And("\"Test\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table212, "And ");
#line hidden
            TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table213.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "UPPER"});
#line 248
      testRunner.And("\"Test\" contains case convert \"Case Convert\" as", ((string)(null)), table213, "And ");
#line hidden
            TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table214.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Hex",
                        "Binary"});
#line 251
   testRunner.And("\"Test\" contains Base convert \"Base Convert\" as", ((string)(null)), table214, "And ");
#line 254
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 255
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table215 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table215.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "0x4141"});
            table215.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "warewolf"});
#line 256
   testRunner.And("the \"Rec To Convert\" debug inputs as", ((string)(null)), table215, "And ");
#line hidden
            TechTalk.SpecFlow.Table table216 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table216.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 0x4141"});
            table216.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = warewolf"});
#line 260
   testRunner.And("the \"Rec To Convert\" debug outputs as", ((string)(null)), table216, "And ");
#line hidden
            TechTalk.SpecFlow.Table table217 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table217.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = warewolf",
                        "UPPER"});
#line 264
   testRunner.And("the \"Case Convert\" debug inputs as", ((string)(null)), table217, "And ");
#line hidden
            TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table218.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = WAREWOLF"});
#line 267
   testRunner.And("the \"Case Convert\" debug outputs as", ((string)(null)), table218, "And ");
#line hidden
            TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table219.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 0x4141",
                        "Hex",
                        "Binary"});
#line 270
   testRunner.And("the \"Base Convert\" debug inputs as", ((string)(null)), table219, "And ");
#line hidden
            TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table220.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 0100000101000001"});
#line 273
   testRunner.And("the \"Base Convert\" debug outputs as", ((string)(null)), table220, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign, Data Merge and Data Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ControlFlow")]
        public virtual void ExecuteASequenceWithAssignDataMergeAndDataSplit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign, Data Merge and Data Split", ((string[])(null)));
#line 277
this.ScenarioSetup(scenarioInfo);
#line 278
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table221 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table221.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "test"});
            table221.AddRow(new string[] {
                        "[[rec(2).b]]",
                        "nothing"});
            table221.AddRow(new string[] {
                        "[[rec(3).a]]",
                        "warewolf"});
            table221.AddRow(new string[] {
                        "[[rec(4).b]]",
                        "nothing"});
#line 279
   testRunner.And("\"Test\" contains an Assign \"Assign To Merge\" as", ((string)(null)), table221, "And ");
#line hidden
            TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table222.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table222.AddRow(new string[] {
                        "[[rec(3).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 285
      testRunner.And("\"Test\" contains Data Merge \"Data Merge\" into \"[[result]]\" as", ((string)(null)), table222, "And ");
#line hidden
            TechTalk.SpecFlow.Table table223 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table223.AddRow(new string[] {
                        "testwarewolf",
                        "[[rec(2).b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table223.AddRow(new string[] {
                        "",
                        "[[rec(4).b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 289
   testRunner.And("\"Test\" contains Data Split \"Data Split\" as", ((string)(null)), table223, "And ");
#line 293
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 294
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table224 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table224.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "test"});
            table224.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] =",
                        "nothing"});
            table224.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =",
                        "warewolf"});
            table224.AddRow(new string[] {
                        "4",
                        "[[rec(4).b]] =",
                        "nothing"});
#line 295
   testRunner.And("the \"Assign To Merge\" debug inputs as", ((string)(null)), table224, "And ");
#line hidden
            TechTalk.SpecFlow.Table table225 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table225.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  test"});
            table225.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] = nothing"});
            table225.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =  warewolf"});
            table225.AddRow(new string[] {
                        "4",
                        "[[rec(4).b]] =  nothing"});
#line 301
   testRunner.And("the \"Assign To Merge\" debug outputs as", ((string)(null)), table225, "And ");
#line hidden
            TechTalk.SpecFlow.Table table226 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table226.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table226.AddRow(new string[] {
                        "2",
                        "[[rec(3).a]] =  warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 307
   testRunner.And("the \"Data Merge\" debug inputs as", ((string)(null)), table226, "And ");
#line hidden
            TechTalk.SpecFlow.Table table227 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table227.AddRow(new string[] {
                        "[[result]] = testwarewolf"});
#line 311
   testRunner.And("the \"Data Merge\" debug outputs as", ((string)(null)), table227, "And ");
#line hidden
            TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table228.AddRow(new string[] {
                        "testwarewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(2).b]] = nothing",
                        "Index",
                        "4",
                        "No",
                        ""});
            table228.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec(4).b]] = nothing",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 314
   testRunner.And("the \"Data Split\" debug inputs as", ((string)(null)), table228, "And ");
#line hidden
            TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table229.AddRow(new string[] {
                        "1",
                        "[[rec(2).b]] = test"});
            table229.AddRow(new string[] {
                        "2",
                        "[[rec(4).b]] = warewolf"});
#line 318
   testRunner.And("the \"Data Split\" debug outputs as", ((string)(null)), table229, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign, Data Merge, Data Split, Find Index and Replace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ControlFlow")]
        public virtual void ExecuteASequenceWithAssignDataMergeDataSplitFindIndexAndReplace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign, Data Merge, Data Split, Find Index and Replace", ((string[])(null)));
#line 324
this.ScenarioSetup(scenarioInfo);
#line 325
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table230.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "test"});
            table230.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "nothing"});
            table230.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "warewolf"});
            table230.AddRow(new string[] {
                        "[[rec(2).b]]",
                        "nothing"});
#line 326
   testRunner.And("\"Test\" contains an Assign \"Assign To Merge\" as", ((string)(null)), table230, "And ");
#line hidden
            TechTalk.SpecFlow.Table table231 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table231.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table231.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 332
   testRunner.And("\"Test\" contains Data Merge \"Data Merge\" into \"[[result]]\" as", ((string)(null)), table231, "And ");
#line hidden
            TechTalk.SpecFlow.Table table232 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table232.AddRow(new string[] {
                        "testwarewolf",
                        "[[rec(1).b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table232.AddRow(new string[] {
                        "",
                        "[[rec(2).b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 336
   testRunner.And("\"Test\" contains Data Split \"Data Split\" as", ((string)(null)), table232, "And ");
#line hidden
            TechTalk.SpecFlow.Table table233 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table233.AddRow(new string[] {
                        "[[rec().a]]",
                        "First Occurence",
                        "e",
                        "Left to Right"});
#line 340
   testRunner.And("\"Test\" contains Find Index \"Index\" into \"[[indexResult]]\" as", ((string)(null)), table233, "And ");
#line hidden
            TechTalk.SpecFlow.Table table234 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table234.AddRow(new string[] {
                        "[[rec(*)]]",
                        "e",
                        "REPLACED"});
#line 343
   testRunner.And("\"Test\" contains Replace \"Replacing\" into \"[[replaceResult]]\" as", ((string)(null)), table234, "And ");
#line 346
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 347
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table235 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table235.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "test"});
            table235.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] =",
                        "nothing"});
            table235.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] =",
                        "warewolf"});
            table235.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] =",
                        "nothing"});
#line 348
   testRunner.And("the \"Assign To Merge\" debug inputs as", ((string)(null)), table235, "And ");
#line hidden
            TechTalk.SpecFlow.Table table236 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table236.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = test"});
            table236.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = nothing"});
            table236.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] = warewolf"});
            table236.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] = nothing"});
#line 354
   testRunner.And("the \"Assign To Merge\" debug outputs as", ((string)(null)), table236, "And ");
#line hidden
            TechTalk.SpecFlow.Table table237 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table237.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table237.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 360
   testRunner.And("the \"Data Merge\" debug inputs as", ((string)(null)), table237, "And ");
#line hidden
            TechTalk.SpecFlow.Table table238 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table238.AddRow(new string[] {
                        "[[result]] = testwarewolf"});
#line 364
   testRunner.And("the \"Data Merge\" debug outputs as", ((string)(null)), table238, "And ");
#line hidden
            TechTalk.SpecFlow.Table table239 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table239.AddRow(new string[] {
                        "testwarewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(1).b]] = nothing",
                        "Index",
                        "4",
                        "No",
                        ""});
            table239.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec(2).b]] = nothing",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 367
   testRunner.And("the \"Data Split\" debug inputs as", ((string)(null)), table239, "And ");
#line hidden
            TechTalk.SpecFlow.Table table240 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table240.AddRow(new string[] {
                        "1",
                        "[[rec(1).b]] = test"});
            table240.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] = warewolf"});
#line 371
   testRunner.And("the \"Data Split\" debug outputs as", ((string)(null)), table240, "And ");
#line hidden
            TechTalk.SpecFlow.Table table241 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table241.AddRow(new string[] {
                        "[[rec(2).a]] = warewolf",
                        "First Occurence",
                        "e",
                        "Left to Right"});
#line 375
      testRunner.And("the \"Index\" debug inputs as", ((string)(null)), table241, "And ");
#line hidden
            TechTalk.SpecFlow.Table table242 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table242.AddRow(new string[] {
                        "[[indexResult]] = 4"});
#line 378
   testRunner.And("the \"Index\" debug outputs as", ((string)(null)), table242, "And ");
#line hidden
            TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table243.AddRow(new string[] {
                        "[[rec(1).a]] = test",
                        "",
                        ""});
            table243.AddRow(new string[] {
                        "[[rec(2).a]] = warewolf",
                        "",
                        ""});
            table243.AddRow(new string[] {
                        "[[rec(1).b]] = test",
                        "",
                        ""});
            table243.AddRow(new string[] {
                        "[[rec(2).b]] = warewolf",
                        "e",
                        "REPLACED"});
#line 381
   testRunner.And("the \"Replacing\" debug inputs as", ((string)(null)), table243, "And ");
#line hidden
            TechTalk.SpecFlow.Table table244 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table244.AddRow(new string[] {
                        "[[rec(1).a]] = tREPLACEDst"});
            table244.AddRow(new string[] {
                        "[[rec(2).a]] = warREPLACEDwolf"});
            table244.AddRow(new string[] {
                        "[[rec(1).b]] = tREPLACEDst"});
            table244.AddRow(new string[] {
                        "[[rec(2).b]] = warREPLACEDwolf"});
            table244.AddRow(new string[] {
                        "[[replaceResult]] = 4"});
#line 387
   testRunner.And("the \"Replacing\" debug outputs as", ((string)(null)), table244, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Gather System Information, Date and Time Difference, Date" +
            " and Time, Random, and Format Number tools.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ControlFlow")]
        public virtual void ExecuteASequenceWithGatherSystemInformationDateAndTimeDifferenceDateAndTimeRandomAndFormatNumberTools_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Gather System Information, Date and Time Difference, Date" +
                    " and Time, Random, and Format Number tools.", ((string[])(null)));
#line 396
this.ScenarioSetup(scenarioInfo);
#line 397
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table245 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table245.AddRow(new string[] {
                        "[[test]]",
                        "Date & Time"});
#line 398
   testRunner.And("\"Test\" contains Gather System Info \"Sys info\" as", ((string)(null)), table245, "And ");
#line hidden
            TechTalk.SpecFlow.Table table246 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table246.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "[[result1]]"});
#line 401
   testRunner.And("\"Test\" contains Date and Time Difference \"Date&Time\" as", ((string)(null)), table246, "And ");
#line hidden
            TechTalk.SpecFlow.Table table247 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "Output Format",
                        "Result"});
            table247.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "1",
                        "yyyy-mm-dd",
                        "[[result2]]"});
#line 404
   testRunner.And("\"Test\" contains Date and Time \"Date\" as", ((string)(null)), table247, "And ");
#line hidden
            TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table248.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10",
                        "[[result3]]"});
#line 407
   testRunner.And("\"Test\" contains Random \"Random\" as", ((string)(null)), table248, "And ");
#line hidden
            TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table249.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3",
                        "[[result4]]"});
#line 410
   testRunner.And("\"Test\" contains Format Number \"Fnumber\" as", ((string)(null)), table249, "And ");
#line 413
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 414
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table250.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "Date & Time"});
#line 415
   testRunner.And("the \"Sys info\" debug inputs as", ((string)(null)), table250, "And ");
#line hidden
            TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table251.AddRow(new string[] {
                        "1",
                        "[[test]] = String"});
#line 418
    testRunner.And("the \"Sys info\" debug outputs as", ((string)(null)), table251, "And ");
#line hidden
            TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table252.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years"});
#line 421
      testRunner.And("the \"Date&Time\" debug inputs as", ((string)(null)), table252, "And ");
#line hidden
            TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table253.AddRow(new string[] {
                        "[[result1]] = 37"});
#line 424
   testRunner.And("the \"Date&Time\" debug outputs as", ((string)(null)), table253, "And ");
#line hidden
            TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table254.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "1",
                        "yyyy-mm-dd"});
#line 427
   testRunner.And("the \"Date\" debug inputs as", ((string)(null)), table254, "And ");
#line hidden
            TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table255.AddRow(new string[] {
                        "[[result2]] = 2014-11-29"});
#line 430
   testRunner.And("the \"Date\" debug outputs as", ((string)(null)), table255, "And ");
#line hidden
            TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table256.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10"});
#line 433
   testRunner.And("the \"Random\" debug inputs as", ((string)(null)), table256, "And ");
#line hidden
            TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table257.AddRow(new string[] {
                        "[[result3]] = Int32"});
#line 436
   testRunner.And("the \"Random\" debug outputs as", ((string)(null)), table257, "And ");
#line hidden
            TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table258.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3"});
#line 439
   testRunner.And("the \"Fnumber\" debug inputs as", ((string)(null)), table258, "And ");
#line hidden
            TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table259.AddRow(new string[] {
                        "[[result4]] = 788.895"});
#line 442
   testRunner.And("the \"Fnumber\" debug outputs as", ((string)(null)), table259, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with For each")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ControlFlow")]
        public virtual void ExecuteASequenceWithForEach()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with For each", ((string[])(null)));
#line 446
this.ScenarioSetup(scenarioInfo);
#line 447
      testRunner.Given("I have a ForEach \"ForEachTest\" as \"NumOfExecution\" executions \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 448
   testRunner.And("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table260.AddRow(new string[] {
                        "[[test]]",
                        "Date & Time"});
#line 449
   testRunner.And("\"Test\" contains Gather System Info \"Sys info\" as", ((string)(null)), table260, "And ");
#line hidden
            TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table261.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "[[result1]]"});
#line 452
   testRunner.And("\"Test\" contains Date and Time Difference \"Date&Time\" as", ((string)(null)), table261, "And ");
#line hidden
            TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "Output Format",
                        "Result"});
            table262.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "1",
                        "yyyy-mm-dd",
                        "[[result2]]"});
#line 455
   testRunner.And("\"Test\" contains Date and Time \"Date\" as", ((string)(null)), table262, "And ");
#line hidden
            TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table263.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10",
                        "[[result3]]"});
#line 458
   testRunner.And("\"Test\" contains Random \"Random\" as", ((string)(null)), table263, "And ");
#line hidden
            TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table264.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3",
                        "[[result4]]"});
#line 461
   testRunner.And("\"Test\" contains Format Number \"Fnumber\" as", ((string)(null)), table264, "And ");
#line 464
   testRunner.When("the ForEach \"ForEachTest\" tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 465
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table265.AddRow(new string[] {
                        "No. of Executes",
                        "1"});
#line 466
   testRunner.And("the \"ForEachTest\" debug inputs as", ((string)(null)), table265, "And ");
#line hidden
            TechTalk.SpecFlow.Table table266 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table266.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "Date & Time"});
#line 469
    testRunner.And("the \"Sys info\" debug inputs as", ((string)(null)), table266, "And ");
#line hidden
            TechTalk.SpecFlow.Table table267 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table267.AddRow(new string[] {
                        "1",
                        "[[test]] = String"});
#line 472
     testRunner.And("the \"Sys info\" debug outputs as", ((string)(null)), table267, "And ");
#line hidden
            TechTalk.SpecFlow.Table table268 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table268.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years"});
#line 475
    testRunner.And("the \"Date&Time\" debug inputs as", ((string)(null)), table268, "And ");
#line hidden
            TechTalk.SpecFlow.Table table269 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table269.AddRow(new string[] {
                        "[[result1]] = 37"});
#line 478
   testRunner.And("the \"Date&Time\" debug outputs as", ((string)(null)), table269, "And ");
#line hidden
            TechTalk.SpecFlow.Table table270 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table270.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "1",
                        "yyyy-mm-dd"});
#line 481
   testRunner.And("the \"Date\" debug inputs as", ((string)(null)), table270, "And ");
#line hidden
            TechTalk.SpecFlow.Table table271 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table271.AddRow(new string[] {
                        "[[result2]] = 2014-11-29"});
#line 484
   testRunner.And("the \"Date\" debug outputs as", ((string)(null)), table271, "And ");
#line hidden
            TechTalk.SpecFlow.Table table272 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table272.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10"});
#line 487
   testRunner.And("the \"Random\" debug inputs as", ((string)(null)), table272, "And ");
#line hidden
            TechTalk.SpecFlow.Table table273 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table273.AddRow(new string[] {
                        "[[result3]] = Int32"});
#line 490
   testRunner.And("the \"Random\" debug outputs as", ((string)(null)), table273, "And ");
#line hidden
            TechTalk.SpecFlow.Table table274 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table274.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3"});
#line 493
   testRunner.And("the \"Fnumber\" debug inputs as", ((string)(null)), table274, "And ");
#line hidden
            TechTalk.SpecFlow.Table table275 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table275.AddRow(new string[] {
                        "[[result4]] = 788.895"});
#line 496
   testRunner.And("the \"Fnumber\" debug outputs as", ((string)(null)), table275, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with For each with 3 executions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ControlFlow")]
        public virtual void ExecuteASequenceWithForEachWith3Executions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with For each with 3 executions", ((string[])(null)));
#line 500
this.ScenarioSetup(scenarioInfo);
#line 501
      testRunner.Given("I have a ForEach \"ForEachTest\" as \"NumOfExecution\" executions \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 502
   testRunner.And("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table276 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table276.AddRow(new string[] {
                        "[[test().date]]",
                        "Date & Time"});
#line 503
   testRunner.And("\"Test\" contains Gather System Info \"Sys info\" as", ((string)(null)), table276, "And ");
#line hidden
            TechTalk.SpecFlow.Table table277 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table277.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "[[test().result1]]"});
#line 506
   testRunner.And("\"Test\" contains Date and Time Difference \"Date&Time\" as", ((string)(null)), table277, "And ");
#line hidden
            TechTalk.SpecFlow.Table table278 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "Output Format",
                        "Result"});
            table278.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "1",
                        "yyyy-mm-dd",
                        "[[test().result2]]"});
#line 509
   testRunner.And("\"Test\" contains Date and Time \"Date\" as", ((string)(null)), table278, "And ");
#line hidden
            TechTalk.SpecFlow.Table table279 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table279.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10",
                        "[[test().result3]]"});
#line 512
   testRunner.And("\"Test\" contains Random \"Random\" as", ((string)(null)), table279, "And ");
#line hidden
            TechTalk.SpecFlow.Table table280 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table280.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3",
                        "[[test().result4]]"});
#line 515
   testRunner.And("\"Test\" contains Format Number \"Fnumber\" as", ((string)(null)), table280, "And ");
#line 518
   testRunner.When("the ForEach \"ForEachTest\" tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 519
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table281 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table281.AddRow(new string[] {
                        "No. of Executes",
                        "3"});
#line 520
   testRunner.And("the \"ForEachTest\" debug inputs as", ((string)(null)), table281, "And ");
#line hidden
            TechTalk.SpecFlow.Table table282 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table282.AddRow(new string[] {
                        "1",
                        "[[test().date]] =",
                        "Date & Time"});
#line 523
    testRunner.And("the \"Sys info\" debug inputs as", ((string)(null)), table282, "And ");
#line hidden
            TechTalk.SpecFlow.Table table283 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table283.AddRow(new string[] {
                        "1",
                        "[[test(6).date]] = String"});
#line 526
     testRunner.And("the \"Sys info\" debug outputs as", ((string)(null)), table283, "And ");
#line hidden
            TechTalk.SpecFlow.Table table284 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table284.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years"});
#line 529
    testRunner.And("the \"Date&Time\" debug inputs as", ((string)(null)), table284, "And ");
#line hidden
            TechTalk.SpecFlow.Table table285 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table285.AddRow(new string[] {
                        "[[test(6).result1]] = 37"});
#line 532
   testRunner.And("the \"Date&Time\" debug outputs as", ((string)(null)), table285, "And ");
#line hidden
            TechTalk.SpecFlow.Table table286 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table286.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "1",
                        "yyyy-mm-dd"});
#line 535
   testRunner.And("the \"Date\" debug inputs as", ((string)(null)), table286, "And ");
#line hidden
            TechTalk.SpecFlow.Table table287 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table287.AddRow(new string[] {
                        "[[test(6).result2]] = 2014-11-29"});
#line 538
   testRunner.And("the \"Date\" debug outputs as", ((string)(null)), table287, "And ");
#line hidden
            TechTalk.SpecFlow.Table table288 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table288.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10"});
#line 541
   testRunner.And("the \"Random\" debug inputs as", ((string)(null)), table288, "And ");
#line hidden
            TechTalk.SpecFlow.Table table289 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table289.AddRow(new string[] {
                        "[[test(6).result3]] = Int32"});
#line 544
   testRunner.And("the \"Random\" debug outputs as", ((string)(null)), table289, "And ");
#line hidden
            TechTalk.SpecFlow.Table table290 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table290.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3"});
#line 547
   testRunner.And("the \"Fnumber\" debug inputs as", ((string)(null)), table290, "And ");
#line hidden
            TechTalk.SpecFlow.Table table291 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table291.AddRow(new string[] {
                        "[[test(7).result4]] = 788.895"});
#line 550
   testRunner.And("the \"Fnumber\" debug outputs as", ((string)(null)), table291, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
