// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.Recordset.Sort
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SortFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Sort.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Sort", "\tIn order to sort a recordset\r\n\tAs a Warewolf user\r\n\tI want a tool I can use to a" +
                    "rrange records in either ascending or descending order ", ProgrammingLanguage.CSharp, new string[] {
                        "Recordset"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Sort")))
            {
                global::Warewolf.Tools.Specs.Toolbox.Recordset.Sort.SortFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset forwards using star notation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void SortARecordsetForwardsUsingStarNotation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset forwards using star notation", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1403 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1403.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table1403.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table1403.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table1403.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table1403.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1403.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table1403.AddRow(new string[] {
                        "rs().row",
                        "so far"});
#line 8
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1403, "Given ");
#line 17
 testRunner.And("I sort a record \"[[rs(*).row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.And("my sort order is \"Forward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1404 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1404.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table1404.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table1404.AddRow(new string[] {
                        "rs().row",
                        "so far"});
            table1404.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table1404.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table1404.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1404.AddRow(new string[] {
                        "rs().row",
                        "You"});
#line 20
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table1404, "Then ");
#line 29
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1405 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table1405.AddRow(new string[] {
                        "[[rs(1).row]] = You",
                        ""});
            table1405.AddRow(new string[] {
                        "[[rs(2).row]] = are",
                        ""});
            table1405.AddRow(new string[] {
                        "[[rs(3).row]] = the",
                        ""});
            table1405.AddRow(new string[] {
                        "[[rs(4).row]] = best",
                        ""});
            table1405.AddRow(new string[] {
                        "[[rs(5).row]] = Warewolf",
                        ""});
            table1405.AddRow(new string[] {
                        "[[rs(6).row]] = user",
                        ""});
            table1405.AddRow(new string[] {
                        "[[rs(7).row]] = so far",
                        "Forward"});
#line 30
 testRunner.And("the debug inputs as", ((string)(null)), table1405, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1406 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1406.AddRow(new string[] {
                        "[[rs(1).row]] = are"});
            table1406.AddRow(new string[] {
                        "[[rs(2).row]] = best"});
            table1406.AddRow(new string[] {
                        "[[rs(3).row]] = so far"});
            table1406.AddRow(new string[] {
                        "[[rs(4).row]] = the"});
            table1406.AddRow(new string[] {
                        "[[rs(5).row]] = user"});
            table1406.AddRow(new string[] {
                        "[[rs(6).row]] = Warewolf"});
            table1406.AddRow(new string[] {
                        "[[rs(7).row]] = You"});
#line 39
 testRunner.And("the debug output as", ((string)(null)), table1406, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset backwards using star notation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void SortARecordsetBackwardsUsingStarNotation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset backwards using star notation", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1407 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1407.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table1407.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table1407.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table1407.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table1407.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1407.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table1407.AddRow(new string[] {
                        "rs().row",
                        "so far"});
#line 50
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1407, "Given ");
#line 59
 testRunner.And("I sort a record \"[[rs(*).row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1408 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1408.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table1408.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1408.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table1408.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table1408.AddRow(new string[] {
                        "rs().row",
                        "so far"});
            table1408.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table1408.AddRow(new string[] {
                        "rs().row",
                        "are"});
#line 62
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table1408, "Then ");
#line 71
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1409 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table1409.AddRow(new string[] {
                        "[[rs(1).row]] = You",
                        ""});
            table1409.AddRow(new string[] {
                        "[[rs(2).row]] = are",
                        ""});
            table1409.AddRow(new string[] {
                        "[[rs(3).row]] = the",
                        ""});
            table1409.AddRow(new string[] {
                        "[[rs(4).row]] = best",
                        ""});
            table1409.AddRow(new string[] {
                        "[[rs(5).row]] = Warewolf",
                        ""});
            table1409.AddRow(new string[] {
                        "[[rs(6).row]] = user",
                        ""});
            table1409.AddRow(new string[] {
                        "[[rs(7).row]] = so far",
                        "Backwards"});
#line 72
 testRunner.And("the debug inputs as", ((string)(null)), table1409, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1410 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1410.AddRow(new string[] {
                        "[[rs(1).row]] = You"});
            table1410.AddRow(new string[] {
                        "[[rs(2).row]] = Warewolf"});
            table1410.AddRow(new string[] {
                        "[[rs(3).row]] = user"});
            table1410.AddRow(new string[] {
                        "[[rs(4).row]] = the"});
            table1410.AddRow(new string[] {
                        "[[rs(5).row]] = so far"});
            table1410.AddRow(new string[] {
                        "[[rs(6).row]] = best"});
            table1410.AddRow(new string[] {
                        "[[rs(7).row]] = are"});
#line 81
 testRunner.And("the debug output as", ((string)(null)), table1410, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset forwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void SortARecordsetForwards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset forwards", ((string[])(null)));
#line 91
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1411 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1411.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table1411.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table1411.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table1411.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table1411.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1411.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table1411.AddRow(new string[] {
                        "rs().row",
                        "so far"});
#line 92
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1411, "Given ");
#line 101
 testRunner.And("I sort a record \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.And("my sort order is \"Forward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1412 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1412.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table1412.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table1412.AddRow(new string[] {
                        "rs().row",
                        "so far"});
            table1412.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table1412.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table1412.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1412.AddRow(new string[] {
                        "rs().row",
                        "You"});
#line 104
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table1412, "Then ");
#line 113
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1413 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table1413.AddRow(new string[] {
                        "[[rs(1).row]] = You",
                        ""});
            table1413.AddRow(new string[] {
                        "[[rs(2).row]] = are",
                        ""});
            table1413.AddRow(new string[] {
                        "[[rs(3).row]] = the",
                        ""});
            table1413.AddRow(new string[] {
                        "[[rs(4).row]] = best",
                        ""});
            table1413.AddRow(new string[] {
                        "[[rs(5).row]] = Warewolf",
                        ""});
            table1413.AddRow(new string[] {
                        "[[rs(6).row]] = user",
                        ""});
            table1413.AddRow(new string[] {
                        "[[rs(7).row]] = so far",
                        "Forward"});
#line 114
 testRunner.And("the debug inputs as", ((string)(null)), table1413, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1414 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1414.AddRow(new string[] {
                        "[[rs(1).row]] = are"});
            table1414.AddRow(new string[] {
                        "[[rs(2).row]] = best"});
            table1414.AddRow(new string[] {
                        "[[rs(3).row]] = so far"});
            table1414.AddRow(new string[] {
                        "[[rs(4).row]] = the"});
            table1414.AddRow(new string[] {
                        "[[rs(5).row]] = user"});
            table1414.AddRow(new string[] {
                        "[[rs(6).row]] = Warewolf"});
            table1414.AddRow(new string[] {
                        "[[rs(7).row]] = You"});
#line 123
 testRunner.And("the debug output as", ((string)(null)), table1414, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void SortARecordsetBackwards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset backwards", ((string[])(null)));
#line 133
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1415 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1415.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table1415.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table1415.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table1415.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table1415.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1415.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table1415.AddRow(new string[] {
                        "rs().row",
                        "so far"});
#line 134
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1415, "Given ");
#line 143
 testRunner.And("I sort a record \"[[rs(*).row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1416 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1416.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table1416.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1416.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table1416.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table1416.AddRow(new string[] {
                        "rs().row",
                        "so far"});
            table1416.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table1416.AddRow(new string[] {
                        "rs().row",
                        "are"});
#line 146
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table1416, "Then ");
#line 155
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1417 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table1417.AddRow(new string[] {
                        "[[rs(1).row]] = You",
                        ""});
            table1417.AddRow(new string[] {
                        "[[rs(2).row]] = are",
                        ""});
            table1417.AddRow(new string[] {
                        "[[rs(3).row]] = the",
                        ""});
            table1417.AddRow(new string[] {
                        "[[rs(4).row]] = best",
                        ""});
            table1417.AddRow(new string[] {
                        "[[rs(5).row]] = Warewolf",
                        ""});
            table1417.AddRow(new string[] {
                        "[[rs(6).row]] = user",
                        ""});
            table1417.AddRow(new string[] {
                        "[[rs(7).row]] = so far",
                        "Backwards"});
#line 156
 testRunner.And("the debug inputs as", ((string)(null)), table1417, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1418 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1418.AddRow(new string[] {
                        "[[rs(1).row]] = You"});
            table1418.AddRow(new string[] {
                        "[[rs(2).row]] = Warewolf"});
            table1418.AddRow(new string[] {
                        "[[rs(3).row]] = user"});
            table1418.AddRow(new string[] {
                        "[[rs(4).row]] = the"});
            table1418.AddRow(new string[] {
                        "[[rs(5).row]] = so far"});
            table1418.AddRow(new string[] {
                        "[[rs(6).row]] = best"});
            table1418.AddRow(new string[] {
                        "[[rs(7).row]] = are"});
#line 165
 testRunner.And("the debug output as", ((string)(null)), table1418, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset forwards empty recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void SortARecordsetForwardsEmptyRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset forwards empty recordset", ((string[])(null)));
#line 175
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1419 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
#line 176
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1419, "Given ");
#line 178
 testRunner.And("I sort a record \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
 testRunner.And("my sort order is \"Forward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 180
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 181
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset backwards empty recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void SortARecordsetBackwardsEmptyRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset backwards empty recordset", ((string[])(null)));
#line 184
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1420 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
#line 185
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1420, "Given ");
#line 187
 testRunner.And("I sort a record \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 190
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset forwards with one row")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void SortARecordsetForwardsWithOneRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset forwards with one row", ((string[])(null)));
#line 192
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1421 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1421.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
#line 193
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1421, "Given ");
#line 196
 testRunner.And("I sort a record \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 197
 testRunner.And("my sort order is \"Forward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 198
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1422 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1422.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
#line 199
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table1422, "Then ");
#line 202
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1423 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table1423.AddRow(new string[] {
                        "[[rs(1).row]] = Warewolf",
                        "Forward"});
#line 203
 testRunner.And("the debug inputs as", ((string)(null)), table1423, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1424 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1424.AddRow(new string[] {
                        "[[rs(1).row]] = Warewolf"});
#line 206
 testRunner.And("the debug output as", ((string)(null)), table1424, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset backwards recordset  with one row")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void SortARecordsetBackwardsRecordsetWithOneRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset backwards recordset  with one row", ((string[])(null)));
#line 210
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1425 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1425.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
#line 211
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1425, "Given ");
#line 214
 testRunner.And("I sort a record \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1426 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1426.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
#line 217
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table1426, "Then ");
#line 220
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1427 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table1427.AddRow(new string[] {
                        "[[rs(1).row]] = Warewolf",
                        "Backwards"});
#line 221
 testRunner.And("the debug inputs as", ((string)(null)), table1427, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1428 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1428.AddRow(new string[] {
                        "[[rs(1).row]] = Warewolf"});
#line 224
 testRunner.And("the debug output as", ((string)(null)), table1428, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void Sort2ColumnsBackwards(string input, string direction, string error, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort 2 columns backwards", exampleTags);
#line 228
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1429 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1429.AddRow(new string[] {
                        "rs().a",
                        "Zambia"});
            table1429.AddRow(new string[] {
                        "rs().a",
                        "Mangolia"});
            table1429.AddRow(new string[] {
                        "rs().a",
                        "America"});
            table1429.AddRow(new string[] {
                        "rs().a",
                        "Australia"});
#line 229
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1429, "Given ");
#line 235
 testRunner.And(string.Format("I sort a record \"{0}\"", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.And(string.Format("my sort order is \"{0}\"", direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 237
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 238
 testRunner.Then(string.Format("the execution has \"{0}\" error", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs(*).a]],[[rs(*).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant0()
        {
#line 228
this.Sort2ColumnsBackwards("[[rs(*).a]],[[rs(*).a]]", "Backwards", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs(*).a]],[[rs(*).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant1()
        {
#line 228
this.Sort2ColumnsBackwards("[[rs(*).a]],[[rs(*).a]]", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs(*)]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant2()
        {
#line 228
this.Sort2ColumnsBackwards("[[rs(*)]]", "Backwards", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs(*)]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant3()
        {
#line 228
this.Sort2ColumnsBackwards("[[rs(*)]]", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[va]] = tree")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant4()
        {
#line 228
this.Sort2ColumnsBackwards("[[va]] = tree", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant5()
        {
#line 228
this.Sort2ColumnsBackwards("\"\"", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "asdas")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant6()
        {
#line 228
this.Sort2ColumnsBackwards("asdas", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "99")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant7()
        {
#line 228
this.Sort2ColumnsBackwards("99", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant8()
        {
#line 228
this.Sort2ColumnsBackwards("[[a]]", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        public virtual void SortRecordset(string input, string direction, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort recordset", exampleTags);
#line 251
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1430 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1430.AddRow(new string[] {
                        "rs().a",
                        "Zambia"});
            table1430.AddRow(new string[] {
                        "rs().a",
                        "Mangolia"});
            table1430.AddRow(new string[] {
                        "rs().a",
                        "America"});
            table1430.AddRow(new string[] {
                        "rs().a",
                        "Australia"});
#line 252
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1430, "Given ");
#line 258
 testRunner.And(string.Format("I sort a record \"{0}\"", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 259
 testRunner.And(string.Format("my sort order is \"{0}\"", direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 260
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 261
 testRunner.Then("the execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort recordset: [[rs(1).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "[[rs(1).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs(1).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:result", "Mongolia,Zambia")]
        public virtual void SortRecordset_Rs1_A()
        {
#line 251
this.SortRecordset("[[rs(1).a]]", "Forward", "Mongolia,Zambia", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort Recordset without field Forwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void SortRecordsetWithoutFieldForwards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort Recordset without field Forwards", ((string[])(null)));
#line 266
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1431 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1431.AddRow(new string[] {
                        "rs(1).a",
                        "Zambia"});
            table1431.AddRow(new string[] {
                        "rec(1).a",
                        "Mangolia"});
            table1431.AddRow(new string[] {
                        "rs(2).a",
                        "America"});
            table1431.AddRow(new string[] {
                        "rec(2).a",
                        "Australia"});
#line 267
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1431, "Given ");
#line 273
 testRunner.And("I sort a record \"[[rs(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 274
 testRunner.And("my sort order is \"Forward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 275
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 276
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort Null Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void SortNullRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort Null Recordset", ((string[])(null)));
#line 279
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1432 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1432.AddRow(new string[] {
                        "[[rs().a]]",
                        "NULL"});
#line 280
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1432, "Given ");
#line 283
 testRunner.And("I sort a record \"[[rs(*).a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 284
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 285
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 286
 testRunner.Then("the execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort non existent Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void SortNonExistentRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort non existent Recordset", ((string[])(null)));
#line 289
 this.ScenarioSetup(scenarioInfo);
#line 290
 testRunner.Given("I sort a record \"[[rs(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 291
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 292
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 293
 testRunner.Then("the execution has \"An\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
