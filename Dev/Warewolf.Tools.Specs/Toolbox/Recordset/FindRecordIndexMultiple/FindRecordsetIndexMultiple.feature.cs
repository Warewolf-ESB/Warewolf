// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.Recordset.FindRecordIndexMultiple
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class FindRecordsetIndexMultipleFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = new string[] {
                "Recordset"};
        
#line 1 "FindRecordsetIndexMultiple.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Toolbox/Recordset/FindRecordIndexMultiple", "FindRecordsetIndexMultiple", "\tIn order to search for pieces of data in a recordset\r\n\tAs a Warewolf user\r\n\tI wa" +
                    "nt a tool I can use to find an index ", ProgrammingLanguage.CSharp, new string[] {
                        "Recordset"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "FindRecordsetIndexMultiple")))
            {
                global::Warewolf.Tools.Specs.Toolbox.Recordset.FindRecordIndexMultiple.FindRecordsetIndexMultipleFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Between numeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsBetweenNumeric()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Between numeric", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2023 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2023.AddRow(new string[] {
                            "rs().field",
                            "1"});
                table2023.AddRow(new string[] {
                            "rs().field",
                            "15"});
                table2023.AddRow(new string[] {
                            "rs().field",
                            "20"});
                table2023.AddRow(new string[] {
                            "rs().field",
                            "34"});
#line 8
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2023, "Given ");
#line hidden
#line 14
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"16\" and \"" +
                        "33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.Then("the find records index multiple result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2024 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2024.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2024.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 15",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2024.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 20",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2024.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 34",
                            "1",
                            "Is Between",
                            "",
                            "16",
                            "33",
                            "NO",
                            "NO"});
#line 19
 testRunner.And("the debug inputs as", ((string)(null)), table2024, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2025 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2025.AddRow(new string[] {
                            "[[result]] = 3"});
#line 25
 testRunner.And("the debug output as", ((string)(null)), table2025, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in an empty recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInAnEmptyRecordset()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in an empty recordset", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2026 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2026.AddRow(new string[] {
                            "",
                            ""});
#line 30
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2026, "Given ");
#line hidden
#line 33
 testRunner.And("field to search is \"[[rs().value]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"16\" and \"" +
                        "33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.Then("the find records index multiple result should be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2027 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2027.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(*).value]] =",
                            "1",
                            "Is Between",
                            "",
                            "16",
                            "33",
                            "NO",
                            "NO"});
#line 38
 testRunner.And("the debug inputs as", ((string)(null)), table2027, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2028 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2028.AddRow(new string[] {
                            "[[result]] = -1"});
#line 41
 testRunner.And("the debug output as", ((string)(null)), table2028, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with a blank from")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithABlankFrom()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with a blank from", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2029 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2029.AddRow(new string[] {
                            "rs().field",
                            "1"});
                table2029.AddRow(new string[] {
                            "rs().field",
                            "15"});
                table2029.AddRow(new string[] {
                            "rs().field",
                            "20"});
                table2029.AddRow(new string[] {
                            "rs().field",
                            "34"});
#line 46
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2029, "Given ");
#line hidden
#line 52
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"\" and \"33" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
 testRunner.Then("the find records index multiple result should be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2030 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2030.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2030.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 15",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2030.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 20",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2030.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 34",
                            "1",
                            "Is Between",
                            "",
                            "\" \"",
                            "33",
                            "NO",
                            "NO"});
#line 57
 testRunner.And("the debug inputs as", ((string)(null)), table2030, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2031 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2031.AddRow(new string[] {
                            "[[result]] = -1"});
#line 63
 testRunner.And("the debug output as", ((string)(null)), table2031, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with blank to")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithBlankTo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with blank to", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 67
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2032 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2032.AddRow(new string[] {
                            "rs().field",
                            "1"});
                table2032.AddRow(new string[] {
                            "rs().field",
                            "15"});
                table2032.AddRow(new string[] {
                            "rs().field",
                            "20"});
                table2032.AddRow(new string[] {
                            "rs().field",
                            "34"});
#line 68
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2032, "Given ");
#line hidden
#line 74
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"16\" and \"" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
 testRunner.Then("the find records index multiple result should be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2033 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2033.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2033.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 15",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2033.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 20",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2033.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 34",
                            "1",
                            "Is Between",
                            "",
                            "16",
                            "\" \"",
                            "NO",
                            "NO"});
#line 79
 testRunner.And("the debug inputs as", ((string)(null)), table2033, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2034 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2034.AddRow(new string[] {
                            "[[result]] = -1"});
#line 85
 testRunner.And("the debug output as", ((string)(null)), table2034, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Between DateTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsBetweenDateTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Between DateTime", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2035 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2035.AddRow(new string[] {
                            "rs().field",
                            "5/3/2013"});
                table2035.AddRow(new string[] {
                            "rs().field",
                            "2/3/2013"});
                table2035.AddRow(new string[] {
                            "rs().field",
                            "7/4/2013"});
                table2035.AddRow(new string[] {
                            "rs().field",
                            "11/11/2012"});
#line 90
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2035, "Given ");
#line hidden
#line 96
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"1/3/2013\"" +
                        " and \"3/3/2013\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
 testRunner.Then("the find records index multiple result should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 100
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2036 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2036.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 5/3/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2036.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 2/3/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2036.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 7/4/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2036.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 11/11/2012",
                            "1",
                            "Is Between",
                            "",
                            "1/3/2013",
                            "3/3/2013",
                            "NO",
                            "NO"});
#line 101
 testRunner.And("the debug inputs as", ((string)(null)), table2036, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2037 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2037.AddRow(new string[] {
                            "[[result]] = 2"});
#line 107
 testRunner.And("the debug output as", ((string)(null)), table2037, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Base64")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsBase64()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Base64", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2038 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2038.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2038.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2038.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2038.AddRow(new string[] {
                            "rs().field",
                            "d2FyZXdvbGY="});
#line 112
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2038, "Given ");
#line hidden
#line 118
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
 testRunner.And("search the recordset with type \"Is Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 121
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 122
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2039 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2039.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2039.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2039.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2039.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = d2FyZXdvbGY=",
                            "1",
                            "Is Base64",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 123
 testRunner.And("the debug inputs as", ((string)(null)), table2039, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2040 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2040.AddRow(new string[] {
                            "[[result]] = 4"});
#line 129
 testRunner.And("the debug output as", ((string)(null)), table2040, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Binary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsBinary()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Binary", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 133
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2041 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2041.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2041.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2041.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2041.AddRow(new string[] {
                            "rs().field",
                            "101011110010"});
#line 134
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2041, "Given ");
#line hidden
#line 140
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
 testRunner.And("search the recordset with type \"Is Binary\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 143
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 144
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2042 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2042.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2042.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2042.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2042.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 101011110010",
                            "1",
                            "Is Binary",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 145
 testRunner.And("the debug inputs as", ((string)(null)), table2042, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2043 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2043.AddRow(new string[] {
                            "[[result]] = 4"});
#line 151
 testRunner.And("the debug output as", ((string)(null)), table2043, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Hex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsHex()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Hex", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 155
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2044 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2044.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2044.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2044.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2044.AddRow(new string[] {
                            "rs().field",
                            "77617265776f6c66"});
#line 156
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2044, "Given ");
#line hidden
#line 162
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 163
 testRunner.And("search the recordset with type \"Is Hex\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 164
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 165
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 166
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2045 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2045.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2045.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2045.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2045.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 77617265776f6c66",
                            "1",
                            "Is Hex",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 167
 testRunner.And("the debug inputs as", ((string)(null)), table2045, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2046 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2046.AddRow(new string[] {
                            "[[result]] = 4"});
#line 173
 testRunner.And("the debug output as", ((string)(null)), table2046, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Base64")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotBase64()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Base64", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 177
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2047 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2047.AddRow(new string[] {
                            "rs().field",
                            "d2FyZXdvbGY="});
                table2047.AddRow(new string[] {
                            "rs().field",
                            "d2FyZXdvbGY="});
                table2047.AddRow(new string[] {
                            "rs().field",
                            "d2FyZXdvbGY="});
                table2047.AddRow(new string[] {
                            "rs().field",
                            "You"});
#line 178
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2047, "Given ");
#line hidden
#line 184
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 185
 testRunner.And("search the recordset with type \"Not Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 187
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 188
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2048 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2048.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = d2FyZXdvbGY=",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2048.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = d2FyZXdvbGY=",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2048.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = d2FyZXdvbGY=",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2048.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = You",
                            "1",
                            "Not Base64",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 189
 testRunner.And("the debug inputs as", ((string)(null)), table2048, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2049 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2049.AddRow(new string[] {
                            "[[result]] = 4"});
#line 195
 testRunner.And("the debug output as", ((string)(null)), table2049, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Between DateTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotBetweenDateTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Between DateTime", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 199
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2050 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2050.AddRow(new string[] {
                            "rs().field",
                            "2/3/2013"});
                table2050.AddRow(new string[] {
                            "rs().field",
                            "7/3/2013"});
                table2050.AddRow(new string[] {
                            "rs().field",
                            "2/3/2013"});
                table2050.AddRow(new string[] {
                            "rs().field",
                            "2/3/2013"});
#line 200
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2050, "Given ");
#line hidden
#line 206
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 207
 testRunner.And("is between search the recordset with type \"Not Between\" and criteria is \"1/3/2013" +
                        "\" and \"3/3/2013\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 208
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 209
 testRunner.Then("the find records index multiple result should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2051 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2051.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 2/3/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2051.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 7/3/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2051.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 2/3/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2051.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 2/3/2013",
                            "1",
                            "Not Between",
                            "",
                            "1/3/2013",
                            "3/3/2013",
                            "NO",
                            "NO"});
#line 211
 testRunner.And("the debug inputs as", ((string)(null)), table2051, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2052 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2052.AddRow(new string[] {
                            "[[result]] = 2"});
#line 217
 testRunner.And("the debug output as", ((string)(null)), table2052, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Between numeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotBetweenNumeric()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Between numeric", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 221
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2053 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2053.AddRow(new string[] {
                            "rs().field",
                            "17"});
                table2053.AddRow(new string[] {
                            "rs().field",
                            "22"});
                table2053.AddRow(new string[] {
                            "rs().field",
                            "400"});
                table2053.AddRow(new string[] {
                            "rs().field",
                            "31"});
#line 222
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2053, "Given ");
#line hidden
#line 228
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 229
 testRunner.And("is between search the recordset with type \"Not Between\" and criteria is \"16\" and " +
                        "\"33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 230
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 231
 testRunner.Then("the find records index multiple result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 232
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2054 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2054.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 17",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2054.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 22",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2054.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 400",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2054.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 31",
                            "1",
                            "Not Between",
                            "",
                            "16",
                            "33",
                            "NO",
                            "NO"});
#line 233
 testRunner.And("the debug inputs as", ((string)(null)), table2054, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2055 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2055.AddRow(new string[] {
                            "[[result]] = 3"});
#line 239
 testRunner.And("the debug output as", ((string)(null)), table2055, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Binary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotBinary()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Binary", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 243
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2056 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2056.AddRow(new string[] {
                            "rs().field",
                            "101011110010"});
                table2056.AddRow(new string[] {
                            "rs().field",
                            "101011110010"});
                table2056.AddRow(new string[] {
                            "rs().field",
                            "101011110010"});
                table2056.AddRow(new string[] {
                            "rs().field",
                            "warewolf"});
#line 244
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2056, "Given ");
#line hidden
#line 250
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 251
 testRunner.And("search the recordset with type \"Not Binary\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 252
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 253
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 254
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2057 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2057.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 101011110010",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2057.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 101011110010",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2057.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 101011110010",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2057.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = warewolf",
                            "1",
                            "Not Binary",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 255
 testRunner.And("the debug inputs as", ((string)(null)), table2057, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2058 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2058.AddRow(new string[] {
                            "[[result]] = 4"});
#line 261
 testRunner.And("the debug output as", ((string)(null)), table2058, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Hex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotHex()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Hex", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 265
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2059 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2059.AddRow(new string[] {
                            "rs().field",
                            "77617265776f6c66"});
                table2059.AddRow(new string[] {
                            "rs().field",
                            "77617265776f6c66"});
                table2059.AddRow(new string[] {
                            "rs().field",
                            "77617265776f6c66"});
                table2059.AddRow(new string[] {
                            "rs().field",
                            "warewolf"});
#line 266
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2059, "Given ");
#line hidden
#line 272
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 273
 testRunner.And("search the recordset with type \"Not Hex\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 274
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 275
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 276
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2060 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2060.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 77617265776f6c66",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2060.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 77617265776f6c66",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2060.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 77617265776f6c66",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2060.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = warewolf",
                            "1",
                            "Not Hex",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 277
 testRunner.And("the debug inputs as", ((string)(null)), table2060, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2061 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2061.AddRow(new string[] {
                            "[[result]] = 4"});
#line 283
 testRunner.And("the debug output as", ((string)(null)), table2061, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Regex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotRegex()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Regex", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 287
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2062 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2062.AddRow(new string[] {
                            "rs().field",
                            "999.999.999.999"});
                table2062.AddRow(new string[] {
                            "rs().field",
                            "999.999.999.999"});
                table2062.AddRow(new string[] {
                            "rs().field",
                            "999.999.999.999"});
                table2062.AddRow(new string[] {
                            "rs().field",
                            "warewolf"});
#line 288
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2062, "Given ");
#line hidden
#line 294
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 295
 testRunner.And("search the recordset with type \"Not Regex\" and criteria is \"\\b\\d{1,3}\\.\\d{1,3}\\.\\" +
                        "d{1,3}\\.\\d{1,3}\\b\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 296
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 297
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 298
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2063 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2063.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 999.999.999.999",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2063.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 999.999.999.999",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2063.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 999.999.999.999",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2063.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = warewolf",
                            "1",
                            "Not Regex",
                            "\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 299
 testRunner.And("the debug inputs as", ((string)(null)), table2063, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2064 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2064.AddRow(new string[] {
                            "[[result]] = 4"});
#line 305
 testRunner.And("the debug output as", ((string)(null)), table2064, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Doesn\"t Start With")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithDoesntStartWith()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Doesn\"t Start With", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 309
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2065 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2065.AddRow(new string[] {
                            "rs().field",
                            "what"});
                table2065.AddRow(new string[] {
                            "rs().field",
                            "why"});
                table2065.AddRow(new string[] {
                            "rs().field",
                            "yay"});
#line 310
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2065, "Given ");
#line hidden
#line 315
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 316
 testRunner.And("search the recordset with type \"Doesn\'t Start With\" and criteria is \"w\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 317
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 318
 testRunner.Then("the find records index multiple result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 319
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2066 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2066.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = what",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2066.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = why",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2066.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = yay",
                            "1",
                            "Doesn\'t Start With",
                            "w",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 320
 testRunner.And("the debug inputs as", ((string)(null)), table2066, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2067 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2067.AddRow(new string[] {
                            "[[result]] = 3"});
#line 325
 testRunner.And("the debug output as", ((string)(null)), table2067, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Doesn\"t End With")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithDoesntEndWith()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Doesn\"t End With", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 329
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2068 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2068.AddRow(new string[] {
                            "rs().field",
                            "arev"});
                table2068.AddRow(new string[] {
                            "rs().field",
                            "v"});
                table2068.AddRow(new string[] {
                            "rs().field",
                            "modev"});
                table2068.AddRow(new string[] {
                            "rs().field",
                            "yay"});
#line 330
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2068, "Given ");
#line hidden
#line 336
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 337
 testRunner.And("search the recordset with type \"Doesn\'t End With\" and criteria is \"v\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 338
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 339
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 340
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2069 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2069.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = arev",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2069.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = v",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2069.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = modev",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2069.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = yay",
                            "1",
                            "Doesn\'t End With",
                            "v",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 341
 testRunner.And("the debug inputs as", ((string)(null)), table2069, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2070 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2070.AddRow(new string[] {
                            "[[result]] = 4"});
#line 347
 testRunner.And("the debug output as", ((string)(null)), table2070, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Equal To")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEqualTo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Equal To", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 351
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2071 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2071.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2071.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2071.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2071.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2071.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2071.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 352
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2071, "Given ");
#line hidden
#line 360
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 361
 testRunner.And("search the recordset with type \"=\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 362
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 363
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 364
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2072 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2072.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2072.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2072.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2072.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2072.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2072.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "=",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 365
 testRunner.And("the debug inputs as", ((string)(null)), table2072, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2073 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2073.AddRow(new string[] {
                            "[[result]] = 5"});
#line 373
 testRunner.And("the debug output as", ((string)(null)), table2073, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Equal To multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEqualToMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Equal To multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 377
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2074 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2074.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2074.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2074.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2074.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2074.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2074.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2074.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 378
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2074, "Given ");
#line hidden
#line 387
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 388
 testRunner.And("search the recordset with type \"=\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 389
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 390
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 391
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2075 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2075.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2075.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2075.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2075.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2075.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2075.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2075.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = user",
                            "1",
                            "=",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 392
 testRunner.And("the debug inputs as", ((string)(null)), table2075, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2076 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2076.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 401
 testRunner.And("the debug output as", ((string)(null)), table2076, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Equal To result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEqualToResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Equal To result doesnt exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 405
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2077 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2077.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2077.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2077.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2077.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2077.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2077.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 406
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2077, "Given ");
#line hidden
#line 414
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 415
 testRunner.And("search the recordset with type \"=\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 416
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 417
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 418
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2078 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2078.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2078.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2078.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2078.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2078.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2078.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "=",
                            "Mars",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 419
 testRunner.And("the debug inputs as", ((string)(null)), table2078, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2079 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2079.AddRow(new string[] {
                            "[[result]] = -1"});
#line 427
 testRunner.And("the debug output as", ((string)(null)), table2079, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Than")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterThan()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Than", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 431
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2080 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2080.AddRow(new string[] {
                            "rs().field",
                            "4"});
                table2080.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2080.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2080.AddRow(new string[] {
                            "rs().field",
                            "2"});
                table2080.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2080.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 432
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2080, "Given ");
#line hidden
#line 440
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 441
 testRunner.And("search the recordset with type \">\" and criteria is \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 442
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 443
 testRunner.Then("the find records index multiple result should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 444
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2081 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2081.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 4",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2081.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2081.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2081.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2081.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2081.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            ">",
                            "3",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 445
 testRunner.And("the debug inputs as", ((string)(null)), table2081, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2082 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2082.AddRow(new string[] {
                            "[[result]] = 1"});
#line 453
 testRunner.And("the debug output as", ((string)(null)), table2082, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Than multiple results" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterThanMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Than multiple results" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 457
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2083 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2083.AddRow(new string[] {
                            "rs().field",
                            "4"});
                table2083.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2083.AddRow(new string[] {
                            "rs().field",
                            "123"});
                table2083.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2083.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2083.AddRow(new string[] {
                            "rs().field",
                            "2"});
                table2083.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 458
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2083, "Given ");
#line hidden
#line 467
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 468
 testRunner.And("search the recordset with type \">\" and criteria is \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 469
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 470
 testRunner.Then("the find records index multiple result should be 1,3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 471
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2084 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2084.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 4",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2084.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2084.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 123",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2084.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2084.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2084.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2084.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = user",
                            "1",
                            ">",
                            "3",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 472
 testRunner.And("the debug inputs as", ((string)(null)), table2084, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2085 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2085.AddRow(new string[] {
                            "[[result]] = 1,3"});
#line 481
 testRunner.And("the debug output as", ((string)(null)), table2085, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Than result doesnt ex" +
            "ist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterThanResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Than result doesnt ex" +
                    "ist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 485
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2086 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2086.AddRow(new string[] {
                            "rs().field",
                            "4"});
                table2086.AddRow(new string[] {
                            "rs().field",
                            "2"});
                table2086.AddRow(new string[] {
                            "rs().field",
                            "2"});
                table2086.AddRow(new string[] {
                            "rs().field",
                            "2"});
                table2086.AddRow(new string[] {
                            "rs().field",
                            "8"});
                table2086.AddRow(new string[] {
                            "rs().field",
                            "2"});
#line 486
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2086, "Given ");
#line hidden
#line 494
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 495
 testRunner.And("search the recordset with type \">\" and criteria is \"50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 496
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 497
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 498
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2087 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2087.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 4",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2087.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2087.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2087.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2087.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = 8",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2087.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = 2",
                            "1",
                            ">",
                            "50",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 499
 testRunner.And("the debug inputs as", ((string)(null)), table2087, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2088 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2088.AddRow(new string[] {
                            "[[result]] = -1"});
#line 507
 testRunner.And("the debug output as", ((string)(null)), table2088, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Than")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessThan()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Than", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 511
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2089 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2089.AddRow(new string[] {
                            "rs().field",
                            "4"});
                table2089.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2089.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2089.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2089.AddRow(new string[] {
                            "rs().field",
                            "8"});
                table2089.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 512
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2089, "Given ");
#line hidden
#line 520
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 521
 testRunner.And("search the recordset with type \"<\" and criteria is \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 522
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 523
 testRunner.Then("the find records index multiple result should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 524
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2090 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2090.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 4",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2090.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2090.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2090.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2090.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = 8",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2090.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "<",
                            "5",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 525
 testRunner.And("the debug inputs as", ((string)(null)), table2090, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2091 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2091.AddRow(new string[] {
                            "[[result]] = 1"});
#line 533
 testRunner.And("the debug output as", ((string)(null)), table2091, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Than multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessThanMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Than multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 537
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2092 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2092.AddRow(new string[] {
                            "rs().field",
                            "4"});
                table2092.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2092.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2092.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2092.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2092.AddRow(new string[] {
                            "rs().field",
                            "2"});
                table2092.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 538
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2092, "Given ");
#line hidden
#line 547
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 548
 testRunner.And("search the recordset with type \"<\" and criteria is \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 549
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 550
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 551
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2093 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2093.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 4",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2093.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2093.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2093.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2093.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2093.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2093.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = user",
                            "1",
                            "<",
                            "5",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 552
 testRunner.And("the debug inputs as", ((string)(null)), table2093, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2094 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2094.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 561
 testRunner.And("the debug output as", ((string)(null)), table2094, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Than result doesnt exist" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessThanResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Than result doesnt exist" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 565
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2095 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2095.AddRow(new string[] {
                            "rs().field",
                            "2"});
                table2095.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2095.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2095.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2095.AddRow(new string[] {
                            "rs().field",
                            "5"});
                table2095.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 566
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2095, "Given ");
#line hidden
#line 574
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 575
 testRunner.And("search the recordset with type \"<\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 576
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 577
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 578
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2096 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2096.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2096.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2096.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2096.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2096.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = 5",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2096.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "<",
                            "1",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 579
 testRunner.And("the debug inputs as", ((string)(null)), table2096, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2097 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2097.AddRow(new string[] {
                            "[[result]] = -1"});
#line 587
 testRunner.And("the debug output as", ((string)(null)), table2097, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Equal To")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEqualTo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Equal To", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 591
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2098 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2098.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2098.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2098.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2098.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2098.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2098.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
#line 592
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2098, "Given ");
#line hidden
#line 600
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 601
 testRunner.And("search the recordset with type \"<> (Not Equal)\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 602
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 603
 testRunner.Then("the find records index multiple result should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 604
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2099 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2099.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2099.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2099.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2099.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2099.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2099.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = Warewolf",
                            "1",
                            "<> (Not Equal)",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 605
 testRunner.And("the debug inputs as", ((string)(null)), table2099, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2100 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2100.AddRow(new string[] {
                            "[[result]] =  1"});
#line 613
 testRunner.And("the debug output as", ((string)(null)), table2100, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Equal To multiple results" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEqualToMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Equal To multiple results" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 617
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2101 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2101.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2101.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2101.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2101.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2101.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2101.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 618
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2101, "Given ");
#line hidden
#line 626
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 627
 testRunner.And("search the recordset with type \"<> (Not Equal)\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 628
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 629
 testRunner.Then("the find records index multiple result should be 1,2,3,4,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 630
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2102 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2102.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2102.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2102.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2102.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2102.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2102.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "<> (Not Equal)",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 631
 testRunner.And("the debug inputs as", ((string)(null)), table2102, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2103 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2103.AddRow(new string[] {
                            "[[result]] = 1,2,3,4,6"});
#line 639
 testRunner.And("the debug output as", ((string)(null)), table2103, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Equal To result doesnt ex" +
            "ist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEqualToResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Equal To result doesnt ex" +
                    "ist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 643
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2104 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2104.AddRow(new string[] {
                            "rs().field",
                            "Mars"});
                table2104.AddRow(new string[] {
                            "rs().field",
                            "Mars"});
                table2104.AddRow(new string[] {
                            "rs().field",
                            "Mars"});
                table2104.AddRow(new string[] {
                            "rs().field",
                            "Mars"});
                table2104.AddRow(new string[] {
                            "rs().field",
                            "Mars"});
                table2104.AddRow(new string[] {
                            "rs().field",
                            "Mars"});
#line 644
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2104, "Given ");
#line hidden
#line 652
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 653
 testRunner.And("search the recordset with type \"<> (Not Equal)\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 654
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 655
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 656
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2105 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2105.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = Mars",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2105.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = Mars",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2105.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = Mars",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2105.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = Mars",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2105.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Mars",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2105.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = Mars",
                            "1",
                            "<> (Not Equal)",
                            "Mars",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 657
 testRunner.And("the debug inputs as", ((string)(null)), table2105, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2106 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2106.AddRow(new string[] {
                            "[[result]] = -1"});
#line 665
 testRunner.And("the debug output as", ((string)(null)), table2106, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Or Equal To")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterOrEqualTo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Or Equal To", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 669
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2107 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2107.AddRow(new string[] {
                            "rs().field",
                            "2"});
                table2107.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2107.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2107.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2107.AddRow(new string[] {
                            "rs().field",
                            "4"});
                table2107.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 670
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2107, "Given ");
#line hidden
#line 678
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 679
 testRunner.And("search the recordset with type \">=\" and criteria is \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 680
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 681
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 682
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2108 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2108.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2108.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2108.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2108.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2108.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = 4",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2108.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            ">=",
                            "4",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 683
 testRunner.And("the debug inputs as", ((string)(null)), table2108, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2109 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2109.AddRow(new string[] {
                            "[[result]] = 5"});
#line 691
 testRunner.And("the debug output as", ((string)(null)), table2109, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Or Equal To multiple " +
            "results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterOrEqualToMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Or Equal To multiple " +
                    "results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 695
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2110 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2110.AddRow(new string[] {
                            "rs().field",
                            "50"});
                table2110.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2110.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2110.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2110.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2110.AddRow(new string[] {
                            "rs().field",
                            "4"});
#line 696
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2110, "Given ");
#line hidden
#line 704
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 705
 testRunner.And("search the recordset with type \">=\" and criteria is \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 706
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 707
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 708
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2111 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2111.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 50",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2111.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2111.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2111.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2111.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2111.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = 4",
                            "1",
                            ">=",
                            "4",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 709
 testRunner.And("the debug inputs as", ((string)(null)), table2111, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2112 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2112.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 717
 testRunner.And("the debug output as", ((string)(null)), table2112, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Or Equal To result do" +
            "esnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterOrEqualToResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Or Equal To result do" +
                    "esnt exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 721
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2113 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2113.AddRow(new string[] {
                            "rs().field",
                            "1"});
                table2113.AddRow(new string[] {
                            "rs().field",
                            "2"});
                table2113.AddRow(new string[] {
                            "rs().field",
                            "3"});
                table2113.AddRow(new string[] {
                            "rs().field",
                            "1"});
                table2113.AddRow(new string[] {
                            "rs().field",
                            "2"});
                table2113.AddRow(new string[] {
                            "rs().field",
                            "3"});
#line 722
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2113, "Given ");
#line hidden
#line 730
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 731
 testRunner.And("search the recordset with type \">=\" and criteria is \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 732
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 733
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 734
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2114 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2114.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2114.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2114.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 3",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2114.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2114.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2114.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = 3",
                            "1",
                            ">=",
                            "4",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 735
 testRunner.And("the debug inputs as", ((string)(null)), table2114, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2115 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2115.AddRow(new string[] {
                            "[[result]] = -1"});
#line 743
 testRunner.And("the debug output as", ((string)(null)), table2115, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Or Equal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessOrEqual()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Or Equal", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 747
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2116 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2116.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2116.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2116.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2116.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2116.AddRow(new string[] {
                            "rs().field",
                            "aaa"});
                table2116.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 748
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2116, "Given ");
#line hidden
#line 756
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 757
 testRunner.And("search the recordset with type \"<=\" and criteria is \"aaa\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 758
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 759
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 760
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2117 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2117.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2117.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2117.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2117.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2117.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = aaa",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2117.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "<=",
                            "aaa",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 761
 testRunner.And("the debug inputs as", ((string)(null)), table2117, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2118 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2118.AddRow(new string[] {
                            "[[result]] = 5"});
#line 769
 testRunner.And("the debug output as", ((string)(null)), table2118, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Or Equal multiple result" +
            "s")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessOrEqualMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Or Equal multiple result" +
                    "s", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 773
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2119 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2119.AddRow(new string[] {
                            "rs().field",
                            "1"});
                table2119.AddRow(new string[] {
                            "rs().field",
                            "7"});
                table2119.AddRow(new string[] {
                            "rs().field",
                            "8"});
                table2119.AddRow(new string[] {
                            "rs().field",
                            "9"});
                table2119.AddRow(new string[] {
                            "rs().field",
                            "10"});
                table2119.AddRow(new string[] {
                            "rs().field",
                            "5"});
#line 774
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2119, "Given ");
#line hidden
#line 782
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 783
 testRunner.And("search the recordset with type \"<=\" and criteria is \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 784
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 785
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 786
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2120 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2120.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2120.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 7",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2120.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 8",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2120.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 9",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2120.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = 10",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2120.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = 5",
                            "1",
                            "<=",
                            "5",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 787
 testRunner.And("the debug inputs as", ((string)(null)), table2120, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2121 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2121.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 795
 testRunner.And("the debug output as", ((string)(null)), table2121, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Or Equal result doesnt e" +
            "xist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessOrEqualResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Or Equal result doesnt e" +
                    "xist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 799
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2122 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2122.AddRow(new string[] {
                            "rs().field",
                            "2"});
                table2122.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2122.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2122.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2122.AddRow(new string[] {
                            "rs().field",
                            "5"});
                table2122.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 800
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2122, "Given ");
#line hidden
#line 808
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 809
 testRunner.And("search the recordset with type \"<=\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 810
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 811
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 812
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2123 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2123.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2123.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2123.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2123.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2123.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = 5",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2123.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "<=",
                            "1",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 813
 testRunner.And("the debug inputs as", ((string)(null)), table2123, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2124 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2124.AddRow(new string[] {
                            "[[result]] = -1"});
#line 821
 testRunner.And("the debug output as", ((string)(null)), table2124, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Starts With")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsStartsWith()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Starts With", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 825
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2125 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2125.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2125.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2125.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2125.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2125.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2125.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 826
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2125, "Given ");
#line hidden
#line 834
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 835
 testRunner.And("search the recordset with type \"Starts With\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 836
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 837
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 838
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2126 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2126.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2126.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2126.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2126.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2126.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2126.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Starts With",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 839
 testRunner.And("the debug inputs as", ((string)(null)), table2126, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2127 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2127.AddRow(new string[] {
                            "[[result]] = 5"});
#line 847
 testRunner.And("the debug output as", ((string)(null)), table2127, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Starts With multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsStartsWithMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Starts With multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 851
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2128 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2128.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2128.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2128.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2128.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2128.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2128.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2128.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 852
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2128, "Given ");
#line hidden
#line 861
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 862
 testRunner.And("search the recordset with type \"Starts With\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 863
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 864
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 865
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2129 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2129.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2129.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2129.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2129.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2129.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2129.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2129.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = user",
                            "1",
                            "Starts With",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 866
 testRunner.And("the debug inputs as", ((string)(null)), table2129, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2130 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2130.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 875
 testRunner.And("the debug output as", ((string)(null)), table2130, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Starts With result doesnt exi" +
            "st")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsStartsWithResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Starts With result doesnt exi" +
                    "st", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 879
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2131 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2131.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2131.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2131.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2131.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2131.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2131.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 880
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2131, "Given ");
#line hidden
#line 888
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 889
 testRunner.And("search the recordset with type \"Starts With\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 890
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 891
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 892
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2132 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2132.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2132.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2132.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2132.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2132.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2132.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Starts With",
                            "Mars",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 893
 testRunner.And("the debug inputs as", ((string)(null)), table2132, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2133 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2133.AddRow(new string[] {
                            "[[result]] = -1"});
#line 901
 testRunner.And("the debug output as", ((string)(null)), table2133, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Ends With")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEndsWith()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Ends With", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 905
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2134 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2134.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2134.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2134.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2134.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2134.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2134.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 906
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2134, "Given ");
#line hidden
#line 914
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 915
 testRunner.And("search the recordset with type \"Ends With\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 916
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 917
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 918
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2135 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2135.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2135.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2135.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2135.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2135.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2135.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Ends With",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 919
 testRunner.And("the debug inputs as", ((string)(null)), table2135, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2136 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2136.AddRow(new string[] {
                            "[[result]] = 5"});
#line 927
 testRunner.And("the debug output as", ((string)(null)), table2136, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Ends With multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEndsWithMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Ends With multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 931
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2137 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2137.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2137.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2137.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2137.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2137.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2137.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2137.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 932
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2137, "Given ");
#line hidden
#line 941
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 942
 testRunner.And("search the recordset with type \"Ends With\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 943
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 944
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 945
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2138 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2138.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2138.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2138.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2138.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2138.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2138.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2138.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = user",
                            "1",
                            "Ends With",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 946
 testRunner.And("the debug inputs as", ((string)(null)), table2138, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2139 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2139.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 955
 testRunner.And("the debug output as", ((string)(null)), table2139, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Ends With result doesnt exist" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEndsWithResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Ends With result doesnt exist" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 959
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2140 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2140.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2140.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2140.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2140.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2140.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2140.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 960
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2140, "Given ");
#line hidden
#line 968
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 969
 testRunner.And("search the recordset with type \"Ends With\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 970
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 971
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 972
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2141 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2141.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2141.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2141.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2141.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2141.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2141.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Ends With",
                            "Mars",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 973
 testRunner.And("the debug inputs as", ((string)(null)), table2141, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2142 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2142.AddRow(new string[] {
                            "[[result]] = -1"});
#line 981
 testRunner.And("the debug output as", ((string)(null)), table2142, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Contains")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsContains()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Contains", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 985
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2143 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2143.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2143.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2143.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2143.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2143.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2143.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 986
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2143, "Given ");
#line hidden
#line 994
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 995
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 996
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 997
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 998
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2144 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2144.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2144.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2144.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2144.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2144.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2144.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Contains",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 999
 testRunner.And("the debug inputs as", ((string)(null)), table2144, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2145 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2145.AddRow(new string[] {
                            "[[result]] = 5"});
#line 1007
 testRunner.And("the debug output as", ((string)(null)), table2145, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Contains multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsContainsMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Contains multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1011
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2146 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2146.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2146.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2146.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2146.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2146.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2146.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2146.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1012
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2146, "Given ");
#line hidden
#line 1021
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1022
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1023
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1024
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1025
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2147 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2147.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2147.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2147.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2147.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2147.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2147.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2147.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = user",
                            "1",
                            "Contains",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1026
 testRunner.And("the debug inputs as", ((string)(null)), table2147, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2148 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2148.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 1035
 testRunner.And("the debug output as", ((string)(null)), table2148, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Contains result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsContainsResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Contains result doesnt exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1039
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2149 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2149.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2149.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2149.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2149.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2149.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2149.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1040
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2149, "Given ");
#line hidden
#line 1048
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1049
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1050
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1051
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1052
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2150 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2150.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2150.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2150.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2150.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2150.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2150.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Contains",
                            "Mars",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1053
 testRunner.And("the debug inputs as", ((string)(null)), table2150, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2151 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2151.AddRow(new string[] {
                            "[[result]] = -1"});
#line 1061
 testRunner.And("the debug output as", ((string)(null)), table2151, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Doesn\"t Contain")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsDoesntContain()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Doesn\"t Contain", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1065
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2152 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2152.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2152.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2152.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2152.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2152.AddRow(new string[] {
                            "rs().field",
                            "user"});
                table2152.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
#line 1066
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2152, "Given ");
#line hidden
#line 1074
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1075
 testRunner.And("search the recordset with type \"Doesn\'t Contain\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1076
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1077
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1078
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2153 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2153.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2153.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2153.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2153.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2153.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = user",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2153.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = Warewolf",
                            "1",
                            "Doesn\'t Contain",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1079
 testRunner.And("the debug inputs as", ((string)(null)), table2153, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2154 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2154.AddRow(new string[] {
                            "[[result]] = 5"});
#line 1087
 testRunner.And("the debug output as", ((string)(null)), table2154, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Doesn\"t Contain multiple resu" +
            "lts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsDoesntContainMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Doesn\"t Contain multiple resu" +
                    "lts", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1091
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2155 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2155.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2155.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2155.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2155.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2155.AddRow(new string[] {
                            "rs().field",
                            "user"});
                table2155.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
#line 1092
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2155, "Given ");
#line hidden
#line 1100
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1101
 testRunner.And("search the recordset with type \"Doesn\'t Contain\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1102
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1103
 testRunner.Then("the find records index multiple result should be 1,5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1104
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2156 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2156.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2156.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2156.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2156.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2156.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = user",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2156.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = Warewolf",
                            "1",
                            "Doesn\'t Contain",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1105
 testRunner.And("the debug inputs as", ((string)(null)), table2156, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2157 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2157.AddRow(new string[] {
                            "[[result]] = 1,5"});
#line 1113
 testRunner.And("the debug output as", ((string)(null)), table2157, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Doesn\"t Contain result doesnt" +
            " exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsDoesntContainResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Doesn\"t Contain result doesnt" +
                    " exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2158 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2158.AddRow(new string[] {
                            "rs().field",
                            "Mars"});
                table2158.AddRow(new string[] {
                            "rs().field",
                            "Mars"});
                table2158.AddRow(new string[] {
                            "rs().field",
                            "Mars"});
                table2158.AddRow(new string[] {
                            "rs().field",
                            "Mars"});
                table2158.AddRow(new string[] {
                            "rs().field",
                            "Mars"});
                table2158.AddRow(new string[] {
                            "rs().field",
                            "Mars"});
#line 1118
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2158, "Given ");
#line hidden
#line 1126
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1127
 testRunner.And("search the recordset with type \"Doesn\'t Contain\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1128
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1129
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1130
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2159 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2159.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = Mars",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2159.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = Mars",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2159.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = Mars",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2159.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = Mars",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2159.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Mars",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2159.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = Mars",
                            "1",
                            "Doesn\'t Contain",
                            "Mars",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1131
 testRunner.And("the debug inputs as", ((string)(null)), table2159, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2160 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2160.AddRow(new string[] {
                            "[[result]] = -1"});
#line 1139
 testRunner.And("the debug output as", ((string)(null)), table2160, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Alphanumeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsAlphanumeric()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Alphanumeric", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1143
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2161 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2161.AddRow(new string[] {
                            "rs().field",
                            "$$"});
                table2161.AddRow(new string[] {
                            "rs().field",
                            "$$"});
                table2161.AddRow(new string[] {
                            "rs().field",
                            "$$"});
                table2161.AddRow(new string[] {
                            "rs().field",
                            "$$"});
                table2161.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2161.AddRow(new string[] {
                            "rs().field",
                            "$$"});
#line 1144
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2161, "Given ");
#line hidden
#line 1152
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1153
 testRunner.And("search the recordset with type \"Is Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1154
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1155
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1156
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2162 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2162.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = $$",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2162.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = $$",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2162.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = $$",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2162.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = $$",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2162.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2162.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = $$",
                            "1",
                            "Is Alphanumeric",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1157
 testRunner.And("the debug inputs as", ((string)(null)), table2162, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2163 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2163.AddRow(new string[] {
                            "[[result]] = 5"});
#line 1165
 testRunner.And("the debug output as", ((string)(null)), table2163, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Alphanumeric multiple resu" +
            "lts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsAlphanumericMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Alphanumeric multiple resu" +
                    "lts", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1169
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2164 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2164.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2164.AddRow(new string[] {
                            "rs().field",
                            "$$"});
                table2164.AddRow(new string[] {
                            "rs().field",
                            "$$"});
                table2164.AddRow(new string[] {
                            "rs().field",
                            "$$"});
                table2164.AddRow(new string[] {
                            "rs().field",
                            "$$"});
                table2164.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2164.AddRow(new string[] {
                            "rs().field",
                            "$$"});
#line 1170
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2164, "Given ");
#line hidden
#line 1179
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1180
 testRunner.And("search the recordset with type \"Is Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1181
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1182
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1183
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2165 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2165.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2165.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = $$",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2165.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = $$",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2165.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = $$",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2165.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = $$",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2165.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2165.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = $$",
                            "1",
                            "Is Alphanumeric",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1184
 testRunner.And("the debug inputs as", ((string)(null)), table2165, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2166 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2166.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 1193
 testRunner.And("the debug output as", ((string)(null)), table2166, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Alphanumeric result doesnt" +
            " exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsAlphanumericResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Alphanumeric result doesnt" +
                    " exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1197
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2167 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2167.AddRow(new string[] {
                            "rs().field",
                            "$$"});
                table2167.AddRow(new string[] {
                            "rs().field",
                            "$$"});
                table2167.AddRow(new string[] {
                            "rs().field",
                            "$$"});
                table2167.AddRow(new string[] {
                            "rs().field",
                            "$$"});
                table2167.AddRow(new string[] {
                            "rs().field",
                            "$$"});
                table2167.AddRow(new string[] {
                            "rs().field",
                            "$$"});
#line 1198
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2167, "Given ");
#line hidden
#line 1206
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1207
 testRunner.And("search the recordset with type \"Is Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1208
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1209
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1210
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2168 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2168.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = $$",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2168.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = $$",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2168.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = $$",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2168.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = $$",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2168.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = $$",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2168.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = $$",
                            "1",
                            "Is Alphanumeric",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1211
 testRunner.And("the debug inputs as", ((string)(null)), table2168, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2169 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2169.AddRow(new string[] {
                            "[[result]] = -1"});
#line 1219
 testRunner.And("the debug output as", ((string)(null)), table2169, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Base64")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsBase64()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Base64", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1223
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2170 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2170.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2170.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2170.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2170.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2170.AddRow(new string[] {
                            "rs().field",
                            "d2FyZXdvbGY="});
                table2170.AddRow(new string[] {
                            "rs().field",
                            "You"});
#line 1224
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2170, "Given ");
#line hidden
#line 1232
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1233
 testRunner.And("search the recordset with type \"Is Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1234
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1235
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1236
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2171 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2171.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2171.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2171.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2171.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2171.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = d2FyZXdvbGY=",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2171.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = You",
                            "1",
                            "Is Base64",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1237
 testRunner.And("the debug inputs as", ((string)(null)), table2171, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2172 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2172.AddRow(new string[] {
                            "[[result]] = 5"});
#line 1245
 testRunner.And("the debug output as", ((string)(null)), table2172, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Base64 multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsBase64MultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Base64 multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1249
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2173 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2173.AddRow(new string[] {
                            "rs().field",
                            "d2FyZXdvbGY="});
                table2173.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2173.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2173.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2173.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2173.AddRow(new string[] {
                            "rs().field",
                            "d2FyZXdvbGY="});
                table2173.AddRow(new string[] {
                            "rs().field",
                            "You"});
#line 1250
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2173, "Given ");
#line hidden
#line 1259
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1260
 testRunner.And("search the recordset with type \"Is Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1261
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1262
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1263
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2174 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2174.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = d2FyZXdvbGY=",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2174.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2174.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2174.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2174.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2174.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = d2FyZXdvbGY=",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2174.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = You",
                            "1",
                            "Is Base64",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1264
 testRunner.And("the debug inputs as", ((string)(null)), table2174, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2175 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2175.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 1273
 testRunner.And("the debug output as", ((string)(null)), table2175, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Base64 result doesnt exist" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsBase64ResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Base64 result doesnt exist" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1277
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2176 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2176.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2176.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2176.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2176.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2176.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2176.AddRow(new string[] {
                            "rs().field",
                            "You"});
#line 1278
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2176, "Given ");
#line hidden
#line 1286
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1287
 testRunner.And("search the recordset with type \"Is Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1288
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1289
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1290
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2177 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2177.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2177.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2177.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2177.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2177.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2177.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = You",
                            "1",
                            "Is Base64",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1291
 testRunner.And("the debug inputs as", ((string)(null)), table2177, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2178 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2178.AddRow(new string[] {
                            "[[result]] = -1"});
#line 1299
 testRunner.And("the debug output as", ((string)(null)), table2178, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsDate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Date", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1303
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2179 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2179.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2179.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2179.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2179.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2179.AddRow(new string[] {
                            "rs().field",
                            "12/10/2013"});
                table2179.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1304
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2179, "Given ");
#line hidden
#line 1312
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1313
 testRunner.And("search the recordset with type \"Is Date\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1314
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1315
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1316
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2180 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2180.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2180.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2180.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2180.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2180.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = 12/10/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2180.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Is Date",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1317
 testRunner.And("the debug inputs as", ((string)(null)), table2180, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2181 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2181.AddRow(new string[] {
                            "[[result]] = 5"});
#line 1325
 testRunner.And("the debug output as", ((string)(null)), table2181, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Date multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsDateMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Date multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1329
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2182 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2182.AddRow(new string[] {
                            "rs().field",
                            "12/10/2013"});
                table2182.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2182.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2182.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2182.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2182.AddRow(new string[] {
                            "rs().field",
                            "12/10/2013"});
                table2182.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1330
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2182, "Given ");
#line hidden
#line 1339
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1340
 testRunner.And("search the recordset with type \"Is Date\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1341
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1342
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1343
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2183 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2183.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 12/10/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2183.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2183.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2183.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2183.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2183.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = 12/10/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2183.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = user",
                            "1",
                            "Is Date",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1344
 testRunner.And("the debug inputs as", ((string)(null)), table2183, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2184 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2184.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 1353
 testRunner.And("the debug output as", ((string)(null)), table2184, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Date result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsDateResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Date result doesnt exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1357
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2185 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2185.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2185.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2185.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2185.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2185.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2185.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1358
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2185, "Given ");
#line hidden
#line 1366
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1367
 testRunner.And("search the recordset with type \"Is Date\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1368
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1369
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1370
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2186 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2186.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2186.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2186.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2186.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2186.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2186.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Is Date",
                            "Mars",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1371
 testRunner.And("the debug inputs as", ((string)(null)), table2186, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2187 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2187.AddRow(new string[] {
                            "[[result]] = -1"});
#line 1379
 testRunner.And("the debug output as", ((string)(null)), table2187, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Email")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsEmail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Email", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1383
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2188 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2188.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2188.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2188.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2188.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2188.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
                table2188.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1384
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2188, "Given ");
#line hidden
#line 1392
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1393
 testRunner.And("search the recordset with type \"Is Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1394
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1395
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1396
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2189 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2189.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2189.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2189.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2189.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2189.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = test@testEmail.co.za",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2189.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Is Email",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1397
 testRunner.And("the debug inputs as", ((string)(null)), table2189, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2190 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2190.AddRow(new string[] {
                            "[[result]] = 5"});
#line 1405
 testRunner.And("the debug output as", ((string)(null)), table2190, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Email multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsEmailMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Email multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1409
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2191 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2191.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
                table2191.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2191.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2191.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2191.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2191.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
                table2191.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1410
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2191, "Given ");
#line hidden
#line 1419
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1420
 testRunner.And("search the recordset with type \"Is Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1421
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1422
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1423
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2192 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2192.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = test@testEmail.co.za",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2192.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2192.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2192.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2192.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2192.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = test@testEmail.co.za",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2192.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = user",
                            "1",
                            "Is Email",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1424
 testRunner.And("the debug inputs as", ((string)(null)), table2192, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2193 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2193.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 1433
 testRunner.And("the debug output as", ((string)(null)), table2193, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Email result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsEmailResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Email result doesnt exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1437
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2194 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2194.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2194.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2194.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2194.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2194.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2194.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1438
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2194, "Given ");
#line hidden
#line 1446
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1447
 testRunner.And("search the recordset with type \"Is Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1448
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1449
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1450
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2195 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2195.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2195.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2195.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2195.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2195.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2195.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Is Email",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1451
 testRunner.And("the debug inputs as", ((string)(null)), table2195, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2196 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2196.AddRow(new string[] {
                            "[[result]] = -1"});
#line 1459
 testRunner.And("the debug output as", ((string)(null)), table2196, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Numeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsNumeric()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Numeric", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1463
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2197 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2197.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2197.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2197.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2197.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2197.AddRow(new string[] {
                            "rs().field",
                            "45"});
                table2197.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1464
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2197, "Given ");
#line hidden
#line 1472
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1473
 testRunner.And("search the recordset with type \"Is Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1474
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1475
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1476
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2198 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2198.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2198.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2198.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2198.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2198.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = 45",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2198.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Is Numeric",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1477
 testRunner.And("the debug inputs as", ((string)(null)), table2198, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2199 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2199.AddRow(new string[] {
                            "[[result]] = 5"});
#line 1485
 testRunner.And("the debug output as", ((string)(null)), table2199, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Numeric multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsNumericMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Numeric multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1489
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2200 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2200.AddRow(new string[] {
                            "rs().field",
                            "41"});
                table2200.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2200.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2200.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2200.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2200.AddRow(new string[] {
                            "rs().field",
                            "54"});
                table2200.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1490
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2200, "Given ");
#line hidden
#line 1499
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1500
 testRunner.And("search the recordset with type \"Is Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1501
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1502
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1503
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2201 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2201.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 41",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2201.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2201.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2201.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2201.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2201.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = 54",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2201.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = user",
                            "1",
                            "Is Numeric",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1504
 testRunner.And("the debug inputs as", ((string)(null)), table2201, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2202 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2202.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 1513
 testRunner.And("the debug output as", ((string)(null)), table2202, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Numeric result doesnt exis" +
            "t")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsNumericResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Numeric result doesnt exis" +
                    "t", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1517
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2203 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2203.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2203.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2203.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2203.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2203.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2203.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1518
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2203, "Given ");
#line hidden
#line 1526
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1527
 testRunner.And("search the recordset with type \"Is Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1528
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1529
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1530
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2204 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2204.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2204.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2204.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2204.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2204.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2204.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "",
                            "Is Numeric",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1531
 testRunner.And("the debug inputs as", ((string)(null)), table2204, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2205 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2205.AddRow(new string[] {
                            "[[result]] = -1"});
#line 1539
 testRunner.And("the debug output as", ((string)(null)), table2205, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Regex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsRegex()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Regex", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1543
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2206 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2206.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2206.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2206.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2206.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2206.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2206.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1544
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2206, "Given ");
#line hidden
#line 1552
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1553
 testRunner.And("search the recordset with type \"Is Regex\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1554
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1555
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1556
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2207 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2207.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2207.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2207.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2207.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2207.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2207.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Is Regex",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1557
 testRunner.And("the debug inputs as", ((string)(null)), table2207, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2208 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2208.AddRow(new string[] {
                            "[[result]] = 5"});
#line 1565
 testRunner.And("the debug output as", ((string)(null)), table2208, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Regex multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsRegexMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Regex multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1569
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2209 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2209.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2209.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2209.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2209.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2209.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2209.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2209.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1570
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2209, "Given ");
#line hidden
#line 1579
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1580
 testRunner.And("search the recordset with type \"Is Regex\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1581
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1582
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1583
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2210 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2210.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2210.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2210.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2210.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2210.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2210.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2210.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = user",
                            "1",
                            "Is Regex",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1584
 testRunner.And("the debug inputs as", ((string)(null)), table2210, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2211 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2211.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 1593
 testRunner.And("the debug output as", ((string)(null)), table2211, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Regex result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsRegexResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Regex result doesnt exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1597
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2212 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2212.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2212.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2212.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2212.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2212.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2212.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1598
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2212, "Given ");
#line hidden
#line 1606
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1607
 testRunner.And("search the recordset with type \"Is Regex\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1608
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1609
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1610
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2213 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2213.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2213.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2213.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2213.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2213.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2213.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Is Regex",
                            "Mars",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1611
 testRunner.And("the debug inputs as", ((string)(null)), table2213, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2214 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2214.AddRow(new string[] {
                            "[[result]] = -1"});
#line 1619
 testRunner.And("the debug output as", ((string)(null)), table2214, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Text")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsText()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Text", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1623
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2215 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2215.AddRow(new string[] {
                            "rs().field",
                            "15"});
                table2215.AddRow(new string[] {
                            "rs().field",
                            "56"});
                table2215.AddRow(new string[] {
                            "rs().field",
                            "45"});
                table2215.AddRow(new string[] {
                            "rs().field",
                            "7"});
                table2215.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2215.AddRow(new string[] {
                            "rs().field",
                            "16"});
#line 1624
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2215, "Given ");
#line hidden
#line 1632
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1633
 testRunner.And("search the recordset with type \"Is Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1634
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1635
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1636
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2216 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2216.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 15",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2216.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 56",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2216.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 45",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2216.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 7",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2216.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2216.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = 16",
                            "1",
                            "Is Text",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1637
 testRunner.And("the debug inputs as", ((string)(null)), table2216, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2217 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2217.AddRow(new string[] {
                            "[[result]] = 5"});
#line 1645
 testRunner.And("the debug output as", ((string)(null)), table2217, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Text multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsTextMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Text multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1649
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2218 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2218.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2218.AddRow(new string[] {
                            "rs().field",
                            "45"});
                table2218.AddRow(new string[] {
                            "rs().field",
                            "54"});
                table2218.AddRow(new string[] {
                            "rs().field",
                            "51"});
                table2218.AddRow(new string[] {
                            "rs().field",
                            "86"});
                table2218.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2218.AddRow(new string[] {
                            "rs().field",
                            "8"});
#line 1650
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2218, "Given ");
#line hidden
#line 1659
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1660
 testRunner.And("search the recordset with type \"Is Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1661
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1662
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1663
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2219 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2219.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2219.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 45",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2219.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 54",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2219.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 51",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2219.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = 86",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2219.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2219.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = 8",
                            "1",
                            "Is Text",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1664
 testRunner.And("the debug inputs as", ((string)(null)), table2219, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2220 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2220.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 1673
 testRunner.And("the debug output as", ((string)(null)), table2220, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Text result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsTextResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Text result doesnt exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1677
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2221 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2221.AddRow(new string[] {
                            "rs().field",
                            "1"});
                table2221.AddRow(new string[] {
                            "rs().field",
                            "2"});
                table2221.AddRow(new string[] {
                            "rs().field",
                            "3"});
                table2221.AddRow(new string[] {
                            "rs().field",
                            "4"});
                table2221.AddRow(new string[] {
                            "rs().field",
                            "6"});
                table2221.AddRow(new string[] {
                            "rs().field",
                            "5"});
#line 1678
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2221, "Given ");
#line hidden
#line 1686
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1687
 testRunner.And("search the recordset with type \"Is Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1688
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1689
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1690
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2222 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2222.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2222.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2222.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 3",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2222.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 4",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2222.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = 6",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2222.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = 5",
                            "1",
                            "Is Text",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1691
 testRunner.And("the debug inputs as", ((string)(null)), table2222, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2223 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2223.AddRow(new string[] {
                            "[[result]] = -1"});
#line 1699
 testRunner.And("the debug output as", ((string)(null)), table2223, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is XML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsXML()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is XML", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1703
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2224 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2224.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2224.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2224.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2224.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2224.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
                table2224.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1704
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2224, "Given ");
#line hidden
#line 1712
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1713
 testRunner.And("search the recordset with type \"Is XML\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1714
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1715
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1716
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2225 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2225.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2225.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2225.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2225.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2225.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = <test></test>",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2225.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Is XML",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1717
 testRunner.And("the debug inputs as", ((string)(null)), table2225, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2226 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2226.AddRow(new string[] {
                            "[[result]] = 5"});
#line 1725
 testRunner.And("the debug output as", ((string)(null)), table2226, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is XML multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsXMLMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is XML multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1729
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2227 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2227.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
                table2227.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2227.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2227.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2227.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2227.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
                table2227.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1730
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2227, "Given ");
#line hidden
#line 1739
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1740
 testRunner.And("search the recordset with type \"Is XML\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1741
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1742
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1743
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2228 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2228.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = <test></test>",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2228.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2228.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2228.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2228.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2228.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = <test></test>",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2228.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = user",
                            "1",
                            "Is XML",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1744
 testRunner.And("the debug inputs as", ((string)(null)), table2228, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2229 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2229.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 1753
 testRunner.And("the debug output as", ((string)(null)), table2229, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is XML result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsXMLResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is XML result doesnt exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1757
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2230 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2230.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2230.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2230.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2230.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2230.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2230.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1758
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2230, "Given ");
#line hidden
#line 1766
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1767
 testRunner.And("search the recordset with type \"Is XML\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1768
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1769
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1770
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2231 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2231.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2231.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2231.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2231.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2231.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2231.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Is XML",
                            "Mars",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1771
 testRunner.And("the debug inputs as", ((string)(null)), table2231, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2232 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2232.AddRow(new string[] {
                            "[[result]] = -1"});
#line 1779
 testRunner.And("the debug output as", ((string)(null)), table2232, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Alphanumeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotAlphanumeric()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Alphanumeric", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1783
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2233 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2233.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2233.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2233.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2233.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2233.AddRow(new string[] {
                            "rs().field",
                            "$$"});
                table2233.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1784
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2233, "Given ");
#line hidden
#line 1792
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1793
 testRunner.And("search the recordset with type \"Not Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1794
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1795
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1796
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2234 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2234.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2234.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2234.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2234.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2234.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = $$",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2234.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Not Alphanumeric",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1797
 testRunner.And("the debug inputs as", ((string)(null)), table2234, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2235 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2235.AddRow(new string[] {
                            "[[result]] = 5"});
#line 1805
 testRunner.And("the debug output as", ((string)(null)), table2235, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Alphanumeric multiple res" +
            "ults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotAlphanumericMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Alphanumeric multiple res" +
                    "ults", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1809
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2236 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2236.AddRow(new string[] {
                            "rs().field",
                            "$$"});
                table2236.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2236.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2236.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2236.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2236.AddRow(new string[] {
                            "rs().field",
                            "$$"});
                table2236.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1810
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2236, "Given ");
#line hidden
#line 1819
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1820
 testRunner.And("search the recordset with type \"Not Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1821
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1822
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1823
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2237 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2237.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = $$",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2237.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2237.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2237.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2237.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2237.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = $$",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2237.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = user",
                            "1",
                            "Not Alphanumeric",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1824
 testRunner.And("the debug inputs as", ((string)(null)), table2237, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2238 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2238.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 1833
 testRunner.And("the debug output as", ((string)(null)), table2238, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Alphanumeric result doesn" +
            "t exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotAlphanumericResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Alphanumeric result doesn" +
                    "t exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1837
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2239 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2239.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2239.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2239.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2239.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2239.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2239.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 1838
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2239, "Given ");
#line hidden
#line 1846
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1847
 testRunner.And("search the recordset with type \"Not Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1848
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1849
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1850
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2240 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2240.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2240.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2240.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2240.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2240.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2240.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Not Alphanumeric",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1851
 testRunner.And("the debug inputs as", ((string)(null)), table2240, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2241 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2241.AddRow(new string[] {
                            "[[result]] = -1"});
#line 1859
 testRunner.And("the debug output as", ((string)(null)), table2241, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotDate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Date", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1863
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2242 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2242.AddRow(new string[] {
                            "rs().field",
                            "12/11/2013"});
                table2242.AddRow(new string[] {
                            "rs().field",
                            "12/11/2013"});
                table2242.AddRow(new string[] {
                            "rs().field",
                            "12/11/2013"});
                table2242.AddRow(new string[] {
                            "rs().field",
                            "12/11/2013"});
                table2242.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2242.AddRow(new string[] {
                            "rs().field",
                            "12/11/2013"});
#line 1864
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2242, "Given ");
#line hidden
#line 1872
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1873
 testRunner.And("search the recordset with type \"Not Date\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1874
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1875
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1876
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2243 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2243.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 12/11/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2243.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 12/11/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2243.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 12/11/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2243.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 12/11/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2243.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2243.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = 12/11/2013",
                            "1",
                            "Not Date",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1877
 testRunner.And("the debug inputs as", ((string)(null)), table2243, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2244 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2244.AddRow(new string[] {
                            "[[result]] = 5"});
#line 1885
 testRunner.And("the debug output as", ((string)(null)), table2244, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Date multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotDateMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Date multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1889
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2245 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2245.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2245.AddRow(new string[] {
                            "rs().field",
                            "12/11/2013"});
                table2245.AddRow(new string[] {
                            "rs().field",
                            "12/11/2013"});
                table2245.AddRow(new string[] {
                            "rs().field",
                            "12/11/2013"});
                table2245.AddRow(new string[] {
                            "rs().field",
                            "12/11/2013"});
                table2245.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2245.AddRow(new string[] {
                            "rs().field",
                            "12/11/2013"});
#line 1890
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2245, "Given ");
#line hidden
#line 1899
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1900
 testRunner.And("search the recordset with type \"Not Date\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1901
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1902
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1903
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2246 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2246.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2246.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 12/11/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2246.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 12/11/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2246.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 12/11/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2246.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = 12/11/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2246.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2246.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = 12/11/2013",
                            "1",
                            "Not Date",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1904
 testRunner.And("the debug inputs as", ((string)(null)), table2246, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2247 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2247.AddRow(new string[] {
                            "[[result]] = 1,6"});
#line 1913
 testRunner.And("the debug output as", ((string)(null)), table2247, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Date result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotDateResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Date result doesnt exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1917
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2248 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2248.AddRow(new string[] {
                            "rs().field",
                            "12/11/2013"});
                table2248.AddRow(new string[] {
                            "rs().field",
                            "12/11/2013"});
                table2248.AddRow(new string[] {
                            "rs().field",
                            "12/11/2013"});
                table2248.AddRow(new string[] {
                            "rs().field",
                            "12/11/2013"});
                table2248.AddRow(new string[] {
                            "rs().field",
                            "12/11/2013"});
                table2248.AddRow(new string[] {
                            "rs().field",
                            "12/11/2013"});
#line 1918
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2248, "Given ");
#line hidden
#line 1926
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1927
 testRunner.And("search the recordset with type \"Not Date\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1928
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1929
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1930
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2249 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2249.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 12/11/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2249.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 12/11/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2249.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 12/11/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2249.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 12/11/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2249.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = 12/11/2013",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2249.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = 12/11/2013",
                            "1",
                            "Not Date",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1931
 testRunner.And("the debug inputs as", ((string)(null)), table2249, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2250 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2250.AddRow(new string[] {
                            "[[result]] = -1"});
#line 1939
 testRunner.And("the debug output as", ((string)(null)), table2250, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Email")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEmail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Email", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1943
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2251 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2251.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
                table2251.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
                table2251.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
                table2251.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
                table2251.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2251.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
#line 1944
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2251, "Given ");
#line hidden
#line 1952
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1953
 testRunner.And("search the recordset with type \"Not Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1954
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1955
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1956
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2252 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2252.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = test@testEmail.co.za",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2252.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = test@testEmail.co.za",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2252.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = test@testEmail.co.za",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2252.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = test@testEmail.co.za",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2252.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2252.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = test@testEmail.co.za",
                            "1",
                            "Not Email",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1957
 testRunner.And("the debug inputs as", ((string)(null)), table2252, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2253 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2253.AddRow(new string[] {
                            "[[result]] =  5"});
#line 1965
 testRunner.And("the debug output as", ((string)(null)), table2253, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Email multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEmailMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Email multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1969
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2254 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2254.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2254.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
                table2254.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
                table2254.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
                table2254.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
                table2254.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2254.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
#line 1970
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2254, "Given ");
#line hidden
#line 1979
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1980
 testRunner.And("search the recordset with type \"Not Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1981
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1982
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1983
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2255 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2255.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2255.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = test@testEmail.co.za",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2255.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = test@testEmail.co.za",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2255.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = test@testEmail.co.za",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2255.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = test@testEmail.co.za",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2255.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2255.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = test@testEmail.co.za",
                            "1",
                            "Not Email",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 1984
 testRunner.And("the debug inputs as", ((string)(null)), table2255, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2256 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2256.AddRow(new string[] {
                            "[[result]] =  1,6"});
#line 1993
 testRunner.And("the debug output as", ((string)(null)), table2256, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Email result doesnt exist" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEmailResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Email result doesnt exist" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1997
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2257 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2257.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
                table2257.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
                table2257.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
                table2257.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
                table2257.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
                table2257.AddRow(new string[] {
                            "rs().field",
                            "test@testEmail.co.za"});
#line 1998
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2257, "Given ");
#line hidden
#line 2006
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2007
 testRunner.And("search the recordset with type \"Not Email\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2008
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2009
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2010
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2258 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2258.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = test@testEmail.co.za",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2258.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = test@testEmail.co.za",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2258.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = test@testEmail.co.za",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2258.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = test@testEmail.co.za",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2258.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = test@testEmail.co.za",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2258.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = test@testEmail.co.za",
                            "1",
                            "Not Email",
                            "Mars",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 2011
 testRunner.And("the debug inputs as", ((string)(null)), table2258, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2259 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2259.AddRow(new string[] {
                            "[[result]] =  -1"});
#line 2019
 testRunner.And("the debug output as", ((string)(null)), table2259, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Numeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotNumeric()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Numeric", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2023
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2260 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2260.AddRow(new string[] {
                            "rs().field",
                            "152"});
                table2260.AddRow(new string[] {
                            "rs().field",
                            "5"});
                table2260.AddRow(new string[] {
                            "rs().field",
                            "6"});
                table2260.AddRow(new string[] {
                            "rs().field",
                            "7"});
                table2260.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2260.AddRow(new string[] {
                            "rs().field",
                            "5"});
#line 2024
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2260, "Given ");
#line hidden
#line 2032
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2033
 testRunner.And("search the recordset with type \"Not Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2034
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2035
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2036
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2261 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2261.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 152",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2261.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 5",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2261.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 6",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2261.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 7",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2261.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2261.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = 5",
                            "1",
                            "Not Numeric",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 2037
 testRunner.And("the debug inputs as", ((string)(null)), table2261, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2262 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2262.AddRow(new string[] {
                            "[[result]] =  5"});
#line 2045
 testRunner.And("the debug output as", ((string)(null)), table2262, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Numeric multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotNumericMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Numeric multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2049
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2263 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2263.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2263.AddRow(new string[] {
                            "rs().field",
                            "45"});
                table2263.AddRow(new string[] {
                            "rs().field",
                            "2"});
                table2263.AddRow(new string[] {
                            "rs().field",
                            "4"});
                table2263.AddRow(new string[] {
                            "rs().field",
                            "5"});
                table2263.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2263.AddRow(new string[] {
                            "rs().field",
                            "5"});
#line 2050
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2263, "Given ");
#line hidden
#line 2059
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2060
 testRunner.And("search the recordset with type \"Not Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2061
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2062
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2063
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2264 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2264.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2264.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 45",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2264.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2264.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 4",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2264.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = 5",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2264.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2264.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = 5",
                            "1",
                            "Not Numeric",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 2064
 testRunner.And("the debug inputs as", ((string)(null)), table2264, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2265 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2265.AddRow(new string[] {
                            "[[result]] =  1,6"});
#line 2073
 testRunner.And("the debug output as", ((string)(null)), table2265, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Numeric result doesnt exi" +
            "st")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotNumericResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Numeric result doesnt exi" +
                    "st", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2077
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2266 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2266.AddRow(new string[] {
                            "rs().field",
                            "1"});
                table2266.AddRow(new string[] {
                            "rs().field",
                            "1"});
                table2266.AddRow(new string[] {
                            "rs().field",
                            "2"});
                table2266.AddRow(new string[] {
                            "rs().field",
                            "2"});
                table2266.AddRow(new string[] {
                            "rs().field",
                            "3"});
                table2266.AddRow(new string[] {
                            "rs().field",
                            "3"});
#line 2078
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2266, "Given ");
#line hidden
#line 2086
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2087
 testRunner.And("search the recordset with type \"Not Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2088
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2089
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2090
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2267 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2267.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2267.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2267.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2267.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 2",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2267.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = 3",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2267.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = 3",
                            "1",
                            "Not Numeric",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 2091
 testRunner.And("the debug inputs as", ((string)(null)), table2267, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2268 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2268.AddRow(new string[] {
                            "[[result]] =  -1"});
#line 2099
  testRunner.And("the debug output as", ((string)(null)), table2268, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Text")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotText()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Text", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2269 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2269.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2269.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2269.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2269.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2269.AddRow(new string[] {
                            "rs().field",
                            "52"});
                table2269.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 2104
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2269, "Given ");
#line hidden
#line 2112
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2113
 testRunner.And("search the recordset with type \"Not Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2114
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2115
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2116
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2270 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2270.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2270.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2270.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2270.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2270.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = 52",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2270.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Not Text",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 2117
 testRunner.And("the debug inputs as", ((string)(null)), table2270, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2271 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2271.AddRow(new string[] {
                            "[[result]] =  5"});
#line 2125
 testRunner.And("the debug output as", ((string)(null)), table2271, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Text multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotTextMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Text multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2129
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2272 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2272.AddRow(new string[] {
                            "rs().field",
                            "45"});
                table2272.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2272.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2272.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2272.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2272.AddRow(new string[] {
                            "rs().field",
                            "741"});
                table2272.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 2130
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2272, "Given ");
#line hidden
#line 2139
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2140
 testRunner.And("search the recordset with type \"Not Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2141
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2142
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2143
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2273 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2273.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 45",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2273.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2273.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2273.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2273.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2273.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = 741",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2273.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = user",
                            "1",
                            "Not Text",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 2144
 testRunner.And("the debug inputs as", ((string)(null)), table2273, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2274 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2274.AddRow(new string[] {
                            "[[result]] =  1,6"});
#line 2153
 testRunner.And("the debug output as", ((string)(null)), table2274, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Text result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotTextResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Text result doesnt exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2157
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2275 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2275.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2275.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2275.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2275.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2275.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2275.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 2158
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2275, "Given ");
#line hidden
#line 2166
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2167
 testRunner.And("search the recordset with type \"Not Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2168
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2169
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2170
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2276 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2276.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2276.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2276.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2276.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2276.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2276.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = user",
                            "1",
                            "Not Text",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 2171
 testRunner.And("the debug inputs as", ((string)(null)), table2276, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2277 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2277.AddRow(new string[] {
                            "[[result]] =  -1"});
#line 2179
  testRunner.And("the debug output as", ((string)(null)), table2277, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not XML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotXML()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not XML", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2183
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2278 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2278.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
                table2278.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
                table2278.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
                table2278.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
                table2278.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2278.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
#line 2184
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2278, "Given ");
#line hidden
#line 2192
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2193
 testRunner.And("search the recordset with type \"Not XML\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2194
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2195
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2196
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2279 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2279.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = <test></test>",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2279.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = <test></test>",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2279.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = <test></test>",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2279.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = <test></test>",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2279.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2279.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = <test></test>",
                            "1",
                            "Not XML",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 2197
 testRunner.And("the debug inputs as", ((string)(null)), table2279, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2280 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2280.AddRow(new string[] {
                            "[[result]] =  5"});
#line 2205
 testRunner.And("the debug output as", ((string)(null)), table2280, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not XML multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotXMLMultipleResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not XML multiple results", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2209
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2281 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2281.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2281.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
                table2281.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
                table2281.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
                table2281.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
                table2281.AddRow(new string[] {
                            "rs().field",
                            "Warewolf"});
                table2281.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
#line 2210
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2281, "Given ");
#line hidden
#line 2219
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2220
 testRunner.And("search the recordset with type \"Not XML\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2221
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2222
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2223
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2282 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2282.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2282.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = <test></test>",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2282.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = <test></test>",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2282.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = <test></test>",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2282.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = <test></test>",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2282.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2282.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = <test></test>",
                            "1",
                            "Not XML",
                            "Warewolf",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 2224
 testRunner.And("the debug inputs as", ((string)(null)), table2282, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2283 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2283.AddRow(new string[] {
                            "[[result]] =  1,6"});
#line 2233
 testRunner.And("the debug output as", ((string)(null)), table2283, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not XML result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotXMLResultDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not XML result doesnt exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2237
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2284 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2284.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
                table2284.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
                table2284.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
                table2284.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
                table2284.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
                table2284.AddRow(new string[] {
                            "rs().field",
                            "<test></test>"});
#line 2238
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2284, "Given ");
#line hidden
#line 2246
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2247
 testRunner.And("search the recordset with type \"Not XML\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2248
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2249
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2250
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2285 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2285.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = <test></test>",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2285.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = <test></test>",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2285.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = <test></test>",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2285.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = <test></test>",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2285.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = <test></test>",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2285.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = <test></test>",
                            "1",
                            "Not XML",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 2251
 testRunner.And("the debug inputs as", ((string)(null)), table2285, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2286 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2286.AddRow(new string[] {
                            "[[result]] =  -1"});
#line 2259
 testRunner.And("the debug output as", ((string)(null)), table2286, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type Contains and requires all fields" +
            " to match true and match all rows true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeContainsAndRequiresAllFieldsToMatchTrueAndMatchAllRowsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type Contains and requires all fields" +
                    " to match true and match all rows true", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2263
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2287 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2287.AddRow(new string[] {
                            "rs(1).field1",
                            "123"});
                table2287.AddRow(new string[] {
                            "rs(2).field1",
                            "2"});
                table2287.AddRow(new string[] {
                            "rs(3).field1",
                            "5"});
#line 2264
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2287, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2288 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2288.AddRow(new string[] {
                            "rs1(1).field2",
                            "214"});
                table2288.AddRow(new string[] {
                            "rs1(2).field2",
                            "51"});
                table2288.AddRow(new string[] {
                            "rs1(3).field2",
                            "56"});
#line 2269
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2288, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2289 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2289.AddRow(new string[] {
                            "rs2(1).field3",
                            "512"});
                table2289.AddRow(new string[] {
                            "rs2(2).field3",
                            "84"});
                table2289.AddRow(new string[] {
                            "rs2(3).field3",
                            "12"});
#line 2274
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2289, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2290 = new TechTalk.SpecFlow.Table(new string[] {
                            "field"});
                table2290.AddRow(new string[] {
                            "[[rs().field1]]"});
                table2290.AddRow(new string[] {
                            "[[rs1().field2]]"});
                table2290.AddRow(new string[] {
                            "[[rs2().field3]]"});
#line 2279
 testRunner.And("the fields to search is", ((string)(null)), table2290, "And ");
#line hidden
#line 2284
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2285
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2286
 testRunner.And("when match all search criteria is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2287
 testRunner.And("when requires all fields to match is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2288
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2289
 testRunner.Then("the find records index multiple result should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2290
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type Contains and requires all fields" +
            " to match false and match all rows true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeContainsAndRequiresAllFieldsToMatchFalseAndMatchAllRowsTrue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type Contains and requires all fields" +
                    " to match false and match all rows true", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2292
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2291 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2291.AddRow(new string[] {
                            "rs(1).field1",
                            "123"});
                table2291.AddRow(new string[] {
                            "rs(2).field1",
                            "2"});
                table2291.AddRow(new string[] {
                            "rs(3).field1",
                            "5"});
#line 2293
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2291, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2292 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2292.AddRow(new string[] {
                            "rs1(1).field2",
                            "214"});
                table2292.AddRow(new string[] {
                            "rs1(2).field2",
                            "51"});
                table2292.AddRow(new string[] {
                            "rs1(3).field2",
                            "56"});
#line 2298
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2292, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2293 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2293.AddRow(new string[] {
                            "rs2(1).field3",
                            "512"});
                table2293.AddRow(new string[] {
                            "rs2(2).field3",
                            "84"});
                table2293.AddRow(new string[] {
                            "rs2(3).field3",
                            "12"});
#line 2303
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2293, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2294 = new TechTalk.SpecFlow.Table(new string[] {
                            "field"});
                table2294.AddRow(new string[] {
                            "[[rs().field1]]"});
                table2294.AddRow(new string[] {
                            "[[rs1().field2]]"});
                table2294.AddRow(new string[] {
                            "[[rs2().field3]]"});
#line 2308
 testRunner.And("the fields to search is", ((string)(null)), table2294, "And ");
#line hidden
#line 2313
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2314
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2315
 testRunner.And("when match all search criteria is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2316
 testRunner.And("when requires all fields to match is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2317
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2318
 testRunner.Then("the find records index multiple result should be 1,3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2319
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type Contains and requires all fields" +
            " to match false and match all rows false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeContainsAndRequiresAllFieldsToMatchFalseAndMatchAllRowsFalse()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type Contains and requires all fields" +
                    " to match false and match all rows false", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2321
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2295 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2295.AddRow(new string[] {
                            "AB(1).f1",
                            "123"});
                table2295.AddRow(new string[] {
                            "AB(2).f1",
                            "2"});
                table2295.AddRow(new string[] {
                            "AB(3).f1",
                            "5"});
#line 2322
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2295, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2296 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2296.AddRow(new string[] {
                            "CD(1).f2",
                            "214"});
                table2296.AddRow(new string[] {
                            "CD(2).f2",
                            "51"});
                table2296.AddRow(new string[] {
                            "CD(3).f2",
                            "56"});
#line 2327
 testRunner.And("I have the following recordset to search for multiple criteria", ((string)(null)), table2296, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2297 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2297.AddRow(new string[] {
                            "EF(1).f3",
                            "512"});
                table2297.AddRow(new string[] {
                            "EF(2).f3",
                            "84"});
                table2297.AddRow(new string[] {
                            "EF(3).f3",
                            "12"});
#line 2332
 testRunner.And("I have the following recordset to search for multiple criteria", ((string)(null)), table2297, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2298 = new TechTalk.SpecFlow.Table(new string[] {
                            "field"});
                table2298.AddRow(new string[] {
                            "[[AB().f1]]"});
                table2298.AddRow(new string[] {
                            "[[CD().f2]]"});
                table2298.AddRow(new string[] {
                            "[[EF().f3]]"});
#line 2337
 testRunner.And("the fields to search is", ((string)(null)), table2298, "And ");
#line hidden
#line 2342
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2343
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2344
 testRunner.And("when match all search criteria is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2345
 testRunner.And("when requires all fields to match is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2346
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2347
 testRunner.Then("the find records index multiple result should be 1,2,3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2348
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type Contains and requires all fields" +
            " to match true and match all rows false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeContainsAndRequiresAllFieldsToMatchTrueAndMatchAllRowsFalse()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type Contains and requires all fields" +
                    " to match true and match all rows false", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2350
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2299 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2299.AddRow(new string[] {
                            "rs(1).field1",
                            "123"});
                table2299.AddRow(new string[] {
                            "rs(2).field1",
                            "2"});
                table2299.AddRow(new string[] {
                            "rs(3).field1",
                            "5"});
#line 2351
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2299, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2300 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2300.AddRow(new string[] {
                            "rs1(1).field2",
                            "214"});
                table2300.AddRow(new string[] {
                            "rs1(2).field2",
                            "52"});
                table2300.AddRow(new string[] {
                            "rs1(3).field2",
                            "56"});
#line 2356
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2300, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2301 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2301.AddRow(new string[] {
                            "rs2(1).field3",
                            "512"});
                table2301.AddRow(new string[] {
                            "rs2(2).field3",
                            "82"});
                table2301.AddRow(new string[] {
                            "rs2(3).field3",
                            "12"});
#line 2361
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2301, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2302 = new TechTalk.SpecFlow.Table(new string[] {
                            "field"});
                table2302.AddRow(new string[] {
                            "[[rs().field1]]"});
                table2302.AddRow(new string[] {
                            "[[rs1().field2]]"});
                table2302.AddRow(new string[] {
                            "[[rs2().field3]]"});
#line 2366
 testRunner.And("the fields to search is", ((string)(null)), table2302, "And ");
#line hidden
#line 2371
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2372
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2373
 testRunner.And("when match all search criteria is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2374
 testRunner.And("when requires all fields to match is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2375
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2376
 testRunner.Then("the find records index multiple result should be 1,2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2377
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Search using a negative index recordset criteria")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void SearchUsingANegativeIndexRecordsetCriteria()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search using a negative index recordset criteria", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2379
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2303 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2303.AddRow(new string[] {
                            "rs().row",
                            "Warewolf"});
                table2303.AddRow(new string[] {
                            "rs().row",
                            "User"});
#line 2380
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2303, "Given ");
#line hidden
#line 2384
 testRunner.And("field to search is \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2385
 testRunner.And("search the recordset with type \"Not XML\" and criteria is \"[[my(-1).set]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2386
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2387
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2304 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2304.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).row]] = Warewolf",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2304.AddRow(new string[] {
                            "",
                            "[[rs(2).row]] = User",
                            "1",
                            "Not XML",
                            "[[my(-1).set]] =",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 2388
 testRunner.And("the debug inputs as", ((string)(null)), table2304, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndex()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2393
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2305 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2305.AddRow(new string[] {
                            "rs().field",
                            "1"});
                table2305.AddRow(new string[] {
                            "rs().field",
                            "15"});
                table2305.AddRow(new string[] {
                            "rs().field",
                            "20"});
                table2305.AddRow(new string[] {
                            "rs().field",
                            "34"});
#line 2394
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2305, "Given ");
#line hidden
#line 2400
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2401
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"16\" and \"" +
                        "33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2402
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2403
 testRunner.Then("the find records index multiple result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2404
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2306 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2306.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2306.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = 15",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2306.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = 20",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2306.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = 34",
                            "1",
                            "Is Between",
                            "",
                            "16",
                            "33",
                            "NO",
                            "NO"});
#line 2405
 testRunner.And("the debug inputs as", ((string)(null)), table2306, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2307 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2307.AddRow(new string[] {
                            "[[result]] = 3"});
#line 2411
 testRunner.And("the debug output as", ((string)(null)), table2307, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find Record using match type as is Null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindRecordUsingMatchTypeAsIsNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find Record using match type as is Null", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2416
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2308 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2308.AddRow(new string[] {
                            "[[rs().row]]",
                            "NULL"});
#line 2417
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2308, "Given ");
#line hidden
#line 2420
 testRunner.And("field to search is \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2421
 testRunner.And("search the recordset with type \"Is NULL\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2422
 testRunner.And("when match all search criteria is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2423
 testRunner.And("when requires all fields to match is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2424
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2425
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find Record using match type as is not Null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindRecordUsingMatchTypeAsIsNotNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find Record using match type as is not Null", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2427
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2309 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2309.AddRow(new string[] {
                            "[[rs().row]]",
                            "NULL"});
#line 2428
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2309, "Given ");
#line hidden
#line 2431
 testRunner.And("field to search is \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2432
 testRunner.And("search the recordset with type \"Is Not NULL\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2433
 testRunner.And("when match all search criteria is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2434
 testRunner.And("when requires all fields to match is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2435
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2436
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Text multiple results usi" +
            "ng recordset result")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotTextMultipleResultsUsingRecordsetResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Text multiple results usi" +
                    "ng recordset result", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2438
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2310 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "value"});
                table2310.AddRow(new string[] {
                            "rs().field",
                            "45"});
                table2310.AddRow(new string[] {
                            "rs().field",
                            "You"});
                table2310.AddRow(new string[] {
                            "rs().field",
                            "are"});
                table2310.AddRow(new string[] {
                            "rs().field",
                            "the"});
                table2310.AddRow(new string[] {
                            "rs().field",
                            "best"});
                table2310.AddRow(new string[] {
                            "rs().field",
                            "741"});
                table2310.AddRow(new string[] {
                            "rs().field",
                            "user"});
#line 2439
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2310, "Given ");
#line hidden
#line 2448
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2449
 testRunner.And("search the recordset with type \"Not Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2450
 testRunner.Then("the find records index multiple result should is \"[[res().val]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2451
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2452
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2311 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "#",
                            "",
                            "",
                            "",
                            "And",
                            "Require All Fields To Match",
                            "Require All Matches To Be True"});
                table2311.AddRow(new string[] {
                            "In Field(s)",
                            "[[rs(1).field]] = 45",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2311.AddRow(new string[] {
                            "",
                            "[[rs(2).field]] = You",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2311.AddRow(new string[] {
                            "",
                            "[[rs(3).field]] = are",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2311.AddRow(new string[] {
                            "",
                            "[[rs(4).field]] = the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2311.AddRow(new string[] {
                            "",
                            "[[rs(5).field]] = best",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2311.AddRow(new string[] {
                            "",
                            "[[rs(6).field]] = 741",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2311.AddRow(new string[] {
                            "",
                            "[[rs(7).field]] = user",
                            "1",
                            "Not Text",
                            "",
                            "",
                            "",
                            "NO",
                            "NO"});
#line 2453
 testRunner.And("the debug inputs as", ((string)(null)), table2311, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2312 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table2312.AddRow(new string[] {
                            "[[res(1).val]] =  1"});
                table2312.AddRow(new string[] {
                            "[[res(2).val]] =  6"});
#line 2462
 testRunner.And("the debug output as", ((string)(null)), table2312, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
