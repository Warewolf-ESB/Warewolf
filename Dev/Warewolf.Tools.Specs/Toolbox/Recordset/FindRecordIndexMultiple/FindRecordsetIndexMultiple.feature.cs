// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.Recordset.FindRecordIndexMultiple
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class FindRecordsetIndexMultipleFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FindRecordsetIndexMultiple.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FindRecordsetIndexMultiple", "\tIn order to search for pieces of data in a recordset\r\n\tAs a Warewolf user\r\n\tI wa" +
                    "nt a tool I can use to find an index ", ProgrammingLanguage.CSharp, new string[] {
                        "Recordset"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "FindRecordsetIndexMultiple")))
            {
                global::Warewolf.Tools.Specs.Toolbox.Recordset.FindRecordIndexMultiple.FindRecordsetIndexMultipleFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Between numeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsBetweenNumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Between numeric", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1.AddRow(new string[] {
                        "rs().field",
                        "15"});
            table1.AddRow(new string[] {
                        "rs().field",
                        "20"});
            table1.AddRow(new string[] {
                        "rs().field",
                        "34"});
#line 8
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1, "Given ");
#line 14
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"16\" and \"" +
                    "33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("the find records index multiple result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 15",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 20",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 34",
                        "1",
                        "Is Between",
                        "",
                        "16",
                        "33",
                        "NO",
                        "NO"});
#line 19
 testRunner.And("the debug inputs as", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table3.AddRow(new string[] {
                        "[[result]] = 3"});
#line 25
 testRunner.And("the debug output as", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in an empty recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInAnEmptyRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in an empty recordset", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table4.AddRow(new string[] {
                        "",
                        ""});
#line 30
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table4, "Given ");
#line 33
 testRunner.And("field to search is \"[[rs().value]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"16\" and \"" +
                    "33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
 testRunner.Then("the find records index multiple result should be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table5.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(*).value]] =",
                        "1",
                        "Is Between",
                        "",
                        "16",
                        "33",
                        "NO",
                        "NO"});
#line 38
 testRunner.And("the debug inputs as", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table6.AddRow(new string[] {
                        "[[result]] = -1"});
#line 41
 testRunner.And("the debug output as", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with a blank from")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithABlankFrom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with a blank from", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table7.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table7.AddRow(new string[] {
                        "rs().field",
                        "15"});
            table7.AddRow(new string[] {
                        "rs().field",
                        "20"});
            table7.AddRow(new string[] {
                        "rs().field",
                        "34"});
#line 46
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table7, "Given ");
#line 52
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"\" and \"33" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then("the find records index multiple result should be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 56
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table8.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 15",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 20",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 34",
                        "1",
                        "Is Between",
                        "",
                        "\" \"",
                        "33",
                        "NO",
                        "NO"});
#line 57
 testRunner.And("the debug inputs as", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table9.AddRow(new string[] {
                        "[[result]] = -1"});
#line 63
 testRunner.And("the debug output as", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with blank to")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithBlankTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with blank to", ((string[])(null)));
#line 67
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table10.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table10.AddRow(new string[] {
                        "rs().field",
                        "15"});
            table10.AddRow(new string[] {
                        "rs().field",
                        "20"});
            table10.AddRow(new string[] {
                        "rs().field",
                        "34"});
#line 68
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table10, "Given ");
#line 74
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"16\" and \"" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
 testRunner.Then("the find records index multiple result should be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 78
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table11.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 15",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 20",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 34",
                        "1",
                        "Is Between",
                        "",
                        "16",
                        "\" \"",
                        "NO",
                        "NO"});
#line 79
 testRunner.And("the debug inputs as", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table12.AddRow(new string[] {
                        "[[result]] = -1"});
#line 85
 testRunner.And("the debug output as", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Between DateTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsBetweenDateTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Between DateTime", ((string[])(null)));
#line 89
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table13.AddRow(new string[] {
                        "rs().field",
                        "5/3/2013"});
            table13.AddRow(new string[] {
                        "rs().field",
                        "2/3/2013"});
            table13.AddRow(new string[] {
                        "rs().field",
                        "7/4/2013"});
            table13.AddRow(new string[] {
                        "rs().field",
                        "11/11/2012"});
#line 90
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table13, "Given ");
#line 96
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"1/3/2013\"" +
                    " and \"3/3/2013\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.Then("the find records index multiple result should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 100
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table14.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 5/3/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 2/3/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 7/4/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 11/11/2012",
                        "1",
                        "Is Between",
                        "",
                        "1/3/2013",
                        "3/3/2013",
                        "NO",
                        "NO"});
#line 101
 testRunner.And("the debug inputs as", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table15.AddRow(new string[] {
                        "[[result]] = 2"});
#line 107
 testRunner.And("the debug output as", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Base64")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Base64", ((string[])(null)));
#line 111
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table16.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table16.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table16.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table16.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
#line 112
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table16, "Given ");
#line 118
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
 testRunner.And("search the recordset with type \"Is Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 121
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 122
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table17.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = d2FyZXdvbGY=",
                        "1",
                        "Is Base64",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 123
 testRunner.And("the debug inputs as", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table18.AddRow(new string[] {
                        "[[result]] = 4"});
#line 129
 testRunner.And("the debug output as", ((string)(null)), table18, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Binary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Binary", ((string[])(null)));
#line 133
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table19.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table19.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table19.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table19.AddRow(new string[] {
                        "rs().field",
                        "101011110010"});
#line 134
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table19, "Given ");
#line 140
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.And("search the recordset with type \"Is Binary\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 144
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table20.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 101011110010",
                        "1",
                        "Is Binary",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 145
 testRunner.And("the debug inputs as", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table21.AddRow(new string[] {
                        "[[result]] = 4"});
#line 151
 testRunner.And("the debug output as", ((string)(null)), table21, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Hex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsHex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Hex", ((string[])(null)));
#line 155
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table22.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table22.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table22.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table22.AddRow(new string[] {
                        "rs().field",
                        "77617265776f6c66"});
#line 156
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table22, "Given ");
#line 162
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.And("search the recordset with type \"Is Hex\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 165
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 166
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table23.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table23.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table23.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table23.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 77617265776f6c66",
                        "1",
                        "Is Hex",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 167
 testRunner.And("the debug inputs as", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table24.AddRow(new string[] {
                        "[[result]] = 4"});
#line 173
 testRunner.And("the debug output as", ((string)(null)), table24, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Base64")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Base64", ((string[])(null)));
#line 177
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table25.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table25.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table25.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table25.AddRow(new string[] {
                        "rs().field",
                        "You"});
#line 178
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table25, "Given ");
#line 184
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
 testRunner.And("search the recordset with type \"Not Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 187
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 188
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table26.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table26.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table26.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table26.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = You",
                        "1",
                        "Not Base64",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 189
 testRunner.And("the debug inputs as", ((string)(null)), table26, "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table27.AddRow(new string[] {
                        "[[result]] = 4"});
#line 195
 testRunner.And("the debug output as", ((string)(null)), table27, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Between DateTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotBetweenDateTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Between DateTime", ((string[])(null)));
#line 199
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table28.AddRow(new string[] {
                        "rs().field",
                        "2/3/2013"});
            table28.AddRow(new string[] {
                        "rs().field",
                        "7/3/2013"});
            table28.AddRow(new string[] {
                        "rs().field",
                        "2/3/2013"});
            table28.AddRow(new string[] {
                        "rs().field",
                        "2/3/2013"});
#line 200
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table28, "Given ");
#line 206
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
 testRunner.And("is between search the recordset with type \"Not Between\" and criteria is \"1/3/2013" +
                    "\" and \"3/3/2013\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 209
 testRunner.Then("the find records index multiple result should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 210
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table29.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 2/3/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 7/3/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 2/3/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 2/3/2013",
                        "1",
                        "Not Between",
                        "",
                        "1/3/2013",
                        "3/3/2013",
                        "NO",
                        "NO"});
#line 211
 testRunner.And("the debug inputs as", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table30.AddRow(new string[] {
                        "[[result]] = 2"});
#line 217
 testRunner.And("the debug output as", ((string)(null)), table30, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Between numeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotBetweenNumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Between numeric", ((string[])(null)));
#line 221
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table31.AddRow(new string[] {
                        "rs().field",
                        "17"});
            table31.AddRow(new string[] {
                        "rs().field",
                        "22"});
            table31.AddRow(new string[] {
                        "rs().field",
                        "400"});
            table31.AddRow(new string[] {
                        "rs().field",
                        "31"});
#line 222
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table31, "Given ");
#line 228
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 229
 testRunner.And("is between search the recordset with type \"Not Between\" and criteria is \"16\" and " +
                    "\"33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 230
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 231
 testRunner.Then("the find records index multiple result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 232
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table32.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 17",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table32.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 22",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table32.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 400",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table32.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 31",
                        "1",
                        "Not Between",
                        "",
                        "16",
                        "33",
                        "NO",
                        "NO"});
#line 233
 testRunner.And("the debug inputs as", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table33.AddRow(new string[] {
                        "[[result]] = 3"});
#line 239
 testRunner.And("the debug output as", ((string)(null)), table33, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Binary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Binary", ((string[])(null)));
#line 243
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table34.AddRow(new string[] {
                        "rs().field",
                        "101011110010"});
            table34.AddRow(new string[] {
                        "rs().field",
                        "101011110010"});
            table34.AddRow(new string[] {
                        "rs().field",
                        "101011110010"});
            table34.AddRow(new string[] {
                        "rs().field",
                        "warewolf"});
#line 244
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table34, "Given ");
#line 250
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
 testRunner.And("search the recordset with type \"Not Binary\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 252
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 253
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 254
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table35.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 101011110010",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table35.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 101011110010",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table35.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 101011110010",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table35.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = warewolf",
                        "1",
                        "Not Binary",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 255
 testRunner.And("the debug inputs as", ((string)(null)), table35, "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table36.AddRow(new string[] {
                        "[[result]] = 4"});
#line 261
 testRunner.And("the debug output as", ((string)(null)), table36, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Hex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotHex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Hex", ((string[])(null)));
#line 265
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table37.AddRow(new string[] {
                        "rs().field",
                        "77617265776f6c66"});
            table37.AddRow(new string[] {
                        "rs().field",
                        "77617265776f6c66"});
            table37.AddRow(new string[] {
                        "rs().field",
                        "77617265776f6c66"});
            table37.AddRow(new string[] {
                        "rs().field",
                        "warewolf"});
#line 266
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table37, "Given ");
#line 272
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 273
 testRunner.And("search the recordset with type \"Not Hex\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 274
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 275
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 276
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table38.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 77617265776f6c66",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 77617265776f6c66",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 77617265776f6c66",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = warewolf",
                        "1",
                        "Not Hex",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 277
 testRunner.And("the debug inputs as", ((string)(null)), table38, "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table39.AddRow(new string[] {
                        "[[result]] = 4"});
#line 283
 testRunner.And("the debug output as", ((string)(null)), table39, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Regex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotRegex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Regex", ((string[])(null)));
#line 287
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table40.AddRow(new string[] {
                        "rs().field",
                        "999.999.999.999"});
            table40.AddRow(new string[] {
                        "rs().field",
                        "999.999.999.999"});
            table40.AddRow(new string[] {
                        "rs().field",
                        "999.999.999.999"});
            table40.AddRow(new string[] {
                        "rs().field",
                        "warewolf"});
#line 288
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table40, "Given ");
#line 294
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 295
 testRunner.And("search the recordset with type \"Not Regex\" and criteria is \"\\b\\d{1,3}\\.\\d{1,3}\\.\\" +
                    "d{1,3}\\.\\d{1,3}\\b\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 296
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 297
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 298
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table41.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 999.999.999.999",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 999.999.999.999",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 999.999.999.999",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = warewolf",
                        "1",
                        "Not Regex",
                        "\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 299
 testRunner.And("the debug inputs as", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table42.AddRow(new string[] {
                        "[[result]] = 4"});
#line 305
 testRunner.And("the debug output as", ((string)(null)), table42, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Doesn\"t Start With")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithDoesntStartWith()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Doesn\"t Start With", ((string[])(null)));
#line 309
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table43.AddRow(new string[] {
                        "rs().field",
                        "what"});
            table43.AddRow(new string[] {
                        "rs().field",
                        "why"});
            table43.AddRow(new string[] {
                        "rs().field",
                        "yay"});
#line 310
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table43, "Given ");
#line 315
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 316
 testRunner.And("search the recordset with type \"Doesn\'t Start With\" and criteria is \"w\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 317
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 318
 testRunner.Then("the find records index multiple result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 319
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table44.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = what",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table44.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = why",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table44.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = yay",
                        "1",
                        "Doesn\'t Start With",
                        "w",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 320
 testRunner.And("the debug inputs as", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table45.AddRow(new string[] {
                        "[[result]] = 3"});
#line 325
 testRunner.And("the debug output as", ((string)(null)), table45, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Doesn\"t End With")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithDoesntEndWith()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Doesn\"t End With", ((string[])(null)));
#line 329
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table46.AddRow(new string[] {
                        "rs().field",
                        "arev"});
            table46.AddRow(new string[] {
                        "rs().field",
                        "v"});
            table46.AddRow(new string[] {
                        "rs().field",
                        "modev"});
            table46.AddRow(new string[] {
                        "rs().field",
                        "yay"});
#line 330
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table46, "Given ");
#line 336
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 337
 testRunner.And("search the recordset with type \"Doesn\'t End With\" and criteria is \"v\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 338
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 339
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 340
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table47.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = arev",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table47.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = v",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table47.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = modev",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table47.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = yay",
                        "1",
                        "Doesn\'t End With",
                        "v",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 341
 testRunner.And("the debug inputs as", ((string)(null)), table47, "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table48.AddRow(new string[] {
                        "[[result]] = 4"});
#line 347
 testRunner.And("the debug output as", ((string)(null)), table48, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Equal To")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEqualTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Equal To", ((string[])(null)));
#line 351
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table49.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table49.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table49.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table49.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table49.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table49.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 352
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table49, "Given ");
#line 360
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 361
 testRunner.And("search the recordset with type \"=\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 362
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 363
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 364
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table50.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table50.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table50.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table50.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table50.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table50.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "=",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 365
 testRunner.And("the debug inputs as", ((string)(null)), table50, "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table51.AddRow(new string[] {
                        "[[result]] = 5"});
#line 373
 testRunner.And("the debug output as", ((string)(null)), table51, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Equal To multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEqualToMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Equal To multiple results", ((string[])(null)));
#line 377
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table52.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table52.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table52.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table52.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table52.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table52.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table52.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 378
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table52, "Given ");
#line 387
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 388
 testRunner.And("search the recordset with type \"=\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 389
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 390
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 391
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table53.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table53.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table53.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table53.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table53.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table53.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table53.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "=",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 392
 testRunner.And("the debug inputs as", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table54.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 401
 testRunner.And("the debug output as", ((string)(null)), table54, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Equal To result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEqualToResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Equal To result doesnt exist", ((string[])(null)));
#line 405
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table55.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table55.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table55.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table55.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table55.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table55.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 406
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table55, "Given ");
#line 414
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 415
 testRunner.And("search the recordset with type \"=\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 416
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 417
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 418
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table56.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table56.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table56.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table56.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table56.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table56.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "=",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 419
 testRunner.And("the debug inputs as", ((string)(null)), table56, "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table57.AddRow(new string[] {
                        "[[result]] = -1"});
#line 427
 testRunner.And("the debug output as", ((string)(null)), table57, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Than")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterThan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Than", ((string[])(null)));
#line 431
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table58.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table58.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table58.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table58.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table58.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table58.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 432
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table58, "Given ");
#line 440
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 441
 testRunner.And("search the recordset with type \">\" and criteria is \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 442
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 443
 testRunner.Then("the find records index multiple result should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 444
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table59.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table59.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table59.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table59.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table59.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table59.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        ">",
                        "3",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 445
 testRunner.And("the debug inputs as", ((string)(null)), table59, "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table60.AddRow(new string[] {
                        "[[result]] = 1"});
#line 453
 testRunner.And("the debug output as", ((string)(null)), table60, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Than multiple results" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterThanMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Than multiple results" +
                    "", ((string[])(null)));
#line 457
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table61.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table61.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table61.AddRow(new string[] {
                        "rs().field",
                        "123"});
            table61.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table61.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table61.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table61.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 458
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table61, "Given ");
#line 467
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 468
 testRunner.And("search the recordset with type \">\" and criteria is \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 469
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 470
 testRunner.Then("the find records index multiple result should be 1,3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 471
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table62.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table62.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table62.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 123",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table62.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table62.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table62.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table62.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        ">",
                        "3",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 472
 testRunner.And("the debug inputs as", ((string)(null)), table62, "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table63.AddRow(new string[] {
                        "[[result]] = 1,3"});
#line 481
 testRunner.And("the debug output as", ((string)(null)), table63, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Than result doesnt ex" +
            "ist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterThanResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Than result doesnt ex" +
                    "ist", ((string[])(null)));
#line 485
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table64.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table64.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table64.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table64.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table64.AddRow(new string[] {
                        "rs().field",
                        "8"});
            table64.AddRow(new string[] {
                        "rs().field",
                        "2"});
#line 486
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table64, "Given ");
#line 494
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 495
 testRunner.And("search the recordset with type \">\" and criteria is \"50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 496
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 497
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 498
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table65.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table65.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table65.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table65.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table65.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 8",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table65.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 2",
                        "1",
                        ">",
                        "50",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 499
 testRunner.And("the debug inputs as", ((string)(null)), table65, "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table66.AddRow(new string[] {
                        "[[result]] = -1"});
#line 507
 testRunner.And("the debug output as", ((string)(null)), table66, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Than")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessThan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Than", ((string[])(null)));
#line 511
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table67.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table67.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table67.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table67.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table67.AddRow(new string[] {
                        "rs().field",
                        "8"});
            table67.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 512
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table67, "Given ");
#line 520
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 521
 testRunner.And("search the recordset with type \"<\" and criteria is \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 522
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 523
 testRunner.Then("the find records index multiple result should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 524
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table68.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table68.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table68.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table68.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table68.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 8",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table68.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "<",
                        "5",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 525
 testRunner.And("the debug inputs as", ((string)(null)), table68, "And ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table69.AddRow(new string[] {
                        "[[result]] = 1"});
#line 533
 testRunner.And("the debug output as", ((string)(null)), table69, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Than multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessThanMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Than multiple results", ((string[])(null)));
#line 537
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table70.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table70.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table70.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table70.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table70.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table70.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table70.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 538
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table70, "Given ");
#line 547
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 548
 testRunner.And("search the recordset with type \"<\" and criteria is \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 549
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 550
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 551
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table71.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table71.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "<",
                        "5",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 552
 testRunner.And("the debug inputs as", ((string)(null)), table71, "And ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table72.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 561
 testRunner.And("the debug output as", ((string)(null)), table72, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Than result doesnt exist" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessThanResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Than result doesnt exist" +
                    "", ((string[])(null)));
#line 565
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table73.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table73.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table73.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table73.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table73.AddRow(new string[] {
                        "rs().field",
                        "5"});
            table73.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 566
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table73, "Given ");
#line 574
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 575
 testRunner.And("search the recordset with type \"<\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 576
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 577
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 578
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table74.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table74.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table74.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table74.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table74.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 5",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table74.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "<",
                        "1",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 579
 testRunner.And("the debug inputs as", ((string)(null)), table74, "And ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table75.AddRow(new string[] {
                        "[[result]] = -1"});
#line 587
 testRunner.And("the debug output as", ((string)(null)), table75, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Equal To")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEqualTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Equal To", ((string[])(null)));
#line 591
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table76.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table76.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table76.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table76.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table76.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table76.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
#line 592
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table76, "Given ");
#line 600
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 601
 testRunner.And("search the recordset with type \"<> (Not Equal)\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 602
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 603
 testRunner.Then("the find records index multiple result should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 604
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table77.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table77.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table77.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table77.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table77.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table77.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "1",
                        "<> (Not Equal)",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 605
 testRunner.And("the debug inputs as", ((string)(null)), table77, "And ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table78.AddRow(new string[] {
                        "[[result]] =  1"});
#line 613
 testRunner.And("the debug output as", ((string)(null)), table78, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Equal To multiple results" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEqualToMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Equal To multiple results" +
                    "", ((string[])(null)));
#line 617
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table79.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table79.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table79.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table79.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table79.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table79.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 618
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table79, "Given ");
#line 626
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 627
 testRunner.And("search the recordset with type \"<> (Not Equal)\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 628
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 629
 testRunner.Then("the find records index multiple result should be 1,2,3,4,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 630
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table80.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table80.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table80.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table80.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table80.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table80.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "<> (Not Equal)",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 631
 testRunner.And("the debug inputs as", ((string)(null)), table80, "And ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table81.AddRow(new string[] {
                        "[[result]] = 1,2,3,4,6"});
#line 639
 testRunner.And("the debug output as", ((string)(null)), table81, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Equal To result doesnt ex" +
            "ist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEqualToResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Equal To result doesnt ex" +
                    "ist", ((string[])(null)));
#line 643
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table82.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table82.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table82.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table82.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table82.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table82.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
#line 644
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table82, "Given ");
#line 652
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 653
 testRunner.And("search the recordset with type \"<> (Not Equal)\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 654
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 655
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 656
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table83.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table83.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table83.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table83.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table83.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table83.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Mars",
                        "1",
                        "<> (Not Equal)",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 657
 testRunner.And("the debug inputs as", ((string)(null)), table83, "And ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table84.AddRow(new string[] {
                        "[[result]] = -1"});
#line 665
 testRunner.And("the debug output as", ((string)(null)), table84, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Or Equal To")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterOrEqualTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Or Equal To", ((string[])(null)));
#line 669
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table85.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table85.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table85.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table85.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table85.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table85.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 670
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table85, "Given ");
#line 678
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 679
 testRunner.And("search the recordset with type \">=\" and criteria is \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 680
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 681
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 682
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table86.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table86.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table86.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table86.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table86.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table86.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        ">=",
                        "4",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 683
 testRunner.And("the debug inputs as", ((string)(null)), table86, "And ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table87.AddRow(new string[] {
                        "[[result]] = 5"});
#line 691
 testRunner.And("the debug output as", ((string)(null)), table87, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Or Equal To multiple " +
            "results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterOrEqualToMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Or Equal To multiple " +
                    "results", ((string[])(null)));
#line 695
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table88.AddRow(new string[] {
                        "rs().field",
                        "50"});
            table88.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table88.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table88.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table88.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table88.AddRow(new string[] {
                        "rs().field",
                        "4"});
#line 696
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table88, "Given ");
#line 704
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 705
 testRunner.And("search the recordset with type \">=\" and criteria is \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 706
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 707
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 708
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table89.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 50",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table89.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table89.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table89.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table89.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table89.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 4",
                        "1",
                        ">=",
                        "4",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 709
 testRunner.And("the debug inputs as", ((string)(null)), table89, "And ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table90.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 717
 testRunner.And("the debug output as", ((string)(null)), table90, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Or Equal To result do" +
            "esnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterOrEqualToResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Or Equal To result do" +
                    "esnt exist", ((string[])(null)));
#line 721
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table91.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table91.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table91.AddRow(new string[] {
                        "rs().field",
                        "3"});
            table91.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table91.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table91.AddRow(new string[] {
                        "rs().field",
                        "3"});
#line 722
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table91, "Given ");
#line 730
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 731
 testRunner.And("search the recordset with type \">=\" and criteria is \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 732
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 733
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 734
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table92.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table92.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table92.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 3",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table92.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table92.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table92.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 3",
                        "1",
                        ">=",
                        "4",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 735
 testRunner.And("the debug inputs as", ((string)(null)), table92, "And ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table93.AddRow(new string[] {
                        "[[result]] = -1"});
#line 743
 testRunner.And("the debug output as", ((string)(null)), table93, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Or Equal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessOrEqual()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Or Equal", ((string[])(null)));
#line 747
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table94.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table94.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table94.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table94.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table94.AddRow(new string[] {
                        "rs().field",
                        "aaa"});
            table94.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 748
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table94, "Given ");
#line 756
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 757
 testRunner.And("search the recordset with type \"<=\" and criteria is \"aaa\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 758
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 759
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 760
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table95.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table95.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table95.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table95.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table95.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = aaa",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table95.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "<=",
                        "aaa",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 761
 testRunner.And("the debug inputs as", ((string)(null)), table95, "And ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table96.AddRow(new string[] {
                        "[[result]] = 5"});
#line 769
 testRunner.And("the debug output as", ((string)(null)), table96, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Or Equal multiple result" +
            "s")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessOrEqualMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Or Equal multiple result" +
                    "s", ((string[])(null)));
#line 773
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table97.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table97.AddRow(new string[] {
                        "rs().field",
                        "7"});
            table97.AddRow(new string[] {
                        "rs().field",
                        "8"});
            table97.AddRow(new string[] {
                        "rs().field",
                        "9"});
            table97.AddRow(new string[] {
                        "rs().field",
                        "10"});
            table97.AddRow(new string[] {
                        "rs().field",
                        "5"});
#line 774
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table97, "Given ");
#line 782
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 783
 testRunner.And("search the recordset with type \"<=\" and criteria is \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 784
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 785
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 786
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table98.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table98.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 7",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table98.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 8",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table98.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 9",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table98.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 10",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table98.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 5",
                        "1",
                        "<=",
                        "5",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 787
 testRunner.And("the debug inputs as", ((string)(null)), table98, "And ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table99.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 795
 testRunner.And("the debug output as", ((string)(null)), table99, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Or Equal result doesnt e" +
            "xist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessOrEqualResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Or Equal result doesnt e" +
                    "xist", ((string[])(null)));
#line 799
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table100.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table100.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table100.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table100.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table100.AddRow(new string[] {
                        "rs().field",
                        "5"});
            table100.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 800
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table100, "Given ");
#line 808
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 809
 testRunner.And("search the recordset with type \"<=\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 810
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 811
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 812
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table101.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table101.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table101.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table101.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table101.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 5",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table101.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "<=",
                        "1",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 813
 testRunner.And("the debug inputs as", ((string)(null)), table101, "And ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table102.AddRow(new string[] {
                        "[[result]] = -1"});
#line 821
 testRunner.And("the debug output as", ((string)(null)), table102, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Starts With")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsStartsWith()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Starts With", ((string[])(null)));
#line 825
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table103.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table103.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table103.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table103.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table103.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table103.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 826
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table103, "Given ");
#line 834
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 835
 testRunner.And("search the recordset with type \"Starts With\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 836
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 837
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 838
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table104.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table104.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table104.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table104.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table104.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table104.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Starts With",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 839
 testRunner.And("the debug inputs as", ((string)(null)), table104, "And ");
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table105.AddRow(new string[] {
                        "[[result]] = 5"});
#line 847
 testRunner.And("the debug output as", ((string)(null)), table105, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Starts With multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsStartsWithMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Starts With multiple results", ((string[])(null)));
#line 851
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table106.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table106.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table106.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table106.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table106.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table106.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table106.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 852
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table106, "Given ");
#line 861
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 862
 testRunner.And("search the recordset with type \"Starts With\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 863
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 864
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 865
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table107.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table107.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table107.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table107.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table107.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table107.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table107.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Starts With",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 866
 testRunner.And("the debug inputs as", ((string)(null)), table107, "And ");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table108.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 875
 testRunner.And("the debug output as", ((string)(null)), table108, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Starts With result doesnt exi" +
            "st")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsStartsWithResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Starts With result doesnt exi" +
                    "st", ((string[])(null)));
#line 879
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table109.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table109.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table109.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table109.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table109.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table109.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 880
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table109, "Given ");
#line 888
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 889
 testRunner.And("search the recordset with type \"Starts With\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 890
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 891
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 892
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table110.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table110.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table110.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table110.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table110.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table110.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Starts With",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 893
 testRunner.And("the debug inputs as", ((string)(null)), table110, "And ");
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table111.AddRow(new string[] {
                        "[[result]] = -1"});
#line 901
 testRunner.And("the debug output as", ((string)(null)), table111, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Ends With")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEndsWith()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Ends With", ((string[])(null)));
#line 905
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table112.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table112.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table112.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table112.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table112.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table112.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 906
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table112, "Given ");
#line 914
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 915
 testRunner.And("search the recordset with type \"Ends With\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 916
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 917
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 918
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table113.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table113.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table113.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table113.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table113.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table113.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Ends With",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 919
 testRunner.And("the debug inputs as", ((string)(null)), table113, "And ");
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table114.AddRow(new string[] {
                        "[[result]] = 5"});
#line 927
 testRunner.And("the debug output as", ((string)(null)), table114, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Ends With multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEndsWithMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Ends With multiple results", ((string[])(null)));
#line 931
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table115.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table115.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table115.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table115.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table115.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table115.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table115.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 932
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table115, "Given ");
#line 941
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 942
 testRunner.And("search the recordset with type \"Ends With\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 943
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 944
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 945
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table116.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table116.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table116.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table116.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table116.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table116.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table116.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Ends With",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 946
 testRunner.And("the debug inputs as", ((string)(null)), table116, "And ");
#line hidden
            TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table117.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 955
 testRunner.And("the debug output as", ((string)(null)), table117, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Ends With result doesnt exist" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEndsWithResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Ends With result doesnt exist" +
                    "", ((string[])(null)));
#line 959
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table118.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table118.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table118.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table118.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table118.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table118.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 960
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table118, "Given ");
#line 968
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 969
 testRunner.And("search the recordset with type \"Ends With\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 970
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 971
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 972
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table119.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table119.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table119.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table119.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table119.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table119.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Ends With",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 973
 testRunner.And("the debug inputs as", ((string)(null)), table119, "And ");
#line hidden
            TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table120.AddRow(new string[] {
                        "[[result]] = -1"});
#line 981
 testRunner.And("the debug output as", ((string)(null)), table120, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Contains")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsContains()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Contains", ((string[])(null)));
#line 985
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table121.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table121.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table121.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table121.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table121.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table121.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 986
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table121, "Given ");
#line 994
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 995
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 996
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 997
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 998
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table122.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table122.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table122.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table122.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table122.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table122.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Contains",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 999
 testRunner.And("the debug inputs as", ((string)(null)), table122, "And ");
#line hidden
            TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table123.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1007
 testRunner.And("the debug output as", ((string)(null)), table123, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Contains multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsContainsMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Contains multiple results", ((string[])(null)));
#line 1011
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table124.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table124.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table124.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table124.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table124.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table124.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table124.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1012
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table124, "Given ");
#line 1021
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1022
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1023
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1024
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1025
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table125.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table125.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table125.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table125.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table125.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table125.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table125.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Contains",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1026
 testRunner.And("the debug inputs as", ((string)(null)), table125, "And ");
#line hidden
            TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table126.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1035
 testRunner.And("the debug output as", ((string)(null)), table126, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Contains result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsContainsResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Contains result doesnt exist", ((string[])(null)));
#line 1039
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table127.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table127.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table127.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table127.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table127.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table127.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1040
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table127, "Given ");
#line 1048
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1049
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1050
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1051
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1052
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table128.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table128.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table128.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table128.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table128.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table128.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Contains",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1053
 testRunner.And("the debug inputs as", ((string)(null)), table128, "And ");
#line hidden
            TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table129.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1061
 testRunner.And("the debug output as", ((string)(null)), table129, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Doesn\"t Contain")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsDoesntContain()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Doesn\"t Contain", ((string[])(null)));
#line 1065
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table130.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table130.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table130.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table130.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table130.AddRow(new string[] {
                        "rs().field",
                        "user"});
            table130.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
#line 1066
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table130, "Given ");
#line 1074
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1075
 testRunner.And("search the recordset with type \"Doesn\'t Contain\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1076
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1077
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1078
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table131.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table131.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table131.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table131.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table131.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = user",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table131.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "1",
                        "Doesn\'t Contain",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1079
 testRunner.And("the debug inputs as", ((string)(null)), table131, "And ");
#line hidden
            TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table132.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1087
 testRunner.And("the debug output as", ((string)(null)), table132, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Doesn\"t Contain multiple resu" +
            "lts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsDoesntContainMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Doesn\"t Contain multiple resu" +
                    "lts", ((string[])(null)));
#line 1091
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table133.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table133.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table133.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table133.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table133.AddRow(new string[] {
                        "rs().field",
                        "user"});
            table133.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
#line 1092
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table133, "Given ");
#line 1100
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1101
 testRunner.And("search the recordset with type \"Doesn\'t Contain\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1102
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1103
 testRunner.Then("the find records index multiple result should be 1,5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1104
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table134.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table134.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table134.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table134.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table134.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = user",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table134.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "1",
                        "Doesn\'t Contain",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1105
 testRunner.And("the debug inputs as", ((string)(null)), table134, "And ");
#line hidden
            TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table135.AddRow(new string[] {
                        "[[result]] = 1,5"});
#line 1113
 testRunner.And("the debug output as", ((string)(null)), table135, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Doesn\"t Contain result doesnt" +
            " exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsDoesntContainResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Doesn\"t Contain result doesnt" +
                    " exist", ((string[])(null)));
#line 1117
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table136.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table136.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table136.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table136.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table136.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table136.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
#line 1118
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table136, "Given ");
#line 1126
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1127
 testRunner.And("search the recordset with type \"Doesn\'t Contain\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1128
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1129
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1130
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table137.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table137.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table137.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table137.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table137.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table137.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Mars",
                        "1",
                        "Doesn\'t Contain",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1131
 testRunner.And("the debug inputs as", ((string)(null)), table137, "And ");
#line hidden
            TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table138.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1139
 testRunner.And("the debug output as", ((string)(null)), table138, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Alphanumeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsAlphanumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Alphanumeric", ((string[])(null)));
#line 1143
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table139.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table139.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table139.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table139.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table139.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table139.AddRow(new string[] {
                        "rs().field",
                        "$$"});
#line 1144
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table139, "Given ");
#line 1152
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1153
 testRunner.And("search the recordset with type \"Is Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1154
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1155
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1156
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table140.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table140.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table140.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table140.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table140.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table140.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = $$",
                        "1",
                        "Is Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1157
 testRunner.And("the debug inputs as", ((string)(null)), table140, "And ");
#line hidden
            TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table141.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1165
 testRunner.And("the debug output as", ((string)(null)), table141, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Alphanumeric multiple resu" +
            "lts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsAlphanumericMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Alphanumeric multiple resu" +
                    "lts", ((string[])(null)));
#line 1169
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table142.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table142.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table142.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table142.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table142.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table142.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table142.AddRow(new string[] {
                        "rs().field",
                        "$$"});
#line 1170
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table142, "Given ");
#line 1179
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1180
 testRunner.And("search the recordset with type \"Is Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1181
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1182
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1183
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table143.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table143.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table143.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table143.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table143.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table143.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table143.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = $$",
                        "1",
                        "Is Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1184
 testRunner.And("the debug inputs as", ((string)(null)), table143, "And ");
#line hidden
            TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table144.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1193
 testRunner.And("the debug output as", ((string)(null)), table144, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Alphanumeric result doesnt" +
            " exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsAlphanumericResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Alphanumeric result doesnt" +
                    " exist", ((string[])(null)));
#line 1197
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table145.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table145.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table145.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table145.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table145.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table145.AddRow(new string[] {
                        "rs().field",
                        "$$"});
#line 1198
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table145, "Given ");
#line 1206
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1207
 testRunner.And("search the recordset with type \"Is Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1208
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1209
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1210
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table146.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table146.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table146.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table146.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table146.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table146.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = $$",
                        "1",
                        "Is Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1211
 testRunner.And("the debug inputs as", ((string)(null)), table146, "And ");
#line hidden
            TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table147.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1219
 testRunner.And("the debug output as", ((string)(null)), table147, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Base64")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Base64", ((string[])(null)));
#line 1223
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table148.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table148.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table148.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table148.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table148.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table148.AddRow(new string[] {
                        "rs().field",
                        "You"});
#line 1224
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table148, "Given ");
#line 1232
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1233
 testRunner.And("search the recordset with type \"Is Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1234
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1235
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1236
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table149.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table149.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table149.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table149.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table149.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table149.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = You",
                        "1",
                        "Is Base64",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1237
 testRunner.And("the debug inputs as", ((string)(null)), table149, "And ");
#line hidden
            TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table150.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1245
 testRunner.And("the debug output as", ((string)(null)), table150, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Base64 multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsBase64MultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Base64 multiple results", ((string[])(null)));
#line 1249
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table151.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table151.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table151.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table151.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table151.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table151.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table151.AddRow(new string[] {
                        "rs().field",
                        "You"});
#line 1250
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table151, "Given ");
#line 1259
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1260
 testRunner.And("search the recordset with type \"Is Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1261
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1262
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1263
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table152.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table152.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table152.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table152.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table152.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table152.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table152.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = You",
                        "1",
                        "Is Base64",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1264
 testRunner.And("the debug inputs as", ((string)(null)), table152, "And ");
#line hidden
            TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table153.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1273
 testRunner.And("the debug output as", ((string)(null)), table153, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Base64 result doesnt exist" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsBase64ResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Base64 result doesnt exist" +
                    "", ((string[])(null)));
#line 1277
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table154.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table154.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table154.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table154.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table154.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table154.AddRow(new string[] {
                        "rs().field",
                        "You"});
#line 1278
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table154, "Given ");
#line 1286
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1287
 testRunner.And("search the recordset with type \"Is Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1288
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1289
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1290
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table155.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table155.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table155.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table155.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table155.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table155.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = You",
                        "1",
                        "Is Base64",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1291
 testRunner.And("the debug inputs as", ((string)(null)), table155, "And ");
#line hidden
            TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table156.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1299
 testRunner.And("the debug output as", ((string)(null)), table156, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Date", ((string[])(null)));
#line 1303
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table157.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table157.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table157.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table157.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table157.AddRow(new string[] {
                        "rs().field",
                        "12/10/2013"});
            table157.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1304
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table157, "Given ");
#line 1312
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1313
 testRunner.And("search the recordset with type \"Is Date\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1314
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1315
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1316
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table158.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table158.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table158.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table158.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table158.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 12/10/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table158.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Date",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1317
 testRunner.And("the debug inputs as", ((string)(null)), table158, "And ");
#line hidden
            TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table159.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1325
 testRunner.And("the debug output as", ((string)(null)), table159, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Date multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsDateMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Date multiple results", ((string[])(null)));
#line 1329
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table160.AddRow(new string[] {
                        "rs().field",
                        "12/10/2013"});
            table160.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table160.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table160.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table160.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table160.AddRow(new string[] {
                        "rs().field",
                        "12/10/2013"});
            table160.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1330
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table160, "Given ");
#line 1339
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1340
 testRunner.And("search the recordset with type \"Is Date\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1341
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1342
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1343
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table161.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 12/10/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table161.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table161.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table161.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table161.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table161.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 12/10/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table161.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Is Date",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1344
 testRunner.And("the debug inputs as", ((string)(null)), table161, "And ");
#line hidden
            TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table162.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1353
 testRunner.And("the debug output as", ((string)(null)), table162, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Date result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsDateResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Date result doesnt exist", ((string[])(null)));
#line 1357
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table163.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table163.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table163.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table163.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table163.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table163.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1358
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table163, "Given ");
#line 1366
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1367
 testRunner.And("search the recordset with type \"Is Date\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1368
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1369
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1370
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table164.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table164.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table164.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table164.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table164.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table164.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Date",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1371
 testRunner.And("the debug inputs as", ((string)(null)), table164, "And ");
#line hidden
            TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table165.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1379
 testRunner.And("the debug output as", ((string)(null)), table165, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Email")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsEmail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Email", ((string[])(null)));
#line 1383
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table166.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table166.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table166.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table166.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table166.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table166.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1384
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table166, "Given ");
#line 1392
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1393
 testRunner.And("search the recordset with type \"Is Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1394
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1395
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1396
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table167.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table167.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table167.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table167.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table167.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table167.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Email",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1397
 testRunner.And("the debug inputs as", ((string)(null)), table167, "And ");
#line hidden
            TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table168.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1405
 testRunner.And("the debug output as", ((string)(null)), table168, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Email multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsEmailMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Email multiple results", ((string[])(null)));
#line 1409
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table169.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table169.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table169.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table169.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table169.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table169.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table169.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1410
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table169, "Given ");
#line 1419
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1420
 testRunner.And("search the recordset with type \"Is Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1421
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1422
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1423
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table170.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table170.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table170.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table170.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table170.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table170.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table170.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Is Email",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1424
 testRunner.And("the debug inputs as", ((string)(null)), table170, "And ");
#line hidden
            TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table171.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1433
 testRunner.And("the debug output as", ((string)(null)), table171, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Email result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsEmailResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Email result doesnt exist", ((string[])(null)));
#line 1437
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table172.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table172.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table172.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table172.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table172.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table172.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1438
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table172, "Given ");
#line 1446
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1447
 testRunner.And("search the recordset with type \"Is Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1448
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1449
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1450
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table173.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table173.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table173.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table173.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table173.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table173.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Email",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1451
 testRunner.And("the debug inputs as", ((string)(null)), table173, "And ");
#line hidden
            TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table174.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1459
 testRunner.And("the debug output as", ((string)(null)), table174, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Numeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsNumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Numeric", ((string[])(null)));
#line 1463
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table175.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table175.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table175.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table175.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table175.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table175.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1464
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table175, "Given ");
#line 1472
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1473
 testRunner.And("search the recordset with type \"Is Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1474
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1475
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1476
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table176.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table176.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table176.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table176.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table176.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table176.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1477
 testRunner.And("the debug inputs as", ((string)(null)), table176, "And ");
#line hidden
            TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table177.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1485
 testRunner.And("the debug output as", ((string)(null)), table177, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Numeric multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsNumericMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Numeric multiple results", ((string[])(null)));
#line 1489
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table178.AddRow(new string[] {
                        "rs().field",
                        "41"});
            table178.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table178.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table178.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table178.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table178.AddRow(new string[] {
                        "rs().field",
                        "54"});
            table178.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1490
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table178, "Given ");
#line 1499
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1500
 testRunner.And("search the recordset with type \"Is Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1501
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1502
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1503
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table179.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 41",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table179.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table179.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table179.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table179.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table179.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 54",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table179.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Is Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1504
 testRunner.And("the debug inputs as", ((string)(null)), table179, "And ");
#line hidden
            TechTalk.SpecFlow.Table table180 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table180.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1513
 testRunner.And("the debug output as", ((string)(null)), table180, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Numeric result doesnt exis" +
            "t")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsNumericResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Numeric result doesnt exis" +
                    "t", ((string[])(null)));
#line 1517
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table181 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table181.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table181.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table181.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table181.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table181.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table181.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1518
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table181, "Given ");
#line 1526
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1527
 testRunner.And("search the recordset with type \"Is Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1528
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1529
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1530
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table182 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table182.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table182.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table182.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table182.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table182.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table182.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "",
                        "Is Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1531
 testRunner.And("the debug inputs as", ((string)(null)), table182, "And ");
#line hidden
            TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table183.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1539
 testRunner.And("the debug output as", ((string)(null)), table183, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Regex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsRegex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Regex", ((string[])(null)));
#line 1543
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table184.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table184.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table184.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table184.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table184.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table184.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1544
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table184, "Given ");
#line 1552
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1553
 testRunner.And("search the recordset with type \"Is Regex\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1554
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1555
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1556
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table185.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table185.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table185.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table185.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table185.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table185.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Regex",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1557
 testRunner.And("the debug inputs as", ((string)(null)), table185, "And ");
#line hidden
            TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table186.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1565
 testRunner.And("the debug output as", ((string)(null)), table186, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Regex multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsRegexMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Regex multiple results", ((string[])(null)));
#line 1569
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table187.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table187.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table187.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table187.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table187.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table187.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table187.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1570
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table187, "Given ");
#line 1579
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1580
 testRunner.And("search the recordset with type \"Is Regex\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1581
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1582
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1583
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table188.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table188.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table188.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table188.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table188.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table188.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table188.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Is Regex",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1584
 testRunner.And("the debug inputs as", ((string)(null)), table188, "And ");
#line hidden
            TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table189.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1593
 testRunner.And("the debug output as", ((string)(null)), table189, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Regex result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsRegexResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Regex result doesnt exist", ((string[])(null)));
#line 1597
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table190.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table190.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table190.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table190.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table190.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table190.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1598
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table190, "Given ");
#line 1606
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1607
 testRunner.And("search the recordset with type \"Is Regex\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1608
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1609
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1610
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table191.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table191.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table191.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table191.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table191.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table191.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Regex",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1611
 testRunner.And("the debug inputs as", ((string)(null)), table191, "And ");
#line hidden
            TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table192.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1619
 testRunner.And("the debug output as", ((string)(null)), table192, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Text")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Text", ((string[])(null)));
#line 1623
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table193.AddRow(new string[] {
                        "rs().field",
                        "15"});
            table193.AddRow(new string[] {
                        "rs().field",
                        "56"});
            table193.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table193.AddRow(new string[] {
                        "rs().field",
                        "7"});
            table193.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table193.AddRow(new string[] {
                        "rs().field",
                        "16"});
#line 1624
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table193, "Given ");
#line 1632
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1633
 testRunner.And("search the recordset with type \"Is Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1634
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1635
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1636
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table194.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 15",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table194.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 56",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table194.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table194.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 7",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table194.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table194.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 16",
                        "1",
                        "Is Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1637
 testRunner.And("the debug inputs as", ((string)(null)), table194, "And ");
#line hidden
            TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table195.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1645
 testRunner.And("the debug output as", ((string)(null)), table195, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Text multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsTextMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Text multiple results", ((string[])(null)));
#line 1649
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table196.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table196.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table196.AddRow(new string[] {
                        "rs().field",
                        "54"});
            table196.AddRow(new string[] {
                        "rs().field",
                        "51"});
            table196.AddRow(new string[] {
                        "rs().field",
                        "86"});
            table196.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table196.AddRow(new string[] {
                        "rs().field",
                        "8"});
#line 1650
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table196, "Given ");
#line 1659
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1660
 testRunner.And("search the recordset with type \"Is Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1661
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1662
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1663
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table197.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table197.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table197.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 54",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table197.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 51",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table197.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 86",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table197.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table197.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = 8",
                        "1",
                        "Is Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1664
 testRunner.And("the debug inputs as", ((string)(null)), table197, "And ");
#line hidden
            TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table198.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1673
 testRunner.And("the debug output as", ((string)(null)), table198, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Text result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsTextResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Text result doesnt exist", ((string[])(null)));
#line 1677
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table199.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table199.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table199.AddRow(new string[] {
                        "rs().field",
                        "3"});
            table199.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table199.AddRow(new string[] {
                        "rs().field",
                        "6"});
            table199.AddRow(new string[] {
                        "rs().field",
                        "5"});
#line 1678
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table199, "Given ");
#line 1686
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1687
 testRunner.And("search the recordset with type \"Is Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1688
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1689
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1690
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table200 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table200.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table200.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table200.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 3",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table200.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table200.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 6",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table200.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 5",
                        "1",
                        "Is Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1691
 testRunner.And("the debug inputs as", ((string)(null)), table200, "And ");
#line hidden
            TechTalk.SpecFlow.Table table201 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table201.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1699
 testRunner.And("the debug output as", ((string)(null)), table201, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is XML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsXML()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is XML", ((string[])(null)));
#line 1703
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table202 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table202.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table202.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table202.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table202.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table202.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table202.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1704
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table202, "Given ");
#line 1712
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1713
 testRunner.And("search the recordset with type \"Is XML\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1714
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1715
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1716
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table203.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table203.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table203.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table203.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table203.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table203.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is XML",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1717
 testRunner.And("the debug inputs as", ((string)(null)), table203, "And ");
#line hidden
            TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table204.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1725
 testRunner.And("the debug output as", ((string)(null)), table204, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is XML multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsXMLMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is XML multiple results", ((string[])(null)));
#line 1729
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table205.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table205.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table205.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table205.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table205.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table205.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table205.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1730
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table205, "Given ");
#line 1739
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1740
 testRunner.And("search the recordset with type \"Is XML\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1741
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1742
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1743
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table206.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table206.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table206.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table206.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table206.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table206.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table206.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Is XML",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1744
 testRunner.And("the debug inputs as", ((string)(null)), table206, "And ");
#line hidden
            TechTalk.SpecFlow.Table table207 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table207.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1753
 testRunner.And("the debug output as", ((string)(null)), table207, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is XML result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsXMLResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is XML result doesnt exist", ((string[])(null)));
#line 1757
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table208 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table208.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table208.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table208.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table208.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table208.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table208.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1758
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table208, "Given ");
#line 1766
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1767
 testRunner.And("search the recordset with type \"Is XML\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1768
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1769
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1770
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table209 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table209.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table209.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table209.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table209.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table209.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table209.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is XML",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1771
 testRunner.And("the debug inputs as", ((string)(null)), table209, "And ");
#line hidden
            TechTalk.SpecFlow.Table table210 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table210.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1779
 testRunner.And("the debug output as", ((string)(null)), table210, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Alphanumeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotAlphanumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Alphanumeric", ((string[])(null)));
#line 1783
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table211 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table211.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table211.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table211.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table211.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table211.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table211.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1784
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table211, "Given ");
#line 1792
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1793
 testRunner.And("search the recordset with type \"Not Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1794
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1795
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1796
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table212 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table212.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table212.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table212.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table212.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table212.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table212.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Not Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1797
 testRunner.And("the debug inputs as", ((string)(null)), table212, "And ");
#line hidden
            TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table213.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1805
 testRunner.And("the debug output as", ((string)(null)), table213, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Alphanumeric multiple res" +
            "ults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotAlphanumericMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Alphanumeric multiple res" +
                    "ults", ((string[])(null)));
#line 1809
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table214.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table214.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table214.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table214.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table214.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table214.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table214.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1810
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table214, "Given ");
#line 1819
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1820
 testRunner.And("search the recordset with type \"Not Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1821
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1822
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1823
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table215 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table215.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table215.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table215.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table215.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table215.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table215.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table215.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Not Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1824
 testRunner.And("the debug inputs as", ((string)(null)), table215, "And ");
#line hidden
            TechTalk.SpecFlow.Table table216 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table216.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1833
 testRunner.And("the debug output as", ((string)(null)), table216, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Alphanumeric result doesn" +
            "t exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotAlphanumericResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Alphanumeric result doesn" +
                    "t exist", ((string[])(null)));
#line 1837
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table217 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table217.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table217.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table217.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table217.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table217.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table217.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1838
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table217, "Given ");
#line 1846
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1847
 testRunner.And("search the recordset with type \"Not Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1848
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1849
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1850
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table218.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table218.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table218.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table218.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table218.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table218.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Not Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1851
 testRunner.And("the debug inputs as", ((string)(null)), table218, "And ");
#line hidden
            TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table219.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1859
 testRunner.And("the debug output as", ((string)(null)), table219, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Date", ((string[])(null)));
#line 1863
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table220.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table220.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table220.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table220.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table220.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table220.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
#line 1864
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table220, "Given ");
#line 1872
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1873
 testRunner.And("search the recordset with type \"Not Date\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1874
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1875
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1876
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table221 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table221.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table221.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table221.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table221.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table221.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table221.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 12/11/2013",
                        "1",
                        "Not Date",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1877
 testRunner.And("the debug inputs as", ((string)(null)), table221, "And ");
#line hidden
            TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table222.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1885
 testRunner.And("the debug output as", ((string)(null)), table222, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Date multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotDateMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Date multiple results", ((string[])(null)));
#line 1889
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table223 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table223.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table223.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table223.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table223.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table223.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table223.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table223.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
#line 1890
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table223, "Given ");
#line 1899
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1900
 testRunner.And("search the recordset with type \"Not Date\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1901
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1902
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1903
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table224 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table224.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table224.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table224.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table224.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table224.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table224.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table224.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = 12/11/2013",
                        "1",
                        "Not Date",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1904
 testRunner.And("the debug inputs as", ((string)(null)), table224, "And ");
#line hidden
            TechTalk.SpecFlow.Table table225 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table225.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1913
 testRunner.And("the debug output as", ((string)(null)), table225, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Date result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotDateResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Date result doesnt exist", ((string[])(null)));
#line 1917
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table226 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table226.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table226.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table226.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table226.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table226.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table226.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
#line 1918
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table226, "Given ");
#line 1926
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1927
 testRunner.And("search the recordset with type \"Not Date\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1928
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1929
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1930
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table227 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table227.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table227.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table227.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table227.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table227.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table227.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 12/11/2013",
                        "1",
                        "Not Date",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1931
 testRunner.And("the debug inputs as", ((string)(null)), table227, "And ");
#line hidden
            TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table228.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1939
 testRunner.And("the debug output as", ((string)(null)), table228, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Email")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEmail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Email", ((string[])(null)));
#line 1943
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table229.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table229.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table229.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table229.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table229.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table229.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
#line 1944
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table229, "Given ");
#line 1952
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1953
 testRunner.And("search the recordset with type \"Not Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1954
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1955
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1956
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table230.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table230.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table230.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table230.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table230.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table230.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = test@testEmail.co.za",
                        "1",
                        "Not Email",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1957
 testRunner.And("the debug inputs as", ((string)(null)), table230, "And ");
#line hidden
            TechTalk.SpecFlow.Table table231 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table231.AddRow(new string[] {
                        "[[result]] =  5"});
#line 1965
 testRunner.And("the debug output as", ((string)(null)), table231, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Email multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEmailMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Email multiple results", ((string[])(null)));
#line 1969
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table232 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table232.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table232.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table232.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table232.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table232.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table232.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table232.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
#line 1970
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table232, "Given ");
#line 1979
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1980
 testRunner.And("search the recordset with type \"Not Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1981
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1982
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1983
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table233 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table233.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table233.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table233.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table233.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table233.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table233.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table233.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = test@testEmail.co.za",
                        "1",
                        "Not Email",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1984
 testRunner.And("the debug inputs as", ((string)(null)), table233, "And ");
#line hidden
            TechTalk.SpecFlow.Table table234 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table234.AddRow(new string[] {
                        "[[result]] =  1,6"});
#line 1993
 testRunner.And("the debug output as", ((string)(null)), table234, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Email result doesnt exist" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEmailResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Email result doesnt exist" +
                    "", ((string[])(null)));
#line 1997
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table235 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table235.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table235.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table235.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table235.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table235.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table235.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
#line 1998
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table235, "Given ");
#line 2006
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2007
 testRunner.And("search the recordset with type \"Not Email\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2008
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2009
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2010
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table236 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table236.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table236.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table236.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table236.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table236.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table236.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = test@testEmail.co.za",
                        "1",
                        "Not Email",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2011
 testRunner.And("the debug inputs as", ((string)(null)), table236, "And ");
#line hidden
            TechTalk.SpecFlow.Table table237 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table237.AddRow(new string[] {
                        "[[result]] =  -1"});
#line 2019
 testRunner.And("the debug output as", ((string)(null)), table237, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Numeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotNumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Numeric", ((string[])(null)));
#line 2023
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table238 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table238.AddRow(new string[] {
                        "rs().field",
                        "152"});
            table238.AddRow(new string[] {
                        "rs().field",
                        "5"});
            table238.AddRow(new string[] {
                        "rs().field",
                        "6"});
            table238.AddRow(new string[] {
                        "rs().field",
                        "7"});
            table238.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table238.AddRow(new string[] {
                        "rs().field",
                        "5"});
#line 2024
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table238, "Given ");
#line 2032
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2033
 testRunner.And("search the recordset with type \"Not Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2034
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2035
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2036
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table239 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table239.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 152",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table239.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 5",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table239.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 6",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table239.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 7",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table239.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table239.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 5",
                        "1",
                        "Not Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2037
 testRunner.And("the debug inputs as", ((string)(null)), table239, "And ");
#line hidden
            TechTalk.SpecFlow.Table table240 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table240.AddRow(new string[] {
                        "[[result]] =  5"});
#line 2045
 testRunner.And("the debug output as", ((string)(null)), table240, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Numeric multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotNumericMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Numeric multiple results", ((string[])(null)));
#line 2049
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table241 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table241.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table241.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table241.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table241.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table241.AddRow(new string[] {
                        "rs().field",
                        "5"});
            table241.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table241.AddRow(new string[] {
                        "rs().field",
                        "5"});
#line 2050
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table241, "Given ");
#line 2059
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2060
 testRunner.And("search the recordset with type \"Not Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2061
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2062
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2063
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table242 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table242.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table242.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table242.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table242.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table242.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 5",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table242.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table242.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = 5",
                        "1",
                        "Not Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2064
 testRunner.And("the debug inputs as", ((string)(null)), table242, "And ");
#line hidden
            TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table243.AddRow(new string[] {
                        "[[result]] =  1,6"});
#line 2073
 testRunner.And("the debug output as", ((string)(null)), table243, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Numeric result doesnt exi" +
            "st")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotNumericResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Numeric result doesnt exi" +
                    "st", ((string[])(null)));
#line 2077
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table244 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table244.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table244.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table244.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table244.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table244.AddRow(new string[] {
                        "rs().field",
                        "3"});
            table244.AddRow(new string[] {
                        "rs().field",
                        "3"});
#line 2078
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table244, "Given ");
#line 2086
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2087
 testRunner.And("search the recordset with type \"Not Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2088
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2089
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2090
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table245 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table245.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table245.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table245.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table245.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table245.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 3",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table245.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 3",
                        "1",
                        "Not Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2091
 testRunner.And("the debug inputs as", ((string)(null)), table245, "And ");
#line hidden
            TechTalk.SpecFlow.Table table246 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table246.AddRow(new string[] {
                        "[[result]] =  -1"});
#line 2099
  testRunner.And("the debug output as", ((string)(null)), table246, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Text")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Text", ((string[])(null)));
#line 2103
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table247 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table247.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table247.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table247.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table247.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table247.AddRow(new string[] {
                        "rs().field",
                        "52"});
            table247.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 2104
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table247, "Given ");
#line 2112
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2113
 testRunner.And("search the recordset with type \"Not Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2114
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2115
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2116
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table248.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table248.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table248.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table248.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table248.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 52",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table248.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Not Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2117
 testRunner.And("the debug inputs as", ((string)(null)), table248, "And ");
#line hidden
            TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table249.AddRow(new string[] {
                        "[[result]] =  5"});
#line 2125
 testRunner.And("the debug output as", ((string)(null)), table249, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Text multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotTextMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Text multiple results", ((string[])(null)));
#line 2129
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table250.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table250.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table250.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table250.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table250.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table250.AddRow(new string[] {
                        "rs().field",
                        "741"});
            table250.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 2130
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table250, "Given ");
#line 2139
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2140
 testRunner.And("search the recordset with type \"Not Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2141
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2142
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2143
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table251.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table251.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table251.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table251.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table251.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table251.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 741",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table251.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Not Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2144
 testRunner.And("the debug inputs as", ((string)(null)), table251, "And ");
#line hidden
            TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table252.AddRow(new string[] {
                        "[[result]] =  1,6"});
#line 2153
 testRunner.And("the debug output as", ((string)(null)), table252, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Text result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotTextResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Text result doesnt exist", ((string[])(null)));
#line 2157
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table253.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table253.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table253.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table253.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table253.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table253.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 2158
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table253, "Given ");
#line 2166
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2167
 testRunner.And("search the recordset with type \"Not Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2168
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2169
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2170
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table254.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table254.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table254.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table254.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table254.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table254.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Not Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2171
 testRunner.And("the debug inputs as", ((string)(null)), table254, "And ");
#line hidden
            TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table255.AddRow(new string[] {
                        "[[result]] =  -1"});
#line 2179
  testRunner.And("the debug output as", ((string)(null)), table255, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not XML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotXML()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not XML", ((string[])(null)));
#line 2183
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table256.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table256.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table256.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table256.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table256.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table256.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
#line 2184
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table256, "Given ");
#line 2192
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2193
 testRunner.And("search the recordset with type \"Not XML\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2194
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2195
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2196
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table257.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table257.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table257.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table257.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table257.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table257.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = <test></test>",
                        "1",
                        "Not XML",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2197
 testRunner.And("the debug inputs as", ((string)(null)), table257, "And ");
#line hidden
            TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table258.AddRow(new string[] {
                        "[[result]] =  5"});
#line 2205
 testRunner.And("the debug output as", ((string)(null)), table258, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not XML multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotXMLMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not XML multiple results", ((string[])(null)));
#line 2209
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table259.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table259.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table259.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table259.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table259.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table259.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table259.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
#line 2210
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table259, "Given ");
#line 2219
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2220
 testRunner.And("search the recordset with type \"Not XML\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2221
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2222
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2223
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table260.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table260.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table260.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table260.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table260.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table260.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table260.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = <test></test>",
                        "1",
                        "Not XML",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2224
 testRunner.And("the debug inputs as", ((string)(null)), table260, "And ");
#line hidden
            TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table261.AddRow(new string[] {
                        "[[result]] =  1,6"});
#line 2233
 testRunner.And("the debug output as", ((string)(null)), table261, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not XML result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotXMLResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not XML result doesnt exist", ((string[])(null)));
#line 2237
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table262.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table262.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table262.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table262.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table262.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table262.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
#line 2238
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table262, "Given ");
#line 2246
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2247
 testRunner.And("search the recordset with type \"Not XML\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2248
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2249
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2250
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table263.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table263.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table263.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table263.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table263.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table263.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = <test></test>",
                        "1",
                        "Not XML",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2251
 testRunner.And("the debug inputs as", ((string)(null)), table263, "And ");
#line hidden
            TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table264.AddRow(new string[] {
                        "[[result]] =  -1"});
#line 2259
 testRunner.And("the debug output as", ((string)(null)), table264, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type Contains and requires all fields" +
            " to match true and match all rows true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeContainsAndRequiresAllFieldsToMatchTrueAndMatchAllRowsTrue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type Contains and requires all fields" +
                    " to match true and match all rows true", ((string[])(null)));
#line 2263
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table265.AddRow(new string[] {
                        "rs(1).field1",
                        "123"});
            table265.AddRow(new string[] {
                        "rs(2).field1",
                        "2"});
            table265.AddRow(new string[] {
                        "rs(3).field1",
                        "5"});
#line 2264
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table265, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table266 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table266.AddRow(new string[] {
                        "rs1(1).field2",
                        "214"});
            table266.AddRow(new string[] {
                        "rs1(2).field2",
                        "51"});
            table266.AddRow(new string[] {
                        "rs1(3).field2",
                        "56"});
#line 2269
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table266, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table267 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table267.AddRow(new string[] {
                        "rs2(1).field3",
                        "512"});
            table267.AddRow(new string[] {
                        "rs2(2).field3",
                        "84"});
            table267.AddRow(new string[] {
                        "rs2(3).field3",
                        "12"});
#line 2274
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table267, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table268 = new TechTalk.SpecFlow.Table(new string[] {
                        "field"});
            table268.AddRow(new string[] {
                        "[[rs().field1]]"});
            table268.AddRow(new string[] {
                        "[[rs1().field2]]"});
            table268.AddRow(new string[] {
                        "[[rs2().field3]]"});
#line 2279
 testRunner.And("the fields to search is", ((string)(null)), table268, "And ");
#line 2284
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2285
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2286
 testRunner.And("when match all search criteria is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2287
 testRunner.And("when requires all fields to match is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2288
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2289
 testRunner.Then("the find records index multiple result should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2290
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type Contains and requires all fields" +
            " to match false and match all rows true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeContainsAndRequiresAllFieldsToMatchFalseAndMatchAllRowsTrue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type Contains and requires all fields" +
                    " to match false and match all rows true", ((string[])(null)));
#line 2292
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table269 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table269.AddRow(new string[] {
                        "rs(1).field1",
                        "123"});
            table269.AddRow(new string[] {
                        "rs(2).field1",
                        "2"});
            table269.AddRow(new string[] {
                        "rs(3).field1",
                        "5"});
#line 2293
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table269, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table270 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table270.AddRow(new string[] {
                        "rs1(1).field2",
                        "214"});
            table270.AddRow(new string[] {
                        "rs1(2).field2",
                        "51"});
            table270.AddRow(new string[] {
                        "rs1(3).field2",
                        "56"});
#line 2298
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table270, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table271 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table271.AddRow(new string[] {
                        "rs2(1).field3",
                        "512"});
            table271.AddRow(new string[] {
                        "rs2(2).field3",
                        "84"});
            table271.AddRow(new string[] {
                        "rs2(3).field3",
                        "12"});
#line 2303
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table271, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table272 = new TechTalk.SpecFlow.Table(new string[] {
                        "field"});
            table272.AddRow(new string[] {
                        "[[rs().field1]]"});
            table272.AddRow(new string[] {
                        "[[rs1().field2]]"});
            table272.AddRow(new string[] {
                        "[[rs2().field3]]"});
#line 2308
 testRunner.And("the fields to search is", ((string)(null)), table272, "And ");
#line 2313
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2314
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2315
 testRunner.And("when match all search criteria is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2316
 testRunner.And("when requires all fields to match is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2317
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2318
 testRunner.Then("the find records index multiple result should be 1,3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2319
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type Contains and requires all fields" +
            " to match false and match all rows false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeContainsAndRequiresAllFieldsToMatchFalseAndMatchAllRowsFalse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type Contains and requires all fields" +
                    " to match false and match all rows false", ((string[])(null)));
#line 2321
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table273 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table273.AddRow(new string[] {
                        "AB(1).f1",
                        "123"});
            table273.AddRow(new string[] {
                        "AB(2).f1",
                        "2"});
            table273.AddRow(new string[] {
                        "AB(3).f1",
                        "5"});
#line 2322
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table273, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table274 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table274.AddRow(new string[] {
                        "CD(1).f2",
                        "214"});
            table274.AddRow(new string[] {
                        "CD(2).f2",
                        "51"});
            table274.AddRow(new string[] {
                        "CD(3).f2",
                        "56"});
#line 2327
 testRunner.And("I have the following recordset to search for multiple criteria", ((string)(null)), table274, "And ");
#line hidden
            TechTalk.SpecFlow.Table table275 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table275.AddRow(new string[] {
                        "EF(1).f3",
                        "512"});
            table275.AddRow(new string[] {
                        "EF(2).f3",
                        "84"});
            table275.AddRow(new string[] {
                        "EF(3).f3",
                        "12"});
#line 2332
 testRunner.And("I have the following recordset to search for multiple criteria", ((string)(null)), table275, "And ");
#line hidden
            TechTalk.SpecFlow.Table table276 = new TechTalk.SpecFlow.Table(new string[] {
                        "field"});
            table276.AddRow(new string[] {
                        "[[AB().f1]]"});
            table276.AddRow(new string[] {
                        "[[CD().f2]]"});
            table276.AddRow(new string[] {
                        "[[EF().f3]]"});
#line 2337
 testRunner.And("the fields to search is", ((string)(null)), table276, "And ");
#line 2342
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2343
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2344
 testRunner.And("when match all search criteria is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2345
 testRunner.And("when requires all fields to match is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2346
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2347
 testRunner.Then("the find records index multiple result should be 1,2,3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2348
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type Contains and requires all fields" +
            " to match true and match all rows false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeContainsAndRequiresAllFieldsToMatchTrueAndMatchAllRowsFalse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type Contains and requires all fields" +
                    " to match true and match all rows false", ((string[])(null)));
#line 2350
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table277 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table277.AddRow(new string[] {
                        "rs(1).field1",
                        "123"});
            table277.AddRow(new string[] {
                        "rs(2).field1",
                        "2"});
            table277.AddRow(new string[] {
                        "rs(3).field1",
                        "5"});
#line 2351
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table277, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table278 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table278.AddRow(new string[] {
                        "rs1(1).field2",
                        "214"});
            table278.AddRow(new string[] {
                        "rs1(2).field2",
                        "52"});
            table278.AddRow(new string[] {
                        "rs1(3).field2",
                        "56"});
#line 2356
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table278, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table279 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table279.AddRow(new string[] {
                        "rs2(1).field3",
                        "512"});
            table279.AddRow(new string[] {
                        "rs2(2).field3",
                        "82"});
            table279.AddRow(new string[] {
                        "rs2(3).field3",
                        "12"});
#line 2361
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table279, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table280 = new TechTalk.SpecFlow.Table(new string[] {
                        "field"});
            table280.AddRow(new string[] {
                        "[[rs().field1]]"});
            table280.AddRow(new string[] {
                        "[[rs1().field2]]"});
            table280.AddRow(new string[] {
                        "[[rs2().field3]]"});
#line 2366
 testRunner.And("the fields to search is", ((string)(null)), table280, "And ");
#line 2371
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2372
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2373
 testRunner.And("when match all search criteria is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2374
 testRunner.And("when requires all fields to match is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2375
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2376
 testRunner.Then("the find records index multiple result should be 1,2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2377
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Search using a negative index recordset criteria")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void SearchUsingANegativeIndexRecordsetCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search using a negative index recordset criteria", ((string[])(null)));
#line 2379
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table281 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table281.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table281.AddRow(new string[] {
                        "rs().row",
                        "User"});
#line 2380
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table281, "Given ");
#line 2384
 testRunner.And("field to search is \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2385
 testRunner.And("search the recordset with type \"Not XML\" and criteria is \"[[my(-1).set]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2386
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2387
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table282 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table282.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).row]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table282.AddRow(new string[] {
                        "",
                        "[[rs(2).row]] = User",
                        "1",
                        "Not XML",
                        "[[my(-1).set]] =",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2388
 testRunner.And("the debug inputs as", ((string)(null)), table282, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index", ((string[])(null)));
#line 2393
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table283 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table283.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table283.AddRow(new string[] {
                        "rs().field",
                        "15"});
            table283.AddRow(new string[] {
                        "rs().field",
                        "20"});
            table283.AddRow(new string[] {
                        "rs().field",
                        "34"});
#line 2394
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table283, "Given ");
#line 2400
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2401
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"16\" and \"" +
                    "33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2402
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2403
 testRunner.Then("the find records index multiple result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2404
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table284 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table284.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table284.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 15",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table284.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 20",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table284.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 34",
                        "1",
                        "Is Between",
                        "",
                        "16",
                        "33",
                        "NO",
                        "NO"});
#line 2405
 testRunner.And("the debug inputs as", ((string)(null)), table284, "And ");
#line hidden
            TechTalk.SpecFlow.Table table285 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table285.AddRow(new string[] {
                        "[[result]] = 3"});
#line 2411
 testRunner.And("the debug output as", ((string)(null)), table285, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find Record using match type as is Null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindRecordUsingMatchTypeAsIsNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find Record using match type as is Null", ((string[])(null)));
#line 2416
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table286 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table286.AddRow(new string[] {
                        "[[rs().row]]",
                        "NULL"});
#line 2417
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table286, "Given ");
#line 2420
 testRunner.And("field to search is \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2421
 testRunner.And("search the recordset with type \"Is NULL\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2422
 testRunner.And("when match all search criteria is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2423
 testRunner.And("when requires all fields to match is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2424
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2425
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find Record using match type as is not Null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindRecordUsingMatchTypeAsIsNotNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find Record using match type as is not Null", ((string[])(null)));
#line 2427
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table287 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table287.AddRow(new string[] {
                        "[[rs().row]]",
                        "NULL"});
#line 2428
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table287, "Given ");
#line 2431
 testRunner.And("field to search is \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2432
 testRunner.And("search the recordset with type \"Is Not NULL\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2433
 testRunner.And("when match all search criteria is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2434
 testRunner.And("when requires all fields to match is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2435
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2436
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Text multiple results usi" +
            "ng recordset result")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotTextMultipleResultsUsingRecordsetResult()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Text multiple results usi" +
                    "ng recordset result", ((string[])(null)));
#line 2438
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table288 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table288.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table288.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table288.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table288.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table288.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table288.AddRow(new string[] {
                        "rs().field",
                        "741"});
            table288.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 2439
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table288, "Given ");
#line 2448
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2449
 testRunner.And("search the recordset with type \"Not Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2450
 testRunner.Then("the find records index multiple result should is \"[[res().val]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2451
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2452
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table289 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table289.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table289.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table289.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table289.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table289.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table289.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 741",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table289.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Not Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2453
 testRunner.And("the debug inputs as", ((string)(null)), table289, "And ");
#line hidden
            TechTalk.SpecFlow.Table table290 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table290.AddRow(new string[] {
                        "[[res(1).val]] =  1"});
            table290.AddRow(new string[] {
                        "[[res(2).val]] =  6"});
#line 2462
 testRunner.And("the debug output as", ((string)(null)), table290, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
