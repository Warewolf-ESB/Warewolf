// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.Recordset.FindRecordIndexMultiple
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class FindRecordsetIndexMultipleFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "FindRecordsetIndexMultiple.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FindRecordsetIndexMultiple", "\tIn order to search for pieces of data in a recordset\r\n\tAs a Warewolf user\r\n\tI wa" +
                    "nt a tool I can use to find an index ", ProgrammingLanguage.CSharp, new string[] {
                        "Recordset"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "FindRecordsetIndexMultiple")))
            {
                global::Warewolf.Tools.Specs.Toolbox.Recordset.FindRecordIndexMultiple.FindRecordsetIndexMultipleFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Between numeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsBetweenNumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Between numeric", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1867 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1867.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1867.AddRow(new string[] {
                        "rs().field",
                        "15"});
            table1867.AddRow(new string[] {
                        "rs().field",
                        "20"});
            table1867.AddRow(new string[] {
                        "rs().field",
                        "34"});
#line 8
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1867, "Given ");
#line 14
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"16\" and \"" +
                    "33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("the find records index multiple result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1868 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1868.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1868.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 15",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1868.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 20",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1868.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 34",
                        "1",
                        "Is Between",
                        "",
                        "16",
                        "33",
                        "NO",
                        "NO"});
#line 19
 testRunner.And("the debug inputs as", ((string)(null)), table1868, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1869 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1869.AddRow(new string[] {
                        "[[result]] = 3"});
#line 25
 testRunner.And("the debug output as", ((string)(null)), table1869, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in an empty recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInAnEmptyRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in an empty recordset", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1870 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1870.AddRow(new string[] {
                        "",
                        ""});
#line 30
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1870, "Given ");
#line 33
 testRunner.And("field to search is \"[[rs().value]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"16\" and \"" +
                    "33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
 testRunner.Then("the find records index multiple result should be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1871 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1871.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(*).value]] =",
                        "1",
                        "Is Between",
                        "",
                        "16",
                        "33",
                        "NO",
                        "NO"});
#line 38
 testRunner.And("the debug inputs as", ((string)(null)), table1871, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1872 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1872.AddRow(new string[] {
                        "[[result]] = -1"});
#line 41
 testRunner.And("the debug output as", ((string)(null)), table1872, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with a blank from")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithABlankFrom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with a blank from", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1873 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1873.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1873.AddRow(new string[] {
                        "rs().field",
                        "15"});
            table1873.AddRow(new string[] {
                        "rs().field",
                        "20"});
            table1873.AddRow(new string[] {
                        "rs().field",
                        "34"});
#line 46
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1873, "Given ");
#line 52
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"\" and \"33" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then("the find records index multiple result should be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 56
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1874 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1874.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1874.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 15",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1874.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 20",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1874.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 34",
                        "1",
                        "Is Between",
                        "",
                        "\" \"",
                        "33",
                        "NO",
                        "NO"});
#line 57
 testRunner.And("the debug inputs as", ((string)(null)), table1874, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1875 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1875.AddRow(new string[] {
                        "[[result]] = -1"});
#line 63
 testRunner.And("the debug output as", ((string)(null)), table1875, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with blank to")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithBlankTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with blank to", ((string[])(null)));
#line 67
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1876 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1876.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1876.AddRow(new string[] {
                        "rs().field",
                        "15"});
            table1876.AddRow(new string[] {
                        "rs().field",
                        "20"});
            table1876.AddRow(new string[] {
                        "rs().field",
                        "34"});
#line 68
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1876, "Given ");
#line 74
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"16\" and \"" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
 testRunner.Then("the find records index multiple result should be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 78
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1877 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1877.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1877.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 15",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1877.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 20",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1877.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 34",
                        "1",
                        "Is Between",
                        "",
                        "16",
                        "\" \"",
                        "NO",
                        "NO"});
#line 79
 testRunner.And("the debug inputs as", ((string)(null)), table1877, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1878 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1878.AddRow(new string[] {
                        "[[result]] = -1"});
#line 85
 testRunner.And("the debug output as", ((string)(null)), table1878, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Between DateTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsBetweenDateTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Between DateTime", ((string[])(null)));
#line 89
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1879 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1879.AddRow(new string[] {
                        "rs().field",
                        "5/3/2013"});
            table1879.AddRow(new string[] {
                        "rs().field",
                        "2/3/2013"});
            table1879.AddRow(new string[] {
                        "rs().field",
                        "7/4/2013"});
            table1879.AddRow(new string[] {
                        "rs().field",
                        "11/11/2012"});
#line 90
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1879, "Given ");
#line 96
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"1/3/2013\"" +
                    " and \"3/3/2013\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.Then("the find records index multiple result should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 100
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1880 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1880.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 5/3/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1880.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 2/3/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1880.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 7/4/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1880.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 11/11/2012",
                        "1",
                        "Is Between",
                        "",
                        "1/3/2013",
                        "3/3/2013",
                        "NO",
                        "NO"});
#line 101
 testRunner.And("the debug inputs as", ((string)(null)), table1880, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1881 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1881.AddRow(new string[] {
                        "[[result]] = 2"});
#line 107
 testRunner.And("the debug output as", ((string)(null)), table1881, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Base64")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Base64", ((string[])(null)));
#line 111
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1882 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1882.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1882.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1882.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1882.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
#line 112
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1882, "Given ");
#line 118
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
 testRunner.And("search the recordset with type \"Is Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 121
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 122
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1883 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1883.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1883.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1883.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1883.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = d2FyZXdvbGY=",
                        "1",
                        "Is Base64",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 123
 testRunner.And("the debug inputs as", ((string)(null)), table1883, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1884 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1884.AddRow(new string[] {
                        "[[result]] = 4"});
#line 129
 testRunner.And("the debug output as", ((string)(null)), table1884, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Binary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Binary", ((string[])(null)));
#line 133
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1885 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1885.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1885.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1885.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1885.AddRow(new string[] {
                        "rs().field",
                        "101011110010"});
#line 134
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1885, "Given ");
#line 140
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.And("search the recordset with type \"Is Binary\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 144
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1886 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1886.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1886.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1886.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1886.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 101011110010",
                        "1",
                        "Is Binary",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 145
 testRunner.And("the debug inputs as", ((string)(null)), table1886, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1887 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1887.AddRow(new string[] {
                        "[[result]] = 4"});
#line 151
 testRunner.And("the debug output as", ((string)(null)), table1887, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Hex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsHex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Hex", ((string[])(null)));
#line 155
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1888 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1888.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1888.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1888.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1888.AddRow(new string[] {
                        "rs().field",
                        "77617265776f6c66"});
#line 156
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1888, "Given ");
#line 162
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.And("search the recordset with type \"Is Hex\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 165
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 166
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1889 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1889.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1889.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1889.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1889.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 77617265776f6c66",
                        "1",
                        "Is Hex",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 167
 testRunner.And("the debug inputs as", ((string)(null)), table1889, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1890 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1890.AddRow(new string[] {
                        "[[result]] = 4"});
#line 173
 testRunner.And("the debug output as", ((string)(null)), table1890, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Base64")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Base64", ((string[])(null)));
#line 177
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1891 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1891.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table1891.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table1891.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table1891.AddRow(new string[] {
                        "rs().field",
                        "You"});
#line 178
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1891, "Given ");
#line 184
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
 testRunner.And("search the recordset with type \"Not Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 187
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 188
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1892 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1892.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1892.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1892.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1892.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = You",
                        "1",
                        "Not Base64",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 189
 testRunner.And("the debug inputs as", ((string)(null)), table1892, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1893 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1893.AddRow(new string[] {
                        "[[result]] = 4"});
#line 195
 testRunner.And("the debug output as", ((string)(null)), table1893, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Between DateTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotBetweenDateTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Between DateTime", ((string[])(null)));
#line 199
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1894 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1894.AddRow(new string[] {
                        "rs().field",
                        "2/3/2013"});
            table1894.AddRow(new string[] {
                        "rs().field",
                        "7/3/2013"});
            table1894.AddRow(new string[] {
                        "rs().field",
                        "2/3/2013"});
            table1894.AddRow(new string[] {
                        "rs().field",
                        "2/3/2013"});
#line 200
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1894, "Given ");
#line 206
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
 testRunner.And("is between search the recordset with type \"Not Between\" and criteria is \"1/3/2013" +
                    "\" and \"3/3/2013\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 209
 testRunner.Then("the find records index multiple result should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 210
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1895 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1895.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 2/3/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1895.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 7/3/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1895.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 2/3/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1895.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 2/3/2013",
                        "1",
                        "Not Between",
                        "",
                        "1/3/2013",
                        "3/3/2013",
                        "NO",
                        "NO"});
#line 211
 testRunner.And("the debug inputs as", ((string)(null)), table1895, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1896 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1896.AddRow(new string[] {
                        "[[result]] = 2"});
#line 217
 testRunner.And("the debug output as", ((string)(null)), table1896, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Between numeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotBetweenNumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Between numeric", ((string[])(null)));
#line 221
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1897 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1897.AddRow(new string[] {
                        "rs().field",
                        "17"});
            table1897.AddRow(new string[] {
                        "rs().field",
                        "22"});
            table1897.AddRow(new string[] {
                        "rs().field",
                        "400"});
            table1897.AddRow(new string[] {
                        "rs().field",
                        "31"});
#line 222
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1897, "Given ");
#line 228
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 229
 testRunner.And("is between search the recordset with type \"Not Between\" and criteria is \"16\" and " +
                    "\"33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 230
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 231
 testRunner.Then("the find records index multiple result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 232
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1898 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1898.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 17",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1898.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 22",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1898.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 400",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1898.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 31",
                        "1",
                        "Not Between",
                        "",
                        "16",
                        "33",
                        "NO",
                        "NO"});
#line 233
 testRunner.And("the debug inputs as", ((string)(null)), table1898, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1899 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1899.AddRow(new string[] {
                        "[[result]] = 3"});
#line 239
 testRunner.And("the debug output as", ((string)(null)), table1899, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Binary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Binary", ((string[])(null)));
#line 243
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1900 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1900.AddRow(new string[] {
                        "rs().field",
                        "101011110010"});
            table1900.AddRow(new string[] {
                        "rs().field",
                        "101011110010"});
            table1900.AddRow(new string[] {
                        "rs().field",
                        "101011110010"});
            table1900.AddRow(new string[] {
                        "rs().field",
                        "warewolf"});
#line 244
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1900, "Given ");
#line 250
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
 testRunner.And("search the recordset with type \"Not Binary\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 252
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 253
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 254
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1901 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1901.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 101011110010",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1901.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 101011110010",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1901.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 101011110010",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1901.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = warewolf",
                        "1",
                        "Not Binary",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 255
 testRunner.And("the debug inputs as", ((string)(null)), table1901, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1902 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1902.AddRow(new string[] {
                        "[[result]] = 4"});
#line 261
 testRunner.And("the debug output as", ((string)(null)), table1902, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Hex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotHex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Hex", ((string[])(null)));
#line 265
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1903 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1903.AddRow(new string[] {
                        "rs().field",
                        "77617265776f6c66"});
            table1903.AddRow(new string[] {
                        "rs().field",
                        "77617265776f6c66"});
            table1903.AddRow(new string[] {
                        "rs().field",
                        "77617265776f6c66"});
            table1903.AddRow(new string[] {
                        "rs().field",
                        "warewolf"});
#line 266
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1903, "Given ");
#line 272
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 273
 testRunner.And("search the recordset with type \"Not Hex\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 274
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 275
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 276
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1904 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1904.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 77617265776f6c66",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1904.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 77617265776f6c66",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1904.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 77617265776f6c66",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1904.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = warewolf",
                        "1",
                        "Not Hex",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 277
 testRunner.And("the debug inputs as", ((string)(null)), table1904, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1905 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1905.AddRow(new string[] {
                        "[[result]] = 4"});
#line 283
 testRunner.And("the debug output as", ((string)(null)), table1905, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Regex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotRegex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Regex", ((string[])(null)));
#line 287
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1906 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1906.AddRow(new string[] {
                        "rs().field",
                        "999.999.999.999"});
            table1906.AddRow(new string[] {
                        "rs().field",
                        "999.999.999.999"});
            table1906.AddRow(new string[] {
                        "rs().field",
                        "999.999.999.999"});
            table1906.AddRow(new string[] {
                        "rs().field",
                        "warewolf"});
#line 288
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1906, "Given ");
#line 294
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 295
 testRunner.And("search the recordset with type \"Not Regex\" and criteria is \"\\b\\d{1,3}\\.\\d{1,3}\\.\\" +
                    "d{1,3}\\.\\d{1,3}\\b\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 296
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 297
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 298
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1907 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1907.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 999.999.999.999",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1907.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 999.999.999.999",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1907.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 999.999.999.999",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1907.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = warewolf",
                        "1",
                        "Not Regex",
                        "\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 299
 testRunner.And("the debug inputs as", ((string)(null)), table1907, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1908 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1908.AddRow(new string[] {
                        "[[result]] = 4"});
#line 305
 testRunner.And("the debug output as", ((string)(null)), table1908, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Doesn\"t Start With")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithDoesntStartWith()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Doesn\"t Start With", ((string[])(null)));
#line 309
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1909 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1909.AddRow(new string[] {
                        "rs().field",
                        "what"});
            table1909.AddRow(new string[] {
                        "rs().field",
                        "why"});
            table1909.AddRow(new string[] {
                        "rs().field",
                        "yay"});
#line 310
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1909, "Given ");
#line 315
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 316
 testRunner.And("search the recordset with type \"Doesn\'t Start With\" and criteria is \"w\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 317
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 318
 testRunner.Then("the find records index multiple result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 319
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1910 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1910.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = what",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1910.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = why",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1910.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = yay",
                        "1",
                        "Doesn\'t Start With",
                        "w",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 320
 testRunner.And("the debug inputs as", ((string)(null)), table1910, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1911 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1911.AddRow(new string[] {
                        "[[result]] = 3"});
#line 325
 testRunner.And("the debug output as", ((string)(null)), table1911, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Doesn\"t End With")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetWithDoesntEndWith()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Doesn\"t End With", ((string[])(null)));
#line 329
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1912 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1912.AddRow(new string[] {
                        "rs().field",
                        "arev"});
            table1912.AddRow(new string[] {
                        "rs().field",
                        "v"});
            table1912.AddRow(new string[] {
                        "rs().field",
                        "modev"});
            table1912.AddRow(new string[] {
                        "rs().field",
                        "yay"});
#line 330
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1912, "Given ");
#line 336
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 337
 testRunner.And("search the recordset with type \"Doesn\'t End With\" and criteria is \"v\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 338
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 339
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 340
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1913 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1913.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = arev",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1913.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = v",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1913.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = modev",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1913.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = yay",
                        "1",
                        "Doesn\'t End With",
                        "v",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 341
 testRunner.And("the debug inputs as", ((string)(null)), table1913, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1914 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1914.AddRow(new string[] {
                        "[[result]] = 4"});
#line 347
 testRunner.And("the debug output as", ((string)(null)), table1914, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Equal To")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEqualTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Equal To", ((string[])(null)));
#line 351
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1915 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1915.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1915.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1915.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1915.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1915.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1915.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 352
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1915, "Given ");
#line 360
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 361
 testRunner.And("search the recordset with type \"=\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 362
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 363
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 364
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1916 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1916.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1916.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1916.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1916.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1916.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1916.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "=",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 365
 testRunner.And("the debug inputs as", ((string)(null)), table1916, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1917 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1917.AddRow(new string[] {
                        "[[result]] = 5"});
#line 373
 testRunner.And("the debug output as", ((string)(null)), table1917, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Equal To multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEqualToMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Equal To multiple results", ((string[])(null)));
#line 377
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1918 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1918.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1918.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1918.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1918.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1918.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1918.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1918.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 378
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1918, "Given ");
#line 387
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 388
 testRunner.And("search the recordset with type \"=\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 389
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 390
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 391
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1919 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1919.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1919.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1919.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1919.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1919.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1919.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1919.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "=",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 392
 testRunner.And("the debug inputs as", ((string)(null)), table1919, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1920 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1920.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 401
 testRunner.And("the debug output as", ((string)(null)), table1920, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Equal To result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEqualToResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Equal To result doesnt exist", ((string[])(null)));
#line 405
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1921 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1921.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1921.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1921.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1921.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1921.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1921.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 406
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1921, "Given ");
#line 414
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 415
 testRunner.And("search the recordset with type \"=\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 416
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 417
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 418
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1922 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1922.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1922.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1922.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1922.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1922.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1922.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "=",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 419
 testRunner.And("the debug inputs as", ((string)(null)), table1922, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1923 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1923.AddRow(new string[] {
                        "[[result]] = -1"});
#line 427
 testRunner.And("the debug output as", ((string)(null)), table1923, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Than")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterThan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Than", ((string[])(null)));
#line 431
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1924 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1924.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table1924.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1924.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1924.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1924.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1924.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 432
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1924, "Given ");
#line 440
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 441
 testRunner.And("search the recordset with type \">\" and criteria is \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 442
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 443
 testRunner.Then("the find records index multiple result should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 444
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1925 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1925.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1925.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1925.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1925.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1925.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1925.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        ">",
                        "3",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 445
 testRunner.And("the debug inputs as", ((string)(null)), table1925, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1926 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1926.AddRow(new string[] {
                        "[[result]] = 1"});
#line 453
 testRunner.And("the debug output as", ((string)(null)), table1926, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Than multiple results" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterThanMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Than multiple results" +
                    "", ((string[])(null)));
#line 457
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1927 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1927.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table1927.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1927.AddRow(new string[] {
                        "rs().field",
                        "123"});
            table1927.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1927.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1927.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1927.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 458
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1927, "Given ");
#line 467
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 468
 testRunner.And("search the recordset with type \">\" and criteria is \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 469
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 470
 testRunner.Then("the find records index multiple result should be 1,3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 471
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1928 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1928.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1928.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1928.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 123",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1928.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1928.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1928.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1928.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        ">",
                        "3",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 472
 testRunner.And("the debug inputs as", ((string)(null)), table1928, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1929 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1929.AddRow(new string[] {
                        "[[result]] = 1,3"});
#line 481
 testRunner.And("the debug output as", ((string)(null)), table1929, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Than result doesnt ex" +
            "ist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterThanResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Than result doesnt ex" +
                    "ist", ((string[])(null)));
#line 485
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1930 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1930.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table1930.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1930.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1930.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1930.AddRow(new string[] {
                        "rs().field",
                        "8"});
            table1930.AddRow(new string[] {
                        "rs().field",
                        "2"});
#line 486
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1930, "Given ");
#line 494
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 495
 testRunner.And("search the recordset with type \">\" and criteria is \"50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 496
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 497
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 498
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1931 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1931.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1931.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1931.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1931.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1931.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 8",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1931.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 2",
                        "1",
                        ">",
                        "50",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 499
 testRunner.And("the debug inputs as", ((string)(null)), table1931, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1932 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1932.AddRow(new string[] {
                        "[[result]] = -1"});
#line 507
 testRunner.And("the debug output as", ((string)(null)), table1932, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Than")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessThan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Than", ((string[])(null)));
#line 511
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1933 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1933.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table1933.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1933.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1933.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1933.AddRow(new string[] {
                        "rs().field",
                        "8"});
            table1933.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 512
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1933, "Given ");
#line 520
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 521
 testRunner.And("search the recordset with type \"<\" and criteria is \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 522
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 523
 testRunner.Then("the find records index multiple result should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 524
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1934 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1934.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1934.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1934.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1934.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1934.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 8",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1934.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "<",
                        "5",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 525
 testRunner.And("the debug inputs as", ((string)(null)), table1934, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1935 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1935.AddRow(new string[] {
                        "[[result]] = 1"});
#line 533
 testRunner.And("the debug output as", ((string)(null)), table1935, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Than multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessThanMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Than multiple results", ((string[])(null)));
#line 537
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1936 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1936.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table1936.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1936.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1936.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1936.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1936.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1936.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 538
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1936, "Given ");
#line 547
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 548
 testRunner.And("search the recordset with type \"<\" and criteria is \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 549
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 550
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 551
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1937 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1937.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1937.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1937.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1937.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1937.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1937.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1937.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "<",
                        "5",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 552
 testRunner.And("the debug inputs as", ((string)(null)), table1937, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1938 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1938.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 561
 testRunner.And("the debug output as", ((string)(null)), table1938, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Than result doesnt exist" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessThanResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Than result doesnt exist" +
                    "", ((string[])(null)));
#line 565
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1939 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1939.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1939.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1939.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1939.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1939.AddRow(new string[] {
                        "rs().field",
                        "5"});
            table1939.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 566
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1939, "Given ");
#line 574
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 575
 testRunner.And("search the recordset with type \"<\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 576
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 577
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 578
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1940 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1940.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1940.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1940.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1940.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1940.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 5",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1940.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "<",
                        "1",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 579
 testRunner.And("the debug inputs as", ((string)(null)), table1940, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1941 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1941.AddRow(new string[] {
                        "[[result]] = -1"});
#line 587
 testRunner.And("the debug output as", ((string)(null)), table1941, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Equal To")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEqualTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Equal To", ((string[])(null)));
#line 591
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1942 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1942.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1942.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1942.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1942.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1942.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1942.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
#line 592
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1942, "Given ");
#line 600
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 601
 testRunner.And("search the recordset with type \"<> (Not Equal)\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 602
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 603
 testRunner.Then("the find records index multiple result should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 604
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1943 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1943.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1943.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1943.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1943.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1943.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1943.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "1",
                        "<> (Not Equal)",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 605
 testRunner.And("the debug inputs as", ((string)(null)), table1943, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1944 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1944.AddRow(new string[] {
                        "[[result]] =  1"});
#line 613
 testRunner.And("the debug output as", ((string)(null)), table1944, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Equal To multiple results" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEqualToMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Equal To multiple results" +
                    "", ((string[])(null)));
#line 617
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1945 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1945.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1945.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1945.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1945.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1945.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1945.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 618
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1945, "Given ");
#line 626
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 627
 testRunner.And("search the recordset with type \"<> (Not Equal)\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 628
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 629
 testRunner.Then("the find records index multiple result should be 1,2,3,4,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 630
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1946 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1946.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1946.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1946.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1946.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1946.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1946.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "<> (Not Equal)",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 631
 testRunner.And("the debug inputs as", ((string)(null)), table1946, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1947 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1947.AddRow(new string[] {
                        "[[result]] = 1,2,3,4,6"});
#line 639
 testRunner.And("the debug output as", ((string)(null)), table1947, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Equal To result doesnt ex" +
            "ist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEqualToResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Equal To result doesnt ex" +
                    "ist", ((string[])(null)));
#line 643
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1948 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1948.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table1948.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table1948.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table1948.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table1948.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table1948.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
#line 644
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1948, "Given ");
#line 652
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 653
 testRunner.And("search the recordset with type \"<> (Not Equal)\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 654
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 655
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 656
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1949 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1949.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1949.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1949.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1949.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1949.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1949.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Mars",
                        "1",
                        "<> (Not Equal)",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 657
 testRunner.And("the debug inputs as", ((string)(null)), table1949, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1950 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1950.AddRow(new string[] {
                        "[[result]] = -1"});
#line 665
 testRunner.And("the debug output as", ((string)(null)), table1950, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Or Equal To")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterOrEqualTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Or Equal To", ((string[])(null)));
#line 669
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1951 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1951.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1951.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1951.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1951.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1951.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table1951.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 670
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1951, "Given ");
#line 678
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 679
 testRunner.And("search the recordset with type \">=\" and criteria is \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 680
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 681
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 682
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1952 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1952.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1952.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1952.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1952.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1952.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1952.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        ">=",
                        "4",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 683
 testRunner.And("the debug inputs as", ((string)(null)), table1952, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1953 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1953.AddRow(new string[] {
                        "[[result]] = 5"});
#line 691
 testRunner.And("the debug output as", ((string)(null)), table1953, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Or Equal To multiple " +
            "results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterOrEqualToMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Or Equal To multiple " +
                    "results", ((string[])(null)));
#line 695
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1954 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1954.AddRow(new string[] {
                        "rs().field",
                        "50"});
            table1954.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1954.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1954.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1954.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1954.AddRow(new string[] {
                        "rs().field",
                        "4"});
#line 696
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1954, "Given ");
#line 704
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 705
 testRunner.And("search the recordset with type \">=\" and criteria is \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 706
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 707
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 708
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1955 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1955.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 50",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1955.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1955.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1955.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1955.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1955.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 4",
                        "1",
                        ">=",
                        "4",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 709
 testRunner.And("the debug inputs as", ((string)(null)), table1955, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1956 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1956.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 717
 testRunner.And("the debug output as", ((string)(null)), table1956, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Or Equal To result do" +
            "esnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterOrEqualToResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Or Equal To result do" +
                    "esnt exist", ((string[])(null)));
#line 721
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1957 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1957.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1957.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1957.AddRow(new string[] {
                        "rs().field",
                        "3"});
            table1957.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1957.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1957.AddRow(new string[] {
                        "rs().field",
                        "3"});
#line 722
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1957, "Given ");
#line 730
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 731
 testRunner.And("search the recordset with type \">=\" and criteria is \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 732
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 733
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 734
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1958 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1958.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1958.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1958.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 3",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1958.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1958.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1958.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 3",
                        "1",
                        ">=",
                        "4",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 735
 testRunner.And("the debug inputs as", ((string)(null)), table1958, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1959 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1959.AddRow(new string[] {
                        "[[result]] = -1"});
#line 743
 testRunner.And("the debug output as", ((string)(null)), table1959, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Or Equal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessOrEqual()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Or Equal", ((string[])(null)));
#line 747
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1960 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1960.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1960.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1960.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1960.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1960.AddRow(new string[] {
                        "rs().field",
                        "aaa"});
            table1960.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 748
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1960, "Given ");
#line 756
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 757
 testRunner.And("search the recordset with type \"<=\" and criteria is \"aaa\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 758
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 759
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 760
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1961 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1961.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1961.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1961.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1961.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1961.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = aaa",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1961.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "<=",
                        "aaa",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 761
 testRunner.And("the debug inputs as", ((string)(null)), table1961, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1962 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1962.AddRow(new string[] {
                        "[[result]] = 5"});
#line 769
 testRunner.And("the debug output as", ((string)(null)), table1962, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Or Equal multiple result" +
            "s")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessOrEqualMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Or Equal multiple result" +
                    "s", ((string[])(null)));
#line 773
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1963 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1963.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1963.AddRow(new string[] {
                        "rs().field",
                        "7"});
            table1963.AddRow(new string[] {
                        "rs().field",
                        "8"});
            table1963.AddRow(new string[] {
                        "rs().field",
                        "9"});
            table1963.AddRow(new string[] {
                        "rs().field",
                        "10"});
            table1963.AddRow(new string[] {
                        "rs().field",
                        "5"});
#line 774
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1963, "Given ");
#line 782
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 783
 testRunner.And("search the recordset with type \"<=\" and criteria is \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 784
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 785
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 786
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1964 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1964.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1964.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 7",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1964.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 8",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1964.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 9",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1964.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 10",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1964.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 5",
                        "1",
                        "<=",
                        "5",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 787
 testRunner.And("the debug inputs as", ((string)(null)), table1964, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1965 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1965.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 795
 testRunner.And("the debug output as", ((string)(null)), table1965, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Or Equal result doesnt e" +
            "xist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessOrEqualResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Or Equal result doesnt e" +
                    "xist", ((string[])(null)));
#line 799
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1966 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1966.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1966.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1966.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1966.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1966.AddRow(new string[] {
                        "rs().field",
                        "5"});
            table1966.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 800
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1966, "Given ");
#line 808
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 809
 testRunner.And("search the recordset with type \"<=\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 810
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 811
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 812
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1967 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1967.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1967.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1967.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1967.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1967.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 5",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1967.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "<=",
                        "1",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 813
 testRunner.And("the debug inputs as", ((string)(null)), table1967, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1968 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1968.AddRow(new string[] {
                        "[[result]] = -1"});
#line 821
 testRunner.And("the debug output as", ((string)(null)), table1968, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Starts With")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsStartsWith()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Starts With", ((string[])(null)));
#line 825
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1969 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1969.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1969.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1969.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1969.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1969.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1969.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 826
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1969, "Given ");
#line 834
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 835
 testRunner.And("search the recordset with type \"Starts With\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 836
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 837
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 838
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1970 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1970.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1970.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1970.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1970.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1970.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1970.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Starts With",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 839
 testRunner.And("the debug inputs as", ((string)(null)), table1970, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1971 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1971.AddRow(new string[] {
                        "[[result]] = 5"});
#line 847
 testRunner.And("the debug output as", ((string)(null)), table1971, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Starts With multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsStartsWithMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Starts With multiple results", ((string[])(null)));
#line 851
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1972 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1972.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1972.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1972.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1972.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1972.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1972.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1972.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 852
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1972, "Given ");
#line 861
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 862
 testRunner.And("search the recordset with type \"Starts With\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 863
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 864
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 865
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1973 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1973.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1973.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1973.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1973.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1973.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1973.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1973.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Starts With",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 866
 testRunner.And("the debug inputs as", ((string)(null)), table1973, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1974 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1974.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 875
 testRunner.And("the debug output as", ((string)(null)), table1974, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Starts With result doesnt exi" +
            "st")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsStartsWithResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Starts With result doesnt exi" +
                    "st", ((string[])(null)));
#line 879
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1975 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1975.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1975.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1975.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1975.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1975.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1975.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 880
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1975, "Given ");
#line 888
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 889
 testRunner.And("search the recordset with type \"Starts With\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 890
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 891
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 892
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1976 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1976.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1976.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1976.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1976.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1976.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1976.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Starts With",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 893
 testRunner.And("the debug inputs as", ((string)(null)), table1976, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1977 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1977.AddRow(new string[] {
                        "[[result]] = -1"});
#line 901
 testRunner.And("the debug output as", ((string)(null)), table1977, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Ends With")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEndsWith()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Ends With", ((string[])(null)));
#line 905
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1978 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1978.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1978.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1978.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1978.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1978.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1978.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 906
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1978, "Given ");
#line 914
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 915
 testRunner.And("search the recordset with type \"Ends With\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 916
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 917
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 918
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1979 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1979.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1979.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1979.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1979.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1979.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1979.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Ends With",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 919
 testRunner.And("the debug inputs as", ((string)(null)), table1979, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1980 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1980.AddRow(new string[] {
                        "[[result]] = 5"});
#line 927
 testRunner.And("the debug output as", ((string)(null)), table1980, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Ends With multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEndsWithMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Ends With multiple results", ((string[])(null)));
#line 931
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1981 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1981.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1981.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1981.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1981.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1981.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1981.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1981.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 932
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1981, "Given ");
#line 941
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 942
 testRunner.And("search the recordset with type \"Ends With\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 943
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 944
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 945
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1982 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1982.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1982.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1982.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1982.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1982.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1982.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1982.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Ends With",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 946
 testRunner.And("the debug inputs as", ((string)(null)), table1982, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1983 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1983.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 955
 testRunner.And("the debug output as", ((string)(null)), table1983, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Ends With result doesnt exist" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEndsWithResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Ends With result doesnt exist" +
                    "", ((string[])(null)));
#line 959
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1984 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1984.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1984.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1984.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1984.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1984.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1984.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 960
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1984, "Given ");
#line 968
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 969
 testRunner.And("search the recordset with type \"Ends With\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 970
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 971
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 972
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1985 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1985.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1985.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1985.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1985.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1985.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1985.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Ends With",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 973
 testRunner.And("the debug inputs as", ((string)(null)), table1985, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1986 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1986.AddRow(new string[] {
                        "[[result]] = -1"});
#line 981
 testRunner.And("the debug output as", ((string)(null)), table1986, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Contains")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsContains()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Contains", ((string[])(null)));
#line 985
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1987 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1987.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1987.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1987.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1987.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1987.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1987.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 986
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1987, "Given ");
#line 994
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 995
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 996
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 997
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 998
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1988 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1988.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1988.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1988.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1988.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1988.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1988.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Contains",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 999
 testRunner.And("the debug inputs as", ((string)(null)), table1988, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1989 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1989.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1007
 testRunner.And("the debug output as", ((string)(null)), table1989, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Contains multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsContainsMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Contains multiple results", ((string[])(null)));
#line 1011
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1990 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1990.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1990.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1990.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1990.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1990.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1990.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1990.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1012
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1990, "Given ");
#line 1021
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1022
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1023
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1024
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1025
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1991 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1991.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1991.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1991.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1991.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1991.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1991.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1991.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Contains",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1026
 testRunner.And("the debug inputs as", ((string)(null)), table1991, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1992 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1992.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1035
 testRunner.And("the debug output as", ((string)(null)), table1992, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Contains result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsContainsResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Contains result doesnt exist", ((string[])(null)));
#line 1039
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1993 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1993.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1993.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1993.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1993.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1993.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1993.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1040
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1993, "Given ");
#line 1048
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1049
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1050
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1051
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1052
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1994 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1994.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1994.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1994.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1994.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1994.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1994.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Contains",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1053
 testRunner.And("the debug inputs as", ((string)(null)), table1994, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1995 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1995.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1061
 testRunner.And("the debug output as", ((string)(null)), table1995, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Doesn\"t Contain")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsDoesntContain()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Doesn\"t Contain", ((string[])(null)));
#line 1065
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1996 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1996.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1996.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1996.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1996.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1996.AddRow(new string[] {
                        "rs().field",
                        "user"});
            table1996.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
#line 1066
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1996, "Given ");
#line 1074
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1075
 testRunner.And("search the recordset with type \"Doesn\'t Contain\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1076
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1077
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1078
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1997 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1997.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1997.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1997.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1997.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1997.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = user",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1997.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "1",
                        "Doesn\'t Contain",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1079
 testRunner.And("the debug inputs as", ((string)(null)), table1997, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1998 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1998.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1087
 testRunner.And("the debug output as", ((string)(null)), table1998, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Doesn\"t Contain multiple resu" +
            "lts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsDoesntContainMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Doesn\"t Contain multiple resu" +
                    "lts", ((string[])(null)));
#line 1091
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1999 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1999.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1999.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1999.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1999.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1999.AddRow(new string[] {
                        "rs().field",
                        "user"});
            table1999.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
#line 1092
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1999, "Given ");
#line 1100
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1101
 testRunner.And("search the recordset with type \"Doesn\'t Contain\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1102
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1103
 testRunner.Then("the find records index multiple result should be 1,5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1104
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2000 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2000.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2000.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2000.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2000.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2000.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = user",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2000.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "1",
                        "Doesn\'t Contain",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1105
 testRunner.And("the debug inputs as", ((string)(null)), table2000, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2001 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2001.AddRow(new string[] {
                        "[[result]] = 1,5"});
#line 1113
 testRunner.And("the debug output as", ((string)(null)), table2001, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Doesn\"t Contain result doesnt" +
            " exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsDoesntContainResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Doesn\"t Contain result doesnt" +
                    " exist", ((string[])(null)));
#line 1117
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2002 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2002.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table2002.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table2002.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table2002.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table2002.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table2002.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
#line 1118
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2002, "Given ");
#line 1126
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1127
 testRunner.And("search the recordset with type \"Doesn\'t Contain\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1128
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1129
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1130
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2003 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2003.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2003.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2003.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2003.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2003.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2003.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Mars",
                        "1",
                        "Doesn\'t Contain",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1131
 testRunner.And("the debug inputs as", ((string)(null)), table2003, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2004 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2004.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1139
 testRunner.And("the debug output as", ((string)(null)), table2004, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Alphanumeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsAlphanumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Alphanumeric", ((string[])(null)));
#line 1143
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2005 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2005.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table2005.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table2005.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table2005.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table2005.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2005.AddRow(new string[] {
                        "rs().field",
                        "$$"});
#line 1144
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2005, "Given ");
#line 1152
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1153
 testRunner.And("search the recordset with type \"Is Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1154
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1155
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1156
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2006 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2006.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2006.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2006.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2006.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2006.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2006.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = $$",
                        "1",
                        "Is Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1157
 testRunner.And("the debug inputs as", ((string)(null)), table2006, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2007 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2007.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1165
 testRunner.And("the debug output as", ((string)(null)), table2007, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Alphanumeric multiple resu" +
            "lts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsAlphanumericMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Alphanumeric multiple resu" +
                    "lts", ((string[])(null)));
#line 1169
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2008 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2008.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2008.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table2008.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table2008.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table2008.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table2008.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2008.AddRow(new string[] {
                        "rs().field",
                        "$$"});
#line 1170
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2008, "Given ");
#line 1179
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1180
 testRunner.And("search the recordset with type \"Is Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1181
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1182
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1183
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2009 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2009.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2009.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2009.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2009.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2009.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2009.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2009.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = $$",
                        "1",
                        "Is Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1184
 testRunner.And("the debug inputs as", ((string)(null)), table2009, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2010 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2010.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1193
 testRunner.And("the debug output as", ((string)(null)), table2010, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Alphanumeric result doesnt" +
            " exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsAlphanumericResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Alphanumeric result doesnt" +
                    " exist", ((string[])(null)));
#line 1197
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2011 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2011.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table2011.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table2011.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table2011.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table2011.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table2011.AddRow(new string[] {
                        "rs().field",
                        "$$"});
#line 1198
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2011, "Given ");
#line 1206
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1207
 testRunner.And("search the recordset with type \"Is Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1208
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1209
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1210
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2012 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2012.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2012.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2012.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2012.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2012.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2012.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = $$",
                        "1",
                        "Is Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1211
 testRunner.And("the debug inputs as", ((string)(null)), table2012, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2013 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2013.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1219
 testRunner.And("the debug output as", ((string)(null)), table2013, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Base64")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Base64", ((string[])(null)));
#line 1223
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2014 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2014.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2014.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2014.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2014.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2014.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table2014.AddRow(new string[] {
                        "rs().field",
                        "You"});
#line 1224
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2014, "Given ");
#line 1232
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1233
 testRunner.And("search the recordset with type \"Is Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1234
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1235
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1236
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2015 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2015.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2015.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2015.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2015.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2015.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2015.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = You",
                        "1",
                        "Is Base64",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1237
 testRunner.And("the debug inputs as", ((string)(null)), table2015, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2016 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2016.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1245
 testRunner.And("the debug output as", ((string)(null)), table2016, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Base64 multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsBase64MultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Base64 multiple results", ((string[])(null)));
#line 1249
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2017 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2017.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table2017.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2017.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2017.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2017.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2017.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table2017.AddRow(new string[] {
                        "rs().field",
                        "You"});
#line 1250
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2017, "Given ");
#line 1259
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1260
 testRunner.And("search the recordset with type \"Is Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1261
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1262
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1263
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2018 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2018.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2018.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2018.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2018.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2018.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2018.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2018.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = You",
                        "1",
                        "Is Base64",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1264
 testRunner.And("the debug inputs as", ((string)(null)), table2018, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2019 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2019.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1273
 testRunner.And("the debug output as", ((string)(null)), table2019, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Base64 result doesnt exist" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsBase64ResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Base64 result doesnt exist" +
                    "", ((string[])(null)));
#line 1277
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2020 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2020.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2020.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2020.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2020.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2020.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2020.AddRow(new string[] {
                        "rs().field",
                        "You"});
#line 1278
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2020, "Given ");
#line 1286
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1287
 testRunner.And("search the recordset with type \"Is Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1288
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1289
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1290
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2021 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2021.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2021.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2021.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2021.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2021.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2021.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = You",
                        "1",
                        "Is Base64",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1291
 testRunner.And("the debug inputs as", ((string)(null)), table2021, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2022 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2022.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1299
 testRunner.And("the debug output as", ((string)(null)), table2022, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Date", ((string[])(null)));
#line 1303
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2023 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2023.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2023.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2023.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2023.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2023.AddRow(new string[] {
                        "rs().field",
                        "12/10/2013"});
            table2023.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1304
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2023, "Given ");
#line 1312
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1313
 testRunner.And("search the recordset with type \"Is Date\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1314
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1315
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1316
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2024 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2024.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2024.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2024.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2024.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2024.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 12/10/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2024.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Date",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1317
 testRunner.And("the debug inputs as", ((string)(null)), table2024, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2025 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2025.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1325
 testRunner.And("the debug output as", ((string)(null)), table2025, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Date multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsDateMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Date multiple results", ((string[])(null)));
#line 1329
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2026 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2026.AddRow(new string[] {
                        "rs().field",
                        "12/10/2013"});
            table2026.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2026.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2026.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2026.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2026.AddRow(new string[] {
                        "rs().field",
                        "12/10/2013"});
            table2026.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1330
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2026, "Given ");
#line 1339
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1340
 testRunner.And("search the recordset with type \"Is Date\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1341
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1342
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1343
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2027 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2027.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 12/10/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2027.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2027.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2027.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2027.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2027.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 12/10/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2027.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Is Date",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1344
 testRunner.And("the debug inputs as", ((string)(null)), table2027, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2028 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2028.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1353
 testRunner.And("the debug output as", ((string)(null)), table2028, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Date result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsDateResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Date result doesnt exist", ((string[])(null)));
#line 1357
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2029 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2029.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2029.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2029.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2029.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2029.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2029.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1358
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2029, "Given ");
#line 1366
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1367
 testRunner.And("search the recordset with type \"Is Date\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1368
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1369
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1370
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2030 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2030.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2030.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2030.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2030.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2030.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2030.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Date",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1371
 testRunner.And("the debug inputs as", ((string)(null)), table2030, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2031 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2031.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1379
 testRunner.And("the debug output as", ((string)(null)), table2031, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Email")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsEmail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Email", ((string[])(null)));
#line 1383
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2032 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2032.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2032.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2032.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2032.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2032.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table2032.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1384
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2032, "Given ");
#line 1392
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1393
 testRunner.And("search the recordset with type \"Is Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1394
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1395
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1396
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2033 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2033.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2033.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2033.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2033.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2033.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2033.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Email",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1397
 testRunner.And("the debug inputs as", ((string)(null)), table2033, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2034 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2034.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1405
 testRunner.And("the debug output as", ((string)(null)), table2034, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Email multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsEmailMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Email multiple results", ((string[])(null)));
#line 1409
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2035 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2035.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table2035.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2035.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2035.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2035.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2035.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table2035.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1410
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2035, "Given ");
#line 1419
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1420
 testRunner.And("search the recordset with type \"Is Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1421
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1422
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1423
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2036 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2036.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2036.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2036.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2036.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2036.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2036.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2036.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Is Email",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1424
 testRunner.And("the debug inputs as", ((string)(null)), table2036, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2037 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2037.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1433
 testRunner.And("the debug output as", ((string)(null)), table2037, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Email result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsEmailResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Email result doesnt exist", ((string[])(null)));
#line 1437
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2038 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2038.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2038.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2038.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2038.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2038.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2038.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1438
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2038, "Given ");
#line 1446
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1447
 testRunner.And("search the recordset with type \"Is Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1448
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1449
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1450
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2039 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2039.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2039.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2039.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2039.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2039.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2039.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Email",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1451
 testRunner.And("the debug inputs as", ((string)(null)), table2039, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2040 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2040.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1459
 testRunner.And("the debug output as", ((string)(null)), table2040, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Numeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsNumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Numeric", ((string[])(null)));
#line 1463
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2041 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2041.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2041.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2041.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2041.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2041.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table2041.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1464
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2041, "Given ");
#line 1472
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1473
 testRunner.And("search the recordset with type \"Is Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1474
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1475
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1476
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2042 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2042.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2042.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2042.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2042.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2042.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2042.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1477
 testRunner.And("the debug inputs as", ((string)(null)), table2042, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2043 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2043.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1485
 testRunner.And("the debug output as", ((string)(null)), table2043, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Numeric multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsNumericMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Numeric multiple results", ((string[])(null)));
#line 1489
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2044 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2044.AddRow(new string[] {
                        "rs().field",
                        "41"});
            table2044.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2044.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2044.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2044.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2044.AddRow(new string[] {
                        "rs().field",
                        "54"});
            table2044.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1490
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2044, "Given ");
#line 1499
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1500
 testRunner.And("search the recordset with type \"Is Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1501
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1502
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1503
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2045 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2045.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 41",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2045.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2045.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2045.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2045.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2045.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 54",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2045.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Is Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1504
 testRunner.And("the debug inputs as", ((string)(null)), table2045, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2046 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2046.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1513
 testRunner.And("the debug output as", ((string)(null)), table2046, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Numeric result doesnt exis" +
            "t")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsNumericResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Numeric result doesnt exis" +
                    "t", ((string[])(null)));
#line 1517
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2047 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2047.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2047.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2047.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2047.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2047.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2047.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1518
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2047, "Given ");
#line 1526
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1527
 testRunner.And("search the recordset with type \"Is Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1528
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1529
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1530
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2048 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2048.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2048.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2048.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2048.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2048.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2048.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "",
                        "Is Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1531
 testRunner.And("the debug inputs as", ((string)(null)), table2048, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2049 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2049.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1539
 testRunner.And("the debug output as", ((string)(null)), table2049, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Regex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsRegex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Regex", ((string[])(null)));
#line 1543
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2050 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2050.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2050.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2050.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2050.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2050.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2050.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1544
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2050, "Given ");
#line 1552
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1553
 testRunner.And("search the recordset with type \"Is Regex\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1554
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1555
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1556
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2051 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2051.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2051.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2051.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2051.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2051.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2051.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Regex",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1557
 testRunner.And("the debug inputs as", ((string)(null)), table2051, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2052 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2052.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1565
 testRunner.And("the debug output as", ((string)(null)), table2052, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Regex multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsRegexMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Regex multiple results", ((string[])(null)));
#line 1569
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2053 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2053.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2053.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2053.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2053.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2053.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2053.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2053.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1570
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2053, "Given ");
#line 1579
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1580
 testRunner.And("search the recordset with type \"Is Regex\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1581
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1582
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1583
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2054 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2054.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2054.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2054.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2054.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2054.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2054.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2054.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Is Regex",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1584
 testRunner.And("the debug inputs as", ((string)(null)), table2054, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2055 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2055.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1593
 testRunner.And("the debug output as", ((string)(null)), table2055, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Regex result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsRegexResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Regex result doesnt exist", ((string[])(null)));
#line 1597
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2056 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2056.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2056.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2056.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2056.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2056.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2056.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1598
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2056, "Given ");
#line 1606
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1607
 testRunner.And("search the recordset with type \"Is Regex\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1608
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1609
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1610
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2057 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2057.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2057.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2057.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2057.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2057.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2057.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Regex",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1611
 testRunner.And("the debug inputs as", ((string)(null)), table2057, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2058 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2058.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1619
 testRunner.And("the debug output as", ((string)(null)), table2058, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Text")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Text", ((string[])(null)));
#line 1623
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2059 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2059.AddRow(new string[] {
                        "rs().field",
                        "15"});
            table2059.AddRow(new string[] {
                        "rs().field",
                        "56"});
            table2059.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table2059.AddRow(new string[] {
                        "rs().field",
                        "7"});
            table2059.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2059.AddRow(new string[] {
                        "rs().field",
                        "16"});
#line 1624
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2059, "Given ");
#line 1632
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1633
 testRunner.And("search the recordset with type \"Is Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1634
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1635
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1636
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2060 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2060.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 15",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2060.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 56",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2060.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2060.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 7",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2060.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2060.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 16",
                        "1",
                        "Is Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1637
 testRunner.And("the debug inputs as", ((string)(null)), table2060, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2061 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2061.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1645
 testRunner.And("the debug output as", ((string)(null)), table2061, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Text multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsTextMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Text multiple results", ((string[])(null)));
#line 1649
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2062 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2062.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2062.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table2062.AddRow(new string[] {
                        "rs().field",
                        "54"});
            table2062.AddRow(new string[] {
                        "rs().field",
                        "51"});
            table2062.AddRow(new string[] {
                        "rs().field",
                        "86"});
            table2062.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2062.AddRow(new string[] {
                        "rs().field",
                        "8"});
#line 1650
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2062, "Given ");
#line 1659
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1660
 testRunner.And("search the recordset with type \"Is Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1661
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1662
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1663
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2063 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2063.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2063.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2063.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 54",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2063.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 51",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2063.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 86",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2063.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2063.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = 8",
                        "1",
                        "Is Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1664
 testRunner.And("the debug inputs as", ((string)(null)), table2063, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2064 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2064.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1673
 testRunner.And("the debug output as", ((string)(null)), table2064, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Text result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsTextResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Text result doesnt exist", ((string[])(null)));
#line 1677
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2065 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2065.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table2065.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table2065.AddRow(new string[] {
                        "rs().field",
                        "3"});
            table2065.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table2065.AddRow(new string[] {
                        "rs().field",
                        "6"});
            table2065.AddRow(new string[] {
                        "rs().field",
                        "5"});
#line 1678
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2065, "Given ");
#line 1686
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1687
 testRunner.And("search the recordset with type \"Is Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1688
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1689
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1690
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2066 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2066.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2066.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2066.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 3",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2066.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2066.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 6",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2066.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 5",
                        "1",
                        "Is Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1691
 testRunner.And("the debug inputs as", ((string)(null)), table2066, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2067 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2067.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1699
 testRunner.And("the debug output as", ((string)(null)), table2067, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is XML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsXML()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is XML", ((string[])(null)));
#line 1703
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2068 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2068.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2068.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2068.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2068.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2068.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table2068.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1704
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2068, "Given ");
#line 1712
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1713
 testRunner.And("search the recordset with type \"Is XML\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1714
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1715
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1716
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2069 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2069.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2069.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2069.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2069.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2069.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2069.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is XML",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1717
 testRunner.And("the debug inputs as", ((string)(null)), table2069, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2070 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2070.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1725
 testRunner.And("the debug output as", ((string)(null)), table2070, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is XML multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsXMLMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is XML multiple results", ((string[])(null)));
#line 1729
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2071 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2071.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table2071.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2071.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2071.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2071.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2071.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table2071.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1730
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2071, "Given ");
#line 1739
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1740
 testRunner.And("search the recordset with type \"Is XML\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1741
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1742
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1743
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2072 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2072.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2072.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2072.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2072.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2072.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2072.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2072.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Is XML",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1744
 testRunner.And("the debug inputs as", ((string)(null)), table2072, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2073 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2073.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1753
 testRunner.And("the debug output as", ((string)(null)), table2073, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is XML result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsXMLResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is XML result doesnt exist", ((string[])(null)));
#line 1757
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2074 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2074.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2074.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2074.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2074.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2074.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2074.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1758
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2074, "Given ");
#line 1766
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1767
 testRunner.And("search the recordset with type \"Is XML\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1768
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1769
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1770
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2075 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2075.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2075.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2075.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2075.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2075.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2075.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is XML",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1771
 testRunner.And("the debug inputs as", ((string)(null)), table2075, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2076 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2076.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1779
 testRunner.And("the debug output as", ((string)(null)), table2076, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Alphanumeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotAlphanumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Alphanumeric", ((string[])(null)));
#line 1783
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2077 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2077.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2077.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2077.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2077.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2077.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table2077.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1784
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2077, "Given ");
#line 1792
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1793
 testRunner.And("search the recordset with type \"Not Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1794
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1795
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1796
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2078 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2078.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2078.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2078.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2078.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2078.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2078.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Not Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1797
 testRunner.And("the debug inputs as", ((string)(null)), table2078, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2079 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2079.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1805
 testRunner.And("the debug output as", ((string)(null)), table2079, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Alphanumeric multiple res" +
            "ults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotAlphanumericMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Alphanumeric multiple res" +
                    "ults", ((string[])(null)));
#line 1809
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2080 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2080.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table2080.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2080.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2080.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2080.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2080.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table2080.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1810
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2080, "Given ");
#line 1819
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1820
 testRunner.And("search the recordset with type \"Not Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1821
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1822
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1823
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2081 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2081.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2081.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2081.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2081.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2081.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2081.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2081.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Not Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1824
 testRunner.And("the debug inputs as", ((string)(null)), table2081, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2082 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2082.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1833
 testRunner.And("the debug output as", ((string)(null)), table2082, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Alphanumeric result doesn" +
            "t exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotAlphanumericResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Alphanumeric result doesn" +
                    "t exist", ((string[])(null)));
#line 1837
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2083 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2083.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2083.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2083.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2083.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2083.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2083.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1838
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2083, "Given ");
#line 1846
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1847
 testRunner.And("search the recordset with type \"Not Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1848
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1849
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1850
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2084 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2084.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2084.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2084.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2084.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2084.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2084.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Not Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1851
 testRunner.And("the debug inputs as", ((string)(null)), table2084, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2085 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2085.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1859
 testRunner.And("the debug output as", ((string)(null)), table2085, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Date", ((string[])(null)));
#line 1863
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2086 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2086.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table2086.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table2086.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table2086.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table2086.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2086.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
#line 1864
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2086, "Given ");
#line 1872
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1873
 testRunner.And("search the recordset with type \"Not Date\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1874
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1875
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1876
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2087 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2087.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2087.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2087.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2087.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2087.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2087.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 12/11/2013",
                        "1",
                        "Not Date",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1877
 testRunner.And("the debug inputs as", ((string)(null)), table2087, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2088 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2088.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1885
 testRunner.And("the debug output as", ((string)(null)), table2088, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Date multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotDateMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Date multiple results", ((string[])(null)));
#line 1889
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2089 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2089.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2089.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table2089.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table2089.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table2089.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table2089.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2089.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
#line 1890
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2089, "Given ");
#line 1899
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1900
 testRunner.And("search the recordset with type \"Not Date\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1901
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1902
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1903
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2090 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2090.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2090.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2090.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2090.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2090.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2090.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2090.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = 12/11/2013",
                        "1",
                        "Not Date",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1904
 testRunner.And("the debug inputs as", ((string)(null)), table2090, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2091 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2091.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1913
 testRunner.And("the debug output as", ((string)(null)), table2091, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Date result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotDateResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Date result doesnt exist", ((string[])(null)));
#line 1917
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2092 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2092.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table2092.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table2092.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table2092.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table2092.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table2092.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
#line 1918
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2092, "Given ");
#line 1926
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1927
 testRunner.And("search the recordset with type \"Not Date\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1928
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1929
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1930
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2093 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2093.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2093.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2093.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2093.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2093.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2093.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 12/11/2013",
                        "1",
                        "Not Date",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1931
 testRunner.And("the debug inputs as", ((string)(null)), table2093, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2094 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2094.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1939
 testRunner.And("the debug output as", ((string)(null)), table2094, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Email")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEmail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Email", ((string[])(null)));
#line 1943
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2095 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2095.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table2095.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table2095.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table2095.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table2095.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2095.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
#line 1944
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2095, "Given ");
#line 1952
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1953
 testRunner.And("search the recordset with type \"Not Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1954
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1955
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1956
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2096 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2096.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2096.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2096.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2096.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2096.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2096.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = test@testEmail.co.za",
                        "1",
                        "Not Email",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1957
 testRunner.And("the debug inputs as", ((string)(null)), table2096, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2097 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2097.AddRow(new string[] {
                        "[[result]] =  5"});
#line 1965
 testRunner.And("the debug output as", ((string)(null)), table2097, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Email multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEmailMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Email multiple results", ((string[])(null)));
#line 1969
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2098 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2098.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2098.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table2098.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table2098.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table2098.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table2098.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2098.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
#line 1970
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2098, "Given ");
#line 1979
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1980
 testRunner.And("search the recordset with type \"Not Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1981
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1982
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1983
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2099 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2099.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2099.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2099.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2099.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2099.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2099.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2099.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = test@testEmail.co.za",
                        "1",
                        "Not Email",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1984
 testRunner.And("the debug inputs as", ((string)(null)), table2099, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2100 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2100.AddRow(new string[] {
                        "[[result]] =  1,6"});
#line 1993
 testRunner.And("the debug output as", ((string)(null)), table2100, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Email result doesnt exist" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEmailResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Email result doesnt exist" +
                    "", ((string[])(null)));
#line 1997
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2101 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2101.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table2101.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table2101.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table2101.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table2101.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table2101.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
#line 1998
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2101, "Given ");
#line 2006
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2007
 testRunner.And("search the recordset with type \"Not Email\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2008
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2009
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2010
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2102 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2102.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2102.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2102.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2102.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2102.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2102.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = test@testEmail.co.za",
                        "1",
                        "Not Email",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2011
 testRunner.And("the debug inputs as", ((string)(null)), table2102, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2103 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2103.AddRow(new string[] {
                        "[[result]] =  -1"});
#line 2019
 testRunner.And("the debug output as", ((string)(null)), table2103, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Numeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotNumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Numeric", ((string[])(null)));
#line 2023
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2104 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2104.AddRow(new string[] {
                        "rs().field",
                        "152"});
            table2104.AddRow(new string[] {
                        "rs().field",
                        "5"});
            table2104.AddRow(new string[] {
                        "rs().field",
                        "6"});
            table2104.AddRow(new string[] {
                        "rs().field",
                        "7"});
            table2104.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2104.AddRow(new string[] {
                        "rs().field",
                        "5"});
#line 2024
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2104, "Given ");
#line 2032
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2033
 testRunner.And("search the recordset with type \"Not Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2034
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2035
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2036
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2105 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2105.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 152",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2105.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 5",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2105.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 6",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2105.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 7",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2105.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2105.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 5",
                        "1",
                        "Not Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2037
 testRunner.And("the debug inputs as", ((string)(null)), table2105, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2106 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2106.AddRow(new string[] {
                        "[[result]] =  5"});
#line 2045
 testRunner.And("the debug output as", ((string)(null)), table2106, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Numeric multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotNumericMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Numeric multiple results", ((string[])(null)));
#line 2049
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2107 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2107.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2107.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table2107.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table2107.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table2107.AddRow(new string[] {
                        "rs().field",
                        "5"});
            table2107.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2107.AddRow(new string[] {
                        "rs().field",
                        "5"});
#line 2050
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2107, "Given ");
#line 2059
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2060
 testRunner.And("search the recordset with type \"Not Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2061
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2062
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2063
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2108 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2108.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2108.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2108.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2108.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2108.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 5",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2108.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2108.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = 5",
                        "1",
                        "Not Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2064
 testRunner.And("the debug inputs as", ((string)(null)), table2108, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2109 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2109.AddRow(new string[] {
                        "[[result]] =  1,6"});
#line 2073
 testRunner.And("the debug output as", ((string)(null)), table2109, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Numeric result doesnt exi" +
            "st")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotNumericResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Numeric result doesnt exi" +
                    "st", ((string[])(null)));
#line 2077
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2110 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2110.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table2110.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table2110.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table2110.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table2110.AddRow(new string[] {
                        "rs().field",
                        "3"});
            table2110.AddRow(new string[] {
                        "rs().field",
                        "3"});
#line 2078
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2110, "Given ");
#line 2086
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2087
 testRunner.And("search the recordset with type \"Not Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2088
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2089
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2090
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2111 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2111.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2111.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2111.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2111.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2111.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 3",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2111.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 3",
                        "1",
                        "Not Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2091
 testRunner.And("the debug inputs as", ((string)(null)), table2111, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2112 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2112.AddRow(new string[] {
                        "[[result]] =  -1"});
#line 2099
  testRunner.And("the debug output as", ((string)(null)), table2112, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Text")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Text", ((string[])(null)));
#line 2103
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2113 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2113.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2113.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2113.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2113.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2113.AddRow(new string[] {
                        "rs().field",
                        "52"});
            table2113.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 2104
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2113, "Given ");
#line 2112
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2113
 testRunner.And("search the recordset with type \"Not Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2114
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2115
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2116
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2114 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2114.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2114.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2114.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2114.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2114.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 52",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2114.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Not Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2117
 testRunner.And("the debug inputs as", ((string)(null)), table2114, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2115 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2115.AddRow(new string[] {
                        "[[result]] =  5"});
#line 2125
 testRunner.And("the debug output as", ((string)(null)), table2115, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Text multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotTextMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Text multiple results", ((string[])(null)));
#line 2129
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2116 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2116.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table2116.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2116.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2116.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2116.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2116.AddRow(new string[] {
                        "rs().field",
                        "741"});
            table2116.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 2130
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2116, "Given ");
#line 2139
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2140
 testRunner.And("search the recordset with type \"Not Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2141
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2142
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2143
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2117 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2117.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2117.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2117.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2117.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2117.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2117.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 741",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2117.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Not Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2144
 testRunner.And("the debug inputs as", ((string)(null)), table2117, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2118 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2118.AddRow(new string[] {
                        "[[result]] =  1,6"});
#line 2153
 testRunner.And("the debug output as", ((string)(null)), table2118, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Text result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotTextResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Text result doesnt exist", ((string[])(null)));
#line 2157
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2119 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2119.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2119.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2119.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2119.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2119.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2119.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 2158
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2119, "Given ");
#line 2166
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2167
 testRunner.And("search the recordset with type \"Not Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2168
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2169
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2170
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2120 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2120.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2120.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2120.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2120.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2120.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2120.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Not Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2171
 testRunner.And("the debug inputs as", ((string)(null)), table2120, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2121 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2121.AddRow(new string[] {
                        "[[result]] =  -1"});
#line 2179
  testRunner.And("the debug output as", ((string)(null)), table2121, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not XML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotXML()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not XML", ((string[])(null)));
#line 2183
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2122 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2122.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table2122.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table2122.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table2122.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table2122.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2122.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
#line 2184
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2122, "Given ");
#line 2192
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2193
 testRunner.And("search the recordset with type \"Not XML\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2194
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2195
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2196
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2123 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2123.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2123.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2123.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2123.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2123.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2123.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = <test></test>",
                        "1",
                        "Not XML",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2197
 testRunner.And("the debug inputs as", ((string)(null)), table2123, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2124 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2124.AddRow(new string[] {
                        "[[result]] =  5"});
#line 2205
 testRunner.And("the debug output as", ((string)(null)), table2124, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not XML multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotXMLMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not XML multiple results", ((string[])(null)));
#line 2209
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2125 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2125.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2125.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table2125.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table2125.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table2125.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table2125.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table2125.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
#line 2210
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2125, "Given ");
#line 2219
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2220
 testRunner.And("search the recordset with type \"Not XML\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2221
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2222
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2223
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2126 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2126.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2126.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2126.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2126.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2126.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2126.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2126.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = <test></test>",
                        "1",
                        "Not XML",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2224
 testRunner.And("the debug inputs as", ((string)(null)), table2126, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2127 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2127.AddRow(new string[] {
                        "[[result]] =  1,6"});
#line 2233
 testRunner.And("the debug output as", ((string)(null)), table2127, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not XML result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotXMLResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not XML result doesnt exist", ((string[])(null)));
#line 2237
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2128 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2128.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table2128.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table2128.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table2128.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table2128.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table2128.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
#line 2238
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2128, "Given ");
#line 2246
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2247
 testRunner.And("search the recordset with type \"Not XML\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2248
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2249
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2250
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2129 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2129.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2129.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2129.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2129.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2129.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2129.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = <test></test>",
                        "1",
                        "Not XML",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2251
 testRunner.And("the debug inputs as", ((string)(null)), table2129, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2130 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2130.AddRow(new string[] {
                        "[[result]] =  -1"});
#line 2259
 testRunner.And("the debug output as", ((string)(null)), table2130, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type Contains and requires all fields" +
            " to match true and match all rows true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeContainsAndRequiresAllFieldsToMatchTrueAndMatchAllRowsTrue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type Contains and requires all fields" +
                    " to match true and match all rows true", ((string[])(null)));
#line 2263
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2131 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2131.AddRow(new string[] {
                        "rs(1).field1",
                        "123"});
            table2131.AddRow(new string[] {
                        "rs(2).field1",
                        "2"});
            table2131.AddRow(new string[] {
                        "rs(3).field1",
                        "5"});
#line 2264
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2131, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2132 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2132.AddRow(new string[] {
                        "rs1(1).field2",
                        "214"});
            table2132.AddRow(new string[] {
                        "rs1(2).field2",
                        "51"});
            table2132.AddRow(new string[] {
                        "rs1(3).field2",
                        "56"});
#line 2269
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2132, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2133 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2133.AddRow(new string[] {
                        "rs2(1).field3",
                        "512"});
            table2133.AddRow(new string[] {
                        "rs2(2).field3",
                        "84"});
            table2133.AddRow(new string[] {
                        "rs2(3).field3",
                        "12"});
#line 2274
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2133, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2134 = new TechTalk.SpecFlow.Table(new string[] {
                        "field"});
            table2134.AddRow(new string[] {
                        "[[rs().field1]]"});
            table2134.AddRow(new string[] {
                        "[[rs1().field2]]"});
            table2134.AddRow(new string[] {
                        "[[rs2().field3]]"});
#line 2279
 testRunner.And("the fields to search is", ((string)(null)), table2134, "And ");
#line 2284
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2285
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2286
 testRunner.And("when match all search criteria is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2287
 testRunner.And("when requires all fields to match is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2288
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2289
 testRunner.Then("the find records index multiple result should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2290
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type Contains and requires all fields" +
            " to match false and match all rows true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeContainsAndRequiresAllFieldsToMatchFalseAndMatchAllRowsTrue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type Contains and requires all fields" +
                    " to match false and match all rows true", ((string[])(null)));
#line 2292
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2135 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2135.AddRow(new string[] {
                        "rs(1).field1",
                        "123"});
            table2135.AddRow(new string[] {
                        "rs(2).field1",
                        "2"});
            table2135.AddRow(new string[] {
                        "rs(3).field1",
                        "5"});
#line 2293
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2135, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2136 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2136.AddRow(new string[] {
                        "rs1(1).field2",
                        "214"});
            table2136.AddRow(new string[] {
                        "rs1(2).field2",
                        "51"});
            table2136.AddRow(new string[] {
                        "rs1(3).field2",
                        "56"});
#line 2298
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2136, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2137 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2137.AddRow(new string[] {
                        "rs2(1).field3",
                        "512"});
            table2137.AddRow(new string[] {
                        "rs2(2).field3",
                        "84"});
            table2137.AddRow(new string[] {
                        "rs2(3).field3",
                        "12"});
#line 2303
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2137, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2138 = new TechTalk.SpecFlow.Table(new string[] {
                        "field"});
            table2138.AddRow(new string[] {
                        "[[rs().field1]]"});
            table2138.AddRow(new string[] {
                        "[[rs1().field2]]"});
            table2138.AddRow(new string[] {
                        "[[rs2().field3]]"});
#line 2308
 testRunner.And("the fields to search is", ((string)(null)), table2138, "And ");
#line 2313
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2314
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2315
 testRunner.And("when match all search criteria is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2316
 testRunner.And("when requires all fields to match is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2317
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2318
 testRunner.Then("the find records index multiple result should be 1,3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2319
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type Contains and requires all fields" +
            " to match false and match all rows false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeContainsAndRequiresAllFieldsToMatchFalseAndMatchAllRowsFalse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type Contains and requires all fields" +
                    " to match false and match all rows false", ((string[])(null)));
#line 2321
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2139 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2139.AddRow(new string[] {
                        "AB(1).f1",
                        "123"});
            table2139.AddRow(new string[] {
                        "AB(2).f1",
                        "2"});
            table2139.AddRow(new string[] {
                        "AB(3).f1",
                        "5"});
#line 2322
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2139, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2140 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2140.AddRow(new string[] {
                        "CD(1).f2",
                        "214"});
            table2140.AddRow(new string[] {
                        "CD(2).f2",
                        "51"});
            table2140.AddRow(new string[] {
                        "CD(3).f2",
                        "56"});
#line 2327
 testRunner.And("I have the following recordset to search for multiple criteria", ((string)(null)), table2140, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2141 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2141.AddRow(new string[] {
                        "EF(1).f3",
                        "512"});
            table2141.AddRow(new string[] {
                        "EF(2).f3",
                        "84"});
            table2141.AddRow(new string[] {
                        "EF(3).f3",
                        "12"});
#line 2332
 testRunner.And("I have the following recordset to search for multiple criteria", ((string)(null)), table2141, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2142 = new TechTalk.SpecFlow.Table(new string[] {
                        "field"});
            table2142.AddRow(new string[] {
                        "[[AB().f1]]"});
            table2142.AddRow(new string[] {
                        "[[CD().f2]]"});
            table2142.AddRow(new string[] {
                        "[[EF().f3]]"});
#line 2337
 testRunner.And("the fields to search is", ((string)(null)), table2142, "And ");
#line 2342
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2343
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2344
 testRunner.And("when match all search criteria is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2345
 testRunner.And("when requires all fields to match is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2346
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2347
 testRunner.Then("the find records index multiple result should be 1,2,3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2348
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type Contains and requires all fields" +
            " to match true and match all rows false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeContainsAndRequiresAllFieldsToMatchTrueAndMatchAllRowsFalse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type Contains and requires all fields" +
                    " to match true and match all rows false", ((string[])(null)));
#line 2350
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2143 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2143.AddRow(new string[] {
                        "rs(1).field1",
                        "123"});
            table2143.AddRow(new string[] {
                        "rs(2).field1",
                        "2"});
            table2143.AddRow(new string[] {
                        "rs(3).field1",
                        "5"});
#line 2351
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2143, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2144 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2144.AddRow(new string[] {
                        "rs1(1).field2",
                        "214"});
            table2144.AddRow(new string[] {
                        "rs1(2).field2",
                        "52"});
            table2144.AddRow(new string[] {
                        "rs1(3).field2",
                        "56"});
#line 2356
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2144, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2145 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2145.AddRow(new string[] {
                        "rs2(1).field3",
                        "512"});
            table2145.AddRow(new string[] {
                        "rs2(2).field3",
                        "82"});
            table2145.AddRow(new string[] {
                        "rs2(3).field3",
                        "12"});
#line 2361
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2145, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2146 = new TechTalk.SpecFlow.Table(new string[] {
                        "field"});
            table2146.AddRow(new string[] {
                        "[[rs().field1]]"});
            table2146.AddRow(new string[] {
                        "[[rs1().field2]]"});
            table2146.AddRow(new string[] {
                        "[[rs2().field3]]"});
#line 2366
 testRunner.And("the fields to search is", ((string)(null)), table2146, "And ");
#line 2371
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2372
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2373
 testRunner.And("when match all search criteria is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2374
 testRunner.And("when requires all fields to match is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2375
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2376
 testRunner.Then("the find records index multiple result should be 1,2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2377
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Search using a negative index recordset criteria")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void SearchUsingANegativeIndexRecordsetCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search using a negative index recordset criteria", ((string[])(null)));
#line 2379
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2147 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2147.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table2147.AddRow(new string[] {
                        "rs().row",
                        "User"});
#line 2380
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2147, "Given ");
#line 2384
 testRunner.And("field to search is \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2385
 testRunner.And("search the recordset with type \"Not XML\" and criteria is \"[[my(-1).set]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2386
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2387
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2148 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2148.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).row]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2148.AddRow(new string[] {
                        "",
                        "[[rs(2).row]] = User",
                        "1",
                        "Not XML",
                        "[[my(-1).set]] =",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2388
 testRunner.And("the debug inputs as", ((string)(null)), table2148, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index", ((string[])(null)));
#line 2393
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2149 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2149.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table2149.AddRow(new string[] {
                        "rs().field",
                        "15"});
            table2149.AddRow(new string[] {
                        "rs().field",
                        "20"});
            table2149.AddRow(new string[] {
                        "rs().field",
                        "34"});
#line 2394
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2149, "Given ");
#line 2400
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2401
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"16\" and \"" +
                    "33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2402
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2403
 testRunner.Then("the find records index multiple result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2404
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2150 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2150.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2150.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 15",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2150.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 20",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2150.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 34",
                        "1",
                        "Is Between",
                        "",
                        "16",
                        "33",
                        "NO",
                        "NO"});
#line 2405
 testRunner.And("the debug inputs as", ((string)(null)), table2150, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2151 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2151.AddRow(new string[] {
                        "[[result]] = 3"});
#line 2411
 testRunner.And("the debug output as", ((string)(null)), table2151, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find Record using match type as is Null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindRecordUsingMatchTypeAsIsNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find Record using match type as is Null", ((string[])(null)));
#line 2416
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2152 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2152.AddRow(new string[] {
                        "[[rs().row]]",
                        "NULL"});
#line 2417
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2152, "Given ");
#line 2420
 testRunner.And("field to search is \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2421
 testRunner.And("search the recordset with type \"Is NULL\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2422
 testRunner.And("when match all search criteria is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2423
 testRunner.And("when requires all fields to match is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2424
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2425
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find Record using match type as is not Null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindRecordUsingMatchTypeAsIsNotNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find Record using match type as is not Null", ((string[])(null)));
#line 2427
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2153 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2153.AddRow(new string[] {
                        "[[rs().row]]",
                        "NULL"});
#line 2428
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2153, "Given ");
#line 2431
 testRunner.And("field to search is \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2432
 testRunner.And("search the recordset with type \"Is Not NULL\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2433
 testRunner.And("when match all search criteria is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2434
 testRunner.And("when requires all fields to match is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2435
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2436
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Text multiple results usi" +
            "ng recordset result")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotTextMultipleResultsUsingRecordsetResult()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Text multiple results usi" +
                    "ng recordset result", ((string[])(null)));
#line 2438
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2154 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2154.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table2154.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table2154.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table2154.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table2154.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table2154.AddRow(new string[] {
                        "rs().field",
                        "741"});
            table2154.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 2439
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table2154, "Given ");
#line 2448
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2449
 testRunner.And("search the recordset with type \"Not Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2450
 testRunner.Then("the find records index multiple result should is \"[[res().val]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2451
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2452
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2155 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table2155.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2155.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2155.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2155.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2155.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2155.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 741",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2155.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Not Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2453
 testRunner.And("the debug inputs as", ((string)(null)), table2155, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2156 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2156.AddRow(new string[] {
                        "[[res(1).val]] =  1"});
            table2156.AddRow(new string[] {
                        "[[res(2).val]] =  6"});
#line 2462
 testRunner.And("the debug output as", ((string)(null)), table2156, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
