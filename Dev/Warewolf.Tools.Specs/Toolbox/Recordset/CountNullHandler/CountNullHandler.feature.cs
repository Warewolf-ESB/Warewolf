// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.Recordset.CountNullHandler
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CountFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "CountNullHandler.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Count", "\tIn order to count records\r\n\tAs a Warewolf user\r\n\tI want a tool that takes a reco" +
                    "rd set counts it", ProgrammingLanguage.CSharp, new string[] {
                        "Recordset"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Count")))
            {
                global::Warewolf.Tools.Specs.Toolbox.Recordset.CountNullHandler.CountFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
 testRunner.Given("this feature", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.Then("activity is DsfCountRecordsetNullHandlerActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count a number of records in a recordset with 3 rows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void CountANumberOfRecordsInARecordsetWith3Rows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count a number of records in a recordset with 3 rows", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1802 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[rs]]",
                        ""});
            table1802.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table1802.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table1802.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 12
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1802, "Given ");
#line 17
 testRunner.And("count on record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then("the result count should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1803 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table1803.AddRow(new string[] {
                        "[[rs(1).row]] = 1"});
            table1803.AddRow(new string[] {
                        "[[rs(2).row]] = 2"});
            table1803.AddRow(new string[] {
                        "[[rs(3).row]] = 3"});
#line 21
 testRunner.And("the debug inputs as", ((string)(null)), table1803, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1804 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1804.AddRow(new string[] {
                        "[[result]] = 3"});
#line 26
 testRunner.And("the debug output as", ((string)(null)), table1804, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count a number of records in a recordset with 8 rows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void CountANumberOfRecordsInARecordsetWith8Rows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count a number of records in a recordset with 8 rows", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1805 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        ""});
            table1805.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table1805.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table1805.AddRow(new string[] {
                        "rs().row",
                        "3"});
            table1805.AddRow(new string[] {
                        "rs().row",
                        "4"});
            table1805.AddRow(new string[] {
                        "rs().row",
                        "5"});
            table1805.AddRow(new string[] {
                        "rs().row",
                        "6"});
            table1805.AddRow(new string[] {
                        "rs().row",
                        "7"});
            table1805.AddRow(new string[] {
                        "rs().row",
                        "8"});
#line 31
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1805, "Given ");
#line 41
 testRunner.And("count on record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.Then("the result count should be 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1806 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table1806.AddRow(new string[] {
                        "[[rs(1).row]] =  1"});
            table1806.AddRow(new string[] {
                        "[[rs(2).row]] =  2"});
            table1806.AddRow(new string[] {
                        "[[rs(3).row]] =  3"});
            table1806.AddRow(new string[] {
                        "[[rs(4).row]] =  4"});
            table1806.AddRow(new string[] {
                        "[[rs(5).row]] =  5"});
            table1806.AddRow(new string[] {
                        "[[rs(6).row]] =  6"});
            table1806.AddRow(new string[] {
                        "[[rs(7).row]] =  7"});
            table1806.AddRow(new string[] {
                        "[[rs(8).row]] =  8"});
#line 45
 testRunner.And("the debug inputs as", ((string)(null)), table1806, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1807 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1807.AddRow(new string[] {
                        "[[result]] = 8"});
#line 55
 testRunner.And("the debug output as", ((string)(null)), table1807, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count a number of records in a empty recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void CountANumberOfRecordsInAEmptyRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count a number of records in a empty recordset", ((string[])(null)));
#line 61
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1808 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        ""});
            table1808.AddRow(new string[] {
                        "[[rs().row]]",
                        "NULL"});
#line 62
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1808, "Given ");
#line 65
 testRunner.And("count on record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
 testRunner.Then("the result count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 68
 testRunner.And("the execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count a number of records in a unassigned recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void CountANumberOfRecordsInAUnassignedRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count a number of records in a unassigned recordset", ((string[])(null)));
#line 71
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 72
 testRunner.Given("count on record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 73
 testRunner.And("treat null as Empty Recordset is not selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("the execution has \"An\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count A Number Of Records In A Unassigned Recordset Null Check Selected")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void CountANumberOfRecordsInAUnassignedRecordsetNullCheckSelected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count A Number Of Records In A Unassigned Recordset Null Check Selected", ((string[])(null)));
#line 77
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 78
 testRunner.Given("count on record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 79
 testRunner.And("treat null as Empty Recordset is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 81
 testRunner.Then("the result count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 82
 testRunner.And("the execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count record with invalid variables")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void CountRecordWithInvalidVariables()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count record with invalid variables", ((string[])(null)));
#line 85
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1809 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        ""});
            table1809.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table1809.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table1809.AddRow(new string[] {
                        "rs().row",
                        "3"});
            table1809.AddRow(new string[] {
                        "rs().row",
                        "4"});
            table1809.AddRow(new string[] {
                        "rs().row",
                        "5"});
            table1809.AddRow(new string[] {
                        "rs().row",
                        "6"});
            table1809.AddRow(new string[] {
                        "rs().row",
                        "7"});
            table1809.AddRow(new string[] {
                        "rs().row",
                        "8"});
#line 86
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1809, "Given ");
#line 96
 testRunner.And("count on record \"[[rs().#$]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 98
 testRunner.Then("the result count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 99
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1810 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
#line 100
 testRunner.And("the debug inputs as", ((string)(null)), table1810, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1811 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 102
 testRunner.And("the debug output as", ((string)(null)), table1811, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count only one column record")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void CountOnlyOneColumnRecord()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count only one column record", ((string[])(null)));
#line 105
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1812 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        ""});
            table1812.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table1812.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table1812.AddRow(new string[] {
                        "rs().row",
                        "3"});
            table1812.AddRow(new string[] {
                        "rs().row",
                        "4"});
            table1812.AddRow(new string[] {
                        "rs().row",
                        "5"});
            table1812.AddRow(new string[] {
                        "rs().row",
                        "6"});
            table1812.AddRow(new string[] {
                        "rs().row",
                        "7"});
            table1812.AddRow(new string[] {
                        "rs().row",
                        "8"});
#line 106
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1812, "Given ");
#line 116
 testRunner.And("count on record \"[[rs(*).row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 118
 testRunner.Then("the result count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 119
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1813 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
#line 120
 testRunner.And("the debug inputs as", ((string)(null)), table1813, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1814 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 122
 testRunner.And("the debug output as", ((string)(null)), table1814, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count only one coloumn record")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void CountOnlyOneColoumnRecord()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count only one coloumn record", ((string[])(null)));
#line 125
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1815 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        ""});
            table1815.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table1815.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table1815.AddRow(new string[] {
                        "rs().row",
                        "3"});
            table1815.AddRow(new string[] {
                        "rs().row",
                        "4"});
            table1815.AddRow(new string[] {
                        "fs().row",
                        "5"});
            table1815.AddRow(new string[] {
                        "fs().row",
                        "6"});
            table1815.AddRow(new string[] {
                        "fs().row",
                        "7"});
            table1815.AddRow(new string[] {
                        "fs().row",
                        "8"});
#line 126
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1815, "Given ");
#line 136
 testRunner.And("count on record \"[[rs().row]],[[fs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 138
 testRunner.Then("the result count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 139
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1816 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
#line 140
 testRunner.And("the debug inputs as", ((string)(null)), table1816, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1817 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 142
 testRunner.And("the debug output as", ((string)(null)), table1817, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count a number of records when two recordsets are defined.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void CountANumberOfRecordsWhenTwoRecordsetsAreDefined_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count a number of records when two recordsets are defined.", ((string[])(null)));
#line 145
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1818 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        ""});
            table1818.AddRow(new string[] {
                        "rs().row",
                        "a"});
            table1818.AddRow(new string[] {
                        "fs().row",
                        "a"});
            table1818.AddRow(new string[] {
                        "rs().row",
                        "b"});
            table1818.AddRow(new string[] {
                        "rs().row",
                        "c"});
            table1818.AddRow(new string[] {
                        "fs().row",
                        "b"});
            table1818.AddRow(new string[] {
                        "rs().row",
                        "d"});
            table1818.AddRow(new string[] {
                        "fs().row",
                        "c"});
            table1818.AddRow(new string[] {
                        "rs().row",
                        "e"});
#line 146
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1818, "Given ");
#line 156
 testRunner.And("count on record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 158
 testRunner.Then("the result count should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 159
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1819 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table1819.AddRow(new string[] {
                        "[[rs(1).row]] = a"});
            table1819.AddRow(new string[] {
                        "[[rs(2).row]] = b"});
            table1819.AddRow(new string[] {
                        "[[rs(3).row]] = c"});
            table1819.AddRow(new string[] {
                        "[[rs(4).row]] =  d"});
            table1819.AddRow(new string[] {
                        "[[rs(5).row]] =  e"});
#line 160
 testRunner.And("the debug inputs as", ((string)(null)), table1819, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1820 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1820.AddRow(new string[] {
                        "[[result]] = 5"});
#line 167
 testRunner.And("the debug output as", ((string)(null)), table1820, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Count with two variables in result field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        public virtual void ExecutingCountWithTwoVariablesInResultField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Count with two variables in result field", ((string[])(null)));
#line 171
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1821 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        ""});
            table1821.AddRow(new string[] {
                        "rs(1).row",
                        "1"});
            table1821.AddRow(new string[] {
                        "rs(2).row",
                        "2"});
            table1821.AddRow(new string[] {
                        "rs(3).row",
                        "3"});
            table1821.AddRow(new string[] {
                        "rs(4).row",
                        "4"});
#line 172
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1821, "Given ");
#line 178
 testRunner.And("count on record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
    testRunner.And("result variable as \"[[b]][[a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 180
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 181
 testRunner.Then("the result count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 182
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1822 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table1822.AddRow(new string[] {
                        "[[rs(1).row]] = 1"});
            table1822.AddRow(new string[] {
                        "[[rs(2).row]] = 2"});
            table1822.AddRow(new string[] {
                        "[[rs(3).row]] = 3"});
            table1822.AddRow(new string[] {
                        "[[rs(4).row]] = 4"});
#line 183
 testRunner.And("the debug inputs as", ((string)(null)), table1822, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1823 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 189
 testRunner.And("the debug output as", ((string)(null)), table1823, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void EnsureVariablesOfDifferentTypesProduceDesiredResults(string count, string val, string error, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ensure variables of different types produce desired results", exampleTags);
#line 192
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1824 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[rs]]",
                        ""});
            table1824.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table1824.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table1824.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 193
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1824, "Given ");
#line 198
 testRunner.And("count on record \"<count>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 199
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 200
 testRunner.Then(string.Format("the result count should be \"{0}\"", val), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 201
 testRunner.And(string.Format("the execution has \"{0}\" error", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure variables of different types produce desired results: ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Count", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:val", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "Recordset not given")]
        public virtual void EnsureVariablesOfDifferentTypesProduceDesiredResults_()
        {
#line 192
this.EnsureVariablesOfDifferentTypesProduceDesiredResults("", "0", "AN", "Recordset not given", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure variables of different types produce desired results: [[var]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "[[var]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Count", "[[var]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:val", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "Scalar not allowed")]
        public virtual void EnsureVariablesOfDifferentTypesProduceDesiredResults_Var()
        {
#line 192
this.EnsureVariablesOfDifferentTypesProduceDesiredResults("[[var]]", "0", "AN", "Scalar not allowed", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure variables of different types produce desired results: [[q]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "[[q]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Count", "[[q]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:val", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "Value must be a recordset")]
        public virtual void EnsureVariablesOfDifferentTypesProduceDesiredResults_Q()
        {
#line 192
this.EnsureVariablesOfDifferentTypesProduceDesiredResults("[[q]]", "0", "AN", "Value must be a recordset", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure variables of different types produce desired results: Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Count", "Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:val", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "Value must be a recordset")]
        public virtual void EnsureVariablesOfDifferentTypesProduceDesiredResults_Test()
        {
#line 192
this.EnsureVariablesOfDifferentTypesProduceDesiredResults("Test", "0", "AN", "Value must be a recordset", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure variables of different types produce desired results: 99")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "99")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Count", "99")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:val", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "Value must be a recordset")]
        public virtual void EnsureVariablesOfDifferentTypesProduceDesiredResults_99()
        {
#line 192
this.EnsureVariablesOfDifferentTypesProduceDesiredResults("99", "0", "AN", "Value must be a recordset", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure variables of different types produce desired results: [[rs([[var]])]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "[[rs([[var]])]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Count", "[[rs([[var]])]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:val", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "[[result]] = Error")]
        public virtual void EnsureVariablesOfDifferentTypesProduceDesiredResults_RsVar()
        {
#line 192
this.EnsureVariablesOfDifferentTypesProduceDesiredResults("[[rs([[var]])]]", "0", "AN", "[[result]] = Error", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
