// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.Utility.Redis
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RedisGetSetFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "RedisGetSet.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "RedisGetSet", "\tIn order to avoid reading data source every time I require data\r\n\tAs a user\r\n\tI " +
                    "want to cache data for as long as I need to use it and delete and release the da" +
                    "ta key to be reused", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "RedisGetSet")))
            {
                global::Warewolf.Tools.Specs.Toolbox.Utility.Redis.RedisGetSetFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("No data in Cache")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RedisGetSet")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RedisGetSet")]
        public virtual void NoDataInCache()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No data in Cache", new string[] {
                        "RedisGetSet"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("Redis source \"localhost\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.And("I have a key \"MyData\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.And("No data in the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2772 = new TechTalk.SpecFlow.Table(new string[] {
                        "var",
                        "value"});
            table2772.AddRow(new string[] {
                        "[[Var1]]",
                        "\"Test1\""});
#line 20
 testRunner.And("an assign \"dataToStore\" as", ((string)(null)), table2772, "And ");
#line 23
 testRunner.When("I execute the get/set tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2773 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Data"});
            table2773.AddRow(new string[] {
                        "MyData",
                        "\"[[Var1]],Test1\""});
#line 24
 testRunner.Then("the cache will contain", ((string)(null)), table2773, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2774 = new TechTalk.SpecFlow.Table(new string[] {
                        "var",
                        "value"});
            table2774.AddRow(new string[] {
                        "[[Var1]]",
                        "\"Test1\""});
#line 27
 testRunner.And("output variables have the following values", ((string)(null)), table2774, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Data exists for given TTL not hit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RedisGetSet")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RedisGetSet")]
        public virtual void DataExistsForGivenTTLNotHit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Data exists for given TTL not hit", new string[] {
                        "RedisGetSet"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("Redis source \"localhost\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.And("I have a key \"MyData\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2775 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Data"});
            table2775.AddRow(new string[] {
                        "MyData",
                        "\"[[Var1]],Data in cache\""});
#line 44
 testRunner.And("data exists (TTL not hit) for key \"MyData\" as", ((string)(null)), table2775, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2776 = new TechTalk.SpecFlow.Table(new string[] {
                        "var",
                        "value"});
            table2776.AddRow(new string[] {
                        "[[Var1]]",
                        "\"Test1\""});
#line 47
 testRunner.And("an assign \"dataToStore\" as", ((string)(null)), table2776, "And ");
#line 50
 testRunner.When("I execute the get/set tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.Then("the assign \"dataToStore\" is not executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2777 = new TechTalk.SpecFlow.Table(new string[] {
                        "var",
                        "value"});
            table2777.AddRow(new string[] {
                        "[[Var1]]",
                        "\"[[Var1]],Data in cache\""});
#line 52
 testRunner.And("output variables have the following values", ((string)(null)), table2777, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Data Not Exist For Given Key (TTL exceeded) Spec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RedisGetSet")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RedisGetSet")]
        public virtual void DataNotExistForGivenKeyTTLExceededSpec()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Data Not Exist For Given Key (TTL exceeded) Spec", new string[] {
                        "RedisGetSet"});
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
 testRunner.Given("Redis source \"localhost\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 68
 testRunner.And("I have a key \"MyData\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2778 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        ""});
#line 69
 testRunner.And("data does not exist (TTL exceeded) for key \"MyData\" as", ((string)(null)), table2778, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2779 = new TechTalk.SpecFlow.Table(new string[] {
                        "var",
                        "value"});
            table2779.AddRow(new string[] {
                        "[[Var1]]",
                        "\"Test1\""});
#line 71
 testRunner.And("an assign \"dataToStore\" as", ((string)(null)), table2779, "And ");
#line 74
 testRunner.When("I execute the get/set tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("the assign \"dataToStore\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2780 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Data"});
            table2780.AddRow(new string[] {
                        "MyData",
                        "\"[[Var1]],Test1\""});
#line 76
 testRunner.Then("the cache will contain", ((string)(null)), table2780, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2781 = new TechTalk.SpecFlow.Table(new string[] {
                        "var",
                        "value"});
            table2781.AddRow(new string[] {
                        "[[Var1]]",
                        "\"Test1\""});
#line 79
 testRunner.And("output variables have the following values", ((string)(null)), table2781, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete Key From Cache")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RedisGetSet")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RedisGetSet")]
        public virtual void DeleteKeyFromCache()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Key From Cache", new string[] {
                        "RedisGetSet"});
#line 93
this.ScenarioSetup(scenarioInfo);
#line 94
 testRunner.Given("Redis source \"localhost\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 95
 testRunner.And("I have a key \"MyData\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2782 = new TechTalk.SpecFlow.Table(new string[] {
                        "var",
                        "value"});
            table2782.AddRow(new string[] {
                        "[[Var1]]",
                        "\"Test1\""});
#line 96
 testRunner.And("an assign \"dataToStore\" as", ((string)(null)), table2782, "And ");
#line 99
 testRunner.Then("The \"MyData\" Cache exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 100
 testRunner.Then("I have an existing key to delete \"MyData\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 101
 testRunner.When("I execute the delete tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
 testRunner.Then("The \"MyData\" Cache has been deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
