// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.Data.DataMerge
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DataMergeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = new string[] {
                "Data"};
        
#line 1 "DataMerge.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Toolbox/Data/DataMerge", "DataMerge", "\tIn order to merge data\r\n\tAs Warewolf user\r\n\tI want a tool that joins two or more" +
                    " pieces of data together", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "DataMerge")))
            {
                global::Warewolf.Tools.Specs.Toolbox.Data.DataMerge.DataMergeFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a scalar to a scalar using merge type none")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeAScalarToAScalarUsingMergeTypeNone()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a scalar to a scalar using merge type none", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("a merge variable \"[[a]]\" equal to \"Warewolf \"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.And("a merge variable \"[[b]]\" equal to \"Rocks\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And("an Input \"[[a]]\" and merge type \"None\" and string at as \"\" and Padding \"\" and Ali" +
                        "gnment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And("an Input \"[[b]]\" and merge type \"None\" and string at as \"\" and Padding \"\" and Ali" +
                        "gnment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("the merged result is \"Warewolf Rocks\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1421 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1421.AddRow(new string[] {
                            "1",
                            "[[a]] = Warewolf",
                            "None",
                            "\"\"",
                            "\"\"",
                            "Left"});
                table1421.AddRow(new string[] {
                            "2",
                            "[[b]] = Rocks",
                            "None",
                            "\"\"",
                            "\"\"",
                            "Left"});
#line 15
 testRunner.And("the debug inputs as", ((string)(null)), table1421, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1422 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1422.AddRow(new string[] {
                            "[[result]] = Warewolf Rocks"});
#line 19
 testRunner.And("the debug output as", ((string)(null)), table1422, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a recordset table and free text using None")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeARecordsetTableAndFreeTextUsingNone()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a recordset table and free text using None", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1423 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "val"});
                table1423.AddRow(new string[] {
                            "rs().row",
                            "1"});
                table1423.AddRow(new string[] {
                            "rs().row",
                            "2"});
                table1423.AddRow(new string[] {
                            "rs().row",
                            "3"});
#line 24
 testRunner.Given("a merge recordset", ((string)(null)), table1423, "Given ");
#line hidden
#line 29
 testRunner.And("an Input \"[[rs(*).row]]0\" and merge type \"None\" and string at as \"\" and Padding \"" +
                        "\" and Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("an Input \"0\" and merge type \"None\" and string at as \"\" and Padding \"\" and Alignme" +
                        "nt \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.Then("the merged result is \"100200300\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1424 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1424.AddRow(new string[] {
                            "1",
                            "[[rs(1).row]]0 = 10",
                            "",
                            "",
                            "",
                            ""});
                table1424.AddRow(new string[] {
                            "",
                            "[[rs(2).row]]0 = 20",
                            "",
                            "",
                            "",
                            ""});
                table1424.AddRow(new string[] {
                            "",
                            "[[rs(3).row]]0 = 30",
                            "",
                            "",
                            "",
                            ""});
                table1424.AddRow(new string[] {
                            "",
                            "",
                            "None",
                            "\"\"",
                            "\"\"",
                            "Left"});
                table1424.AddRow(new string[] {
                            "2",
                            "0",
                            "None",
                            "\"\"",
                            "\"\"",
                            "Left"});
#line 34
 testRunner.And("the debug inputs as", ((string)(null)), table1424, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1425 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1425.AddRow(new string[] {
                            "[[result]] = 100200300"});
#line 41
 testRunner.And("the debug output as", ((string)(null)), table1425, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a recordset table and free text using Chars")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeARecordsetTableAndFreeTextUsingChars()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a recordset table and free text using Chars", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1426 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "val"});
                table1426.AddRow(new string[] {
                            "rs().row",
                            "1"});
                table1426.AddRow(new string[] {
                            "rs().row",
                            "2"});
                table1426.AddRow(new string[] {
                            "rs().row",
                            "3"});
#line 47
 testRunner.Given("a merge recordset", ((string)(null)), table1426, "Given ");
#line hidden
#line 52
 testRunner.And("an Input \"[[rs(*).row]]\" and merge type \"Chars\" and string at as \"0\" and Padding " +
                        "\"\" and Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And("an Input \"0\" and merge type \"Chars\" and string at as \"0\" and Padding \"\" and Align" +
                        "ment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.And("an Input \"0\" and merge type \"None\" and string at as \"\" and Padding \"\" and Alignme" +
                        "nt \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
 testRunner.Then("the merged result is \"100002000030000\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1427 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1427.AddRow(new string[] {
                            "1",
                            "[[rs(1).row]] = 1",
                            "",
                            "",
                            "",
                            ""});
                table1427.AddRow(new string[] {
                            "",
                            "[[rs(2).row]] = 2",
                            "",
                            "",
                            "",
                            ""});
                table1427.AddRow(new string[] {
                            "",
                            "[[rs(3).row]] = 3",
                            "",
                            "",
                            "",
                            ""});
                table1427.AddRow(new string[] {
                            "",
                            "",
                            "Chars",
                            "0",
                            "\"\"",
                            "Left"});
                table1427.AddRow(new string[] {
                            "2",
                            "0",
                            "Chars",
                            "0",
                            "\"\"",
                            "Left"});
                table1427.AddRow(new string[] {
                            "3",
                            "0",
                            "None",
                            "\"\"",
                            "\"\"",
                            "Left"});
#line 58
 testRunner.And("the debug inputs as", ((string)(null)), table1427, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1428 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1428.AddRow(new string[] {
                            "[[result]] = 100002000030000"});
#line 66
 testRunner.And("the debug output as", ((string)(null)), table1428, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a recordset table and free text using New Line")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeARecordsetTableAndFreeTextUsingNewLine()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a recordset table and free text using New Line", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1429 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "val"});
                table1429.AddRow(new string[] {
                            "rs().row",
                            "1"});
                table1429.AddRow(new string[] {
                            "rs().row",
                            "2"});
                table1429.AddRow(new string[] {
                            "rs().row",
                            "3"});
#line 71
 testRunner.Given("a merge recordset", ((string)(null)), table1429, "Given ");
#line hidden
#line 76
 testRunner.And("an Input \"[[rs(*).row]]\" and merge type \"New Line\" and string at as \"\" and Paddin" +
                        "g \"\" and Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.And("an Input \"0\" and merge type \"New Line\" and string at as \"\" and Padding \"\" and Ali" +
                        "gnment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
 testRunner.Then("the merged result is the same as file \"NewLineExample.txt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 80
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1430 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1430.AddRow(new string[] {
                            "1",
                            "[[rs(1).row]] = 1",
                            "",
                            "",
                            "",
                            ""});
                table1430.AddRow(new string[] {
                            "",
                            "[[rs(2).row]] = 2",
                            "",
                            "",
                            "",
                            ""});
                table1430.AddRow(new string[] {
                            "",
                            "[[rs(3).row]] = 3",
                            "",
                            "",
                            "",
                            ""});
                table1430.AddRow(new string[] {
                            "",
                            "",
                            "New Line",
                            "\"\"",
                            "\"\"",
                            "Left"});
                table1430.AddRow(new string[] {
                            "2",
                            "0",
                            "New Line",
                            "\"\"",
                            "\"\"",
                            "Left"});
#line 81
 testRunner.And("the debug inputs as", ((string)(null)), table1430, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a recordset table and free text using Tab")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeARecordsetTableAndFreeTextUsingTab()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a recordset table and free text using Tab", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1431 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "val"});
                table1431.AddRow(new string[] {
                            "rs().row",
                            "1"});
                table1431.AddRow(new string[] {
                            "rs().row",
                            "2"});
                table1431.AddRow(new string[] {
                            "rs().row",
                            "3"});
#line 90
 testRunner.Given("a merge recordset", ((string)(null)), table1431, "Given ");
#line hidden
#line 95
 testRunner.And("an Input \"[[rs(*).row]]tab->\" and merge type \"Tab\" and string at as \"\" and Paddin" +
                        "g \"\" and Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.And("an Input \"<-\" and merge type \"None\" and string at as \"\" and Padding \"\" and Alignm" +
                        "ent \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
 testRunner.Then("the merged result is \"1tab->\t<-2tab->\t<-3tab->\t<-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 99
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1432 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1432.AddRow(new string[] {
                            "1",
                            "[[rs(1).row]]tab-> = 1tab->",
                            "",
                            "",
                            "",
                            ""});
                table1432.AddRow(new string[] {
                            "",
                            "[[rs(2).row]]tab-> = 2tab->",
                            "",
                            "",
                            "",
                            ""});
                table1432.AddRow(new string[] {
                            "",
                            "[[rs(3).row]]tab-> = 3tab->",
                            "",
                            "",
                            "",
                            ""});
                table1432.AddRow(new string[] {
                            "",
                            "",
                            "Tab",
                            "\"\"",
                            "\"\"",
                            "Left"});
                table1432.AddRow(new string[] {
                            "2",
                            "<-",
                            "None",
                            "\"\"",
                            "\"\"",
                            "Left"});
#line 100
 testRunner.And("the debug inputs as", ((string)(null)), table1432, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1433 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1433.AddRow(new string[] {
                            "[[result]] = 1tab->\t<-2tab->\t<-3tab->\t<-"});
#line 107
 testRunner.And("the debug output as", ((string)(null)), table1433, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a variable using index that is a char")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeAVariableUsingIndexThatIsAChar()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a variable using index that is a char", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 112
 testRunner.Given("a merge variable \"[[a]]\" equal to \"aA \"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 113
 testRunner.And("an Input \"[[a]]\" and merge type \"Index\" and string at as \"b\" and Padding \"\" and A" +
                        "lignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 115
 testRunner.Then("the merged result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 116
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1434 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1434.AddRow(new string[] {
                            "1",
                            "[[a]] = aA",
                            "Index",
                            "b",
                            "\"\"",
                            "Left"});
#line 117
 testRunner.And("the debug inputs as", ((string)(null)), table1434, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1435 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1435.AddRow(new string[] {
                            "[[result]] ="});
#line 120
 testRunner.And("the debug output as", ((string)(null)), table1435, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a variable using index that is a variable and is blank")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeAVariableUsingIndexThatIsAVariableAndIsBlank()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a variable using index that is a variable and is blank", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 124
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 125
 testRunner.Given("a merge variable \"[[a]]\" equal to \"aA \"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 126
 testRunner.And("a merge variable \"[[b]]\" equal to \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
 testRunner.And("an Input \"[[a]]\" and merge type \"Index\" and string at as \"[[b]]\" and Padding \"\" a" +
                        "nd Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
 testRunner.Then("the merged result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1436 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1436.AddRow(new string[] {
                            "1",
                            "[[a]] = aA",
                            "Index",
                            "[[b]] =",
                            "\"\"",
                            "Left"});
#line 131
 testRunner.And("the debug inputs as", ((string)(null)), table1436, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1437 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1437.AddRow(new string[] {
                            "[[result]] ="});
#line 134
 testRunner.And("the debug output as", ((string)(null)), table1437, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge multiple variables on Chars with blank lines")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeMultipleVariablesOnCharsWithBlankLines()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge multiple variables on Chars with blank lines", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 138
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 139
 testRunner.Given("a merge variable \"[[a]]\" equal to \"Warewolf \"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 140
 testRunner.And("a merge variable \"[[b]]\" equal to \"Rocks\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
 testRunner.And("an Input \"[[a]]\" and merge type \"Chars\" and string at as \"/\" and Padding \" \" and " +
                        "Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
 testRunner.And("an Input \"[[b]]\" and merge type \"Chars\" and string at as \"/\" and Padding \" \" and " +
                        "Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 144
 testRunner.Then("the merged result is \"Warewolf /Rocks/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 145
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1438 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1438.AddRow(new string[] {
                            "1",
                            "[[a]] = Warewolf",
                            "Chars",
                            "/",
                            "\" \"",
                            "Left"});
                table1438.AddRow(new string[] {
                            "2",
                            "[[b]] = Rocks",
                            "Chars",
                            "/",
                            "\" \"",
                            "Left"});
#line 146
 testRunner.And("the debug inputs as", ((string)(null)), table1438, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1439 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1439.AddRow(new string[] {
                            "[[result]] = Warewolf /Rocks/"});
#line 150
 testRunner.And("the debug output as", ((string)(null)), table1439, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a recordset that has xml data using Tabs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeARecordsetThatHasXmlDataUsingTabs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a recordset that has xml data using Tabs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1440 = new TechTalk.SpecFlow.Table(new string[] {
                            "rs",
                            "val"});
                table1440.AddRow(new string[] {
                            "rs().row",
                            "<x id=\"1\">One</x>"});
                table1440.AddRow(new string[] {
                            "rs().row",
                            "<x id=\"2\">two</x>"});
                table1440.AddRow(new string[] {
                            "rs().row",
                            "<x id=\"3\">three</x>"});
#line 155
 testRunner.Given("a merge recordset", ((string)(null)), table1440, "Given ");
#line hidden
#line 160
 testRunner.And("an Input \"<record>\" and merge type \"Tab\" and string at as \"\" and Padding \"\" and A" +
                        "lignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 161
 testRunner.And("an Input \"[[rs(*).row]]\" and merge type \"Tab\" and string at as \"\" and Padding \"\" " +
                        "and Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 162
 testRunner.And("an Input \"</record>\" and merge type \"None\" and string at as \"\" and Padding \"\" and" +
                        " Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 163
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 164
 testRunner.Then("the merged result is \"<record>\t<x id=\"1\">One</x>\t</record><record>\t<x id=\"2\">two<" +
                        "/x>\t</record><record>\t<x id=\"3\">three</x>\t</record>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 165
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1441 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1441.AddRow(new string[] {
                            "1",
                            "<record>",
                            "Tab",
                            "\"\"",
                            "\"\"",
                            "Left"});
                table1441.AddRow(new string[] {
                            "2",
                            "[[rs(1).row]] = <x id=\"1\">One</x>",
                            "",
                            "",
                            "",
                            ""});
                table1441.AddRow(new string[] {
                            "",
                            "[[rs(2).row]] = <x id=\"2\">two</x>",
                            "",
                            "",
                            "",
                            ""});
                table1441.AddRow(new string[] {
                            "",
                            "[[rs(3).row]] = <x id=\"3\">three</x>",
                            "",
                            "",
                            "",
                            ""});
                table1441.AddRow(new string[] {
                            "",
                            "",
                            "Tab",
                            "\"\"",
                            "\"\"",
                            "Left"});
                table1441.AddRow(new string[] {
                            "3",
                            "</record>",
                            "None",
                            "\"\"",
                            "\"\"",
                            "Left"});
#line 166
 testRunner.And("the debug inputs as", ((string)(null)), table1441, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1442 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1442.AddRow(new string[] {
                            "[[result]] = <record>\t<x id=\"1\">One</x>\t</record><record>\t<x id=\"2\">two</x>\t</rec" +
                                "ord><record>\t<x id=\"3\">three</x>\t</record>"});
#line 174
 testRunner.And("the debug output as", ((string)(null)), table1442, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a short string using big index and padding and alignment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeAShortStringUsingBigIndexAndPaddingAndAlignment()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a short string using big index and padding and alignment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 179
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 180
 testRunner.Given("a merge variable \"[[a]]\" equal to \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 181
 testRunner.And("a merge variable \"[[b]]\" equal to \"123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 182
 testRunner.And("an Input \"[[a]]\" and merge type \"Index\" and string at as \"10\" and Padding \" \" and" +
                        " Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 183
 testRunner.And("an Input \"[[b]]\" and merge type \"Index\" and string at as \"5\" and Padding \"0\" and " +
                        "Alignment \"Right\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 184
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 185
 testRunner.Then("the merged result is \"Warewolf  00123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 186
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1443 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1443.AddRow(new string[] {
                            "1",
                            "[[a]] = Warewolf",
                            "Index",
                            "10",
                            "\" \"",
                            "Left"});
                table1443.AddRow(new string[] {
                            "2",
                            "[[b]] = 123",
                            "Index",
                            "5",
                            "0",
                            "Right"});
#line 187
 testRunner.And("the debug inputs as", ((string)(null)), table1443, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1444 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1444.AddRow(new string[] {
                            "[[result]] = Warewolf  00123"});
#line 191
 testRunner.And("the debug output as", ((string)(null)), table1444, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a long string using small index and padding and alignment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeALongStringUsingSmallIndexAndPaddingAndAlignment()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a long string using small index and padding and alignment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 196
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 197
 testRunner.Given("a merge variable \"[[a]]\" equal to \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 198
 testRunner.And("a merge variable \"[[b]]\" equal to \"12345\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 199
 testRunner.And("an Input \"[[a]]\" and merge type \"Index\" and string at as \"3\" and Padding \"\" and A" +
                        "lignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
 testRunner.And("an Input \"[[b]]\" and merge type \"Index\" and string at as \"3\" and Padding \"0\" and " +
                        "Alignment \"Right\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 201
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 202
 testRunner.Then("the merged result is \"War123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 203
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1445 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1445.AddRow(new string[] {
                            "1",
                            "[[a]] = Warewolf",
                            "Index",
                            "3",
                            "\"\"",
                            "Left"});
                table1445.AddRow(new string[] {
                            "2",
                            "[[b]] = 12345",
                            "Index",
                            "3",
                            "0",
                            "Right"});
#line 204
 testRunner.And("the debug inputs as", ((string)(null)), table1445, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1446 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1446.AddRow(new string[] {
                            "[[result]] = War123"});
#line 208
 testRunner.And("the debug output as", ((string)(null)), table1446, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a long string using small index and padding and alignment at invalid index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeALongStringUsingSmallIndexAndPaddingAndAlignmentAtInvalidIndex()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a long string using small index and padding and alignment at invalid index", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 213
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 214
 testRunner.Given("a merge variable \"[[a]]\" equal to \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 215
 testRunner.And("a merge variable \"[[b]]\" equal to \"12345\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 216
 testRunner.And("an Input \"[[a]]\" and merge type \"Index\" and string at as \"-1\" and Padding \" \" and" +
                        " Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
 testRunner.And("an Input \"[[b]]\" and merge type \"Index\" and string at as \"-1\" and Padding \"0\" and" +
                        " Alignment \"Right\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 219
 testRunner.Then("the merged result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 220
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1447 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1447.AddRow(new string[] {
                            "1",
                            "[[a]] = Warewolf",
                            "Index",
                            "-1",
                            "\" \"",
                            "Left"});
                table1447.AddRow(new string[] {
                            "2",
                            "[[b]] = 12345",
                            "Index",
                            "-1",
                            "0",
                            "Right"});
#line 221
 testRunner.And("the debug inputs as", ((string)(null)), table1447, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1448 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1448.AddRow(new string[] {
                            "[[result]] ="});
#line 225
 testRunner.And("the debug output as", ((string)(null)), table1448, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a long string using small index and padding and alignment at invalid quoted" +
            " index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeALongStringUsingSmallIndexAndPaddingAndAlignmentAtInvalidQuotedIndex()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a long string using small index and padding and alignment at invalid quoted" +
                    " index", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 229
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 230
 testRunner.Given("a merge variable \"[[a]]\" equal to \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 231
 testRunner.And("a merge variable \"[[b]]\" equal to \"12345\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 232
 testRunner.And("an Input \"[[a]]\" and merge type \"Index\" and string at as \"\"-1\"\" and Padding \" \" a" +
                        "nd Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 233
 testRunner.And("an Input \"[[b]]\" and merge type \"Index\" and string at as \"\"-1\"\" and Padding \"0\" a" +
                        "nd Alignment \"Right\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 234
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 235
 testRunner.Then("the merged result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 236
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1449 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1449.AddRow(new string[] {
                            "1",
                            "[[a]] = Warewolf",
                            "Index",
                            "\"-1\"",
                            "\" \"",
                            "Left"});
                table1449.AddRow(new string[] {
                            "2",
                            "[[b]] = 12345",
                            "Index",
                            "\"-1\"",
                            "0",
                            "Right"});
#line 237
 testRunner.And("the debug inputs as", ((string)(null)), table1449, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1450 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1450.AddRow(new string[] {
                            "[[result]] ="});
#line 241
 testRunner.And("the debug output as", ((string)(null)), table1450, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a long string using small index and padding multiple character and alignmen" +
            "t at index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeALongStringUsingSmallIndexAndPaddingMultipleCharacterAndAlignmentAtIndex()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a long string using small index and padding multiple character and alignmen" +
                    "t at index", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 245
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 246
 testRunner.Given("a merge variable \"[[a]]\" equal to \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 247
 testRunner.And("a merge variable \"[[b]]\" equal to \"12345\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 248
 testRunner.And("an Input \"[[a]]\" and merge type \"Index\" and string at as \"1\" and Padding \"eee\" an" +
                        "d Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 249
 testRunner.And("an Input \"[[b]]\" and merge type \"Index\" and string at as \"1\" and Padding \"0\" and " +
                        "Alignment \"Right\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 250
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 251
 testRunner.Then("the merged result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 252
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1451 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1451.AddRow(new string[] {
                            "1",
                            "[[a]] = Warewolf",
                            "Index",
                            "1",
                            "eee",
                            "Left"});
                table1451.AddRow(new string[] {
                            "2",
                            "[[b]] = 12345",
                            "Index",
                            "1",
                            "0",
                            "Right"});
#line 253
 testRunner.And("the debug inputs as", ((string)(null)), table1451, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1452 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1452.AddRow(new string[] {
                            "[[result]] ="});
#line 257
 testRunner.And("the debug output as", ((string)(null)), table1452, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a negative recordset index Input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeANegativeRecordsetIndexInput()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a negative recordset index Input", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 261
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 262
 testRunner.Given("an Input \"[[my(-1).a]]\" and merge type \"Index\" and string at as \"10\" and Padding " +
                        "\" \" and Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 263
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 264
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1453 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1453.AddRow(new string[] {
                            "1",
                            "[[my(-1).a]] =",
                            "Index",
                            "10",
                            "\" \"",
                            "Left"});
#line 265
 testRunner.And("the debug inputs as", ((string)(null)), table1453, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1454 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1454.AddRow(new string[] {
                            "[[result]] ="});
#line 268
 testRunner.And("the debug output as", ((string)(null)), table1454, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a negative recordset index for String At")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeANegativeRecordsetIndexForStringAt()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a negative recordset index for String At", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 272
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 273
 testRunner.Given("an Input \"12\" and merge type \"Index\" and string at as \"[[my(-1).a]]\" and Padding " +
                        "\" \" and Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 274
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 275
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1455 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1455.AddRow(new string[] {
                            "1",
                            "12",
                            "Index",
                            "[[my(-1).a]] =",
                            "\" \"",
                            "Left"});
#line 276
 testRunner.And("the debug inputs as", ((string)(null)), table1455, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1456 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1456.AddRow(new string[] {
                            "[[result]] ="});
#line 279
 testRunner.And("the debug output as", ((string)(null)), table1456, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a variable using index that is a variable and is not blank")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeAVariableUsingIndexThatIsAVariableAndIsNotBlank()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a variable using index that is a variable and is not blank", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 283
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 284
 testRunner.Given("a merge variable \"[[a]]\" equal to \"aA \"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 285
 testRunner.And("a merge variable \"[[b]]\" equal to \"bB \"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 286
 testRunner.And("a merge variable \"[[c]]\" equal to \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 287
 testRunner.And("an Input \"[[a]]\" and merge type \"Index\" and string at as \"[[c]]\" and Padding \"\" a" +
                        "nd Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 288
 testRunner.And("an Input \"[[b]]\" and merge type \"Index\" and string at as \"[[c]]\" and Padding \"\" a" +
                        "nd Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 289
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 290
 testRunner.Then("the merged result is \"ab\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 291
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1457 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1457.AddRow(new string[] {
                            "1",
                            "[[a]] = aA",
                            "Index",
                            "[[c]] = 1",
                            "\"\"",
                            "Left"});
                table1457.AddRow(new string[] {
                            "2",
                            "[[b]] = bB",
                            "Index",
                            "[[c]] = 1",
                            "\"\"",
                            "Left"});
#line 292
 testRunner.And("the debug inputs as", ((string)(null)), table1457, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1458 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1458.AddRow(new string[] {
                            "[[result]] = ab"});
#line 296
 testRunner.And("the debug output as", ((string)(null)), table1458, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a variable using index that is blank")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeAVariableUsingIndexThatIsBlank()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a variable using index that is blank", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 300
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 301
 testRunner.Given("a merge variable \"[[a]]\" equal to \"aA \"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 302
 testRunner.And("a merge variable \"[[b]]\" equal to \"bB \"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 303
 testRunner.And("a merge variable \"[[c]]\" equal to \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 304
 testRunner.And("an Input \"[[a]]\" and merge type \"Index\" and string at as \"\" and Padding \"\" and Al" +
                        "ignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 305
 testRunner.And("an Input \"[[b]]\" and merge type \"Index\" and string at as \"[[c]]\" and Padding \"\" a" +
                        "nd Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 306
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 307
 testRunner.Then("the merged result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 308
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1459 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1459.AddRow(new string[] {
                            "1",
                            "[[a]] = aA",
                            "Index",
                            "\"\"",
                            "\"\"",
                            "Left"});
                table1459.AddRow(new string[] {
                            "2",
                            "[[b]] = bB",
                            "Index",
                            "[[c]] = 1",
                            "\"\"",
                            "Left"});
#line 309
 testRunner.And("the debug inputs as", ((string)(null)), table1459, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1460 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1460.AddRow(new string[] {
                            "[[result]] ="});
#line 313
 testRunner.And("the debug output as", ((string)(null)), table1460, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a variable inside a variable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeAVariableInsideAVariable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a variable inside a variable", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 317
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 318
 testRunner.Given("a merge variable \"[[a]]\" equal to \"b\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 319
 testRunner.And("a merge variable \"[[b]]\" equal to \"c\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 320
 testRunner.And("a merge variable \"[[c]]\" equal to \"test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 321
 testRunner.And("a merge variable \"[[test]]\" equal to \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 322
 testRunner.And("an Input \"[[[[[[[[a]]]]]]]]\" and merge type \"Index\" and string at as \"8\" and Padd" +
                        "ing \"\" and Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 323
 testRunner.And("an Input \"[[c]]\" and merge type \"Index\" and string at as \"4\" and Padding \"\" and A" +
                        "lignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 324
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 325
 testRunner.Then("the merged result is \"Warewolftest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 326
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1461 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1461.AddRow(new string[] {
                            "1",
                            "[[[[[[b]]]]]] = Warewolf",
                            "Index",
                            "\"8\"",
                            "\"\"",
                            "Left"});
                table1461.AddRow(new string[] {
                            "2",
                            "[[c]]             = test",
                            "Index",
                            "\"4\"",
                            "\"\"",
                            "Left"});
#line 327
 testRunner.And("the debug inputs as", ((string)(null)), table1461, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1462 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1462.AddRow(new string[] {
                            "[[result]] = Warewolftest"});
#line 331
 testRunner.And("the debug output as", ((string)(null)), table1462, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a variable inside the invalid varaible")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public void MergeAVariableInsideTheInvalidVaraible()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a variable inside the invalid varaible", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 335
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 336
 testRunner.Given("a merge variable \"[[a]]\" equal to \"test%$ \"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 337
 testRunner.And("a merge variable \"[[b]]\" equal to \"warewolf \"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 338
 testRunner.And("an Input \"[[test%$]]\" and merge type \"Index\" and string at as \"\" and Padding \"\" a" +
                        "nd Alignment \"Left\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 339
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 340
 testRunner.Then("the merged result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 341
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1463 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "With",
                            "Using",
                            "Pad",
                            "Align"});
                table1463.AddRow(new string[] {
                            "1",
                            "[[test%$]] =",
                            "Index",
                            "\"\"",
                            "\"\"",
                            "Left"});
#line 342
 testRunner.And("the debug inputs as", ((string)(null)), table1463, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1464 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table1464.AddRow(new string[] {
                            "[[result]] ="});
#line 345
 testRunner.And("the debug output as", ((string)(null)), table1464, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void MergeAVariableThatDoesNotExist(string no, string type, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("No", no);
            argumentsOfScenario.Add("Type", type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge a variable that does not exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 349
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 350
 testRunner.Given(string.Format("an Input \"[[a]]\" and merge type \"{0}\" and string at as \"[[b]]\" and Padding \"[[c]]" +
                            "\" and Alignment \"Left\"", type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 351
 testRunner.When("the data merge tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 352
 testRunner.Then("the merged result is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 353
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 354
 testRunner.And("the execution has \"Scalar value { a } is NULL\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a variable that does not exist: 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "None")]
        public void MergeAVariableThatDoesNotExist_1()
        {
#line 349
this.MergeAVariableThatDoesNotExist("1", "None", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a variable that does not exist: 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "Index")]
        public void MergeAVariableThatDoesNotExist_2()
        {
#line 349
this.MergeAVariableThatDoesNotExist("2", "Index", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a variable that does not exist: 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "Chars")]
        public void MergeAVariableThatDoesNotExist_3()
        {
#line 349
this.MergeAVariableThatDoesNotExist("3", "Chars", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a variable that does not exist: 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "New Line")]
        public void MergeAVariableThatDoesNotExist_4()
        {
#line 349
this.MergeAVariableThatDoesNotExist("4", "New Line", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Merge a variable that does not exist: 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "Tab")]
        public void MergeAVariableThatDoesNotExist_5()
        {
#line 349
this.MergeAVariableThatDoesNotExist("5", "Tab", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
