// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Tools.Specs.Toolbox.Data.AssignObject
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AssignObjectFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "AssignObject.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AssignObject", "\tIn order to use json \r\n\tAs a Warewolf user\r\n\tI want a tool that assigns data to " +
                    "json objects", ProgrammingLanguage.CSharp, new string[] {
                        "Data"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "AssignObject")))
            {
                global::Warewolf.Tools.Specs.Toolbox.Data.AssignObject.AssignObjectFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAValueToAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a value to a json object", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I assign the value \"Bob\" to a json object \"[[@Person.Name]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("the json object \"[[@Person.Name]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table978 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table978.AddRow(new string[] {
                        "1",
                        "[[@Person.Name]] =",
                        "Bob"});
#line 12
 testRunner.And("the debug inputs as", ((string)(null)), table978, "And ");
#line hidden
            TechTalk.SpecFlow.Table table979 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table979.AddRow(new string[] {
                        "1",
                        "[[@Person.Name]] = Bob"});
#line 15
 testRunner.And("the debug output as", ((string)(null)), table979, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign values to json objects")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignValuesToJsonObjects()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign values to json objects", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I assign the value \"Bob\" to a json object \"[[@Person.FirstName]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.And("I assign the value \"Smith\" to a json object \"[[@Person.Surname]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("the json object \"[[@Person.FirstName]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
 testRunner.And("the json object \"[[@Person.Surname]]\" equals \"Smith\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table980 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table980.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] =",
                        "Bob"});
            table980.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] =",
                        "Smith"});
#line 26
 testRunner.And("the debug inputs as", ((string)(null)), table980, "And ");
#line hidden
            TechTalk.SpecFlow.Table table981 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table981.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] = Bob"});
            table981.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] = Smith"});
#line 30
 testRunner.And("the debug output as", ((string)(null)), table981, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign values with different types to json objects")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignValuesWithDifferentTypesToJsonObjects()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign values with different types to json objects", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("I assign the value \"Bob\" to a json object \"[[@Person.FirstName]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
 testRunner.And("I assign the value \"Smith\" to a json object \"[[@Person.Surname]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("I assign the value 21 to a json object \"[[@Person.Age]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("the json object \"[[@Person.FirstName]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.And("the json object \"[[@Person.Surname]]\" equals \"Smith\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.And("the json object \"[[@Person.Age]]\" equals \"21\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table982 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table982.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] =",
                        "Bob"});
            table982.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] =",
                        "Smith"});
            table982.AddRow(new string[] {
                        "3",
                        "[[@Person.Age]] =",
                        "21"});
#line 44
 testRunner.And("the debug inputs as", ((string)(null)), table982, "And ");
#line hidden
            TechTalk.SpecFlow.Table table983 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table983.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] = Bob"});
            table983.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] = Smith"});
            table983.AddRow(new string[] {
                        "3",
                        "[[@Person.Age]] = 21"});
#line 49
 testRunner.And("the debug output as", ((string)(null)), table983, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value with plus in it to a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAValueWithPlusInItToAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a value with plus in it to a json object", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line 56
 testRunner.Given("I assign the value \"+10\" to a json object \"[[@Person.Score]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("the json object \"[[@Person.Score]]\" equals \"+10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 59
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table984 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table984.AddRow(new string[] {
                        "1",
                        "[[@Person.Score]] =",
                        "+10"});
#line 60
 testRunner.And("the debug inputs as", ((string)(null)), table984, "And ");
#line hidden
            TechTalk.SpecFlow.Table table985 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table985.AddRow(new string[] {
                        "1",
                        "[[@Person.Score]] = +10"});
#line 63
 testRunner.And("the debug output as", ((string)(null)), table985, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value with minus in it to a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAValueWithMinusInItToAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a value with minus in it to a json object", ((string[])(null)));
#line 67
this.ScenarioSetup(scenarioInfo);
#line 68
 testRunner.Given("I assign the value \"-10\" to a json object \"[[@Person.Score]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("the json object \"[[@Person.Score]]\" equals \"-10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table986 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table986.AddRow(new string[] {
                        "1",
                        "[[@Person.Score]] =",
                        "-10"});
#line 72
 testRunner.And("the debug inputs as", ((string)(null)), table986, "And ");
#line hidden
            TechTalk.SpecFlow.Table table987 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table987.AddRow(new string[] {
                        "1",
                        "[[@Person.Score]] = -10"});
#line 75
 testRunner.And("the debug output as", ((string)(null)), table987, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a json object value to a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAJsonObjectValueToAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a json object value to a json object", ((string[])(null)));
#line 79
this.ScenarioSetup(scenarioInfo);
#line 80
 testRunner.Given("I assign the value \"Bob\" to a json object \"[[@Person.FirstName]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 81
 testRunner.And("I assign the value \"[[@Person.FirstName]]\" to a json object \"[[@Person.Surname]]\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 83
 testRunner.Then("the json object \"[[@Person.FirstName]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 84
 testRunner.And("the json object \"[[@Person.Surname]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table988 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table988.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] =",
                        "Bob"});
            table988.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] =",
                        "[[@Person.FirstName]] = Bob"});
#line 86
 testRunner.And("the debug inputs as", ((string)(null)), table988, "And ");
#line hidden
            TechTalk.SpecFlow.Table table989 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table989.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] = Bob"});
            table989.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] = Bob"});
#line 90
 testRunner.And("the debug output as", ((string)(null)), table989, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a json object value to a json object overwriting the existing value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAJsonObjectValueToAJsonObjectOverwritingTheExistingValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a json object value to a json object overwriting the existing value", ((string[])(null)));
#line 95
this.ScenarioSetup(scenarioInfo);
#line 96
 testRunner.Given("I assign the value \"Bob\" to a json object \"[[@Person.FirstName]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 97
 testRunner.And("I assign the value \"Smith\" to a json object \"[[@Person.Surname]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.And("I assign the value \"[[@Person.FirstName]]\" to a json object \"[[@Person.Surname]]\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
 testRunner.Then("the json object \"[[@Person.FirstName]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 101
 testRunner.And("the json object \"[[@Person.Surname]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table990 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table990.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] =",
                        "Bob"});
            table990.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] =",
                        "Smith"});
            table990.AddRow(new string[] {
                        "3",
                        "[[@Person.Surname]] = Smith",
                        "[[@Person.FirstName]] = Bob"});
#line 103
 testRunner.And("the debug inputs as", ((string)(null)), table990, "And ");
#line hidden
            TechTalk.SpecFlow.Table table991 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table991.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] = Bob"});
            table991.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] = Smith"});
            table991.AddRow(new string[] {
                        "3",
                        "[[@Person.Surname]] = Bob"});
#line 108
 testRunner.And("the debug output as", ((string)(null)), table991, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void AssignAValueToAnInvalidJsonObject(string no, string var, string error, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a value to an invalid json object", exampleTags);
#line 114
this.ScenarioSetup(scenarioInfo);
#line 115
 testRunner.Given(string.Format("I assign the value \"[[@Person.Score]]\" to a json object \"{0}\"", var), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 116
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
 testRunner.Then(string.Format("the execution has \"{0}\" error", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 118
 testRunner.And("the execution has \"parse error\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table992 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
#line 119
   testRunner.And("the debug inputs as", ((string)(null)), table992, "And ");
#line hidden
            TechTalk.SpecFlow.Table table993 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
#line 121
   testRunner.And("the debug output as", ((string)(null)), table993, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "[[@Person..Score]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant0()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("1", "[[@Person..Score]]", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant1()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("2", "@", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant2()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("3", "@.", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@()")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant3()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("4", "@()", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@().")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant4()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("5", "@().", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@.Field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant5()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("6", "@.Field", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@Object.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant6()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("7", "@Object.", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant7()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("8", "@1", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@1.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant8()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("9", "@1.", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@1.1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant9()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("10", "@1.1", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@Rec1.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant10()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("11", "@Rec1.", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@Rec1.1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant11()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("12", "@Rec1.1", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@1Rec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant12()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("13", "@1Rec", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "14")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@Rec1.#Field#")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant13()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("14", "@Rec1.#Field#", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 14")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 14")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@Rec1.1Field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant14()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("15", "@Rec1.1Field", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "16")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@Var;iable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant15()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("16", "@Var;iable", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 16")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 16")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "17")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@(Rec1@)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant16()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("17", "@(Rec1@)", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 17")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 17")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "18")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "[[@(Rec1@)]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant17()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("18", "[[@(Rec1@)]]", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 18")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 18")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "19")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@(Rec)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant18()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("19", "@(Rec)", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object: Variant 19")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 19")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:no", "12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:var", "@;;;;p")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "AN")]
        public virtual void AssignAValueToAnInvalidJsonObject_Variant19()
        {
#line 114
this.AssignAValueToAnInvalidJsonObject("12", "@;;;;p", "AN", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign an invalid value to a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAnInvalidValueToAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign an invalid value to a json object", ((string[])(null)));
#line 146
this.ScenarioSetup(scenarioInfo);
#line 147
 testRunner.Given("I assign the value \"[[@Person..Score]]\" to a json object \"[[@Person..Score]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 148
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 150
 testRunner.And("the execution has \"parse error\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign multiple json variables to a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignMultipleJsonVariablesToAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign multiple json variables to a json object", ((string[])(null)));
#line 152
this.ScenarioSetup(scenarioInfo);
#line 153
 testRunner.Given("I assign the value \"Bob\" to a json object \"[[@Person.FirstName]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 154
 testRunner.And("I assign the value \"Smith\" to a json object \"[[@Person.Surname]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 155
 testRunner.And("I assign the value \"[[@Person.FirstName]][[@Person.Surname]]\" to a json object \"[" +
                    "[@Person.FullName]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 156
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 157
 testRunner.Then("the json object \"[[@Person.FirstName]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 158
 testRunner.And("the json object \"[[@Person.Surname]]\" equals \"Smith\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 159
 testRunner.And("the value of \"[[@Person.FullName]]\" equals BobSmith", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 160
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table994 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table994.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] =",
                        "Bob"});
            table994.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] =",
                        "Smith"});
            table994.AddRow(new string[] {
                        "3",
                        "[[@Person.FullName]] =",
                        "[[@Person.FirstName]][[@Person.Surname]] = BobSmith"});
#line 161
 testRunner.And("the debug inputs as", ((string)(null)), table994, "And ");
#line hidden
            TechTalk.SpecFlow.Table table995 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table995.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] = Bob"});
            table995.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] = Smith"});
            table995.AddRow(new string[] {
                        "3",
                        "[[@Person.FullName]]  = BobSmith"});
#line 166
 testRunner.And("the debug output as", ((string)(null)), table995, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign multiple json variables to a json object with a literal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignMultipleJsonVariablesToAJsonObjectWithALiteral()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign multiple json variables to a json object with a literal", ((string[])(null)));
#line 172
this.ScenarioSetup(scenarioInfo);
#line 173
 testRunner.Given("I assign the value \"Bob\" to a json object \"[[@Person.FirstName]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 174
 testRunner.And("I assign the value \"Smith\" to a json object \"[[@Person.Surname]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 175
 testRunner.And("I assign the value \"[[@Person.FirstName]] the killa [[@Person.Surname]]\" to a jso" +
                    "n object \"[[@Person.FullName]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 177
 testRunner.Then("the json object \"[[@Person.FirstName]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 178
 testRunner.And("the json object \"[[@Person.Surname]]\" equals \"Smith\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
 testRunner.And("the value of \"[[@Person.FullName]]\" equals Bob the killa Smith", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 180
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table996 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table996.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] =",
                        "Bob"});
            table996.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] =",
                        "Smith"});
            table996.AddRow(new string[] {
                        "3",
                        "[[@Person.FullName]] =",
                        "[[@Person.FirstName]] the killa [[@Person.Surname]] = Bob the killa Smith"});
#line 181
 testRunner.And("the debug inputs as", ((string)(null)), table996, "And ");
#line hidden
            TechTalk.SpecFlow.Table table997 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table997.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] = Bob"});
            table997.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] = Smith"});
            table997.AddRow(new string[] {
                        "3",
                        "[[@Person.FullName]]  = Bob the killa Smith"});
#line 186
 testRunner.And("the debug output as", ((string)(null)), table997, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign values to a json object array within a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignValuesToAJsonObjectArrayWithinAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign values to a json object array within a json object", ((string[])(null)));
#line 192
this.ScenarioSetup(scenarioInfo);
#line 193
 testRunner.Given("I assign the value \"11\" to a json object \"[[@Person.Score(1)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 194
 testRunner.And("I assign the value \"22\" to a json object \"[[@Person.Score(2)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
 testRunner.And("I assign the value \"33\" to a json object \"[[@Person.Score(3)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 196
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 197
 testRunner.Then("the json object \"[[@Person.Score(1)]]\" equals \"11\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 198
 testRunner.And("the json object \"[[@Person.Score(2)]]\" equals \"22\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 199
 testRunner.And("the json object \"[[@Person.Score(3)]]\" equals \"33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table998 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table998.AddRow(new string[] {
                        "1",
                        "[[@Person.Score(1)]] =",
                        "11"});
            table998.AddRow(new string[] {
                        "2",
                        "[[@Person.Score(2)]] =",
                        "22"});
            table998.AddRow(new string[] {
                        "3",
                        "[[@Person.Score(3)]] =",
                        "33"});
#line 201
 testRunner.And("the debug inputs as", ((string)(null)), table998, "And ");
#line hidden
            TechTalk.SpecFlow.Table table999 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table999.AddRow(new string[] {
                        "1",
                        "[[@Person.Score(1)]] = 11"});
            table999.AddRow(new string[] {
                        "2",
                        "[[@Person.Score(2)]] = 22"});
            table999.AddRow(new string[] {
                        "3",
                        "[[@Person.Score(3)]] = 33"});
#line 206
 testRunner.And("the debug output as", ((string)(null)), table999, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign values to a json object array")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignValuesToAJsonObjectArray()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign values to a json object array", ((string[])(null)));
#line 212
this.ScenarioSetup(scenarioInfo);
#line 213
 testRunner.Given("I assign the value \"11\" to a json object \"[[@Score(1)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 214
 testRunner.And("I assign the value \"22\" to a json object \"[[@Score(2)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
 testRunner.And("I assign the value \"33\" to a json object \"[[@Score(3)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 217
 testRunner.Then("the json object \"[[@Score(1)]]\" equals \"11\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 218
 testRunner.And("the json object \"[[@Score(2)]]\" equals \"22\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
 testRunner.And("the json object \"[[@Score(3)]]\" equals \"33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1000 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1000.AddRow(new string[] {
                        "1",
                        "[[@Score(1)]] =",
                        "11"});
            table1000.AddRow(new string[] {
                        "2",
                        "[[@Score(2)]] =",
                        "22"});
            table1000.AddRow(new string[] {
                        "3",
                        "[[@Score(3)]] =",
                        "33"});
#line 221
 testRunner.And("the debug inputs as", ((string)(null)), table1000, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1001 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1001.AddRow(new string[] {
                        "1",
                        "[[@Score(1)]] = 11"});
            table1001.AddRow(new string[] {
                        "2",
                        "[[@Score(2)]] = 22"});
            table1001.AddRow(new string[] {
                        "3",
                        "[[@Score(3)]] = 33"});
#line 226
 testRunner.And("the debug output as", ((string)(null)), table1001, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to all elements of a json object array within a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAValueToAllElementsOfAJsonObjectArrayWithinAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a value to all elements of a json object array within a json object", ((string[])(null)));
#line 232
this.ScenarioSetup(scenarioInfo);
#line 233
 testRunner.Given("I assign the value \"11\" to a json object \"[[@Person.Score(1)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 234
 testRunner.And("I assign the value \"22\" to a json object \"[[@Person.Score(2)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
 testRunner.And("I assign the value \"33\" to a json object \"[[@Person.Score(3)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.And("I assign the value \"44\" to a json object \"[[@Person.Score(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 237
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 238
 testRunner.Then("the json object \"[[@Person.Score(1)]]\" equals \"44\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 239
 testRunner.And("the json object \"[[@Person.Score(2)]]\" equals \"44\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 240
 testRunner.And("the json object \"[[@Person.Score(3)]]\" equals \"44\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 241
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1002 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1002.AddRow(new string[] {
                        "1",
                        "[[@Person.Score(1)]] =",
                        "11"});
            table1002.AddRow(new string[] {
                        "2",
                        "[[@Person.Score(2)]] =",
                        "22"});
            table1002.AddRow(new string[] {
                        "3",
                        "[[@Person.Score(3)]] =",
                        "33"});
            table1002.AddRow(new string[] {
                        "4",
                        "[[@Person.Score(*)]] =",
                        "44"});
#line 242
 testRunner.And("the debug inputs as", ((string)(null)), table1002, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1003 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1003.AddRow(new string[] {
                        "1",
                        "[[@Person.Score(1)]] = 11"});
            table1003.AddRow(new string[] {
                        "2",
                        "[[@Person.Score(2)]] = 22"});
            table1003.AddRow(new string[] {
                        "3",
                        "[[@Person.Score(3)]] = 33"});
            table1003.AddRow(new string[] {
                        "4",
                        "[[@Person.Score(1)]] = 44"});
            table1003.AddRow(new string[] {
                        "",
                        "[[@Person.Score(2)]] = 44"});
            table1003.AddRow(new string[] {
                        "",
                        "[[@Person.Score(3)]] = 44"});
#line 248
 testRunner.And("the debug output as", ((string)(null)), table1003, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to all elements of a json object array")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAValueToAllElementsOfAJsonObjectArray()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a value to all elements of a json object array", ((string[])(null)));
#line 257
this.ScenarioSetup(scenarioInfo);
#line 258
 testRunner.Given("I assign the value \"11\" to a json object \"[[@Score(1)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 259
 testRunner.And("I assign the value \"22\" to a json object \"[[@Score(2)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 260
 testRunner.And("I assign the value \"33\" to a json object \"[[@Score(3)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 261
 testRunner.And("I assign the value \"44\" to a json object \"[[@Score(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 262
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 263
 testRunner.Then("the json object \"[[@Score(1)]]\" equals \"44\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 264
 testRunner.And("the json object \"[[@Score(2)]]\" equals \"44\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 265
 testRunner.And("the json object \"[[@Score(3)]]\" equals \"44\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 266
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1004 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1004.AddRow(new string[] {
                        "1",
                        "[[@Score(1)]] =",
                        "11"});
            table1004.AddRow(new string[] {
                        "2",
                        "[[@Score(2)]] =",
                        "22"});
            table1004.AddRow(new string[] {
                        "3",
                        "[[@Score(3)]] =",
                        "33"});
            table1004.AddRow(new string[] {
                        "4",
                        "[[@Score(*)]] =",
                        "44"});
#line 267
 testRunner.And("the debug inputs as", ((string)(null)), table1004, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1005 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1005.AddRow(new string[] {
                        "1",
                        "[[@Score(1)]] = 11"});
            table1005.AddRow(new string[] {
                        "2",
                        "[[@Score(2)]] = 22"});
            table1005.AddRow(new string[] {
                        "3",
                        "[[@Score(3)]] = 33"});
            table1005.AddRow(new string[] {
                        "4",
                        "[[@Score(1)]] = 44"});
            table1005.AddRow(new string[] {
                        "",
                        "[[@Score(2)]] = 44"});
            table1005.AddRow(new string[] {
                        "",
                        "[[@Score(3)]] = 44"});
#line 273
 testRunner.And("the debug output as", ((string)(null)), table1005, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to the end of a json object array within a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAValueToTheEndOfAJsonObjectArrayWithinAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a value to the end of a json object array within a json object", ((string[])(null)));
#line 282
this.ScenarioSetup(scenarioInfo);
#line 283
 testRunner.Given("I assign the value \"11\" to a json object \"[[@Person.Score()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 284
 testRunner.And("I assign the value \"22\" to a json object \"[[@Person.Score()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 285
 testRunner.And("I assign the value \"33\" to a json object \"[[@Person.Score()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 286
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 287
 testRunner.Then("the json object \"[[@Person.Score(1)]]\" equals \"11\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 288
 testRunner.And("the json object \"[[@Person.Score(2)]]\" equals \"22\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 289
 testRunner.And("the json object \"[[@Person.Score(3)]]\" equals \"33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 290
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1006 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1006.AddRow(new string[] {
                        "1",
                        "[[@Person.Score()]] =",
                        "11"});
            table1006.AddRow(new string[] {
                        "2",
                        "[[@Person.Score()]] =",
                        "22"});
            table1006.AddRow(new string[] {
                        "3",
                        "[[@Person.Score()]] =",
                        "33"});
#line 291
 testRunner.And("the debug inputs as", ((string)(null)), table1006, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1007 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1007.AddRow(new string[] {
                        "1",
                        "[[@Person.Score()]] = 11"});
            table1007.AddRow(new string[] {
                        "2",
                        "[[@Person.Score()]] = 22"});
            table1007.AddRow(new string[] {
                        "3",
                        "[[@Person.Score()]] = 33"});
#line 296
 testRunner.And("the debug output as", ((string)(null)), table1007, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to a new json object array within a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAValueToANewJsonObjectArrayWithinAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a value to a new json object array within a json object", ((string[])(null)));
#line 302
this.ScenarioSetup(scenarioInfo);
#line 303
 testRunner.Given("I assign the value \"11\" to a json object \"[[@Person.Score1()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 304
 testRunner.And("I assign the value \"22\" to a json object \"[[@Person.Score2()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 305
 testRunner.And("I assign the value \"33\" to a json object \"[[@Person.Score3()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 306
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 307
 testRunner.Then("the json object \"[[@Person.Score1(1)]]\" equals \"11\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 308
 testRunner.And("the json object \"[[@Person.Score2(1)]]\" equals \"22\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 309
 testRunner.And("the json object \"[[@Person.Score3(1)]]\" equals \"33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 310
    testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1008 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1008.AddRow(new string[] {
                        "1",
                        "[[@Person.Score1()]] =",
                        "11"});
            table1008.AddRow(new string[] {
                        "2",
                        "[[@Person.Score2()]] =",
                        "22"});
            table1008.AddRow(new string[] {
                        "3",
                        "[[@Person.Score3()]] =",
                        "33"});
#line 311
    testRunner.And("the debug inputs as", ((string)(null)), table1008, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1009 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1009.AddRow(new string[] {
                        "1",
                        "[[@Person.Score1()]] = 11"});
            table1009.AddRow(new string[] {
                        "2",
                        "[[@Person.Score2()]] = 22"});
            table1009.AddRow(new string[] {
                        "3",
                        "[[@Person.Score3()]] = 33"});
#line 316
    testRunner.And("the debug output as", ((string)(null)), table1009, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a json variable with a calculate expression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAJsonVariableWithACalculateExpression()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a json variable with a calculate expression", ((string[])(null)));
#line 322
this.ScenarioSetup(scenarioInfo);
#line 323
 testRunner.Given("I assign the value \"=SUM(1,2,3)+1\" to a json object \"[[@Person.Score]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 324
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 325
 testRunner.Then("the json object \"[[@Person.Score]]\" equals \"7\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 326
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1010 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1010.AddRow(new string[] {
                        "1",
                        "[[@Person.Score]] =",
                        "SUM(1,2,3)+1"});
#line 327
 testRunner.And("the debug inputs as", ((string)(null)), table1010, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1011 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1011.AddRow(new string[] {
                        "1",
                        "[[@Person.Score]] = 7"});
#line 330
 testRunner.And("the debug output as", ((string)(null)), table1011, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a json variable with a calculate expression using json objects")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAJsonVariableWithACalculateExpressionUsingJsonObjects()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a json variable with a calculate expression using json objects", ((string[])(null)));
#line 334
this.ScenarioSetup(scenarioInfo);
#line 335
 testRunner.Given("I assign the value \"1\" to a json object \"[[@Person.Score(1)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 336
 testRunner.And("I assign the value \"2\" to a json object \"[[@Person.Score(2)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 337
 testRunner.And("I assign the value \"3\" to a json object \"[[@Person.Score(3)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 338
 testRunner.And("I assign the value \"=SUM([[@Person.Score(*)]])+1\" to a json object \"[[@Person.Tot" +
                    "alScore]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 339
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 340
 testRunner.Then("the json object \"[[@Person.TotalScore]]\" equals \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 341
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1012 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1012.AddRow(new string[] {
                        "1",
                        "[[@Person.Score(1)]] =",
                        "1"});
            table1012.AddRow(new string[] {
                        "2",
                        "[[@Person.Score(2)]] =",
                        "2"});
            table1012.AddRow(new string[] {
                        "3",
                        "[[@Person.Score(3)]] =",
                        "3"});
            table1012.AddRow(new string[] {
                        "4",
                        "[[@Person.TotalScore]] =",
                        "SUM([[@Person.Score(*)]])+1 =SUM(1)+1"});
            table1012.AddRow(new string[] {
                        "",
                        "",
                        "SUM([[@Person.Score(*)]])+1 =SUM(2)+1"});
            table1012.AddRow(new string[] {
                        "",
                        "",
                        "SUM([[@Person.Score(*)]])+1 =SUM(3)+1"});
#line 342
 testRunner.And("the debug inputs as", ((string)(null)), table1012, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1013 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1013.AddRow(new string[] {
                        "1",
                        "[[@Person.Score(1)]] = 1"});
            table1013.AddRow(new string[] {
                        "2",
                        "[[@Person.Score(2)]] = 2"});
            table1013.AddRow(new string[] {
                        "3",
                        "[[@Person.Score(3)]] = 3"});
            table1013.AddRow(new string[] {
                        "4",
                        "[[@Person.TotalScore]] = 4"});
#line 350
 testRunner.And("the debug output as", ((string)(null)), table1013, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a json variable with a calculate expression using json array")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAJsonVariableWithACalculateExpressionUsingJsonArray()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a json variable with a calculate expression using json array", ((string[])(null)));
#line 357
this.ScenarioSetup(scenarioInfo);
#line 358
 testRunner.Given("I assign the value \"1\" to a json object \"[[@Person.Score(1).val]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 359
 testRunner.And("I assign the value \"2\" to a json object \"[[@Person.Score(2).val]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 360
 testRunner.And("I assign the value \"3\" to a json object \"[[@Person.Score(3).val]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 361
 testRunner.And("I assign the value \"=SUM([[@Person.Score(*).val]])+1\" to a json object \"[[@Person" +
                    ".TotalScore]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 362
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 363
 testRunner.Then("the json object \"[[@Person.TotalScore]]\" equals \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 364
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1014 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1014.AddRow(new string[] {
                        "1",
                        "[[@Person.Score(1).val]] =",
                        "1"});
            table1014.AddRow(new string[] {
                        "2",
                        "[[@Person.Score(2).val]] =",
                        "2"});
            table1014.AddRow(new string[] {
                        "3",
                        "[[@Person.Score(3).val]] =",
                        "3"});
            table1014.AddRow(new string[] {
                        "4",
                        "[[@Person.TotalScore]] =",
                        "SUM([[@Person.Score(1).val]])+1 =SUM(1)+1"});
            table1014.AddRow(new string[] {
                        "",
                        "",
                        "SUM([[@Person.Score(2).val]])+1 =SUM(2)+1"});
            table1014.AddRow(new string[] {
                        "",
                        "",
                        "SUM([[@Person.Score(3).val]])+1 =SUM(3)+1"});
#line 365
 testRunner.And("the debug inputs as", ((string)(null)), table1014, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1015 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1015.AddRow(new string[] {
                        "1",
                        "[[@Person.Score(1).val]] = 1"});
            table1015.AddRow(new string[] {
                        "2",
                        "[[@Person.Score(2).val]] = 2"});
            table1015.AddRow(new string[] {
                        "3",
                        "[[@Person.Score(3).val]] = 3"});
            table1015.AddRow(new string[] {
                        "4",
                        "[[@Person.TotalScore]] = 4"});
#line 373
 testRunner.And("the debug output as", ((string)(null)), table1015, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign two json and data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignTwoJsonAndData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign two json and data", ((string[])(null)));
#line 380
this.ScenarioSetup(scenarioInfo);
#line 381
 testRunner.Given("I assign the value 1 to a json object \"[[@rec.a(1)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 382
 testRunner.And("I assign the value 2 to a json object \"[[@rec.a(2)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 383
 testRunner.And("I assign the value \"Test[[@rec.a(1)]].Warewolf[[@rec.a(2)]]\" to a json object \"[[" +
                    "@Lr.a(1)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 384
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 385
 testRunner.Then("the value of \"[[@Lr.a(1)]]\" equals \"Test1.Warewolf2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 386
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1016 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1016.AddRow(new string[] {
                        "1",
                        "[[@rec.a(1)]] =",
                        "1"});
            table1016.AddRow(new string[] {
                        "2",
                        "[[@rec.a(2)]] =",
                        "2"});
            table1016.AddRow(new string[] {
                        "3",
                        "[[@Lr.a(1)]] =",
                        "Test[[@rec.a(1)]].Warewolf[[@rec.a(2)]] = Test1.Warewolf2"});
#line 387
 testRunner.And("the debug inputs as", ((string)(null)), table1016, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1017 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1017.AddRow(new string[] {
                        "1",
                        "[[@rec.a(1)]] = 1"});
            table1017.AddRow(new string[] {
                        "2",
                        "[[@rec.a(2)]] = 2"});
            table1017.AddRow(new string[] {
                        "3",
                        "[[@Lr.a(1)]]  = Test1.Warewolf2"});
#line 392
 testRunner.And("the debug output as", ((string)(null)), table1017, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign the value of a negative json index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignTheValueOfANegativeJsonIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign the value of a negative json index", ((string[])(null)));
#line 398
this.ScenarioSetup(scenarioInfo);
#line 399
 testRunner.Given("I assign the value 10 to a json object \"[[@rec.set()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 400
 testRunner.And("I assign the value \"[[@rec.set(-1)]]\" to a json object \"[[var]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 401
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 402
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a record set variable equal to a group calculation (sum)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignARecordSetVariableEqualToAGroupCalculationSum()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a record set variable equal to a group calculation (sum)", ((string[])(null)));
#line 404
this.ScenarioSetup(scenarioInfo);
#line 405
 testRunner.Given("I assign the value 30 to a json object \"[[@rec(1).a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 406
 testRunner.And("I assign the value 30 to a json object \"[[@rec(1).b]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 407
 testRunner.And("I assign the value \"=SUM([[@rec(1).a]],[[@rec(1).b]])\" to a json object \"[[@Resul" +
                    "t.a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 408
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 409
 testRunner.Then("the value of \"[[@Result.a]]\" equals \"60\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 410
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1018 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1018.AddRow(new string[] {
                        "1",
                        "[[@rec(1).a]]   =",
                        "30"});
            table1018.AddRow(new string[] {
                        "2",
                        "[[@rec(1).b]]   =",
                        "30"});
            table1018.AddRow(new string[] {
                        "3",
                        "[[@Result.a]] =",
                        "SUM([[@rec(1).a]],[[@rec(1).b]]) = SUM(30,30)"});
#line 411
 testRunner.And("the debug inputs as", ((string)(null)), table1018, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1019 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1019.AddRow(new string[] {
                        "1",
                        "[[@rec(1).a]] = 30"});
            table1019.AddRow(new string[] {
                        "2",
                        "[[@rec(1).b]] = 30"});
            table1019.AddRow(new string[] {
                        "3",
                        "[[@Result.a]] = 60"});
#line 416
 testRunner.And("the debug output as", ((string)(null)), table1019, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a variable equal to a group calculation with scalar and recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAVariableEqualToAGroupCalculationWithScalarAndRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a variable equal to a group calculation with scalar and recordset", ((string[])(null)));
#line 423
this.ScenarioSetup(scenarioInfo);
#line 424
 testRunner.Given("I assign the value 1 to a json object \"[[@a.b]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 425
 testRunner.And("I assign the value 2 to a json object \"[[@b.a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 426
 testRunner.And("I assign the value \"[[@a.b]]\" to a json object \"[[@rec(1).a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 427
 testRunner.And("I assign the value \"[[@b.a]]\" to a json object \"[[@rec(1).b]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 428
 testRunner.And("I assign the value \"=SUM([[@rec(1).a]],[[@rec(1).b]])\" to a json object \"[[@Resul" +
                    "t.a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 429
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 430
 testRunner.Then("the value of \"[[@Result.a]]\" equals \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 431
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1020 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1020.AddRow(new string[] {
                        "1",
                        "[[@a.b]]          =",
                        "1"});
            table1020.AddRow(new string[] {
                        "2",
                        "[[@b.a]]          =",
                        "2"});
            table1020.AddRow(new string[] {
                        "3",
                        "[[@rec(1).a]]   =",
                        "[[@a.b]] = 1"});
            table1020.AddRow(new string[] {
                        "4",
                        "[[@rec(1).b]]   =",
                        "[[@b.a]] = 2"});
            table1020.AddRow(new string[] {
                        "5",
                        "[[@Result.a]] =",
                        "SUM([[@rec(1).a]],[[@rec(1).b]]) = SUM(1,2)"});
#line 432
 testRunner.And("the debug inputs as", ((string)(null)), table1020, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1021 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1021.AddRow(new string[] {
                        "1",
                        "[[@a.b]] = 1"});
            table1021.AddRow(new string[] {
                        "2",
                        "[[@b.a]] = 2"});
            table1021.AddRow(new string[] {
                        "3",
                        "[[@rec(1).a]] = 1"});
            table1021.AddRow(new string[] {
                        "4",
                        "[[@rec(1).b]] = 2"});
            table1021.AddRow(new string[] {
                        "5",
                        "[[@Result.a]] = 3"});
#line 439
 testRunner.And("the debug output as", ((string)(null)), table1021, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a json string to json object variable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAJsonStringToJsonObjectVariable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a json string to json object variable", ((string[])(null)));
#line 447
this.ScenarioSetup(scenarioInfo);
#line 448
 testRunner.Given("I assign the string \"{\"Five\":\"5\"}\" to a json object \"[[@Numbers]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 449
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 450
 testRunner.Then("the value of \"[[@Numbers.Five]]\" equals \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a json string to json object variable has two records")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAJsonStringToJsonObjectVariableHasTwoRecords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a json string to json object variable has two records", ((string[])(null)));
#line 452
this.ScenarioSetup(scenarioInfo);
#line 453
 testRunner.Given("I assign the string \"{\"Five\":\"5\", \"Ten\":\"10\"}\" to a json object \"[[@Numbers]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 454
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 455
 testRunner.Then("the value of \"[[@Numbers.Five]]\" equals \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 456
 testRunner.Then("the value of \"[[@Numbers.Ten]]\" equals \"10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Evaluating recursive recordset variable in a group calculation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void EvaluatingRecursiveRecordsetVariableInAGroupCalculation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Evaluating recursive recordset variable in a group calculation", ((string[])(null)));
#line 458
this.ScenarioSetup(scenarioInfo);
#line 459
 testRunner.Given("I assign the value 1 to a json object \"[[@rec(1).a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 460
 testRunner.And("I assign the value \"rec(1).a\" to a json object \"[[@rec(1).b]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 461
 testRunner.And("I assign the value \"=sum(1+1)\" to a json object \"[[@Result.a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 462
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 463
 testRunner.Then("the value of \"[[@Result.a]]\" equals \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 464
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1022 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1022.AddRow(new string[] {
                        "1",
                        "[[@rec(1).a]]   =",
                        "1"});
            table1022.AddRow(new string[] {
                        "2",
                        "[[@rec(1).b]]   =",
                        "rec(1).a"});
            table1022.AddRow(new string[] {
                        "3",
                        "[[@Result.a]] =",
                        "sum(1+1)"});
#line 465
 testRunner.And("the debug inputs as", ((string)(null)), table1022, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1023 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1023.AddRow(new string[] {
                        "1",
                        "[[@rec(1).a]] = 1"});
            table1023.AddRow(new string[] {
                        "2",
                        "[[@rec(1).b]] = rec(1).a"});
            table1023.AddRow(new string[] {
                        "3",
                        "[[@Result.a]] =  2"});
#line 470
 testRunner.And("the debug output as", ((string)(null)), table1023, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Evaluating recursive invalid recordset variable in a group calculation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void EvaluatingRecursiveInvalidRecordsetVariableInAGroupCalculation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Evaluating recursive invalid recordset variable in a group calculation", ((string[])(null)));
#line 477
this.ScenarioSetup(scenarioInfo);
#line 478
 testRunner.Given("I assign the value 1 to a json object \"[[@rec(1).a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 479
 testRunner.And("I assign the value \"rec(1).a*\" to a json object \"[[@rec(1).b]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 480
 testRunner.And("I assign the value \"=[[[[@rec(1).b]]]]+1\" to a json object \"[[@Result.c]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 481
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 482
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
