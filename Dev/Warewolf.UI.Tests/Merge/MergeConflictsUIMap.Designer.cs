// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Warewolf.UI.Tests.Merge.MergeConflictsUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class MergeConflictsUIMap
    {
        
        #region Properties
        public MainWindow MainWindow
        {
            get
            {
                if ((this.mMainWindow == null))
                {
                    this.mMainWindow = new MainWindow();
                }
                return this.mMainWindow;
            }
        }
        #endregion
        
        #region Fields
        private MainWindow mMainWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MainWindow : WpfWindow
    {
        
        public MainWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.Name, "Warewolf", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public DockManager DockManager
        {
            get
            {
                if ((this.mDockManager == null))
                {
                    this.mDockManager = new DockManager(this);
                }
                return this.mDockManager;
            }
        }
        #endregion
        
        #region Fields
        private DockManager mDockManager;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class DockManager : WpfCustom
    {
        
        public DockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitPaneMiddle SplitPaneMiddle
        {
            get
            {
                if ((this.mSplitPaneMiddle == null))
                {
                    this.mSplitPaneMiddle = new SplitPaneMiddle(this);
                }
                return this.mSplitPaneMiddle;
            }
        }
        #endregion
        
        #region Fields
        private SplitPaneMiddle mSplitPaneMiddle;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SplitPaneMiddle : WpfCustom
    {
        
        public SplitPaneMiddle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabManSplitPane TabManSplitPane
        {
            get
            {
                if ((this.mTabManSplitPane == null))
                {
                    this.mTabManSplitPane = new TabManSplitPane(this);
                }
                return this.mTabManSplitPane;
            }
        }
        #endregion
        
        #region Fields
        private TabManSplitPane mTabManSplitPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class TabManSplitPane : WpfCustom
    {
        
        public TabManSplitPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SplitPane_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabMan TabMan
        {
            get
            {
                if ((this.mTabMan == null))
                {
                    this.mTabMan = new TabMan(this);
                }
                return this.mTabMan;
            }
        }
        #endregion
        
        #region Fields
        private TabMan mTabMan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class TabMan : WpfTabList
    {
        
        public TabMan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public MergeTab MergeTab
        {
            get
            {
                if ((this.mMergeTab == null))
                {
                    this.mMergeTab = new MergeTab(this);
                }
                return this.mMergeTab;
            }
        }
        #endregion
        
        #region Fields
        private MergeTab mMergeTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeTab : WpfTabPage
    {
        
        public MergeTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.MergeViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        
        public WpfText TabDescription
        {
            get
            {
                if ((this.mTabDescription == null))
                {
                    this.mTabDescription = new WpfText(this);
                    #region Search Criteria
                    this.mTabDescription.SearchProperties[WpfText.PropertyNames.Name] = "Merge Conflicts";
                    this.mTabDescription.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTabDescription;
            }
        }
        
        public WorkSurfaceContext WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCloseButton;
        
        private WpfText mTabDescription;
        
        private WorkSurfaceContext mWorkSurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class WorkSurfaceContext : WpfCustom
    {
        
        public WorkSurfaceContext(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ContentDockManager ContentDockManager
        {
            get
            {
                if ((this.mContentDockManager == null))
                {
                    this.mContentDockManager = new ContentDockManager(this);
                }
                return this.mContentDockManager;
            }
        }
        #endregion
        
        #region Fields
        private ContentDockManager mContentDockManager;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ContentDockManager : WpfCustom
    {
        
        public ContentDockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ContentDockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public MergeWorkflowView MergeWorkflowView
        {
            get
            {
                if ((this.mMergeWorkflowView == null))
                {
                    this.mMergeWorkflowView = new MergeWorkflowView(this);
                }
                return this.mMergeWorkflowView;
            }
        }
        #endregion
        
        #region Fields
        private MergeWorkflowView mMergeWorkflowView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeWorkflowView : WpfCustom
    {
        
        public MergeWorkflowView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.ClassName, "MergeWorkflowView", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public DesignerView DesignerView
        {
            get
            {
                if ((this.mDesignerView == null))
                {
                    this.mDesignerView = new DesignerView(this);
                }
                return this.mDesignerView;
            }
        }
        
        public WpfControl UIUI_GridSplitter_AutoIndicator
        {
            get
            {
                if ((this.mUIUI_GridSplitter_AutoIndicator == null))
                {
                    this.mUIUI_GridSplitter_AutoIndicator = new WpfControl(this);
                    #region Search Criteria
                    this.mUIUI_GridSplitter_AutoIndicator.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mUIUI_GridSplitter_AutoIndicator.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_GridSplitter_AutoID";
                    this.mUIUI_GridSplitter_AutoIndicator.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIUI_GridSplitter_AutoIndicator;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane mScrollViewerPane;
        
        private DesignerView mDesignerView;
        
        private WpfControl mUIUI_GridSplitter_AutoIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ScrollViewerPane : WpfPane
    {
        
        public ScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "MergeGridScrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariablesExpander VariablesExpander
        {
            get
            {
                if ((this.mVariablesExpander == null))
                {
                    this.mVariablesExpander = new VariablesExpander(this);
                }
                return this.mVariablesExpander;
            }
        }
        
        public WpfRadioButton RightSelectAndApplyWFRadioButton
        {
            get
            {
                if ((this.mRightSelectAndApplyWFRadioButton == null))
                {
                    this.mRightSelectAndApplyWFRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mRightSelectAndApplyWFRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DifferenceWorkflowRB_AutoID";
                    this.mRightSelectAndApplyWFRadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mRightSelectAndApplyWFRadioButton;
            }
        }
        
        public WpfRadioButton LeftSelectAndApplyWFRadioButton
        {
            get
            {
                if ((this.mLeftSelectAndApplyWFRadioButton == null))
                {
                    this.mLeftSelectAndApplyWFRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mLeftSelectAndApplyWFRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_CurrentWorkflowRB_AutoID";
                    this.mLeftSelectAndApplyWFRadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mLeftSelectAndApplyWFRadioButton;
            }
        }
        
        public ConflictsTree ConflictsTree
        {
            get
            {
                if ((this.mConflictsTree == null))
                {
                    this.mConflictsTree = new ConflictsTree(this);
                }
                return this.mConflictsTree;
            }
        }
        #endregion
        
        #region Fields
        private VariablesExpander mVariablesExpander;
        
        private WpfRadioButton mRightSelectAndApplyWFRadioButton;
        
        private WpfRadioButton mLeftSelectAndApplyWFRadioButton;
        
        private ConflictsTree mConflictsTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class VariablesExpander : WpfExpander
    {
        
        public VariablesExpander(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "UI_VariablesExpander_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public VariablesHeader VariablesHeader
        {
            get
            {
                if ((this.mVariablesHeader == null))
                {
                    this.mVariablesHeader = new VariablesHeader(this);
                }
                return this.mVariablesHeader;
            }
        }
        
        public UIUI_CurrentVariablesDCustom UIUI_CurrentVariablesDCustom
        {
            get
            {
                if ((this.mUIUI_CurrentVariablesDCustom == null))
                {
                    this.mUIUI_CurrentVariablesDCustom = new UIUI_CurrentVariablesDCustom(this);
                }
                return this.mUIUI_CurrentVariablesDCustom;
            }
        }
        
        public UIUI_DifferenceVariablesDCustom UIUI_DifferenceVariablesDCustom
        {
            get
            {
                if ((this.mUIUI_DifferenceVariablesDCustom == null))
                {
                    this.mUIUI_DifferenceVariablesDCustom = new UIUI_DifferenceVariablesDCustom(this);
                }
                return this.mUIUI_DifferenceVariablesDCustom;
            }
        }
        
        public MergeButton MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private VariablesHeader mVariablesHeader;
        
        private UIUI_CurrentVariablesDCustom mUIUI_CurrentVariablesDCustom;
        
        private UIUI_DifferenceVariablesDCustom mUIUI_DifferenceVariablesDCustom;
        
        private MergeButton mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class VariablesHeader : WpfButton
    {
        
        public VariablesHeader(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton LeftVariablesRadio
        {
            get
            {
                if ((this.mLeftVariablesRadio == null))
                {
                    this.mLeftVariablesRadio = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mLeftVariablesRadio.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_CurrentVariablesRB_AutoID";
                    this.mLeftVariablesRadio.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mLeftVariablesRadio;
            }
        }
        
        public WpfText LeftVariablesText
        {
            get
            {
                if ((this.mLeftVariablesText == null))
                {
                    this.mLeftVariablesText = new WpfText(this);
                    #region Search Criteria
                    this.mLeftVariablesText.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_CurrentVariablesText_AutoID";
                    this.mLeftVariablesText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mLeftVariablesText;
            }
        }
        
        public WpfRadioButton DifferenceVariableRadioButton
        {
            get
            {
                if ((this.mDifferenceVariableRadioButton == null))
                {
                    this.mDifferenceVariableRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDifferenceVariableRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DifferenceVariablesRB_AutoID";
                    this.mDifferenceVariableRadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDifferenceVariableRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mLeftVariablesRadio;
        
        private WpfText mLeftVariablesText;
        
        private WpfRadioButton mDifferenceVariableRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUI_CurrentVariablesDCustom : WpfCustom
    {
        
        public UIUI_CurrentVariablesDCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataListView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_CurrentVariablesDataListView_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIUI_VariableTreeView_Tree UIUI_VariableTreeView_Tree
        {
            get
            {
                if ((this.mUIUI_VariableTreeView_Tree == null))
                {
                    this.mUIUI_VariableTreeView_Tree = new UIUI_VariableTreeView_Tree(this);
                }
                return this.mUIUI_VariableTreeView_Tree;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_VariableTreeView_Tree mUIUI_VariableTreeView_Tree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUI_VariableTreeView_Tree : WpfTree
    {
        
        public UIUI_VariableTreeView_Tree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "UI_VariableTreeView_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIVariableTreeItem UIVariableTreeItem
        {
            get
            {
                if ((this.mUIVariableTreeItem == null))
                {
                    this.mUIVariableTreeItem = new UIVariableTreeItem(this);
                }
                return this.mUIVariableTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIVariableTreeItem mUIVariableTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVariableTreeItem : WpfTreeItem
    {
        
        public UIVariableTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Variable";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIATreeItem UIATreeItem
        {
            get
            {
                if ((this.mUIATreeItem == null))
                {
                    this.mUIATreeItem = new UIATreeItem(this);
                }
                return this.mUIATreeItem;
            }
        }
        
        public UIBTreeItem UIBTreeItem
        {
            get
            {
                if ((this.mUIBTreeItem == null))
                {
                    this.mUIBTreeItem = new UIBTreeItem(this);
                }
                return this.mUIBTreeItem;
            }
        }
        
        public UICTreeItem3 UICTreeItem3
        {
            get
            {
                if ((this.mUICTreeItem3 == null))
                {
                    this.mUICTreeItem3 = new UICTreeItem3(this);
                }
                return this.mUICTreeItem3;
            }
        }
        
        public UIDTreeItem UIDTreeItem
        {
            get
            {
                if ((this.mUIDTreeItem == null))
                {
                    this.mUIDTreeItem = new UIDTreeItem(this);
                }
                return this.mUIDTreeItem;
            }
        }
        
        public UIETreeItem UIETreeItem
        {
            get
            {
                if ((this.mUIETreeItem == null))
                {
                    this.mUIETreeItem = new UIETreeItem(this);
                }
                return this.mUIETreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIATreeItem mUIATreeItem;
        
        private UIBTreeItem mUIBTreeItem;
        
        private UICTreeItem3 mUICTreeItem3;
        
        private UIDTreeItem mUIDTreeItem;
        
        private UIETreeItem mUIETreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIATreeItem : WpfTreeItem
    {
        
        public UIATreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "A";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIAPane UIAPane
        {
            get
            {
                if ((this.mUIAPane == null))
                {
                    this.mUIAPane = new UIAPane(this);
                }
                return this.mUIAPane;
            }
        }
        #endregion
        
        #region Fields
        private UIAPane mUIAPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAPane : WpfPane
    {
        
        public UIAPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIUI_NameTextBox_AutoIEdit
        {
            get
            {
                if ((this.mUIUI_NameTextBox_AutoIEdit == null))
                {
                    this.mUIUI_NameTextBox_AutoIEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUI_NameTextBox_AutoIEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mUIUI_NameTextBox_AutoIEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIUI_NameTextBox_AutoIEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIUI_NameTextBox_AutoIEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIUI_NameTextBox_AutoIEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBTreeItem : WpfTreeItem
    {
        
        public UIBTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "B";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIBPane UIBPane
        {
            get
            {
                if ((this.mUIBPane == null))
                {
                    this.mUIBPane = new UIBPane(this);
                }
                return this.mUIBPane;
            }
        }
        #endregion
        
        #region Fields
        private UIBPane mUIBPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBPane : WpfPane
    {
        
        public UIBPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIUI_NameTextBox_AutoIEdit
        {
            get
            {
                if ((this.mUIUI_NameTextBox_AutoIEdit == null))
                {
                    this.mUIUI_NameTextBox_AutoIEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUI_NameTextBox_AutoIEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mUIUI_NameTextBox_AutoIEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIUI_NameTextBox_AutoIEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIUI_NameTextBox_AutoIEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIUI_NameTextBox_AutoIEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICTreeItem3 : WpfTreeItem
    {
        
        public UICTreeItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "C";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UICPane UICPane
        {
            get
            {
                if ((this.mUICPane == null))
                {
                    this.mUICPane = new UICPane(this);
                }
                return this.mUICPane;
            }
        }
        #endregion
        
        #region Fields
        private UICPane mUICPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICPane : WpfPane
    {
        
        public UICPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIUI_NameTextBox_AutoIEdit
        {
            get
            {
                if ((this.mUIUI_NameTextBox_AutoIEdit == null))
                {
                    this.mUIUI_NameTextBox_AutoIEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUI_NameTextBox_AutoIEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mUIUI_NameTextBox_AutoIEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIUI_NameTextBox_AutoIEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIUI_NameTextBox_AutoIEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIUI_NameTextBox_AutoIEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDTreeItem : WpfTreeItem
    {
        
        public UIDTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "D";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIDPane UIDPane
        {
            get
            {
                if ((this.mUIDPane == null))
                {
                    this.mUIDPane = new UIDPane(this);
                }
                return this.mUIDPane;
            }
        }
        #endregion
        
        #region Fields
        private UIDPane mUIDPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDPane : WpfPane
    {
        
        public UIDPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIUI_NameTextBox_AutoIEdit
        {
            get
            {
                if ((this.mUIUI_NameTextBox_AutoIEdit == null))
                {
                    this.mUIUI_NameTextBox_AutoIEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUI_NameTextBox_AutoIEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mUIUI_NameTextBox_AutoIEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIUI_NameTextBox_AutoIEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIUI_NameTextBox_AutoIEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIUI_NameTextBox_AutoIEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIETreeItem : WpfTreeItem
    {
        
        public UIETreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "E";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIEPane UIEPane
        {
            get
            {
                if ((this.mUIEPane == null))
                {
                    this.mUIEPane = new UIEPane(this);
                }
                return this.mUIEPane;
            }
        }
        #endregion
        
        #region Fields
        private UIEPane mUIEPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEPane : WpfPane
    {
        
        public UIEPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIUI_NameTextBox_AutoIEdit
        {
            get
            {
                if ((this.mUIUI_NameTextBox_AutoIEdit == null))
                {
                    this.mUIUI_NameTextBox_AutoIEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUI_NameTextBox_AutoIEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mUIUI_NameTextBox_AutoIEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIUI_NameTextBox_AutoIEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIUI_NameTextBox_AutoIEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIUI_NameTextBox_AutoIEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUI_DifferenceVariablesDCustom : WpfCustom
    {
        
        public UIUI_DifferenceVariablesDCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataListView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_DifferenceVariablesDataListView_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIUI_VariableTreeView_Tree1 UIUI_VariableTreeView_Tree
        {
            get
            {
                if ((this.mUIUI_VariableTreeView_Tree == null))
                {
                    this.mUIUI_VariableTreeView_Tree = new UIUI_VariableTreeView_Tree1(this);
                }
                return this.mUIUI_VariableTreeView_Tree;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_VariableTreeView_Tree1 mUIUI_VariableTreeView_Tree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUI_VariableTreeView_Tree1 : WpfTree
    {
        
        public UIUI_VariableTreeView_Tree1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "UI_VariableTreeView_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIVariableTreeItem1 UIVariableTreeItem
        {
            get
            {
                if ((this.mUIVariableTreeItem == null))
                {
                    this.mUIVariableTreeItem = new UIVariableTreeItem1(this);
                }
                return this.mUIVariableTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIVariableTreeItem1 mUIVariableTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVariableTreeItem1 : WpfTreeItem
    {
        
        public UIVariableTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Variable";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIATreeItem1 UIATreeItem
        {
            get
            {
                if ((this.mUIATreeItem == null))
                {
                    this.mUIATreeItem = new UIATreeItem1(this);
                }
                return this.mUIATreeItem;
            }
        }
        
        public UIBTreeItem1 UIBTreeItem
        {
            get
            {
                if ((this.mUIBTreeItem == null))
                {
                    this.mUIBTreeItem = new UIBTreeItem1(this);
                }
                return this.mUIBTreeItem;
            }
        }
        
        public UICTreeItem31 UICTreeItem3
        {
            get
            {
                if ((this.mUICTreeItem3 == null))
                {
                    this.mUICTreeItem3 = new UICTreeItem31(this);
                }
                return this.mUICTreeItem3;
            }
        }
        
        public UIDTreeItem1 UIDTreeItem
        {
            get
            {
                if ((this.mUIDTreeItem == null))
                {
                    this.mUIDTreeItem = new UIDTreeItem1(this);
                }
                return this.mUIDTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIATreeItem1 mUIATreeItem;
        
        private UIBTreeItem1 mUIBTreeItem;
        
        private UICTreeItem31 mUICTreeItem3;
        
        private UIDTreeItem1 mUIDTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIATreeItem1 : WpfTreeItem
    {
        
        public UIATreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "A";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIAPane1 UIAPane
        {
            get
            {
                if ((this.mUIAPane == null))
                {
                    this.mUIAPane = new UIAPane1(this);
                }
                return this.mUIAPane;
            }
        }
        #endregion
        
        #region Fields
        private UIAPane1 mUIAPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAPane1 : WpfPane
    {
        
        public UIAPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIUI_NameTextBox_AutoIEdit
        {
            get
            {
                if ((this.mUIUI_NameTextBox_AutoIEdit == null))
                {
                    this.mUIUI_NameTextBox_AutoIEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUI_NameTextBox_AutoIEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mUIUI_NameTextBox_AutoIEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIUI_NameTextBox_AutoIEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIUI_NameTextBox_AutoIEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIUI_NameTextBox_AutoIEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBTreeItem1 : WpfTreeItem
    {
        
        public UIBTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "B";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIBPane1 UIBPane
        {
            get
            {
                if ((this.mUIBPane == null))
                {
                    this.mUIBPane = new UIBPane1(this);
                }
                return this.mUIBPane;
            }
        }
        #endregion
        
        #region Fields
        private UIBPane1 mUIBPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBPane1 : WpfPane
    {
        
        public UIBPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIUI_NameTextBox_AutoIEdit
        {
            get
            {
                if ((this.mUIUI_NameTextBox_AutoIEdit == null))
                {
                    this.mUIUI_NameTextBox_AutoIEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUI_NameTextBox_AutoIEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mUIUI_NameTextBox_AutoIEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIUI_NameTextBox_AutoIEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIUI_NameTextBox_AutoIEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIUI_NameTextBox_AutoIEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICTreeItem31 : WpfTreeItem
    {
        
        public UICTreeItem31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "C";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UICPane1 UICPane
        {
            get
            {
                if ((this.mUICPane == null))
                {
                    this.mUICPane = new UICPane1(this);
                }
                return this.mUICPane;
            }
        }
        #endregion
        
        #region Fields
        private UICPane1 mUICPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICPane1 : WpfPane
    {
        
        public UICPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIUI_NameTextBox_AutoIEdit
        {
            get
            {
                if ((this.mUIUI_NameTextBox_AutoIEdit == null))
                {
                    this.mUIUI_NameTextBox_AutoIEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUI_NameTextBox_AutoIEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mUIUI_NameTextBox_AutoIEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIUI_NameTextBox_AutoIEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIUI_NameTextBox_AutoIEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIUI_NameTextBox_AutoIEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDTreeItem1 : WpfTreeItem
    {
        
        public UIDTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "D";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIDPane1 UIDPane
        {
            get
            {
                if ((this.mUIDPane == null))
                {
                    this.mUIDPane = new UIDPane1(this);
                }
                return this.mUIDPane;
            }
        }
        #endregion
        
        #region Fields
        private UIDPane1 mUIDPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDPane1 : WpfPane
    {
        
        public UIDPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIUI_NameTextBox_AutoIEdit
        {
            get
            {
                if ((this.mUIUI_NameTextBox_AutoIEdit == null))
                {
                    this.mUIUI_NameTextBox_AutoIEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUI_NameTextBox_AutoIEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mUIUI_NameTextBox_AutoIEdit.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIUI_NameTextBox_AutoIEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIUI_NameTextBox_AutoIEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIUI_NameTextBox_AutoIEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton : WpfButton
    {
        
        public MergeButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton KeepCurrentCheckbox
        {
            get
            {
                if ((this.mKeepCurrentCheckbox == null))
                {
                    this.mKeepCurrentCheckbox = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mKeepCurrentCheckbox.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_CurrentVariablesRB_AutoID";
                    this.mKeepCurrentCheckbox.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mKeepCurrentCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mKeepCurrentCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ConflictsTree : WpfTree
    {
        
        public ConflictsTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "UI_ConflictsTreeView_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeTreeItem MergeTreeItem
        {
            get
            {
                if ((this.mMergeTreeItem == null))
                {
                    this.mMergeTreeItem = new MergeTreeItem(this);
                }
                return this.mMergeTreeItem;
            }
        }
        
        public MergeTreeItem2 MergeTreeItem2
        {
            get
            {
                if ((this.mMergeTreeItem2 == null))
                {
                    this.mMergeTreeItem2 = new MergeTreeItem2(this);
                }
                return this.mMergeTreeItem2;
            }
        }
        
        public MergeTreeItem3 MergeTreeItem3
        {
            get
            {
                if ((this.mMergeTreeItem3 == null))
                {
                    this.mMergeTreeItem3 = new MergeTreeItem3(this);
                }
                return this.mMergeTreeItem3;
            }
        }
        
        public MergeTreeItem4 MergeTreeItem4
        {
            get
            {
                if ((this.mMergeTreeItem4 == null))
                {
                    this.mMergeTreeItem4 = new MergeTreeItem4(this);
                }
                return this.mMergeTreeItem4;
            }
        }
        
        public MergeTreeItem5 MergeTreeItem5
        {
            get
            {
                if ((this.mMergeTreeItem5 == null))
                {
                    this.mMergeTreeItem5 = new MergeTreeItem5(this);
                }
                return this.mMergeTreeItem5;
            }
        }
        
        public MergeTreeItem6 MergeTreeItem6
        {
            get
            {
                if ((this.mMergeTreeItem6 == null))
                {
                    this.mMergeTreeItem6 = new MergeTreeItem6(this);
                }
                return this.mMergeTreeItem6;
            }
        }
        
        public MergeTreeItem7 MergeTreeItem7
        {
            get
            {
                if ((this.mMergeTreeItem7 == null))
                {
                    this.mMergeTreeItem7 = new MergeTreeItem7(this);
                }
                return this.mMergeTreeItem7;
            }
        }
        
        public MergeTreeItem8 MergeTreeItem8
        {
            get
            {
                if ((this.mMergeTreeItem8 == null))
                {
                    this.mMergeTreeItem8 = new MergeTreeItem8(this);
                }
                return this.mMergeTreeItem8;
            }
        }
        
        public MergeTreeItem9 MergeTreeItem9
        {
            get
            {
                if ((this.mMergeTreeItem9 == null))
                {
                    this.mMergeTreeItem9 = new MergeTreeItem9(this);
                }
                return this.mMergeTreeItem9;
            }
        }
        
        public MergeTreeItem10 MergeTreeItem10
        {
            get
            {
                if ((this.mMergeTreeItem10 == null))
                {
                    this.mMergeTreeItem10 = new MergeTreeItem10(this);
                }
                return this.mMergeTreeItem10;
            }
        }
        #endregion
        
        #region Fields
        private MergeTreeItem mMergeTreeItem;
        
        private MergeTreeItem2 mMergeTreeItem2;
        
        private MergeTreeItem3 mMergeTreeItem3;
        
        private MergeTreeItem4 mMergeTreeItem4;
        
        private MergeTreeItem5 mMergeTreeItem5;
        
        private MergeTreeItem6 mMergeTreeItem6;
        
        private MergeTreeItem7 mMergeTreeItem7;
        
        private MergeTreeItem8 mMergeTreeItem8;
        
        private MergeTreeItem9 mMergeTreeItem9;
        
        private MergeTreeItem10 mMergeTreeItem10;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeTreeItem : WpfTreeItem
    {
        
        public MergeTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton Current
        {
            get
            {
                if ((this.mCurrent == null))
                {
                    this.mCurrent = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mCurrent.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_CurrentNodeArmRB_AutoID";
                    this.mCurrent.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCurrent.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCurrent;
            }
        }
        
        public WpfText NoConflicts
        {
            get
            {
                if ((this.mNoConflicts == null))
                {
                    this.mNoConflicts = new WpfText(this);
                    #region Search Criteria
                    this.mNoConflicts.SearchProperties[WpfText.PropertyNames.AutomationId] = "MergeToolNoConflictIcon";
                    this.mNoConflicts.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNoConflicts.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNoConflicts;
            }
        }
        
        public WpfRadioButton Difference
        {
            get
            {
                if ((this.mDifference == null))
                {
                    this.mDifference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDifference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DifferenceNodeArmRB_AutoID";
                    this.mDifference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDifference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDifference;
            }
        }
        
        public MergeItemExpander MergeItemExpander
        {
            get
            {
                if ((this.mMergeItemExpander == null))
                {
                    this.mMergeItemExpander = new MergeItemExpander(this);
                }
                return this.mMergeItemExpander;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mCurrent;
        
        private WpfText mNoConflicts;
        
        private WpfRadioButton mDifference;
        
        private MergeItemExpander mMergeItemExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeItemExpander : WpfExpander
    {
        
        public MergeItemExpander(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public ChildrenConflictsTree ChildrenConflictsTree
        {
            get
            {
                if ((this.mChildrenConflictsTree == null))
                {
                    this.mChildrenConflictsTree = new ChildrenConflictsTree(this);
                }
                return this.mChildrenConflictsTree;
            }
        }
        
        public MergeButton2 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton2(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private ChildrenConflictsTree mChildrenConflictsTree;
        
        private MergeButton2 mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ChildrenConflictsTree : WpfTree
    {
        
        public ChildrenConflictsTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "UI_TreeViewExpanderTemplateChildTreeView_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public FisrtAssign FisrtAssign
        {
            get
            {
                if ((this.mFisrtAssign == null))
                {
                    this.mFisrtAssign = new FisrtAssign(this);
                }
                return this.mFisrtAssign;
            }
        }
        #endregion
        
        #region Fields
        private FisrtAssign mFisrtAssign;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class FisrtAssign : WpfTreeItem
    {
        
        public FisrtAssign(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeExpander MergeExpander
        {
            get
            {
                if ((this.mMergeExpander == null))
                {
                    this.mMergeExpander = new MergeExpander(this);
                }
                return this.mMergeExpander;
            }
        }
        #endregion
        
        #region Fields
        private MergeExpander mMergeExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeExpander : WpfExpander
    {
        
        public MergeExpander(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeButton1 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton1(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private MergeButton1 mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton1 : WpfButton
    {
        
        public MergeButton1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton FisrAssign_Curr_RadioButton
        {
            get
            {
                if ((this.mFisrAssign_Curr_RadioButton == null))
                {
                    this.mFisrAssign_Curr_RadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mFisrAssign_Curr_RadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mFisrAssign_Curr_RadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFisrAssign_Curr_RadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mFisrAssign_Curr_RadioButton;
            }
        }
        
        public WpfRadioButton FirstAssign_Diff_RadioButton
        {
            get
            {
                if ((this.mFirstAssign_Diff_RadioButton == null))
                {
                    this.mFirstAssign_Diff_RadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mFirstAssign_Diff_RadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mFirstAssign_Diff_RadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFirstAssign_Diff_RadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mFirstAssign_Diff_RadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mFisrAssign_Curr_RadioButton;
        
        private WpfRadioButton mFirstAssign_Diff_RadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton2 : WpfButton
    {
        
        public MergeButton2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfText NoConflicts
        {
            get
            {
                if ((this.mNoConflicts == null))
                {
                    this.mNoConflicts = new WpfText(this);
                    #region Search Criteria
                    this.mNoConflicts.SearchProperties[WpfText.PropertyNames.AutomationId] = "MergeToolNoConflictIcon";
                    this.mNoConflicts.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNoConflicts.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNoConflicts;
            }
        }
        
        public WpfRadioButton FirstAssign_Difference
        {
            get
            {
                if ((this.mFirstAssign_Difference == null))
                {
                    this.mFirstAssign_Difference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mFirstAssign_Difference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mFirstAssign_Difference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFirstAssign_Difference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mFirstAssign_Difference;
            }
        }
        
        public WpfRadioButton FirstAssign_Current
        {
            get
            {
                if ((this.mFirstAssign_Current == null))
                {
                    this.mFirstAssign_Current = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mFirstAssign_Current.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mFirstAssign_Current.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFirstAssign_Current.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mFirstAssign_Current;
            }
        }
        
        public WpfText UIIfNameIsText
        {
            get
            {
                if ((this.mUIIfNameIsText == null))
                {
                    this.mUIIfNameIsText = new WpfText(this);
                    #region Search Criteria
                    this.mUIIfNameIsText.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderDescText_AutoID";
                    this.mUIIfNameIsText.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIIfNameIsText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIIfNameIsText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mNoConflicts;
        
        private WpfRadioButton mFirstAssign_Difference;
        
        private WpfRadioButton mFirstAssign_Current;
        
        private WpfText mUIIfNameIsText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeTreeItem2 : WpfTreeItem
    {
        
        public MergeTreeItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton Current
        {
            get
            {
                if ((this.mCurrent == null))
                {
                    this.mCurrent = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mCurrent.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_CurrentNodeArmRB_AutoID";
                    this.mCurrent.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCurrent.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCurrent;
            }
        }
        
        public WpfText NoConflicts
        {
            get
            {
                if ((this.mNoConflicts == null))
                {
                    this.mNoConflicts = new WpfText(this);
                    #region Search Criteria
                    this.mNoConflicts.SearchProperties[WpfText.PropertyNames.AutomationId] = "MergeToolNoConflictIcon";
                    this.mNoConflicts.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNoConflicts.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNoConflicts;
            }
        }
        
        public WpfRadioButton Difference
        {
            get
            {
                if ((this.mDifference == null))
                {
                    this.mDifference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDifference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DifferenceNodeArmRB_AutoID";
                    this.mDifference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDifference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDifference;
            }
        }
        
        public MergeItemExpander1 MergeItemExpander
        {
            get
            {
                if ((this.mMergeItemExpander == null))
                {
                    this.mMergeItemExpander = new MergeItemExpander1(this);
                }
                return this.mMergeItemExpander;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mCurrent;
        
        private WpfText mNoConflicts;
        
        private WpfRadioButton mDifference;
        
        private MergeItemExpander1 mMergeItemExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeItemExpander1 : WpfExpander
    {
        
        public MergeItemExpander1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeButton3 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton3(this);
                }
                return this.mMergeButton;
            }
        }
        
        public ChildrenConflictsTree1 ChildrenConflictsTree
        {
            get
            {
                if ((this.mChildrenConflictsTree == null))
                {
                    this.mChildrenConflictsTree = new ChildrenConflictsTree1(this);
                }
                return this.mChildrenConflictsTree;
            }
        }
        #endregion
        
        #region Fields
        private MergeButton3 mMergeButton;
        
        private ChildrenConflictsTree1 mChildrenConflictsTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton3 : WpfButton
    {
        
        public MergeButton3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfText NoConflicts
        {
            get
            {
                if ((this.mNoConflicts == null))
                {
                    this.mNoConflicts = new WpfText(this);
                    #region Search Criteria
                    this.mNoConflicts.SearchProperties[WpfText.PropertyNames.AutomationId] = "MergeToolNoConflictIcon";
                    this.mNoConflicts.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNoConflicts.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNoConflicts;
            }
        }
        
        public WpfRadioButton Difference_RadioButton
        {
            get
            {
                if ((this.mDifference_RadioButton == null))
                {
                    this.mDifference_RadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDifference_RadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mDifference_RadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDifference_RadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDifference_RadioButton;
            }
        }
        
        public WpfRadioButton Current_RadioButton
        {
            get
            {
                if ((this.mCurrent_RadioButton == null))
                {
                    this.mCurrent_RadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mCurrent_RadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mCurrent_RadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCurrent_RadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCurrent_RadioButton;
            }
        }
        
        public WpfRadioButton SecondAssign_Diff_RadioButton_Curr_RadioButton
        {
            get
            {
                if ((this.mSecondAssign_Diff_RadioButton_Curr_RadioButton == null))
                {
                    this.mSecondAssign_Diff_RadioButton_Curr_RadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mSecondAssign_Diff_RadioButton_Curr_RadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mSecondAssign_Diff_RadioButton_Curr_RadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSecondAssign_Diff_RadioButton_Curr_RadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mSecondAssign_Diff_RadioButton_Curr_RadioButton;
            }
        }
        
        public WpfRadioButton SecondAssign_Diff_RadioButton
        {
            get
            {
                if ((this.mSecondAssign_Diff_RadioButton == null))
                {
                    this.mSecondAssign_Diff_RadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mSecondAssign_Diff_RadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mSecondAssign_Diff_RadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSecondAssign_Diff_RadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mSecondAssign_Diff_RadioButton;
            }
        }
        
        public WpfRadioButton OrganizeCustomers_Difference
        {
            get
            {
                if ((this.mOrganizeCustomers_Difference == null))
                {
                    this.mOrganizeCustomers_Difference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mOrganizeCustomers_Difference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mOrganizeCustomers_Difference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOrganizeCustomers_Difference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mOrganizeCustomers_Difference;
            }
        }
        
        public WpfRadioButton OrganizeCustomers_Current
        {
            get
            {
                if ((this.mOrganizeCustomers_Current == null))
                {
                    this.mOrganizeCustomers_Current = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mOrganizeCustomers_Current.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mOrganizeCustomers_Current.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mOrganizeCustomers_Current.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mOrganizeCustomers_Current;
            }
        }
        
        public WpfButton SplitNamesExpander
        {
            get
            {
                if ((this.mSplitNamesExpander == null))
                {
                    this.mSplitNamesExpander = new WpfButton(this);
                    #region Search Criteria
                    this.mSplitNamesExpander.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
                    this.mSplitNamesExpander.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSplitNamesExpander.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mSplitNamesExpander;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mNoConflicts;
        
        private WpfRadioButton mDifference_RadioButton;
        
        private WpfRadioButton mCurrent_RadioButton;
        
        private WpfRadioButton mSecondAssign_Diff_RadioButton_Curr_RadioButton;
        
        private WpfRadioButton mSecondAssign_Diff_RadioButton;
        
        private WpfRadioButton mOrganizeCustomers_Difference;
        
        private WpfRadioButton mOrganizeCustomers_Current;
        
        private WpfButton mSplitNamesExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ChildrenConflictsTree1 : WpfTree
    {
        
        public ChildrenConflictsTree1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "UI_TreeViewExpanderTemplateChildTreeView_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public SplitNames SplitNames
        {
            get
            {
                if ((this.mSplitNames == null))
                {
                    this.mSplitNames = new SplitNames(this);
                }
                return this.mSplitNames;
            }
        }
        #endregion
        
        #region Fields
        private SplitNames mSplitNames;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SplitNames : WpfTreeItem
    {
        
        public SplitNames(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeExpander1 MergeExpander
        {
            get
            {
                if ((this.mMergeExpander == null))
                {
                    this.mMergeExpander = new MergeExpander1(this);
                }
                return this.mMergeExpander;
            }
        }
        #endregion
        
        #region Fields
        private MergeExpander1 mMergeExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeExpander1 : WpfExpander
    {
        
        public MergeExpander1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeButton4 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton4(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private MergeButton4 mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton4 : WpfButton
    {
        
        public MergeButton4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton SplitNames_Curr_RadioButton
        {
            get
            {
                if ((this.mSplitNames_Curr_RadioButton == null))
                {
                    this.mSplitNames_Curr_RadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mSplitNames_Curr_RadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mSplitNames_Curr_RadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSplitNames_Curr_RadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mSplitNames_Curr_RadioButton;
            }
        }
        
        public WpfText NoConflicts
        {
            get
            {
                if ((this.mNoConflicts == null))
                {
                    this.mNoConflicts = new WpfText(this);
                    #region Search Criteria
                    this.mNoConflicts.SearchProperties[WpfText.PropertyNames.AutomationId] = "MergeToolNoConflictIcon";
                    this.mNoConflicts.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNoConflicts.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNoConflicts;
            }
        }
        
        public WpfRadioButton SplitNames_Diff_RadioButton
        {
            get
            {
                if ((this.mSplitNames_Diff_RadioButton == null))
                {
                    this.mSplitNames_Diff_RadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mSplitNames_Diff_RadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mSplitNames_Diff_RadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSplitNames_Diff_RadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mSplitNames_Diff_RadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mSplitNames_Curr_RadioButton;
        
        private WpfText mNoConflicts;
        
        private WpfRadioButton mSplitNames_Diff_RadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeTreeItem3 : WpfTreeItem
    {
        
        public MergeTreeItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton Current
        {
            get
            {
                if ((this.mCurrent == null))
                {
                    this.mCurrent = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mCurrent.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_CurrentNodeArmRB_AutoID";
                    this.mCurrent.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCurrent.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCurrent;
            }
        }
        
        public WpfText NoConflicts
        {
            get
            {
                if ((this.mNoConflicts == null))
                {
                    this.mNoConflicts = new WpfText(this);
                    #region Search Criteria
                    this.mNoConflicts.SearchProperties[WpfText.PropertyNames.AutomationId] = "MergeToolNoConflictIcon";
                    this.mNoConflicts.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNoConflicts.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNoConflicts;
            }
        }
        
        public WpfRadioButton Difference
        {
            get
            {
                if ((this.mDifference == null))
                {
                    this.mDifference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDifference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DifferenceNodeArmRB_AutoID";
                    this.mDifference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDifference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDifference;
            }
        }
        
        public MergeSubTreeItem MergeSubTreeItem
        {
            get
            {
                if ((this.mMergeSubTreeItem == null))
                {
                    this.mMergeSubTreeItem = new MergeSubTreeItem(this);
                }
                return this.mMergeSubTreeItem;
            }
        }
        
        public MergeItemExpander2 MergeItemExpander
        {
            get
            {
                if ((this.mMergeItemExpander == null))
                {
                    this.mMergeItemExpander = new MergeItemExpander2(this);
                }
                return this.mMergeItemExpander;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mCurrent;
        
        private WpfText mNoConflicts;
        
        private WpfRadioButton mDifference;
        
        private MergeSubTreeItem mMergeSubTreeItem;
        
        private MergeItemExpander2 mMergeItemExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeSubTreeItem : WpfTreeItem
    {
        
        public MergeSubTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.ViewModels.Merge.CompleteConflict";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public SubTreeItem SubTreeItem
        {
            get
            {
                if ((this.mSubTreeItem == null))
                {
                    this.mSubTreeItem = new SubTreeItem(this);
                }
                return this.mSubTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private SubTreeItem mSubTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SubTreeItem : WpfExpander
    {
        
        public SubTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public ChildrenConflictsTree2 ChildrenConflictsTree
        {
            get
            {
                if ((this.mChildrenConflictsTree == null))
                {
                    this.mChildrenConflictsTree = new ChildrenConflictsTree2(this);
                }
                return this.mChildrenConflictsTree;
            }
        }
        
        public MergeButton6 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton6(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private ChildrenConflictsTree2 mChildrenConflictsTree;
        
        private MergeButton6 mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ChildrenConflictsTree2 : WpfTree
    {
        
        public ChildrenConflictsTree2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "UI_TreeViewExpanderTemplateChildTreeView_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public FirstTool FirstTool
        {
            get
            {
                if ((this.mFirstTool == null))
                {
                    this.mFirstTool = new FirstTool(this);
                }
                return this.mFirstTool;
            }
        }
        #endregion
        
        #region Fields
        private FirstTool mFirstTool;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class FirstTool : WpfTreeItem
    {
        
        public FirstTool(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeExpander2 MergeExpander
        {
            get
            {
                if ((this.mMergeExpander == null))
                {
                    this.mMergeExpander = new MergeExpander2(this);
                }
                return this.mMergeExpander;
            }
        }
        #endregion
        
        #region Fields
        private MergeExpander2 mMergeExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeExpander2 : WpfExpander
    {
        
        public MergeExpander2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeButton5 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton5(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private MergeButton5 mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton5 : WpfButton
    {
        
        public MergeButton5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfText NoConflicts
        {
            get
            {
                if ((this.mNoConflicts == null))
                {
                    this.mNoConflicts = new WpfText(this);
                    #region Search Criteria
                    this.mNoConflicts.SearchProperties[WpfText.PropertyNames.AutomationId] = "MergeToolNoConflictIcon";
                    this.mNoConflicts.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNoConflicts.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNoConflicts;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mNoConflicts;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton6 : WpfButton
    {
        
        public MergeButton6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton Decision_Current_RadioButton
        {
            get
            {
                if ((this.mDecision_Current_RadioButton == null))
                {
                    this.mDecision_Current_RadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDecision_Current_RadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mDecision_Current_RadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDecision_Current_RadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDecision_Current_RadioButton;
            }
        }
        
        public WpfRadioButton Decision_Diff_RadioButton
        {
            get
            {
                if ((this.mDecision_Diff_RadioButton == null))
                {
                    this.mDecision_Diff_RadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDecision_Diff_RadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mDecision_Diff_RadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDecision_Diff_RadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDecision_Diff_RadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mDecision_Current_RadioButton;
        
        private WpfRadioButton mDecision_Diff_RadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeItemExpander2 : WpfExpander
    {
        
        public MergeItemExpander2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeButton7 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton7(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private MergeButton7 mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton7 : WpfButton
    {
        
        public MergeButton7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton ThirdAssign_Difference
        {
            get
            {
                if ((this.mThirdAssign_Difference == null))
                {
                    this.mThirdAssign_Difference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mThirdAssign_Difference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mThirdAssign_Difference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdAssign_Difference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mThirdAssign_Difference;
            }
        }
        
        public WpfRadioButton ThirdAssign_Current
        {
            get
            {
                if ((this.mThirdAssign_Current == null))
                {
                    this.mThirdAssign_Current = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mThirdAssign_Current.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mThirdAssign_Current.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdAssign_Current.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mThirdAssign_Current;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mThirdAssign_Difference;
        
        private WpfRadioButton mThirdAssign_Current;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeTreeItem4 : WpfTreeItem
    {
        
        public MergeTreeItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton Current
        {
            get
            {
                if ((this.mCurrent == null))
                {
                    this.mCurrent = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mCurrent.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_CurrentNodeArmRB_AutoID";
                    this.mCurrent.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCurrent.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCurrent;
            }
        }
        
        public WpfRadioButton Difference
        {
            get
            {
                if ((this.mDifference == null))
                {
                    this.mDifference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDifference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DifferenceNodeArmRB_AutoID";
                    this.mDifference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDifference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDifference;
            }
        }
        
        public MergeSubTreeItem1 MergeSubTreeItem
        {
            get
            {
                if ((this.mMergeSubTreeItem == null))
                {
                    this.mMergeSubTreeItem = new MergeSubTreeItem1(this);
                }
                return this.mMergeSubTreeItem;
            }
        }
        
        public MergeItemExpander3 MergeItemExpander
        {
            get
            {
                if ((this.mMergeItemExpander == null))
                {
                    this.mMergeItemExpander = new MergeItemExpander3(this);
                }
                return this.mMergeItemExpander;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mCurrent;
        
        private WpfRadioButton mDifference;
        
        private MergeSubTreeItem1 mMergeSubTreeItem;
        
        private MergeItemExpander3 mMergeItemExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeSubTreeItem1 : WpfTreeItem
    {
        
        public MergeSubTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.ViewModels.Merge.CompleteConflict";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public SubTreeItem1 SubTreeItem
        {
            get
            {
                if ((this.mSubTreeItem == null))
                {
                    this.mSubTreeItem = new SubTreeItem1(this);
                }
                return this.mSubTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private SubTreeItem1 mSubTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SubTreeItem1 : WpfExpander
    {
        
        public SubTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public ChildrenConflictsTree3 ChildrenConflictsTree
        {
            get
            {
                if ((this.mChildrenConflictsTree == null))
                {
                    this.mChildrenConflictsTree = new ChildrenConflictsTree3(this);
                }
                return this.mChildrenConflictsTree;
            }
        }
        
        public MergeButton9 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton9(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private ChildrenConflictsTree3 mChildrenConflictsTree;
        
        private MergeButton9 mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ChildrenConflictsTree3 : WpfTree
    {
        
        public ChildrenConflictsTree3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "UI_TreeViewExpanderTemplateChildTreeView_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public FirstTool1 FirstTool
        {
            get
            {
                if ((this.mFirstTool == null))
                {
                    this.mFirstTool = new FirstTool1(this);
                }
                return this.mFirstTool;
            }
        }
        #endregion
        
        #region Fields
        private FirstTool1 mFirstTool;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class FirstTool1 : WpfTreeItem
    {
        
        public FirstTool1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeExpander3 MergeExpander
        {
            get
            {
                if ((this.mMergeExpander == null))
                {
                    this.mMergeExpander = new MergeExpander3(this);
                }
                return this.mMergeExpander;
            }
        }
        #endregion
        
        #region Fields
        private MergeExpander3 mMergeExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeExpander3 : WpfExpander
    {
        
        public MergeExpander3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeButton8 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton8(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private MergeButton8 mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton8 : WpfButton
    {
        
        public MergeButton8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfText NoConflicts
        {
            get
            {
                if ((this.mNoConflicts == null))
                {
                    this.mNoConflicts = new WpfText(this);
                    #region Search Criteria
                    this.mNoConflicts.SearchProperties[WpfText.PropertyNames.AutomationId] = "MergeToolNoConflictIcon";
                    this.mNoConflicts.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNoConflicts.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNoConflicts;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mNoConflicts;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton9 : WpfButton
    {
        
        public MergeButton9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton Decision_Current_RadioButton
        {
            get
            {
                if ((this.mDecision_Current_RadioButton == null))
                {
                    this.mDecision_Current_RadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDecision_Current_RadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mDecision_Current_RadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDecision_Current_RadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDecision_Current_RadioButton;
            }
        }
        
        public WpfRadioButton Decision_Diff_RadioButton
        {
            get
            {
                if ((this.mDecision_Diff_RadioButton == null))
                {
                    this.mDecision_Diff_RadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDecision_Diff_RadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mDecision_Diff_RadioButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDecision_Diff_RadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDecision_Diff_RadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mDecision_Current_RadioButton;
        
        private WpfRadioButton mDecision_Diff_RadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeItemExpander3 : WpfExpander
    {
        
        public MergeItemExpander3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeButton10 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton10(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private MergeButton10 mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton10 : WpfButton
    {
        
        public MergeButton10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton ThirdAssign_Difference
        {
            get
            {
                if ((this.mThirdAssign_Difference == null))
                {
                    this.mThirdAssign_Difference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mThirdAssign_Difference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mThirdAssign_Difference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdAssign_Difference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mThirdAssign_Difference;
            }
        }
        
        public WpfRadioButton ThirdAssign_Current
        {
            get
            {
                if ((this.mThirdAssign_Current == null))
                {
                    this.mThirdAssign_Current = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mThirdAssign_Current.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mThirdAssign_Current.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdAssign_Current.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mThirdAssign_Current;
            }
        }
        
        public WpfText NoConflicts
        {
            get
            {
                if ((this.mNoConflicts == null))
                {
                    this.mNoConflicts = new WpfText(this);
                    #region Search Criteria
                    this.mNoConflicts.SearchProperties[WpfText.PropertyNames.AutomationId] = "MergeToolNoConflictIcon";
                    this.mNoConflicts.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNoConflicts.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNoConflicts;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mThirdAssign_Difference;
        
        private WpfRadioButton mThirdAssign_Current;
        
        private WpfText mNoConflicts;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeTreeItem5 : WpfTreeItem
    {
        
        public MergeTreeItem5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton Current
        {
            get
            {
                if ((this.mCurrent == null))
                {
                    this.mCurrent = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mCurrent.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_CurrentNodeArmRB_AutoID";
                    this.mCurrent.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCurrent.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCurrent;
            }
        }
        
        public WpfText NoConflicts
        {
            get
            {
                if ((this.mNoConflicts == null))
                {
                    this.mNoConflicts = new WpfText(this);
                    #region Search Criteria
                    this.mNoConflicts.SearchProperties[WpfText.PropertyNames.AutomationId] = "MergeToolNoConflictIcon";
                    this.mNoConflicts.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNoConflicts.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNoConflicts;
            }
        }
        
        public WpfRadioButton Difference
        {
            get
            {
                if ((this.mDifference == null))
                {
                    this.mDifference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDifference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DifferenceNodeArmRB_AutoID";
                    this.mDifference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDifference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDifference;
            }
        }
        
        public MergeItemExpander4 MergeItemExpander
        {
            get
            {
                if ((this.mMergeItemExpander == null))
                {
                    this.mMergeItemExpander = new MergeItemExpander4(this);
                }
                return this.mMergeItemExpander;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mCurrent;
        
        private WpfText mNoConflicts;
        
        private WpfRadioButton mDifference;
        
        private MergeItemExpander4 mMergeItemExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeItemExpander4 : WpfExpander
    {
        
        public MergeItemExpander4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeButton11 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton11(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private MergeButton11 mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton11 : WpfButton
    {
        
        public MergeButton11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton ThirdAssign_Difference
        {
            get
            {
                if ((this.mThirdAssign_Difference == null))
                {
                    this.mThirdAssign_Difference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mThirdAssign_Difference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mThirdAssign_Difference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdAssign_Difference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mThirdAssign_Difference;
            }
        }
        
        public WpfRadioButton ThirdAssign_Current
        {
            get
            {
                if ((this.mThirdAssign_Current == null))
                {
                    this.mThirdAssign_Current = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mThirdAssign_Current.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mThirdAssign_Current.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdAssign_Current.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mThirdAssign_Current;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mThirdAssign_Difference;
        
        private WpfRadioButton mThirdAssign_Current;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeTreeItem6 : WpfTreeItem
    {
        
        public MergeTreeItem6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton Current
        {
            get
            {
                if ((this.mCurrent == null))
                {
                    this.mCurrent = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mCurrent.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_CurrentNodeArmRB_AutoID";
                    this.mCurrent.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCurrent.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCurrent;
            }
        }
        
        public WpfText NoConflicts
        {
            get
            {
                if ((this.mNoConflicts == null))
                {
                    this.mNoConflicts = new WpfText(this);
                    #region Search Criteria
                    this.mNoConflicts.SearchProperties[WpfText.PropertyNames.AutomationId] = "MergeToolNoConflictIcon";
                    this.mNoConflicts.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNoConflicts.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNoConflicts;
            }
        }
        
        public WpfRadioButton Difference
        {
            get
            {
                if ((this.mDifference == null))
                {
                    this.mDifference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDifference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DifferenceNodeArmRB_AutoID";
                    this.mDifference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDifference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDifference;
            }
        }
        
        public MergeItemExpander5 MergeItemExpander
        {
            get
            {
                if ((this.mMergeItemExpander == null))
                {
                    this.mMergeItemExpander = new MergeItemExpander5(this);
                }
                return this.mMergeItemExpander;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mCurrent;
        
        private WpfText mNoConflicts;
        
        private WpfRadioButton mDifference;
        
        private MergeItemExpander5 mMergeItemExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeItemExpander5 : WpfExpander
    {
        
        public MergeItemExpander5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeButton12 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton12(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private MergeButton12 mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton12 : WpfButton
    {
        
        public MergeButton12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton ThirdAssign_Difference
        {
            get
            {
                if ((this.mThirdAssign_Difference == null))
                {
                    this.mThirdAssign_Difference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mThirdAssign_Difference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mThirdAssign_Difference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdAssign_Difference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mThirdAssign_Difference;
            }
        }
        
        public WpfRadioButton ThirdAssign_Current
        {
            get
            {
                if ((this.mThirdAssign_Current == null))
                {
                    this.mThirdAssign_Current = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mThirdAssign_Current.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mThirdAssign_Current.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdAssign_Current.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mThirdAssign_Current;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mThirdAssign_Difference;
        
        private WpfRadioButton mThirdAssign_Current;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeTreeItem7 : WpfTreeItem
    {
        
        public MergeTreeItem7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "7";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton Current
        {
            get
            {
                if ((this.mCurrent == null))
                {
                    this.mCurrent = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mCurrent.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_CurrentNodeArmRB_AutoID";
                    this.mCurrent.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCurrent.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCurrent;
            }
        }
        
        public WpfText NoConflicts
        {
            get
            {
                if ((this.mNoConflicts == null))
                {
                    this.mNoConflicts = new WpfText(this);
                    #region Search Criteria
                    this.mNoConflicts.SearchProperties[WpfText.PropertyNames.AutomationId] = "MergeToolNoConflictIcon";
                    this.mNoConflicts.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNoConflicts.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNoConflicts;
            }
        }
        
        public WpfRadioButton Difference
        {
            get
            {
                if ((this.mDifference == null))
                {
                    this.mDifference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDifference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DifferenceNodeArmRB_AutoID";
                    this.mDifference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDifference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDifference;
            }
        }
        
        public MergeItemExpander6 MergeItemExpander
        {
            get
            {
                if ((this.mMergeItemExpander == null))
                {
                    this.mMergeItemExpander = new MergeItemExpander6(this);
                }
                return this.mMergeItemExpander;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mCurrent;
        
        private WpfText mNoConflicts;
        
        private WpfRadioButton mDifference;
        
        private MergeItemExpander6 mMergeItemExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeItemExpander6 : WpfExpander
    {
        
        public MergeItemExpander6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeButton13 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton13(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private MergeButton13 mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton13 : WpfButton
    {
        
        public MergeButton13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton ThirdAssign_Difference
        {
            get
            {
                if ((this.mThirdAssign_Difference == null))
                {
                    this.mThirdAssign_Difference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mThirdAssign_Difference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mThirdAssign_Difference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdAssign_Difference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mThirdAssign_Difference;
            }
        }
        
        public WpfRadioButton ThirdAssign_Current
        {
            get
            {
                if ((this.mThirdAssign_Current == null))
                {
                    this.mThirdAssign_Current = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mThirdAssign_Current.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mThirdAssign_Current.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdAssign_Current.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mThirdAssign_Current;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mThirdAssign_Difference;
        
        private WpfRadioButton mThirdAssign_Current;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeTreeItem8 : WpfTreeItem
    {
        
        public MergeTreeItem8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "8";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton Current
        {
            get
            {
                if ((this.mCurrent == null))
                {
                    this.mCurrent = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mCurrent.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_CurrentNodeArmRB_AutoID";
                    this.mCurrent.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCurrent.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCurrent;
            }
        }
        
        public WpfText NoConflicts
        {
            get
            {
                if ((this.mNoConflicts == null))
                {
                    this.mNoConflicts = new WpfText(this);
                    #region Search Criteria
                    this.mNoConflicts.SearchProperties[WpfText.PropertyNames.AutomationId] = "MergeToolNoConflictIcon";
                    this.mNoConflicts.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNoConflicts.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNoConflicts;
            }
        }
        
        public WpfRadioButton Difference
        {
            get
            {
                if ((this.mDifference == null))
                {
                    this.mDifference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDifference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DifferenceNodeArmRB_AutoID";
                    this.mDifference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDifference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDifference;
            }
        }
        
        public MergeItemExpander7 MergeItemExpander
        {
            get
            {
                if ((this.mMergeItemExpander == null))
                {
                    this.mMergeItemExpander = new MergeItemExpander7(this);
                }
                return this.mMergeItemExpander;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mCurrent;
        
        private WpfText mNoConflicts;
        
        private WpfRadioButton mDifference;
        
        private MergeItemExpander7 mMergeItemExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeItemExpander7 : WpfExpander
    {
        
        public MergeItemExpander7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeButton14 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton14(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private MergeButton14 mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton14 : WpfButton
    {
        
        public MergeButton14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton ThirdAssign_Difference
        {
            get
            {
                if ((this.mThirdAssign_Difference == null))
                {
                    this.mThirdAssign_Difference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mThirdAssign_Difference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mThirdAssign_Difference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdAssign_Difference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mThirdAssign_Difference;
            }
        }
        
        public WpfRadioButton ThirdAssign_Current
        {
            get
            {
                if ((this.mThirdAssign_Current == null))
                {
                    this.mThirdAssign_Current = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mThirdAssign_Current.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mThirdAssign_Current.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdAssign_Current.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mThirdAssign_Current;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mThirdAssign_Difference;
        
        private WpfRadioButton mThirdAssign_Current;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeTreeItem9 : WpfTreeItem
    {
        
        public MergeTreeItem9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "9";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton Current
        {
            get
            {
                if ((this.mCurrent == null))
                {
                    this.mCurrent = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mCurrent.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_CurrentNodeArmRB_AutoID";
                    this.mCurrent.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCurrent.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCurrent;
            }
        }
        
        public WpfText NoConflicts
        {
            get
            {
                if ((this.mNoConflicts == null))
                {
                    this.mNoConflicts = new WpfText(this);
                    #region Search Criteria
                    this.mNoConflicts.SearchProperties[WpfText.PropertyNames.AutomationId] = "MergeToolNoConflictIcon";
                    this.mNoConflicts.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNoConflicts.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNoConflicts;
            }
        }
        
        public WpfRadioButton Difference
        {
            get
            {
                if ((this.mDifference == null))
                {
                    this.mDifference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDifference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DifferenceNodeArmRB_AutoID";
                    this.mDifference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDifference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDifference;
            }
        }
        
        public MergeItemExpander8 MergeItemExpander
        {
            get
            {
                if ((this.mMergeItemExpander == null))
                {
                    this.mMergeItemExpander = new MergeItemExpander8(this);
                }
                return this.mMergeItemExpander;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mCurrent;
        
        private WpfText mNoConflicts;
        
        private WpfRadioButton mDifference;
        
        private MergeItemExpander8 mMergeItemExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeItemExpander8 : WpfExpander
    {
        
        public MergeItemExpander8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeButton15 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton15(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private MergeButton15 mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton15 : WpfButton
    {
        
        public MergeButton15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton ThirdAssign_Difference
        {
            get
            {
                if ((this.mThirdAssign_Difference == null))
                {
                    this.mThirdAssign_Difference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mThirdAssign_Difference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mThirdAssign_Difference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdAssign_Difference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mThirdAssign_Difference;
            }
        }
        
        public WpfRadioButton ThirdAssign_Current
        {
            get
            {
                if ((this.mThirdAssign_Current == null))
                {
                    this.mThirdAssign_Current = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mThirdAssign_Current.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mThirdAssign_Current.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdAssign_Current.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mThirdAssign_Current;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mThirdAssign_Difference;
        
        private WpfRadioButton mThirdAssign_Current;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeTreeItem10 : WpfTreeItem
    {
        
        public MergeTreeItem10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "10";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton Current
        {
            get
            {
                if ((this.mCurrent == null))
                {
                    this.mCurrent = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mCurrent.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_CurrentNodeArmRB_AutoID";
                    this.mCurrent.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mCurrent.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCurrent;
            }
        }
        
        public WpfText NoConflicts
        {
            get
            {
                if ((this.mNoConflicts == null))
                {
                    this.mNoConflicts = new WpfText(this);
                    #region Search Criteria
                    this.mNoConflicts.SearchProperties[WpfText.PropertyNames.AutomationId] = "MergeToolNoConflictIcon";
                    this.mNoConflicts.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mNoConflicts.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mNoConflicts;
            }
        }
        
        public WpfRadioButton Difference
        {
            get
            {
                if ((this.mDifference == null))
                {
                    this.mDifference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDifference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DifferenceNodeArmRB_AutoID";
                    this.mDifference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDifference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDifference;
            }
        }
        
        public MergeItemExpander9 MergeItemExpander
        {
            get
            {
                if ((this.mMergeItemExpander == null))
                {
                    this.mMergeItemExpander = new MergeItemExpander9(this);
                }
                return this.mMergeItemExpander;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mCurrent;
        
        private WpfText mNoConflicts;
        
        private WpfRadioButton mDifference;
        
        private MergeItemExpander9 mMergeItemExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeItemExpander9 : WpfExpander
    {
        
        public MergeItemExpander9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeButton16 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton16(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private MergeButton16 mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton16 : WpfButton
    {
        
        public MergeButton16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton ThirdAssign_Difference
        {
            get
            {
                if ((this.mThirdAssign_Difference == null))
                {
                    this.mThirdAssign_Difference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mThirdAssign_Difference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mThirdAssign_Difference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdAssign_Difference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mThirdAssign_Difference;
            }
        }
        
        public WpfRadioButton ThirdAssign_Current
        {
            get
            {
                if ((this.mThirdAssign_Current == null))
                {
                    this.mThirdAssign_Current = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mThirdAssign_Current.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mThirdAssign_Current.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mThirdAssign_Current.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mThirdAssign_Current;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mThirdAssign_Difference;
        
        private WpfRadioButton mThirdAssign_Current;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class DesignerView : WpfCustom
    {
        
        public DesignerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane1 ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane1(this);
                }
                return this.mScrollViewerPane;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane1 mScrollViewerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ScrollViewerPane1 : WpfPane
    {
        
        public ScrollViewerPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "scrollViewer";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public ActivityBuilder ActivityBuilder
        {
            get
            {
                if ((this.mActivityBuilder == null))
                {
                    this.mActivityBuilder = new ActivityBuilder(this);
                }
                return this.mActivityBuilder;
            }
        }
        #endregion
        
        #region Fields
        private ActivityBuilder mActivityBuilder;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ActivityBuilder : WpfCustom
    {
        
        public ActivityBuilder(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ActivityTypeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActivityTypeDesigner";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WorkflowItemPresenter WorkflowItemPresenter
        {
            get
            {
                if ((this.mWorkflowItemPresenter == null))
                {
                    this.mWorkflowItemPresenter = new WorkflowItemPresenter(this);
                }
                return this.mWorkflowItemPresenter;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowItemPresenter mWorkflowItemPresenter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class WorkflowItemPresenter : WpfCustom
    {
        
        public WorkflowItemPresenter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public Flowchart Flowchart
        {
            get
            {
                if ((this.mFlowchart == null))
                {
                    this.mFlowchart = new Flowchart(this);
                }
                return this.mFlowchart;
            }
        }
        #endregion
        
        #region Fields
        private Flowchart mFlowchart;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Flowchart : WpfCustom
    {
        
        public Flowchart(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfCustom EmptyAssign_On_Surface
        {
            get
            {
                if ((this.mEmptyAssign_On_Surface == null))
                {
                    this.mEmptyAssign_On_Surface = new WpfCustom(this);
                    #region Search Criteria
                    this.mEmptyAssign_On_Surface.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignDesigner";
                    this.mEmptyAssign_On_Surface.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Assign (0)(MultiAssignDesigner)";
                    this.mEmptyAssign_On_Surface.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mEmptyAssign_On_Surface;
            }
        }
        
        public WpfCustom Assign_On_Surface
        {
            get
            {
                if ((this.mAssign_On_Surface == null))
                {
                    this.mAssign_On_Surface = new WpfCustom(this);
                    #region Search Criteria
                    this.mAssign_On_Surface.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignDesigner";
                    this.mAssign_On_Surface.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Assign (0)(MultiAssignDesigner)";
                    this.mAssign_On_Surface.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mAssign_On_Surface;
            }
        }
        
        public WpfCustom FirstAssign_Diff_On_Surface
        {
            get
            {
                if ((this.mFirstAssign_Diff_On_Surface == null))
                {
                    this.mFirstAssign_Diff_On_Surface = new WpfCustom(this);
                    #region Search Criteria
                    this.mFirstAssign_Diff_On_Surface.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignDesigner";
                    this.mFirstAssign_Diff_On_Surface.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Assign (1)(MultiAssignDesigner)";
                    this.mFirstAssign_Diff_On_Surface.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mFirstAssign_Diff_On_Surface;
            }
        }
        
        public SecondAssign_Curr_On_Surface SecondAssign_Curr_On_Surface
        {
            get
            {
                if ((this.mSecondAssign_Curr_On_Surface == null))
                {
                    this.mSecondAssign_Curr_On_Surface = new SecondAssign_Curr_On_Surface(this);
                }
                return this.mSecondAssign_Curr_On_Surface;
            }
        }
        
        public Difference_Decision Difference_Decision
        {
            get
            {
                if ((this.mDifference_Decision == null))
                {
                    this.mDifference_Decision = new Difference_Decision(this);
                }
                return this.mDifference_Decision;
            }
        }
        
        public WpfCustom MergeSequenceAssign
        {
            get
            {
                if ((this.mMergeSequenceAssign == null))
                {
                    this.mMergeSequenceAssign = new WpfCustom(this);
                    #region Search Criteria
                    this.mMergeSequenceAssign.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignDesigner";
                    this.mMergeSequenceAssign.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Create Example Data (1)(MultiAssignDesigner)";
                    this.mMergeSequenceAssign.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mMergeSequenceAssign;
            }
        }
        
        public WpfCustom SequenceActivityCustom
        {
            get
            {
                if ((this.mSequenceActivityCustom == null))
                {
                    this.mSequenceActivityCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mSequenceActivityCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SequenceDesigner";
                    this.mSequenceActivityCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Organize Customers(SequenceDesigner)";
                    this.mSequenceActivityCustom.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mSequenceActivityCustom;
            }
        }
        
        public WpfCustom Difference_Switch
        {
            get
            {
                if ((this.mDifference_Switch == null))
                {
                    this.mDifference_Switch = new WpfCustom(this);
                    #region Search Criteria
                    this.mDifference_Switch.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowSwitchDesigner";
                    this.mDifference_Switch.SearchProperties[WpfControl.PropertyNames.AutomationId] = "FlowSwitchDesigner";
                    this.mDifference_Switch.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDifference_Switch;
            }
        }
        
        public WpfCustom CreaqteExampleDataAssign
        {
            get
            {
                if ((this.mCreaqteExampleDataAssign == null))
                {
                    this.mCreaqteExampleDataAssign = new WpfCustom(this);
                    #region Search Criteria
                    this.mCreaqteExampleDataAssign.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignDesigner";
                    this.mCreaqteExampleDataAssign.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Create Example Data (1)(MultiAssignDesigner)";
                    this.mCreaqteExampleDataAssign.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCreaqteExampleDataAssign;
            }
        }
        
        public WpfCustom SortRecordsActiviCustom
        {
            get
            {
                if ((this.mSortRecordsActiviCustom == null))
                {
                    this.mSortRecordsActiviCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mSortRecordsActiviCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SortRecordsDesigner";
                    this.mSortRecordsActiviCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sort Names Alphabetically(SortRecordsDesigner)";
                    this.mSortRecordsActiviCustom.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mSortRecordsActiviCustom;
            }
        }
        
        public WpfCustom CommentActivityCustom
        {
            get
            {
                if ((this.mCommentActivityCustom == null))
                {
                    this.mCommentActivityCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mCommentActivityCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CommentDesigner";
                    this.mCommentActivityCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Comment(CommentDesigner)";
                    this.mCommentActivityCustom.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mCommentActivityCustom;
            }
        }
        
        public WpfCustom Replace
        {
            get
            {
                if ((this.mReplace == null))
                {
                    this.mReplace = new WpfCustom(this);
                    #region Search Criteria
                    this.mReplace.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ReplaceDesigner";
                    this.mReplace.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Replace(ReplaceDesigner)";
                    this.mReplace.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mReplace;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mEmptyAssign_On_Surface;
        
        private WpfCustom mAssign_On_Surface;
        
        private WpfCustom mFirstAssign_Diff_On_Surface;
        
        private SecondAssign_Curr_On_Surface mSecondAssign_Curr_On_Surface;
        
        private Difference_Decision mDifference_Decision;
        
        private WpfCustom mMergeSequenceAssign;
        
        private WpfCustom mSequenceActivityCustom;
        
        private WpfCustom mDifference_Switch;
        
        private WpfCustom mCreaqteExampleDataAssign;
        
        private WpfCustom mSortRecordsActiviCustom;
        
        private WpfCustom mCommentActivityCustom;
        
        private WpfCustom mReplace;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SecondAssign_Curr_On_Surface : WpfCustom
    {
        
        public SecondAssign_Curr_On_Surface(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Assign (1)(MultiAssignDesigner)";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIDisplayNameEdit
        {
            get
            {
                if ((this.mUIDisplayNameEdit == null))
                {
                    this.mUIDisplayNameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIDisplayNameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DisplayNameBox";
                    this.mUIDisplayNameEdit.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIDisplayNameEdit;
            }
        }
        
        public UISmallViewContentCustom UISmallViewContentCustom
        {
            get
            {
                if ((this.mUISmallViewContentCustom == null))
                {
                    this.mUISmallViewContentCustom = new UISmallViewContentCustom(this);
                }
                return this.mUISmallViewContentCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIDisplayNameEdit;
        
        private UISmallViewContentCustom mUISmallViewContentCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISmallViewContentCustom : WpfCustom
    {
        
        public UISmallViewContentCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UISmallDataGridTable UISmallDataGridTable
        {
            get
            {
                if ((this.mUISmallDataGridTable == null))
                {
                    this.mUISmallDataGridTable = new UISmallDataGridTable(this);
                }
                return this.mUISmallDataGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UISmallDataGridTable mUISmallDataGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISmallDataGridTable : WpfTable
    {
        
        public UISmallDataGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIUI_ActivityGridRow_0Row UIUI_ActivityGridRow_0Row
        {
            get
            {
                if ((this.mUIUI_ActivityGridRow_0Row == null))
                {
                    this.mUIUI_ActivityGridRow_0Row = new UIUI_ActivityGridRow_0Row(this);
                }
                return this.mUIUI_ActivityGridRow_0Row;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_ActivityGridRow_0Row mUIUI_ActivityGridRow_0Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUI_ActivityGridRow_0Row : WpfRow
    {
        
        public UIUI_ActivityGridRow_0Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_0_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIItemUnlimitedApplicaCell UIItemUnlimitedApplicaCell
        {
            get
            {
                if ((this.mUIItemUnlimitedApplicaCell == null))
                {
                    this.mUIItemUnlimitedApplicaCell = new UIItemUnlimitedApplicaCell(this);
                }
                return this.mUIItemUnlimitedApplicaCell;
            }
        }
        #endregion
        
        #region Fields
        private UIItemUnlimitedApplicaCell mUIItemUnlimitedApplicaCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemUnlimitedApplicaCell : WpfCell
    {
        
        public UIItemUnlimitedApplicaCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIUI__Row1_FieldValue_ComboBox UIUI__Row1_FieldValue_ComboBox
        {
            get
            {
                if ((this.mUIUI__Row1_FieldValue_ComboBox == null))
                {
                    this.mUIUI__Row1_FieldValue_ComboBox = new UIUI__Row1_FieldValue_ComboBox(this);
                }
                return this.mUIUI__Row1_FieldValue_ComboBox;
            }
        }
        #endregion
        
        #region Fields
        private UIUI__Row1_FieldValue_ComboBox mUIUI__Row1_FieldValue_ComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUI__Row1_FieldValue_ComboBox : WpfComboBox
    {
        
        public UIUI__Row1_FieldValue_ComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_FieldValue_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit AText
        {
            get
            {
                if ((this.mAText == null))
                {
                    this.mAText = new WpfEdit(this);
                    #region Search Criteria
                    this.mAText.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mAText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mAText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Difference_Decision : WpfCustom
    {
        
        public Difference_Decision(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowDecisionDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "FlowDecisionDesigner";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfEdit DisplayNameTextBox
        {
            get
            {
                if ((this.mDisplayNameTextBox == null))
                {
                    this.mDisplayNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mDisplayNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DisplayNameTextBox";
                    this.mDisplayNameTextBox.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDisplayNameTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mDisplayNameTextBox;
        #endregion
    }
}
