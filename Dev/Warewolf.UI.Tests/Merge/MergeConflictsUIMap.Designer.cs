// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Warewolf.UI.Tests.Merge.MergeConflictsUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class MergeConflictsUIMap
    {
        
        #region Properties
        public MainWindow MainWindow
        {
            get
            {
                if ((this.mMainWindow == null))
                {
                    this.mMainWindow = new MainWindow();
                }
                return this.mMainWindow;
            }
        }
        
        public MergeDialogViewWindow MergeDialogViewWindow
        {
            get
            {
                if ((this.mMergeDialogViewWindow == null))
                {
                    this.mMergeDialogViewWindow = new MergeDialogViewWindow();
                }
                return this.mMergeDialogViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private MainWindow mMainWindow;
        
        private MergeDialogViewWindow mMergeDialogViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MainWindow : WpfWindow
    {
        
        public MainWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.Name, "Warewolf", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public DockManager DockManager
        {
            get
            {
                if ((this.mDockManager == null))
                {
                    this.mDockManager = new DockManager(this);
                }
                return this.mDockManager;
            }
        }
        #endregion
        
        #region Fields
        private DockManager mDockManager;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class DockManager : WpfCustom
    {
        
        public DockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitPaneMiddle SplitPaneMiddle
        {
            get
            {
                if ((this.mSplitPaneMiddle == null))
                {
                    this.mSplitPaneMiddle = new SplitPaneMiddle(this);
                }
                return this.mSplitPaneMiddle;
            }
        }
        #endregion
        
        #region Fields
        private SplitPaneMiddle mSplitPaneMiddle;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SplitPaneMiddle : WpfCustom
    {
        
        public SplitPaneMiddle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabManSplitPane TabManSplitPane
        {
            get
            {
                if ((this.mTabManSplitPane == null))
                {
                    this.mTabManSplitPane = new TabManSplitPane(this);
                }
                return this.mTabManSplitPane;
            }
        }
        #endregion
        
        #region Fields
        private TabManSplitPane mTabManSplitPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class TabManSplitPane : WpfCustom
    {
        
        public TabManSplitPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SplitPane_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabMan TabMan
        {
            get
            {
                if ((this.mTabMan == null))
                {
                    this.mTabMan = new TabMan(this);
                }
                return this.mTabMan;
            }
        }
        #endregion
        
        #region Fields
        private TabMan mTabMan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class TabMan : WpfTabList
    {
        
        public TabMan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public MergeTab MergeTab
        {
            get
            {
                if ((this.mMergeTab == null))
                {
                    this.mMergeTab = new MergeTab(this);
                }
                return this.mMergeTab;
            }
        }
        #endregion
        
        #region Fields
        private MergeTab mMergeTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeTab : WpfTabPage
    {
        
        public MergeTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.MergeViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        
        public WpfText TabDescription
        {
            get
            {
                if ((this.mTabDescription == null))
                {
                    this.mTabDescription = new WpfText(this);
                    #region Search Criteria
                    this.mTabDescription.SearchProperties[WpfText.PropertyNames.Name] = "Merge Conflicts";
                    this.mTabDescription.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTabDescription;
            }
        }
        
        public WorkSurfaceContext WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCloseButton;
        
        private WpfText mTabDescription;
        
        private WorkSurfaceContext mWorkSurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class WorkSurfaceContext : WpfCustom
    {
        
        public WorkSurfaceContext(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ContentDockManager ContentDockManager
        {
            get
            {
                if ((this.mContentDockManager == null))
                {
                    this.mContentDockManager = new ContentDockManager(this);
                }
                return this.mContentDockManager;
            }
        }
        #endregion
        
        #region Fields
        private ContentDockManager mContentDockManager;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ContentDockManager : WpfCustom
    {
        
        public ContentDockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ContentDockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public MergeWorkflowView MergeWorkflowView
        {
            get
            {
                if ((this.mMergeWorkflowView == null))
                {
                    this.mMergeWorkflowView = new MergeWorkflowView(this);
                }
                return this.mMergeWorkflowView;
            }
        }
        #endregion
        
        #region Fields
        private MergeWorkflowView mMergeWorkflowView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeWorkflowView : WpfCustom
    {
        
        public MergeWorkflowView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.ClassName, "MergeWorkflowView", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane(this);
                }
                return this.mScrollViewerPane;
            }
        }
        
        public UIUserControl_1Custom UIUserControl_1Custom
        {
            get
            {
                if ((this.mUIUserControl_1Custom == null))
                {
                    this.mUIUserControl_1Custom = new UIUserControl_1Custom(this);
                }
                return this.mUIUserControl_1Custom;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane mScrollViewerPane;
        
        private UIUserControl_1Custom mUIUserControl_1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ScrollViewerPane : WpfPane
    {
        
        public ScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "MergeGridScrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariablesExpander VariablesExpander
        {
            get
            {
                if ((this.mVariablesExpander == null))
                {
                    this.mVariablesExpander = new VariablesExpander(this);
                }
                return this.mVariablesExpander;
            }
        }
        
        public WpfRadioButton RightSelectAndApplyWFRadioButton
        {
            get
            {
                if ((this.mRightSelectAndApplyWFRadioButton == null))
                {
                    this.mRightSelectAndApplyWFRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mRightSelectAndApplyWFRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DifferenceWorkflowRB_AutoID";
                    this.mRightSelectAndApplyWFRadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mRightSelectAndApplyWFRadioButton;
            }
        }
        
        public WpfRadioButton LeftSelectAndApplyWFRadioButton
        {
            get
            {
                if ((this.mLeftSelectAndApplyWFRadioButton == null))
                {
                    this.mLeftSelectAndApplyWFRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mLeftSelectAndApplyWFRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_CurrentWorkflowRB_AutoID";
                    this.mLeftSelectAndApplyWFRadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mLeftSelectAndApplyWFRadioButton;
            }
        }
        
        public ConflictsTree ConflictsTree
        {
            get
            {
                if ((this.mConflictsTree == null))
                {
                    this.mConflictsTree = new ConflictsTree(this);
                }
                return this.mConflictsTree;
            }
        }
        #endregion
        
        #region Fields
        private VariablesExpander mVariablesExpander;
        
        private WpfRadioButton mRightSelectAndApplyWFRadioButton;
        
        private WpfRadioButton mLeftSelectAndApplyWFRadioButton;
        
        private ConflictsTree mConflictsTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class VariablesExpander : WpfExpander
    {
        
        public VariablesExpander(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "UI_VariablesExpander_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public VariablesHeader VariablesHeader
        {
            get
            {
                if ((this.mVariablesHeader == null))
                {
                    this.mVariablesHeader = new VariablesHeader(this);
                }
                return this.mVariablesHeader;
            }
        }
        #endregion
        
        #region Fields
        private VariablesHeader mVariablesHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class VariablesHeader : WpfButton
    {
        
        public VariablesHeader(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton LeftVariablesRadio
        {
            get
            {
                if ((this.mLeftVariablesRadio == null))
                {
                    this.mLeftVariablesRadio = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mLeftVariablesRadio.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_CurrentVariablesRB_AutoID";
                    this.mLeftVariablesRadio.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mLeftVariablesRadio;
            }
        }
        
        public WpfText LeftVariablesText
        {
            get
            {
                if ((this.mLeftVariablesText == null))
                {
                    this.mLeftVariablesText = new WpfText(this);
                    #region Search Criteria
                    this.mLeftVariablesText.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_CurrentVariablesText_AutoID";
                    this.mLeftVariablesText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mLeftVariablesText;
            }
        }
        
        public WpfRadioButton DifferenceVariableRadioButton
        {
            get
            {
                if ((this.mDifferenceVariableRadioButton == null))
                {
                    this.mDifferenceVariableRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDifferenceVariableRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DifferenceVariablesRB_AutoID";
                    this.mDifferenceVariableRadioButton.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mDifferenceVariableRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mLeftVariablesRadio;
        
        private WpfText mLeftVariablesText;
        
        private WpfRadioButton mDifferenceVariableRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ConflictsTree : WpfTree
    {
        
        public ConflictsTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "UI_ConflictsTreeView_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeTreeItem MergeTreeItem
        {
            get
            {
                if ((this.mMergeTreeItem == null))
                {
                    this.mMergeTreeItem = new MergeTreeItem(this);
                }
                return this.mMergeTreeItem;
            }
        }
        
        public MergeTreeItem2 MergeTreeItem2
        {
            get
            {
                if ((this.mMergeTreeItem2 == null))
                {
                    this.mMergeTreeItem2 = new MergeTreeItem2(this);
                }
                return this.mMergeTreeItem2;
            }
        }
        #endregion
        
        #region Fields
        private MergeTreeItem mMergeTreeItem;
        
        private MergeTreeItem2 mMergeTreeItem2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeTreeItem : WpfTreeItem
    {
        
        public MergeTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.ViewModels.Merge.CompleteConflict";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeItemExpander MergeItemExpander
        {
            get
            {
                if ((this.mMergeItemExpander == null))
                {
                    this.mMergeItemExpander = new MergeItemExpander(this);
                }
                return this.mMergeItemExpander;
            }
        }
        #endregion
        
        #region Fields
        private MergeItemExpander mMergeItemExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeItemExpander : WpfExpander
    {
        
        public MergeItemExpander(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeButton MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private MergeButton mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton : WpfButton
    {
        
        public MergeButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton FirstAssign_Difference
        {
            get
            {
                if ((this.mFirstAssign_Difference == null))
                {
                    this.mFirstAssign_Difference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mFirstAssign_Difference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mFirstAssign_Difference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFirstAssign_Difference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mFirstAssign_Difference;
            }
        }
        
        public WpfRadioButton FirstAssign_Current
        {
            get
            {
                if ((this.mFirstAssign_Current == null))
                {
                    this.mFirstAssign_Current = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mFirstAssign_Current.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mFirstAssign_Current.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mFirstAssign_Current.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mFirstAssign_Current;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mFirstAssign_Difference;
        
        private WpfRadioButton mFirstAssign_Current;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeTreeItem2 : WpfTreeItem
    {
        
        public MergeTreeItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.ViewModels.Merge.CompleteConflict";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeExpander MergeExpander
        {
            get
            {
                if ((this.mMergeExpander == null))
                {
                    this.mMergeExpander = new MergeExpander(this);
                }
                return this.mMergeExpander;
            }
        }
        #endregion
        
        #region Fields
        private MergeExpander mMergeExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeExpander : WpfExpander
    {
        
        public MergeExpander(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "TreeViewExpander";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public MergeButton1 MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new MergeButton1(this);
                }
                return this.mMergeButton;
            }
        }
        #endregion
        
        #region Fields
        private MergeButton1 mMergeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeButton1 : WpfButton
    {
        
        public MergeButton1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton SecondAssign_Current
        {
            get
            {
                if ((this.mSecondAssign_Current == null))
                {
                    this.mSecondAssign_Current = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mSecondAssign_Current.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderCurrentHeaderRB_AutoID";
                    this.mSecondAssign_Current.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSecondAssign_Current.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mSecondAssign_Current;
            }
        }
        
        public WpfRadioButton SecondAssign_Difference
        {
            get
            {
                if ((this.mSecondAssign_Difference == null))
                {
                    this.mSecondAssign_Difference = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mSecondAssign_Difference.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_TreeViewExpanderDifferenceHeaderRB_AutoID";
                    this.mSecondAssign_Difference.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSecondAssign_Difference.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mSecondAssign_Difference;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mSecondAssign_Current;
        
        private WpfRadioButton mSecondAssign_Difference;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUserControl_1Custom : WpfCustom
    {
        
        public UIUserControl_1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIScrollViewerPane UIScrollViewerPane
        {
            get
            {
                if ((this.mUIScrollViewerPane == null))
                {
                    this.mUIScrollViewerPane = new UIScrollViewerPane(this);
                }
                return this.mUIScrollViewerPane;
            }
        }
        #endregion
        
        #region Fields
        private UIScrollViewerPane mUIScrollViewerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIScrollViewerPane : WpfPane
    {
        
        public UIScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "scrollViewer";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIActivityBuilderCustom UIActivityBuilderCustom
        {
            get
            {
                if ((this.mUIActivityBuilderCustom == null))
                {
                    this.mUIActivityBuilderCustom = new UIActivityBuilderCustom(this);
                }
                return this.mUIActivityBuilderCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIActivityBuilderCustom mUIActivityBuilderCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIActivityBuilderCustom : WpfCustom
    {
        
        public UIActivityBuilderCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ActivityTypeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActivityTypeDesigner";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIWorkflowItemPresenteCustom UIWorkflowItemPresenteCustom
        {
            get
            {
                if ((this.mUIWorkflowItemPresenteCustom == null))
                {
                    this.mUIWorkflowItemPresenteCustom = new UIWorkflowItemPresenteCustom(this);
                }
                return this.mUIWorkflowItemPresenteCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIWorkflowItemPresenteCustom mUIWorkflowItemPresenteCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIWorkflowItemPresenteCustom : WpfCustom
    {
        
        public UIWorkflowItemPresenteCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UIFlowchartCustom UIFlowchartCustom
        {
            get
            {
                if ((this.mUIFlowchartCustom == null))
                {
                    this.mUIFlowchartCustom = new UIFlowchartCustom(this);
                }
                return this.mUIFlowchartCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIFlowchartCustom mUIFlowchartCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFlowchartCustom : WpfCustom
    {
        
        public UIFlowchartCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MergeWfWithVersion(FlowchartDesigner)";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfCustom FirstAssign_Diff_On_Surface
        {
            get
            {
                if ((this.mFirstAssign_Diff_On_Surface == null))
                {
                    this.mFirstAssign_Diff_On_Surface = new WpfCustom(this);
                    #region Search Criteria
                    this.mFirstAssign_Diff_On_Surface.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignDesigner";
                    this.mFirstAssign_Diff_On_Surface.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Assign (0)(MultiAssignDesigner)";
                    this.mFirstAssign_Diff_On_Surface.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mFirstAssign_Diff_On_Surface;
            }
        }
        
        public WpfCustom SecondAssign_Curr_On_Surface
        {
            get
            {
                if ((this.mSecondAssign_Curr_On_Surface == null))
                {
                    this.mSecondAssign_Curr_On_Surface = new WpfCustom(this);
                    #region Search Criteria
                    this.mSecondAssign_Curr_On_Surface.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignDesigner";
                    this.mSecondAssign_Curr_On_Surface.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Assign (1)(MultiAssignDesigner)";
                    this.mSecondAssign_Curr_On_Surface.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mSecondAssign_Curr_On_Surface;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mFirstAssign_Diff_On_Surface;
        
        private WpfCustom mSecondAssign_Curr_On_Surface;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeDialogViewWindow : WpfWindow
    {
        
        public MergeDialogViewWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MergeDialogView";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MergeDialogView");
            #endregion
        }
        
        #region Properties
        public ServerSource ServerSource
        {
            get
            {
                if ((this.mServerSource == null))
                {
                    this.mServerSource = new ServerSource(this);
                }
                return this.mServerSource;
            }
        }
        
        public WpfButton MergeButton
        {
            get
            {
                if ((this.mMergeButton == null))
                {
                    this.mMergeButton = new WpfButton(this);
                    #region Search Criteria
                    this.mMergeButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "MergeButton";
                    this.mMergeButton.WindowTitles.Add("MergeDialogView");
                    #endregion
                }
                return this.mMergeButton;
            }
        }
        
        public MergeResourceVersionList MergeResourceVersionList
        {
            get
            {
                if ((this.mMergeResourceVersionList == null))
                {
                    this.mMergeResourceVersionList = new MergeResourceVersionList(this);
                }
                return this.mMergeResourceVersionList;
            }
        }
        #endregion
        
        #region Fields
        private ServerSource mServerSource;
        
        private WpfButton mMergeButton;
        
        private MergeResourceVersionList mMergeResourceVersionList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ServerSource : WpfCustom
    {
        
        public ServerSource(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourceConnectControl";
            this.WindowTitles.Add("MergeDialogView");
            #endregion
        }
        
        #region Properties
        public ServerComboBox ServerComboBox
        {
            get
            {
                if ((this.mServerComboBox == null))
                {
                    this.mServerComboBox = new ServerComboBox(this);
                }
                return this.mServerComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ServerComboBox mServerComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ServerComboBox : WpfCustom
    {
        
        public ServerComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TheServerComboBox";
            this.WindowTitles.Add("MergeDialogView");
            #endregion
        }
        
        #region Properties
        public WpfButton ServerDropDown
        {
            get
            {
                if ((this.mServerDropDown == null))
                {
                    this.mServerDropDown = new WpfButton(this);
                    #region Search Criteria
                    this.mServerDropDown.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mServerDropDown.WindowTitles.Add("MergeDialogView");
                    #endregion
                }
                return this.mServerDropDown;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mServerDropDown;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MergeResourceVersionList : WpfList
    {
        
        public MergeResourceVersionList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "MergeResourceVersionList";
            this.WindowTitles.Add("MergeDialogView");
            #endregion
        }
        
        #region Properties
        public WarewolfStudioViewMoListItem WarewolfStudioViewMoListItem
        {
            get
            {
                if ((this.mWarewolfStudioViewMoListItem == null))
                {
                    this.mWarewolfStudioViewMoListItem = new WarewolfStudioViewMoListItem(this);
                }
                return this.mWarewolfStudioViewMoListItem;
            }
        }
        #endregion
        
        #region Fields
        private WarewolfStudioViewMoListItem mWarewolfStudioViewMoListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class WarewolfStudioViewMoListItem : WpfListItem
    {
        
        public WarewolfStudioViewMoListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.VersionViewModel";
            this.WindowTitles.Add("MergeDialogView");
            #endregion
        }
        
        #region Properties
        public ItemRadioButton ItemRadioButton
        {
            get
            {
                if ((this.mItemRadioButton == null))
                {
                    this.mItemRadioButton = new ItemRadioButton(this);
                }
                return this.mItemRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private ItemRadioButton mItemRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ItemRadioButton : WpfRadioButton
    {
        
        public ItemRadioButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("MergeDialogView");
            #endregion
        }
        
        #region Properties
        public UIV110122017100449SaveText UIV110122017100449SaveText
        {
            get
            {
                if ((this.mUIV110122017100449SaveText == null))
                {
                    this.mUIV110122017100449SaveText = new UIV110122017100449SaveText(this);
                }
                return this.mUIV110122017100449SaveText;
            }
        }
        #endregion
        
        #region Fields
        private UIV110122017100449SaveText mUIV110122017100449SaveText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIV110122017100449SaveText : WpfText
    {
        
        public UIV110122017100449SaveText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("MergeDialogView");
            #endregion
        }
        
        #region Properties
        public WpfText UIV110122017100449SaveText1
        {
            get
            {
                if ((this.mUIV110122017100449SaveText1 == null))
                {
                    this.mUIV110122017100449SaveText1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIV110122017100449SaveText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIV110122017100449SaveText1.WindowTitles.Add("MergeDialogView");
                    #endregion
                }
                return this.mUIV110122017100449SaveText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIV110122017100449SaveText1;
        #endregion
    }
}
