// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Warewolf.UI.Tests.Search.SearchUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class SearchUIMap
    {
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WpfCustom contentDockManager = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.SearchTab.WorkSurfaceContent.ContentDockManager;
            #endregion

            // Verify that the 'ControlType' property of 'ContentDockManager' custom control equals 'Custom'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.ContentDockManagerControlType, contentDockManager.ControlType.ToString());
        }
        
        #region Properties
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public MainStudioWindow MainStudioWindow
        {
            get
            {
                if ((this.mMainStudioWindow == null))
                {
                    this.mMainStudioWindow = new MainStudioWindow();
                }
                return this.mMainStudioWindow;
            }
        }
        
        public UIWarewolfDEV2SANELEMTWindow UIWarewolfDEV2SANELEMTWindow
        {
            get
            {
                if ((this.mUIWarewolfDEV2SANELEMTWindow == null))
                {
                    this.mUIWarewolfDEV2SANELEMTWindow = new UIWarewolfDEV2SANELEMTWindow();
                }
                return this.mUIWarewolfDEV2SANELEMTWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private MainStudioWindow mMainStudioWindow;
        
        private UIWarewolfDEV2SANELEMTWindow mUIWarewolfDEV2SANELEMTWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'ContentDockManager' custom control equals 'Custom'
        /// </summary>
        public string ContentDockManagerControlType = "Custom";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MainStudioWindow : WpfWindow
    {
        
        public MainStudioWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.Name, "Warewolf", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DockManager DockManager
        {
            get
            {
                if ((this.mDockManager == null))
                {
                    this.mDockManager = new DockManager(this);
                }
                return this.mDockManager;
            }
        }
        
        public WpfCustom RemoteConnectionInteCustom
        {
            get
            {
                if ((this.mRemoteConnectionInteCustom == null))
                {
                    this.mRemoteConnectionInteCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mRemoteConnectionInteCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mRemoteConnectionInteCustom.SearchProperties[WpfControl.PropertyNames.Name] = "Remote Connection Integration";
                    this.mRemoteConnectionInteCustom.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mRemoteConnectionInteCustom;
            }
        }
        #endregion
        
        #region Fields
        private DockManager mDockManager;
        
        private WpfCustom mRemoteConnectionInteCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class DockManager : WpfCustom
    {
        
        public DockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitPaneMiddle SplitPaneMiddle
        {
            get
            {
                if ((this.mSplitPaneMiddle == null))
                {
                    this.mSplitPaneMiddle = new SplitPaneMiddle(this);
                }
                return this.mSplitPaneMiddle;
            }
        }
        #endregion
        
        #region Fields
        private SplitPaneMiddle mSplitPaneMiddle;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SplitPaneMiddle : WpfCustom
    {
        
        public SplitPaneMiddle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabManSplitPane TabManSplitPane
        {
            get
            {
                if ((this.mTabManSplitPane == null))
                {
                    this.mTabManSplitPane = new TabManSplitPane(this);
                }
                return this.mTabManSplitPane;
            }
        }
        #endregion
        
        #region Fields
        private TabManSplitPane mTabManSplitPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class TabManSplitPane : WpfCustom
    {
        
        public TabManSplitPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SplitPane_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabMan TabMan
        {
            get
            {
                if ((this.mTabMan == null))
                {
                    this.mTabMan = new TabMan(this);
                }
                return this.mTabMan;
            }
        }
        #endregion
        
        #region Fields
        private TabMan mTabMan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class TabMan : WpfTabList
    {
        
        public TabMan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SearchTab SearchTab
        {
            get
            {
                if ((this.mSearchTab == null))
                {
                    this.mSearchTab = new SearchTab(this);
                }
                return this.mSearchTab;
            }
        }
        #endregion
        
        #region Fields
        private SearchTab mSearchTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SearchTab : WpfTabPage
    {
        
        public SearchTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SearchModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SearchConnectControlCustom SearchConnectControlCustom
        {
            get
            {
                if ((this.mSearchConnectControlCustom == null))
                {
                    this.mSearchConnectControlCustom = new SearchConnectControlCustom(this);
                }
                return this.mSearchConnectControlCustom;
            }
        }
        
        public WpfCustom LocalhostConnected
        {
            get
            {
                if ((this.mLocalhostConnected == null))
                {
                    this.mLocalhostConnected = new WpfCustom(this);
                    #region Search Criteria
                    this.mLocalhostConnected.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mLocalhostConnected.SearchProperties[WpfControl.PropertyNames.Name] = "localhost (Connected)";
                    this.mLocalhostConnected.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mLocalhostConnected;
            }
        }
        
        public WpfEdit SearchInputEdit
        {
            get
            {
                if ((this.mSearchInputEdit == null))
                {
                    this.mSearchInputEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mSearchInputEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtSearchInput";
                    this.mSearchInputEdit.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mSearchInputEdit;
            }
        }
        
        public WpfButton SearchButton
        {
            get
            {
                if ((this.mSearchButton == null))
                {
                    this.mSearchButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSearchButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnSearchInput";
                    this.mSearchButton.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mSearchButton;
            }
        }
        
        public SearchOptionsExpander SearchOptionsExpander
        {
            get
            {
                if ((this.mSearchOptionsExpander == null))
                {
                    this.mSearchOptionsExpander = new SearchOptionsExpander(this);
                }
                return this.mSearchOptionsExpander;
            }
        }
        
        public WpfCheckBox MatchcaseCheckBox
        {
            get
            {
                if ((this.mMatchcaseCheckBox == null))
                {
                    this.mMatchcaseCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mMatchcaseCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "cbSearchMatchCase";
                    this.mMatchcaseCheckBox.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mMatchcaseCheckBox;
            }
        }
        
        public WpfCheckBox MatchwholewordCheckBox
        {
            get
            {
                if ((this.mMatchwholewordCheckBox == null))
                {
                    this.mMatchwholewordCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mMatchwholewordCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "cbSearchMatchWholeWord";
                    this.mMatchwholewordCheckBox.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mMatchwholewordCheckBox;
            }
        }
        
        public WorkSurfaceContent WorkSurfaceContent
        {
            get
            {
                if ((this.mWorkSurfaceContent == null))
                {
                    this.mWorkSurfaceContent = new WorkSurfaceContent(this);
                }
                return this.mWorkSurfaceContent;
            }
        }
        #endregion
        
        #region Fields
        private SearchConnectControlCustom mSearchConnectControlCustom;
        
        private WpfCustom mLocalhostConnected;
        
        private WpfEdit mSearchInputEdit;
        
        private WpfButton mSearchButton;
        
        private SearchOptionsExpander mSearchOptionsExpander;
        
        private WpfCheckBox mMatchcaseCheckBox;
        
        private WpfCheckBox mMatchwholewordCheckBox;
        
        private WorkSurfaceContent mWorkSurfaceContent;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SearchConnectControlCustom : WpfCustom
    {
        
        public SearchConnectControlCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SearchConnectControl";
            this.WindowTitles.Add("SearchView");
            #endregion
        }
        
        #region Properties
        public ServerComboBox ServerComboBox
        {
            get
            {
                if ((this.mServerComboBox == null))
                {
                    this.mServerComboBox = new ServerComboBox(this);
                }
                return this.mServerComboBox;
            }
        }
        
        public WpfButton NewServerButton
        {
            get
            {
                if ((this.mNewServerButton == null))
                {
                    this.mNewServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "NewServerButton";
                    this.mNewServerButton.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mNewServerButton;
            }
        }
        
        public WpfButton EditServerSource
        {
            get
            {
                if ((this.mEditServerSource == null))
                {
                    this.mEditServerSource = new WpfButton(this);
                    #region Search Criteria
                    this.mEditServerSource.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SearchServerEditbtn_AutoID";
                    this.mEditServerSource.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mEditServerSource;
            }
        }
        #endregion
        
        #region Fields
        private ServerComboBox mServerComboBox;
        
        private WpfButton mNewServerButton;
        
        private WpfButton mEditServerSource;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ServerComboBox : WpfCustom
    {
        
        public ServerComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TheServerComboBox";
            this.WindowTitles.Add("SearchView");
            #endregion
        }
        
        #region Properties
        public WpfButton ServersToggleButton
        {
            get
            {
                if ((this.mServersToggleButton == null))
                {
                    this.mServersToggleButton = new WpfButton(this);
                    #region Search Criteria
                    this.mServersToggleButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mServersToggleButton.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mServersToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mServersToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SearchOptionsExpander : WpfExpander
    {
        
        public SearchOptionsExpander(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.Name] = "Search Options";
            this.WindowTitles.Add("SearchView");
            #endregion
        }
        
        #region Properties
        public SearchOptionsExpanderButton SearchOptionsExpanderButton
        {
            get
            {
                if ((this.mSearchOptionsExpanderButton == null))
                {
                    this.mSearchOptionsExpanderButton = new SearchOptionsExpanderButton(this);
                }
                return this.mSearchOptionsExpanderButton;
            }
        }
        
        public WpfCheckBox AllCheckBox
        {
            get
            {
                if ((this.mAllCheckBox == null))
                {
                    this.mAllCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mAllCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "cbSearchAll";
                    this.mAllCheckBox.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mAllCheckBox;
            }
        }
        
        public WpfCheckBox ServiceCheckBox
        {
            get
            {
                if ((this.mServiceCheckBox == null))
                {
                    this.mServiceCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mServiceCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "cbSearchWorkflowName";
                    this.mServiceCheckBox.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mServiceCheckBox;
            }
        }
        
        public WpfCheckBox ObjectCheckBox
        {
            get
            {
                if ((this.mObjectCheckBox == null))
                {
                    this.mObjectCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mObjectCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "cbSearchObjectName";
                    this.mObjectCheckBox.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mObjectCheckBox;
            }
        }
        
        public WpfCheckBox ToolTitleCheckBox
        {
            get
            {
                if ((this.mToolTitleCheckBox == null))
                {
                    this.mToolTitleCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mToolTitleCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "cbSearchToolTitle";
                    this.mToolTitleCheckBox.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mToolTitleCheckBox;
            }
        }
        
        public WpfCheckBox RecordsetCheckBox
        {
            get
            {
                if ((this.mRecordsetCheckBox == null))
                {
                    this.mRecordsetCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "cbSearchRecSetName";
                    this.mRecordsetCheckBox.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mRecordsetCheckBox;
            }
        }
        
        public WpfCheckBox InputVariableCheckBox
        {
            get
            {
                if ((this.mInputVariableCheckBox == null))
                {
                    this.mInputVariableCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mInputVariableCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "cbSearchInputVariable";
                    this.mInputVariableCheckBox.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mInputVariableCheckBox;
            }
        }
        
        public WpfCheckBox OutputVariableCheckBox
        {
            get
            {
                if ((this.mOutputVariableCheckBox == null))
                {
                    this.mOutputVariableCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputVariableCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "cbSearchOutputVariable";
                    this.mOutputVariableCheckBox.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mOutputVariableCheckBox;
            }
        }
        
        public WpfCheckBox ScalarCheckBox
        {
            get
            {
                if ((this.mScalarCheckBox == null))
                {
                    this.mScalarCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mScalarCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "cbSearchScalarName";
                    this.mScalarCheckBox.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mScalarCheckBox;
            }
        }
        
        public WpfCheckBox TestNameCheckBox
        {
            get
            {
                if ((this.mTestNameCheckBox == null))
                {
                    this.mTestNameCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mTestNameCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "cbSearchTestName";
                    this.mTestNameCheckBox.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mTestNameCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private SearchOptionsExpanderButton mSearchOptionsExpanderButton;
        
        private WpfCheckBox mAllCheckBox;
        
        private WpfCheckBox mServiceCheckBox;
        
        private WpfCheckBox mObjectCheckBox;
        
        private WpfCheckBox mToolTitleCheckBox;
        
        private WpfCheckBox mRecordsetCheckBox;
        
        private WpfCheckBox mInputVariableCheckBox;
        
        private WpfCheckBox mOutputVariableCheckBox;
        
        private WpfCheckBox mScalarCheckBox;
        
        private WpfCheckBox mTestNameCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SearchOptionsExpanderButton : WpfButton
    {
        
        public SearchOptionsExpanderButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "HeaderSite";
            this.WindowTitles.Add("SearchView");
            #endregion
        }
        
        #region Properties
        public WpfText UISearchOptionsText
        {
            get
            {
                if ((this.mUISearchOptionsText == null))
                {
                    this.mUISearchOptionsText = new WpfText(this);
                    #region Search Criteria
                    this.mUISearchOptionsText.SearchProperties[WpfText.PropertyNames.Name] = "Search Options";
                    this.mUISearchOptionsText.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mUISearchOptionsText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUISearchOptionsText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class WorkSurfaceContent : WpfCustom
    {
        
        public WorkSurfaceContent(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public ContentDockManager ContentDockManager
        {
            get
            {
                if ((this.mContentDockManager == null))
                {
                    this.mContentDockManager = new ContentDockManager(this);
                }
                return this.mContentDockManager;
            }
        }
        #endregion
        
        #region Fields
        private ContentDockManager mContentDockManager;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ContentDockManager : WpfCustom
    {
        
        public ContentDockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ContentDockManager";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public SearchViewUserControl SearchViewUserControl
        {
            get
            {
                if ((this.mSearchViewUserControl == null))
                {
                    this.mSearchViewUserControl = new SearchViewUserControl(this);
                }
                return this.mSearchViewUserControl;
            }
        }
        #endregion
        
        #region Fields
        private SearchViewUserControl mSearchViewUserControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SearchViewUserControl : WpfCustom
    {
        
        public SearchViewUserControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SearchView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SearchViewUserControl";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public SearchResultsTable SearchResultsTable
        {
            get
            {
                if ((this.mSearchResultsTable == null))
                {
                    this.mSearchResultsTable = new SearchResultsTable(this);
                }
                return this.mSearchResultsTable;
            }
        }
        #endregion
        
        #region Fields
        private SearchResultsTable mSearchResultsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SearchResultsTable : WpfTable
    {
        
        public SearchResultsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SearchResults";
            this.WindowTitles.Add("SearchView");
            #endregion
        }
        
        #region Properties
        public ResultRow1 ResultRow1
        {
            get
            {
                if ((this.mResultRow1 == null))
                {
                    this.mResultRow1 = new ResultRow1(this);
                }
                return this.mResultRow1;
            }
        }
        #endregion
        
        #region Fields
        private ResultRow1 mResultRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ResultRow1 : WpfRow
    {
        
        public ResultRow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = "Dev2.Common.Search.SearchResult";
            this.SearchProperties.Add(new PropertyExpression(WpfRow.PropertyNames.ClassName, "DataGridRow", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("SearchView");
            #endregion
        }
        
        #region Properties
        public Name Name
        {
            get
            {
                if ((this.mName == null))
                {
                    this.mName = new Name(this);
                }
                return this.mName;
            }
        }
        
        public Path Path
        {
            get
            {
                if ((this.mPath == null))
                {
                    this.mPath = new Path(this);
                }
                return this.mPath;
            }
        }
        
        public TypeCell TypeCell
        {
            get
            {
                if ((this.mTypeCell == null))
                {
                    this.mTypeCell = new TypeCell(this);
                }
                return this.mTypeCell;
            }
        }
        
        public MatchCell MatchCell
        {
            get
            {
                if ((this.mMatchCell == null))
                {
                    this.mMatchCell = new MatchCell(this);
                }
                return this.mMatchCell;
            }
        }
        
        public WpfCell NameCell
        {
            get
            {
                if ((this.mNameCell == null))
                {
                    this.mNameCell = new WpfCell(this);
                    #region Search Criteria
                    this.mNameCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Name";
                    this.mNameCell.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn1";
                    this.mNameCell.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mNameCell;
            }
        }
        #endregion
        
        #region Fields
        private Name mName;
        
        private Path mPath;
        
        private TypeCell mTypeCell;
        
        private MatchCell mMatchCell;
        
        private WpfCell mNameCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Name : WpfCell
    {
        
        public Name(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn1";
            this.WindowTitles.Add("SearchView");
            #endregion
        }
        
        #region Properties
        public WorkflowContainingIputVariable WorkflowContainingIputVariable
        {
            get
            {
                if ((this.mWorkflowContainingIputVariable == null))
                {
                    this.mWorkflowContainingIputVariable = new WorkflowContainingIputVariable(this);
                }
                return this.mWorkflowContainingIputVariable;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowContainingIputVariable mWorkflowContainingIputVariable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class WorkflowContainingIputVariable : WpfText
    {
        
        public WorkflowContainingIputVariable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "WorkFlowContainingInputVariable";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink WorkFlowContainingInputVariable
        {
            get
            {
                if ((this.mWorkFlowContainingInputVariable == null))
                {
                    this.mWorkFlowContainingInputVariable = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mWorkFlowContainingInputVariable.SearchProperties[WpfHyperlink.PropertyNames.Name] = "WorkFlowContainingInputVariable";
                    this.mWorkFlowContainingInputVariable.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mWorkFlowContainingInputVariable;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mWorkFlowContainingInputVariable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Path : WpfCell
    {
        
        public Path(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Path";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn2";
            this.WindowTitles.Add("SearchView");
            #endregion
        }
        
        #region Properties
        public WorkFlowContainingInputVariable WorkFlowContainingInputVariable
        {
            get
            {
                if ((this.mWorkFlowContainingInputVariable == null))
                {
                    this.mWorkFlowContainingInputVariable = new WorkFlowContainingInputVariable(this);
                }
                return this.mWorkFlowContainingInputVariable;
            }
        }
        #endregion
        
        #region Fields
        private WorkFlowContainingInputVariable mWorkFlowContainingInputVariable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class WorkFlowContainingInputVariable : WpfText
    {
        
        public WorkFlowContainingInputVariable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "WorkFlowContainingInputVariable";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink UIWorkFlowContainingInHyperlink
        {
            get
            {
                if ((this.mUIWorkFlowContainingInHyperlink == null))
                {
                    this.mUIWorkFlowContainingInHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mUIWorkFlowContainingInHyperlink.SearchProperties[WpfHyperlink.PropertyNames.Name] = "WorkFlowContainingInputVariable";
                    this.mUIWorkFlowContainingInHyperlink.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIWorkFlowContainingInHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mUIWorkFlowContainingInHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class TypeCell : WpfCell
    {
        
        public TypeCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Type";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn3";
            this.WindowTitles.Add("SearchView");
            #endregion
        }
        
        #region Properties
        public WpfText Type
        {
            get
            {
                if ((this.mType == null))
                {
                    this.mType = new WpfText(this);
                    #region Search Criteria
                    this.mType.SearchProperties[WpfText.PropertyNames.Name] = "WorkflowName";
                    this.mType.WindowTitles.Add("SearchView");
                    #endregion
                }
                return this.mType;
            }
        }
        
        public WpfText TestNameText
        {
            get
            {
                if ((this.mTestNameText == null))
                {
                    this.mTestNameText = new WpfText(this);
                    #region Search Criteria
                    this.mTestNameText.SearchProperties[WpfText.PropertyNames.Name] = "TestName";
                    this.mTestNameText.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mTestNameText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mType;
        
        private WpfText mTestNameText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MatchCell : WpfCell
    {
        
        public MatchCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Match";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_CellColumn4";
            this.WindowTitles.Add("SearchView");
            #endregion
        }
        
        #region Properties
        public WpfText OutputIsGreaterThan5
        {
            get
            {
                if ((this.mOutputIsGreaterThan5 == null))
                {
                    this.mOutputIsGreaterThan5 = new WpfText(this);
                    #region Search Criteria
                    this.mOutputIsGreaterThan5.SearchProperties[WpfText.PropertyNames.Name] = "OutputIsGreaterThan5";
                    this.mOutputIsGreaterThan5.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mOutputIsGreaterThan5;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mOutputIsGreaterThan5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIWarewolfDEV2SANELEMTWindow : WpfWindow
    {
        
        public UIWarewolfDEV2SANELEMTWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Warewolf (DEV2\\SANELE.MTHEMBU)";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UISearchViewUserControCustom UISearchViewUserControCustom
        {
            get
            {
                if ((this.mUISearchViewUserControCustom == null))
                {
                    this.mUISearchViewUserControCustom = new UISearchViewUserControCustom(this);
                }
                return this.mUISearchViewUserControCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISearchViewUserControCustom mUISearchViewUserControCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISearchViewUserControCustom : WpfCustom
    {
        
        public UISearchViewUserControCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SearchView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SearchViewUserControl";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public UISearchOptionsExpander UISearchOptionsExpander
        {
            get
            {
                if ((this.mUISearchOptionsExpander == null))
                {
                    this.mUISearchOptionsExpander = new UISearchOptionsExpander(this);
                }
                return this.mUISearchOptionsExpander;
            }
        }
        #endregion
        
        #region Fields
        private UISearchOptionsExpander mUISearchOptionsExpander;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISearchOptionsExpander : WpfExpander
    {
        
        public UISearchOptionsExpander(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.Name] = "Search Options";
            this.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox UIAllCheckBox
        {
            get
            {
                if ((this.mUIAllCheckBox == null))
                {
                    this.mUIAllCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIAllCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "cbSearchAll";
                    this.mUIAllCheckBox.WindowTitles.Add("Warewolf (DEV2\\SANELE.MTHEMBU)");
                    #endregion
                }
                return this.mUIAllCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mUIAllCheckBox;
        #endregion
    }
}
