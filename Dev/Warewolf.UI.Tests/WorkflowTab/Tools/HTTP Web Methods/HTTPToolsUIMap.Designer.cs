// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Warewolf.UITests.WorkflowTab.Tools.HTTPWebMethods.HTTPToolsUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class HTTPToolsUIMap
    {
        
        /// <summary>
        /// Open_Tools_UI_Map_Designer_To_Flowchart - Use 'Open_Tools_UI_Map_Designer_To_FlowchartParams' to pass parameters into this method.
        /// </summary>
        public void Open_Tools_UI_Map_Designer_To_Flowchart()
        {
            #region Variable Declarations
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.TabManSplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.DesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Verify that the 'Exists' property of 'Flowchart' custom control equals 'True'
            Assert.AreEqual(this.Open_Tools_UI_Map_Designer_To_FlowchartParams.FlowchartExists, flowchart.Exists, "Flowchart does not exist.");
        }
        
        #region Properties
        public virtual Open_Tools_UI_Map_Designer_To_FlowchartParams Open_Tools_UI_Map_Designer_To_FlowchartParams
        {
            get
            {
                if ((this.mOpen_Tools_UI_Map_Designer_To_FlowchartParams == null))
                {
                    this.mOpen_Tools_UI_Map_Designer_To_FlowchartParams = new Open_Tools_UI_Map_Designer_To_FlowchartParams();
                }
                return this.mOpen_Tools_UI_Map_Designer_To_FlowchartParams;
            }
        }
        
        public MainStudioWindow MainStudioWindow
        {
            get
            {
                if ((this.mMainStudioWindow == null))
                {
                    this.mMainStudioWindow = new MainStudioWindow();
                }
                return this.mMainStudioWindow;
            }
        }
        #endregion
        
        #region Fields
        private Open_Tools_UI_Map_Designer_To_FlowchartParams mOpen_Tools_UI_Map_Designer_To_FlowchartParams;
        
        private MainStudioWindow mMainStudioWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Tools_UI_Map_Designer_To_Flowchart'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Tools_UI_Map_Designer_To_FlowchartParams
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Flowchart' custom control equals 'True'
        /// </summary>
        public bool FlowchartExists = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MainStudioWindow : WpfWindow
    {
        
        public MainStudioWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.Name, "Warewolf", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DockManager DockManager
        {
            get
            {
                if ((this.mDockManager == null))
                {
                    this.mDockManager = new DockManager(this);
                }
                return this.mDockManager;
            }
        }
        #endregion
        
        #region Fields
        private DockManager mDockManager;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DockManager : WpfCustom
    {
        
        public DockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitPaneMiddle SplitPaneMiddle
        {
            get
            {
                if ((this.mSplitPaneMiddle == null))
                {
                    this.mSplitPaneMiddle = new SplitPaneMiddle(this);
                }
                return this.mSplitPaneMiddle;
            }
        }
        #endregion
        
        #region Fields
        private SplitPaneMiddle mSplitPaneMiddle;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneMiddle : WpfCustom
    {
        
        public SplitPaneMiddle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabManSplitPane TabManSplitPane
        {
            get
            {
                if ((this.mTabManSplitPane == null))
                {
                    this.mTabManSplitPane = new TabManSplitPane(this);
                }
                return this.mTabManSplitPane;
            }
        }
        #endregion
        
        #region Fields
        private TabManSplitPane mTabManSplitPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabManSplitPane : WpfCustom
    {
        
        public TabManSplitPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SplitPane_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabMan TabMan
        {
            get
            {
                if ((this.mTabMan == null))
                {
                    this.mTabMan = new TabMan(this);
                }
                return this.mTabMan;
            }
        }
        #endregion
        
        #region Fields
        private TabMan mTabMan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabMan : WpfTabList
    {
        
        public TabMan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowTab WorkflowTab
        {
            get
            {
                if ((this.mWorkflowTab == null))
                {
                    this.mWorkflowTab = new WorkflowTab(this);
                }
                return this.mWorkflowTab;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowTab mWorkflowTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowTab : WpfTabPage
    {
        
        public WorkflowTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.Workflow.WorkflowDesignerViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext mWorkSurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext : WpfCustom
    {
        
        public WorkSurfaceContext(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowDesignerView WorkflowDesignerView
        {
            get
            {
                if ((this.mWorkflowDesignerView == null))
                {
                    this.mWorkflowDesignerView = new WorkflowDesignerView(this);
                }
                return this.mWorkflowDesignerView;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowDesignerView mWorkflowDesignerView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowDesignerView : WpfCustom
    {
        
        public WorkflowDesignerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DesignerView DesignerView
        {
            get
            {
                if ((this.mDesignerView == null))
                {
                    this.mDesignerView = new DesignerView(this);
                }
                return this.mDesignerView;
            }
        }
        #endregion
        
        #region Fields
        private DesignerView mDesignerView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DesignerView : WpfCustom
    {
        
        public DesignerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane(this);
                }
                return this.mScrollViewerPane;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane mScrollViewerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane : WpfPane
    {
        
        public ScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "scrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ActivityTypeDesigner ActivityTypeDesigner
        {
            get
            {
                if ((this.mActivityTypeDesigner == null))
                {
                    this.mActivityTypeDesigner = new ActivityTypeDesigner(this);
                }
                return this.mActivityTypeDesigner;
            }
        }
        #endregion
        
        #region Fields
        private ActivityTypeDesigner mActivityTypeDesigner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ActivityTypeDesigner : WpfCustom
    {
        
        public ActivityTypeDesigner(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ActivityTypeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActivityTypeDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowItemPresenter WorkflowItemPresenter
        {
            get
            {
                if ((this.mWorkflowItemPresenter == null))
                {
                    this.mWorkflowItemPresenter = new WorkflowItemPresenter(this);
                }
                return this.mWorkflowItemPresenter;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowItemPresenter mWorkflowItemPresenter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowItemPresenter : WpfCustom
    {
        
        public WorkflowItemPresenter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Flowchart Flowchart
        {
            get
            {
                if ((this.mFlowchart == null))
                {
                    this.mFlowchart = new Flowchart(this);
                }
                return this.mFlowchart;
            }
        }
        #endregion
        
        #region Fields
        private Flowchart mFlowchart;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Flowchart : WpfCustom
    {
        
        public Flowchart(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WebDelete WebDelete
        {
            get
            {
                if ((this.mWebDelete == null))
                {
                    this.mWebDelete = new WebDelete(this);
                }
                return this.mWebDelete;
            }
        }
        
        public WebGet WebGet
        {
            get
            {
                if ((this.mWebGet == null))
                {
                    this.mWebGet = new WebGet(this);
                }
                return this.mWebGet;
            }
        }
        
        public WebPost WebPost
        {
            get
            {
                if ((this.mWebPost == null))
                {
                    this.mWebPost = new WebPost(this);
                }
                return this.mWebPost;
            }
        }
        
        public WebPut WebPut
        {
            get
            {
                if ((this.mWebPut == null))
                {
                    this.mWebPut = new WebPut(this);
                }
                return this.mWebPut;
            }
        }
        #endregion
        
        #region Fields
        private WebDelete mWebDelete;
        
        private WebGet mWebGet;
        
        private WebPost mWebPost;
        
        private WebPut mWebPut;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebDelete : WpfCustom
    {
        
        public WebDelete(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "DELETE Web Method", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeView LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfCustom SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new WpfCustom(this);
                    #region Search Criteria
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
                    this.mSmallView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private LargeView mLargeView;
        
        private WpfButton mDoneButton;
        
        private WpfCustom mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView : WpfCustom
    {
        
        public LargeView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfTable InputDataGridTable
        {
            get
            {
                if ((this.mInputDataGridTable == null))
                {
                    this.mInputDataGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mInputDataGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
                    this.mInputDataGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputDataGridTable;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.Name] = "Cancel";
                    this.mCancelButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton PasteButton
        {
            get
            {
                if ((this.mPasteButton == null))
                {
                    this.mPasteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mPasteButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Paste a customized response instead";
                    this.mPasteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PasteButton";
                    this.mPasteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasteButton;
            }
        }
        
        public Table Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table(this);
                }
                return this.mTable;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceEditButton";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceNewButton";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public SourcesComboBox SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new SourcesComboBox(this);
                }
                return this.mSourcesComboBox;
            }
        }
        
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public WpfCheckBox OutputtoObjectCheckBox
        {
            get
            {
                if ((this.mOutputtoObjectCheckBox == null))
                {
                    this.mOutputtoObjectCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputtoObjectCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "IsObjectCheckBox";
                    this.mOutputtoObjectCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputtoObjectCheckBox;
            }
        }
        
        public QueryStringText QueryStringText
        {
            get
            {
                if ((this.mQueryStringText == null))
                {
                    this.mQueryStringText = new QueryStringText(this);
                }
                return this.mQueryStringText;
            }
        }
        
        public WpfTable OutputsGridTable
        {
            get
            {
                if ((this.mOutputsGridTable == null))
                {
                    this.mOutputsGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mOutputsGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsMappingDataGrid";
                    this.mOutputsGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputsGridTable;
            }
        }
        
        public WpfEdit RecordSetTextBox
        {
            get
            {
                if ((this.mRecordSetTextBox == null))
                {
                    this.mRecordSetTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordSetTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RecordSetTextBox";
                    this.mRecordSetTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordSetTextBox;
            }
        }
        
        public WpfButton TestButton
        {
            get
            {
                if ((this.mTestButton == null))
                {
                    this.mTestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestActionButton";
                    this.mTestButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Test the procedure or function";
                    this.mTestButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestButton;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "GenerateOutputsDoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfTable mInputDataGridTable;
        
        private WpfButton mCancelButton;
        
        private WpfButton mPasteButton;
        
        private Table mTable;
        
        private WpfButton mEditSourceButton;
        
        private WpfButton mNewSourceButton;
        
        private SourcesComboBox mSourcesComboBox;
        
        private WpfButton mGenerateOutputsButton;
        
        private WpfCheckBox mOutputtoObjectCheckBox;
        
        private QueryStringText mQueryStringText;
        
        private WpfTable mOutputsGridTable;
        
        private WpfEdit mRecordSetTextBox;
        
        private WpfButton mTestButton;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table : WpfTable
    {
        
        public Table(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "Headers";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemRow1 ItemRow1
        {
            get
            {
                if ((this.mItemRow1 == null))
                {
                    this.mItemRow1 = new ItemRow1(this);
                }
                return this.mItemRow1;
            }
        }
        #endregion
        
        #region Fields
        private ItemRow1 mItemRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemRow1 : WpfRow
    {
        
        public ItemRow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = null;
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemValueCell ItemValueCell
        {
            get
            {
                if ((this.mItemValueCell == null))
                {
                    this.mItemValueCell = new ItemValueCell(this);
                }
                return this.mItemValueCell;
            }
        }
        
        public HeaderCell HeaderCell
        {
            get
            {
                if ((this.mHeaderCell == null))
                {
                    this.mHeaderCell = new HeaderCell(this);
                }
                return this.mHeaderCell;
            }
        }
        #endregion
        
        #region Fields
        private ItemValueCell mItemValueCell;
        
        private HeaderCell mHeaderCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemValueCell : WpfCell
    {
        
        public ItemValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueComboBox ValueComboBox
        {
            get
            {
                if ((this.mValueComboBox == null))
                {
                    this.mValueComboBox = new ValueComboBox(this);
                }
                return this.mValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ValueComboBox mValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueComboBox : WpfComboBox
    {
        
        public ValueComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "To supply additional header information in your get request, put the header info " +
                "in here.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderCell : WpfCell
    {
        
        public HeaderCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Header";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public HeaderComboBox HeaderComboBox
        {
            get
            {
                if ((this.mHeaderComboBox == null))
                {
                    this.mHeaderComboBox = new HeaderComboBox(this);
                }
                return this.mHeaderComboBox;
            }
        }
        #endregion
        
        #region Fields
        private HeaderComboBox mHeaderComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderComboBox : WpfComboBox
    {
        
        public HeaderComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "To supply additional header information in your get request, put the header info " +
                "in here.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourcesComboBox : WpfComboBox
    {
        
        public SourcesComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem UITesting
        {
            get
            {
                if ((this.mUITesting == null))
                {
                    this.mUITesting = new WpfListItem(this);
                    #region Search Criteria
                    this.mUITesting.SearchProperties[WpfListItem.PropertyNames.Instance] = "8";
                    this.mUITesting.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUITesting;
            }
        }
        
        public WpfListItem WebServiceSourceFromToolListItem
        {
            get
            {
                if ((this.mWebServiceSourceFromToolListItem == null))
                {
                    this.mWebServiceSourceFromToolListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebServiceSourceFromToolListItem.SearchProperties[WpfListItem.PropertyNames.Instance] = "5";
                    this.mWebServiceSourceFromToolListItem.WindowTitles.Add("Warewolf (DEV2\\DYLAN.DELPORT)");
                    #endregion
                }
                return this.mWebServiceSourceFromToolListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUITesting;
        
        private WpfListItem mWebServiceSourceFromToolListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QueryStringText : WpfText
    {
        
        public QueryStringText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "QueryStringLable";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebGet : WpfCustom
    {
        
        public WebGet(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WebServiceGetDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "GET Web Method", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeView1 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView1(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfCustom SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new WpfCustom(this);
                    #region Search Criteria
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
                    this.mSmallView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private LargeView1 mLargeView;
        
        private WpfButton mDoneButton;
        
        private WpfCustom mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView1 : WpfCustom
    {
        
        public LargeView1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfTable InputDataGridTable
        {
            get
            {
                if ((this.mInputDataGridTable == null))
                {
                    this.mInputDataGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mInputDataGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
                    this.mInputDataGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputDataGridTable;
            }
        }
        
        public WpfButton TestButton
        {
            get
            {
                if ((this.mTestButton == null))
                {
                    this.mTestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestActionButton";
                    this.mTestButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestButton;
            }
        }
        
        public HeadersTable HeadersTable
        {
            get
            {
                if ((this.mHeadersTable == null))
                {
                    this.mHeadersTable = new HeadersTable(this);
                }
                return this.mHeadersTable;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceEditButton";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceNewButton";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public WpfComboBox SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSourcesComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
                    this.mSourcesComboBox.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "Select the webservice host you want to use";
                    this.mSourcesComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesComboBox;
            }
        }
        
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public WpfCheckBox OutputtoObjectCheckBox
        {
            get
            {
                if ((this.mOutputtoObjectCheckBox == null))
                {
                    this.mOutputtoObjectCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputtoObjectCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "IsObjectCheckBox";
                    this.mOutputtoObjectCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputtoObjectCheckBox;
            }
        }
        
        public QueryStringText1 QueryStringText
        {
            get
            {
                if ((this.mQueryStringText == null))
                {
                    this.mQueryStringText = new QueryStringText1(this);
                }
                return this.mQueryStringText;
            }
        }
        
        public WpfTable OutputsGridTable
        {
            get
            {
                if ((this.mOutputsGridTable == null))
                {
                    this.mOutputsGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mOutputsGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsMappingDataGrid";
                    this.mOutputsGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputsGridTable;
            }
        }
        
        public WpfEdit RecordSetTextBox
        {
            get
            {
                if ((this.mRecordSetTextBox == null))
                {
                    this.mRecordSetTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordSetTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RecordSetTextBox";
                    this.mRecordSetTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordSetTextBox;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "GenerateOutputsDoneButton";
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Accept these results and continue";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.Name] = "Cancel";
                    this.mCancelButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton PasteButton
        {
            get
            {
                if ((this.mPasteButton == null))
                {
                    this.mPasteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mPasteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PasteButton";
                    this.mPasteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfTable mInputDataGridTable;
        
        private WpfButton mTestButton;
        
        private HeadersTable mHeadersTable;
        
        private WpfButton mEditSourceButton;
        
        private WpfButton mNewSourceButton;
        
        private WpfComboBox mSourcesComboBox;
        
        private WpfButton mGenerateOutputsButton;
        
        private WpfCheckBox mOutputtoObjectCheckBox;
        
        private QueryStringText1 mQueryStringText;
        
        private WpfTable mOutputsGridTable;
        
        private WpfEdit mRecordSetTextBox;
        
        private WpfButton mDoneButton;
        
        private WpfButton mCancelButton;
        
        private WpfButton mPasteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeadersTable : WpfTable
    {
        
        public HeadersTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "Headers";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemRow11 ItemRow1
        {
            get
            {
                if ((this.mItemRow1 == null))
                {
                    this.mItemRow1 = new ItemRow11(this);
                }
                return this.mItemRow1;
            }
        }
        #endregion
        
        #region Fields
        private ItemRow11 mItemRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemRow11 : WpfRow
    {
        
        public ItemRow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = null;
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemValueCell1 ItemValueCell
        {
            get
            {
                if ((this.mItemValueCell == null))
                {
                    this.mItemValueCell = new ItemValueCell1(this);
                }
                return this.mItemValueCell;
            }
        }
        
        public HeaderCell1 HeaderCell
        {
            get
            {
                if ((this.mHeaderCell == null))
                {
                    this.mHeaderCell = new HeaderCell1(this);
                }
                return this.mHeaderCell;
            }
        }
        #endregion
        
        #region Fields
        private ItemValueCell1 mItemValueCell;
        
        private HeaderCell1 mHeaderCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemValueCell1 : WpfCell
    {
        
        public ItemValueCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueComboBox1 ValueComboBox
        {
            get
            {
                if ((this.mValueComboBox == null))
                {
                    this.mValueComboBox = new ValueComboBox1(this);
                }
                return this.mValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ValueComboBox1 mValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueComboBox1 : WpfComboBox
    {
        
        public ValueComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "To supply additional header information in your get request, put the header info " +
                "in here.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderCell1 : WpfCell
    {
        
        public HeaderCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Header";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public HeaderComboBox1 HeaderComboBox
        {
            get
            {
                if ((this.mHeaderComboBox == null))
                {
                    this.mHeaderComboBox = new HeaderComboBox1(this);
                }
                return this.mHeaderComboBox;
            }
        }
        #endregion
        
        #region Fields
        private HeaderComboBox1 mHeaderComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderComboBox1 : WpfComboBox
    {
        
        public HeaderComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "To supply additional header information in your get request, put the header info " +
                "in here.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QueryStringText1 : WpfText
    {
        
        public QueryStringText1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "QueryStringLable";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebPost : WpfCustom
    {
        
        public WebPost(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WebServicePostDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "POST Web Method", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ResponseTextbox
        {
            get
            {
                if ((this.mResponseTextbox == null))
                {
                    this.mResponseTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mResponseTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ResponseTextbox";
                    this.mResponseTextbox.SearchProperties[WpfEdit.PropertyNames.Instance] = "2";
                    this.mResponseTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResponseTextbox;
            }
        }
        
        public LargeView2 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView2(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfCustom SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new WpfCustom(this);
                    #region Search Criteria
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
                    this.mSmallView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mResponseTextbox;
        
        private LargeView2 mLargeView;
        
        private WpfButton mDoneButton;
        
        private WpfCustom mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView2 : WpfCustom
    {
        
        public LargeView2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.Name] = "Cancel";
                    this.mCancelButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton PasteButton
        {
            get
            {
                if ((this.mPasteButton == null))
                {
                    this.mPasteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mPasteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PasteButton";
                    this.mPasteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasteButton;
            }
        }
        
        public Table1 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table1(this);
                }
                return this.mTable;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceEditButton";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceNewButton";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public WpfComboBox SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSourcesComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
                    this.mSourcesComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesComboBox;
            }
        }
        
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public WpfCheckBox OutputtoObjectCheckBox
        {
            get
            {
                if ((this.mOutputtoObjectCheckBox == null))
                {
                    this.mOutputtoObjectCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputtoObjectCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "IsObjectCheckBox";
                    this.mOutputtoObjectCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputtoObjectCheckBox;
            }
        }
        
        public QueryStringText2 QueryStringText
        {
            get
            {
                if ((this.mQueryStringText == null))
                {
                    this.mQueryStringText = new QueryStringText2(this);
                }
                return this.mQueryStringText;
            }
        }
        
        public WpfEdit RequestBody
        {
            get
            {
                if ((this.mRequestBody == null))
                {
                    this.mRequestBody = new WpfEdit(this);
                    #region Search Criteria
                    this.mRequestBody.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RequestBody";
                    this.mRequestBody.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRequestBody;
            }
        }
        
        public WpfTable OutputsGridTable
        {
            get
            {
                if ((this.mOutputsGridTable == null))
                {
                    this.mOutputsGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mOutputsGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsMappingDataGrid";
                    this.mOutputsGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputsGridTable;
            }
        }
        
        public WpfEdit RecordSetTextBox
        {
            get
            {
                if ((this.mRecordSetTextBox == null))
                {
                    this.mRecordSetTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordSetTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RecordSetTextBox";
                    this.mRecordSetTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordSetTextBox;
            }
        }
        
        public WpfButton TestButton
        {
            get
            {
                if ((this.mTestButton == null))
                {
                    this.mTestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestActionButton";
                    this.mTestButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestButton;
            }
        }
        
        public InputsTable InputsTable
        {
            get
            {
                if ((this.mInputsTable == null))
                {
                    this.mInputsTable = new InputsTable(this);
                }
                return this.mInputsTable;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "GenerateOutputsDoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCancelButton;
        
        private WpfButton mPasteButton;
        
        private Table1 mTable;
        
        private WpfButton mEditSourceButton;
        
        private WpfButton mNewSourceButton;
        
        private WpfComboBox mSourcesComboBox;
        
        private WpfButton mGenerateOutputsButton;
        
        private WpfCheckBox mOutputtoObjectCheckBox;
        
        private QueryStringText2 mQueryStringText;
        
        private WpfEdit mRequestBody;
        
        private WpfTable mOutputsGridTable;
        
        private WpfEdit mRecordSetTextBox;
        
        private WpfButton mTestButton;
        
        private InputsTable mInputsTable;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table1 : WpfTable
    {
        
        public Table1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "Headers";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemRow12 ItemRow1
        {
            get
            {
                if ((this.mItemRow1 == null))
                {
                    this.mItemRow1 = new ItemRow12(this);
                }
                return this.mItemRow1;
            }
        }
        #endregion
        
        #region Fields
        private ItemRow12 mItemRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemRow12 : WpfRow
    {
        
        public ItemRow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = null;
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemValueCell2 ItemValueCell
        {
            get
            {
                if ((this.mItemValueCell == null))
                {
                    this.mItemValueCell = new ItemValueCell2(this);
                }
                return this.mItemValueCell;
            }
        }
        
        public HeaderCell2 HeaderCell
        {
            get
            {
                if ((this.mHeaderCell == null))
                {
                    this.mHeaderCell = new HeaderCell2(this);
                }
                return this.mHeaderCell;
            }
        }
        #endregion
        
        #region Fields
        private ItemValueCell2 mItemValueCell;
        
        private HeaderCell2 mHeaderCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemValueCell2 : WpfCell
    {
        
        public ItemValueCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueComboBox2 ValueComboBox
        {
            get
            {
                if ((this.mValueComboBox == null))
                {
                    this.mValueComboBox = new ValueComboBox2(this);
                }
                return this.mValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ValueComboBox2 mValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueComboBox2 : WpfComboBox
    {
        
        public ValueComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "To supply additional header information in your get request, put the header info " +
                "in here.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderCell2 : WpfCell
    {
        
        public HeaderCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Header";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public HeaderComboBox2 HeaderComboBox
        {
            get
            {
                if ((this.mHeaderComboBox == null))
                {
                    this.mHeaderComboBox = new HeaderComboBox2(this);
                }
                return this.mHeaderComboBox;
            }
        }
        #endregion
        
        #region Fields
        private HeaderComboBox2 mHeaderComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderComboBox2 : WpfComboBox
    {
        
        public HeaderComboBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "To supply additional header information in your get request, put the header info " +
                "in here.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QueryStringText2 : WpfText
    {
        
        public QueryStringText2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "QueryStringLable";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputsTable : WpfTable
    {
        
        public InputsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SuccessImage
        {
            get
            {
                if ((this.mSuccessImage == null))
                {
                    this.mSuccessImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSuccessImage.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSuccessImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSuccessImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSuccessImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebPut : WpfCustom
    {
        
        public WebPut(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "PUT Web Method", PropertyExpressionOperator.Contains));
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WebServicePutDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LargeView3 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView3(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfEdit ResponseTextbox
        {
            get
            {
                if ((this.mResponseTextbox == null))
                {
                    this.mResponseTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mResponseTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ResponseTextbox";
                    this.mResponseTextbox.SearchProperties[WpfEdit.PropertyNames.Instance] = "2";
                    this.mResponseTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResponseTextbox;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfCustom SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new WpfCustom(this);
                    #region Search Criteria
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
                    this.mSmallView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
                    this.mSmallView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSmallView;
            }
        }
        #endregion
        
        #region Fields
        private LargeView3 mLargeView;
        
        private WpfEdit mResponseTextbox;
        
        private WpfButton mDoneButton;
        
        private WpfCustom mSmallView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView3 : WpfCustom
    {
        
        public LargeView3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.Name] = "Cancel";
                    this.mCancelButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton PasteButton
        {
            get
            {
                if ((this.mPasteButton == null))
                {
                    this.mPasteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mPasteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PasteButton";
                    this.mPasteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasteButton;
            }
        }
        
        public Table2 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table2(this);
                }
                return this.mTable;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceEditButton";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfButton NewSourceButton
        {
            get
            {
                if ((this.mNewSourceButton == null))
                {
                    this.mNewSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SourceNewButton";
                    this.mNewSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSourceButton;
            }
        }
        
        public SourcesComboBox1 SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new SourcesComboBox1(this);
                }
                return this.mSourcesComboBox;
            }
        }
        
        public WpfButton GenerateOutputsButton
        {
            get
            {
                if ((this.mGenerateOutputsButton == null))
                {
                    this.mGenerateOutputsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mGenerateOutputsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestInputButton";
                    this.mGenerateOutputsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGenerateOutputsButton;
            }
        }
        
        public WpfCheckBox OutputtoObjectCheckBox
        {
            get
            {
                if ((this.mOutputtoObjectCheckBox == null))
                {
                    this.mOutputtoObjectCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mOutputtoObjectCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "IsObjectCheckBox";
                    this.mOutputtoObjectCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputtoObjectCheckBox;
            }
        }
        
        public QueryStringText3 QueryStringText
        {
            get
            {
                if ((this.mQueryStringText == null))
                {
                    this.mQueryStringText = new QueryStringText3(this);
                }
                return this.mQueryStringText;
            }
        }
        
        public WpfEdit RequestBody
        {
            get
            {
                if ((this.mRequestBody == null))
                {
                    this.mRequestBody = new WpfEdit(this);
                    #region Search Criteria
                    this.mRequestBody.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RequestBody";
                    this.mRequestBody.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRequestBody;
            }
        }
        
        public WpfTable OutputsGridTable
        {
            get
            {
                if ((this.mOutputsGridTable == null))
                {
                    this.mOutputsGridTable = new WpfTable(this);
                    #region Search Criteria
                    this.mOutputsGridTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsMappingDataGrid";
                    this.mOutputsGridTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputsGridTable;
            }
        }
        
        public WpfEdit RecordSetTextBox
        {
            get
            {
                if ((this.mRecordSetTextBox == null))
                {
                    this.mRecordSetTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordSetTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "RecordSetTextBox";
                    this.mRecordSetTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordSetTextBox;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "GenerateOutputsDoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public InputsTable1 InputsTable
        {
            get
            {
                if ((this.mInputsTable == null))
                {
                    this.mInputsTable = new InputsTable1(this);
                }
                return this.mInputsTable;
            }
        }
        
        public WpfButton TestButton
        {
            get
            {
                if ((this.mTestButton == null))
                {
                    this.mTestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestActionButton";
                    this.mTestButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCancelButton;
        
        private WpfButton mPasteButton;
        
        private Table2 mTable;
        
        private WpfButton mEditSourceButton;
        
        private WpfButton mNewSourceButton;
        
        private SourcesComboBox1 mSourcesComboBox;
        
        private WpfButton mGenerateOutputsButton;
        
        private WpfCheckBox mOutputtoObjectCheckBox;
        
        private QueryStringText3 mQueryStringText;
        
        private WpfEdit mRequestBody;
        
        private WpfTable mOutputsGridTable;
        
        private WpfEdit mRecordSetTextBox;
        
        private WpfButton mDoneButton;
        
        private InputsTable1 mInputsTable;
        
        private WpfButton mTestButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table2 : WpfTable
    {
        
        public Table2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "Headers";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemRow13 ItemRow1
        {
            get
            {
                if ((this.mItemRow1 == null))
                {
                    this.mItemRow1 = new ItemRow13(this);
                }
                return this.mItemRow1;
            }
        }
        #endregion
        
        #region Fields
        private ItemRow13 mItemRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemRow13 : WpfRow
    {
        
        public ItemRow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = null;
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemValueCell3 ItemValueCell
        {
            get
            {
                if ((this.mItemValueCell == null))
                {
                    this.mItemValueCell = new ItemValueCell3(this);
                }
                return this.mItemValueCell;
            }
        }
        
        public HeaderCell3 HeaderCell
        {
            get
            {
                if ((this.mHeaderCell == null))
                {
                    this.mHeaderCell = new HeaderCell3(this);
                }
                return this.mHeaderCell;
            }
        }
        #endregion
        
        #region Fields
        private ItemValueCell3 mItemValueCell;
        
        private HeaderCell3 mHeaderCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemValueCell3 : WpfCell
    {
        
        public ItemValueCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueComboBox3 ValueComboBox
        {
            get
            {
                if ((this.mValueComboBox == null))
                {
                    this.mValueComboBox = new ValueComboBox3(this);
                }
                return this.mValueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private ValueComboBox3 mValueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueComboBox3 : WpfComboBox
    {
        
        public ValueComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "To supply additional header information in your get request, put the header info " +
                "in here.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderCell3 : WpfCell
    {
        
        public HeaderCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Header";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public HeaderComboBox3 HeaderComboBox
        {
            get
            {
                if ((this.mHeaderComboBox == null))
                {
                    this.mHeaderComboBox = new HeaderComboBox3(this);
                }
                return this.mHeaderComboBox;
            }
        }
        #endregion
        
        #region Fields
        private HeaderComboBox3 mHeaderComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderComboBox3 : WpfComboBox
    {
        
        public HeaderComboBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.HelpText] = "To supply additional header information in your get request, put the header info " +
                "in here.";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextEdit
        {
            get
            {
                if ((this.mTextEdit == null))
                {
                    this.mTextEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mTextEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourcesComboBox1 : WpfComboBox
    {
        
        public SourcesComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SourcesComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfListItem ComboboxListItemAsTestingReturnText
        {
            get
            {
                if ((this.mComboboxListItemAsTestingReturnText == null))
                {
                    this.mComboboxListItemAsTestingReturnText = new WpfListItem(this);
                    #region Search Criteria
                    this.mComboboxListItemAsTestingReturnText.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Common.Interfaces.Core.WebServiceSourceDefinition";
                    this.mComboboxListItemAsTestingReturnText.SearchProperties[WpfListItem.PropertyNames.Instance] = "9";
                    this.mComboboxListItemAsTestingReturnText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsTestingReturnText;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mComboboxListItemAsTestingReturnText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QueryStringText3 : WpfText
    {
        
        public QueryStringText3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "QueryStringLable";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ItemEdit
        {
            get
            {
                if ((this.mItemEdit == null))
                {
                    this.mItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mItemEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputsTable1 : WpfTable
    {
        
        public InputsTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SuccessImage
        {
            get
            {
                if ((this.mSuccessImage == null))
                {
                    this.mSuccessImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSuccessImage.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mSuccessImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSuccessImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSuccessImage;
        #endregion
    }
}
