{

module Lexer

// Opens methods related to fslex.exe
open Microsoft.FSharp.Text.Lexing
open Parser
let newline (lexbuf: LexBuffer<_>) = 
    lexbuf.StartPos <- lexbuf.StartPos.NextLine
 }

// Regular expressions
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let openSquare   = ['[']
let openLang = openSquare openSquare
let closeSquare   = [']']
let closeLang = closeSquare closeSquare
let char        = ['a'-'z''A'-'Z'' ''\t' ',' '!' '-' '=' '+' '/' '*' '$' '#' '<' '>' '\\' '~']
let tilde        = ['~']
let varStart = ['a'-'z''A'-'Z']
let varEnd = ['a'-'z''A'-'Z''0'-'9''_''-']
let variableName = varStart* ?varEnd+
let string      = char+   
let column      = char+ '.' char+
let digit       = ['0'-'9']  
let position       = ['1'-'9']  
let openParen   = ['(']
let closedParen = [')']    
let int         = '-'?digit+   
let float       = '-'?digit+ '.' digit+   
rule tokenstream = parse
// --------------------------
| openLang 		{ OPENLANGUAGE }
| closeLang 		{ CLOSELANGAUGE }
| "(" 		{ OPENBRACKET }
| ")" 		{ CLOSEDBRACKET }
| "." 		{ DOT }
| "*" 		{ STAR }
| "@" 		{ ATIDF }
| int           { INT( LexBuffer<char>.LexemeString(lexbuf) ) }
| float         { FLOAT(LexBuffer<char>.LexemeString(lexbuf)) }
| variableName       { VARNAME (LexBuffer<char>.LexemeString(lexbuf) )}
| string        { STRING (LexBuffer<char>.LexemeString(lexbuf) )}
// --------------------------
| tilde	{ tokenstream lexbuf }
//| newline	{ newline lexbuf; tokenstream lexbuf }
// --------------------------
| _    		{ STRING (LexBuffer<char>.LexemeString(lexbuf)) }
| eof   	{ EOF }