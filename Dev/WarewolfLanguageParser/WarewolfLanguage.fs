// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"

    open LanguageAST
    open DataASTMutable

# 11 "WarewolfLanguage.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | VARNAME of (string)
  | STRING of (string)
  | FLOAT of (string)
  | INT of (string)
  | OPENLANGUAGE
  | CLOSELANGAUGE
  | OPENBRACKET
  | CLOSEDBRACKET
  | STAR
  | DOT
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_VARNAME
    | TOKEN_STRING
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_OPENLANGUAGE
    | TOKEN_CLOSELANGAUGE
    | TOKEN_OPENBRACKET
    | TOKEN_CLOSEDBRACKET
    | TOKEN_STAR
    | TOKEN_DOT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_langExpression
    | NONTERM_variableExpression
    | NONTERM_recset
    | NONTERM_jsonIdentifierExpression
    | NONTERM_nestedJsonIdentifier
    | NONTERM_recsetName
    | NONTERM_index
    | NONTERM_intindex
    | NONTERM_scalar
    | NONTERM_atom

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | VARNAME _ -> 1 
  | STRING _ -> 2 
  | FLOAT _ -> 3 
  | INT _ -> 4 
  | OPENLANGUAGE  -> 5 
  | CLOSELANGAUGE  -> 6 
  | OPENBRACKET  -> 7 
  | CLOSEDBRACKET  -> 8 
  | STAR  -> 9 
  | DOT  -> 10 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_VARNAME 
  | 2 -> TOKEN_STRING 
  | 3 -> TOKEN_FLOAT 
  | 4 -> TOKEN_INT 
  | 5 -> TOKEN_OPENLANGUAGE 
  | 6 -> TOKEN_CLOSELANGAUGE 
  | 7 -> TOKEN_OPENBRACKET 
  | 8 -> TOKEN_CLOSEDBRACKET 
  | 9 -> TOKEN_STAR 
  | 10 -> TOKEN_DOT 
  | 13 -> TOKEN_end_of_input
  | 11 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_langExpression 
    | 3 -> NONTERM_langExpression 
    | 4 -> NONTERM_langExpression 
    | 5 -> NONTERM_langExpression 
    | 6 -> NONTERM_langExpression 
    | 7 -> NONTERM_langExpression 
    | 8 -> NONTERM_langExpression 
    | 9 -> NONTERM_langExpression 
    | 10 -> NONTERM_langExpression 
    | 11 -> NONTERM_langExpression 
    | 12 -> NONTERM_langExpression 
    | 13 -> NONTERM_langExpression 
    | 14 -> NONTERM_variableExpression 
    | 15 -> NONTERM_variableExpression 
    | 16 -> NONTERM_variableExpression 
    | 17 -> NONTERM_variableExpression 
    | 18 -> NONTERM_variableExpression 
    | 19 -> NONTERM_recset 
    | 20 -> NONTERM_recset 
    | 21 -> NONTERM_recset 
    | 22 -> NONTERM_recset 
    | 23 -> NONTERM_jsonIdentifierExpression 
    | 24 -> NONTERM_jsonIdentifierExpression 
    | 25 -> NONTERM_jsonIdentifierExpression 
    | 26 -> NONTERM_jsonIdentifierExpression 
    | 27 -> NONTERM_jsonIdentifierExpression 
    | 28 -> NONTERM_nestedJsonIdentifier 
    | 29 -> NONTERM_nestedJsonIdentifier 
    | 30 -> NONTERM_nestedJsonIdentifier 
    | 31 -> NONTERM_nestedJsonIdentifier 
    | 32 -> NONTERM_nestedJsonIdentifier 
    | 33 -> NONTERM_nestedJsonIdentifier 
    | 34 -> NONTERM_nestedJsonIdentifier 
    | 35 -> NONTERM_nestedJsonIdentifier 
    | 36 -> NONTERM_recsetName 
    | 37 -> NONTERM_recsetName 
    | 38 -> NONTERM_recsetName 
    | 39 -> NONTERM_recsetName 
    | 40 -> NONTERM_index 
    | 41 -> NONTERM_intindex 
    | 42 -> NONTERM_scalar 
    | 43 -> NONTERM_atom 
    | 44 -> NONTERM_atom 
    | 45 -> NONTERM_atom 
    | 46 -> NONTERM_atom 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 13 
let _fsyacc_tagOfErrorTerminal = 11

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | VARNAME _ -> "VARNAME" 
  | STRING _ -> "STRING" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | OPENLANGUAGE  -> "OPENLANGUAGE" 
  | CLOSELANGAUGE  -> "CLOSELANGAUGE" 
  | OPENBRACKET  -> "OPENBRACKET" 
  | CLOSEDBRACKET  -> "CLOSEDBRACKET" 
  | STAR  -> "STAR" 
  | DOT  -> "DOT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | VARNAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPENLANGUAGE  -> (null : System.Object) 
  | CLOSELANGAUGE  -> (null : System.Object) 
  | OPENBRACKET  -> (null : System.Object) 
  | CLOSEDBRACKET  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 5us; 65535us; 0us; 2us; 2us; 19us; 19us; 19us; 20us; 19us; 23us; 20us; 5us; 65535us; 0us; 7us; 2us; 8us; 19us; 8us; 20us; 8us; 23us; 7us; 5us; 65535us; 0us; 5us; 2us; 5us; 19us; 5us; 20us; 5us; 23us; 5us; 5us; 65535us; 0us; 9us; 2us; 9us; 19us; 9us; 20us; 9us; 23us; 9us; 9us; 65535us; 26us; 42us; 30us; 44us; 33us; 46us; 36us; 48us; 39us; 40us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 5us; 65535us; 0us; 6us; 2us; 6us; 19us; 6us; 20us; 6us; 23us; 6us; 2us; 65535us; 23us; 24us; 51us; 52us; 0us; 65535us; 5us; 65535us; 0us; 4us; 2us; 4us; 19us; 4us; 20us; 4us; 23us; 4us; 5us; 65535us; 0us; 3us; 2us; 3us; 19us; 3us; 20us; 3us; 23us; 3us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 9us; 15us; 21us; 27us; 37us; 43us; 46us; 47us; 53us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 14us; 2us; 2us; 18us; 2us; 3us; 15us; 2us; 4us; 16us; 1us; 5us; 1us; 6us; 2us; 6us; 14us; 1us; 7us; 15us; 8us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 36us; 37us; 38us; 39us; 42us; 1us; 9us; 1us; 10us; 1us; 11us; 4us; 11us; 21us; 26us; 36us; 4us; 11us; 22us; 27us; 39us; 1us; 12us; 4us; 12us; 20us; 25us; 38us; 1us; 13us; 1us; 14us; 4us; 14us; 22us; 27us; 39us; 1us; 17us; 14us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 36us; 37us; 38us; 39us; 42us; 12us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 27us; 36us; 37us; 38us; 39us; 3us; 19us; 24us; 37us; 3us; 19us; 24us; 37us; 2us; 19us; 24us; 9us; 19us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 1us; 19us; 3us; 20us; 25us; 38us; 2us; 20us; 25us; 9us; 20us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 1us; 20us; 2us; 21us; 26us; 9us; 21us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 1us; 21us; 2us; 22us; 27us; 9us; 22us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 8us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 6us; 29us; 30us; 31us; 32us; 33us; 34us; 2us; 29us; 32us; 2us; 29us; 32us; 2us; 30us; 33us; 2us; 30us; 33us; 2us; 31us; 34us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 2us; 40us; 44us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 10us; 13us; 16us; 18us; 20us; 23us; 25us; 41us; 43us; 45us; 47us; 52us; 57us; 59us; 64us; 66us; 68us; 73us; 75us; 90us; 103us; 107us; 111us; 114us; 124us; 126us; 130us; 133us; 143us; 145us; 148us; 158us; 160us; 163us; 173us; 175us; 177us; 179us; 181us; 183us; 185us; 187us; 189us; 191us; 193us; 195us; 197us; 206us; 213us; 216us; 219us; 222us; 225us; 228us; 230us; 232us; 234us; 236us; 238us; 240us; 242us; 244us; 246us; 248us; 250us; 252us; 254us; 257us; 259us; 261us; 263us; 265us; |]
let _fsyacc_action_rows = 76
let _fsyacc_actionTableElements = [|11us; 32768us; 0us; 21us; 1us; 74us; 2us; 75us; 3us; 72us; 4us; 73us; 5us; 10us; 6us; 11us; 7us; 12us; 8us; 13us; 9us; 16us; 10us; 18us; 0us; 49152us; 11us; 16385us; 0us; 21us; 1us; 74us; 2us; 75us; 3us; 72us; 4us; 73us; 5us; 10us; 6us; 11us; 7us; 12us; 8us; 13us; 9us; 16us; 10us; 18us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 1us; 16390us; 13us; 16398us; 0us; 16391us; 1us; 16392us; 1us; 22us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 2us; 16395us; 6us; 65us; 10us; 33us; 2us; 16395us; 6us; 68us; 10us; 36us; 0us; 16396us; 1us; 16396us; 8us; 29us; 0us; 16397us; 11us; 32768us; 0us; 21us; 1us; 74us; 2us; 75us; 3us; 72us; 4us; 73us; 5us; 10us; 6us; 11us; 7us; 12us; 8us; 13us; 9us; 16us; 10us; 18us; 11us; 32768us; 0us; 21us; 1us; 74us; 2us; 75us; 3us; 72us; 4us; 73us; 5us; 10us; 6us; 11us; 7us; 12us; 8us; 15us; 9us; 16us; 10us; 18us; 0us; 16401us; 3us; 32768us; 6us; 71us; 7us; 23us; 10us; 39us; 11us; 32768us; 0us; 21us; 1us; 74us; 2us; 75us; 3us; 72us; 4us; 70us; 5us; 10us; 6us; 11us; 7us; 12us; 8us; 14us; 9us; 17us; 10us; 18us; 1us; 32768us; 8us; 25us; 2us; 32768us; 6us; 66us; 10us; 26us; 1us; 32768us; 1us; 27us; 3us; 16412us; 6us; 28us; 7us; 51us; 10us; 63us; 0us; 16403us; 2us; 32768us; 6us; 67us; 10us; 30us; 1us; 32768us; 1us; 31us; 3us; 16412us; 6us; 32us; 7us; 51us; 10us; 63us; 0us; 16404us; 1us; 32768us; 1us; 34us; 3us; 16412us; 6us; 35us; 7us; 51us; 10us; 63us; 0us; 16405us; 1us; 32768us; 1us; 37us; 3us; 16412us; 6us; 38us; 7us; 51us; 10us; 63us; 0us; 16406us; 1us; 32768us; 1us; 50us; 1us; 32768us; 6us; 41us; 0us; 16407us; 1us; 32768us; 6us; 43us; 0us; 16408us; 1us; 32768us; 6us; 45us; 0us; 16409us; 1us; 32768us; 6us; 47us; 0us; 16410us; 1us; 32768us; 6us; 49us; 0us; 16411us; 2us; 16412us; 7us; 51us; 10us; 63us; 3us; 32768us; 4us; 69us; 8us; 56us; 9us; 54us; 1us; 32768us; 8us; 53us; 1us; 16413us; 10us; 57us; 1us; 32768us; 8us; 55us; 1us; 16414us; 10us; 59us; 1us; 16415us; 10us; 61us; 1us; 32768us; 1us; 50us; 0us; 16416us; 1us; 32768us; 1us; 50us; 0us; 16417us; 1us; 32768us; 1us; 50us; 0us; 16418us; 1us; 32768us; 1us; 50us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 4us; 16428us; 8us; 16424us; 11us; 16424us; 12us; 16424us; 13us; 16424us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 0us; 16430us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 12us; 13us; 25us; 26us; 27us; 28us; 29us; 30us; 32us; 33us; 35us; 36us; 37us; 38us; 41us; 44us; 45us; 47us; 48us; 60us; 72us; 73us; 77us; 89us; 91us; 94us; 96us; 100us; 101us; 104us; 106us; 110us; 111us; 113us; 117us; 118us; 120us; 124us; 125us; 127us; 129us; 130us; 132us; 133us; 135us; 136us; 138us; 139us; 141us; 142us; 145us; 149us; 151us; 153us; 155us; 157us; 159us; 161us; 162us; 164us; 165us; 167us; 168us; 170us; 171us; 172us; 173us; 174us; 175us; 176us; 181us; 182us; 183us; 184us; 185us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 8us; 8us; 7us; 8us; 5us; 8us; 8us; 7us; 8us; 1us; 4us; 4us; 3us; 6us; 6us; 5us; 3us; 5us; 6us; 6us; 6us; 1us; 1us; 3us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 7us; 7us; 8us; 9us; 10us; 11us; 11us; 11us; 11us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 65535us; 16389us; 16390us; 65535us; 16391us; 65535us; 16393us; 16394us; 16395us; 65535us; 65535us; 16396us; 65535us; 16397us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 16405us; 65535us; 65535us; 16406us; 65535us; 65535us; 16407us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 65535us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 16417us; 65535us; 16418us; 65535us; 16419us; 16420us; 16421us; 16422us; 16423us; 16424us; 65535us; 16426us; 16427us; 16428us; 16429us; 16430us; |]
let _fsyacc_reductions ()  =    [| 
# 183 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.LanguageExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 192 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.LanguageExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                            _1
                   )
# 31 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 203 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : DataASTMutable.WarewolfAtom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                              WarewolfAtomExpression _1
                   )
# 34 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 214 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.ScalarIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                  ScalarExpression _1 
                   )
# 35 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 225 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.RecordSetColumnIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                 RecordSetExpression _1 
                   )
# 36 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 236 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recsetName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                     RecordSetNameExpression _1 
                   )
# 37 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 247 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'variableExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                             ComplexExpression _1 
                   )
# 38 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 258 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'jsonIdentifierExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                   JsonIdentifierExpression _1 
                   )
# 39 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 269 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                      WarewolfAtomExpression (DataString "[[")
                   )
# 40 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 279 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                       WarewolfAtomExpression (DataString "]]")
                   )
# 41 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 289 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                     WarewolfAtomExpression (DataString "(")
                   )
# 42 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 299 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                       WarewolfAtomExpression (DataString ")")
                   )
# 43 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 309 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                              WarewolfAtomExpression (DataString "*")
                   )
# 44 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 319 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                             WarewolfAtomExpression (DataString ".")
                   )
# 45 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 329 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.LanguageExpression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'variableExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                 _1::_2
                   )
# 47 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'variableExpression));
# 341 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.ScalarIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                  [ScalarExpression _1] 
                   )
# 48 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'variableExpression));
# 352 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.RecordSetColumnIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                 [RecordSetExpression _1] 
                   )
# 49 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'variableExpression));
# 363 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                             []
                   )
# 50 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'variableExpression));
# 373 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : DataASTMutable.WarewolfAtom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                              [WarewolfAtomExpression _1]
                   )
# 51 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'variableExpression));
# 384 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'index)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                          {Name = _2; Column = _7; Index =tryParseIndex(_4) ;}
                   )
# 53 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.RecordSetColumnIdentifier));
# 397 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                      {Name = _2; Column = _7; Index =Star ;}
                   )
# 54 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.RecordSetColumnIdentifier));
# 409 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                    {Name = _2; Column = _6; Index =Last ;}
                   )
# 55 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.RecordSetColumnIdentifier));
# 421 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.LanguageExpression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                                {Name = _2; Column = _7; Index = IndexExpression _4 ;}
                   )
# 56 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.RecordSetColumnIdentifier));
# 434 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                        NestedNameExpression {ObjectName = _2; Next = _4;} 
                   )
# 59 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'jsonIdentifierExpression));
# 446 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'index)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                                    IndexNestedNameExpression {ObjectName = _2; Next = _7; Index =tryParseIndex(_4) ;}
                   )
# 60 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'jsonIdentifierExpression));
# 459 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                                   IndexNestedNameExpression {ObjectName = _2; Next = _7; Index =Star ;}
                   )
# 61 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'jsonIdentifierExpression));
# 471 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                                 IndexNestedNameExpression {ObjectName = _2; Next = _6; Index =Last ;}
                   )
# 62 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'jsonIdentifierExpression));
# 483 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.LanguageExpression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                                             IndexNestedNameExpression {ObjectName = _2; Next = _7; Index = IndexExpression _4 ;}
                   )
# 63 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'jsonIdentifierExpression));
# 496 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                      NameExpression  {Name= _1} 
                   )
# 66 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 507 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'index)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                  IndexNestedNameExpression {ObjectName = _1 ; Next=Terminal ; Index =tryParseIndex(_3)  } 
                   )
# 67 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 519 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                 IndexNestedNameExpression {ObjectName = _1 ; Next=Terminal ; Index =Star  } 
                   )
# 68 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 530 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                            IndexNestedNameExpression {ObjectName = _1 ; Next=Terminal ; Index =Last  } 
                   )
# 69 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 541 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'index)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                           IndexNestedNameExpression {ObjectName = _1 ; Next=_6 ; Index =tryParseIndex(_3)  } 
                   )
# 70 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 554 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                          IndexNestedNameExpression {ObjectName = _1 ; Next=_6 ; Index =Star  } 
                   )
# 71 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 566 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                     IndexNestedNameExpression {ObjectName = _1 ; Next=_5 ; Index =Last  } 
                   )
# 72 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 578 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                           NestedNameExpression {ObjectName = _1; Next = _3;} 
                   )
# 73 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 590 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                       {Name = _2;Index = Last;}
                   )
# 76 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'recsetName));
# 601 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'index)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                          {Name = _2; Index = _4;}
                   )
# 77 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'recsetName));
# 613 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                         {Name = _2; Index = Star;}
                   )
# 78 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'recsetName));
# 624 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.LanguageExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                   {Name = _2;Index = IndexExpression _4;}
                   )
# 79 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'recsetName));
# 636 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                             IntIndex ( System.Int32.Parse (  _1))
                   )
# 81 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'index));
# 647 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                             IndexExpression ( WarewolfAtomExpression ( tryParseAtom _1))
                   )
# 83 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'intindex));
# 658 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                           _2
                   )
# 85 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.ScalarIdentifier));
# 669 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                  tryFloatParseAtom _1 
                   )
# 87 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : DataASTMutable.WarewolfAtom));
# 680 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                tryParseAtom _1 
                   )
# 88 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : DataASTMutable.WarewolfAtom));
# 691 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                   DataString _1 
                   )
# 89 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : DataASTMutable.WarewolfAtom));
# 702 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                  DataString _1 
                   )
# 90 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : DataASTMutable.WarewolfAtom));
|]
# 714 "WarewolfLanguage.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 14;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : LanguageAST.LanguageExpression =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
