// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"

    open LanguageAST
    open DataStorage

# 11 "WarewolfLanguage.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | VARNAME of (string)
  | STRING of (string)
  | FLOAT of (string)
  | INT of (string)
  | OPENLANGUAGE
  | CLOSELANGAUGE
  | OPENBRACKET
  | CLOSEDBRACKET
  | STAR
  | DOT
  | ATIDF
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_VARNAME
    | TOKEN_STRING
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_OPENLANGUAGE
    | TOKEN_CLOSELANGAUGE
    | TOKEN_OPENBRACKET
    | TOKEN_CLOSEDBRACKET
    | TOKEN_STAR
    | TOKEN_DOT
    | TOKEN_ATIDF
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_langExpression
    | NONTERM_variableExpression
    | NONTERM_recset
    | NONTERM_jsonIdentifierExpression
    | NONTERM_nestedJsonIdentifier
    | NONTERM_recsetName
    | NONTERM_index
    | NONTERM_intindex
    | NONTERM_scalar
    | NONTERM_atom

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | VARNAME _ -> 1 
  | STRING _ -> 2 
  | FLOAT _ -> 3 
  | INT _ -> 4 
  | OPENLANGUAGE  -> 5 
  | CLOSELANGAUGE  -> 6 
  | OPENBRACKET  -> 7 
  | CLOSEDBRACKET  -> 8 
  | STAR  -> 9 
  | DOT  -> 10 
  | ATIDF  -> 11 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_VARNAME 
  | 2 -> TOKEN_STRING 
  | 3 -> TOKEN_FLOAT 
  | 4 -> TOKEN_INT 
  | 5 -> TOKEN_OPENLANGUAGE 
  | 6 -> TOKEN_CLOSELANGAUGE 
  | 7 -> TOKEN_OPENBRACKET 
  | 8 -> TOKEN_CLOSEDBRACKET 
  | 9 -> TOKEN_STAR 
  | 10 -> TOKEN_DOT 
  | 11 -> TOKEN_ATIDF 
  | 14 -> TOKEN_end_of_input
  | 12 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_langExpression 
    | 3 -> NONTERM_langExpression 
    | 4 -> NONTERM_langExpression 
    | 5 -> NONTERM_langExpression 
    | 6 -> NONTERM_langExpression 
    | 7 -> NONTERM_langExpression 
    | 8 -> NONTERM_langExpression 
    | 9 -> NONTERM_langExpression 
    | 10 -> NONTERM_langExpression 
    | 11 -> NONTERM_langExpression 
    | 12 -> NONTERM_langExpression 
    | 13 -> NONTERM_langExpression 
    | 14 -> NONTERM_langExpression 
    | 15 -> NONTERM_variableExpression 
    | 16 -> NONTERM_variableExpression 
    | 17 -> NONTERM_variableExpression 
    | 18 -> NONTERM_variableExpression 
    | 19 -> NONTERM_variableExpression 
    | 20 -> NONTERM_recset 
    | 21 -> NONTERM_recset 
    | 22 -> NONTERM_recset 
    | 23 -> NONTERM_recset 
    | 24 -> NONTERM_jsonIdentifierExpression 
    | 25 -> NONTERM_jsonIdentifierExpression 
    | 26 -> NONTERM_jsonIdentifierExpression 
    | 27 -> NONTERM_jsonIdentifierExpression 
    | 28 -> NONTERM_jsonIdentifierExpression 
    | 29 -> NONTERM_jsonIdentifierExpression 
    | 30 -> NONTERM_jsonIdentifierExpression 
    | 31 -> NONTERM_jsonIdentifierExpression 
    | 32 -> NONTERM_jsonIdentifierExpression 
    | 33 -> NONTERM_nestedJsonIdentifier 
    | 34 -> NONTERM_nestedJsonIdentifier 
    | 35 -> NONTERM_nestedJsonIdentifier 
    | 36 -> NONTERM_nestedJsonIdentifier 
    | 37 -> NONTERM_nestedJsonIdentifier 
    | 38 -> NONTERM_nestedJsonIdentifier 
    | 39 -> NONTERM_nestedJsonIdentifier 
    | 40 -> NONTERM_nestedJsonIdentifier 
    | 41 -> NONTERM_nestedJsonIdentifier 
    | 42 -> NONTERM_recsetName 
    | 43 -> NONTERM_recsetName 
    | 44 -> NONTERM_recsetName 
    | 45 -> NONTERM_recsetName 
    | 46 -> NONTERM_index 
    | 47 -> NONTERM_intindex 
    | 48 -> NONTERM_scalar 
    | 49 -> NONTERM_atom 
    | 50 -> NONTERM_atom 
    | 51 -> NONTERM_atom 
    | 52 -> NONTERM_atom 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 14 
let _fsyacc_tagOfErrorTerminal = 12

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | VARNAME _ -> "VARNAME" 
  | STRING _ -> "STRING" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | OPENLANGUAGE  -> "OPENLANGUAGE" 
  | CLOSELANGAUGE  -> "CLOSELANGAUGE" 
  | OPENBRACKET  -> "OPENBRACKET" 
  | CLOSEDBRACKET  -> "CLOSEDBRACKET" 
  | STAR  -> "STAR" 
  | DOT  -> "DOT" 
  | ATIDF  -> "ATIDF" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | VARNAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPENLANGUAGE  -> (null : System.Object) 
  | CLOSELANGAUGE  -> (null : System.Object) 
  | OPENBRACKET  -> (null : System.Object) 
  | CLOSEDBRACKET  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | ATIDF  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 9us; 65535us; 0us; 2us; 2us; 26us; 26us; 26us; 27us; 26us; 28us; 26us; 29us; 26us; 32us; 27us; 51us; 28us; 74us; 29us; 9us; 65535us; 0us; 7us; 2us; 8us; 26us; 8us; 27us; 8us; 28us; 8us; 29us; 8us; 32us; 7us; 51us; 7us; 74us; 7us; 9us; 65535us; 0us; 5us; 2us; 5us; 26us; 5us; 27us; 5us; 28us; 5us; 29us; 5us; 32us; 5us; 51us; 5us; 74us; 5us; 9us; 65535us; 0us; 9us; 2us; 9us; 26us; 9us; 27us; 9us; 28us; 9us; 29us; 9us; 32us; 9us; 51us; 9us; 74us; 9us; 10us; 65535us; 58us; 59us; 61us; 62us; 64us; 65us; 67us; 68us; 70us; 71us; 78us; 79us; 80us; 81us; 82us; 83us; 84us; 85us; 86us; 87us; 9us; 65535us; 0us; 6us; 2us; 6us; 26us; 6us; 27us; 6us; 28us; 6us; 29us; 6us; 32us; 6us; 51us; 6us; 74us; 6us; 3us; 65535us; 32us; 33us; 51us; 52us; 74us; 75us; 0us; 65535us; 9us; 65535us; 0us; 4us; 2us; 4us; 26us; 4us; 27us; 4us; 28us; 4us; 29us; 4us; 32us; 4us; 51us; 4us; 74us; 4us; 9us; 65535us; 0us; 3us; 2us; 3us; 26us; 3us; 27us; 3us; 28us; 3us; 29us; 3us; 32us; 3us; 51us; 3us; 74us; 3us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 13us; 23us; 33us; 43us; 54us; 64us; 68us; 69us; 79us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 15us; 2us; 2us; 19us; 2us; 3us; 16us; 2us; 4us; 17us; 1us; 5us; 1us; 6us; 2us; 6us; 15us; 1us; 7us; 19us; 8us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 42us; 43us; 44us; 45us; 48us; 1us; 9us; 1us; 10us; 1us; 11us; 3us; 11us; 22us; 42us; 3us; 11us; 23us; 45us; 3us; 11us; 27us; 31us; 2us; 11us; 32us; 3us; 11us; 36us; 40us; 2us; 11us; 37us; 1us; 12us; 3us; 12us; 21us; 44us; 3us; 12us; 26us; 30us; 3us; 12us; 35us; 39us; 1us; 13us; 1us; 14us; 1us; 15us; 3us; 15us; 23us; 45us; 2us; 15us; 32us; 2us; 15us; 37us; 1us; 18us; 9us; 20us; 21us; 22us; 23us; 42us; 43us; 44us; 45us; 48us; 8us; 20us; 21us; 22us; 23us; 42us; 43us; 44us; 45us; 2us; 20us; 43us; 2us; 20us; 43us; 1us; 20us; 1us; 20us; 1us; 20us; 2us; 21us; 44us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 9us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 9us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 1us; 24us; 7us; 25us; 26us; 27us; 29us; 30us; 31us; 32us; 2us; 25us; 29us; 2us; 25us; 29us; 1us; 25us; 2us; 26us; 30us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 9us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 7us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 2us; 34us; 38us; 2us; 34us; 38us; 2us; 35us; 39us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 39us; 1us; 39us; 1us; 40us; 1us; 40us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 2us; 46us; 50us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 10us; 13us; 16us; 18us; 20us; 23us; 25us; 45us; 47us; 49us; 51us; 55us; 59us; 63us; 66us; 70us; 73us; 75us; 79us; 83us; 87us; 89us; 91us; 93us; 97us; 100us; 103us; 105us; 115us; 124us; 127us; 130us; 132us; 134us; 136us; 139us; 141us; 143us; 145us; 147us; 149us; 151us; 153us; 155us; 157us; 167us; 177us; 179us; 187us; 190us; 193us; 195us; 198us; 200us; 202us; 204us; 206us; 208us; 210us; 212us; 214us; 216us; 218us; 220us; 222us; 224us; 226us; 228us; 230us; 232us; 242us; 250us; 253us; 256us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 273us; 275us; 277us; 279us; 281us; 283us; 285us; 287us; 290us; 292us; 294us; 296us; 298us; |]
let _fsyacc_action_rows = 98
let _fsyacc_actionTableElements = [|12us; 32768us; 0us; 30us; 1us; 96us; 2us; 97us; 3us; 94us; 4us; 95us; 5us; 10us; 6us; 11us; 7us; 12us; 8us; 13us; 9us; 20us; 10us; 24us; 11us; 25us; 0us; 49152us; 12us; 16385us; 0us; 30us; 1us; 96us; 2us; 97us; 3us; 94us; 4us; 95us; 5us; 10us; 6us; 11us; 7us; 12us; 8us; 13us; 9us; 20us; 10us; 24us; 11us; 25us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 1us; 16390us; 14us; 16399us; 0us; 16391us; 2us; 16392us; 1us; 31us; 11us; 48us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 2us; 16395us; 6us; 88us; 10us; 42us; 2us; 16395us; 6us; 91us; 10us; 45us; 2us; 16395us; 6us; 57us; 10us; 67us; 1us; 16395us; 10us; 70us; 1us; 16395us; 10us; 84us; 1us; 16395us; 10us; 78us; 0us; 16396us; 1us; 16396us; 8us; 38us; 1us; 16396us; 8us; 55us; 1us; 16396us; 8us; 77us; 0us; 16397us; 0us; 16398us; 12us; 32768us; 0us; 30us; 1us; 96us; 2us; 97us; 3us; 94us; 4us; 95us; 5us; 10us; 6us; 11us; 7us; 12us; 8us; 13us; 9us; 20us; 10us; 24us; 11us; 25us; 12us; 32768us; 0us; 30us; 1us; 96us; 2us; 97us; 3us; 94us; 4us; 95us; 5us; 10us; 6us; 11us; 7us; 12us; 8us; 15us; 9us; 20us; 10us; 24us; 11us; 25us; 12us; 32768us; 0us; 30us; 1us; 96us; 2us; 97us; 3us; 94us; 4us; 95us; 5us; 10us; 6us; 11us; 7us; 12us; 8us; 17us; 9us; 20us; 10us; 24us; 11us; 25us; 12us; 32768us; 0us; 30us; 1us; 96us; 2us; 97us; 3us; 94us; 4us; 95us; 5us; 10us; 6us; 11us; 7us; 12us; 8us; 19us; 9us; 20us; 10us; 24us; 11us; 25us; 0us; 16402us; 2us; 32768us; 6us; 93us; 7us; 32us; 12us; 32768us; 0us; 30us; 1us; 96us; 2us; 97us; 3us; 94us; 4us; 92us; 5us; 10us; 6us; 11us; 7us; 12us; 8us; 14us; 9us; 21us; 10us; 24us; 11us; 25us; 1us; 32768us; 8us; 34us; 2us; 32768us; 6us; 89us; 10us; 35us; 1us; 32768us; 1us; 36us; 1us; 32768us; 6us; 37us; 0us; 16404us; 2us; 32768us; 6us; 90us; 10us; 39us; 1us; 32768us; 1us; 40us; 1us; 32768us; 6us; 41us; 0us; 16405us; 1us; 32768us; 1us; 43us; 1us; 32768us; 6us; 44us; 0us; 16406us; 1us; 32768us; 1us; 46us; 1us; 32768us; 6us; 47us; 0us; 16407us; 1us; 32768us; 1us; 49us; 3us; 32768us; 6us; 50us; 7us; 51us; 10us; 58us; 0us; 16408us; 12us; 32768us; 0us; 30us; 1us; 96us; 2us; 97us; 3us; 94us; 4us; 92us; 5us; 10us; 6us; 11us; 7us; 12us; 8us; 16us; 9us; 22us; 10us; 24us; 11us; 25us; 1us; 32768us; 8us; 53us; 2us; 32768us; 6us; 54us; 10us; 61us; 0us; 16409us; 2us; 32768us; 6us; 56us; 10us; 64us; 0us; 16410us; 0us; 16411us; 1us; 32768us; 1us; 73us; 1us; 32768us; 6us; 60us; 0us; 16412us; 1us; 32768us; 1us; 73us; 1us; 32768us; 6us; 63us; 0us; 16413us; 1us; 32768us; 1us; 73us; 1us; 32768us; 6us; 66us; 0us; 16414us; 1us; 32768us; 1us; 73us; 1us; 32768us; 6us; 69us; 0us; 16415us; 1us; 32768us; 1us; 73us; 1us; 32768us; 6us; 72us; 0us; 16416us; 2us; 16417us; 7us; 74us; 10us; 86us; 12us; 32768us; 0us; 30us; 1us; 96us; 2us; 97us; 3us; 94us; 4us; 92us; 5us; 10us; 6us; 11us; 7us; 12us; 8us; 18us; 9us; 23us; 10us; 24us; 11us; 25us; 1us; 32768us; 8us; 76us; 1us; 16418us; 10us; 80us; 1us; 16419us; 10us; 82us; 1us; 32768us; 1us; 73us; 0us; 16421us; 1us; 32768us; 1us; 73us; 0us; 16422us; 1us; 32768us; 1us; 73us; 0us; 16423us; 1us; 32768us; 1us; 73us; 0us; 16424us; 1us; 32768us; 1us; 73us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 4us; 16434us; 8us; 16430us; 12us; 16430us; 13us; 16430us; 14us; 16430us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 0us; 16435us; 0us; 16436us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 13us; 14us; 27us; 28us; 29us; 30us; 31us; 32us; 34us; 35us; 38us; 39us; 40us; 41us; 44us; 47us; 50us; 52us; 54us; 56us; 57us; 59us; 61us; 63us; 64us; 65us; 78us; 91us; 104us; 117us; 118us; 121us; 134us; 136us; 139us; 141us; 143us; 144us; 147us; 149us; 151us; 152us; 154us; 156us; 157us; 159us; 161us; 162us; 164us; 168us; 169us; 182us; 184us; 187us; 188us; 191us; 192us; 193us; 195us; 197us; 198us; 200us; 202us; 203us; 205us; 207us; 208us; 210us; 212us; 213us; 215us; 217us; 218us; 221us; 234us; 236us; 238us; 240us; 242us; 243us; 245us; 246us; 248us; 249us; 251us; 252us; 254us; 255us; 256us; 257us; 258us; 259us; 264us; 265us; 266us; 267us; 268us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 8us; 8us; 7us; 8us; 4us; 7us; 7us; 6us; 6us; 9us; 9us; 8us; 9us; 1us; 4us; 4us; 3us; 6us; 6us; 6us; 5us; 3us; 5us; 6us; 6us; 6us; 1us; 1us; 3us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 7us; 7us; 8us; 9us; 10us; 11us; 11us; 11us; 11us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 65535us; 16389us; 16390us; 65535us; 16391us; 65535us; 16393us; 16394us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 16398us; 65535us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 16405us; 65535us; 65535us; 16406us; 65535us; 65535us; 16407us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 16409us; 65535us; 16410us; 16411us; 65535us; 65535us; 16412us; 65535us; 65535us; 16413us; 65535us; 65535us; 16414us; 65535us; 65535us; 16415us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16421us; 65535us; 16422us; 65535us; 16423us; 65535us; 16424us; 65535us; 16425us; 16426us; 16427us; 16428us; 16429us; 65535us; 16432us; 16433us; 16434us; 16435us; 16436us; |]
let _fsyacc_reductions ()  =    [| 
# 195 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.LanguageExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 204 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.LanguageExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                            _1
                   )
# 31 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 215 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : DataStorage.WarewolfAtom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                              WarewolfAtomExpression _1
                   )
# 34 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 226 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.ScalarIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                  ScalarExpression _1 
                   )
# 35 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 237 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.RecordSetColumnIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                 RecordSetExpression _1 
                   )
# 36 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 248 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recsetName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                     RecordSetNameExpression _1 
                   )
# 37 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 259 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'variableExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                             ComplexExpression _1 
                   )
# 38 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 270 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'jsonIdentifierExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                   JsonIdentifierExpression _1 
                   )
# 39 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 281 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                      WarewolfAtomExpression (DataString "[[")
                   )
# 40 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 291 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                       WarewolfAtomExpression (DataString "]]")
                   )
# 41 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 301 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                     WarewolfAtomExpression (DataString "(")
                   )
# 42 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 311 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                       WarewolfAtomExpression (DataString ")")
                   )
# 43 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 321 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                              WarewolfAtomExpression (DataString "*")
                   )
# 44 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 331 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                             WarewolfAtomExpression (DataString ".")
                   )
# 45 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 341 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                               WarewolfAtomExpression (DataString "@")
                   )
# 46 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.LanguageExpression));
# 351 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.LanguageExpression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'variableExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                 _1::_2
                   )
# 48 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'variableExpression));
# 363 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.ScalarIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                  [ScalarExpression _1] 
                   )
# 49 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'variableExpression));
# 374 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.RecordSetColumnIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                 [RecordSetExpression _1] 
                   )
# 50 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'variableExpression));
# 385 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                             []
                   )
# 51 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'variableExpression));
# 395 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : DataStorage.WarewolfAtom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                              [WarewolfAtomExpression _1]
                   )
# 52 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'variableExpression));
# 406 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'index)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                          {Name = tryParseRecsetName(_2); Column = tryParseColumn(_7); Index =tryParseIndex(_4) ;}
                   )
# 54 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.RecordSetColumnIdentifier));
# 419 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                      {Name = tryParseRecsetName(_2); Column = tryParseColumn(_7); Index =Star ;}
                   )
# 55 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.RecordSetColumnIdentifier));
# 431 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                    {Name = tryParseRecsetName(_2); Column = tryParseColumn(_6); Index =Last ;}
                   )
# 56 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.RecordSetColumnIdentifier));
# 443 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.LanguageExpression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                                {Name = tryParseRecsetName(_2); Column = tryParseColumn(_7); Index = IndexExpression _4 ;}
                   )
# 57 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.RecordSetColumnIdentifier));
# 456 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                  NameExpression  {Name= _3} 
                   )
# 60 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'jsonIdentifierExpression));
# 467 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'index)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                  IndexNestedNameExpression {ObjectName = _3 ; Next=Terminal ; Index =tryParseIndex(_5) ;}
                   )
# 61 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'jsonIdentifierExpression));
# 479 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                 IndexNestedNameExpression {ObjectName = _3 ; Next=Terminal ; Index =Star  ;}
                   )
# 62 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'jsonIdentifierExpression));
# 490 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                            IndexNestedNameExpression {ObjectName = _3 ; Next=Terminal ; Index =Last  ;}
                   )
# 63 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'jsonIdentifierExpression));
# 501 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                              NestedNameExpression { ObjectName = _3; Next = _5; }
                   )
# 64 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'jsonIdentifierExpression));
# 513 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'index)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                                          IndexNestedNameExpression { ObjectName = _3; Next = _8; Index =tryParseIndex(_5) ;}
                   )
# 65 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'jsonIdentifierExpression));
# 526 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                                         IndexNestedNameExpression { ObjectName = _3; Next = _8; Index =Star ;}
                   )
# 66 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'jsonIdentifierExpression));
# 538 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                                       IndexNestedNameExpression { ObjectName = _3; Next = _7; Index =Last ;}
                   )
# 67 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'jsonIdentifierExpression));
# 550 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.LanguageExpression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                                                   IndexNestedNameExpression { ObjectName = _3; Next = _8; Index = tryParseIndex(IndexExpression _5) ;}
                   )
# 68 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'jsonIdentifierExpression));
# 563 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                      NameExpression  {Name= _1} 
                   )
# 71 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 574 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'index)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                  IndexNestedNameExpression {ObjectName = _1 ; Next=Terminal ; Index =tryParseIndex(_3)  } 
                   )
# 72 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 586 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                 IndexNestedNameExpression {ObjectName = _1 ; Next=Terminal ; Index =Star  } 
                   )
# 73 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 597 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                            IndexNestedNameExpression {ObjectName = _1 ; Next=Terminal ; Index =Last  } 
                   )
# 74 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 608 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.LanguageExpression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                   IndexNestedNameExpression { ObjectName = _1; Next = _6; Index = tryParseIndex(IndexExpression _3) ;}
                   )
# 75 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 621 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'index)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                           IndexNestedNameExpression {ObjectName = _1 ; Next=_6 ; Index =tryParseIndex(_3)  } 
                   )
# 76 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 634 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                          IndexNestedNameExpression {ObjectName = _1 ; Next=_6 ; Index =Star  } 
                   )
# 77 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 646 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                     IndexNestedNameExpression {ObjectName = _1 ; Next=_5 ; Index =Last  } 
                   )
# 78 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 658 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'nestedJsonIdentifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                           NestedNameExpression {ObjectName = _1; Next = _3;} 
                   )
# 79 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'nestedJsonIdentifier));
# 670 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                       {Name = tryParseRecsetName(_2);Index = Last;}
                   )
# 82 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'recsetName));
# 681 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'index)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                          {Name = tryParseRecsetName(_2); Index = _4;}
                   )
# 83 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'recsetName));
# 693 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                         {Name = tryParseRecsetName(_2); Index = Star;}
                   )
# 84 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'recsetName));
# 704 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : LanguageAST.LanguageExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                                                                   {Name = tryParseRecsetName(_2);Index = IndexExpression _4;}
                   )
# 85 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'recsetName));
# 716 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                             IntIndex ( System.Int32.Parse (  _1))
                   )
# 87 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'index));
# 727 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                             IndexExpression ( WarewolfAtomExpression ( tryParseAtom _1))
                   )
# 89 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : 'intindex));
# 738 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                                           _2
                   )
# 91 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : LanguageAST.ScalarIdentifier));
# 749 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                  tryFloatParseAtom _1 
                   )
# 93 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : DataStorage.WarewolfAtom));
# 760 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                tryParseAtom _1 
                   )
# 94 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : DataStorage.WarewolfAtom));
# 771 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                   DataString _1 
                   )
# 95 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : DataStorage.WarewolfAtom));
# 782 "WarewolfLanguage.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                                  DataString _1 
                   )
# 96 "..\WarewolfLanguageParser\WarewolfLanguage.fsy"
                 : DataStorage.WarewolfAtom));
|]
# 794 "WarewolfLanguage.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 15;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : LanguageAST.LanguageExpression =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
