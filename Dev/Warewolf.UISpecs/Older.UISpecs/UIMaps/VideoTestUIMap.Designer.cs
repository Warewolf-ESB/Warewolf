// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Dev2.Studio.UI.Tests.UIMaps.VideoTestUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using Dev2.CodedUI.Tests;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public partial class VideoTestUIMap
    {
        
        /// <summary>
        /// ClickExplorerTab - Use 'ClickExplorerTabParams' to pass parameters into this method.
        /// </summary>
        private void ClickExplorerTab()
        {
            #region Variable Declarations
            WpfTabPage uIExplorerTabPage = this.UIBusinessDesignStudioWindow.UIUI_DocManager_AutoIDCustom.UIPART_UnpinnedTabAreaTabList.UIExplorerTabPage;
            WpfComboBox uIUI_ExplorerServerCbxComboBox = this.UIBusinessDesignStudioWindow.UIExplorerCustom.UIExplorerCustom1.UIUI_ExplorerServerCbxComboBox;
            WinListItem uIRunninganexistingCodListItem = this.UIScreenAnnotationsWindow.UIList1Window.UIRunninganexistingCodListItem;
            WinClient uIRunninganexistingCodClient = this.UIRunninganexistingCodWindow.UIRunninganexistingCodClient;
            WinMenuItem uICloseMenuItem = this.UIItemWindow.UIContextMenu.UICloseMenuItem;
            WinListItem uIAfterTestListItem = this.UIScreenAnnotationsWindow.UIList1Window.UIAfterTestListItem;
            WinClient uIAfterTestClient = this.UIAfterTestWindow.UIAfterTestClient;
            WinMenuItem uIEditTextMenuItem = this.UIItemWindow.UIContextMenu.UIEditTextMenuItem;
            WinEdit uIItemEdit = this.UITextPropertiesWindow.UIItemWindow.UIItemEdit;
            WinButton uICloseButton = this.UITextPropertiesWindow.UICloseWindow.UICloseButton;
            WinButton uICloseButton1 = this.UIScreenAnnotationsWindow.UICloseWindow.UICloseButton;
            #endregion

            // Click 'Explorer' tab
            Mouse.Click(uIExplorerTabPage, new Point(14, 27));

            // Type 'Alt + {F2}' in 'UI_ExplorerServerCbx_AutoID' combo box
            Keyboard.SendKeys(uIUI_ExplorerServerCbxComboBox, this.ClickExplorerTabParams.UIUI_ExplorerServerCbxComboBoxSendKeys, ModifierKeys.Alt);

            // Double-Click 'Running an existing Coded UI Test' list item
            Mouse.DoubleClick(uIRunninganexistingCodListItem, new Point(62, 12));

            // Double-Click 'Running an existing Coded UI Test' list item
            Mouse.DoubleClick(uIRunninganexistingCodListItem, new Point(52, 8));

            // Right-Click 'Running an existing Coded UI Test' client
            Mouse.Click(uIRunninganexistingCodClient, MouseButtons.Right, ModifierKeys.None, new Point(73, 119));

            // Click 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(84, 6));

            // Double-Click 'AfterTest' list item
            Mouse.DoubleClick(uIAfterTestListItem, new Point(40, 2));

            // Move 'AfterTest' client
            Mouse.StartDragging(uIAfterTestClient, new Point(130, 86));
            Mouse.StopDragging(uIAfterTestClient, -29, -166);

            // Right-Click 'AfterTest' client
            Mouse.Click(uIAfterTestClient, MouseButtons.Right, ModifierKeys.None, new Point(130, 82));

            // Click 'Edit Text ...' menu item
            Mouse.Click(uIEditTextMenuItem, new Point(112, 21));

            // Type 'I have clicked the "Explorer" tab. A single click is enough for one step.' in text box
            uIItemEdit.Text = this.ClickExplorerTabParams.UIItemEditText;

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(28, 10));

            // Move 'AfterTest' client
            Mouse.StartDragging(uIAfterTestClient, new Point(272, 164));
            Mouse.StopDragging(uIAfterTestClient, 20, -74);

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(23, 6));

            // Click 'Explorer' tab
            Mouse.Click(uIExplorerTabPage, new Point(12, 24));

            // Type '{CapsLock}{CapsLock}{CapsLock}{CapsLock}' in 'UI_ExplorerServerCbx_AutoID' combo box
            Keyboard.SendKeys(uIUI_ExplorerServerCbxComboBox, this.ClickExplorerTabParams.UIUI_ExplorerServerCbxComboBoxSendKeys1, ModifierKeys.None);

            // Type 'Alt + {F2}' in 'UI_ExplorerServerCbx_AutoID' combo box
            Keyboard.SendKeys(uIUI_ExplorerServerCbxComboBox, this.ClickExplorerTabParams.UIUI_ExplorerServerCbxComboBoxSendKeys2, ModifierKeys.Alt);

            // Type 'Alt + {F2}' in 'UI_ExplorerServerCbx_AutoID' combo box
            Keyboard.SendKeys(uIUI_ExplorerServerCbxComboBox, this.ClickExplorerTabParams.UIUI_ExplorerServerCbxComboBoxSendKeys3, ModifierKeys.Alt);

            // Right-Click 'AfterTest' client
            Mouse.Click(uIAfterTestClient, MouseButtons.Right, ModifierKeys.None, new Point(155, 57));

            // Click 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(64, 11));

            // Type 'Alt + {F2}' in 'UI_ExplorerServerCbx_AutoID' combo box
            Keyboard.SendKeys(uIUI_ExplorerServerCbxComboBox, this.ClickExplorerTabParams.UIUI_ExplorerServerCbxComboBoxSendKeys4, ModifierKeys.Alt);

            // Type 'Alt + {F2}' in 'UI_ExplorerServerCbx_AutoID' combo box
            Keyboard.SendKeys(uIUI_ExplorerServerCbxComboBox, this.ClickExplorerTabParams.UIUI_ExplorerServerCbxComboBoxSendKeys5, ModifierKeys.Alt);

            // Type 'Alt + {F2}' in 'UI_ExplorerServerCbx_AutoID' combo box
            Keyboard.SendKeys(uIUI_ExplorerServerCbxComboBox, this.ClickExplorerTabParams.UIUI_ExplorerServerCbxComboBoxSendKeys6, ModifierKeys.Alt);
        }
        
        #region Properties
        public virtual ClickExplorerTabParams ClickExplorerTabParams
        {
            get
            {
                if ((this.mClickExplorerTabParams == null))
                {
                    this.mClickExplorerTabParams = new ClickExplorerTabParams();
                }
                return this.mClickExplorerTabParams;
            }
        }
        
        public UIBusinessDesignStudioWindow UIBusinessDesignStudioWindow
        {
            get
            {
                if ((this.mUIBusinessDesignStudioWindow == null))
                {
                    this.mUIBusinessDesignStudioWindow = new UIBusinessDesignStudioWindow();
                }
                return this.mUIBusinessDesignStudioWindow;
            }
        }
        
        public UIScreenAnnotationsWindow UIScreenAnnotationsWindow
        {
            get
            {
                if ((this.mUIScreenAnnotationsWindow == null))
                {
                    this.mUIScreenAnnotationsWindow = new UIScreenAnnotationsWindow();
                }
                return this.mUIScreenAnnotationsWindow;
            }
        }
        
        public UIRunninganexistingCodWindow UIRunninganexistingCodWindow
        {
            get
            {
                if ((this.mUIRunninganexistingCodWindow == null))
                {
                    this.mUIRunninganexistingCodWindow = new UIRunninganexistingCodWindow();
                }
                return this.mUIRunninganexistingCodWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIAfterTestWindow UIAfterTestWindow
        {
            get
            {
                if ((this.mUIAfterTestWindow == null))
                {
                    this.mUIAfterTestWindow = new UIAfterTestWindow();
                }
                return this.mUIAfterTestWindow;
            }
        }
        
        public UITextPropertiesWindow UITextPropertiesWindow
        {
            get
            {
                if ((this.mUITextPropertiesWindow == null))
                {
                    this.mUITextPropertiesWindow = new UITextPropertiesWindow();
                }
                return this.mUITextPropertiesWindow;
            }
        }
        #endregion
        
        #region Fields
        private ClickExplorerTabParams mClickExplorerTabParams;
        
        private UIBusinessDesignStudioWindow mUIBusinessDesignStudioWindow;
        
        private UIScreenAnnotationsWindow mUIScreenAnnotationsWindow;
        
        private UIRunninganexistingCodWindow mUIRunninganexistingCodWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIAfterTestWindow mUIAfterTestWindow;
        
        private UITextPropertiesWindow mUITextPropertiesWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ClickExplorerTab'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ClickExplorerTabParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Alt + {F2}' in 'UI_ExplorerServerCbx_AutoID' combo box
        /// </summary>
        public string UIUI_ExplorerServerCbxComboBoxSendKeys = "{F2}";
        
        /// <summary>
        /// Type 'I have clicked the "Explorer" tab. A single click is enough for one step.' in text box
        /// </summary>
        public string UIItemEditText = "I have clicked the \"Explorer\" tab. A single click is enough for one step.";
        
        /// <summary>
        /// Type '{CapsLock}{CapsLock}{CapsLock}{CapsLock}' in 'UI_ExplorerServerCbx_AutoID' combo box
        /// </summary>
        public string UIUI_ExplorerServerCbxComboBoxSendKeys1 = "{CapsLock}{CapsLock}{CapsLock}{CapsLock}";
        
        /// <summary>
        /// Type 'Alt + {F2}' in 'UI_ExplorerServerCbx_AutoID' combo box
        /// </summary>
        public string UIUI_ExplorerServerCbxComboBoxSendKeys2 = "{F2}";
        
        /// <summary>
        /// Type 'Alt + {F2}' in 'UI_ExplorerServerCbx_AutoID' combo box
        /// </summary>
        public string UIUI_ExplorerServerCbxComboBoxSendKeys3 = "{F2}";
        
        /// <summary>
        /// Type 'Alt + {F2}' in 'UI_ExplorerServerCbx_AutoID' combo box
        /// </summary>
        public string UIUI_ExplorerServerCbxComboBoxSendKeys4 = "{F2}";
        
        /// <summary>
        /// Type 'Alt + {F2}' in 'UI_ExplorerServerCbx_AutoID' combo box
        /// </summary>
        public string UIUI_ExplorerServerCbxComboBoxSendKeys5 = "{F2}";
        
        /// <summary>
        /// Type 'Alt + {F2}' in 'UI_ExplorerServerCbx_AutoID' combo box
        /// </summary>
        public string UIUI_ExplorerServerCbxComboBoxSendKeys6 = "{F2}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIBusinessDesignStudioWindow : WpfWindow
    {
        
        public UIBusinessDesignStudioWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = TestBase.GetStudioWindowName();
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add(TestBase.GetStudioWindowName());
            #endregion
        }
        
        #region Properties
        public UIUI_DocManager_AutoIDCustom UIUI_DocManager_AutoIDCustom
        {
            get
            {
                if ((this.mUIUI_DocManager_AutoIDCustom == null))
                {
                    this.mUIUI_DocManager_AutoIDCustom = new UIUI_DocManager_AutoIDCustom(this);
                }
                return this.mUIUI_DocManager_AutoIDCustom;
            }
        }
        
        public UIExplorerCustom UIExplorerCustom
        {
            get
            {
                if ((this.mUIExplorerCustom == null))
                {
                    this.mUIExplorerCustom = new UIExplorerCustom(this);
                }
                return this.mUIExplorerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_DocManager_AutoIDCustom mUIUI_DocManager_AutoIDCustom;
        
        private UIExplorerCustom mUIExplorerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIUI_DocManager_AutoIDCustom : WpfCustom
    {
        
        public UIUI_DocManager_AutoIDCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties["AutomationId"] = "UI_DocManager_AutoID";
            this.WindowTitles.Add(TestBase.GetStudioWindowName());
            #endregion
        }
        
        #region Properties
        public UIPART_UnpinnedTabAreaTabList UIPART_UnpinnedTabAreaTabList
        {
            get
            {
                if ((this.mUIPART_UnpinnedTabAreaTabList == null))
                {
                    this.mUIPART_UnpinnedTabAreaTabList = new UIPART_UnpinnedTabAreaTabList(this);
                }
                return this.mUIPART_UnpinnedTabAreaTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIPART_UnpinnedTabAreaTabList mUIPART_UnpinnedTabAreaTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIPART_UnpinnedTabAreaTabList : WpfTabList
    {
        
        public UIPART_UnpinnedTabAreaTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaLeft";
            this.WindowTitles.Add(TestBase.GetStudioWindowName());
            #endregion
        }
        
        #region Properties
        public WpfTabPage UIExplorerTabPage
        {
            get
            {
                if ((this.mUIExplorerTabPage == null))
                {
                    this.mUIExplorerTabPage = new WpfTabPage(this);
                    #region Search Criteria
                    this.mUIExplorerTabPage.SearchProperties[WpfTabPage.PropertyNames.Name] = "Explorer";
                    this.mUIExplorerTabPage.WindowTitles.Add(TestBase.GetStudioWindowName());
                    #endregion
                }
                return this.mUIExplorerTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WpfTabPage mUIExplorerTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIExplorerCustom : WpfCustom
    {
        
        public UIExplorerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties["AutomationId"] = "UI_ExplorerPane_AutoID";
            this.WindowTitles.Add(TestBase.GetStudioWindowName());
            #endregion
        }
        
        #region Properties
        public UIExplorerCustom1 UIExplorerCustom1
        {
            get
            {
                if ((this.mUIExplorerCustom1 == null))
                {
                    this.mUIExplorerCustom1 = new UIExplorerCustom1(this);
                }
                return this.mUIExplorerCustom1;
            }
        }
        #endregion
        
        #region Fields
        private UIExplorerCustom1 mUIExplorerCustom1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIExplorerCustom1 : WpfCustom
    {
        
        public UIExplorerCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties["AutomationId"] = "Explorer";
            this.WindowTitles.Add(TestBase.GetStudioWindowName());
            #endregion
        }
        
        #region Properties
        public WpfComboBox UIUI_ExplorerServerCbxComboBox
        {
            get
            {
                if ((this.mUIUI_ExplorerServerCbxComboBox == null))
                {
                    this.mUIUI_ExplorerServerCbxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIUI_ExplorerServerCbxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_ExplorerServerCbx_AutoID";
                    this.mUIUI_ExplorerServerCbxComboBox.WindowTitles.Add(TestBase.GetStudioWindowName());
                    #endregion
                }
                return this.mUIUI_ExplorerServerCbxComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mUIUI_ExplorerServerCbxComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIScreenAnnotationsWindow : WinWindow
    {
        
        public UIScreenAnnotationsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Screen Annotations";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Screen Annotations");
            #endregion
        }
        
        #region Properties
        public UIList1Window UIList1Window
        {
            get
            {
                if ((this.mUIList1Window == null))
                {
                    this.mUIList1Window = new UIList1Window(this);
                }
                return this.mUIList1Window;
            }
        }
        
        public UICloseWindow UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new UICloseWindow(this);
                }
                return this.mUICloseWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIList1Window mUIList1Window;
        
        private UICloseWindow mUICloseWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIList1Window : WinWindow
    {
        
        public UIList1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1053";
            this.WindowTitles.Add("Screen Annotations");
            #endregion
        }
        
        #region Properties
        public WinListItem UIRunninganexistingCodListItem
        {
            get
            {
                if ((this.mUIRunninganexistingCodListItem == null))
                {
                    this.mUIRunninganexistingCodListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIRunninganexistingCodListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Running an existing Coded UI Test";
                    this.mUIRunninganexistingCodListItem.WindowTitles.Add("Screen Annotations");
                    #endregion
                }
                return this.mUIRunninganexistingCodListItem;
            }
        }
        
        public WinListItem UIAfterTestListItem
        {
            get
            {
                if ((this.mUIAfterTestListItem == null))
                {
                    this.mUIAfterTestListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIAfterTestListItem.SearchProperties[WinListItem.PropertyNames.Name] = "AfterTest";
                    this.mUIAfterTestListItem.WindowTitles.Add("Screen Annotations");
                    #endregion
                }
                return this.mUIAfterTestListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIRunninganexistingCodListItem;
        
        private WinListItem mUIAfterTestListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UICloseWindow : WinWindow
    {
        
        public UICloseWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Screen Annotations");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Screen Annotations");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIRunninganexistingCodWindow : WinWindow
    {
        
        public UIRunninganexistingCodWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Running an existing Coded UI Test";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "Afx:", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Running an existing Coded UI Test");
            #endregion
        }
        
        #region Properties
        public WinClient UIRunninganexistingCodClient
        {
            get
            {
                if ((this.mUIRunninganexistingCodClient == null))
                {
                    this.mUIRunninganexistingCodClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIRunninganexistingCodClient.SearchProperties[WinControl.PropertyNames.Name] = "Running an existing Coded UI Test";
                    this.mUIRunninganexistingCodClient.WindowTitles.Add("Running an existing Coded UI Test");
                    #endregion
                }
                return this.mUIRunninganexistingCodClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIRunninganexistingCodClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Context";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32768";
            #endregion
        }
        
        #region Properties
        public UIContextMenu UIContextMenu
        {
            get
            {
                if ((this.mUIContextMenu == null))
                {
                    this.mUIContextMenu = new UIContextMenu(this);
                }
                return this.mUIContextMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIContextMenu mUIContextMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIContextMenu : WinMenu
    {
        
        public UIContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Context";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UIEditTextMenuItem
        {
            get
            {
                if ((this.mUIEditTextMenuItem == null))
                {
                    this.mUIEditTextMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIEditTextMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Edit Text ...";
                    #endregion
                }
                return this.mUIEditTextMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUIEditTextMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIAfterTestWindow : WinWindow
    {
        
        public UIAfterTestWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "AfterTest";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "Afx:", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("AfterTest");
            #endregion
        }
        
        #region Properties
        public WinClient UIAfterTestClient
        {
            get
            {
                if ((this.mUIAfterTestClient == null))
                {
                    this.mUIAfterTestClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIAfterTestClient.SearchProperties[WinControl.PropertyNames.Name] = "AfterTest";
                    this.mUIAfterTestClient.WindowTitles.Add("AfterTest");
                    #endregion
                }
                return this.mUIAfterTestClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIAfterTestClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITextPropertiesWindow : WinWindow
    {
        
        public UITextPropertiesWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Text Properties";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Text Properties");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICloseWindow1 UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new UICloseWindow1(this);
                }
                return this.mUICloseWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UICloseWindow1 mUICloseWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1055";
            this.WindowTitles.Add("Text Properties");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Text Properties");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UICloseWindow1 : WinWindow
    {
        
        public UICloseWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Text Properties");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Text Properties");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
